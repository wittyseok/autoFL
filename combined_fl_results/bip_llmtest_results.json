{
    "summary": {
        "total": 445,
        "acc@1": 132,
        "acc@2": 159,
        "acc@3": 162,
        "acc@4": 162,
        "acc@5": 163,
        "acc@6": 164,
        "acc@7": 166,
        "acc@8": 166,
        "acc@9": 167,
        "acc@10": 169
    },
    "buggy_methods": {
        "PySnooper_1": {},
        "PySnooper_3": {
            "pysnooper.pysnooper.get_write_function(output)": {
                "autofl_rank": 4
            },
            "pysnooper.pysnooper.write(s)": {
                "autofl_rank": 2
            }
        },
        "ansible_1": {
            "lib.ansible.galaxy.collection.verify_collections(collections, search_paths, apis, validate_certs, ignore_errors, allow_pre_release=False)": {
                "autofl_rank": 2
            }
        },
        "ansible_14": {
            "lib.ansible.galaxy.api.GalaxyAPI.fetch_role_related(self, related, role_id)": {
                "autofl_rank": 210
            }
        },
        "ansible_15": {
            "lib.ansible.modules.network.eos.eos_eapi.map_obj_to_commands(updates, module, warnings)": {
                "autofl_rank": 1199
            }
        },
        "ansible_16": {
            "lib.ansible.module_utils.facts.hardware.linux.LinuxHardware.get_cpu_facts(self, collected_facts=None)": {
                "autofl_rank": 1
            }
        },
        "ansible_17": {
            "lib.ansible.module_utils.facts.hardware.linux.LinuxHardware.get_mount_info(self, mount, device, uuids)": {
                "autofl_rank": 585
            },
            "lib.ansible.module_utils.facts.hardware.linux.LinuxHardware.get_mount_facts(self)": {
                "autofl_rank": 1
            }
        },
        "ansible_18": {
            "lib.ansible.cli.galaxy.GalaxyCLI.init_parser(self)": {
                "autofl_rank": 53
            },
            "lib.ansible.cli.galaxy.GalaxyCLI.execute_init(self)": {
                "autofl_rank": 51
            }
        },
        "ansible_2": {
            "lib.ansible.utils.version._Alpha.__gt__(self, other)": {
                "autofl_rank": 1362
            },
            "lib.ansible.utils.version._Numeric.__gt__(self, other)": {
                "autofl_rank": 1370
            }
        },
        "ansible_3": {
            "lib.ansible.module_utils.facts.system.distribution.DistributionFiles.parse_distribution_file_Debian(self, name, data, path, collected_facts)": {
                "autofl_rank": 624
            }
        },
        "ansible_4": {
            "lib.ansible.playbook.collectionsearch.CollectionSearch._load_collections(self, attr, ds)": {
                "autofl_rank": 1
            }
        },
        "ansible_5": {
            "lib.ansible.module_utils.common.validation.check_required_arguments(argument_spec, module_parameters)": {
                "autofl_rank": 1
            }
        },
        "ansible_6": {
            "lib.ansible.galaxy.collection.CollectionRequirement._meets_requirements(self, version, requirements, parent)": {
                "autofl_rank": 246
            },
            "lib.ansible.galaxy.collection.CollectionRequirement.from_path(b_path, force, parent=None)": {
                "autofl_rank": 1
            },
            "lib.ansible.galaxy.collection._get_collection_info(dep_map, existing_collections, collection, requirement, source, b_temp_path, apis, validate_certs, force, parent=None)": {
                "autofl_rank": 261
            }
        },
        "black_1": {},
        "black_10": {
            "blib2to3.pgen2.driver.Driver._partially_consume_prefix(self, prefix, column)": {
                "autofl_rank": 138
            }
        },
        "black_11": {
            "black.split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False)": {
                "autofl_rank": 128
            },
            "black.normalize_prefix(leaf: Leaf, *, inside_brackets: bool)": {
                "autofl_rank": 115
            },
            "black.should_explode(line: Line, opening_bracket: Leaf)": {
                "autofl_rank": 126
            }
        },
        "black_12": {
            "black.BracketTracker.maybe_increment_for_loop_variable(self, leaf: Leaf)": {
                "autofl_rank": 9
            },
            "black.BracketTracker.maybe_increment_lambda_arguments(self, leaf: Leaf)": {
                "autofl_rank": 10
            }
        },
        "black_13": {
            "blib2to3.pgen2.tokenize.generate_tokens(readline)": {
                "autofl_rank": 144
            }
        },
        "black_14": {
            "black.get_future_imports(node: Node)": {
                "autofl_rank": 1
            }
        },
        "black_15": {
            "black.DebugVisitor.show(cls, code: str)": {
                "autofl_rank": 12
            },
            "black.EmptyLineTracker.maybe_empty_lines(self, current_line: Line)": {
                "autofl_rank": 16
            },
            "black.LineGenerator.line(self, indent: int=0, type: Type[Line]=Line)": {
                "autofl_rank": 41
            },
            "black.LineGenerator.visit_unformatted(self, node: LN)": {
                "autofl_rank": 53
            },
            "black.container_of(leaf: Leaf)": {
                "autofl_rank": 72
            },
            "black.generate_comments(leaf: LN)": {
                "autofl_rank": 87
            },
            "black.split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False)": {
                "autofl_rank": 128
            },
            "black.normalize_fmt_off(node: Node)": {
                "autofl_rank": 113
            },
            "black.hide_fmt_off(node: Node)": {
                "autofl_rank": 93
            },
            "black.generate_ignored_nodes(leaf: Leaf)": {
                "autofl_rank": 88
            }
        },
        "black_16": {
            "black.gen_python_files_in_dir(path: Path, root: Path, include: Pattern[str], exclude: Pattern[str], report: 'Report')": {
                "autofl_rank": 1
            }
        },
        "black_17": {
            "black.decode_bytes(src: bytes)": {
                "autofl_rank": 69
            },
            "black.lib2to3_parse(src_txt: str)": {
                "autofl_rank": 2
            }
        },
        "black_18": {
            "black.format_file_in_place(src: Path, line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT, lock: Any=None)": {
                "autofl_rank": 77
            },
            "black.format_stdin_to_stdout(line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, mode: FileMode=FileMode.AUTO_DETECT)": {
                "autofl_rank": 78
            },
            "black.lib2to3_parse(src_txt: str)": {
                "autofl_rank": 99
            }
        },
        "black_19": {
            "black.EmptyLineTracker._maybe_empty_lines(self, current_line: Line)": {
                "autofl_rank": 10
            }
        },
        "black_2": {},
        "black_20": {
            "black.format_file_in_place(src: Path, line_length: int, fast: bool, write_back: WriteBack=WriteBack.NO, lock: Any=None)": {
                "autofl_rank": 65
            }
        },
        "black_22": {
            "black.Line.append(self, leaf: Leaf, preformatted: bool=False)": {
                "autofl_rank": 13
            },
            "black.Line.maybe_remove_trailing_comma(self, closing: Leaf)": {
                "autofl_rank": 25
            },
            "black.Line.maybe_adapt_standalone_comment(self, comment: Leaf)": {
                "autofl_rank": 22
            },
            "black.Line.__str__(self)": {
                "autofl_rank": 12
            },
            "black.split_line(line: Line, line_length: int, inner: bool=False, py36: bool=False)": {
                "autofl_rank": 66
            },
            "black.left_hand_split(line: Line, py36: bool=False)": {
                "autofl_rank": 60
            },
            "black.right_hand_split(line: Line, py36: bool=False)": {
                "autofl_rank": 65
            },
            "black.delimiter_split(line: Line, py36: bool=False)": {
                "autofl_rank": 51
            }
        },
        "black_23": {
            "black.lib2to3_parse(src_txt: str)": {
                "autofl_rank": 53
            },
            "black.whitespace(leaf: Leaf)": {
                "autofl_rank": 60
            },
            "black.assert_equivalent(src: str, dst: str)": {
                "autofl_rank": 41
            }
        },
        "black_3": {},
        "black_4": {
            "black.EmptyLineTracker.maybe_empty_lines(self, current_line: Line)": {
                "autofl_rank": 14
            }
        },
        "black_5": {
            "black.Line.maybe_remove_trailing_comma(self, closing: Leaf)": {
                "autofl_rank": 34
            },
            "black.bracket_split_build_line(leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool=False)": {
                "autofl_rank": 61
            }
        },
        "black_6": {
            "black.get_grammars(target_versions: Set[TargetVersion])": {
                "autofl_rank": 94
            },
            "black.lib2to3_parse(src_txt: str, target_versions: Iterable[TargetVersion]=())": {
                "autofl_rank": 109
            }
        },
        "black_7": {
            "black.normalize_invisible_parens(node: Node, parens_after: Set[str])": {
                "autofl_rank": 116
            }
        },
        "black_8": {
            "black.bracket_split_build_line(leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool=False)": {
                "autofl_rank": 61
            }
        },
        "black_9": {
            "black.get_grammars(target_versions: Set[TargetVersion])": {
                "autofl_rank": 92
            }
        },
        "cookiecutter_1": {
            "cookiecutter.generate.generate_context(context_file='cookiecutter.json', default_context=None, extra_context=None)": {
                "autofl_rank": 1
            }
        },
        "cookiecutter_2": {
            "cookiecutter.hooks.find_hook(hook_name, hooks_dir='hooks')": {
                "autofl_rank": 1
            },
            "cookiecutter.hooks.run_hook(hook_name, project_dir, context)": {
                "autofl_rank": 2
            }
        },
        "cookiecutter_3": {
            "cookiecutter.prompt.read_user_choice(var_name, options)": {
                "autofl_rank": 1
            }
        },
        "cookiecutter_4": {
            "cookiecutter.generate.generate_files(repo_dir, context=None, output_dir='.', overwrite_if_exists=False)": {
                "autofl_rank": 11
            },
            "cookiecutter.hooks.run_script(script_path, cwd='.')": {
                "autofl_rank": 14
            },
            "cookiecutter.hooks.run_script_with_context(script_path, cwd, context)": {
                "autofl_rank": 15
            },
            "cookiecutter.hooks.run_hook(hook_name, project_dir, context)": {
                "autofl_rank": 1
            }
        },
        "fastapi_1": {
            "fastapi.applications.FastAPI.get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None)": {
                "autofl_rank": 213
            },
            "fastapi.applications.FastAPI.post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[routing.APIRoute]=None)": {
                "autofl_rank": 217
            },
            "fastapi.routing._prepare_response_content(res: Any, *, by_alias: bool=True, exclude_unset: bool)": {
                "autofl_rank": 281
            },
            "fastapi.routing.serialize_response(*, field: ModelField=None, response_content: Any, include: Union[SetIntStr, DictIntStrAny]=None, exclude: Union[SetIntStr, DictIntStrAny]=set(), by_alias: bool=True, exclude_unset: bool=False, is_coroutine: bool=True)": {
                "autofl_rank": 286
            },
            "fastapi.routing.get_request_handler(dependant: Dependant, body_field: ModelField=None, status_code: int=200, response_class: Type[Response]=JSONResponse, response_field: ModelField=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, dependency_overrides_provider: Any=None)": {
                "autofl_rank": 284
            },
            "fastapi.routing.app(request: Request)": {
                "autofl_rank": 282
            },
            "fastapi.routing.APIRoute.__init__(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, name: str=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Optional[Type[Response]]=None, dependency_overrides_provider: Any=None, callbacks: Optional[List['APIRoute']]=None)": {
                "autofl_rank": 272
            },
            "fastapi.routing.APIRoute.get_route_handler(self)": {
                "autofl_rank": 273
            },
            "fastapi.routing.APIRouter.add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, route_class_override: Optional[Type[APIRoute]]=None, callbacks: List[APIRoute]=None)": {
                "autofl_rank": 275
            },
            "fastapi.routing.APIRouter.api_route(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: List[str]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None)": {
                "autofl_rank": 276
            },
            "fastapi.routing.APIRouter.decorator(func: Callable)": {
                "autofl_rank": 277
            },
            "fastapi.routing.APIRouter.include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None)": {
                "autofl_rank": 279
            },
            "fastapi.routing.APIRouter.get(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None)": {
                "autofl_rank": 278
            },
            "fastapi.routing.APIRouter.post(self, path: str, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=None, response_model_exclude_unset: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None, callbacks: List[APIRoute]=None)": {
                "autofl_rank": 280
            },
            "fastapi.openapi.utils.get_openapi_security_definitions(flat_dependant: Dependant)": {
                "autofl_rank": 263
            },
            "fastapi.openapi.utils.get_openapi(*, title: str, version: str, openapi_version: str='3.0.2', description: str=None, routes: Sequence[BaseRoute], openapi_prefix: str='')": {
                "autofl_rank": 257
            },
            "fastapi.encoders.jsonable_encoder(obj: Any, include: Union[SetIntStr, DictIntStrAny]=None, exclude: Union[SetIntStr, DictIntStrAny]=set(), by_alias: bool=True, skip_defaults: bool=None, exclude_unset: bool=False, include_none: bool=True, custom_encoder: dict={}, sqlalchemy_safe: bool=True)": {
                "autofl_rank": 1
            }
        },
        "fastapi_10": {
            "fastapi.routing.serialize_response(*, field: Field=None, response: Response, include: Set[str]=None, exclude: Set[str]=set(), by_alias: bool=True, skip_defaults: bool=False)": {
                "autofl_rank": 208
            }
        },
        "fastapi_11": {
            "fastapi.dependencies.utils.is_scalar_field(field: Field)": {
                "autofl_rank": 175
            }
        },
        "fastapi_12": {
            "fastapi.security.http.HTTPBearer.__call__(self, request: Request)": {
                "autofl_rank": 186
            }
        },
        "fastapi_13": {},
        "fastapi_14": {},
        "fastapi_15": {},
        "fastapi_16": {
            "fastapi.encoders.jsonable_encoder(obj: Any, include: Set[str]=None, exclude: Set[str]=set(), by_alias: bool=False, include_none: bool=True, custom_encoder: dict={})": {
                "autofl_rank": 1
            }
        },
        "fastapi_2": {},
        "fastapi_3": {
            "fastapi.routing.serialize_response(*, field: ModelField=None, response_content: Any, include: Union[SetIntStr, DictIntStrAny]=None, exclude: Union[SetIntStr, DictIntStrAny]=set(), by_alias: bool=True, exclude_unset: bool=False, is_coroutine: bool=True)": {
                "autofl_rank": 1
            }
        },
        "fastapi_4": {
            "fastapi.openapi.utils.get_openapi_path(*, route: routing.APIRoute, model_name_map: Dict[Type, str])": {
                "autofl_rank": 251
            }
        },
        "fastapi_5": {
            "fastapi.utils.create_cloned_field(field: ModelField)": {
                "autofl_rank": 287
            }
        },
        "fastapi_6": {
            "fastapi.dependencies.utils.request_body_to_args(required_params: List[ModelField], received_body: Optional[Union[Dict[str, Any], FormData]])": {
                "autofl_rank": 230
            }
        },
        "fastapi_7": {
            "fastapi.exception_handlers.request_validation_exception_handler(request: Request, exc: RequestValidationError)": {
                "autofl_rank": 1
            }
        },
        "fastapi_8": {
            "fastapi.routing.APIRouter.add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any]=None, status_code: int=200, tags: List[str]=None, dependencies: Sequence[params.Depends]=None, summary: str=None, description: str=None, response_description: str='Successful Response', responses: Dict[Union[int, str], Dict[str, Any]]=None, deprecated: bool=None, methods: Optional[Union[Set[str], List[str]]]=None, operation_id: str=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_skip_defaults: bool=False, include_in_schema: bool=True, response_class: Type[Response]=None, name: str=None)": {
                "autofl_rank": 208
            },
            "fastapi.routing.APIRouter.include_router(self, router: 'APIRouter', *, prefix: str='', tags: List[str]=None, dependencies: Sequence[params.Depends]=None, responses: Dict[Union[int, str], Dict[str, Any]]=None, default_response_class: Optional[Type[Response]]=None)": {
                "autofl_rank": 212
            }
        },
        "fastapi_9": {
            "fastapi.dependencies.utils.get_body_field(*, dependant: Dependant, name: str)": {
                "autofl_rank": 168
            }
        },
        "httpie_1": {
            "httpie.downloads.get_unique_filename(filename, exists=os.path.exists)": {
                "autofl_rank": 1
            }
        },
        "httpie_2": {
            "httpie.client.get_response(args, config_dir)": {
                "autofl_rank": 7
            },
            "httpie.core.main(args=sys.argv[1:], env=Environment(), error=None)": {
                "autofl_rank": 20
            }
        },
        "httpie_3": {
            "httpie.sessions.Session.update_headers(self, request_headers)": {
                "autofl_rank": 133
            }
        },
        "httpie_4": {
            "httpie.models.HTTPRequest.headers(self)": {
                "autofl_rank": 69
            }
        },
        "httpie_5": {},
        "keras_1": {
            "keras.initializers.VarianceScaling.__call__(self, shape, dtype=None)": {
                "autofl_rank": 266
            },
            "keras.initializers.Orthogonal.__call__(self, shape, dtype=None)": {
                "autofl_rank": 263
            },
            "keras.backend.tensorflow_backend.update(x, new_x)": {
                "autofl_rank": 72
            },
            "keras.backend.tensorflow_backend.update_add(x, increment)": {
                "autofl_rank": 73
            }
        },
        "keras_10": {
            "keras.engine.training_utils.standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)": {
                "autofl_rank": 1
            }
        },
        "keras_11": {
            "keras.engine.training_generator.fit_generator(model, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 412
            },
            "keras.engine.training_generator.evaluate_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 411
            },
            "keras.engine.training_generator.predict_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 413
            }
        },
        "keras_13": {
            "keras.engine.training_generator.fit_generator(model, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 410
            }
        },
        "keras_15": {
            "keras.callbacks.CSVLogger.__init__(self, filename, separator=',', append=False)": {
                "autofl_rank": 192
            },
            "keras.callbacks.CSVLogger.on_train_begin(self, logs=None)": {
                "autofl_rank": 194
            },
            "keras.callbacks.CSVLogger.on_epoch_end(self, epoch, logs=None)": {
                "autofl_rank": 1
            },
            "keras.callbacks.CustomDialect.on_epoch_end(self, epoch, logs=None)": {
                "autofl_rank": 215
            }
        },
        "keras_16": {
            "keras.engine.sequential.Sequential.__init__(self, layers=None, name=None)": {
                "autofl_rank": 379
            },
            "keras.engine.sequential.Sequential.build(self, input_shape=None)": {
                "autofl_rank": 381
            },
            "keras.engine.sequential.Sequential.get_config(self)": {
                "autofl_rank": 383
            }
        },
        "keras_17": {
            "keras.metrics.sparse_categorical_accuracy(y_true, y_pred)": {
                "autofl_rank": 1
            }
        },
        "keras_18": {
            "keras.backend.tensorflow_backend.Function.__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)": {
                "autofl_rank": 32
            },
            "keras.backend.tensorflow_backend.Function._make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)": {
                "autofl_rank": 35
            },
            "keras.backend.tensorflow_backend.Function._call(self, inputs)": {
                "autofl_rank": 33
            },
            "keras.backend.tensorflow_backend.Function.__call__(self, inputs)": {
                "autofl_rank": 31
            }
        },
        "keras_19": {
            "keras.layers.recurrent.StackedRNNCells.__init__(self, cells, **kwargs)": {
                "autofl_rank": 837
            },
            "keras.layers.recurrent.StackedRNNCells.call(self, inputs, states, constants=None, **kwargs)": {
                "autofl_rank": 839
            },
            "keras.layers.recurrent.StackedRNNCells.build(self, input_shape)": {
                "autofl_rank": 838
            },
            "keras.layers.recurrent.RNN.compute_output_shape(self, input_shape)": {
                "autofl_rank": 803
            },
            "keras.layers.recurrent.SimpleRNNCell.__init__(self, units, activation='tanh', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, **kwargs)": {
                "autofl_rank": 833
            },
            "keras.layers.recurrent.GRUCell.__init__(self, units, activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation=1, reset_after=False, **kwargs)": {
                "autofl_rank": 771
            },
            "keras.layers.recurrent.LSTMCell.__init__(self, units, activation='tanh', recurrent_activation='hard_sigmoid', use_bias=True, kernel_initializer='glorot_uniform', recurrent_initializer='orthogonal', bias_initializer='zeros', unit_forget_bias=True, kernel_regularizer=None, recurrent_regularizer=None, bias_regularizer=None, kernel_constraint=None, recurrent_constraint=None, bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation=1, **kwargs)": {
                "autofl_rank": 796
            }
        },
        "keras_2": {
            "keras.backend.numpy_backend.binary_crossentropy(target, output, from_logits=False)": {
                "autofl_rank": 57
            }
        },
        "keras_20": {
            "keras.backend.tensorflow_backend._preprocess_conv2d_input(x, data_format)": {
                "autofl_rank": 45
            },
            "keras.backend.tensorflow_backend.conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None)": {
                "autofl_rank": 72
            },
            "keras.utils.conv_utils.deconv_length(dim_size, stride_size, kernel_size, padding, output_padding)": {
                "autofl_rank": 981
            },
            "keras.layers.convolutional.Conv2DTranspose.__init__(self, filters, kernel_size, strides=(1, 1), padding='valid', output_padding=None, data_format=None, activation=None, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None, **kwargs)": {
                "autofl_rank": 483
            },
            "keras.layers.convolutional.Conv2DTranspose.call(self, inputs)": {
                "autofl_rank": 485
            },
            "keras.layers.convolutional.Conv2DTranspose.compute_output_shape(self, input_shape)": {
                "autofl_rank": 486
            }
        },
        "keras_24": {
            "keras.callbacks.TensorBoard.set_model(self, model)": {
                "autofl_rank": 292
            }
        },
        "keras_25": {
            "keras.applications.imagenet_utils._preprocess_numpy_input(x, data_format, mode)": {
                "autofl_rank": 23
            }
        },
        "keras_26": {
            "keras.backend.tensorflow_backend.rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None)": {
                "autofl_rank": 196
            },
            "keras.backend.tensorflow_backend._step(time, output_ta_t, *states)": {
                "autofl_rank": 87
            }
        },
        "keras_27": {},
        "keras_28": {
            "keras.preprocessing.sequence.TimeseriesGenerator.__len__(self)": {
                "autofl_rank": 1
            },
            "keras.preprocessing.sequence.TimeseriesGenerator.__getitem__(self, index)": {
                "autofl_rank": 1134
            }
        },
        "keras_3": {
            "keras.models._clone_functional_model(model, input_tensors=None)": {
                "autofl_rank": 1
            }
        },
        "keras_30": {
            "keras.engine.training.Model.fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 419
            },
            "keras.engine.training.Model.evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 417
            }
        },
        "keras_31": {
            "keras.backend.tensorflow_backend.ctc_batch_cost(y_true, y_pred, input_length, label_length)": {
                "autofl_rank": 1
            }
        },
        "keras_32": {
            "keras.callbacks.ReduceLROnPlateau.__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', epsilon=0.0001, cooldown=0, min_lr=0)": {
                "autofl_rank": 272
            },
            "keras.callbacks.ReduceLROnPlateau._reset(self)": {
                "autofl_rank": 273
            },
            "keras.callbacks.ReduceLROnPlateau.on_epoch_end(self, epoch, logs=None)": {
                "autofl_rank": 275
            }
        },
        "keras_33": {
            "keras.preprocessing.text.text_to_word_sequence(text, filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n', lower=True, split=' ')": {
                "autofl_rank": 1
            }
        },
        "keras_34": {
            "keras.engine.training.Model.fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 420
            },
            "keras.engine.training.Model.evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False)": {
                "autofl_rank": 418
            },
            "keras.engine.training.Model.predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 423
            }
        },
        "keras_35": {
            "keras.preprocessing.image.ImageDataGenerator.standardize(self, x)": {
                "autofl_rank": 1028
            },
            "keras.preprocessing.image.NumpyArrayIterator._get_batches_of_transformed_samples(self, index_array)": {
                "autofl_rank": 1039
            },
            "keras.preprocessing.image.DirectoryIterator._get_batches_of_transformed_samples(self, index_array)": {
                "autofl_rank": 1024
            }
        },
        "keras_36": {
            "keras.backend.tensorflow_backend.separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)": {
                "autofl_rank": 174
            }
        },
        "keras_37": {
            "keras.layers.wrappers.Bidirectional.call(self, inputs, training=None, mask=None, initial_state=None)": {
                "autofl_rank": 799
            },
            "keras.layers.recurrent.RNN.__call__(self, inputs, initial_state=None, constants=None, **kwargs)": {
                "autofl_rank": 743
            }
        },
        "keras_38": {
            "keras.layers.recurrent.StackedRNNCells.build(self, input_shape)": {
                "autofl_rank": 754
            }
        },
        "keras_39": {
            "keras.utils.generic_utils.Progbar.update(self, current, values=None, force=False)": {
                "autofl_rank": 2
            }
        },
        "keras_4": {
            "keras.optimizers.TFOptimizer.get_updates(self, loss, params)": {
                "autofl_rank": 1169
            }
        },
        "keras_40": {
            "keras.layers.recurrent.RNN.compute_output_shape(self, input_shape)": {
                "autofl_rank": 1
            }
        },
        "keras_41": {
            "keras.utils.data_utils.OrderedEnqueuer.get(self)": {
                "autofl_rank": 1021
            },
            "keras.utils.data_utils.GeneratorEnqueuer.__init__(self, generator, use_multiprocessing=False, wait_time=0.05, seed=None)": {
                "autofl_rank": 1011
            },
            "keras.utils.data_utils.GeneratorEnqueuer.start(self, workers=1, max_queue_size=10)": {
                "autofl_rank": 1
            },
            "keras.utils.data_utils.GeneratorEnqueuer.data_generator_task()": {
                "autofl_rank": 1012
            },
            "keras.utils.data_utils.GeneratorEnqueuer.stop(self, timeout=None)": {
                "autofl_rank": 1015
            },
            "keras.utils.data_utils.GeneratorEnqueuer.get(self)": {
                "autofl_rank": 1013
            }
        },
        "keras_42": {
            "keras.models.Sequential.fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 868
            },
            "keras.models.Sequential.evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)": {
                "autofl_rank": 866
            },
            "keras.models.Sequential.predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 885
            },
            "keras.engine.training.Model.fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)": {
                "autofl_rank": 364
            },
            "keras.engine.training.Model.evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)": {
                "autofl_rank": 362
            },
            "keras.engine.training.Model.predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)": {
                "autofl_rank": 367
            }
        },
        "keras_43": {
            "keras.utils.np_utils.to_categorical(y, num_classes=None)": {
                "autofl_rank": 1
            }
        },
        "keras_44": {
            "keras.layers.recurrent.RNN.trainable_weights(self)": {
                "autofl_rank": 726
            },
            "keras.layers.recurrent.RNN.non_trainable_weights(self)": {
                "autofl_rank": 720
            }
        },
        "keras_6": {
            "keras.engine.training_utils.weighted_masked_objective(fn)": {
                "autofl_rank": 503
            },
            "keras.engine.training_utils.weighted(y_true, y_pred, weights, mask=None)": {
                "autofl_rank": 502
            }
        },
        "keras_7": {
            "keras.wrappers.scikit_learn.KerasRegressor.predict(self, x, **kwargs)": {
                "autofl_rank": 1252
            }
        },
        "keras_8": {
            "keras.engine.network.Network.from_config(cls, config, custom_objects=None)": {
                "autofl_rank": 455
            },
            "keras.engine.network.Network.add_unprocessed_node(layer, node_data)": {
                "autofl_rank": 451
            },
            "keras.engine.network.Network.process_node(layer, node_data)": {
                "autofl_rank": 466
            }
        },
        "luigi_1": {
            "luigi.server.MetricsHandler.get(self)": {
                "autofl_rank": 797
            }
        },
        "luigi_10": {
            "luigi.scheduler.Worker.get_pending_tasks(self, state)": {
                "autofl_rank": 610
            }
        },
        "luigi_11": {
            "luigi.scheduler.Scheduler.get_work(self, host=None, assistant=False, current_tasks=None, worker=None, **kwargs)": {
                "autofl_rank": 1
            }
        },
        "luigi_12": {},
        "luigi_13": {
            "luigi.file.LocalFileSystem.move(self, old_path, new_path, raise_if_exists=False)": {
                "autofl_rank": 1
            }
        },
        "luigi_14": {
            "luigi.scheduler.Task.has_excessive_failures(self)": {
                "autofl_rank": 3
            },
            "luigi.scheduler.Task.can_disable(self)": {
                "autofl_rank": 568
            },
            "luigi.scheduler.SimpleTaskState.set_status(self, task, new_status, config=None)": {
                "autofl_rank": 1
            }
        },
        "luigi_15": {
            "luigi.scheduler.SimpleTaskState.get_necessary_tasks(self)": {
                "autofl_rank": 534
            }
        },
        "luigi_16": {
            "luigi.scheduler.CentralPlannerScheduler.prune(self)": {
                "autofl_rank": 473
            }
        },
        "luigi_17": {
            "luigi.interface._WorkerSchedulerFactory.create_local_scheduler(self)": {
                "autofl_rank": 2
            }
        },
        "luigi_18": {
            "luigi.scheduler.SimpleTaskState.set_status(self, task, new_status, config=None)": {
                "autofl_rank": 419
            }
        },
        "luigi_19": {
            "luigi.scheduler.SimpleTaskState.set_status(self, task, new_status, config=None)": {
                "autofl_rank": 418
            }
        },
        "luigi_22": {
            "luigi.scheduler.Worker.__init__(self, worker_id, last_active=None)": {
                "autofl_rank": 418
            }
        },
        "luigi_23": {
            "luigi.scheduler.Worker.__init__(self, worker_id, last_active=None)": {
                "autofl_rank": 421
            },
            "luigi.scheduler.CentralPlannerScheduler.get_work(self, host=None, assistant=False, **kwargs)": {
                "autofl_rank": 384
            },
            "luigi.interface.WorkerSchedulerFactory.create_local_scheduler(self)": {
                "autofl_rank": 289
            }
        },
        "luigi_26": {
            "luigi.contrib.hadoop_jar.HadoopJarJobRunner.run_job(self, job)": {
                "autofl_rank": 43
            }
        },
        "luigi_27": {
            "luigi.parameter.Parameter.parse_from_input(self, param_name, x)": {
                "autofl_rank": 2
            },
            "luigi.parameter.Parameter.add_to_cmdline_parser(self, parser, param_name, task_name, optparse=False, glob=False, is_without_section=False)": {
                "autofl_rank": 325
            },
            "luigi.parameter.Parameter.parse_from_args(self, param_name, task_name, args, params)": {
                "autofl_rank": 329
            },
            "luigi.parameter.Parameter.set_global_from_args(self, param_name, task_name, args, is_without_section=False)": {
                "autofl_rank": 334
            }
        },
        "luigi_28": {
            "luigi.contrib.hive.HiveCommandClient.table_exists(self, table, database='default', partition=None)": {
                "autofl_rank": 13
            }
        },
        "luigi_29": {
            "luigi.task_register.Register.__get_reg(cls)": {
                "autofl_rank": 457
            }
        },
        "luigi_3": {
            "luigi.parameter.TupleParameter.parse(self, x)": {
                "autofl_rank": 1
            }
        },
        "luigi_30": {
            "luigi.worker.TaskProcess.run(self)": {
                "autofl_rank": 493
            }
        },
        "luigi_31": {
            "luigi.scheduler.CentralPlannerScheduler.get_work(self, worker, host=None, assistant=False, **kwargs)": {
                "autofl_rank": 372
            }
        },
        "luigi_32": {},
        "luigi_33": {
            "luigi.task.Task.get_param_values(cls, params, args, kwargs)": {
                "autofl_rank": 1
            }
        },
        "luigi_4": {
            "luigi.contrib.redshift.S3CopyToTable.copy(self, cursor, f)": {
                "autofl_rank": 175
            }
        },
        "luigi_5": {
            "luigi.util.inherits.__call__(self, task_that_inherits)": {
                "autofl_rank": 843
            },
            "luigi.util.Wrapped.__call__(self, task_that_inherits)": {
                "autofl_rank": 833
            },
            "luigi.util.requires.__call__(self, task_that_requires)": {
                "autofl_rank": 846
            },
            "luigi.util.Wrapped.__call__(self, task_that_requires)": {
                "autofl_rank": 834
            }
        },
        "luigi_6": {
            "luigi.parameter._recursively_freeze(value)": {
                "autofl_rank": 554
            },
            "luigi.parameter.DictParameter.serialize(self, x)": {
                "autofl_rank": 496
            },
            "luigi.parameter.ListParameter.normalize(self, x)": {
                "autofl_rank": 503
            },
            "luigi.parameter.ListParameter.parse(self, x)": {
                "autofl_rank": 504
            },
            "luigi.parameter.ListParameter.serialize(self, x)": {
                "autofl_rank": 505
            },
            "luigi.parameter.TupleParameter.parse(self, x)": {
                "autofl_rank": 1
            }
        },
        "luigi_7": {
            "luigi.scheduler.Scheduler.add_task(self, task_id=None, status=PENDING, runnable=True, deps=None, new_deps=None, expl=None, resources=None, priority=0, family='', module=None, params=None, assistant=False, tracking_url=None, worker=None, batchable=None, batch_id=None, retry_policy_dict={}, owners=None, **kwargs)": {
                "autofl_rank": 594
            }
        },
        "luigi_8": {
            "luigi.contrib.redshift.S3CopyToTable.does_table_exist(self, connection)": {
                "autofl_rank": 1
            }
        },
        "luigi_9": {
            "luigi.execution_summary._partition_tasks(worker)": {
                "autofl_rank": 343
            },
            "luigi.execution_summary._depth_first_search(set_tasks, current_task, visited)": {
                "autofl_rank": 330
            },
            "luigi.execution_summary._summary_format(set_tasks, worker)": {
                "autofl_rank": 347
            }
        },
        "matplotlib_1": {
            "lib.matplotlib.figure.Figure.tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None)": {
                "autofl_rank": 1087
            },
            "lib.matplotlib.backend_bases._get_renderer(figure, print_method=None, *, draw_disabled=False)": {
                "autofl_rank": 542
            },
            "lib.matplotlib.backend_bases.Done._get_renderer(figure, print_method=None, *, draw_disabled=False)": {
                "autofl_rank": 434
            },
            "lib.matplotlib.backend_bases.FigureCanvasBase.print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, *, bbox_inches=None, pad_inches=None, bbox_extra_artists=None, backend=None, **kwargs)": {
                "autofl_rank": 456
            }
        },
        "matplotlib_10": {
            "lib.matplotlib.axis.Axis.set_tick_params(self, which='major', reset=False, **kw)": {
                "autofl_rank": 405
            }
        },
        "matplotlib_11": {
            "lib.matplotlib.text.Text.get_window_extent(self, renderer=None, dpi=None)": {
                "autofl_rank": 1755
            }
        },
        "matplotlib_12": {
            "lib.matplotlib.axes._axes.Axes.hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs)": {
                "autofl_rank": 3
            },
            "lib.matplotlib.axes._axes.Axes.vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs)": {
                "autofl_rank": 2
            }
        },
        "matplotlib_13": {
            "lib.matplotlib.path.Path.make_compound_path(cls, *args)": {
                "autofl_rank": 1
            }
        },
        "matplotlib_14": {
            "lib.matplotlib.text.Text.update(self, kwargs)": {
                "autofl_rank": 2140
            }
        },
        "matplotlib_15": {
            "lib.matplotlib.colors.SymLogNorm.__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)": {
                "autofl_rank": 965
            },
            "lib.matplotlib.colors.SymLogNorm._transform(self, a)": {
                "autofl_rank": 967
            },
            "lib.matplotlib.colors.SymLogNorm._inv_transform(self, a)": {
                "autofl_rank": 966
            }
        },
        "matplotlib_16": {
            "lib.matplotlib.transforms.nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True)": {
                "autofl_rank": 2473
            }
        },
        "matplotlib_17": {
            "lib.matplotlib.transforms.nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True)": {
                "autofl_rank": 2212
            }
        },
        "matplotlib_18": {},
        "matplotlib_19": {
            "lib.matplotlib.projections.polar.RadialLocator.view_limits(self, vmin, vmax)": {
                "autofl_rank": 1583
            }
        },
        "matplotlib_2": {
            "lib.matplotlib.axes._axes.Axes.scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, plotnonfinite=False, **kwargs)": {
                "autofl_rank": 233
            }
        },
        "matplotlib_20": {
            "lib.matplotlib.backend_bases.FigureCanvasBase.inaxes(self, xy)": {
                "autofl_rank": 1
            },
            "lib.matplotlib._constrained_layout._make_ghost_gridspec_slots(fig, gs)": {
                "autofl_rank": 33
            }
        },
        "matplotlib_21": {
            "lib.matplotlib.axes._axes.Axes.bxp(self, bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None)": {
                "autofl_rank": 157
            },
            "lib.matplotlib.axes._axes.Axes.line_props_with_rcdefaults(subkey, explicit, zdelta=0)": {
                "autofl_rank": 178
            }
        },
        "matplotlib_22": {
            "lib.matplotlib.axes._axes.Axes.hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs)": {
                "autofl_rank": 146
            }
        },
        "matplotlib_23": {
            "lib.matplotlib.axes._base._AxesBase.apply_aspect(self, position=None)": {
                "autofl_rank": 2
            }
        },
        "matplotlib_24": {
            "lib.matplotlib.axis.setter(self, vmin, vmax, ignore=False)": {
                "autofl_rank": 421
            },
            "lib.matplotlib.axis._make_getset_interval(method_name, lim_name, attr_name)": {
                "autofl_rank": 419
            }
        },
        "matplotlib_25": {
            "lib.matplotlib.collections.EventCollection.__init__(self, positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)": {
                "autofl_rank": 1728
            }
        },
        "matplotlib_29": {
            "lib.matplotlib.axis.Axis.set_inverted(self, inverted)": {
                "autofl_rank": 361
            },
            "lib.matplotlib.axis.XAxis.set_default_intervals(self)": {
                "autofl_rank": 391
            },
            "lib.matplotlib.axis.YAxis.set_default_intervals(self)": {
                "autofl_rank": 412
            }
        },
        "matplotlib_3": {
            "lib.matplotlib.markers.MarkerStyle._recache(self)": {
                "autofl_rank": 1372
            }
        },
        "matplotlib_30": {
            "lib.matplotlib.colors.makeMappingArray(N, data, gamma=1.0)": {
                "autofl_rank": 1
            }
        },
        "matplotlib_4": {
            "lib.matplotlib.axes._axes.Axes.hlines(self, y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs)": {
                "autofl_rank": 241
            },
            "lib.matplotlib.axes._axes.Axes.vlines(self, x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs)": {
                "autofl_rank": 270
            },
            "lib.matplotlib.pyplot.hlines(y, xmin, xmax, colors='k', linestyles='solid', label='', *, data=None, **kwargs)": {
                "autofl_rank": 2052
            },
            "lib.matplotlib.pyplot.vlines(x, ymin, ymax, colors='k', linestyles='solid', label='', *, data=None, **kwargs)": {
                "autofl_rank": 2105
            }
        },
        "matplotlib_5": {
            "lib.matplotlib.axes._axes.Axes.scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, plotnonfinite=False, **kwargs)": {
                "autofl_rank": 242
            }
        },
        "matplotlib_6": {
            "lib.matplotlib.axes._axes.Axes._parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func)": {
                "autofl_rank": 199
            }
        },
        "matplotlib_7": {
            "lib.matplotlib.colors.LightSource.shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)": {
                "autofl_rank": 1
            }
        },
        "matplotlib_8": {
            "lib.matplotlib.axes._base._AxesBase.set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None)": {
                "autofl_rank": 1
            },
            "lib.matplotlib.axes._base._AxesBase.set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None)": {
                "autofl_rank": 364
            }
        },
        "matplotlib_9": {
            "lib.matplotlib.projections.polar.PolarAxes.draw(self, renderer, *args, **kwargs)": {
                "autofl_rank": 1861
            }
        },
        "pandas_1": {
            "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)": {
                "autofl_rank": 1
            },
            "pandas.core.dtypes.common.is_excluded_dtype(dtype)": {
                "autofl_rank": 250
            }
        },
        "pandas_10": {
            "pandas.core.internals.blocks.ExtensionBlock.putmask(self, mask, new, inplace: bool=False, axis: int=0, transpose: bool=False)": {
                "autofl_rank": 1570
            }
        },
        "pandas_100": {
            "pandas.core.generic.NDFrame.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, **kwargs)": {
                "autofl_rank": 1
            }
        },
        "pandas_101": {
            "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_102": {
            "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype=None, copy=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_103": {
            "pandas.core.groupby.groupby.GroupBy.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)": {
                "autofl_rank": 798
            },
            "pandas.core.groupby.generic.SeriesGroupBy.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)": {
                "autofl_rank": 760
            }
        },
        "pandas_104": {
            "pandas.core.groupby.groupby.GroupBy.quantile(self, q=0.5, interpolation: str='linear')": {
                "autofl_rank": 1
            }
        },
        "pandas_105": {
            "pandas.core.frame.DataFrame.transpose(self, *args, **kwargs)": {
                "autofl_rank": 385
            },
            "pandas.core.generic.NDFrame.transpose(self, *args, **kwargs)": {
                "autofl_rank": 443
            }
        },
        "pandas_106": {
            "pandas.core.indexes.base.Index.get_indexer_non_unique(self, target)": {
                "autofl_rank": 1
            }
        },
        "pandas_107": {
            "pandas.core.frame.DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_108": {
            "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_109": {
            "pandas.core.arrays.categorical.Categorical.min(self, skipna=True)": {
                "autofl_rank": 1
            },
            "pandas.core.arrays.categorical.Categorical.max(self, skipna=True)": {
                "autofl_rank": 154
            }
        },
        "pandas_11": {
            "pandas.core.reshape.concat._make_concat_multiindex(indexes, keys, levels=None, names=None)": {
                "autofl_rank": 2
            }
        },
        "pandas_110": {
            "pandas.core.indexes.category.CategoricalIndex.map(self, mapper)": {
                "autofl_rank": 863
            },
            "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind=None)": {
                "autofl_rank": 723
            }
        },
        "pandas_111": {
            "pandas.core.indexes.category.CategoricalIndex._convert_scalar_indexer(self, key, kind=None)": {
                "autofl_rank": 1
            },
            "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind=None)": {
                "autofl_rank": 722
            }
        },
        "pandas_112": {
            "pandas.core.indexes.interval.IntervalIndex.get_indexer(self, target: AnyArrayLike, method: Optional[str]=None, limit: Optional[int]=None, tolerance: Optional[Any]=None)": {
                "autofl_rank": 1381
            }
        },
        "pandas_114": {
            "pandas.core.indexes.base.Index.get_value(self, series, key)": {
                "autofl_rank": 1001
            }
        },
        "pandas_115": {
            "pandas.core.missing.interpolate_1d(xvalues, yvalues, method='linear', limit=None, limit_direction='forward', limit_area=None, fill_value=None, bounds_error=False, order=None, **kwargs)": {
                "autofl_rank": 1686
            }
        },
        "pandas_116": {
            "pandas.core.reshape.merge._MergeOperation._get_merge_keys(self)": {
                "autofl_rank": 1
            }
        },
        "pandas_117": {
            "pandas.core.dtypes.missing._isna_old(obj)": {
                "autofl_rank": 656
            }
        },
        "pandas_118": {
            "pandas.core.reshape.melt.melt(frame: DataFrame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)": {
                "autofl_rank": 1
            }
        },
        "pandas_119": {
            "pandas.core.reshape.pivot._add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None)": {
                "autofl_rank": 1682
            }
        },
        "pandas_12": {
            "pandas.core.frame.DataFrame.corr(self, method='pearson', min_periods=1)": {
                "autofl_rank": 841
            },
            "pandas.core.frame.DataFrame.cov(self, min_periods=None)": {
                "autofl_rank": 844
            }
        },
        "pandas_120": {
            "pandas.core.groupby.groupby.GroupBy.size(self)": {
                "autofl_rank": 797
            },
            "pandas.core.groupby.groupby.GroupBy.nth(self, n: Union[int, List[int]], dropna: Optional[str]=None)": {
                "autofl_rank": 784
            },
            "pandas.core.groupby.groupby.GroupBy._reindex_output(self, output)": {
                "autofl_rank": 764
            },
            "pandas.core.groupby.generic.SeriesGroupBy.nunique(self, dropna: bool=True)": {
                "autofl_rank": 749
            },
            "pandas.core.groupby.generic.SeriesGroupBy.count(self)": {
                "autofl_rank": 746
            }
        },
        "pandas_121": {
            "pandas.core.internals.managers.BlockManager.replace_list(self, src_list, dest_list, inplace=False, regex=False)": {
                "autofl_rank": 1883
            },
            "pandas.core.internals.blocks.ObjectBlock._replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)": {
                "autofl_rank": 1774
            }
        },
        "pandas_122": {
            "pandas.core.internals.managers.BlockManager.equals(self, other)": {
                "autofl_rank": 570
            }
        },
        "pandas_123": {
            "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None)": {
                "autofl_rank": 1270
            },
            "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None, tupleize_cols=True, **kwargs)": {
                "autofl_rank": 754
            }
        },
        "pandas_124": {},
        "pandas_125": {},
        "pandas_126": {
            "pandas.core.frame.DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=None)": {
                "autofl_rank": 1
            }
        },
        "pandas_127": {
            "pandas.core.generic.NDFrame.pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, **kwargs)": {
                "autofl_rank": 828
            }
        },
        "pandas_128": {
            "pandas.io.json._json.read_json(path_or_buf=None, orient=None, typ='frame', dtype=None, convert_axes=None, convert_dates=True, keep_default_dates=True, numpy=False, precise_float=False, date_unit=None, encoding=None, lines=False, chunksize=None, compression='infer')": {
                "autofl_rank": 1
            }
        },
        "pandas_129": {
            "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__rsub__(self, other)": {
                "autofl_rank": 79
            }
        },
        "pandas_13": {
            "pandas.core.dtypes.missing._isna_new(obj)": {
                "autofl_rank": 707
            },
            "pandas.core.dtypes.missing._isna_old(obj)": {
                "autofl_rank": 708
            },
            "pandas.core.dtypes.missing._isna_ndarraylike(obj)": {
                "autofl_rank": 706
            }
        },
        "pandas_130": {},
        "pandas_131": {
            "pandas.core.indexes.accessors.Properties._delegate_property_get(self, name)": {
                "autofl_rank": 923
            },
            "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__(cls, data)": {
                "autofl_rank": 918
            }
        },
        "pandas_132": {
            "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)": {
                "autofl_rank": 766
            },
            "pandas.core.nanops.nanstd(values, axis=None, skipna=True, ddof=1, mask=None)": {
                "autofl_rank": 728
            }
        },
        "pandas_133": {
            "pandas.core.generic.NDFrame.interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)": {
                "autofl_rank": 969
            }
        },
        "pandas_134": {},
        "pandas_135": {
            "pandas.core.groupby.ops.BaseGrouper.agg_series(self, obj, func)": {
                "autofl_rank": 843
            }
        },
        "pandas_136": {
            "pandas.core.reshape.merge._AsOfMerge._get_merge_keys(self)": {
                "autofl_rank": 1
            }
        },
        "pandas_137": {
            "pandas.core.arrays.categorical.Categorical.astype(self, dtype: Dtype, copy: bool=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_138": {
            "pandas.core.reshape.tile._coerce_to_type(x)": {
                "autofl_rank": 1713
            }
        },
        "pandas_139": {
            "pandas.core.groupby.grouper.Grouping.__init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False)": {
                "autofl_rank": 818
            }
        },
        "pandas_140": {
            "pandas.core.groupby.generic._recast_datetimelike_result(result: DataFrame)": {
                "autofl_rank": 1
            }
        },
        "pandas_141": {
            "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)": {
                "autofl_rank": 1346
            }
        },
        "pandas_142": {
            "pandas.core.algorithms.diff(arr, n: int, axis: int=0)": {
                "autofl_rank": 1
            }
        },
        "pandas_143": {
            "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)": {
                "autofl_rank": 1346
            }
        },
        "pandas_144": {
            "pandas.plotting._matplotlib.core.BarPlot._decorate_ticks(self, ax, name, ticklabels, start_edge, end_edge)": {
                "autofl_rank": 4603
            }
        },
        "pandas_145": {
            "pandas.core.ops.__init__.dispatch_to_series(left, right, func, str_rep=None, axis=None)": {
                "autofl_rank": 1999
            },
            "pandas.core.ops.__init__.column_op(a, b)": {
                "autofl_rank": 1997
            }
        },
        "pandas_146": {
            "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan=False)": {
                "autofl_rank": 1
            },
            "pandas.core.indexes.base.Index.equals(self, other)": {
                "autofl_rank": 462
            }
        },
        "pandas_147": {
            "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)": {
                "autofl_rank": 296
            },
            "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string)": {
                "autofl_rank": 299
            }
        },
        "pandas_148": {
            "pandas.core.apply.FrameApply.apply_empty_result(self)": {
                "autofl_rank": 91
            }
        },
        "pandas_15": {},
        "pandas_150": {
            "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_151": {
            "pandas.core.arrays.numpy_.PandasArray.__setitem__(self, key, value)": {
                "autofl_rank": 1
            }
        },
        "pandas_152": {
            "pandas.core.series.Series.append(self, to_append, ignore_index=False, verify_integrity=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_153": {
            "pandas.core.internals.blocks.Block.to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)": {
                "autofl_rank": 2775
            }
        },
        "pandas_154": {
            "pandas.core.groupby.groupby.GroupBy._get_cythonized_result(self, how, grouper, aggregate=False, cython_dtype=None, needs_values=False, needs_mask=False, needs_ngroups=False, result_is_index=False, pre_processing=None, post_processing=None, **kwargs)": {
                "autofl_rank": 739
            }
        },
        "pandas_155": {
            "pandas.core.window.rolling.Rolling._on(self)": {
                "autofl_rank": 1310
            }
        },
        "pandas_156": {
            "pandas.core.sparse.frame.SparseDataFrame._combine_match_index(self, other, func, level=None)": {
                "autofl_rank": 1399
            },
            "pandas.core.sparse.frame.SparseDataFrame._combine_match_columns(self, other, func, level=None)": {
                "autofl_rank": 2
            }
        },
        "pandas_157": {
            "pandas.core.reshape.merge._AsOfMerge._get_merge_keys(self)": {
                "autofl_rank": 2
            }
        },
        "pandas_158": {
            "pandas.core.series.Series.rename(self, index=None, **kwargs)": {
                "autofl_rank": 1
            }
        },
        "pandas_159": {
            "pandas.core.frame.DataFrame._combine_frame(self, other, func, fill_value=None, level=None)": {
                "autofl_rank": 354
            }
        },
        "pandas_16": {
            "pandas.core.indexes.datetimelike.wrapped(self, other)": {
                "autofl_rank": 679
            },
            "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._get_addsub_freq(self, other)": {
                "autofl_rank": 661
            }
        },
        "pandas_160": {
            "pandas.core.computation.expressions._can_use_numexpr(op, op_str, a, b, dtype_check)": {
                "autofl_rank": 1
            }
        },
        "pandas_161": {
            "pandas.core.arrays.categorical.Categorical.fillna(self, value=None, method=None, limit=None)": {
                "autofl_rank": 144
            }
        },
        "pandas_162": {
            "pandas.core.reshape.pivot._normalize(table, normalize, margins, margins_name='All')": {
                "autofl_rank": 1
            }
        },
        "pandas_163": {
            "pandas.core.window._Window._prep_values(self, values: Optional[np.ndarray]=None)": {
                "autofl_rank": 1
            }
        },
        "pandas_164": {
            "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, box, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)": {
                "autofl_rank": 1848
            }
        },
        "pandas_165": {
            "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)": {
                "autofl_rank": 71
            },
            "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)": {
                "autofl_rank": 81
            },
            "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__rsub__(self, other)": {
                "autofl_rank": 79
            }
        },
        "pandas_166": {
            "pandas.core.frame.DataFrame._join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)": {
                "autofl_rank": 767
            }
        },
        "pandas_167": {
            "pandas.core.indexing._LocIndexer._is_scalar_access(self, key: Tuple)": {
                "autofl_rank": 1401
            },
            "pandas.core.indexing._LocIndexer._get_partial_string_timestamp_match_key(self, key, labels)": {
                "autofl_rank": 1398
            },
            "pandas.core.indexing.convert_to_index_sliceable(obj, key)": {
                "autofl_rank": 1448
            }
        },
        "pandas_168": {
            "pandas.core.groupby.grouper._get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_169": {
            "pandas.core.frame.DataFrame.quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')": {
                "autofl_rank": 1
            }
        },
        "pandas_17": {},
        "pandas_18": {
            "pandas.core.window.rolling._Window._apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs)": {
                "autofl_rank": 1424
            },
            "pandas.core.window.rolling._Window.calc(x)": {
                "autofl_rank": 1439
            },
            "pandas.core.window.common.validate_baseindexer_support(func_name: Optional[str])": {
                "autofl_rank": 2
            }
        },
        "pandas_19": {
            "pandas.core.indexing._LocIndexer._getitem_axis(self, key, axis: int)": {
                "autofl_rank": 1435
            }
        },
        "pandas_2": {
            "pandas.core.indexing._ScalarAccessIndexer.__setitem__(self, key, value)": {
                "autofl_rank": 1235
            },
            "pandas.core.indexing._AtIndexer._convert_key(self, key, is_setter: bool=False)": {
                "autofl_rank": 1207
            }
        },
        "pandas_20": {
            "pandas.tseries.offsets.MonthOffset.apply_index(self, i)": {
                "autofl_rank": 580
            },
            "pandas.tseries.offsets.QuarterOffset.apply_index(self, dtindex)": {
                "autofl_rank": 585
            },
            "pandas.tseries.offsets.YearOffset.apply_index(self, dtindex)": {
                "autofl_rank": 627
            }
        },
        "pandas_21": {
            "pandas.core.series.Series._get_with(self, key)": {
                "autofl_rank": 1951
            }
        },
        "pandas_22": {
            "pandas.core.window.rolling._Rolling_and_Expanding.count(self)": {
                "autofl_rank": 1402
            },
            "pandas.core.window.rolling.Rolling.count(self)": {
                "autofl_rank": 1
            },
            "pandas.core.window.common.validate_baseindexer_support(func_name: Optional[str])": {
                "autofl_rank": 2
            }
        },
        "pandas_23": {
            "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin.intersection(self, other, sort=False)": {
                "autofl_rank": 1028
            }
        },
        "pandas_24": {
            "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')": {
                "autofl_rank": 237
            }
        },
        "pandas_25": {
            "pandas.core.arrays.datetimes.DatetimeArray.isocalendar(self)": {
                "autofl_rank": 1
            }
        },
        "pandas_26": {
            "pandas.core.arrays.categorical.Categorical.min(self, skipna=True)": {
                "autofl_rank": 1
            },
            "pandas.core.arrays.categorical.Categorical.max(self, skipna=True)": {
                "autofl_rank": 160
            }
        },
        "pandas_27": {
            "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)": {
                "autofl_rank": 228
            }
        },
        "pandas_28": {
            "pandas.core.strings.StringMethods._get_series_list(self, others)": {
                "autofl_rank": 281
            }
        },
        "pandas_29": {
            "pandas.core.arrays.interval.IntervalArray.__setitem__(self, key, value)": {
                "autofl_rank": 333
            }
        },
        "pandas_3": {
            "pandas.core.series.Series.to_timestamp(self, freq=None, how='start', copy=True)": {
                "autofl_rank": 1
            },
            "pandas.core.series.Series.to_period(self, freq=None, copy=True)": {
                "autofl_rank": 2
            }
        },
        "pandas_30": {
            "pandas.io.json._json.Parser._try_convert_to_date(self, data)": {
                "autofl_rank": 3995
            }
        },
        "pandas_31": {
            "pandas.core.groupby.groupby.GroupBy.quantile(self, q=0.5, interpolation: str='linear')": {
                "autofl_rank": 1
            },
            "pandas.core.groupby.groupby.GroupBy.pre_processor(vals: np.ndarray)": {
                "autofl_rank": 872
            }
        },
        "pandas_32": {
            "pandas.io.sas.sas_xport.XportReader.__init__(self, filepath_or_buffer, index=None, encoding='ISO-8859-1', chunksize=None)": {
                "autofl_rank": 4498
            }
        },
        "pandas_33": {
            "pandas.core.arrays.integer.IntegerArray._values_for_argsort(self)": {
                "autofl_rank": 289
            }
        },
        "pandas_34": {
            "pandas.core.resample.TimeGrouper._get_time_bins(self, ax)": {
                "autofl_rank": 2
            }
        },
        "pandas_35": {
            "pandas.core.indexes.period.PeriodIndex._engine(self)": {
                "autofl_rank": 1270
            }
        },
        "pandas_36": {
            "pandas.core.dtypes.missing._isna_new(obj)": {
                "autofl_rank": 414
            },
            "pandas.core.dtypes.missing._isna_old(obj)": {
                "autofl_rank": 415
            },
            "pandas.core.dtypes.missing._isna_ndarraylike(obj)": {
                "autofl_rank": 413
            },
            "pandas.core.dtypes.missing._isna_ndarraylike_old(obj)": {
                "autofl_rank": 1
            },
            "pandas.core.dtypes.missing.notna(obj)": {
                "autofl_rank": 421
            },
            "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)": {
                "autofl_rank": 420
            }
        },
        "pandas_37": {
            "pandas.core.arrays.string_.StringArray.astype(self, dtype, copy=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_38": {
            "pandas.core.reshape.reshape._unstack_multiple(data, clocs, fill_value=None)": {
                "autofl_rank": 2170
            }
        },
        "pandas_39": {
            "pandas.core.ops.methods.f(self, other)": {
                "autofl_rank": 2035
            }
        },
        "pandas_4": {
            "pandas.core.indexes.base.Index._join_multi(self, other, how, return_indexers=True)": {
                "autofl_rank": 850
            }
        },
        "pandas_40": {
            "pandas.core.reshape.merge._get_join_indexers(left_keys, right_keys, sort: bool=False, how: str='inner', **kwargs)": {
                "autofl_rank": 1665
            },
            "pandas.core.reshape.merge._factorize_keys(lk, rk, sort=True)": {
                "autofl_rank": 1663
            }
        },
        "pandas_41": {
            "pandas.core.internals.blocks.Block.set(self, locs, values)": {
                "autofl_rank": 488
            },
            "pandas.core.internals.blocks.ExtensionBlock.should_store(self, value)": {
                "autofl_rank": 516
            },
            "pandas.core.internals.blocks.FloatBlock.should_store(self, value)": {
                "autofl_rank": 518
            },
            "pandas.core.internals.blocks.ComplexBlock.should_store(self, value)": {
                "autofl_rank": 495
            },
            "pandas.core.internals.blocks.IntBlock.should_store(self, value)": {
                "autofl_rank": 520
            },
            "pandas.core.internals.blocks.BoolBlock.should_store(self, value)": {
                "autofl_rank": 492
            },
            "pandas.core.internals.blocks.ObjectBlock.should_store(self, value)": {
                "autofl_rank": 525
            }
        },
        "pandas_42": {
            "pandas._testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_category_order=True, obj='Series')": {
                "autofl_rank": 1
            }
        },
        "pandas_43": {
            "pandas.core.ops.__init__._should_reindex_frame_op(left: 'DataFrame', right, axis, default_axis: int, fill_value, level)": {
                "autofl_rank": 2014
            },
            "pandas.core.ops.__init__._arith_method_FRAME(cls, op, special)": {
                "autofl_rank": 2003
            },
            "pandas.core.ops.__init__.f(self, other, axis=default_axis, level=None, fill_value=None)": {
                "autofl_rank": 2019
            }
        },
        "pandas_44": {
            "pandas.core.indexes.timedeltas.TimedeltaIndex.get_loc(self, key, method=None, tolerance=None)": {
                "autofl_rank": 1177
            },
            "pandas.core.indexes.base.Index._shallow_copy_with_infer(self, values, **kwargs)": {
                "autofl_rank": 831
            },
            "pandas.core.indexes.base.Index.get_indexer_non_unique(self, target)": {
                "autofl_rank": 859
            }
        },
        "pandas_45": {
            "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)": {
                "autofl_rank": 599
            }
        },
        "pandas_46": {
            "pandas.core.indexes.multi.MultiIndex.from_product(cls, iterables, sortorder=None, names=lib.no_default)": {
                "autofl_rank": 1135
            },
            "pandas.core.reshape.util.cartesian_product(X)": {
                "autofl_rank": 1725
            }
        },
        "pandas_47": {
            "pandas.core.frame.DataFrame._setitem_array(self, key, value)": {
                "autofl_rank": 5
            },
            "pandas.core.indexing._LocationIndexer._get_setitem_indexer(self, key)": {
                "autofl_rank": 1202
            },
            "pandas.core.indexing._LocationIndexer.__setitem__(self, key, value)": {
                "autofl_rank": 1200
            }
        },
        "pandas_48": {
            "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)": {
                "autofl_rank": 768
            }
        },
        "pandas_49": {
            "pandas.core.strings.str_repeat(arr, repeats)": {
                "autofl_rank": 1
            },
            "pandas.core.strings.rep(x, r)": {
                "autofl_rank": 118
            }
        },
        "pandas_50": {
            "pandas.core.arrays.categorical._cat_compare_op(op)": {
                "autofl_rank": 186
            },
            "pandas.core.arrays.categorical.func(self, other)": {
                "autofl_rank": 192
            }
        },
        "pandas_51": {},
        "pandas_52": {
            "pandas.core.groupby.generic.SeriesGroupBy.nunique(self, dropna: bool=True)": {
                "autofl_rank": 789
            }
        },
        "pandas_53": {
            "pandas.core.series.Series._get_value(self, label, takeable: bool=False)": {
                "autofl_rank": 1564
            },
            "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind: str_t)": {
                "autofl_rank": 1
            }
        },
        "pandas_54": {
            "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)": {
                "autofl_rank": 1
            }
        },
        "pandas_55": {
            "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)": {
                "autofl_rank": 1
            },
            "pandas.core.generic.NDFrame._iget_item_cache(self, item)": {
                "autofl_rank": 624
            }
        },
        "pandas_56": {
            "pandas.core.frame.DataFrame._get_value(self, index, col, takeable: bool=False)": {
                "autofl_rank": 1
            }
        },
        "pandas_57": {
            "pandas.core.arrays.categorical.Categorical.replace(self, to_replace, value, inplace: bool=False)": {
                "autofl_rank": 160
            }
        },
        "pandas_58": {
            "pandas.core.arrays.categorical.Categorical.from_codes(cls, codes, categories=None, ordered=None, dtype=None)": {
                "autofl_rank": 1
            }
        },
        "pandas_59": {
            "pandas.core.window.rolling._Rolling_and_Expanding.corr(self, other=None, pairwise=None, **kwargs)": {
                "autofl_rank": 1394
            }
        },
        "pandas_6": {
            "pandas.core.groupby.grouper.get_grouper(obj: FrameOrSeries, key=None, axis: int=0, level=None, sort: bool=True, observed: bool=False, mutated: bool=False, validate: bool=True, dropna: bool=True)": {
                "autofl_rank": 952
            },
            "pandas.core.groupby.grouper.is_in_obj(gpr)": {
                "autofl_rank": 1
            }
        },
        "pandas_60": {
            "pandas.core.window.rolling._Rolling_and_Expanding.apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None)": {
                "autofl_rank": 1391
            }
        },
        "pandas_61": {
            "pandas.core.series.Series._get_with(self, key)": {
                "autofl_rank": 1559
            }
        },
        "pandas_62": {
            "pandas.core.internals.blocks.Block.setitem(self, indexer, value)": {
                "autofl_rank": 1287
            }
        },
        "pandas_63": {
            "pandas.core.indexing._AtIndexer._convert_key(self, key, is_setter: bool=False)": {
                "autofl_rank": 1170
            }
        },
        "pandas_64": {
            "pandas.io.formats.excel.ExcelFormatter.__init__(self, df, na_rep: str='', float_format: Optional[str]=None, cols: Optional[Sequence[Label]]=None, header: Union[Sequence[Label], bool]=True, index: bool=True, index_label: Optional[Union[Label, Sequence[Label]]]=None, merge_cells: bool=False, inf_rep: str='inf', style_converter: Optional[Callable]=None)": {
                "autofl_rank": 3787
            }
        },
        "pandas_65": {
            "pandas.io.common.get_handle(path_or_buf, mode: str, encoding=None, compression: Optional[Union[str, Mapping[str, Any]]]=None, memory_map: bool=False, is_text: bool=True)": {
                "autofl_rank": 3645
            },
            "pandas.io.parsers.CParserWrapper.__init__(self, src, **kwds)": {
                "autofl_rank": 4043
            }
        },
        "pandas_66": {
            "pandas.core.internals.managers.SingleBlockManager.fast_xs(self, loc)": {
                "autofl_rank": 1685
            },
            "pandas.core.generic.NDFrame.xs(self, key, axis=0, level=None, drop_level: bool_t=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_67": {},
        "pandas_68": {
            "pandas.core.arrays.interval.IntervalArray.take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)": {
                "autofl_rank": 321
            }
        },
        "pandas_69": {
            "pandas.core.indexing._AtIndexer._convert_key(self, key, is_setter: bool=False)": {
                "autofl_rank": 1364
            }
        },
        "pandas_7": {
            "pandas.core.indexes.base.Index._get_nearest_indexer(self, target: 'Index', limit, tolerance)": {
                "autofl_rank": 1
            }
        },
        "pandas_70": {
            "pandas.core.groupby.groupby._GroupBy._try_cast(self, result, obj, numeric_only: bool=False)": {
                "autofl_rank": 855
            },
            "pandas.core.groupby.ops.BaseGrouper._cython_operation(self, kind: str, values, how: str, axis, min_count: int=-1, **kwargs)": {
                "autofl_rank": 895
            }
        },
        "pandas_71": {
            "pandas.core.reshape.tile.cut(x, bins, right: bool=True, labels=None, retbins: bool=False, precision: int=3, include_lowest: bool=False, duplicates: str='raise')": {
                "autofl_rank": 1416
            }
        },
        "pandas_72": {
            "pandas.core.internals.blocks.Block.setitem(self, indexer, value)": {
                "autofl_rank": 1717
            }
        },
        "pandas_73": {
            "pandas.core.ops.missing.mask_zero_div_zero(x, y, result)": {
                "autofl_rank": 2044
            },
            "pandas.core.frame.DataFrame._combine_frame(self, other, func, fill_value=None, level=None)": {
                "autofl_rank": 775
            },
            "pandas.core.frame.DataFrame._combine_match_index(self, other, func)": {
                "autofl_rank": 776
            }
        },
        "pandas_74": {
            "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)": {
                "autofl_rank": 1353
            }
        },
        "pandas_75": {
            "pandas.core.indexes.period.PeriodIndex.get_value(self, series, key)": {
                "autofl_rank": 1297
            },
            "pandas.core.indexes.period.PeriodIndex.get_loc(self, key, method=None, tolerance=None)": {
                "autofl_rank": 1296
            }
        },
        "pandas_76": {
            "pandas.io.json._json.Parser._try_convert_data(self, name, data, use_dtypes=True, convert_dates=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_77": {
            "pandas.core.ops.array_ops.na_logical_op(x: np.ndarray, y, op)": {
                "autofl_rank": 1
            }
        },
        "pandas_78": {
            "pandas.core.frame.DataFrame._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)": {
                "autofl_rank": 783
            }
        },
        "pandas_79": {
            "pandas.core.indexes.datetimes.DatetimeIndex.get_value(self, series, key)": {
                "autofl_rank": 1042
            },
            "pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self, key, method=None, tolerance=None)": {
                "autofl_rank": 1
            },
            "pandas.core.series.Series.__setitem__(self, key, value)": {
                "autofl_rank": 1737
            },
            "pandas.core.indexes.multi.MultiIndex.get_loc_level(self, key, level=0, drop_level: bool=True)": {
                "autofl_rank": 1197
            },
            "pandas.core.groupby.grouper.get_grouper(obj: FrameOrSeries, key=None, axis: int=0, level=None, sort: bool=True, observed: bool=False, mutated: bool=False, validate: bool=True)": {
                "autofl_rank": 723
            },
            "pandas.core.groupby.grouper.is_in_axis(key)": {
                "autofl_rank": 724
            }
        },
        "pandas_8": {
            "pandas.core.internals.blocks.Block.replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True)": {
                "autofl_rank": 1736
            }
        },
        "pandas_80": {
            "pandas.core.indexing.check_bool_indexer(index: Index, key)": {
                "autofl_rank": 1156
            },
            "pandas.core.generic.NDFrame.__invert__(self)": {
                "autofl_rank": 728
            },
            "pandas.core.arrays.masked.BaseMaskedArray.to_numpy(self, dtype=None, copy=False, na_value: 'Scalar'=lib.no_default)": {
                "autofl_rank": 335
            }
        },
        "pandas_81": {
            "pandas.core.arrays.integer.IntegerArray.astype(self, dtype, copy=True)": {
                "autofl_rank": 1
            }
        },
        "pandas_82": {
            "pandas.core.internals.concat._get_empty_dtype_and_na(join_units)": {
                "autofl_rank": 1396
            }
        },
        "pandas_83": {
            "pandas.core.reshape.concat._Concatenator._get_comb_axis(self, i: int)": {
                "autofl_rank": 1631
            },
            "pandas.core.indexes.api.get_objs_combined_axis(objs, intersect: bool=False, axis=0, sort: bool=True)": {
                "autofl_rank": 837
            },
            "pandas.core.indexes.api._get_combined_index(indexes: List[Index], intersect: bool=False, sort: bool=False)": {
                "autofl_rank": 830
            }
        },
        "pandas_84": {
            "pandas.core.reshape.reshape._unstack_multiple(data, clocs, fill_value=None)": {
                "autofl_rank": 2153
            }
        },
        "pandas_85": {
            "pandas.core.indexes.multi.MultiIndex._get_grouper_for_level(self, mapper, level)": {
                "autofl_rank": 1195
            }
        },
        "pandas_86": {
            "pandas.core.reshape.pivot.pivot(data: 'DataFrame', index=None, columns=None, values=None)": {
                "autofl_rank": 1688
            }
        },
        "pandas_87": {
            "pandas.core.reshape.pivot.crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str='All', dropna: bool=True, normalize=False)": {
                "autofl_rank": 1691
            }
        },
        "pandas_88": {
            "pandas.core.reshape.pivot.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)": {
                "autofl_rank": 1688
            }
        },
        "pandas_89": {
            "pandas.core.reshape.reshape._unstack_multiple(data, clocs, fill_value=None)": {
                "autofl_rank": 2162
            }
        },
        "pandas_9": {
            "pandas.core.indexes.category.CategoricalIndex.__contains__(self, key: Any)": {
                "autofl_rank": 982
            },
            "pandas.core.arrays.categorical.Categorical.__contains__(self, key)": {
                "autofl_rank": 102
            }
        },
        "pandas_90": {
            "pandas.io.pickle.to_pickle(obj, path, compression='infer', protocol=pickle.HIGHEST_PROTOCOL)": {
                "autofl_rank": 4132
            },
            "pandas.io.pickle.read_pickle(path, compression='infer')": {
                "autofl_rank": 3
            }
        },
        "pandas_91": {
            "pandas.core.indexes.timedeltas.TimedeltaIndex.searchsorted(self, value, side='left', sorter=None)": {
                "autofl_rank": 1126
            }
        },
        "pandas_92": {
            "pandas.core.generic.NDFrame.asof(self, where, subset=None)": {
                "autofl_rank": 1
            },
            "pandas.core.resample.TimeGrouper._get_period_bins(self, ax)": {
                "autofl_rank": 2094
            },
            "pandas.core.indexes.period.PeriodIndex._get_string_slice(self, key)": {
                "autofl_rank": 1541
            }
        },
        "pandas_93": {},
        "pandas_94": {
            "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)": {
                "autofl_rank": 1010
            },
            "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.repeat(self, repeats, axis=None)": {
                "autofl_rank": 1007
            }
        },
        "pandas_95": {
            "pandas.core.arrays.period._period_array_cmp(cls, op)": {
                "autofl_rank": 255
            },
            "pandas.core.arrays.period.wrapper(self, other)": {
                "autofl_rank": 260
            }
        },
        "pandas_96": {
            "pandas.tseries.offsets.BusinessHourMixin.apply(self, other)": {
                "autofl_rank": 2002
            }
        },
        "pandas_97": {
            "pandas.core.indexes.timedeltas.TimedeltaIndex._union(self, other: 'TimedeltaIndex', sort)": {
                "autofl_rank": 1354
            },
            "pandas.core.indexes.timedeltas.TimedeltaIndex._fast_union(self, other)": {
                "autofl_rank": 1348
            }
        },
        "pandas_98": {
            "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)": {
                "autofl_rank": 778
            }
        },
        "pandas_99": {
            "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)": {
                "autofl_rank": 1826
            }
        },
        "sanic_3": {
            "sanic.app.Sanic.url_for(self, view_name: str, **kwargs)": {
                "autofl_rank": 42
            }
        },
        "sanic_4": {
            "sanic.request.Request.url_for(self, view_name, **kwargs)": {
                "autofl_rank": 180
            }
        },
        "sanic_5": {},
        "scrapy_1": {
            "scrapy.spidermiddlewares.offsite.OffsiteMiddleware.get_host_regex(self, spider)": {
                "autofl_rank": 2
            }
        },
        "scrapy_10": {
            "scrapy.downloadermiddlewares.redirect.RedirectMiddleware.process_response(self, request, response, spider)": {
                "autofl_rank": 235
            }
        },
        "scrapy_11": {
            "scrapy.utils.gz.gunzip(data)": {
                "autofl_rank": 1
            }
        },
        "scrapy_12": {
            "scrapy.selector.unified.Selector.__init__(self, response=None, text=None, type=None, root=None, _root=None, **kwargs)": {
                "autofl_rank": 594
            }
        },
        "scrapy_14": {},
        "scrapy_15": {
            "scrapy.utils.url._safe_ParseResult(parts, encoding='utf8', path_encoding='utf8')": {
                "autofl_rank": 878
            }
        },
        "scrapy_16": {
            "scrapy.utils.url.canonicalize_url(url, keep_blank_values=True, keep_fragments=False, encoding=None)": {
                "autofl_rank": 1
            },
            "scrapy.utils.url.parse_url(url, encoding=None)": {
                "autofl_rank": 882
            }
        },
        "scrapy_17": {
            "scrapy.utils.response.response_status_message(status)": {
                "autofl_rank": 1
            }
        },
        "scrapy_18": {
            "scrapy.responsetypes.ResponseTypes.from_content_disposition(self, content_disposition)": {
                "autofl_rank": 1
            }
        },
        "scrapy_19": {},
        "scrapy_2": {
            "scrapy.utils.datatypes.LocalCache.__setitem__(self, key, value)": {
                "autofl_rank": 1
            }
        },
        "scrapy_21": {
            "scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware._robots_error(self, failure, netloc)": {
                "autofl_rank": 237
            }
        },
        "scrapy_22": {
            "scrapy.exporters.XmlItemExporter._export_xml_field(self, name, serialized_value)": {
                "autofl_rank": 291
            }
        },
        "scrapy_23": {
            "scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware._get_proxy(self, url, orig_type)": {
                "autofl_rank": 1
            },
            "scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware._set_proxy(self, request, scheme)": {
                "autofl_rank": 217
            }
        },
        "scrapy_24": {
            "scrapy.core.downloader.handlers.http11.TunnelingTCP4ClientEndpoint.requestTunnel(self, protocol)": {
                "autofl_rank": 47
            }
        },
        "scrapy_25": {
            "scrapy.http.request.form._get_form_url(form, url)": {
                "autofl_rank": 190
            },
            "scrapy.http.request.form._get_form(response, formname, formid, formnumber, formxpath)": {
                "autofl_rank": 189
            }
        },
        "scrapy_26": {
            "scrapy.settings.__init__.BaseSettings.getbool(self, name, default=False)": {
                "autofl_rank": 334
            },
            "scrapy.settings.__init__.BaseSettings._getcomposite(self, name)": {
                "autofl_rank": 1
            }
        },
        "scrapy_27": {
            "scrapy.downloadermiddlewares.redirect.RedirectMiddleware.process_response(self, request, response, spider)": {
                "autofl_rank": 1
            }
        },
        "scrapy_28": {
            "scrapy.dupefilters.RFPDupeFilter.__init__(self, path=None, debug=False)": {
                "autofl_rank": 44
            }
        },
        "scrapy_29": {
            "scrapy.utils.request.request_httprepr(request)": {
                "autofl_rank": 2
            }
        },
        "scrapy_3": {
            "scrapy.downloadermiddlewares.redirect.RedirectMiddleware.process_response(self, request, response, spider)": {
                "autofl_rank": 1
            }
        },
        "scrapy_30": {
            "scrapy.utils.testproc.TestProcessProtocol.__init__(self)": {
                "autofl_rank": 402
            }
        },
        "scrapy_31": {
            "scrapy.http.cookies.WrappedRequest.get_header(self, name, default=None)": {
                "autofl_rank": 62
            },
            "scrapy.http.cookies.WrappedResponse.get_all(self, name, default=None)": {
                "autofl_rank": 1
            }
        },
        "scrapy_32": {
            "scrapy.crawler.CrawlerProcess.__init__(self, settings)": {
                "autofl_rank": 2
            }
        },
        "scrapy_33": {
            "scrapy.pipelines.media.MediaPipeline.item_completed(self, results, item, info)": {
                "autofl_rank": 132
            }
        },
        "scrapy_34": {
            "scrapy.item.ItemMeta.__new__(mcs, class_name, bases, attrs)": {
                "autofl_rank": 62
            }
        },
        "scrapy_35": {
            "scrapy.crawler._get_spider_loader(settings)": {
                "autofl_rank": 2
            }
        },
        "scrapy_36": {
            "scrapy.utils.misc.create_instance(objcls, settings, crawler, *args, **kwargs)": {
                "autofl_rank": 1
            }
        },
        "scrapy_37": {
            "scrapy.http.request.__init__.Request._set_url(self, url)": {
                "autofl_rank": 498
            }
        },
        "scrapy_38": {
            "scrapy.http.request.form._get_clickable(clickdata, form)": {
                "autofl_rank": 487
            }
        },
        "scrapy_39": {
            "scrapy.spiders.__init__.Spider.start_requests(self)": {
                "autofl_rank": 705
            }
        },
        "scrapy_4": {
            "scrapy.contracts.__init__.ContractsManager._clean_req(self, request, method, results)": {
                "autofl_rank": 10
            },
            "scrapy.contracts.__init__.ContractsManager.eb_wrapper(failure)": {
                "autofl_rank": 12
            }
        },
        "scrapy_40": {
            "scrapy.exporters.PythonItemExporter._serialize_value(self, value)": {
                "autofl_rank": 2
            }
        },
        "scrapy_5": {
            "scrapy.http.response.__init__.Response.follow(self, url, callback=None, method='GET', headers=None, body=None, cookies=None, meta=None, encoding='utf-8', priority=0, dont_filter=False, errback=None)": {
                "autofl_rank": 504
            }
        },
        "scrapy_6": {
            "scrapy.pipelines.images.ImagesPipeline.convert_image(self, image, size=None)": {
                "autofl_rank": 1
            }
        },
        "scrapy_7": {
            "scrapy.http.request.form._get_form_url(form, url)": {
                "autofl_rank": 449
            }
        },
        "scrapy_8": {
            "scrapy.item.ItemMeta.__new__(mcs, class_name, bases, attrs)": {
                "autofl_rank": 489
            }
        },
        "scrapy_9": {
            "scrapy.mail.MailSender.send(self, to, subject, body, cc=None, attachs=(), mimetype='text/plain', charset=None, _callback=None)": {
                "autofl_rank": 1
            }
        },
        "spacy_2": {
            "spacy.util.load_model_from_path(model_path, meta=False, **overrides)": {
                "autofl_rank": 336
            }
        },
        "spacy_3": {},
        "thefuck_1": {
            "thefuck.rules.pip_unknown_command.get_new_command(command)": {
                "autofl_rank": 1
            }
        },
        "thefuck_10": {
            "thefuck.rules.man.get_new_command(command)": {
                "autofl_rank": 62
            }
        },
        "thefuck_11": {
            "thefuck.rules.git_push.get_new_command(command)": {
                "autofl_rank": 115
            }
        },
        "thefuck_13": {
            "thefuck.rules.git_branch_exists.match(command)": {
                "autofl_rank": 23
            },
            "thefuck.rules.git_branch_exists.get_new_command(command)": {
                "autofl_rank": 106
            }
        },
        "thefuck_14": {
            "thefuck.shells.fish.Fish._get_overridden_aliases(self)": {
                "autofl_rank": 1
            }
        },
        "thefuck_15": {
            "thefuck.rules.git_add.match(command)": {
                "autofl_rank": 19
            }
        },
        "thefuck_16": {
            "thefuck.shells.bash.Bash.app_alias(self, fuck)": {
                "autofl_rank": 206
            },
            "thefuck.shells.fish.Fish.app_alias(self, fuck)": {
                "autofl_rank": 213
            },
            "thefuck.shells.zsh.Zsh.app_alias(self, alias_name)": {
                "autofl_rank": 235
            }
        },
        "thefuck_17": {
            "thefuck.shells.bash.Bash.app_alias(self, fuck)": {
                "autofl_rank": 202
            },
            "thefuck.shells.zsh.Zsh.get_aliases(self)": {
                "autofl_rank": 232
            }
        },
        "thefuck_18": {
            "thefuck.rules.sudo.match(command)": {
                "autofl_rank": 62
            }
        },
        "thefuck_19": {
            "thefuck.rules.git_push_force.get_new_command(command)": {
                "autofl_rank": 28
            }
        },
        "thefuck_2": {
            "thefuck.utils.get_all_executables()": {
                "autofl_rank": 2
            }
        },
        "thefuck_20": {
            "thefuck.rules.dirty_unzip._zip_file(command)": {
                "autofl_rank": 111
            },
            "thefuck.rules.dirty_unzip.get_new_command(command)": {
                "autofl_rank": 11
            }
        },
        "thefuck_21": {
            "thefuck.rules.git_fix_stash.match(command)": {
                "autofl_rank": 2
            }
        },
        "thefuck_22": {
            "thefuck.types.SortedCorrectedCommandsSequence._realise(self)": {
                "autofl_rank": 2
            }
        },
        "thefuck_23": {
            "thefuck.utils.cache(*depends_on)": {
                "autofl_rank": 242
            },
            "thefuck.utils._cache(fn, *args, **kwargs)": {
                "autofl_rank": 237
            }
        },
        "thefuck_24": {
            "thefuck.types.SortedCorrectedCommandsSequence._get_first_two_unique(self)": {
                "autofl_rank": 222
            }
        },
        "thefuck_25": {
            "thefuck.rules.mkdir_p.get_new_command(command, settings)": {
                "autofl_rank": 43
            }
        },
        "thefuck_26": {
            "thefuck.rules.vagrant_up.get_new_command(command, settings)": {
                "autofl_rank": 65
            }
        },
        "thefuck_27": {
            "thefuck.rules.open.get_new_command(command, settings)": {
                "autofl_rank": 46
            }
        },
        "thefuck_28": {
            "thefuck.rules.fix_file.get_new_command(command, settings)": {
                "autofl_rank": 16
            }
        },
        "thefuck_29": {
            "thefuck.types.Settings.update(self, **kwargs)": {
                "autofl_rank": 2
            }
        },
        "thefuck_3": {
            "thefuck.shells.fish.Fish.info(self)": {
                "autofl_rank": 388
            }
        },
        "thefuck_31": {
            "thefuck.rules.git_diff_staged.get_new_command(command, settings)": {
                "autofl_rank": 17
            }
        },
        "thefuck_32": {},
        "thefuck_4": {
            "thefuck.shells.fish._get_aliases(overridden)": {
                "autofl_rank": 1
            }
        },
        "thefuck_5": {
            "thefuck.rules.git_push.match(command)": {
                "autofl_rank": 49
            }
        },
        "thefuck_6": {
            "thefuck.rules.git_branch_exists.match(command)": {
                "autofl_rank": 230
            }
        },
        "thefuck_7": {
            "thefuck.rules.php_s.match(command)": {
                "autofl_rank": 97
            }
        },
        "thefuck_8": {
            "thefuck.rules.dnf_no_such_command._parse_operations(help_text_lines)": {
                "autofl_rank": 193
            },
            "thefuck.rules.dnf_no_such_command._get_operations()": {
                "autofl_rank": 122
            }
        },
        "thefuck_9": {
            "thefuck.rules.git_push.get_new_command(command)": {
                "autofl_rank": 1
            }
        },
        "tornado_1": {
            "tornado.websocket.WebSocketHandler.set_nodelay(self, value: bool)": {
                "autofl_rank": 866
            }
        },
        "tornado_10": {
            "tornado.web.RequestHandler.finish(self, chunk=None)": {
                "autofl_rank": 705
            }
        },
        "tornado_12": {
            "tornado.auth.FacebookGraphMixin._on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response)": {
                "autofl_rank": 3
            },
            "tornado.auth.FacebookGraphMixin.facebook_request(self, path, callback, access_token=None, post_args=None, **args)": {
                "autofl_rank": 5
            }
        },
        "tornado_13": {
            "tornado.http1connection.HTTP1Connection._can_keep_alive(self, start_line, headers)": {
                "autofl_rank": 1
            }
        },
        "tornado_14": {
            "tornado.ioloop.IOLoop.initialize(self, make_current=None)": {
                "autofl_rank": 1
            }
        },
        "tornado_15": {
            "tornado.web.StaticFileHandler.validate_absolute_path(self, root, absolute_path)": {
                "autofl_rank": 706
            }
        },
        "tornado_16": {
            "tornado.gen.WaitIterator.__init__(self, *args, **kwargs)": {
                "autofl_rank": 74
            },
            "tornado.gen.WaitIterator.next(self)": {
                "autofl_rank": 2
            }
        },
        "tornado_2": {
            "tornado.http1connection.HTTP1Connection.write_headers(self, start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine], headers: httputil.HTTPHeaders, chunk: bytes=None)": {
                "autofl_rank": 82
            }
        },
        "tornado_4": {},
        "tornado_5": {
            "tornado.ioloop.PeriodicCallback._update_next(self, current_time)": {
                "autofl_rank": 256
            }
        },
        "tornado_6": {},
        "tornado_7": {
            "tornado.ioloop.IOLoop.run_in_executor(self, executor, func, *args)": {
                "autofl_rank": 2
            }
        },
        "tornado_8": {
            "tornado.websocket.WebSocketProtocol13.accept_connection(self)": {
                "autofl_rank": 873
            }
        },
        "tornado_9": {
            "tornado.httputil.url_concat(url, args)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_1": {
            "youtube_dl.utils._match_one(filter_part, dct)": {
                "autofl_rank": 2214
            }
        },
        "youtube-dl_10": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_11": {
            "youtube_dl.utils.str_to_int(int_str)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_12": {
            "youtube_dl.YoutubeDL.YoutubeDL._build_format_filter(self, filter_spec)": {
                "autofl_rank": 12
            }
        },
        "youtube-dl_13": {
            "youtube_dl.utils.urljoin(base, path)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_14": {
            "youtube_dl.extractor.youtube.YoutubeIE._real_extract(self, url)": {
                "autofl_rank": 2157
            }
        },
        "youtube-dl_15": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_17": {
            "youtube_dl.utils.cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_18": {
            "youtube_dl.YoutubeDL.YoutubeDL.process_ie_result(self, ie_result, download=True, extra_info={})": {
                "autofl_rank": 49
            }
        },
        "youtube-dl_19": {
            "youtube_dl.YoutubeDL.YoutubeDL.prepare_filename(self, info_dict)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_2": {
            "youtube_dl.extractor.common.InfoExtractor._parse_mpd_formats(self, mpd_doc, mpd_id=None, mpd_base_url='', formats_dict={}, mpd_url=None)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_20": {
            "youtube_dl.utils.get_elements_by_attribute(attribute, value, html, escape_value=True)": {
                "autofl_rank": 2102
            }
        },
        "youtube-dl_21": {
            "youtube_dl.utils.urljoin(base, path)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_22": {
            "youtube_dl.utils._match_one(filter_part, dct)": {
                "autofl_rank": 2
            }
        },
        "youtube-dl_23": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            },
            "youtube_dl.utils.fix_kv(m)": {
                "autofl_rank": 2013
            }
        },
        "youtube-dl_24": {
            "youtube_dl.utils._match_one(filter_part, dct)": {
                "autofl_rank": 1912
            }
        },
        "youtube-dl_25": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            },
            "youtube_dl.utils.fix_kv(m)": {
                "autofl_rank": 1861
            }
        },
        "youtube-dl_26": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 2
            }
        },
        "youtube-dl_27": {
            "youtube_dl.utils.parse_dfxp_time_expr(time_expr)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_28": {
            "youtube_dl.utils._htmlentity_transform(entity)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_29": {
            "youtube_dl.utils.unified_strdate(date_str, day_first=True)": {
                "autofl_rank": 1520
            }
        },
        "youtube-dl_3": {
            "youtube_dl.utils.unescapeHTML(s)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_30": {
            "youtube_dl.YoutubeDL.YoutubeDL.build_format_selector(self, format_spec)": {
                "autofl_rank": 32
            },
            "youtube_dl.YoutubeDL.YoutubeDL._build_selector_function(selector)": {
                "autofl_rank": 14
            },
            "youtube_dl.YoutubeDL.YoutubeDL.selector_function(formats)": {
                "autofl_rank": 3
            },
            "youtube_dl.YoutubeDL.TokenIterator.build_format_selector(self, format_spec)": {
                "autofl_rank": 7
            }
        },
        "youtube-dl_31": {
            "youtube_dl.extractor.minhateca.MinhatecaIE._real_extract(self, url)": {
                "autofl_rank": 504
            },
            "youtube_dl.utils.parse_duration(s)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_32": {
            "youtube_dl.extractor.npo.NPOIE._get_info(self, video_id)": {
                "autofl_rank": 569
            },
            "youtube_dl.utils.strip_jsonp(code)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_33": {
            "youtube_dl.extractor.drtv.DRTVIE._real_extract(self, url)": {
                "autofl_rank": 315
            },
            "youtube_dl.utils.parse_iso8601(date_str, delimiter='T')": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_34": {
            "youtube_dl.utils.ExtractorError.__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)": {
                "autofl_rank": 894
            },
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_35": {
            "youtube_dl.extractor.arte.ArteTVPlus7IE._extract_from_json_url(self, json_url, video_id, lang)": {
                "autofl_rank": 146
            },
            "youtube_dl.utils.unified_strdate(date_str)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_36": {},
        "youtube-dl_37": {
            "youtube_dl.utils.uppercase_escape(s)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_38": {
            "youtube_dl.extractor.facebook.FacebookIE._login(self)": {
                "autofl_rank": 276
            }
        },
        "youtube-dl_39": {
            "youtube_dl.extractor.facebook.FacebookIE._real_extract(self, url)": {
                "autofl_rank": 323
            }
        },
        "youtube-dl_4": {
            "youtube_dl.jsinterp.JSInterpreter.interpret_expression(self, expr, local_vars, allow_recursion)": {
                "autofl_rank": 2
            }
        },
        "youtube-dl_40": {
            "youtube_dl.downloader.f4m.FlvReader.read_unsigned_long_long(self)": {
                "autofl_rank": 105
            },
            "youtube_dl.downloader.f4m.write_flv_header(stream, metadata)": {
                "autofl_rank": 110
            }
        },
        "youtube-dl_41": {
            "youtube_dl.utils.unified_strdate(date_str)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_42": {
            "youtube_dl.extractor.clipsyndicate.ClipsyndicateIE._real_extract(self, url)": {
                "autofl_rank": 165
            },
            "youtube_dl.extractor.metacritic.MetacriticIE._real_extract(self, url)": {
                "autofl_rank": 315
            },
            "youtube_dl.extractor.mtv.MTVServicesInfoExtractor._get_videos_info(self, uri)": {
                "autofl_rank": 328
            },
            "youtube_dl.utils.fix_xml_all_ampersand(xml_str)": {
                "autofl_rank": 590
            }
        },
        "youtube-dl_43": {
            "youtube_dl.utils.url_basename(url)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_5": {
            "youtube_dl.utils.unified_timestamp(date_str, day_first=True)": {
                "autofl_rank": 1
            }
        },
        "youtube-dl_6": {
            "youtube_dl.utils.parse_dfxp_time_expr(time_expr)": {
                "autofl_rank": 1
            },
            "youtube_dl.utils.dfxp2srt(dfxp_data)": {
                "autofl_rank": 1501
            }
        },
        "youtube-dl_7": {
            "youtube_dl.utils.js_to_json(code)": {
                "autofl_rank": 1
            },
            "youtube_dl.utils.fix_kv(m)": {
                "autofl_rank": 1462
            }
        },
        "youtube-dl_8": {
            "youtube_dl.YoutubeDL.YoutubeDL.build_format_selector(self, format_spec)": {
                "autofl_rank": 32
            },
            "youtube_dl.YoutubeDL.YoutubeDL._parse_format_selection(tokens, inside_merge=False, inside_choice=False, inside_group=False)": {
                "autofl_rank": 22
            },
            "youtube_dl.YoutubeDL.TokenIterator.build_format_selector(self, format_spec)": {
                "autofl_rank": 7
            }
        },
        "youtube-dl_9": {
            "youtube_dl.YoutubeDL.YoutubeDL.build_format_selector(self, format_spec)": {
                "autofl_rank": 32
            },
            "youtube_dl.YoutubeDL.YoutubeDL._parse_format_selection(tokens, endwith=[])": {
                "autofl_rank": 22
            },
            "youtube_dl.YoutubeDL.TokenIterator.build_format_selector(self, format_spec)": {
                "autofl_rank": 6
            }
        }
    },
    "confidence": {
        "PySnooper_1": 0.0,
        "PySnooper_3": 0.2,
        "ansible_1": 0.6,
        "ansible_14": 1.0,
        "ansible_15": 0.0,
        "ansible_16": 0.6,
        "ansible_17": 0.8,
        "ansible_18": 0.2,
        "ansible_2": 0.0,
        "ansible_3": 0.2,
        "ansible_4": 0.6,
        "ansible_5": 0.4,
        "ansible_6": 0.6,
        "black_1": null,
        "black_10": 0.2,
        "black_11": 0.2,
        "black_12": 0.7,
        "black_13": 0.6,
        "black_14": 0.4,
        "black_15": 0.2,
        "black_16": 0.6,
        "black_17": 0.8,
        "black_18": 0.0,
        "black_19": 0.0,
        "black_2": null,
        "black_20": 0.4,
        "black_22": 0.0,
        "black_23": 0.2,
        "black_3": null,
        "black_4": 0.0,
        "black_5": 0.0,
        "black_6": 0.0,
        "black_7": 0.0,
        "black_8": 0.0,
        "black_9": 1.0,
        "cookiecutter_1": 0.6,
        "cookiecutter_2": 0.6,
        "cookiecutter_3": 0.0,
        "cookiecutter_4": 0.6,
        "fastapi_1": 0.6,
        "fastapi_10": 0.0,
        "fastapi_11": 0.3,
        "fastapi_12": 0.0,
        "fastapi_13": 0.0,
        "fastapi_14": 0.2,
        "fastapi_15": 0.0,
        "fastapi_16": 0.6,
        "fastapi_2": 0.2,
        "fastapi_3": 0.4,
        "fastapi_4": 0.0,
        "fastapi_5": 0.0,
        "fastapi_6": 0.0,
        "fastapi_7": 0.2,
        "fastapi_8": 0.0,
        "fastapi_9": 0.2,
        "httpie_1": 0.4,
        "httpie_2": 0.0,
        "httpie_3": 0.0,
        "httpie_4": 0.2,
        "httpie_5": 1.0,
        "keras_1": 0.4,
        "keras_10": 0.4,
        "keras_11": 0.0,
        "keras_13": 0.0,
        "keras_15": 0.4,
        "keras_16": 0.2,
        "keras_17": 0.25,
        "keras_18": 0.2,
        "keras_19": 0.2,
        "keras_2": 1.0,
        "keras_20": 0.2,
        "keras_24": 0.0,
        "keras_25": 0.0,
        "keras_26": 0.0,
        "keras_27": 0.0,
        "keras_28": 0.2,
        "keras_3": 0.4,
        "keras_30": 0.0,
        "keras_31": 0.8,
        "keras_32": 0.0,
        "keras_33": 0.6,
        "keras_34": 0.2,
        "keras_35": 0.4,
        "keras_36": 0.2,
        "keras_37": 0.01,
        "keras_38": 0.2,
        "keras_39": 0.2,
        "keras_4": 0.0,
        "keras_40": 0.4,
        "keras_41": 0.2,
        "keras_42": 0.0,
        "keras_43": 0.6,
        "keras_44": 0.0,
        "keras_6": 0.2,
        "keras_7": 0.0,
        "keras_8": 0.2,
        "luigi_1": 0.4,
        "luigi_10": 0.5,
        "luigi_11": 0.8,
        "luigi_12": 0.6,
        "luigi_13": 0.2,
        "luigi_14": 0.3,
        "luigi_15": 0.3,
        "luigi_16": 0.0,
        "luigi_17": 0.2,
        "luigi_18": 0.3,
        "luigi_19": 0.2,
        "luigi_22": 1.0,
        "luigi_23": 0.2,
        "luigi_26": 0.2,
        "luigi_27": 0.2,
        "luigi_28": 0.0,
        "luigi_29": 0.7,
        "luigi_3": 0.4,
        "luigi_30": 0.2,
        "luigi_31": 0.0,
        "luigi_32": 0.0,
        "luigi_33": 0.4,
        "luigi_4": 0.0,
        "luigi_5": 0.06666666666666667,
        "luigi_6": 0.2,
        "luigi_7": 1.0,
        "luigi_8": 0.6,
        "luigi_9": 0.4,
        "matplotlib_1": 0.2,
        "matplotlib_10": 1.0,
        "matplotlib_11": 0.2,
        "matplotlib_12": 0.4,
        "matplotlib_13": 1.0,
        "matplotlib_14": 0.8,
        "matplotlib_15": 0.0,
        "matplotlib_16": 0.6,
        "matplotlib_17": 0.7,
        "matplotlib_18": 0.2,
        "matplotlib_19": 1.0,
        "matplotlib_2": 0.2,
        "matplotlib_20": 1.0,
        "matplotlib_21": 0.6,
        "matplotlib_22": 0.4,
        "matplotlib_23": 0.46818181818181814,
        "matplotlib_24": 0.8,
        "matplotlib_25": 0.0,
        "matplotlib_29": 1.0,
        "matplotlib_3": 1.0,
        "matplotlib_30": 0.8,
        "matplotlib_4": 0.0,
        "matplotlib_5": 0.8,
        "matplotlib_6": 0.0,
        "matplotlib_7": 1.0,
        "matplotlib_8": 0.4,
        "matplotlib_9": 0.4,
        "pandas_1": 0.6,
        "pandas_10": 0.2,
        "pandas_100": 1.0,
        "pandas_101": 1.0,
        "pandas_102": 0.6,
        "pandas_103": 0.0,
        "pandas_104": 0.8,
        "pandas_105": 0.2,
        "pandas_106": 0.2,
        "pandas_107": 0.4,
        "pandas_108": 0.2,
        "pandas_109": 0.4,
        "pandas_11": 0.4,
        "pandas_110": 0.4666666666666667,
        "pandas_111": 0.6,
        "pandas_112": 0.8,
        "pandas_114": 0.2,
        "pandas_115": 0.0,
        "pandas_116": 0.6,
        "pandas_117": 0.8,
        "pandas_118": 0.6,
        "pandas_119": 0.2,
        "pandas_12": 0.6,
        "pandas_120": 0.3,
        "pandas_121": 0.8,
        "pandas_122": 0.0,
        "pandas_123": 0.2,
        "pandas_124": 0.0,
        "pandas_125": 0.2,
        "pandas_126": 0.4,
        "pandas_127": 0.6,
        "pandas_128": 0.4,
        "pandas_129": 0.0,
        "pandas_13": 0.2,
        "pandas_130": 0.2,
        "pandas_131": 0.0,
        "pandas_132": 0.5,
        "pandas_133": 0.2,
        "pandas_134": 0.2,
        "pandas_135": 0.2,
        "pandas_136": 0.4,
        "pandas_137": 0.4,
        "pandas_138": 0.6,
        "pandas_139": 0.4,
        "pandas_140": 0.2,
        "pandas_141": 0.0,
        "pandas_142": 0.4,
        "pandas_143": 0.4,
        "pandas_144": 0.6,
        "pandas_145": 0.26666666666666666,
        "pandas_146": 0.4,
        "pandas_147": 0.0,
        "pandas_148": 0.2,
        "pandas_15": 0.3,
        "pandas_150": 0.8,
        "pandas_151": 0.4,
        "pandas_152": 0.8,
        "pandas_153": 0.0,
        "pandas_154": 0.4,
        "pandas_155": 0.6,
        "pandas_156": 0.4,
        "pandas_157": 0.4,
        "pandas_158": 0.6,
        "pandas_159": 0.0,
        "pandas_16": 0.2,
        "pandas_160": 0.2,
        "pandas_161": 0.2,
        "pandas_162": 0.65,
        "pandas_163": 1.0,
        "pandas_164": 0.1,
        "pandas_165": 0.2,
        "pandas_166": 0.5,
        "pandas_167": 0.0,
        "pandas_168": 0.4,
        "pandas_169": 0.8,
        "pandas_17": 0.2,
        "pandas_18": 0.2,
        "pandas_19": 0.06666666666666667,
        "pandas_2": 0.2,
        "pandas_20": 0.0,
        "pandas_21": 0.4,
        "pandas_22": 0.6,
        "pandas_23": 0.0,
        "pandas_24": 0.0,
        "pandas_25": 0.2,
        "pandas_26": 0.2,
        "pandas_27": 0.0,
        "pandas_28": 0.6,
        "pandas_29": 0.0,
        "pandas_3": 0.4,
        "pandas_30": 0.4,
        "pandas_31": 0.3,
        "pandas_32": 0.0,
        "pandas_33": 0.06666666666666667,
        "pandas_34": 0.25,
        "pandas_35": 0.0,
        "pandas_36": 0.8,
        "pandas_37": 0.8,
        "pandas_38": 0.4,
        "pandas_39": 0.8,
        "pandas_4": 0.0,
        "pandas_40": 0.2,
        "pandas_41": 0.2,
        "pandas_42": 0.2,
        "pandas_43": 0.0,
        "pandas_44": 0.2,
        "pandas_45": 0.2,
        "pandas_46": 0.3,
        "pandas_47": 0.4666666666666666,
        "pandas_48": 0.3,
        "pandas_49": 0.4,
        "pandas_50": 0.1,
        "pandas_51": 0.4,
        "pandas_52": 0.0,
        "pandas_53": 0.2,
        "pandas_54": 1.0,
        "pandas_55": 0.4,
        "pandas_56": 0.2,
        "pandas_57": 0.0,
        "pandas_58": 1.0,
        "pandas_59": 0.0,
        "pandas_6": 0.2,
        "pandas_60": 0.2,
        "pandas_61": 0.0,
        "pandas_62": 0.0,
        "pandas_63": 0.0,
        "pandas_64": 0.4,
        "pandas_65": 0.0,
        "pandas_66": 0.6,
        "pandas_67": 0.4,
        "pandas_68": 0.4,
        "pandas_69": 0.0,
        "pandas_7": 0.6,
        "pandas_70": 0.0,
        "pandas_71": 1.0,
        "pandas_72": 0.2,
        "pandas_73": 0.8666666666666666,
        "pandas_74": 0.0,
        "pandas_75": 0.2,
        "pandas_76": 0.44000000000000006,
        "pandas_77": 0.8,
        "pandas_78": 0.2,
        "pandas_79": 0.4,
        "pandas_8": 0.0,
        "pandas_80": 0.0,
        "pandas_81": 0.6,
        "pandas_82": 0.4,
        "pandas_83": 0.2,
        "pandas_84": 0.6,
        "pandas_85": 0.6,
        "pandas_86": 0.4,
        "pandas_87": 0.4,
        "pandas_88": 0.8,
        "pandas_89": 0.4,
        "pandas_9": 0.0,
        "pandas_90": 0.6,
        "pandas_91": 0.0,
        "pandas_92": 0.2,
        "pandas_93": 0.2,
        "pandas_94": 0.2,
        "pandas_95": 0.0,
        "pandas_96": 0.2,
        "pandas_97": 0.0,
        "pandas_98": 0.2,
        "pandas_99": 0.0,
        "sanic_3": 0.2,
        "sanic_4": 0.2,
        "sanic_5": 0.0,
        "scrapy_1": 0.4,
        "scrapy_10": 0.0,
        "scrapy_11": 0.2,
        "scrapy_12": 0.0,
        "scrapy_14": 0.4,
        "scrapy_15": 0.6,
        "scrapy_16": 0.4,
        "scrapy_17": 0.8,
        "scrapy_18": 1.0,
        "scrapy_19": 0.2,
        "scrapy_2": 0.4,
        "scrapy_21": 0.4,
        "scrapy_22": 0.4,
        "scrapy_23": 0.7,
        "scrapy_24": 0.0,
        "scrapy_25": 1.0,
        "scrapy_26": 0.6,
        "scrapy_27": 0.4,
        "scrapy_28": 0.8,
        "scrapy_29": 0.7666666666666667,
        "scrapy_3": 0.6,
        "scrapy_30": 0.8,
        "scrapy_31": 0.4,
        "scrapy_32": 0.8,
        "scrapy_33": 0.0,
        "scrapy_34": 0.0,
        "scrapy_35": 0.2,
        "scrapy_36": 0.8,
        "scrapy_37": 0.0,
        "scrapy_38": 0.2,
        "scrapy_39": 0.0,
        "scrapy_4": 0.0,
        "scrapy_40": 0.2,
        "scrapy_5": 0.2,
        "scrapy_6": 0.8,
        "scrapy_7": 0.2,
        "scrapy_8": 0.0,
        "scrapy_9": 1.0,
        "spacy_2": 0.8400000000000001,
        "spacy_3": 0.0,
        "thefuck_1": 0.2,
        "thefuck_10": 0.0,
        "thefuck_11": 0.0,
        "thefuck_13": 0.0,
        "thefuck_14": 0.8,
        "thefuck_15": 0.0,
        "thefuck_16": 0.0,
        "thefuck_17": 0.0,
        "thefuck_18": 0.0,
        "thefuck_19": 0.0,
        "thefuck_2": 0.2,
        "thefuck_20": 0.0,
        "thefuck_21": 0.6,
        "thefuck_22": 0.4,
        "thefuck_23": 0.0,
        "thefuck_24": 0.8,
        "thefuck_25": 0.0,
        "thefuck_26": 0.0,
        "thefuck_27": 0.0,
        "thefuck_28": 0.0,
        "thefuck_29": 0.2,
        "thefuck_3": 0.0,
        "thefuck_31": 0.0,
        "thefuck_32": 0.0,
        "thefuck_4": 1.0,
        "thefuck_5": 0.0,
        "thefuck_6": 0.4,
        "thefuck_7": 0.1,
        "thefuck_8": 0.0,
        "thefuck_9": 0.4,
        "tornado_1": 0.6,
        "tornado_10": 0.8,
        "tornado_12": 0.4,
        "tornado_13": 0.4,
        "tornado_14": 0.2,
        "tornado_15": 0.0,
        "tornado_16": 0.2,
        "tornado_2": 0.2,
        "tornado_4": 0.0,
        "tornado_5": 0.7,
        "tornado_6": 0.0,
        "tornado_7": 0.4,
        "tornado_8": 0.2,
        "tornado_9": 1.0,
        "youtube-dl_1": 0.8,
        "youtube-dl_10": 0.8,
        "youtube-dl_11": 1.0,
        "youtube-dl_12": 0.6,
        "youtube-dl_13": 0.6,
        "youtube-dl_14": 0.0,
        "youtube-dl_15": 0.4,
        "youtube-dl_17": 1.0,
        "youtube-dl_18": 0.0,
        "youtube-dl_19": 1.0,
        "youtube-dl_2": 0.6,
        "youtube-dl_20": 0.6,
        "youtube-dl_21": 0.8,
        "youtube-dl_22": 0.4,
        "youtube-dl_23": 0.4,
        "youtube-dl_24": 0.5,
        "youtube-dl_25": 0.6,
        "youtube-dl_26": 0.2,
        "youtube-dl_27": 0.6,
        "youtube-dl_28": 0.7,
        "youtube-dl_29": 0.0,
        "youtube-dl_3": 0.6,
        "youtube-dl_30": 0.6,
        "youtube-dl_31": 1.0,
        "youtube-dl_32": 0.6,
        "youtube-dl_33": 0.4,
        "youtube-dl_34": 0.4,
        "youtube-dl_35": 0.2,
        "youtube-dl_36": 0.0,
        "youtube-dl_37": 0.6,
        "youtube-dl_38": 0.0,
        "youtube-dl_39": 0.0,
        "youtube-dl_4": 0.8,
        "youtube-dl_40": 0.0,
        "youtube-dl_41": 0.2,
        "youtube-dl_42": 0.0,
        "youtube-dl_43": 0.4,
        "youtube-dl_5": 0.2,
        "youtube-dl_6": 0.8,
        "youtube-dl_7": 0.6,
        "youtube-dl_8": 0.2,
        "youtube-dl_9": 0.6
    }
}