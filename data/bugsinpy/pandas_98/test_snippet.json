[
    {
        "name": "pandas.tests.indexes.conftest.indices#28",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.indices(request)",
        "snippet": "def indices(request):\n    # copy to avoid mutation, e.g. setting .name\n    return indices_dict[request.param].copy()",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_construction_base_constructor#15",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_construction_base_constructor(self)",
        "snippet": "    def test_construction_base_constructor(self):\n        # GH 13664\n        arr = [pd.Period(\"2011-01\", freq=\"M\"), pd.NaT, pd.Period(\"2011-03\", freq=\"M\")]\n        tm.assert_index_equal(pd.Index(arr), pd.PeriodIndex(arr))\n        tm.assert_index_equal(pd.Index(np.array(arr)), pd.PeriodIndex(np.array(arr)))\n\n        arr = [np.nan, pd.NaT, pd.Period(\"2011-03\", freq=\"M\")]\n        tm.assert_index_equal(pd.Index(arr), pd.PeriodIndex(arr))\n        tm.assert_index_equal(pd.Index(np.array(arr)), pd.PeriodIndex(np.array(arr)))\n\n        arr = [pd.Period(\"2011-01\", freq=\"M\"), pd.NaT, pd.Period(\"2011-03\", freq=\"D\")]\n        tm.assert_index_equal(pd.Index(arr), pd.Index(arr, dtype=object))\n\n        tm.assert_index_equal(\n            pd.Index(np.array(arr)), pd.Index(np.array(arr), dtype=object)\n        )",
        "begin_line": 15,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_base_constructor_with_period_dtype#32",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_base_constructor_with_period_dtype(self)",
        "snippet": "    def test_base_constructor_with_period_dtype(self):\n        dtype = PeriodDtype(\"D\")\n        values = [\"2011-01-01\", \"2012-03-04\", \"2014-05-01\"]\n        result = pd.Index(values, dtype=dtype)\n\n        expected = pd.PeriodIndex(values, dtype=dtype)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_index_object_dtype#43",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_index_object_dtype(self, values_constructor)",
        "snippet": "    def test_index_object_dtype(self, values_constructor):\n        # Index(periods, dtype=object) is an Index (not an PeriodIndex)\n        periods = [\n            pd.Period(\"2011-01\", freq=\"M\"),\n            pd.NaT,\n            pd.Period(\"2011-03\", freq=\"M\"),\n        ]\n        values = values_constructor(periods)\n        result = Index(values, dtype=object)\n\n        assert type(result) is Index\n        tm.assert_numpy_array_equal(result.values, np.array(values))",
        "begin_line": 43,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_use_start_freq#56",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_use_start_freq(self)",
        "snippet": "    def test_constructor_use_start_freq(self):\n        # GH #1118\n        p = Period(\"4/2/2012\", freq=\"B\")\n        expected = period_range(start=\"4/2/2012\", periods=10, freq=\"B\")\n\n        index = period_range(start=p, periods=10)\n        tm.assert_index_equal(index, expected)",
        "begin_line": 56,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_field_arrays#64",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_field_arrays(self)",
        "snippet": "    def test_constructor_field_arrays(self):\n        # GH #1264\n\n        years = np.arange(1990, 2010).repeat(4)[2:-2]\n        quarters = np.tile(np.arange(1, 5), 20)[2:-2]\n\n        index = PeriodIndex(year=years, quarter=quarters, freq=\"Q-DEC\")\n        expected = period_range(\"1990Q3\", \"2009Q2\", freq=\"Q-DEC\")\n        tm.assert_index_equal(index, expected)\n\n        index2 = PeriodIndex(year=years, quarter=quarters, freq=\"2Q-DEC\")\n        tm.assert_numpy_array_equal(index.asi8, index2.asi8)\n\n        index = PeriodIndex(year=years, quarter=quarters)\n        tm.assert_index_equal(index, expected)\n\n        years = [2007, 2007, 2007]\n        months = [1, 2]\n\n        msg = \"Mismatched Period array lengths\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(year=years, month=months, freq=\"M\")\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(year=years, month=months, freq=\"2M\")\n\n        years = [2007, 2007, 2007]\n        months = [1, 2, 3]\n        idx = PeriodIndex(year=years, month=months, freq=\"M\")\n        exp = period_range(\"2007-01\", periods=3, freq=\"M\")\n        tm.assert_index_equal(idx, exp)",
        "begin_line": 64,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_U#95",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_U(self)",
        "snippet": "    def test_constructor_U(self):\n        # U was used as undefined period\n        with pytest.raises(ValueError, match=\"Invalid frequency: X\"):\n            period_range(\"2007-1-1\", periods=500, freq=\"X\")",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nano#100",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nano(self)",
        "snippet": "    def test_constructor_nano(self):\n        idx = period_range(\n            start=Period(ordinal=1, freq=\"N\"), end=Period(ordinal=4, freq=\"N\"), freq=\"N\"\n        )\n        exp = PeriodIndex(\n            [\n                Period(ordinal=1, freq=\"N\"),\n                Period(ordinal=2, freq=\"N\"),\n                Period(ordinal=3, freq=\"N\"),\n                Period(ordinal=4, freq=\"N\"),\n            ],\n            freq=\"N\",\n        )\n        tm.assert_index_equal(idx, exp)",
        "begin_line": 100,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_arrays_negative_year#115",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_arrays_negative_year(self)",
        "snippet": "    def test_constructor_arrays_negative_year(self):\n        years = np.arange(1960, 2000, dtype=np.int64).repeat(4)\n        quarters = np.tile(np.array([1, 2, 3, 4], dtype=np.int64), 40)\n\n        pindex = PeriodIndex(year=years, quarter=quarters)\n\n        tm.assert_index_equal(pindex.year, pd.Index(years))\n        tm.assert_index_equal(pindex.quarter, pd.Index(quarters))",
        "begin_line": 115,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_invalid_quarters#124",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_invalid_quarters(self)",
        "snippet": "    def test_constructor_invalid_quarters(self):\n        msg = \"Quarter must be 1 <= q <= 4\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(year=range(2000, 2004), quarter=list(range(4)), freq=\"Q-DEC\")",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_corner#129",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_corner(self)",
        "snippet": "    def test_constructor_corner(self):\n        result = period_range(\"2007-01\", periods=10.5, freq=\"M\")\n        exp = period_range(\"2007-01\", periods=10, freq=\"M\")\n        tm.assert_index_equal(result, exp)",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_fromarraylike#134",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_fromarraylike(self)",
        "snippet": "    def test_constructor_fromarraylike(self):\n        idx = period_range(\"2007-01\", periods=20, freq=\"M\")\n\n        # values is an array of Period, thus can retrieve freq\n        tm.assert_index_equal(PeriodIndex(idx.values), idx)\n        tm.assert_index_equal(PeriodIndex(list(idx.values)), idx)\n\n        msg = \"freq not specified and cannot be inferred\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(idx._ndarray_values)\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(list(idx._ndarray_values))\n\n        msg = \"'Period' object is not iterable\"\n        with pytest.raises(TypeError, match=msg):\n            PeriodIndex(data=Period(\"2007\", freq=\"A\"))\n\n        result = PeriodIndex(iter(idx))\n        tm.assert_index_equal(result, idx)\n\n        result = PeriodIndex(idx)\n        tm.assert_index_equal(result, idx)\n\n        result = PeriodIndex(idx, freq=\"M\")\n        tm.assert_index_equal(result, idx)\n\n        result = PeriodIndex(idx, freq=offsets.MonthEnd())\n        tm.assert_index_equal(result, idx)\n        assert result.freq == \"M\"\n\n        result = PeriodIndex(idx, freq=\"2M\")\n        tm.assert_index_equal(result, idx.asfreq(\"2M\"))\n        assert result.freq == \"2M\"\n\n        result = PeriodIndex(idx, freq=offsets.MonthEnd(2))\n        tm.assert_index_equal(result, idx.asfreq(\"2M\"))\n        assert result.freq == \"2M\"\n\n        result = PeriodIndex(idx, freq=\"D\")\n        exp = idx.asfreq(\"D\", \"e\")\n        tm.assert_index_equal(result, exp)",
        "begin_line": 134,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr#176",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr(self)",
        "snippet": "    def test_constructor_datetime64arr(self):\n        vals = np.arange(100000, 100000 + 10000, 100, dtype=np.int64)\n        vals = vals.view(np.dtype(\"M8[us]\"))\n\n        msg = r\"Wrong dtype: datetime64\\[us\\]\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex(vals, freq=\"D\")",
        "begin_line": 176,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr_ok#185",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_datetime64arr_ok(self, box)",
        "snippet": "    def test_constructor_datetime64arr_ok(self, box):\n        # https://github.com/pandas-dev/pandas/issues/23438\n        data = pd.date_range(\"2017\", periods=4, freq=\"M\")\n        if box is None:\n            data = data._values\n        elif box == \"series\":\n            data = pd.Series(data)\n\n        result = PeriodIndex(data, freq=\"D\")\n        expected = PeriodIndex(\n            [\"2017-01-31\", \"2017-02-28\", \"2017-03-31\", \"2017-04-30\"], freq=\"D\"\n        )\n        tm.assert_index_equal(result, expected)",
        "begin_line": 185,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_dtype#199",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_dtype(self)",
        "snippet": "    def test_constructor_dtype(self):\n        # passing a dtype with a tz should localize\n        idx = PeriodIndex([\"2013-01\", \"2013-03\"], dtype=\"period[M]\")\n        exp = PeriodIndex([\"2013-01\", \"2013-03\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n        assert idx.dtype == \"period[M]\"\n\n        idx = PeriodIndex([\"2013-01-05\", \"2013-03-05\"], dtype=\"period[3D]\")\n        exp = PeriodIndex([\"2013-01-05\", \"2013-03-05\"], freq=\"3D\")\n        tm.assert_index_equal(idx, exp)\n        assert idx.dtype == \"period[3D]\"\n\n        # if we already have a freq and its not the same, then asfreq\n        # (not changed)\n        idx = PeriodIndex([\"2013-01-01\", \"2013-01-02\"], freq=\"D\")\n\n        res = PeriodIndex(idx, dtype=\"period[M]\")\n        exp = PeriodIndex([\"2013-01\", \"2013-01\"], freq=\"M\")\n        tm.assert_index_equal(res, exp)\n        assert res.dtype == \"period[M]\"\n\n        res = PeriodIndex(idx, freq=\"M\")\n        tm.assert_index_equal(res, exp)\n        assert res.dtype == \"period[M]\"\n\n        msg = \"specified freq and dtype are different\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex([\"2011-01\"], freq=\"M\", dtype=\"period[D]\")",
        "begin_line": 199,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_empty#228",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_empty(self)",
        "snippet": "    def test_constructor_empty(self):\n        idx = pd.PeriodIndex([], freq=\"M\")\n        assert isinstance(idx, PeriodIndex)\n        assert len(idx) == 0\n        assert idx.freq == \"M\"\n\n        with pytest.raises(ValueError, match=\"freq not specified\"):\n            pd.PeriodIndex([])",
        "begin_line": 228,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_pi_nat#237",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_pi_nat(self)",
        "snippet": "    def test_constructor_pi_nat(self):\n        idx = PeriodIndex(\n            [Period(\"2011-01\", freq=\"M\"), pd.NaT, Period(\"2011-01\", freq=\"M\")]\n        )\n        exp = PeriodIndex([\"2011-01\", \"NaT\", \"2011-01\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex(\n            np.array([Period(\"2011-01\", freq=\"M\"), pd.NaT, Period(\"2011-01\", freq=\"M\")])\n        )\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex(\n            [pd.NaT, pd.NaT, Period(\"2011-01\", freq=\"M\"), Period(\"2011-01\", freq=\"M\")]\n        )\n        exp = PeriodIndex([\"NaT\", \"NaT\", \"2011-01\", \"2011-01\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex(\n            np.array(\n                [\n                    pd.NaT,\n                    pd.NaT,\n                    Period(\"2011-01\", freq=\"M\"),\n                    Period(\"2011-01\", freq=\"M\"),\n                ]\n            )\n        )\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex([pd.NaT, pd.NaT, \"2011-01\", \"2011-01\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n\n        with pytest.raises(ValueError, match=\"freq not specified\"):\n            PeriodIndex([pd.NaT, pd.NaT])\n\n        with pytest.raises(ValueError, match=\"freq not specified\"):\n            PeriodIndex(np.array([pd.NaT, pd.NaT]))\n\n        with pytest.raises(ValueError, match=\"freq not specified\"):\n            PeriodIndex([\"NaT\", \"NaT\"])\n\n        with pytest.raises(ValueError, match=\"freq not specified\"):\n            PeriodIndex(np.array([\"NaT\", \"NaT\"]))",
        "begin_line": 237,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_incompat_freq#282",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_incompat_freq(self)",
        "snippet": "    def test_constructor_incompat_freq(self):\n        msg = \"Input has different freq=D from PeriodIndex\\\\(freq=M\\\\)\"\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(\n                [Period(\"2011-01\", freq=\"M\"), pd.NaT, Period(\"2011-01\", freq=\"D\")]\n            )\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(\n                np.array(\n                    [Period(\"2011-01\", freq=\"M\"), pd.NaT, Period(\"2011-01\", freq=\"D\")]\n                )\n            )\n\n        # first element is pd.NaT\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(\n                [pd.NaT, Period(\"2011-01\", freq=\"M\"), Period(\"2011-01\", freq=\"D\")]\n            )\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(\n                np.array(\n                    [pd.NaT, Period(\"2011-01\", freq=\"M\"), Period(\"2011-01\", freq=\"D\")]\n                )\n            )",
        "begin_line": 282,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_mixed#310",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_mixed(self)",
        "snippet": "    def test_constructor_mixed(self):\n        idx = PeriodIndex([\"2011-01\", pd.NaT, Period(\"2011-01\", freq=\"M\")])\n        exp = PeriodIndex([\"2011-01\", \"NaT\", \"2011-01\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex([\"NaT\", pd.NaT, Period(\"2011-01\", freq=\"M\")])\n        exp = PeriodIndex([\"NaT\", \"NaT\", \"2011-01\"], freq=\"M\")\n        tm.assert_index_equal(idx, exp)\n\n        idx = PeriodIndex([Period(\"2011-01-01\", freq=\"D\"), pd.NaT, \"2012-01-01\"])\n        exp = PeriodIndex([\"2011-01-01\", \"NaT\", \"2012-01-01\"], freq=\"D\")\n        tm.assert_index_equal(idx, exp)",
        "begin_line": 310,
        "end_line": 321,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new#323",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new(self)",
        "snippet": "    def test_constructor_simple_new(self):\n        idx = period_range(\"2007-01\", name=\"p\", periods=2, freq=\"M\")\n        result = idx._simple_new(idx, name=\"p\", freq=idx.freq)\n        tm.assert_index_equal(result, idx)\n\n        result = idx._simple_new(idx.astype(\"i8\"), name=\"p\", freq=idx.freq)\n        tm.assert_index_equal(result, idx)",
        "begin_line": 323,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new_empty#331",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_simple_new_empty(self)",
        "snippet": "    def test_constructor_simple_new_empty(self):\n        # GH13079\n        idx = PeriodIndex([], freq=\"M\", name=\"p\")\n        result = idx._simple_new(idx, name=\"p\", freq=\"M\")\n        tm.assert_index_equal(result, idx)",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_floats#338",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_floats(self, floats)",
        "snippet": "    def test_constructor_floats(self, floats):\n        msg = r\"PeriodIndex\\._simple_new does not accept floats\"\n        with pytest.raises(TypeError, match=msg):\n            pd.PeriodIndex._simple_new(floats, freq=\"M\")\n\n        msg = \"PeriodIndex does not allow floating point in construction\"\n        with pytest.raises(TypeError, match=msg):\n            pd.PeriodIndex(floats, freq=\"M\")",
        "begin_line": 338,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nat#347",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_nat(self)",
        "snippet": "    def test_constructor_nat(self):\n        msg = \"start and end must not be NaT\"\n        with pytest.raises(ValueError, match=msg):\n            period_range(start=\"NaT\", end=\"2011-01-01\", freq=\"M\")\n        with pytest.raises(ValueError, match=msg):\n            period_range(start=\"2011-01-01\", end=\"NaT\", freq=\"M\")",
        "begin_line": 347,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_year_and_quarter#354",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_year_and_quarter(self)",
        "snippet": "    def test_constructor_year_and_quarter(self):\n        year = pd.Series([2001, 2002, 2003])\n        quarter = year - 2000\n        idx = PeriodIndex(year=year, quarter=quarter)\n        strs = [\"{t[0]:d}Q{t[1]:d}\".format(t=t) for t in zip(quarter, year)]\n        lops = list(map(Period, strs))\n        p = PeriodIndex(lops)\n        tm.assert_index_equal(p, idx)",
        "begin_line": 354,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult#363",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult(self)",
        "snippet": "    def test_constructor_freq_mult(self):\n        # GH #7811\n        pidx = period_range(start=\"2014-01\", freq=\"2M\", periods=4)\n        expected = PeriodIndex([\"2014-01\", \"2014-03\", \"2014-05\", \"2014-07\"], freq=\"2M\")\n        tm.assert_index_equal(pidx, expected)\n\n        pidx = period_range(start=\"2014-01-02\", end=\"2014-01-15\", freq=\"3D\")\n        expected = PeriodIndex(\n            [\"2014-01-02\", \"2014-01-05\", \"2014-01-08\", \"2014-01-11\", \"2014-01-14\"],\n            freq=\"3D\",\n        )\n        tm.assert_index_equal(pidx, expected)\n\n        pidx = period_range(end=\"2014-01-01 17:00\", freq=\"4H\", periods=3)\n        expected = PeriodIndex(\n            [\"2014-01-01 09:00\", \"2014-01-01 13:00\", \"2014-01-01 17:00\"], freq=\"4H\"\n        )\n        tm.assert_index_equal(pidx, expected)\n\n        msg = \"Frequency must be positive, because it represents span: -1M\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex([\"2011-01\"], freq=\"-1M\")\n\n        msg = \"Frequency must be positive, because it represents span: 0M\"\n        with pytest.raises(ValueError, match=msg):\n            PeriodIndex([\"2011-01\"], freq=\"0M\")\n\n        msg = \"Frequency must be positive, because it represents span: 0M\"\n        with pytest.raises(ValueError, match=msg):\n            period_range(\"2011-01\", periods=3, freq=\"0M\")",
        "begin_line": 363,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult_dti_compat#396",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_mult_dti_compat(self, mult, freq)",
        "snippet": "    def test_constructor_freq_mult_dti_compat(self, mult, freq):\n        freqstr = str(mult) + freq\n        pidx = period_range(start=\"2014-04-01\", freq=freqstr, periods=10)\n        expected = date_range(start=\"2014-04-01\", freq=freqstr, periods=10).to_period(\n            freqstr\n        )\n        tm.assert_index_equal(pidx, expected)",
        "begin_line": 396,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_combined#404",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor_freq_combined(self)",
        "snippet": "    def test_constructor_freq_combined(self):\n        for freq in [\"1D1H\", \"1H1D\"]:\n            pidx = PeriodIndex([\"2016-01-01\", \"2016-01-02\"], freq=freq)\n            expected = PeriodIndex([\"2016-01-01 00:00\", \"2016-01-02 00:00\"], freq=\"25H\")\n        for freq in [\"1D1H\", \"1H1D\"]:\n            pidx = period_range(start=\"2016-01-01\", periods=2, freq=freq)\n            expected = PeriodIndex([\"2016-01-01 00:00\", \"2016-01-02 01:00\"], freq=\"25H\")\n            tm.assert_index_equal(pidx, expected)",
        "begin_line": 404,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor#413",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_constructor(self)",
        "snippet": "    def test_constructor(self):\n        pi = period_range(freq=\"A\", start=\"1/1/2001\", end=\"12/1/2009\")\n        assert len(pi) == 9\n\n        pi = period_range(freq=\"Q\", start=\"1/1/2001\", end=\"12/1/2009\")\n        assert len(pi) == 4 * 9\n\n        pi = period_range(freq=\"M\", start=\"1/1/2001\", end=\"12/1/2009\")\n        assert len(pi) == 12 * 9\n\n        pi = period_range(freq=\"D\", start=\"1/1/2001\", end=\"12/31/2009\")\n        assert len(pi) == 365 * 9 + 2\n\n        pi = period_range(freq=\"B\", start=\"1/1/2001\", end=\"12/31/2009\")\n        assert len(pi) == 261 * 9\n\n        pi = period_range(freq=\"H\", start=\"1/1/2001\", end=\"12/31/2001 23:00\")\n        assert len(pi) == 365 * 24\n\n        pi = period_range(freq=\"Min\", start=\"1/1/2001\", end=\"1/1/2001 23:59\")\n        assert len(pi) == 24 * 60\n\n        pi = period_range(freq=\"S\", start=\"1/1/2001\", end=\"1/1/2001 23:59:59\")\n        assert len(pi) == 24 * 60 * 60\n\n        start = Period(\"02-Apr-2005\", \"B\")\n        i1 = period_range(start=start, periods=20)\n        assert len(i1) == 20\n        assert i1.freq == start.freq\n        assert i1[0] == start\n\n        end_intv = Period(\"2006-12-31\", \"W\")\n        i1 = period_range(end=end_intv, periods=10)\n        assert len(i1) == 10\n        assert i1.freq == end_intv.freq\n        assert i1[-1] == end_intv\n\n        end_intv = Period(\"2006-12-31\", \"1w\")\n        i2 = period_range(end=end_intv, periods=10)\n        assert len(i1) == len(i2)\n        assert (i1 == i2).all()\n        assert i1.freq == i2.freq\n\n        end_intv = Period(\"2006-12-31\", (\"w\", 1))\n        i2 = period_range(end=end_intv, periods=10)\n        assert len(i1) == len(i2)\n        assert (i1 == i2).all()\n        assert i1.freq == i2.freq\n\n        end_intv = Period(\"2005-05-01\", \"B\")\n        i1 = period_range(start=start, end=end_intv)\n\n        # infer freq from first element\n        i2 = PeriodIndex([end_intv, Period(\"2005-05-05\", \"B\")])\n        assert len(i2) == 2\n        assert i2[0] == end_intv\n\n        i2 = PeriodIndex(np.array([end_intv, Period(\"2005-05-05\", \"B\")]))\n        assert len(i2) == 2\n        assert i2[0] == end_intv\n\n        # Mixed freq should fail\n        vals = [end_intv, Period(\"2006-12-31\", \"w\")]\n        msg = r\"Input has different freq=W-SUN from PeriodIndex\\(freq=B\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(vals)\n        vals = np.array(vals)\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            PeriodIndex(vals)",
        "begin_line": 413,
        "end_line": 481,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_recreate_from_data#486",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_recreate_from_data(self, freq)",
        "snippet": "    def test_recreate_from_data(self, freq):\n        org = period_range(start=\"2001/04/01\", freq=freq, periods=1)\n        idx = PeriodIndex(org.values, freq=freq)\n        tm.assert_index_equal(idx, org)",
        "begin_line": 486,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_map_with_string_constructor#491",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex",
        "signature": "pandas.tests.indexes.period.test_constructors.TestPeriodIndex.test_map_with_string_constructor(self)",
        "snippet": "    def test_map_with_string_constructor(self):\n        raw = [2005, 2007, 2009]\n        index = PeriodIndex(raw, freq=\"A\")\n\n        expected = Index([str(num) for num in raw])\n        res = index.map(str)\n\n        # should return an Index\n        assert isinstance(res, Index)\n\n        # preserve element types\n        assert all(isinstance(resi, str) for resi in res)\n\n        # lastly, values should compare equal\n        tm.assert_index_equal(res, expected)",
        "begin_line": 491,
        "end_line": 505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.setup_method#509",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod",
        "signature": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.series = Series(period_range(\"2000-01-01\", periods=10, freq=\"D\"))",
        "begin_line": 509,
        "end_line": 510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cant_cast_period#512",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod",
        "signature": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cant_cast_period(self)",
        "snippet": "    def test_constructor_cant_cast_period(self):\n        msg = \"Cannot cast PeriodArray to dtype float64\"\n        with pytest.raises(TypeError, match=msg):\n            Series(period_range(\"2000-01-01\", periods=10, freq=\"D\"), dtype=float)",
        "begin_line": 512,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cast_object#517",
        "src_path": "pandas/tests/indexes/period/test_constructors.py",
        "class_name": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod",
        "signature": "pandas.tests.indexes.period.test_constructors.TestSeriesPeriod.test_constructor_cast_object(self)",
        "snippet": "    def test_constructor_cast_object(self):\n        s = Series(period_range(\"1/1/2000\", periods=10), dtype=PeriodDtype(\"D\"))\n        exp = Series(period_range(\"1/1/2000\", periods=10))\n        tm.assert_series_equal(s, exp)",
        "begin_line": 517,
        "end_line": 520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_pickle_compat_construction#37",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # need an object to create with\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some\"\n            r\" kind, None was passed|\"\n            r\"__new__\\(\\) missing 1 required positional argument: 'data'|\"\n            r\"__new__\\(\\) takes at least 2 arguments \\(1 given\\)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            self._holder()",
        "begin_line": 37,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series#48",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series(self)",
        "snippet": "    def test_to_series(self):\n        # assert that we are creating a copy of the index\n\n        idx = self.create_index()\n        s = idx.to_series()\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name == idx.name",
        "begin_line": 48,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_series_with_arguments#57",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_series_with_arguments(self)",
        "snippet": "    def test_to_series_with_arguments(self):\n        # GH18699\n\n        # index kwarg\n        idx = self.create_index()\n        s = idx.to_series(index=idx)\n\n        assert s.values is not idx.values\n        assert s.index is idx\n        assert s.name == idx.name\n\n        # name kwarg\n        idx = self.create_index()\n        s = idx.to_series(name=\"__test\")\n\n        assert s.values is not idx.values\n        assert s.index is not idx\n        assert s.name != idx.name",
        "begin_line": 57,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame#77",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame(self, name)",
        "snippet": "    def test_to_frame(self, name):\n        # see GH-15230, GH-22580\n        idx = self.create_index()\n\n        if name:\n            idx_name = name\n        else:\n            idx_name = idx.name or 0\n\n        df = idx.to_frame(name=idx_name)\n\n        assert df.index is idx\n        assert len(df.columns) == 1\n        assert df.columns[0] == idx_name\n        assert df[idx_name].values is not idx.values\n\n        df = idx.to_frame(index=False, name=idx_name)\n        assert df.index is not idx",
        "begin_line": 77,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shift#96",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shift(self)",
        "snippet": "    def test_shift(self):\n\n        # GH8083 test the base class for shift\n        idx = self.create_index()\n        msg = \"Not supported for type {}\".format(type(idx).__name__)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1, 2)",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable#106",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable(self)",
        "snippet": "    def test_constructor_name_unhashable(self):\n        # GH#29069 check that name is hashable\n        # See also same-named test in tests.series.test_constructors\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"Index.name must be a hashable type\"):\n            type(idx)(idx, name=[])",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_create_index_existing_name#113",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_create_index_existing_name(self)",
        "snippet": "    def test_create_index_existing_name(self):\n\n        # GH11193, when an existing index is passed, and a new name is not\n        # specified, the new index should inherit the previous object name\n        expected = self.create_index()\n        if not isinstance(expected, MultiIndex):\n            expected.name = \"foo\"\n            result = pd.Index(expected)\n            tm.assert_index_equal(result, expected)\n\n            result = pd.Index(expected, name=\"bar\")\n            expected.name = \"bar\"\n            tm.assert_index_equal(result, expected)\n        else:\n            expected.names = [\"foo\", \"bar\"]\n            result = pd.Index(expected)\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"foo\", \"bar\"],\n                ),\n            )\n\n            result = pd.Index(expected, names=[\"A\", \"B\"])\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"A\", \"B\"],\n                ),\n            )",
        "begin_line": 113,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numeric_compat#166",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numeric_compat(self)",
        "snippet": "    def test_numeric_compat(self):\n\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform __mul__\"):\n            idx * 1\n        with pytest.raises(TypeError, match=\"cannot perform __rmul__\"):\n            1 * idx\n\n        div_err = \"cannot perform __truediv__\"\n        with pytest.raises(TypeError, match=div_err):\n            idx / 1\n\n        div_err = div_err.replace(\" __\", \" __r\")\n        with pytest.raises(TypeError, match=div_err):\n            1 / idx\n        with pytest.raises(TypeError, match=\"cannot perform __floordiv__\"):\n            idx // 1\n        with pytest.raises(TypeError, match=\"cannot perform __rfloordiv__\"):\n            1 // idx",
        "begin_line": 166,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_logical_compat#186",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform all\"):\n            idx.all()\n        with pytest.raises(TypeError, match=\"cannot perform any\"):\n            idx.any()",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_boolean_context_compat#193",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_boolean_context_compat(self)",
        "snippet": "    def test_boolean_context_compat(self):\n\n        # boolean context compat\n        idx = self.create_index()\n\n        with pytest.raises(ValueError, match=\"The truth value of a\"):\n            if idx:\n                pass",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_reindex_base#202",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_reindex_base(self)",
        "snippet": "    def test_reindex_base(self):\n        idx = self.create_index()\n        expected = np.arange(idx.size, dtype=np.intp)\n\n        actual = idx.get_indexer(idx)\n        tm.assert_numpy_array_equal(expected, actual)\n\n        with pytest.raises(ValueError, match=\"Invalid fill method\"):\n            idx.get_indexer(idx, method=\"invalid\")",
        "begin_line": 202,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_get_indexer_consistency#212",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_get_indexer_consistency(self, indices)",
        "snippet": "    def test_get_indexer_consistency(self, indices):\n        # See GH 16819\n        if isinstance(indices, IntervalIndex):\n            return\n\n        if indices.is_unique or isinstance(indices, CategoricalIndex):\n            indexer = indices.get_indexer(indices[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp\n        else:\n            e = \"Reindexing only valid with uniquely valued Index objects\"\n            with pytest.raises(InvalidIndexError, match=e):\n                indices.get_indexer(indices[0:2])\n\n        indexer, _ = indices.get_indexer_non_unique(indices[0:2])\n        assert isinstance(indexer, np.ndarray)\n        assert indexer.dtype == np.intp",
        "begin_line": 212,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties#230",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)",
        "snippet": "    def test_ndarray_compat_properties(self):\n        idx = self.create_index()\n        assert idx.T.equals(idx)\n        assert idx.transpose().equals(idx)\n\n        values = idx.values\n        for prop in self._compat_props:\n            assert getattr(idx, prop) == getattr(values, prop)\n\n        # test for validity\n        idx.nbytes\n        idx.values.nbytes",
        "begin_line": 230,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_roundtrip#243",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(eval(repr(idx)), idx)",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_str#248",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)",
        "begin_line": 248,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting#256",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)",
        "snippet": "    def test_repr_max_seq_item_setting(self):\n        # GH10182\n        idx = self.create_index()\n        idx = idx.repeat(50)\n        with pd.option_context(\"display.max_seq_items\", None):\n            repr(idx)\n            assert \"...\" not in str(idx)",
        "begin_line": 256,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_name#264",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_name(self, indices)",
        "snippet": "    def test_copy_name(self, indices):\n        # gh-12309: Check that the \"name\" argument\n        # passed at initialization is honored.\n        if isinstance(indices, MultiIndex):\n            return\n\n        first = type(indices)(indices, copy=True, name=\"mario\")\n        second = type(first)(first, copy=False)\n\n        # Even though \"copy=False\", we want a new object.\n        assert first is not second\n\n        # Not using tm.assert_index_equal() since names differ.\n        assert indices.equals(first)\n\n        assert first.name == \"mario\"\n        assert second.name == \"mario\"\n\n        s1 = Series(2, index=first)\n        s2 = Series(3, index=second[:-1])\n\n        if not isinstance(indices, CategoricalIndex):\n            # See gh-13365\n            s3 = s1 * s2\n            assert s3.index.name == \"mario\"",
        "begin_line": 264,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ensure_copied_data#290",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ensure_copied_data(self, indices)",
        "snippet": "    def test_ensure_copied_data(self, indices):\n        # Check the \"copy\" argument of each Index.__new__ is honoured\n        # GH12309\n        init_kwargs = {}\n        if isinstance(indices, PeriodIndex):\n            # Needs \"freq\" specification:\n            init_kwargs[\"freq\"] = indices.freq\n        elif isinstance(indices, (RangeIndex, MultiIndex, CategoricalIndex)):\n            # RangeIndex cannot be initialized from data\n            # MultiIndex and CategoricalIndex are tested separately\n            return\n\n        index_type = type(indices)\n        result = index_type(indices.values, copy=True, **init_kwargs)\n        tm.assert_index_equal(indices, result)\n        tm.assert_numpy_array_equal(\n            indices._ndarray_values, result._ndarray_values, check_same=\"copy\"\n        )\n\n        if isinstance(indices, PeriodIndex):\n            # .values an object array of Period, thus copied\n            result = index_type(ordinal=indices.asi8, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )\n        elif isinstance(indices, IntervalIndex):\n            # checked in test_interval.py\n            pass\n        else:\n            result = index_type(indices.values, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices.values, result.values, check_same=\"same\"\n            )\n            tm.assert_numpy_array_equal(\n                indices._ndarray_values, result._ndarray_values, check_same=\"same\"\n            )",
        "begin_line": 290,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_memory_usage#327",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_memory_usage(self, indices)",
        "snippet": "    def test_memory_usage(self, indices):\n        indices._engine.clear_mapping()\n        result = indices.memory_usage()\n        if indices.empty:\n            # we report 0 for no-length\n            assert result == 0\n            return\n\n        # non-zero length\n        indices.get_loc(indices[0])\n        result2 = indices.memory_usage()\n        result3 = indices.memory_usage(deep=True)\n\n        # RangeIndex, IntervalIndex\n        # don't have engines\n        if not isinstance(indices, (RangeIndex, IntervalIndex)):\n            assert result2 > result\n\n        if indices.inferred_type == \"object\":\n            assert result3 > result2",
        "begin_line": 327,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_argsort#348",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_argsort(self, request, indices)",
        "snippet": "    def test_argsort(self, request, indices):\n        # separately tested\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        result = indices.argsort()\n        expected = np.array(indices).argsort()\n        tm.assert_numpy_array_equal(result, expected, check_dtype=False)",
        "begin_line": 348,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_argsort#357",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_argsort(self, indices)",
        "snippet": "    def test_numpy_argsort(self, indices):\n        result = np.argsort(indices)\n        expected = indices.argsort()\n        tm.assert_numpy_array_equal(result, expected)\n\n        # these are the only two types that perform\n        # pandas compatibility input validation - the\n        # rest already perform separate (or no) such\n        # validation via their 'values' attribute as\n        # defined in pandas.core.indexes/base.py - they\n        # cannot be changed at the moment due to\n        # backwards compatibility concerns\n        if isinstance(type(indices), (CategoricalIndex, RangeIndex)):\n            msg = \"the 'axis' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, axis=1)\n\n            msg = \"the 'kind' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, kind=\"mergesort\")\n\n            msg = \"the 'order' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, order=(\"a\", \"b\"))",
        "begin_line": 357,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take#382",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take(self, indices)",
        "snippet": "    def test_take(self, indices):\n        indexer = [4, 3, 0, 2]\n        if len(indices) < 5:\n            # not enough elements; ignore\n            return\n\n        result = indices.take(indexer)\n        expected = indices[indexer]\n        assert result.equals(expected)\n\n        if not isinstance(indices, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            # GH 10791\n            with pytest.raises(AttributeError):\n                indices.freq",
        "begin_line": 382,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs#397",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)",
        "snippet": "    def test_take_invalid_kwargs(self):\n        idx = self.create_index()\n        indices = [1, 2]\n\n        msg = r\"take\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            idx.take(indices, foo=2)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, out=indices)\n\n        msg = \"the 'mode' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, mode=\"clip\")",
        "begin_line": 397,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repeat#413",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repeat(self)",
        "snippet": "    def test_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)\n\n        i = self.create_index()\n        rep = np.arange(len(i))\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)",
        "begin_line": 413,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_repeat#424",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_repeat(self)",
        "snippet": "    def test_numpy_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = i.repeat(rep)\n        tm.assert_index_equal(np.repeat(i, rep), expected)\n\n        msg = \"the 'axis' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.repeat(i, rep, axis=0)",
        "begin_line": 424,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_where#435",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = self.create_index()\n\n        cond = [True] * len(i)\n        result = i.where(klass(cond))\n        expected = i\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * len(i[1:])\n        expected = pd.Index([i._na_value] + i[1:].tolist(), dtype=i.dtype)\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 435,
        "end_line": 446,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_set_ops_error_cases#452",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_set_ops_error_cases(self, case, method, indices)",
        "snippet": "    def test_set_ops_error_cases(self, case, method, indices):\n        # non-iterable input\n        msg = \"Input must be Index or array-like\"\n        with pytest.raises(TypeError, match=msg):\n            getattr(indices, method)(case)",
        "begin_line": 452,
        "end_line": 456,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_intersection_base#458",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_intersection_base(self, indices)",
        "snippet": "    def test_intersection_base(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[:5]\n        second = indices[:3]\n        intersect = first.intersection(second)\n        assert tm.equalContents(intersect, second)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.intersection(case)\n            assert tm.equalContents(result, second)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.intersection([1, 2, 3])",
        "begin_line": 458,
        "end_line": 476,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_union_base#478",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_union_base(self, indices)",
        "snippet": "    def test_union_base(self, indices):\n        first = indices[3:]\n        second = indices[:5]\n        everything = indices\n        union = first.union(second)\n        assert tm.equalContents(union, everything)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if not isinstance(indices, CategoricalIndex):\n                result = first.union(case)\n                assert tm.equalContents(result, everything)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.union([1, 2, 3])",
        "begin_line": 478,
        "end_line": 495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_difference_base#498",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_difference_base(self, sort, indices)",
        "snippet": "    def test_difference_base(self, sort, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[2:]\n        second = indices[:4]\n        answer = indices[4:]\n        result = first.difference(second, sort)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if isinstance(indices, (DatetimeIndex, TimedeltaIndex)):\n                assert type(result) == type(answer)\n                tm.assert_numpy_array_equal(\n                    result.sort_values().asi8, answer.sort_values().asi8\n                )\n            else:\n                result = first.difference(case, sort)\n                assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.difference([1, 2, 3], sort)",
        "begin_line": 498,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_symmetric_difference#525",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_symmetric_difference(self, indices)",
        "snippet": "    def test_symmetric_difference(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[1:]\n        second = indices[:-1]\n        answer = indices[[0, -1]]\n        result = first.symmetric_difference(second)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.symmetric_difference(case)\n            assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.symmetric_difference([1, 2, 3])",
        "begin_line": 525,
        "end_line": 544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_insert_base#546",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_insert_base(self, indices)",
        "snippet": "    def test_insert_base(self, indices):\n        result = indices[1:4]\n\n        if not len(indices):\n            return\n\n        # test 0th element\n        assert indices[0:4].equals(result.insert(0, indices[0]))",
        "begin_line": 546,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_delete_base#555",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_delete_base(self, indices)",
        "snippet": "    def test_delete_base(self, indices):\n        if not len(indices):\n            return\n\n        if isinstance(indices, RangeIndex):\n            # tested in class\n            return\n\n        expected = indices[1:]\n        result = indices.delete(0)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        expected = indices[:-1]\n        result = indices.delete(-1)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        with pytest.raises((IndexError, ValueError)):\n            # either depending on numpy version\n            indices.delete(len(indices))",
        "begin_line": 555,
        "end_line": 575,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals#577",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals(self, indices)",
        "snippet": "    def test_equals(self, indices):\n        if isinstance(indices, IntervalIndex):\n            # IntervalIndex tested separately\n            return\n\n        assert indices.equals(indices)\n        assert indices.equals(indices.copy())\n        assert indices.equals(indices.astype(object))\n\n        assert not indices.equals(list(indices))\n        assert not indices.equals(np.array(indices))\n\n        # Cannot pass in non-int64 dtype to RangeIndex\n        if not isinstance(indices, RangeIndex):\n            same_values = Index(indices, dtype=object)\n            assert indices.equals(same_values)\n            assert same_values.equals(indices)\n\n        if indices.nlevels == 1:\n            # do not test MultiIndex\n            assert not indices.equals(Series(indices))",
        "begin_line": 577,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals_op#599",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals_op(self)",
        "snippet": "    def test_equals_op(self):\n        # GH9947, GH10637\n        index_a = self.create_index()\n        if isinstance(index_a, PeriodIndex):\n            pytest.skip(\"Skip check for PeriodIndex\")\n\n        n = len(index_a)\n        index_b = index_a[0:-1]\n        index_c = index_a[0:-1].append(index_a[-2:-1])\n        index_d = index_a[0:1]\n\n        msg = \"Lengths must match|could not be broadcast\"\n        with pytest.raises(ValueError, match=msg):\n            index_a == index_b\n        expected1 = np.array([True] * n)\n        expected2 = np.array([True] * (n - 1) + [False])\n        tm.assert_numpy_array_equal(index_a == index_a, expected1)\n        tm.assert_numpy_array_equal(index_a == index_c, expected2)\n\n        # test comparisons with numpy arrays\n        array_a = np.array(index_a)\n        array_b = np.array(index_a[0:-1])\n        array_c = np.array(index_a[0:-1].append(index_a[-2:-1]))\n        array_d = np.array(index_a[0:1])\n        with pytest.raises(ValueError, match=msg):\n            index_a == array_b\n        tm.assert_numpy_array_equal(index_a == array_a, expected1)\n        tm.assert_numpy_array_equal(index_a == array_c, expected2)\n\n        # test comparisons with Series\n        series_a = Series(array_a)\n        series_b = Series(array_b)\n        series_c = Series(array_c)\n        series_d = Series(array_d)\n        with pytest.raises(ValueError, match=msg):\n            index_a == series_b\n\n        tm.assert_numpy_array_equal(index_a == series_a, expected1)\n        tm.assert_numpy_array_equal(index_a == series_c, expected2)\n\n        # cases where length is 1 for one of them\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == index_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == array_d\n        msg = \"Can only compare identically-labeled Series objects\"\n        with pytest.raises(ValueError, match=msg):\n            series_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            series_a == array_d\n\n        # comparing with a scalar should broadcast; note that we are excluding\n        # MultiIndex because in this case each item in the index is a tuple of\n        # length 2, and therefore is considered an array of length 2 in the\n        # comparison instead of a scalar\n        if not isinstance(index_a, MultiIndex):\n            expected3 = np.array([False] * (len(index_a) - 2) + [True, False])\n            # assuming the 2nd to last item is unique in the data\n            item = index_a[-2]\n            tm.assert_numpy_array_equal(index_a == item, expected3)\n            tm.assert_series_equal(series_a == item, Series(expected3))",
        "begin_line": 599,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_hasnans_isnans#663",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_hasnans_isnans(self, indices)",
        "snippet": "    def test_hasnans_isnans(self, indices):\n        # GH 11343, added tests for hasnans / isnans\n        if isinstance(indices, MultiIndex):\n            return\n\n        # cases in indices doesn't include NaN\n        idx = indices.copy(deep=True)\n        expected = np.array([False] * len(idx), dtype=bool)\n        tm.assert_numpy_array_equal(idx._isnan, expected)\n        assert idx.hasnans is False\n\n        idx = indices.copy(deep=True)\n        values = np.asarray(idx.values)\n\n        if len(indices) == 0:\n            return\n        elif isinstance(indices, DatetimeIndexOpsMixin):\n            values[1] = iNaT\n        elif isinstance(indices, (Int64Index, UInt64Index)):\n            return\n        else:\n            values[1] = np.nan\n\n        if isinstance(indices, PeriodIndex):\n            idx = type(indices)(values, freq=indices.freq)\n        else:\n            idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 663,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_fillna#696",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_fillna(self, indices)",
        "snippet": "    def test_fillna(self, indices):\n        # GH 11343\n        if len(indices) == 0:\n            pass\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy(deep=True)\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.fillna(idx[0])\n        else:\n            idx = indices.copy(deep=True)\n            result = idx.fillna(idx[0])\n            tm.assert_index_equal(result, idx)\n            assert result is not idx\n\n            msg = \"'value' must be a scalar, passed: \"\n            with pytest.raises(TypeError, match=msg):\n                idx.fillna([idx[0]])\n\n            idx = indices.copy(deep=True)\n            values = np.asarray(idx.values)\n\n            if isinstance(indices, DatetimeIndexOpsMixin):\n                values[1] = iNaT\n            elif isinstance(indices, (Int64Index, UInt64Index)):\n                return\n            else:\n                values[1] = np.nan\n\n            if isinstance(indices, PeriodIndex):\n                idx = type(indices)(values, freq=indices.freq)\n            else:\n                idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 696,
        "end_line": 733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_nulls#735",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_nulls(self, indices)",
        "snippet": "    def test_nulls(self, indices):\n        # this is really a smoke test for the methods\n        # as these are adequately tested for function elsewhere\n        if len(indices) == 0:\n            tm.assert_numpy_array_equal(indices.isna(), np.array([], dtype=bool))\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy()\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.isna()\n        elif not indices.hasnans:\n            tm.assert_numpy_array_equal(\n                indices.isna(), np.zeros(len(indices), dtype=bool)\n            )\n            tm.assert_numpy_array_equal(\n                indices.notna(), np.ones(len(indices), dtype=bool)\n            )\n        else:\n            result = isna(indices)\n            tm.assert_numpy_array_equal(indices.isna(), result)\n            tm.assert_numpy_array_equal(indices.notna(), ~result)",
        "begin_line": 735,
        "end_line": 755,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_empty#757",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_empty(self)",
        "snippet": "    def test_empty(self):\n        # GH 15270\n        index = self.create_index()\n        assert not index.empty\n        assert index[:0].empty",
        "begin_line": 757,
        "end_line": 761,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_join_self_unique#763",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_join_self_unique(self, join_type)",
        "snippet": "    def test_join_self_unique(self, join_type):\n        index = self.create_index()\n        if index.is_unique:\n            joined = index.join(index, how=join_type)\n            assert (index == joined).all()",
        "begin_line": 763,
        "end_line": 767,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map#769",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map(self)",
        "snippet": "    def test_map(self):\n        # callable\n        index = self.create_index()\n\n        # we don't infer UInt64\n        if isinstance(index, pd.UInt64Index):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(lambda x: x)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 769,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_dictlike#789",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n\n        index = self.create_index()\n        if isinstance(index, (pd.CategoricalIndex, pd.IntervalIndex)):\n            pytest.skip(\"skipping tests for {}\".format(type(index)))\n\n        identity = mapper(index.values, index)\n\n        # we don't infer to UInt64 for a dict\n        if isinstance(index, pd.UInt64Index) and isinstance(identity, dict):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(identity)\n        tm.assert_index_equal(result, expected)\n\n        # empty mappable\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 789,
        "end_line": 809,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask#811",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)",
        "snippet": "    def test_putmask_with_wrong_mask(self):\n        # GH18368\n        index = self.create_index()\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) + 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) - 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(\"foo\", 1)",
        "begin_line": 811,
        "end_line": 822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_astype_category#827",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_astype_category(self, copy, name, ordered)",
        "snippet": "    def test_astype_category(self, copy, name, ordered):\n        # GH 18630\n        index = self.create_index()\n        if name:\n            index = index.rename(name)\n\n        # standard categories\n        dtype = CategoricalDtype(ordered=ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, ordered=ordered)\n        tm.assert_index_equal(result, expected)\n\n        # non-standard categories\n        dtype = CategoricalDtype(index.unique().tolist()[:-1], ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        if ordered is False:\n            # dtype='category' defaults to ordered=False, so only test once\n            result = index.astype(\"category\", copy=copy)\n            expected = CategoricalIndex(index.values, name=name)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 827,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_is_unique#851",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_is_unique(self)",
        "snippet": "    def test_is_unique(self):\n        # initialize a unique index\n        index = self.create_index().drop_duplicates()\n        assert index.is_unique is True\n\n        # empty index should be unique\n        index_empty = index[:0]\n        assert index_empty.is_unique is True\n\n        # test basic dupes\n        index_dup = index.insert(0, index[0])\n        assert index_dup.is_unique is False\n\n        # single NA should be unique\n        index_na = index.insert(0, np.nan)\n        assert index_na.is_unique is True\n\n        # multiple NA should not be unique\n        index_na_dup = index_na.insert(0, np.nan)\n        assert index_na_dup.is_unique is False",
        "begin_line": 851,
        "end_line": 870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_engine_reference_cycle#872",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)",
        "snippet": "    def test_engine_reference_cycle(self):\n        # GH27585\n        index = self.create_index()\n        nrefs_pre = len(gc.get_referrers(index))\n        index._engine\n        assert len(gc.get_referrers(index)) == nrefs_pre",
        "begin_line": 872,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx#9",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx()",
        "snippet": "def idx():\n    # a MultiIndex used to test the general functionality of the\n    # general functionality of this object\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 2, 3, 3])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 9,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx_dup#28",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx_dup()",
        "snippet": "def idx_dup():\n    # compare tests/indexes/multi/conftest.py\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 0, 1, 1])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.index_names#46",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.index_names()",
        "snippet": "def index_names():\n    # names that match those in the idx fixture for testing equality of\n    # names assigned to the idx\n    return [\"first\", \"second\"]",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.holder#53",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.holder()",
        "snippet": "def holder():\n    # the MultiIndex constructor used to base compatibility with pickle\n    return MultiIndex",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.compat_props#59",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.compat_props()",
        "snippet": "def compat_props():\n    # a MultiIndex must have these properties associated with it\n    return [\"shape\", \"ndim\", \"size\"]",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.narrow_multi_index#65",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.narrow_multi_index()",
        "snippet": "def narrow_multi_index():\n    \"\"\"\n    Return a MultiIndex that is narrower than the display (<80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    return pd.MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=[\"a\", \"b\", \"dti\"])",
        "begin_line": 65,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.wide_multi_index#76",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.wide_multi_index()",
        "snippet": "def wide_multi_index():\n    \"\"\"\n    Return a MultiIndex that is wider than the display (>80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    levels = [ci, ci.codes + 9, dti, dti, dti]\n    names = [\"a\", \"b\", \"dti_1\", \"dti_2\", \"dti_3\"]\n    return pd.MultiIndex.from_arrays(levels, names=names)",
        "begin_line": 76,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid#12",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)",
        "snippet": "    def test_argmax_axis_invalid(self):\n        # GH#23081\n        rng = self.create_index()\n        with pytest.raises(ValueError):\n            rng.argmax(axis=1)\n        with pytest.raises(ValueError):\n            rng.argmin(axis=2)\n        with pytest.raises(ValueError):\n            rng.min(axis=-2)\n        with pytest.raises(ValueError):\n            rng.max(axis=-3)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers#24",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity#29",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)",
        "snippet": "    def test_shift_identity(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(idx, idx.shift(0))",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str#34",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert not \"length={}\".format(len(idx)) in str(idx)\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)\n\n        if hasattr(idx, \"tz\"):\n            if idx.tz is not None:\n                assert idx.tz in str(idx)\n        if hasattr(idx, \"freq\"):\n            assert \"freq='{idx.freqstr}'\".format(idx=idx) in str(idx)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view#49",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)",
        "snippet": "    def test_view(self):\n        i = self.create_index()\n\n        i_view = i.view(\"i8\")\n        result = self._holder(i)\n        tm.assert_index_equal(result, i)\n\n        i_view = i.view(self._holder)\n        result = self._holder(i)\n        tm.assert_index_equal(result, i_view)",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable#60",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)",
        "snippet": "    def test_map_callable(self):\n        index = self.create_index()\n        expected = index + index.freq\n        result = index.map(lambda x: x + x.freq)\n        tm.assert_index_equal(result, expected)\n\n        # map to NaT\n        result = index.map(lambda x: pd.NaT if x == index[0] else x)\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        tm.assert_index_equal(result, expected)",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike#78",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n        index = self.create_index()\n        expected = index + index.freq\n\n        # don't compare the freqs\n        if isinstance(expected, pd.DatetimeIndex):\n            expected._data.freq = None\n\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        # empty map; these map to np.nan because we cannot know\n        # to re-infer things\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper([], []))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 78,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    }
]