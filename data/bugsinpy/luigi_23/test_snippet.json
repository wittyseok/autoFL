[
    {
        "name": "test.helpers.with_config._make_dict#85",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 85,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 90,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 99,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#101",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#123",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        return run_exit_status",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestExternalFileTask.__init__#31",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestExternalFileTask",
        "signature": "test.worker_external_task_test.TestExternalFileTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(TestExternalFileTask, self).__init__(*args, **kwargs)\n        self.times_called = 0",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestExternalFileTask.complete#35",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestExternalFileTask",
        "signature": "test.worker_external_task_test.TestExternalFileTask.complete(self)",
        "snippet": "    def complete(self):\n        \"\"\"\n        Create the file we need after a number of preconfigured attempts\n        \"\"\"\n        self.times_called += 1\n\n        if self.times_called >= self.times_to_call:\n            open(self.path, 'a').close()\n\n        return os.path.exists(self.path)",
        "begin_line": 35,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestExternalFileTask.output#46",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestExternalFileTask",
        "signature": "test.worker_external_task_test.TestExternalFileTask.output(self)",
        "snippet": "    def output(self):\n        return LocalTarget(path=self.path)",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestTask.__init__#57",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestTask",
        "signature": "test.worker_external_task_test.TestTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(TestTask, self).__init__(*args, **kwargs)\n        self.output_path = os.path.join(self.tempdir, \"test.output\")\n        self.dep_path = os.path.join(self.tempdir, \"test.dep\")\n        self.dependency = TestExternalFileTask(path=self.dep_path,\n                                               times_to_call=self.complete_after)",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestTask.requires#64",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestTask",
        "signature": "test.worker_external_task_test.TestTask.requires(self)",
        "snippet": "    def requires(self):\n        yield self.dependency",
        "begin_line": 64,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestTask.output#67",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestTask",
        "signature": "test.worker_external_task_test.TestTask.output(self)",
        "snippet": "    def output(self):\n        return LocalTarget(\n            path=self.output_path)",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.TestTask.run#71",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.TestTask",
        "signature": "test.worker_external_task_test.TestTask.run(self)",
        "snippet": "    def run(self):\n        open(self.output_path, 'a').close()",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.WorkerExternalTaskTest.setUp#77",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.WorkerExternalTaskTest",
        "signature": "test.worker_external_task_test.WorkerExternalTaskTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.scheduler = CentralPlannerScheduler(retry_delay=0.01,\n                                                 remove_delay=3,\n                                                 worker_disconnect_delay=3,\n                                                 disable_persist=3,\n                                                 disable_window=5,\n                                                 disable_failures=2,\n                                                 prune_on_get_work=True)",
        "begin_line": 77,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.WorkerExternalTaskTest._assert_complete#86",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.WorkerExternalTaskTest",
        "signature": "test.worker_external_task_test.WorkerExternalTaskTest._assert_complete(self, tasks)",
        "snippet": "    def _assert_complete(self, tasks):\n        for t in tasks:\n            self.assert_(t.complete())",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.WorkerExternalTaskTest._build#90",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.WorkerExternalTaskTest",
        "signature": "test.worker_external_task_test.WorkerExternalTaskTest._build(self, tasks)",
        "snippet": "    def _build(self, tasks):\n        w = luigi.worker.Worker(scheduler=self.scheduler, worker_processes=1)\n        for t in tasks:\n            w.add(t)\n        w.run()\n        w.stop()",
        "begin_line": 90,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.WorkerExternalTaskTest.test_external_dependency_already_complete#97",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.WorkerExternalTaskTest",
        "signature": "test.worker_external_task_test.WorkerExternalTaskTest.test_external_dependency_already_complete(self)",
        "snippet": "    def test_external_dependency_already_complete(self):\n        \"\"\"\n        Test that the test task completes when its dependency exists at the\n        start of the execution.\n        \"\"\"\n        tempdir = tempfile.mkdtemp(prefix='luigi-test-')\n        test_task = TestTask(tempdir=tempdir, complete_after=1)\n        luigi.build([test_task], local_scheduler=True)\n\n        assert os.path.exists(test_task.dep_path)\n        assert os.path.exists(test_task.output_path)\n\n        os.unlink(test_task.dep_path)\n        os.unlink(test_task.output_path)\n        os.rmdir(tempdir)\n\n        # complete() is called once per failure, twice per success\n        assert test_task.dependency.times_called == 2",
        "begin_line": 97,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.worker_external_task_test.WorkerExternalTaskTest.test_external_dependency_completes_later#121",
        "src_path": "test/worker_external_task_test.py",
        "class_name": "test.worker_external_task_test.WorkerExternalTaskTest",
        "signature": "test.worker_external_task_test.WorkerExternalTaskTest.test_external_dependency_completes_later(self)",
        "snippet": "    def test_external_dependency_completes_later(self):\n        \"\"\"\n        Test that an external dependency that is not `complete` when luigi is invoked, but \\\n        becomes `complete` while the workflow is executing is re-evaluated and\n        allows dependencies to run.\n        \"\"\"\n        assert luigi.configuration.get_config().getboolean('core',\n                                                           'retry-external-tasks',\n                                                           False) is True\n\n        tempdir = tempfile.mkdtemp(prefix='luigi-test-')\n\n        with patch('random.randint', return_value=0.1):\n            test_task = TestTask(tempdir=tempdir, complete_after=3)\n            self._build([test_task])\n\n        assert os.path.exists(test_task.dep_path)\n        assert os.path.exists(test_task.output_path)\n\n        os.unlink(test_task.dep_path)\n        os.unlink(test_task.output_path)\n        os.rmdir(tempdir)\n\n        # complete() is called once per failure, twice per success\n        assert test_task.dependency.times_called == 4",
        "begin_line": 121,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.tearDownClass#47",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if cls.cluster:\n            cls.cluster.terminate()",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.minicluster.MiniClusterTestCase.setUp#51",
        "src_path": "test/minicluster.py",
        "class_name": "test.minicluster.MiniClusterTestCase",
        "signature": "test.minicluster.MiniClusterTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.fs = luigi.contrib.hdfs.client\n        cfg_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"testconfig\")\n        hadoop_bin = os.path.join(os.environ['HADOOP_HOME'], 'bin/hadoop')\n        cmd = \"{} --config {}\".format(hadoop_bin, cfg_path)\n        self.stashed_hdfs_client = luigi.configuration.get_config().get('hadoop', 'command', None)\n        luigi.configuration.get_config().set('hadoop', 'command', cmd)",
        "begin_line": 51,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    }
]