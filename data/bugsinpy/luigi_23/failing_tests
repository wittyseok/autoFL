coverage run -m pytest test/worker_external_task_test.py::WorkerExternalTaskTest::test_external_dependency_completes_later
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, requests-mock-1.8.0, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/worker_external_task_test.py F                                      [100%]

=================================== FAILURES ===================================
_______ WorkerExternalTaskTest.test_external_dependency_completes_later ________

self = <worker_external_task_test.WorkerExternalTaskTest testMethod=test_external_dependency_completes_later>

    def setUp(self):
>       self.scheduler = CentralPlannerScheduler(retry_delay=0.01,
                                                 remove_delay=3,
                                                 worker_disconnect_delay=3,
                                                 disable_persist=3,
                                                 disable_window=5,
                                                 disable_failures=2,
                                                 prune_on_get_work=True)

test/worker_external_task_test.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
luigi/scheduler.py:508: in __init__
    self._config = config or scheduler(**kwargs)
luigi/task_register.py:86: in __call__
    param_values = cls.get_param_values(params, args, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'luigi.scheduler.scheduler'>
params = [('retry_delay', <luigi.parameter.FloatParameter object at 0x7f5addfe19a0>), ('remove_delay', <luigi.parameter.FloatPa...rameter object at 0x7f5addff04f0>), ('disable_failures', <luigi.parameter.IntParameter object at 0x7f5addff04c0>), ...]
args = ()
kwargs = {'disable_failures': 2, 'disable_persist': 3, 'disable_window': 5, 'prune_on_get_work': True, ...}

    @classmethod
    def get_param_values(cls, params, args, kwargs):
        """
        Get the values of the parameters from the args and kwargs.
    
        :param params: list of (param_name, Parameter).
        :param args: positional arguments
        :param kwargs: keyword arguments.
        :returns: list of `(name, value)` tuples, one for each parameter.
        """
        result = {}
    
        params_dict = dict(params)
    
        task_name = cls.task_family
    
        # In case any exceptions are thrown, create a helpful description of how the Task was invoked
        # TODO: should we detect non-reprable arguments? These will lead to mysterious errors
        exc_desc = '%s[args=%s, kwargs=%s]' % (task_name, args, kwargs)
    
        # Fill in the positional arguments
        positional_params = [(n, p) for n, p in params if p.positional]
        for i, arg in enumerate(args):
            if i >= len(positional_params):
                raise parameter.UnknownParameterException('%s: takes at most %d parameters (%d given)' % (exc_desc, len(positional_params), len(args)))
            param_name, param_obj = positional_params[i]
            result[param_name] = arg
    
        # Then the optional arguments
        for param_name, arg in six.iteritems(kwargs):
            if param_name in result:
                raise parameter.DuplicateParameterException('%s: parameter %s was already set as a positional parameter' % (exc_desc, param_name))
            if param_name not in params_dict:
>               raise parameter.UnknownParameterException('%s: unknown parameter %s' % (exc_desc, param_name))
E               luigi.parameter.UnknownParameterException: scheduler[args=(), kwargs={'retry_delay': 0.01, 'remove_delay': 3, 'worker_disconnect_delay': 3, 'disable_persist': 3, 'disable_window': 5, 'disable_failures': 2, 'prune_on_get_work': True}]: unknown parameter prune_on_get_work

luigi/task.py:227: UnknownParameterException
=============================== warnings summary ===============================
luigi/parameter.py:533
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:533: DeprecationWarning: invalid escape sequence \d
    return "(?P<%s>\d+)%s" % (key, key[0].upper())

luigi/parameter.py:545
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:545: DeprecationWarning: invalid escape sequence \d
    regex = "".join(["((?P<%s>\d+) ?%s(%s)?(%s)? ?)?" % (k, k[0], k[1:-1], k[-1]) for k in keys])

/opt/conda/envs/c707e723d516669fe502b5e71c081ee7/lib/python3.8/site-packages/tornado/httputil.py:105
  /opt/conda/envs/c707e723d516669fe502b5e71c081ee7/lib/python3.8/site-packages/tornado/httputil.py:105: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    class HTTPHeaders(collections.MutableMapping):

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/worker_external_task_test.py::WorkerExternalTaskTest::test_external_dependency_completes_later
======================== 1 failed, 3 warnings in 0.25s =========================
