[
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__#10",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__(self, details)",
        "snippet": "    def __init__(self, details):\n        self.details = details",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__#13",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__(self)",
        "snippet": "    def __str__(self):\n        return str(self.details)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__#18",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__(self, uri, transport=None, encoding=None, verbose=0, allow_none=1, ignore_ssl=False)",
        "snippet": "    def __init__(self, uri, transport=None, encoding=None, verbose=0,\n                 allow_none=1, ignore_ssl=False):\n\n        self.transport = transport\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version#27",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version(self)",
        "snippet": "    def _get_api_version(self):\n        return FAKE_API_VERSION",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._login#30",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._login(self, method, params)",
        "snippet": "    def _login(self, method, params):\n        self._session = \"OpaqueRef:fake-xenapi-session-ref\"\n        self.last_login_method = method\n        self.last_login_params = params\n        self.API_version = self._get_api_version()",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout#36",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout(self)",
        "snippet": "    def _logout(self):\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request#42",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request(self, methodname, params)",
        "snippet": "    def xenapi_request(self, methodname, params):\n        if methodname.startswith('login'):\n            self._login(methodname, params)\n            return None\n        elif methodname == 'logout' or methodname == 'session.logout':\n            self._logout()\n            return None\n        else:\n            # Should be patched with mocker.patch().\n            return None",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__#53",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        if name == 'handle':\n            return self._session\n        elif name == 'xenapi':\n            # Should be patched with mocker.patch().\n            return None\n        elif name.startswith('login') or name.startswith('slave_local'):\n            return lambda *params: self._login(name, params)\n        elif name == 'logout':\n            return self._logout",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local#65",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local()",
        "snippet": "def xapi_local():\n    return Session(\"http://_var_lib_xcp_xapi/\")",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.files.TestModule.tests#29",
        "src_path": "lib/ansible/plugins/test/files.py",
        "class_name": "lib.ansible.plugins.test.files.TestModule",
        "signature": "lib.ansible.plugins.test.files.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # file testing\n            'is_dir': isdir,\n            'directory': isdir,\n            'is_file': isfile,\n            'file': isfile,\n            'is_link': islink,\n            'link': islink,\n            'exists': exists,\n            'link_exists': lexists,\n\n            # path testing\n            'is_abs': isabs,\n            'abs': isabs,\n            'is_same_file': samefile,\n            'same_file': samefile,\n            'is_mount': ismount,\n            'mount': ismount,\n        }",
        "begin_line": 29,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.load_fixture#32",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module#52",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed#71",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed#79",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.load_fixture#16",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module",
        "signature": "test.units.modules.network.icx.icx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 16,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config#37",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config(self)",
        "snippet": "    def set_running_config(self):\n        self.ENV_ICX_USE_DIFF = self.get_running_config()",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config#40",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config(self, compare=None)",
        "snippet": "    def get_running_config(self, compare=None):\n        if compare is not None:\n            diff = compare\n        elif os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') is not None:\n            if os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') == 'False':\n                diff = False\n            else:\n                diff = True\n        else:\n            diff = True\n        return diff",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module#52",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']))\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        if fields is not None:\n            for key in fields:\n                if fields.get(key) is not None:\n                    self.assertEqual(fields.get(key), result.get(key))\n\n        return result",
        "begin_line": 52,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.changed#84",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed#73",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed#81",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.load_fixture#35",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module",
        "signature": "test.units.modules.network.enos.enos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 35,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module#63",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 63,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.failed#85",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json#86",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.changed#98",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 98,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json#99",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module",
        "signature": "test.units.modules.network.edgeos.edgeos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed#69",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed#77",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.load_fixture#37",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module",
        "signature": "test.units.modules.network.junos.junos_module.load_fixture(name, content='xml')",
        "snippet": "def load_fixture(name, content='xml'):\n    path = os.path.join(fixture_path, name)\n    if path in fixture_data:\n        return fixture_data[path]\n\n    if content == 'str':\n        with open(path) as f:\n            data = f.read()\n        try:\n            data = json.load(path)\n        except Exception:\n            pass\n    else:\n        try:\n            data = parse(path).getroot()\n        except Exception:\n            pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 37,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module#61",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text'):\n\n        self.load_fixtures(commands, format, changed=changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.failed#74",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.changed#82",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures#90",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures(self, commands=None, format=None, changed=None)",
        "snippet": "    def load_fixtures(self, commands=None, format=None, changed=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.load_fixture#34",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module",
        "signature": "test.units.modules.network.opx.opx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module#54",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module(self, failed=False, changed=False, response=None, msg=None, db=None, commit_event=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       response=None, msg=None, db=None,\n                       commit_event=None):\n\n        self.load_fixtures(response)\n\n        if failed:\n            result = self.failed(msg)\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed, db)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.failed#69",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.failed(self, msg)",
        "snippet": "    def failed(self, msg):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        self.assertEqual(result['msg'], msg, result)\n        return result",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.changed#78",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.changed(self, changed=False, db=None)",
        "snippet": "    def changed(self, changed=False, db=None):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        print(\"res\" + str(result) + \"dv=\" + str(db) + \"ch=\" + str(changed))\n        self.assertEqual(result['changed'], changed, result)\n        if db:\n            self.assertEqual(result['db'], db, result)\n\n        return result",
        "begin_line": 78,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures(self, response=None)",
        "snippet": "    def load_fixtures(self, response=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.load_fixture#31",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module",
        "signature": "test.units.modules.network.nos.nos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module#51",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.failed#70",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.changed#78",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.load_fixture#36",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module",
        "signature": "test.units.modules.network.cnos.cnos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 36,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp#63",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestCnosModule, self).setUp()\n\n        self.test_log = tempfile.mkstemp(prefix='ansible-test-cnos-module-', suffix='.log')[1]",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown#68",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(TestCnosModule, self).tearDown()\n\n        os.remove(self.test_log)",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module#73",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 73,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed#95",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 95,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json#96",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed#108",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 108,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json#109",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__#17",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__(self, name, isActive=True)",
        "snippet": "    def __init__(self, name, isActive=True):\n        self._name = name\n        self._isActive = isActive",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name#21",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name(self)",
        "snippet": "    def name(self):\n        return self._name",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive#24",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive(self)",
        "snippet": "    def isActive(self):\n        return self._isActive",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__#29",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__(self)",
        "snippet": "    def __init__(self):\n        self._network = [\n            DummyNetwork(\"inactive_net\", isActive=False),\n            DummyNetwork(\"active_net\", isActive=True)]",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName#37",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName(self, name)",
        "snippet": "    def networkLookupByName(self, name):\n        for i in self._network:\n            if i.name() == name:\n                return i",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open#50",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open(cls, uri)",
        "snippet": "    def open(cls, uri):\n        return DummyLibvirtConn()",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt#62",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt(monkeypatch)",
        "snippet": "def dummy_libvirt(monkeypatch):\n    monkeypatch.setattr(virt_net, 'libvirt', DummyLibvirt)\n    return DummyLibvirt",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj#68",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj(dummy_libvirt)",
        "snippet": "def virt_net_obj(dummy_libvirt):\n    return virt_net.VirtNetwork('qemu:///nowhere', mock.MagicMock())",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.load_fixture#33",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module",
        "signature": "test.units.modules.network.ingate.ingate_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 33,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module#53",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module(self, failed=False, changed=False, fixture=None, command=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, fixture=None,\n                       command=None):\n\n        self.load_fixtures(fixture, command, changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 53,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed#75",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.load_fixture#32",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module",
        "signature": "test.units.modules.network.voss.voss_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module#52",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.failed#71",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.changed#79",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.plugins.loader_fixtures.import_fixture.test.__init__#7",
        "src_path": "test/units/plugins/loader_fixtures/import_fixture.py",
        "class_name": "test.units.plugins.loader_fixtures.import_fixture.test",
        "signature": "test.units.plugins.loader_fixtures.import_fixture.test.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        pass",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.load_fixture#32",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module",
        "signature": "test.units.modules.network.aruba.aruba_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module#52",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed#71",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed#79",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.load_fixture#32",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module",
        "signature": "test.units.modules.network.ironware.ironware_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module#52",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed#71",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed#79",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.load_fixture#32",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module",
        "signature": "test.units.modules.network.eos.eos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module#52",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if transport == 'eapi':\n                cmd = []\n                value = []\n                for item in result['commands']:\n                    cmd.append(item['cmd'])\n                    if 'input' in item:\n                        value.append(item['input'])\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(cmd), cmd)\n                else:\n                    self.assertEqual(commands, cmd, cmd)\n                if inputs:\n                    self.assertEqual(inputs, value, value)\n            else:\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n                else:\n                    self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.failed#85",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.changed#93",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.load_fixture#33",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    if path not in fixture_data:\n        with open(path) as f:\n            data = json.load(f)\n        fixture_data[path] = data\n    return fixture_data[path]",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.__init__#43",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.__init__(self, method, params, code, body, headers=None)",
        "snippet": "    def __init__(self, method, params, code, body, headers=None):\n        if headers is None:\n            headers = {}\n\n        self.method = method\n        self.params = params\n\n        self.code = code\n        self.body = body\n        self.headers = dict(headers)",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.read#54",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.read(self)",
        "snippet": "    def read(self):\n        return self.body",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.mock_call#58",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None)",
        "snippet": "def mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None):\n    if len(calls) == 0:\n        raise ValueError('no call mock for method {0}({1})'.format(\n            url, data))\n\n    result = calls[0]\n    del calls[0]\n\n    request = json.loads(data)\n    if result.method != request['method']:\n        raise ValueError('expected method {0}({1}), got {2}({3})'.format(\n            result.method, result.params,\n            request['method'], request['params']))\n\n    for key, value in result.params.items():\n        if key not in request['params']:\n            raise ValueError('{0} not in parameters'.format(key))\n        if value != request['params'][key]:\n            raise ValueError('expected {0} to be {1}, got {2}'.format(\n                key, value, request['params'][key]))\n\n    return result",
        "begin_line": 58,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module#92",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module(self, failed=False, changed=False, **kwargs)",
        "snippet": "    def execute_module(self, failed=False, changed=False, **kwargs):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        for key, value in kwargs.items():\n            if key not in result:\n                self.fail(\"{0} not in result {1}\".format(key, result))\n            self.assertEqual(value, result[key])\n\n        return result",
        "begin_line": 92,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.failed#107",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json#108",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.changed#120",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 120,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json#121",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 121,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__#8",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__#22",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__(self, params=None, check_mode=False)",
        "snippet": "    def __init__(self, params=None, check_mode=False):\n        self.params = params\n        self.check_mode = check_mode",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json#29",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json(self, *args, **kwargs)",
        "snippet": "    def fail_json(self, *args, **kwargs):\n        raise FailJsonException(*args, **kwargs)",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.load_fixture#31",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module",
        "signature": "test.units.modules.network.aireos.aireos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module#51",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed#70",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed#78",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.load_fixture#31",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module",
        "signature": "test.units.modules.network.slxos.slxos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module#51",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed#70",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed#78",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module#59",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, state=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False, state=None):\n\n        self.load_fixtures(commands, state)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 59,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed#94",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json#95",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.failed#34",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.failed(result)",
        "snippet": "def failed(result):\n    ''' Test if task result yields failed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'failed' test expects a dictionary\")\n    return result.get('failed', False)",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.success#41",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.success(result)",
        "snippet": "def success(result):\n    ''' Test if task result yields success '''\n    return not failed(result)",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.unreachable#46",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.unreachable(result)",
        "snippet": "def unreachable(result):\n    ''' Test if task result yields unreachable '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'unreachable' test expects a dictionary\")\n    return result.get('unreachable', False)",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.reachable#53",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.reachable(result)",
        "snippet": "def reachable(result):\n    ''' Test if task result yields reachable '''\n    return not unreachable(result)",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.changed#58",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.changed(result)",
        "snippet": "def changed(result):\n    ''' Test if task result yields changed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'changed' test expects a dictionary\")\n    if 'changed' not in result:\n        changed = False\n        if (\n            'results' in result and   # some modules return a 'results' key\n            isinstance(result['results'], MutableSequence) and\n            isinstance(result['results'][0], MutableMapping)\n        ):\n            for res in result['results']:\n                if res.get('changed', False):\n                    changed = True\n                    break\n    else:\n        changed = result.get('changed', False)\n    return changed",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.skipped#78",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.skipped(result)",
        "snippet": "def skipped(result):\n    ''' Test if task result yields skipped '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'skipped' test expects a dictionary\")\n    return result.get('skipped', False)",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.started#85",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.started(result)",
        "snippet": "def started(result):\n    ''' Test if async task has started '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'started' test expects a dictionary\")\n    if 'started' in result:\n        # For async tasks, return status\n        # NOTE: The value of started is 0 or 1, not False or True :-/\n        return result.get('started', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if started\n        display.warning(\"The 'started' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.finished#99",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.finished(result)",
        "snippet": "def finished(result):\n    ''' Test if async task has finished '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'finished' test expects a dictionary\")\n    if 'finished' in result:\n        # For async tasks, return status\n        # NOTE: The value of finished is 0 or 1, not False or True :-/\n        return result.get('finished', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if finished\n        display.warning(\"The 'finished' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 99,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.regex#113",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search')",
        "snippet": "def regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):\n    ''' Expose `re` as a boolean filter using the `search` method by default.\n        This is likely only useful for `search` and `match` which already\n        have their own filters.\n    '''\n    # In addition to ensuring the correct type, to_text here will ensure\n    # _fail_with_undefined_error happens if the value is Undefined\n    value = to_text(value, errors='surrogate_or_strict')\n    flags = 0\n    if ignorecase:\n        flags |= re.I\n    if multiline:\n        flags |= re.M\n    _re = re.compile(pattern, flags=flags)\n    return bool(getattr(_re, match_type, 'search')(value))",
        "begin_line": 113,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.match#130",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.match(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def match(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.match` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'match')",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.search#135",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.search(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def search(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.search` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'search')",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.version_compare#140",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.version_compare(value, version, operator='eq', strict=False)",
        "snippet": "def version_compare(value, version, operator='eq', strict=False):\n    ''' Perform a version comparison on a value '''\n    op_map = {\n        '==': 'eq', '=': 'eq', 'eq': 'eq',\n        '<': 'lt', 'lt': 'lt',\n        '<=': 'le', 'le': 'le',\n        '>': 'gt', 'gt': 'gt',\n        '>=': 'ge', 'ge': 'ge',\n        '!=': 'ne', '<>': 'ne', 'ne': 'ne'\n    }\n\n    if strict:\n        Version = StrictVersion\n    else:\n        Version = LooseVersion\n\n    if operator in op_map:\n        operator = op_map[operator]\n    else:\n        raise errors.AnsibleFilterError('Invalid operator type')\n\n    try:\n        method = getattr(py_operator, operator)\n        return method(Version(str(value)), Version(str(version)))\n    except Exception as e:\n        raise errors.AnsibleFilterError('Version comparison: %s' % e)",
        "begin_line": 140,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.TestModule.tests#171",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core.TestModule",
        "signature": "lib.ansible.plugins.test.core.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # failure testing\n            'failed': failed,\n            'failure': failed,\n            'succeeded': success,\n            'success': success,\n            'successful': success,\n            'reachable': reachable,\n            'unreachable': unreachable,\n\n            # changed testing\n            'changed': changed,\n            'change': changed,\n\n            # skip testing\n            'skipped': skipped,\n            'skip': skipped,\n\n            # async testing\n            'finished': finished,\n            'started': started,\n\n            # regex\n            'match': match,\n            'search': search,\n            'regex': regex,\n\n            # version comparison\n            'version_compare': version_compare,\n            'version': version_compare,\n\n            # lists\n            'any': any,\n            'all': all,\n        }",
        "begin_line": 171,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.load_fixture#32",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module",
        "signature": "test.units.modules.network.ios.ios_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module#52",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.failed#71",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.changed#79",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed#77",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest._mock_module#40",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest._mock_module(self)",
        "snippet": "    def _mock_module(self):\n        mock_module = Mock()\n        mock_module.params = {'gather_subset': self.gather_subset,\n                              'gather_timeout': 5,\n                              'filter': '*'}\n        mock_module.get_bin_path = Mock(return_value=None)\n        return mock_module",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect#48",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect(self)",
        "snippet": "    def test_collect(self):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect(module=module, collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace#55",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace(self)",
        "snippet": "    def test_collect_with_namespace(self):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect_with_namespace(module=module,\n                                                           collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module#52",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.changed#79",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures#87",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.load_fixture#32",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module",
        "signature": "test.units.modules.network.iosxr.iosxr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module#52",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed#71",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed#79",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures#87",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.load_fixture#31",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module",
        "signature": "test.units.modules.network.onyx.onyx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module#51",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if is_updates:\n                commands_res = result.get('updates')\n            else:\n                commands_res = result.get('commands')\n            if sort:\n                self.assertEqual(sorted(commands), sorted(commands_res), commands_res)\n            else:\n                self.assertEqual(commands, commands_res, commands_res)\n\n        return result",
        "begin_line": 51,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed#74",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed#82",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures(self, commands=None, transport='cli')",
        "snippet": "    def load_fixtures(self, commands=None, transport='cli'):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netscaler.netscaler_module.TestModule.failed#31",
        "src_path": "test/units/modules/network/netscaler/netscaler_module.py",
        "class_name": "test.units.modules.network.netscaler.netscaler_module.TestModule",
        "signature": "test.units.modules.network.netscaler.netscaler_module.TestModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netscaler.netscaler_module.TestModule.exited#39",
        "src_path": "test/units/modules/network/netscaler/netscaler_module.py",
        "class_name": "test.units.modules.network.netscaler.netscaler_module.TestModule",
        "signature": "test.units.modules.network.netscaler.netscaler_module.TestModule.exited(self, changed=False)",
        "snippet": "    def exited(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        return result",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.load_fixture#20",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module",
        "signature": "test.units.modules.network.asa.asa_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 20,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module#40",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.changed#67",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issubset#24",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issubset(a, b)",
        "snippet": "def issubset(a, b):\n    return set(a) <= set(b)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issuperset#28",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issuperset(a, b)",
        "snippet": "def issuperset(a, b):\n    return set(a) >= set(b)",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.isnotanumber#32",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.isnotanumber(x)",
        "snippet": "def isnotanumber(x):\n    try:\n        return math.isnan(x)\n    except TypeError:\n        return False",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.contains#39",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.contains(seq, value)",
        "snippet": "def contains(seq, value):\n    '''Opposite of the ``in`` test, allowing use as a test in filters like ``selectattr``\n\n    .. versionadded:: 2.8\n    '''\n    return value in seq",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.TestModule.tests#50",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff.TestModule",
        "signature": "lib.ansible.plugins.test.mathstuff.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # set theory\n            'issubset': issubset,\n            'subset': issubset,\n            'issuperset': issuperset,\n            'superset': issuperset,\n            'contains': contains,\n\n            # numbers\n            'isnan': isnotanumber,\n            'nan': isnotanumber,\n        }",
        "begin_line": 50,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.load_fixture#32",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module",
        "signature": "test.units.modules.network.routeros.routeros_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module#52",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed#71",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed#79",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.set_module_args#9",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.set_module_args(args)",
        "snippet": "def set_module_args(args):\n    if '_ansible_remote_tmp' not in args:\n        args['_ansible_remote_tmp'] = '/tmp'\n    if '_ansible_keep_remote_files' not in args:\n        args['_ansible_keep_remote_files'] = False\n\n    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})\n    basic._ANSIBLE_ARGS = to_bytes(args)",
        "begin_line": 9,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.exit_json#27",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.exit_json(*args, **kwargs)",
        "snippet": "def exit_json(*args, **kwargs):\n    if 'changed' not in kwargs:\n        kwargs['changed'] = False\n    raise AnsibleExitJson(kwargs)",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.fail_json#33",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.fail_json(*args, **kwargs)",
        "snippet": "def fail_json(*args, **kwargs):\n    kwargs['failed'] = True\n    raise AnsibleFailJson(kwargs)",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.ModuleTestCase.setUp#40",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils.ModuleTestCase",
        "signature": "test.units.modules.utils.ModuleTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mock_module = patch.multiple(basic.AnsibleModule, exit_json=exit_json, fail_json=fail_json)\n        self.mock_module.start()\n        set_module_args({})\n        self.addCleanup(self.mock_module.stop)",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util.question#5",
        "src_path": "test/units/utils/fixtures/collections/ansible_collections/my_namespace/my_collection/plugins/module_utils/my_util.py",
        "class_name": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util",
        "signature": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util.question()",
        "snippet": "def question():\n    return 3 / 2",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ov_client#11",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ov_client()",
        "snippet": "def mock_ov_client():\n    patcher_json_file = patch.object(OneViewClient, 'from_json_file')\n    client = patcher_json_file.start()\n    return client.return_value",
        "begin_line": 11,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module#18",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module()",
        "snippet": "def mock_ansible_module():\n    patcher_ansible = patch(ONEVIEW_MODULE_UTILS_PATH + '.AnsibleModule')\n    patcher_ansible = patcher_ansible.start()\n    ansible_module = Mock()\n    patcher_ansible.return_value = ansible_module\n    return ansible_module",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.load_fixture#31",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module",
        "signature": "test.units.modules.network.exos.exos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module#51",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.failed#70",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.changed#78",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.set_module_args#29",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.set_module_args(args)",
        "snippet": "def set_module_args(args):\n    if 'provider' not in args:\n        args['provider'] = {'transport': args.get('transport') or 'cli'}\n\n    return _set_module_args(args)",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.load_fixture#40",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.load_fixture(module_name, name, device='')",
        "snippet": "def load_fixture(module_name, name, device=''):\n    path = os.path.join(fixture_path, module_name, device, name)\n    if not os.path.exists(path):\n        path = os.path.join(fixture_path, module_name, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices#62",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        module_name = self.module.__name__.rsplit('.', 1)[1]\n        local_fixture_path = os.path.join(fixture_path, module_name)\n\n        models = []\n        for path in os.listdir(local_fixture_path):\n            path = os.path.join(local_fixture_path, path)\n            if os.path.isdir(path):\n                models.append(os.path.basename(path))\n        if not models:\n            models = ['']\n\n        retvals = {}\n        for model in models:\n            retvals[model] = self.execute_module(failed, changed, commands, sort, device=model)\n\n        return retvals",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module#80",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, device='')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, device=''):\n\n        self.load_fixtures(commands, device=device)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed#99",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed#107",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.fake_ansible_module#22",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.fake_ansible_module(request)",
        "snippet": "def fake_ansible_module(request):\n    \"\"\"Returns fake AnsibleModule with fake module params.\"\"\"\n    if hasattr(request, 'param'):\n        return FakeAnsibleModule(request.param)\n    else:\n        params = {\n            \"hostname\": \"somehost\",\n            \"username\": \"someuser\",\n            \"password\": \"somepwd\",\n            \"validate_certs\": True,\n        }\n\n        return FakeAnsibleModule(params)",
        "begin_line": 22,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.XenAPI#38",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.XenAPI()",
        "snippet": "def XenAPI():\n    \"\"\"Imports and returns fake XenAPI module.\"\"\"\n\n    # Import of fake XenAPI module is wrapped by fixture so that it does not\n    # affect other unit tests which could potentialy also use XenAPI module.\n\n    # First we use importlib.import_module() to import the module and assign\n    # it to a local symbol.\n    fake_xenapi = importlib.import_module('units.module_utils.xenserver.FakeXenAPI')\n\n    # Now we populate Python module cache with imported fake module using the\n    # original module name (XenAPI). That way, any 'import XenAPI' statement\n    # will just load already imported fake module from the cache.\n    sys.modules['XenAPI'] = fake_xenapi\n\n    return fake_xenapi",
        "begin_line": 38,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.xenserver#57",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.xenserver(XenAPI)",
        "snippet": "def xenserver(XenAPI):\n    \"\"\"Imports and returns xenserver module util.\"\"\"\n\n    # Since we are wrapping fake XenAPI module inside a fixture, all modules\n    # that depend on it have to be imported inside a test function. To make\n    # this easier to handle and remove some code repetition, we wrap the import\n    # of xenserver module util with a fixture.\n    from ansible.module_utils import xenserver\n\n    return xenserver",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.load_fixture#32",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module",
        "signature": "test.units.modules.network.ovs.ovs_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module#52",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module(self, failed=False, changed=False, commands=None, test_name=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       commands=None, test_name=None):\n\n        self.load_fixtures(test_name)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed#69",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed#77",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.load_fixture#32",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module",
        "signature": "test.units.modules.network.vyos.vyos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module#52",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed#70",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed#78",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed#73",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed#81",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.__init__#29",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.__init__(self, text, encoding=None, errors=None, _bytes=None)",
        "snippet": "    def __init__(self, text, encoding=None, errors=None, _bytes=None):\n        super(TextVaultSecret, self).__init__()\n        self.text = text\n        self.encoding = encoding or 'utf-8'\n        self._bytes = _bytes\n        self.errors = errors or 'strict'",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.bytes#37",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.bytes(self)",
        "snippet": "    def bytes(self):\n        '''The text encoded with encoding, unless we specifically set _bytes.'''\n        return self._bytes or to_bytes(self.text, encoding=self.encoding, errors=self.errors)",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.__init__#31",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.__init__(self, file_mapping=None)",
        "snippet": "    def __init__(self, file_mapping=None):\n        file_mapping = {} if file_mapping is None else file_mapping\n        assert type(file_mapping) == dict\n\n        super(DictDataLoader, self).__init__()\n\n        self._file_mapping = file_mapping\n        self._build_known_directories()\n        self._vault_secrets = None",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.load_from_file#41",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.load_from_file(self, path, cache=True, unsafe=False)",
        "snippet": "    def load_from_file(self, path, cache=True, unsafe=False):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return self.load(self._file_mapping[path], path)\n        return None",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._get_file_contents#49",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._get_file_contents(self, path)",
        "snippet": "    def _get_file_contents(self, path):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return (to_bytes(self._file_mapping[path]), False)\n        else:\n            raise AnsibleParserError(\"file not found: %s\" % path)",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.path_exists#56",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.path_exists(self, path)",
        "snippet": "    def path_exists(self, path):\n        path = to_text(path)\n        return path in self._file_mapping or path in self._known_directories",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_file#60",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_file(self, path)",
        "snippet": "    def is_file(self, path):\n        path = to_text(path)\n        return path in self._file_mapping",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_directory#64",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_directory(self, path)",
        "snippet": "    def is_directory(self, path):\n        path = to_text(path)\n        return path in self._known_directories",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.list_directory#68",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.list_directory(self, path)",
        "snippet": "    def list_directory(self, path):\n        ret = []\n        path = to_text(path)\n        for x in (list(self._file_mapping.keys()) + self._known_directories):\n            if x.startswith(path):\n                if os.path.dirname(x) == path:\n                    ret.append(os.path.basename(x))\n        return ret",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_executable#77",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_executable(self, path)",
        "snippet": "    def is_executable(self, path):\n        # FIXME: figure out a way to make paths return true for this\n        return False",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._add_known_directory#81",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._add_known_directory(self, directory)",
        "snippet": "    def _add_known_directory(self, directory):\n        if directory not in self._known_directories:\n            self._known_directories.append(directory)",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._build_known_directories#85",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._build_known_directories(self)",
        "snippet": "    def _build_known_directories(self):\n        self._known_directories = []\n        for path in self._file_mapping:\n            dirname = os.path.dirname(path)\n            while dirname not in ('/', ''):\n                self._add_known_directory(dirname)\n                dirname = os.path.dirname(dirname)",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.get_basedir#112",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.get_basedir(self)",
        "snippet": "    def get_basedir(self):\n        return os.getcwd()",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.set_vault_secrets#115",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.set_vault_secrets(self, vault_secrets)",
        "snippet": "    def set_vault_secrets(self, vault_secrets):\n        self._vault_secrets = vault_secrets",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.load_fixture#19",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module",
        "signature": "test.units.modules.network.frr.frr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 19,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module#39",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 39,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.changed#66",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.load_fixture#32",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module#52",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed#71",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed#79",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.reset_cli_args#43",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.reset_cli_args()",
        "snippet": "def reset_cli_args():\n    co.GlobalCLIArgs._Singleton__instance = None\n    yield\n    co.GlobalCLIArgs._Singleton__instance = None",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.setUpClass#51",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.setUpClass(cls)",
        "snippet": "    def setUpClass(cls):\n        '''creating prerequisites for installing a role; setUpClass occurs ONCE whereas setUp occurs with every method tested.'''\n        # class data for easy viewing: role_dir, role_tar, role_name, role_req, role_path\n\n        cls.temp_dir = tempfile.mkdtemp(prefix='ansible-test_galaxy-')\n        os.chdir(cls.temp_dir)\n\n        if os.path.exists(\"./delete_me\"):\n            shutil.rmtree(\"./delete_me\")\n\n        # creating framework for a role\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"init\", \"--offline\", \"delete_me\"])\n        gc.run()\n        cls.role_dir = \"./delete_me\"\n        cls.role_name = \"delete_me\"\n\n        # making a temp dir for role installation\n        cls.role_path = os.path.join(tempfile.mkdtemp(), \"roles\")\n        if not os.path.isdir(cls.role_path):\n            os.makedirs(cls.role_path)\n\n        # creating a tar file name for class data\n        cls.role_tar = './delete_me.tar.gz'\n        cls.makeTar(cls.role_tar, cls.role_dir)\n\n        # creating a temp file with installation requirements\n        cls.role_req = './delete_me_requirements.yml'\n        fd = open(cls.role_req, \"w\")\n        fd.write(\"- 'src': '%s'\\n  'name': '%s'\\n  'path': '%s'\" % (cls.role_tar, cls.role_name, cls.role_path))\n        fd.close()",
        "begin_line": 51,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.makeTar#83",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.makeTar(cls, output_file, source_dir)",
        "snippet": "    def makeTar(cls, output_file, source_dir):\n        ''' used for making a tarfile from a role directory '''\n        # adding directory into a tar file\n        try:\n            tar = tarfile.open(output_file, \"w:gz\")\n            tar.add(source_dir, arcname=os.path.basename(source_dir))\n        except AttributeError:  # tarfile obj. has no attribute __exit__ prior to python 2.    7\n            pass\n        finally:  # ensuring closure of tarfile obj\n            tar.close()",
        "begin_line": 83,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.tearDownClass#95",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        '''After tests are finished removes things created in setUpClass'''\n        # deleting the temp role directory\n        if os.path.exists(cls.role_dir):\n            shutil.rmtree(cls.role_dir)\n        if os.path.exists(cls.role_req):\n            os.remove(cls.role_req)\n        if os.path.exists(cls.role_tar):\n            os.remove(cls.role_tar)\n        if os.path.isdir(cls.role_path):\n            shutil.rmtree(cls.role_path)\n\n        os.chdir('/')\n        shutil.rmtree(cls.temp_dir)",
        "begin_line": 95,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.setUp#110",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.setUp(self)",
        "snippet": "    def setUp(self):\n        # Reset the stored command line args\n        co.GlobalCLIArgs._Singleton__instance = None\n        self.default_args = ['ansible-galaxy']",
        "begin_line": 110,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.tearDown#115",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.tearDown(self)",
        "snippet": "    def tearDown(self):\n        # Reset the stored command line args\n        co.GlobalCLIArgs._Singleton__instance = None",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_init#119",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_init(self)",
        "snippet": "    def test_init(self):\n        galaxy_cli = GalaxyCLI(args=self.default_args)\n        self.assertTrue(isinstance(galaxy_cli, GalaxyCLI))",
        "begin_line": 119,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_display_min#123",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_display_min(self)",
        "snippet": "    def test_display_min(self):\n        gc = GalaxyCLI(args=self.default_args)\n        role_info = {'name': 'some_role_name'}\n        display_result = gc._display_role_info(role_info)\n        self.assertTrue(display_result.find('some_role_name') > -1)",
        "begin_line": 123,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_display_galaxy_info#129",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_display_galaxy_info(self)",
        "snippet": "    def test_display_galaxy_info(self):\n        gc = GalaxyCLI(args=self.default_args)\n        galaxy_info = {}\n        role_info = {'name': 'some_role_name',\n                     'galaxy_info': galaxy_info}\n        display_result = gc._display_role_info(role_info)\n        if display_result.find('\\n\\tgalaxy_info:') == -1:\n            self.fail('Expected galaxy_info to be indented once')",
        "begin_line": 129,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_run#138",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_run(self)",
        "snippet": "    def test_run(self):\n        ''' verifies that the GalaxyCLI object's api is created and that execute() is called. '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"install\", \"--ignore-errors\", \"imaginary_role\"])\n        gc.parse()\n        with patch.object(ansible.cli.CLI, \"run\", return_value=None) as mock_run:\n            gc.run()\n            # testing\n            self.assertIsInstance(gc.galaxy, ansible.galaxy.Galaxy)\n            self.assertEqual(mock_run.call_count, 1)\n            self.assertTrue(isinstance(gc.api, ansible.galaxy.api.GalaxyAPI))",
        "begin_line": 138,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_execute_remove#149",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_execute_remove(self)",
        "snippet": "    def test_execute_remove(self):\n        # installing role\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"install\", \"-p\", self.role_path, \"-r\", self.role_req, '--force'])\n        gc.run()\n\n        # location where the role was installed\n        role_file = os.path.join(self.role_path, self.role_name)\n\n        # removing role\n        # Have to reset the arguments in the context object manually since we're doing the\n        # equivalent of running the command line program twice\n        co.GlobalCLIArgs._Singleton__instance = None\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"remove\", role_file, self.role_name])\n        gc.run()\n\n        # testing role was removed\n        removed_role = not os.path.exists(role_file)\n        self.assertTrue(removed_role)",
        "begin_line": 149,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_exit_without_ignore_without_flag#168",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_exit_without_ignore_without_flag(self)",
        "snippet": "    def test_exit_without_ignore_without_flag(self):\n        ''' tests that GalaxyCLI exits with the error specified if the --ignore-errors flag is not used '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"install\", \"--server=None\", \"fake_role_name\"])\n        with patch.object(ansible.utils.display.Display, \"display\", return_value=None) as mocked_display:\n            # testing that error expected is raised\n            self.assertRaises(AnsibleError, gc.run)\n            self.assertTrue(mocked_display.called_once_with(\"- downloading role 'fake_role_name', owned by \"))",
        "begin_line": 168,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_exit_without_ignore_with_flag#176",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_exit_without_ignore_with_flag(self)",
        "snippet": "    def test_exit_without_ignore_with_flag(self):\n        ''' tests that GalaxyCLI exits without the error specified if the --ignore-errors flag is used  '''\n        # testing with --ignore-errors flag\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"install\", \"--server=None\", \"fake_role_name\", \"--ignore-errors\"])\n        with patch.object(ansible.utils.display.Display, \"display\", return_value=None) as mocked_display:\n            gc.run()\n            self.assertTrue(mocked_display.called_once_with(\"- downloading role 'fake_role_name', owned by \"))",
        "begin_line": 176,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_no_action#184",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_no_action(self)",
        "snippet": "    def test_parse_no_action(self):\n        ''' testing the options parser when no action is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"\"])\n        self.assertRaises(SystemExit, gc.parse)",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_invalid_action#189",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_invalid_action(self)",
        "snippet": "    def test_parse_invalid_action(self):\n        ''' testing the options parser when an invalid action is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"NOT_ACTION\"])\n        self.assertRaises(SystemExit, gc.parse)",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_delete#194",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_delete(self)",
        "snippet": "    def test_parse_delete(self):\n        ''' testing the options parser when the action 'delete' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"delete\", \"foo\", \"bar\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['verbosity'], 0)",
        "begin_line": 194,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_import#200",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_import(self)",
        "snippet": "    def test_parse_import(self):\n        ''' testing the options parser when the action 'import' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"import\", \"foo\", \"bar\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['wait'], True)\n        self.assertEqual(context.CLIARGS['reference'], None)\n        self.assertEqual(context.CLIARGS['check_status'], False)\n        self.assertEqual(context.CLIARGS['verbosity'], 0)",
        "begin_line": 200,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_info#209",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_info(self)",
        "snippet": "    def test_parse_info(self):\n        ''' testing the options parser when the action 'info' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"info\", \"foo\", \"bar\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['offline'], False)",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_init#215",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_init(self)",
        "snippet": "    def test_parse_init(self):\n        ''' testing the options parser when the action 'init' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"init\", \"foo\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['offline'], False)\n        self.assertEqual(context.CLIARGS['force'], False)",
        "begin_line": 215,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_install#222",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_install(self)",
        "snippet": "    def test_parse_install(self):\n        ''' testing the options parser when the action 'install' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"install\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['ignore_errors'], False)\n        self.assertEqual(context.CLIARGS['no_deps'], False)\n        self.assertEqual(context.CLIARGS['role_file'], None)\n        self.assertEqual(context.CLIARGS['force'], False)",
        "begin_line": 222,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_list#231",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_list(self)",
        "snippet": "    def test_parse_list(self):\n        ''' testing the options parser when the action 'list' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"list\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['verbosity'], 0)",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_login#237",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_login(self)",
        "snippet": "    def test_parse_login(self):\n        ''' testing the options parser when the action 'login' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"login\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['verbosity'], 0)\n        self.assertEqual(context.CLIARGS['token'], None)",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_remove#244",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_remove(self)",
        "snippet": "    def test_parse_remove(self):\n        ''' testing the options parser when the action 'remove' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"remove\", \"foo\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['verbosity'], 0)",
        "begin_line": 244,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_search#250",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_search(self)",
        "snippet": "    def test_parse_search(self):\n        ''' testing the options parswer when the action 'search' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"search\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['platforms'], None)\n        self.assertEqual(context.CLIARGS['galaxy_tags'], None)\n        self.assertEqual(context.CLIARGS['author'], None)",
        "begin_line": 250,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxy.test_parse_setup#258",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxy",
        "signature": "test.units.cli.test_galaxy.TestGalaxy.test_parse_setup(self)",
        "snippet": "    def test_parse_setup(self):\n        ''' testing the options parser when the action 'setup' is given '''\n        gc = GalaxyCLI(args=[\"ansible-galaxy\", \"setup\", \"source\", \"github_user\", \"github_repo\", \"secret\"])\n        gc.parse()\n        self.assertEqual(context.CLIARGS['verbosity'], 0)\n        self.assertEqual(context.CLIARGS['remove_id'], None)\n        self.assertEqual(context.CLIARGS['setup_list'], False)",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.setUpRole#272",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.setUpRole(cls, role_name, galaxy_args=None, skeleton_path=None, use_explicit_type=False)",
        "snippet": "    def setUpRole(cls, role_name, galaxy_args=None, skeleton_path=None, use_explicit_type=False):\n        if galaxy_args is None:\n            galaxy_args = []\n\n        if skeleton_path is not None:\n            cls.role_skeleton_path = skeleton_path\n            galaxy_args += ['--role-skeleton', skeleton_path]\n\n        # Make temp directory for testing\n        cls.test_dir = tempfile.mkdtemp()\n        if not os.path.isdir(cls.test_dir):\n            os.makedirs(cls.test_dir)\n\n        cls.role_dir = os.path.join(cls.test_dir, role_name)\n        cls.role_name = role_name\n\n        # create role using default skeleton\n        args = ['ansible-galaxy']\n        if use_explicit_type:\n            args += ['role']\n        args += ['init', '-c', '--offline'] + galaxy_args + ['--init-path', cls.test_dir, cls.role_name]\n\n        gc = GalaxyCLI(args=args)\n        gc.run()\n        cls.gc = gc\n\n        if skeleton_path is None:\n            cls.role_skeleton_path = gc.galaxy.default_role_skeleton_path",
        "begin_line": 272,
        "end_line": 299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.tearDownClass#302",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.tearDownClass(cls)",
        "snippet": "    def tearDownClass(cls):\n        if os.path.isdir(cls.test_dir):\n            shutil.rmtree(cls.test_dir)",
        "begin_line": 302,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_metadata#306",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_metadata(self)",
        "snippet": "    def test_metadata(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertIn('galaxy_info', metadata, msg='unable to find galaxy_info in metadata')\n        self.assertIn('dependencies', metadata, msg='unable to find dependencies in metadata')",
        "begin_line": 306,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_readme#312",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_readme(self)",
        "snippet": "    def test_readme(self):\n        readme_path = os.path.join(self.role_dir, 'README.md')\n        self.assertTrue(os.path.exists(readme_path), msg='Readme doesn\\'t exist')",
        "begin_line": 312,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_main_ymls#316",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_main_ymls(self)",
        "snippet": "    def test_main_ymls(self):\n        need_main_ymls = set(self.expected_role_dirs) - set(['meta', 'tests', 'files', 'templates'])\n        for d in need_main_ymls:\n            main_yml = os.path.join(self.role_dir, d, 'main.yml')\n            self.assertTrue(os.path.exists(main_yml))\n            expected_string = \"---\\n# {0} file for {1}\".format(d, self.role_name)\n            with open(main_yml, 'r') as f:\n                self.assertEqual(expected_string, f.read().strip())",
        "begin_line": 316,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_role_dirs#325",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_role_dirs(self)",
        "snippet": "    def test_role_dirs(self):\n        for d in self.expected_role_dirs:\n            self.assertTrue(os.path.isdir(os.path.join(self.role_dir, d)), msg=\"Expected role subdirectory {0} doesn't exist\".format(d))",
        "begin_line": 325,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_travis_yml#329",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_travis_yml(self)",
        "snippet": "    def test_travis_yml(self):\n        with open(os.path.join(self.role_dir, '.travis.yml'), 'r') as f:\n            contents = f.read()\n\n        with open(os.path.join(self.role_skeleton_path, '.travis.yml'), 'r') as f:\n            expected_contents = f.read()\n\n        self.assertEqual(expected_contents, contents, msg='.travis.yml does not match expected')",
        "begin_line": 329,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_readme_contents#338",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_readme_contents(self)",
        "snippet": "    def test_readme_contents(self):\n        with open(os.path.join(self.role_dir, 'README.md'), 'r') as readme:\n            contents = readme.read()\n\n        with open(os.path.join(self.role_skeleton_path, 'README.md'), 'r') as f:\n            expected_contents = f.read()\n\n        self.assertEqual(expected_contents, contents, msg='README.md does not match expected')",
        "begin_line": 338,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.ValidRoleTests.test_test_yml#347",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.ValidRoleTests",
        "signature": "test.units.cli.test_galaxy.ValidRoleTests.test_test_yml(self)",
        "snippet": "    def test_test_yml(self):\n        with open(os.path.join(self.role_dir, 'tests', 'test.yml'), 'r') as f:\n            test_playbook = yaml.safe_load(f)\n        print(test_playbook)\n        self.assertEqual(len(test_playbook), 1)\n        self.assertEqual(test_playbook[0]['hosts'], 'localhost')\n        self.assertEqual(test_playbook[0]['remote_user'], 'root')\n        self.assertListEqual(test_playbook[0]['roles'], [self.role_name], msg='The list of roles included in the test play doesn\\'t match')",
        "begin_line": 347,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitDefault.setUpClass#360",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitDefault",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitDefault.setUpClass(cls)",
        "snippet": "    def setUpClass(cls):\n        cls.setUpRole(role_name='delete_me')",
        "begin_line": 360,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitDefault.test_metadata_contents#363",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitDefault",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitDefault.test_metadata_contents(self)",
        "snippet": "    def test_metadata_contents(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertEqual(metadata.get('galaxy_info', dict()).get('author'), 'your name', msg='author was not set properly in metadata')",
        "begin_line": 363,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitAPB.setUpClass#372",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitAPB",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitAPB.setUpClass(cls)",
        "snippet": "    def setUpClass(cls):\n        cls.setUpRole('delete_me_apb', galaxy_args=['--type=apb'])",
        "begin_line": 372,
        "end_line": 373,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_metadata_apb_tag#375",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitAPB",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_metadata_apb_tag(self)",
        "snippet": "    def test_metadata_apb_tag(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertIn('apb', metadata.get('galaxy_info', dict()).get('galaxy_tags', []), msg='apb tag not set in role metadata')",
        "begin_line": 375,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_metadata_contents#380",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitAPB",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_metadata_contents(self)",
        "snippet": "    def test_metadata_contents(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertEqual(metadata.get('galaxy_info', dict()).get('author'), 'your name', msg='author was not set properly in metadata')",
        "begin_line": 380,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_apb_yml#385",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitAPB",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_apb_yml(self)",
        "snippet": "    def test_apb_yml(self):\n        self.assertTrue(os.path.exists(os.path.join(self.role_dir, 'apb.yml')), msg='apb.yml was not created')",
        "begin_line": 385,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_test_yml#388",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitAPB",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitAPB.test_test_yml(self)",
        "snippet": "    def test_test_yml(self):\n        with open(os.path.join(self.role_dir, 'tests', 'test.yml'), 'r') as f:\n            test_playbook = yaml.safe_load(f)\n        print(test_playbook)\n        self.assertEqual(len(test_playbook), 1)\n        self.assertEqual(test_playbook[0]['hosts'], 'localhost')\n        self.assertFalse(test_playbook[0]['gather_facts'])\n        self.assertEqual(test_playbook[0]['connection'], 'local')\n        self.assertIsNone(test_playbook[0]['tasks'], msg='We\\'re expecting an unset list of tasks in test.yml')",
        "begin_line": 388,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitContainer.setUpClass#402",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitContainer",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitContainer.setUpClass(cls)",
        "snippet": "    def setUpClass(cls):\n        cls.setUpRole('delete_me_container', galaxy_args=['--type=container'])",
        "begin_line": 402,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_metadata_container_tag#405",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitContainer",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_metadata_container_tag(self)",
        "snippet": "    def test_metadata_container_tag(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertIn('container', metadata.get('galaxy_info', dict()).get('galaxy_tags', []), msg='container tag not set in role metadata')",
        "begin_line": 405,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_metadata_contents#410",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitContainer",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_metadata_contents(self)",
        "snippet": "    def test_metadata_contents(self):\n        with open(os.path.join(self.role_dir, 'meta', 'main.yml'), 'r') as mf:\n            metadata = yaml.safe_load(mf)\n        self.assertEqual(metadata.get('galaxy_info', dict()).get('author'), 'your name', msg='author was not set properly in metadata')",
        "begin_line": 410,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_meta_container_yml#415",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitContainer",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_meta_container_yml(self)",
        "snippet": "    def test_meta_container_yml(self):\n        self.assertTrue(os.path.exists(os.path.join(self.role_dir, 'meta', 'container.yml')), msg='container.yml was not created')",
        "begin_line": 415,
        "end_line": 416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_test_yml#418",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitContainer",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitContainer.test_test_yml(self)",
        "snippet": "    def test_test_yml(self):\n        with open(os.path.join(self.role_dir, 'tests', 'test.yml'), 'r') as f:\n            test_playbook = yaml.safe_load(f)\n        print(test_playbook)\n        self.assertEqual(len(test_playbook), 1)\n        self.assertEqual(test_playbook[0]['hosts'], 'localhost')\n        self.assertFalse(test_playbook[0]['gather_facts'])\n        self.assertEqual(test_playbook[0]['connection'], 'local')\n        self.assertIsNone(test_playbook[0]['tasks'], msg='We\\'re expecting an unset list of tasks in test.yml')",
        "begin_line": 418,
        "end_line": 426,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.setUpClass#432",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.setUpClass(cls)",
        "snippet": "    def setUpClass(cls):\n        role_skeleton_path = os.path.join(os.path.split(__file__)[0], 'test_data', 'role_skeleton')\n        cls.setUpRole('delete_me_skeleton', skeleton_path=role_skeleton_path, use_explicit_type=True)",
        "begin_line": 432,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_empty_files_dir#436",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_empty_files_dir(self)",
        "snippet": "    def test_empty_files_dir(self):\n        files_dir = os.path.join(self.role_dir, 'files')\n        self.assertTrue(os.path.isdir(files_dir))\n        self.assertListEqual(os.listdir(files_dir), [], msg='we expect the files directory to be empty, is ignore working?')",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_jinja#441",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_jinja(self)",
        "snippet": "    def test_template_ignore_jinja(self):\n        test_conf_j2 = os.path.join(self.role_dir, 'templates', 'test.conf.j2')\n        self.assertTrue(os.path.exists(test_conf_j2), msg=\"The test.conf.j2 template doesn't seem to exist, is it being rendered as test.conf?\")\n        with open(test_conf_j2, 'r') as f:\n            contents = f.read()\n        expected_contents = '[defaults]\\ntest_key = {{ test_variable }}'\n        self.assertEqual(expected_contents, contents.strip(), msg=\"test.conf.j2 doesn't contain what it should, is it being rendered?\")",
        "begin_line": 441,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_jinja_subfolder#449",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_jinja_subfolder(self)",
        "snippet": "    def test_template_ignore_jinja_subfolder(self):\n        test_conf_j2 = os.path.join(self.role_dir, 'templates', 'subfolder', 'test.conf.j2')\n        self.assertTrue(os.path.exists(test_conf_j2), msg=\"The test.conf.j2 template doesn't seem to exist, is it being rendered as test.conf?\")\n        with open(test_conf_j2, 'r') as f:\n            contents = f.read()\n        expected_contents = '[defaults]\\ntest_key = {{ test_variable }}'\n        self.assertEqual(expected_contents, contents.strip(), msg=\"test.conf.j2 doesn't contain what it should, is it being rendered?\")",
        "begin_line": 449,
        "end_line": 455,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_similar_folder#457",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_template_ignore_similar_folder(self)",
        "snippet": "    def test_template_ignore_similar_folder(self):\n        self.assertTrue(os.path.exists(os.path.join(self.role_dir, 'templates_extra', 'templates.txt')))",
        "begin_line": 457,
        "end_line": 458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_skeleton_option#460",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton",
        "signature": "test.units.cli.test_galaxy.TestGalaxyInitSkeleton.test_skeleton_option(self)",
        "snippet": "    def test_skeleton_option(self):\n        self.assertEquals(self.role_skeleton_path, context.CLIARGS['role_skeleton'], msg='Skeleton path was not parsed properly from the command line')",
        "begin_line": 460,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.collection_skeleton#465",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.collection_skeleton(request, tmp_path_factory)",
        "snippet": "def collection_skeleton(request, tmp_path_factory):\n    name, skeleton_path = request.param\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'init', '-c']\n\n    if skeleton_path is not None:\n        galaxy_args += ['--collection-skeleton', skeleton_path]\n\n    test_dir = to_text(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections'))\n    galaxy_args += ['--init-path', test_dir, name]\n\n    GalaxyCLI(args=galaxy_args).run()\n    namespace_name, collection_name = name.split('.', 1)\n    collection_dir = os.path.join(test_dir, namespace_name, collection_name)\n\n    return collection_dir",
        "begin_line": 465,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_default#486",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_default(collection_skeleton)",
        "snippet": "def test_collection_default(collection_skeleton):\n    meta_path = os.path.join(collection_skeleton, 'galaxy.yml')\n\n    with open(meta_path, 'r') as galaxy_meta:\n        metadata = yaml.safe_load(galaxy_meta)\n\n    assert metadata['namespace'] == 'ansible_test'\n    assert metadata['name'] == 'my_collection'\n    assert metadata['authors'] == ['your name <example@domain.com>']\n    assert metadata['readme'] == 'README.md'\n    assert metadata['version'] == '1.0.0'\n    assert metadata['description'] == 'your collection description'\n    assert metadata['license'] == ['GPL-2.0-or-later']\n    assert metadata['tags'] == []\n    assert metadata['dependencies'] == {}\n    assert metadata['documentation'] == 'http://docs.example.com'\n    assert metadata['repository'] == 'http://example.com/repository'\n    assert metadata['homepage'] == 'http://example.com'\n    assert metadata['issues'] == 'http://example.com/issue/tracker'\n\n    for d in ['docs', 'plugins', 'roles']:\n        assert os.path.isdir(os.path.join(collection_skeleton, d)), \\\n            \"Expected collection subdirectory {0} doesn't exist\".format(d)",
        "begin_line": 486,
        "end_line": 508,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_skeleton#514",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_skeleton(collection_skeleton)",
        "snippet": "def test_collection_skeleton(collection_skeleton):\n    meta_path = os.path.join(collection_skeleton, 'galaxy.yml')\n\n    with open(meta_path, 'r') as galaxy_meta:\n        metadata = yaml.safe_load(galaxy_meta)\n\n    assert metadata['namespace'] == 'ansible_test'\n    assert metadata['name'] == 'delete_me_skeleton'\n    assert metadata['authors'] == ['Ansible Cow <acow@bovineuniversity.edu>', 'Tu Cow <tucow@bovineuniversity.edu>']\n    assert metadata['version'] == '0.1.0'\n    assert metadata['readme'] == 'README.md'\n    assert len(metadata) == 5\n\n    assert os.path.exists(os.path.join(collection_skeleton, 'README.md'))\n\n    # Test empty directories exist and are empty\n    for empty_dir in ['plugins/action', 'plugins/filter', 'plugins/inventory', 'plugins/lookup',\n                      'plugins/module_utils', 'plugins/modules']:\n\n        assert os.listdir(os.path.join(collection_skeleton, empty_dir)) == []\n\n    # Test files that don't end with .j2 were not templated\n    doc_file = os.path.join(collection_skeleton, 'docs', 'My Collection.md')\n    with open(doc_file, 'r') as f:\n        doc_contents = f.read()\n    assert doc_contents.strip() == 'Welcome to my test collection doc for {{ namespace }}.'\n\n    # Test files that end with .j2 but are in the templates directory were not templated\n    for template_dir in ['playbooks/templates', 'playbooks/templates/subfolder',\n                         'roles/common/templates', 'roles/common/templates/subfolder']:\n        test_conf_j2 = os.path.join(collection_skeleton, template_dir, 'test.conf.j2')\n        assert os.path.exists(test_conf_j2)\n\n        with open(test_conf_j2, 'r') as f:\n            contents = f.read()\n        expected_contents = '[defaults]\\ntest_key = {{ test_variable }}'\n\n        assert expected_contents == contents.strip()",
        "begin_line": 514,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.collection_artifact#555",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.collection_artifact(collection_skeleton, tmp_path_factory)",
        "snippet": "def collection_artifact(collection_skeleton, tmp_path_factory):\n    ''' Creates a collection artifact tarball that is ready to be published and installed '''\n    output_dir = to_text(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Output'))\n\n    # Because we call GalaxyCLI in collection_skeleton we need to reset the singleton back to None so it uses the new\n    # args, we reset the original args once it is done.\n    orig_cli_args = co.GlobalCLIArgs._Singleton__instance\n    try:\n        co.GlobalCLIArgs._Singleton__instance = None\n        galaxy_args = ['ansible-galaxy', 'collection', 'build', collection_skeleton, '--output-path', output_dir]\n        gc = GalaxyCLI(args=galaxy_args)\n        gc.run()\n\n        yield output_dir\n    finally:\n        co.GlobalCLIArgs._Singleton__instance = orig_cli_args",
        "begin_line": 555,
        "end_line": 570,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_invalid_skeleton_path#573",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_invalid_skeleton_path()",
        "snippet": "def test_invalid_skeleton_path():\n    expected = \"- the skeleton path '/fake/path' does not exist, cannot init collection\"\n\n    gc = GalaxyCLI(args=['ansible-galaxy', 'collection', 'init', 'my.collection', '--collection-skeleton',\n                         '/fake/path'])\n    with pytest.raises(AnsibleError, match=expected):\n        gc.run()",
        "begin_line": 573,
        "end_line": 579,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_invalid_collection_name#589",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_invalid_collection_name(name)",
        "snippet": "def test_invalid_collection_name(name):\n    expected = \"Invalid collection name, must be in the format <namespace>.<collection>\"\n\n    gc = GalaxyCLI(args=['ansible-galaxy', 'collection', 'init', name])\n    with pytest.raises(AnsibleError, match=expected):\n        gc.run()",
        "begin_line": 589,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_build#600",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_build(collection_artifact)",
        "snippet": "def test_collection_build(collection_artifact):\n    tar_path = os.path.join(collection_artifact, 'ansible_test-build_collection-1.0.0.tar.gz')\n    assert tarfile.is_tarfile(tar_path)\n\n    with tarfile.open(tar_path, mode='r') as tar:\n        tar_members = tar.getmembers()\n\n        valid_files = ['MANIFEST.json', 'FILES.json', 'roles', 'docs', 'plugins', 'plugins/README.md', 'README.md']\n        assert len(tar_members) == 7\n\n        # Verify the uid and gid is 0 and the correct perms are set\n        for member in tar_members:\n            assert member.name in valid_files\n\n            assert member.gid == 0\n            assert member.gname == ''\n            assert member.uid == 0\n            assert member.uname == ''\n            if member.isdir():\n                assert member.mode == 0o0755\n            else:\n                assert member.mode == 0o0644\n\n        manifest_file = tar.extractfile(tar_members[0])\n        try:\n            manifest = json.loads(to_text(manifest_file.read()))\n        finally:\n            manifest_file.close()\n\n        coll_info = manifest['collection_info']\n        file_manifest = manifest['file_manifest_file']\n        assert manifest['format'] == 1\n        assert len(manifest.keys()) == 3\n\n        assert coll_info['namespace'] == 'ansible_test'\n        assert coll_info['name'] == 'build_collection'\n        assert coll_info['version'] == '1.0.0'\n        assert coll_info['authors'] == ['your name <example@domain.com>']\n        assert coll_info['readme'] == 'README.md'\n        assert coll_info['tags'] == []\n        assert coll_info['description'] == 'your collection description'\n        assert coll_info['license'] == ['GPL-2.0-or-later']\n        assert coll_info['license_file'] is None\n        assert coll_info['dependencies'] == {}\n        assert coll_info['repository'] == 'http://example.com/repository'\n        assert coll_info['documentation'] == 'http://docs.example.com'\n        assert coll_info['homepage'] == 'http://example.com'\n        assert coll_info['issues'] == 'http://example.com/issue/tracker'\n        assert len(coll_info.keys()) == 14\n\n        assert file_manifest['name'] == 'FILES.json'\n        assert file_manifest['ftype'] == 'file'\n        assert file_manifest['chksum_type'] == 'sha256'\n        assert file_manifest['chksum_sha256'] is not None  # Order of keys makes it hard to verify the checksum\n        assert file_manifest['format'] == 1\n        assert len(file_manifest.keys()) == 5\n\n        files_file = tar.extractfile(tar_members[1])\n        try:\n            files = json.loads(to_text(files_file.read()))\n        finally:\n            files_file.close()\n\n        assert len(files['files']) == 6\n        assert files['format'] == 1\n        assert len(files.keys()) == 2\n\n        valid_files_entries = ['.', 'roles', 'docs', 'plugins', 'plugins/README.md', 'README.md']\n        for file_entry in files['files']:\n            assert file_entry['name'] in valid_files_entries\n            assert file_entry['format'] == 1\n\n            if file_entry['name'] == 'plugins/README.md':\n                assert file_entry['ftype'] == 'file'\n                assert file_entry['chksum_type'] == 'sha256'\n                assert file_entry['chksum_sha256'] == '5be7ec7b71096d56e1cc48311b6a2266b77b5fdb9d1985b5bc625787b1e857c5'\n            elif file_entry['name'] == 'README.md':\n                assert file_entry['ftype'] == 'file'\n                assert file_entry['chksum_type'] == 'sha256'\n                assert file_entry['chksum_sha256'] == '45923ca2ece0e8ce31d29e5df9d8b649fe55e2f5b5b61c9724d7cc187bd6ad4a'\n            else:\n                assert file_entry['ftype'] == 'dir'\n                assert file_entry['chksum_type'] is None\n                assert file_entry['chksum_sha256'] is None\n\n            assert len(file_entry.keys()) == 5",
        "begin_line": 600,
        "end_line": 685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.collection_install#689",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.collection_install(reset_cli_args, tmp_path_factory, monkeypatch)",
        "snippet": "def collection_install(reset_cli_args, tmp_path_factory, monkeypatch):\n    mock_install = MagicMock()\n    monkeypatch.setattr(ansible.cli.galaxy, 'install_collections', mock_install)\n\n    mock_warning = MagicMock()\n    monkeypatch.setattr(ansible.utils.display.Display, 'warning', mock_warning)\n\n    output_dir = to_text((tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Output')))\n    yield mock_install, mock_warning, output_dir",
        "begin_line": 689,
        "end_line": 697,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_with_names#700",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_with_names(collection_install)",
        "snippet": "def test_collection_install_with_names(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', 'namespace2.collection:1.0.1',\n                   '--collections-path', output_dir]\n    GalaxyCLI(args=galaxy_args).run()\n\n    collection_path = os.path.join(output_dir, 'ansible_collections')\n    assert os.path.isdir(collection_path)\n\n    assert mock_warning.call_count == 1\n    assert \"The specified collections path '%s' is not part of the configured Ansible collections path\" % output_dir \\\n        in mock_warning.call_args[0][0]\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.collection', '*', None),\n                                            ('namespace2.collection', '1.0.1', None)]\n    assert mock_install.call_args[0][1] == collection_path\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False",
        "begin_line": 700,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_with_requirements_file#726",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_with_requirements_file(collection_install)",
        "snippet": "def test_collection_install_with_requirements_file(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    requirements_file = os.path.join(output_dir, 'requirements.yml')\n    with open(requirements_file, 'wb') as req_obj:\n        req_obj.write(b'''---\ncollections:\n- namespace.coll\n- name: namespace2.coll\n  version: '>2.0.1'\n''')\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', '--requirements-file', requirements_file,\n                   '--collections-path', output_dir]\n    GalaxyCLI(args=galaxy_args).run()\n\n    collection_path = os.path.join(output_dir, 'ansible_collections')\n    assert os.path.isdir(collection_path)\n\n    assert mock_warning.call_count == 1\n    assert \"The specified collections path '%s' is not part of the configured Ansible collections path\" % output_dir \\\n        in mock_warning.call_args[0][0]\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.coll', '*', None),\n                                            ('namespace2.coll', '>2.0.1', None)]\n    assert mock_install.call_args[0][1] == collection_path\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False",
        "begin_line": 726,
        "end_line": 758,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_with_relative_path#761",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_with_relative_path(collection_install, monkeypatch)",
        "snippet": "def test_collection_install_with_relative_path(collection_install, monkeypatch):\n    mock_install = collection_install[0]\n\n    mock_req = MagicMock()\n    mock_req.return_value = [('namespace.coll', '*', None)]\n    monkeypatch.setattr(ansible.cli.galaxy, 'parse_collections_requirements_file', mock_req)\n\n    monkeypatch.setattr(os, 'makedirs', MagicMock())\n\n    requirements_file = './requirements.myl'\n    collections_path = './ansible_collections'\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', '--requirements-file', requirements_file,\n                   '--collections-path', collections_path]\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.coll', '*', None)]\n    assert mock_install.call_args[0][1] == os.path.abspath(collections_path)\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False\n\n    assert mock_req.call_count == 1\n    assert mock_req.call_args[0][0] == os.path.abspath(requirements_file)",
        "begin_line": 761,
        "end_line": 787,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_with_unexpanded_path#790",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_with_unexpanded_path(collection_install, monkeypatch)",
        "snippet": "def test_collection_install_with_unexpanded_path(collection_install, monkeypatch):\n    mock_install = collection_install[0]\n\n    mock_req = MagicMock()\n    mock_req.return_value = [('namespace.coll', '*', None)]\n    monkeypatch.setattr(ansible.cli.galaxy, 'parse_collections_requirements_file', mock_req)\n\n    monkeypatch.setattr(os, 'makedirs', MagicMock())\n\n    requirements_file = '~/requirements.myl'\n    collections_path = '~/ansible_collections'\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', '--requirements-file', requirements_file,\n                   '--collections-path', collections_path]\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.coll', '*', None)]\n    assert mock_install.call_args[0][1] == os.path.expanduser(os.path.expandvars(collections_path))\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False\n\n    assert mock_req.call_count == 1\n    assert mock_req.call_args[0][0] == os.path.expanduser(os.path.expandvars(requirements_file))",
        "begin_line": 790,
        "end_line": 816,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_in_collection_dir#819",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_in_collection_dir(collection_install, monkeypatch)",
        "snippet": "def test_collection_install_in_collection_dir(collection_install, monkeypatch):\n    mock_install, mock_warning, output_dir = collection_install\n\n    collections_path = C.COLLECTIONS_PATHS[0]\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', 'namespace2.collection:1.0.1',\n                   '--collections-path', collections_path]\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_warning.call_count == 0\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.collection', '*', None),\n                                            ('namespace2.collection', '1.0.1', None)]\n    assert mock_install.call_args[0][1] == os.path.join(collections_path, 'ansible_collections')\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False",
        "begin_line": 819,
        "end_line": 839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_name_and_requirements_fail#842",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_name_and_requirements_fail(collection_install)",
        "snippet": "def test_collection_install_name_and_requirements_fail(collection_install):\n    test_path = collection_install[2]\n    expected = 'The positional collection_name arg and --requirements-file are mutually exclusive.'\n\n    with pytest.raises(AnsibleError, match=expected):\n        GalaxyCLI(args=['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path',\n                        test_path, '--requirements-file', test_path]).run()",
        "begin_line": 842,
        "end_line": 848,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_no_name_and_requirements_fail#851",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_no_name_and_requirements_fail(collection_install)",
        "snippet": "def test_collection_install_no_name_and_requirements_fail(collection_install):\n    test_path = collection_install[2]\n    expected = 'You must specify a collection name or a requirements file.'\n\n    with pytest.raises(AnsibleError, match=expected):\n        GalaxyCLI(args=['ansible-galaxy', 'collection', 'install', '--collections-path', test_path]).run()",
        "begin_line": 851,
        "end_line": 856,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_path_with_ansible_collections#859",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_path_with_ansible_collections(collection_install)",
        "snippet": "def test_collection_install_path_with_ansible_collections(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    collection_path = os.path.join(output_dir, 'ansible_collections')\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', 'namespace2.collection:1.0.1',\n                   '--collections-path', collection_path]\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert os.path.isdir(collection_path)\n\n    assert mock_warning.call_count == 1\n    assert \"The specified collections path '%s' is not part of the configured Ansible collections path\" \\\n        % collection_path in mock_warning.call_args[0][0]\n\n    assert mock_install.call_count == 1\n    assert mock_install.call_args[0][0] == [('namespace.collection', '*', None),\n                                            ('namespace2.collection', '1.0.1', None)]\n    assert mock_install.call_args[0][1] == collection_path\n    assert mock_install.call_args[0][2] == ['https://galaxy.ansible.com']\n    assert mock_install.call_args[0][3] is True\n    assert mock_install.call_args[0][4] is False\n    assert mock_install.call_args[0][5] is False\n    assert mock_install.call_args[0][6] is False\n    assert mock_install.call_args[0][7] is False",
        "begin_line": 859,
        "end_line": 883,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_ignore_certs#886",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_ignore_certs(collection_install)",
        "snippet": "def test_collection_install_ignore_certs(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--ignore-certs']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][3] is False",
        "begin_line": 886,
        "end_line": 893,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_force#896",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_force(collection_install)",
        "snippet": "def test_collection_install_force(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--force']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][6] is True",
        "begin_line": 896,
        "end_line": 903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_force_deps#906",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_force_deps(collection_install)",
        "snippet": "def test_collection_install_force_deps(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--force-with-deps']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][7] is True",
        "begin_line": 906,
        "end_line": 913,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_no_deps#916",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_no_deps(collection_install)",
        "snippet": "def test_collection_install_no_deps(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--no-deps']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][5] is True",
        "begin_line": 916,
        "end_line": 923,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_ignore#926",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_ignore(collection_install)",
        "snippet": "def test_collection_install_ignore(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--ignore-errors']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][4] is True",
        "begin_line": 926,
        "end_line": 933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.cli.test_galaxy.test_collection_install_custom_server#936",
        "src_path": "test/units/cli/test_galaxy.py",
        "class_name": "test.units.cli.test_galaxy",
        "signature": "test.units.cli.test_galaxy.test_collection_install_custom_server(collection_install)",
        "snippet": "def test_collection_install_custom_server(collection_install):\n    mock_install, mock_warning, output_dir = collection_install\n\n    galaxy_args = ['ansible-galaxy', 'collection', 'install', 'namespace.collection', '--collections-path', output_dir,\n                   '--server', 'https://galaxy-dev.ansible.com']\n    GalaxyCLI(args=galaxy_args).run()\n\n    assert mock_install.call_args[0][2] == ['https://galaxy-dev.ansible.com']",
        "begin_line": 936,
        "end_line": 943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream#17",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream(self, obj, stream, dumper=None)",
        "snippet": "    def _dump_stream(self, obj, stream, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string stream.\"\"\"\n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_string#24",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_string(self, obj, dumper=None)",
        "snippet": "    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle#31",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle(self, obj)",
        "snippet": "    def _dump_load_cycle(self, obj):\n        # Each pass though a dump or load revs the 'generation'\n        # obj to yaml string\n        string_from_object_dump = self._dump_string(obj, dumper=AnsibleDumper)\n\n        # wrap a stream/file like StringIO around that yaml\n        stream_from_object_dump = io.StringIO(string_from_object_dump)\n        loader = self._loader(stream_from_object_dump)\n        # load the yaml stream to create a new instance of the object (gen 2)\n        obj_2 = loader.get_data()\n\n        # dump the gen 2 objects directory to strings\n        string_from_object_dump_2 = self._dump_string(obj_2,\n                                                      dumper=AnsibleDumper)\n\n        # The gen 1 and gen 2 yaml strings\n        self.assertEquals(string_from_object_dump, string_from_object_dump_2)\n        # the gen 1 (orig) and gen 2 py object\n        self.assertEquals(obj, obj_2)\n\n        # again! gen 3... load strings into py objects\n        stream_3 = io.StringIO(string_from_object_dump_2)\n        loader_3 = self._loader(stream_3)\n        obj_3 = loader_3.get_data()\n\n        string_from_object_dump_3 = self._dump_string(obj_3, dumper=AnsibleDumper)\n\n        self.assertEquals(obj, obj_3)\n        # should be transitive, but...\n        self.assertEquals(obj_2, obj_3)\n        self.assertEquals(string_from_object_dump, string_from_object_dump_3)",
        "begin_line": 31,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.swap_stdin_and_argv#34",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv",
        "signature": "test.units.mock.procenv.swap_stdin_and_argv(stdin_data='', argv_data=tuple())",
        "snippet": "def swap_stdin_and_argv(stdin_data='', argv_data=tuple()):\n    \"\"\"\n    context manager that temporarily masks the test runner's values for stdin and argv\n    \"\"\"\n    real_stdin = sys.stdin\n    real_argv = sys.argv\n\n    if PY3:\n        fake_stream = StringIO(stdin_data)\n        fake_stream.buffer = BytesIO(to_bytes(stdin_data))\n    else:\n        fake_stream = BytesIO(to_bytes(stdin_data))\n\n    try:\n        sys.stdin = fake_stream\n        sys.argv = argv_data\n\n        yield\n    finally:\n        sys.stdin = real_stdin\n        sys.argv = real_argv",
        "begin_line": 34,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.setUp#78",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.setUp(self, module_args=None)",
        "snippet": "    def setUp(self, module_args=None):\n        if module_args is None:\n            module_args = {'_ansible_remote_tmp': '/tmp', '_ansible_keep_remote_files': False}\n\n        args = json.dumps(dict(ANSIBLE_MODULE_ARGS=module_args))\n\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap = swap_stdin_and_argv(stdin_data=args)\n        self.stdin_swap.__enter__()",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.tearDown#88",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap.__exit__(None, None, None)",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    }
]