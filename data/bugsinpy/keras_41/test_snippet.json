[
    {
        "name": "tests.keras.utils.data_utils_test.next#23",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.next(x)",
        "snippet": "    def next(x):\n        return x.next()",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.in_tmpdir#28",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.in_tmpdir(tmpdir)",
        "snippet": "def in_tmpdir(tmpdir):\n    \"\"\"Runs a function in a temporary directory.\n\n    Checks that the directory is empty afterwards.\n    \"\"\"\n    with tmpdir.as_cwd():\n        yield None\n    assert not tmpdir.listdir()",
        "begin_line": 28,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_data_utils#38",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_data_utils(in_tmpdir)",
        "snippet": "def test_data_utils(in_tmpdir):\n    \"\"\"Tests get_file from a url, plus extraction and validation.\n    \"\"\"\n    dirname = 'data_utils'\n\n    with open('test.txt', 'w') as text_file:\n        text_file.write('Float like a butterfly, sting like a bee.')\n\n    with tarfile.open('test.tar.gz', 'w:gz') as tar_file:\n        tar_file.add('test.txt')\n\n    with zipfile.ZipFile('test.zip', 'w') as zip_file:\n        zip_file.write('test.txt')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.tar.gz')))\n\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    hashval_sha256 = _hash_file(filepath)\n    hashval_md5 = _hash_file(filepath, algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, untar=True)\n    path = get_file(filepath, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(filepath)\n    assert validate_file(filepath, hashval_sha256)\n    assert validate_file(filepath, hashval_md5)\n    os.remove(filepath)\n    os.remove('test.tar.gz')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.zip')))\n\n    hashval_sha256 = _hash_file('test.zip')\n    hashval_md5 = _hash_file('test.zip', algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, extract=True)\n    path = get_file(dirname, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(path)\n    assert validate_file(path, hashval_sha256)\n    assert validate_file(path, hashval_md5)\n\n    os.remove(path)\n    os.remove('test.txt')\n    os.remove('test.zip')",
        "begin_line": 38,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__init__#89",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__init__(self, it)",
        "snippet": "    def __init__(self, it):\n        self.it = it\n        self.lock = threading.Lock()",
        "begin_line": 89,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__iter__#93",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return self",
        "begin_line": 93,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.__next__#96",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.__next__(self)",
        "snippet": "    def __next__(self):\n        return self.next()",
        "begin_line": 96,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_iter.next#99",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.threadsafe_iter",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_iter.next(self)",
        "snippet": "    def next(self):\n        with self.lock:\n            return next(self.it)",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.threadsafe_generator#104",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.threadsafe_generator(f)",
        "snippet": "def threadsafe_generator(f):\n    \"\"\"A decorator that takes a generator function and makes it thread-safe.\n    \"\"\"\n\n    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))\n\n    return g",
        "begin_line": 104,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.g#108",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.g(*a, **kw)",
        "snippet": "    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))",
        "begin_line": 108,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__init__#115",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__init__(self, shape, value=1.0)",
        "snippet": "    def __init__(self, shape, value=1.0):\n        self.shape = shape\n        self.inner = value",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__getitem__#119",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        return np.ones(self.shape, dtype=np.uint32) * item * self.inner",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.__len__#122",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.__len__(self)",
        "snippet": "    def __len__(self):\n        return 100",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.DummySequence.on_epoch_end#125",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.DummySequence",
        "signature": "tests.keras.utils.data_utils_test.DummySequence.on_epoch_end(self)",
        "snippet": "    def on_epoch_end(self):\n        self.inner *= 5.0",
        "begin_line": 125,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.__getitem__#130",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        raise IndexError(item, 'is not present')",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.__len__#133",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.__len__(self)",
        "snippet": "    def __len__(self):\n        return 100",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.FaultSequence.on_epoch_end#136",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test.FaultSequence",
        "signature": "tests.keras.utils.data_utils_test.FaultSequence.on_epoch_end(self)",
        "snippet": "    def on_epoch_end(self):\n        pass",
        "begin_line": 136,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_generator_from_sequence_threads#141",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_generator_from_sequence_threads(ds)",
        "snippet": "def create_generator_from_sequence_threads(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_generator_from_sequence_pcs#146",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_generator_from_sequence_pcs(ds)",
        "snippet": "def create_generator_from_sequence_pcs(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threads#151",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_threads()",
        "snippet": "def test_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n\n    \"\"\"\n     Not comparing the order since it is not guarantee.\n     It may get ordered, but not a lot, one thread can take the GIL before he was supposed to.\n    \"\"\"\n    assert len(set(acc) - set(range(100))) == 0, \"Output is not the same\"\n    enqueuer.stop()",
        "begin_line": 151,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_processes#168",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_processes()",
        "snippet": "def test_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n    assert acc != list(range(100)), \"Order was keep in GeneratorEnqueuer with processes\"\n    enqueuer.stop()",
        "begin_line": 168,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_threads#180",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_threads()",
        "snippet": "def test_generator_enqueuer_fail_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        FaultSequence()), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 180,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_processes#189",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_generator_enqueuer_fail_processes()",
        "snippet": "def test_generator_enqueuer_fail_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        FaultSequence()), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
        "begin_line": 189,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads#198",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads()",
        "snippet": "def test_ordered_enqueuer_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), \"Order was not keep in GeneratorEnqueuer with threads\"\n    enqueuer.stop()",
        "begin_line": 198,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads_not_ordered#209",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_threads_not_ordered()",
        "snippet": "def test_ordered_enqueuer_threads_not_ordered():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False,\n                               shuffle=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc != list(range(100)), \"Order was not keep in GeneratorEnqueuer with threads\"\n    enqueuer.stop()",
        "begin_line": 209,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_processes#222",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_processes()",
        "snippet": "def test_ordered_enqueuer_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), \"Order was not keep in GeneratorEnqueuer with processes\"\n    enqueuer.stop()",
        "begin_line": 222,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_threads#233",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_threads()",
        "snippet": "def test_ordered_enqueuer_fail_threads():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(StopIteration):\n        next(gen_output)",
        "begin_line": 233,
        "end_line": 238,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_on_epoch_end_processes#241",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_on_epoch_end_processes()",
        "snippet": "def test_on_epoch_end_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(200):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[100:] == list([k * 5 for k in range(100)]), \"Order was not keep in GeneratorEnqueuer with processes\"\n    enqueuer.stop()",
        "begin_line": 241,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_context_switch#252",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_context_switch()",
        "snippet": "def test_context_switch():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]), use_multiprocessing=True)\n    enqueuer2 = OrderedEnqueuer(DummySequence([3, 200, 200, 3], value=15), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    enqueuer2.start(3, 10)\n    gen_output = enqueuer.get()\n    gen_output2 = enqueuer2.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[-1] == 99\n    # One epoch is completed so enqueuer will switch the Sequence\n\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output2)[0, 0, 0, 0])\n    assert acc[-1] == 99 * 15\n    # One epoch has been completed so enqueuer2 will switch\n\n    # Be sure that both Sequence were updated\n    assert next(gen_output)[0, 0, 0, 0] == 0\n    assert next(gen_output)[0, 0, 0, 0] == 5\n    assert next(gen_output2)[0, 0, 0, 0] == 0\n    assert next(gen_output2)[0, 0, 0, 0] == 15 * 5\n\n    # Tear down everything\n    enqueuer.stop()\n    enqueuer2.stop()",
        "begin_line": 252,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_on_epoch_end_threads#282",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_on_epoch_end_threads()",
        "snippet": "def test_on_epoch_end_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list([k * 5 for k in range(100)]), \"Order was not keep in GeneratorEnqueuer with processes\"\n    enqueuer.stop()",
        "begin_line": 282,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_processes#296",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_ordered_enqueuer_fail_processes()",
        "snippet": "def test_ordered_enqueuer_fail_processes():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(StopIteration):\n        next(gen_output)",
        "begin_line": 296,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_threads#305",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_threads(ds)",
        "snippet": "def create_finite_generator_from_sequence_threads(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_pcs#310",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.create_finite_generator_from_sequence_pcs(ds)",
        "snippet": "def create_finite_generator_from_sequence_pcs(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
        "begin_line": 310,
        "end_line": 312,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_threads#315",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_threads()",
        "snippet": "def test_finite_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert set(acc) == set(range(100)), \"Output is not the same\"\n    enqueuer.stop()",
        "begin_line": 315,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_processes#327",
        "src_path": "tests/keras/utils/data_utils_test.py",
        "class_name": "tests.keras.utils.data_utils_test",
        "signature": "tests.keras.utils.data_utils_test.test_finite_generator_enqueuer_processes()",
        "snippet": "def test_finite_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert acc != list(range(100)), \"Order was keep in GeneratorEnqueuer with processes\"\n    enqueuer.stop()",
        "begin_line": 327,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    }
]