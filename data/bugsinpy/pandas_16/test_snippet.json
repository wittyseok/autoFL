[
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_zerodim#31",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_zerodim(self, box_with_array)",
        "snippet": "    def test_compare_zerodim(self, box_with_array):\n        # GH#26689 make sure we unbox zero-dimensional arrays\n        xbox = box_with_array if box_with_array is not pd.Index else np.ndarray\n\n        pi = pd.period_range(\"2000\", periods=4)\n        other = np.array(pi.to_numpy()[0])\n\n        pi = tm.box_expected(pi, box_with_array)\n        result = pi <= other\n        expected = np.array([True, False, False, False])\n        expected = tm.box_expected(expected, xbox)\n        tm.assert_equal(result, expected)",
        "begin_line": 31,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_scalar#47",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_scalar(self, box_with_array, scalar)",
        "snippet": "    def test_compare_invalid_scalar(self, box_with_array, scalar):\n        # comparison with scalar that cannot be interpreted as a Period\n        pi = pd.period_range(\"2000\", periods=4)\n        parr = tm.box_expected(pi, box_with_array)\n        assert_invalid_comparison(parr, scalar, box_with_array)",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_listlike#63",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_invalid_listlike(self, box_with_array, other)",
        "snippet": "    def test_compare_invalid_listlike(self, box_with_array, other):\n        pi = pd.period_range(\"2000\", periods=4)\n        parr = tm.box_expected(pi, box_with_array)\n        assert_invalid_comparison(parr, other, box_with_array)",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_object_dtype#69",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodArrayLikeComparisons.test_compare_object_dtype(self, box_with_array, other_box)",
        "snippet": "    def test_compare_object_dtype(self, box_with_array, other_box):\n        pi = pd.period_range(\"2000\", periods=5)\n        parr = tm.box_expected(pi, box_with_array)\n\n        xbox = np.ndarray if box_with_array is pd.Index else box_with_array\n\n        other = other_box(pi)\n\n        expected = np.array([True, True, True, True, True])\n        expected = tm.box_expected(expected, xbox)\n\n        result = parr == other\n        tm.assert_equal(result, expected)\n        result = parr <= other\n        tm.assert_equal(result, expected)\n        result = parr >= other\n        tm.assert_equal(result, expected)\n\n        result = parr != other\n        tm.assert_equal(result, ~expected)\n        result = parr < other\n        tm.assert_equal(result, ~expected)\n        result = parr > other\n        tm.assert_equal(result, ~expected)\n\n        other = other_box(pi[::-1])\n\n        expected = np.array([False, False, True, False, False])\n        expected = tm.box_expected(expected, xbox)\n        result = parr == other\n        tm.assert_equal(result, expected)\n\n        expected = np.array([True, True, True, False, False])\n        expected = tm.box_expected(expected, xbox)\n        result = parr <= other\n        tm.assert_equal(result, expected)\n\n        expected = np.array([False, False, True, True, True])\n        expected = tm.box_expected(expected, xbox)\n        result = parr >= other\n        tm.assert_equal(result, expected)\n\n        expected = np.array([True, True, False, True, True])\n        expected = tm.box_expected(expected, xbox)\n        result = parr != other\n        tm.assert_equal(result, expected)\n\n        expected = np.array([True, True, False, False, False])\n        expected = tm.box_expected(expected, xbox)\n        result = parr < other\n        tm.assert_equal(result, expected)\n\n        expected = np.array([False, False, False, True, True])\n        expected = tm.box_expected(expected, xbox)\n        result = parr > other\n        tm.assert_equal(result, expected)",
        "begin_line": 69,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq#131",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq(self, other)",
        "snippet": "    def test_eq(self, other):\n        idx = PeriodIndex([\"2017\", \"2017\", \"2018\"], freq=\"D\")\n        expected = np.array([True, True, False])\n        result = idx == other\n\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq_integer_disallowed#148",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_eq_integer_disallowed(self, other)",
        "snippet": "    def test_eq_integer_disallowed(self, other):\n        # match Period semantics by not treating integers as Periods\n\n        idx = PeriodIndex([\"2017\", \"2017\", \"2018\"], freq=\"D\")\n        expected = np.array([False, False, False])\n        result = idx == other\n\n        tm.assert_numpy_array_equal(result, expected)\n        msg = (\n            r\"(:?Invalid comparison between dtype=period\\[D\\] and .*)\"\n            r\"|(:?Cannot compare type Period with type .*)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            idx < other\n        with pytest.raises(TypeError, match=msg):\n            idx > other\n        with pytest.raises(TypeError, match=msg):\n            idx <= other\n        with pytest.raises(TypeError, match=msg):\n            idx >= other",
        "begin_line": 148,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_period#169",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_period(self)",
        "snippet": "    def test_pi_cmp_period(self):\n        idx = period_range(\"2007-01\", periods=20, freq=\"M\")\n\n        result = idx < idx[10]\n        exp = idx.values < idx.values[10]\n        tm.assert_numpy_array_equal(result, exp)",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar2#177",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar2(self, box_with_array)",
        "snippet": "    def test_parr_cmp_period_scalar2(self, box_with_array):\n        xbox = box_with_array if box_with_array is not pd.Index else np.ndarray\n\n        pi = pd.period_range(\"2000-01-01\", periods=10, freq=\"D\")\n\n        val = Period(\"2000-01-04\", freq=\"D\")\n        expected = [x > val for x in pi]\n\n        ser = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, xbox)\n        result = ser > val\n        tm.assert_equal(result, expected)\n\n        val = pi[5]\n        result = ser > val\n        expected = [x > val for x in pi]\n        expected = tm.box_expected(expected, xbox)\n        tm.assert_equal(result, expected)",
        "begin_line": 177,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar#197",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_period_scalar(self, freq, box_with_array)",
        "snippet": "    def test_parr_cmp_period_scalar(self, freq, box_with_array):\n        # GH#13200\n        xbox = np.ndarray if box_with_array is pd.Index else box_with_array\n\n        base = PeriodIndex([\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=freq)\n        base = tm.box_expected(base, box_with_array)\n        per = Period(\"2011-02\", freq=freq)\n\n        exp = np.array([False, True, False, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base == per, exp)\n        tm.assert_equal(per == base, exp)\n\n        exp = np.array([True, False, True, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base != per, exp)\n        tm.assert_equal(per != base, exp)\n\n        exp = np.array([False, False, True, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base > per, exp)\n        tm.assert_equal(per < base, exp)\n\n        exp = np.array([True, False, False, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base < per, exp)\n        tm.assert_equal(per > base, exp)\n\n        exp = np.array([False, True, True, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base >= per, exp)\n        tm.assert_equal(per <= base, exp)\n\n        exp = np.array([True, True, False, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base <= per, exp)\n        tm.assert_equal(per >= base, exp)",
        "begin_line": 197,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi#236",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi(self, freq, box_with_array)",
        "snippet": "    def test_parr_cmp_pi(self, freq, box_with_array):\n        # GH#13200\n        xbox = np.ndarray if box_with_array is pd.Index else box_with_array\n\n        base = PeriodIndex([\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=freq)\n        base = tm.box_expected(base, box_with_array)\n\n        # TODO: could also box idx?\n        idx = PeriodIndex([\"2011-02\", \"2011-01\", \"2011-03\", \"2011-05\"], freq=freq)\n\n        exp = np.array([False, False, True, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base == idx, exp)\n\n        exp = np.array([True, True, False, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base != idx, exp)\n\n        exp = np.array([False, True, False, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base > idx, exp)\n\n        exp = np.array([True, False, False, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base < idx, exp)\n\n        exp = np.array([False, True, True, False])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base >= idx, exp)\n\n        exp = np.array([True, False, True, True])\n        exp = tm.box_expected(exp, xbox)\n        tm.assert_equal(base <= idx, exp)",
        "begin_line": 236,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi_mismatched_freq_raises#271",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_parr_cmp_pi_mismatched_freq_raises(self, freq, box_with_array)",
        "snippet": "    def test_parr_cmp_pi_mismatched_freq_raises(self, freq, box_with_array):\n        # GH#13200\n        # different base freq\n        base = PeriodIndex([\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=freq)\n        base = tm.box_expected(base, box_with_array)\n\n        msg = \"Input has different freq=A-DEC from \"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            base <= Period(\"2011\", freq=\"A\")\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            Period(\"2011\", freq=\"A\") >= base\n\n        # TODO: Could parametrize over boxes for idx?\n        idx = PeriodIndex([\"2011\", \"2012\", \"2013\", \"2014\"], freq=\"A\")\n        rev_msg = r\"Input has different freq=(M|2M|3M) from PeriodArray\\(freq=A-DEC\\)\"\n        idx_msg = rev_msg if box_with_array is tm.to_array else msg\n        with pytest.raises(IncompatibleFrequency, match=idx_msg):\n            base <= idx\n\n        # Different frequency\n        msg = \"Input has different freq=4M from \"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            base <= Period(\"2011\", freq=\"4M\")\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            Period(\"2011\", freq=\"4M\") >= base\n\n        idx = PeriodIndex([\"2011\", \"2012\", \"2013\", \"2014\"], freq=\"4M\")\n        rev_msg = r\"Input has different freq=(M|2M|3M) from PeriodArray\\(freq=4M\\)\"\n        idx_msg = rev_msg if box_with_array is tm.to_array else msg\n        with pytest.raises(IncompatibleFrequency, match=idx_msg):\n            base <= idx",
        "begin_line": 271,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat#306",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat(self, freq)",
        "snippet": "    def test_pi_cmp_nat(self, freq):\n        idx1 = PeriodIndex([\"2011-01\", \"2011-02\", \"NaT\", \"2011-05\"], freq=freq)\n\n        result = idx1 > Period(\"2011-02\", freq=freq)\n        exp = np.array([False, False, False, True])\n        tm.assert_numpy_array_equal(result, exp)\n        result = Period(\"2011-02\", freq=freq) < idx1\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 == Period(\"NaT\", freq=freq)\n        exp = np.array([False, False, False, False])\n        tm.assert_numpy_array_equal(result, exp)\n        result = Period(\"NaT\", freq=freq) == idx1\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 != Period(\"NaT\", freq=freq)\n        exp = np.array([True, True, True, True])\n        tm.assert_numpy_array_equal(result, exp)\n        result = Period(\"NaT\", freq=freq) != idx1\n        tm.assert_numpy_array_equal(result, exp)\n\n        idx2 = PeriodIndex([\"2011-02\", \"2011-01\", \"2011-04\", \"NaT\"], freq=freq)\n        result = idx1 < idx2\n        exp = np.array([True, False, False, False])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 == idx2\n        exp = np.array([False, False, False, False])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 != idx2\n        exp = np.array([True, True, True, True])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 == idx1\n        exp = np.array([True, True, False, True])\n        tm.assert_numpy_array_equal(result, exp)\n\n        result = idx1 != idx1\n        exp = np.array([False, False, True, False])\n        tm.assert_numpy_array_equal(result, exp)",
        "begin_line": 306,
        "end_line": 346,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat_mismatched_freq_raises#349",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_pi_cmp_nat_mismatched_freq_raises(self, freq)",
        "snippet": "    def test_pi_cmp_nat_mismatched_freq_raises(self, freq):\n        idx1 = PeriodIndex([\"2011-01\", \"2011-02\", \"NaT\", \"2011-05\"], freq=freq)\n\n        diff = PeriodIndex([\"2011-02\", \"2011-01\", \"2011-04\", \"NaT\"], freq=\"4M\")\n        msg = \"Input has different freq=4M from Period(Array|Index)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            idx1 > diff\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            idx1 == diff",
        "begin_line": 349,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_comp_nat#362",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexComparisons.test_comp_nat(self, dtype)",
        "snippet": "    def test_comp_nat(self, dtype):\n        left = pd.PeriodIndex(\n            [pd.Period(\"2011-01-01\"), pd.NaT, pd.Period(\"2011-01-03\")]\n        )\n        right = pd.PeriodIndex([pd.NaT, pd.NaT, pd.Period(\"2011-01-03\")])\n\n        if dtype is not None:\n            left = left.astype(dtype)\n            right = right.astype(dtype)\n\n        result = left == right\n        expected = np.array([False, False, True])\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = left != right\n        expected = np.array([True, True, False])\n        tm.assert_numpy_array_equal(result, expected)\n\n        expected = np.array([False, False, False])\n        tm.assert_numpy_array_equal(left == pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT == right, expected)\n\n        expected = np.array([True, True, True])\n        tm.assert_numpy_array_equal(left != pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT != left, expected)\n\n        expected = np.array([False, False, False])\n        tm.assert_numpy_array_equal(left < pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT > left, expected)",
        "begin_line": 362,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesComparisons.test_cmp_series_period_series_mixed_freq#394",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesComparisons",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodSeriesComparisons.test_cmp_series_period_series_mixed_freq(self)",
        "snippet": "    def test_cmp_series_period_series_mixed_freq(self):\n        # GH#13200\n        base = Series(\n            [\n                Period(\"2011\", freq=\"A\"),\n                Period(\"2011-02\", freq=\"M\"),\n                Period(\"2013\", freq=\"A\"),\n                Period(\"2011-04\", freq=\"M\"),\n            ]\n        )\n\n        ser = Series(\n            [\n                Period(\"2012\", freq=\"A\"),\n                Period(\"2011-01\", freq=\"M\"),\n                Period(\"2013\", freq=\"A\"),\n                Period(\"2011-05\", freq=\"M\"),\n            ]\n        )\n\n        exp = Series([False, False, True, False])\n        tm.assert_series_equal(base == ser, exp)\n\n        exp = Series([True, True, False, True])\n        tm.assert_series_equal(base != ser, exp)\n\n        exp = Series([False, True, False, False])\n        tm.assert_series_equal(base > ser, exp)\n\n        exp = Series([True, False, False, True])\n        tm.assert_series_equal(base < ser, exp)\n\n        exp = Series([False, True, True, False])\n        tm.assert_series_equal(base >= ser, exp)\n\n        exp = Series([True, False, True, True])\n        tm.assert_series_equal(base <= ser, exp)",
        "begin_line": 394,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency._check#438",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency._check(self, values, func, expected)",
        "snippet": "    def _check(self, values, func, expected):\n        # Test PeriodIndex and Period Series Ops consistency\n\n        idx = pd.PeriodIndex(values)\n        result = func(idx)\n\n        # check that we don't pass an unwanted type to tm.assert_equal\n        assert isinstance(expected, (pd.Index, np.ndarray))\n        tm.assert_equal(result, expected)\n\n        s = pd.Series(values)\n        result = func(s)\n\n        exp = pd.Series(expected, name=values.name)\n        tm.assert_series_equal(result, exp)",
        "begin_line": 438,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period#454",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period(self)",
        "snippet": "    def test_pi_comp_period(self):\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        f = lambda x: x == pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([False, False, True, False], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") == x\n        self._check(idx, f, exp)\n\n        f = lambda x: x != pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([True, True, False, True], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") != x\n        self._check(idx, f, exp)\n\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") >= x\n        exp = np.array([True, True, True, False], dtype=np.bool)\n        self._check(idx, f, exp)\n\n        f = lambda x: x > pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([False, False, False, True], dtype=np.bool)\n        self._check(idx, f, exp)\n\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") >= x\n        exp = np.array([True, True, True, False], dtype=np.bool)\n        self._check(idx, f, exp)",
        "begin_line": 454,
        "end_line": 481,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period_nat#483",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesComparisonConsistency.test_pi_comp_period_nat(self)",
        "snippet": "    def test_pi_comp_period_nat(self):\n        idx = PeriodIndex(\n            [\"2011-01\", \"NaT\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        f = lambda x: x == pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([False, False, True, False], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") == x\n        self._check(idx, f, exp)\n\n        f = lambda x: x == pd.NaT\n        exp = np.array([False, False, False, False], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.NaT == x\n        self._check(idx, f, exp)\n\n        f = lambda x: x != pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([True, True, False, True], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") != x\n        self._check(idx, f, exp)\n\n        f = lambda x: x != pd.NaT\n        exp = np.array([True, True, True, True], dtype=np.bool)\n        self._check(idx, f, exp)\n        f = lambda x: pd.NaT != x\n        self._check(idx, f, exp)\n\n        f = lambda x: pd.Period(\"2011-03\", freq=\"M\") >= x\n        exp = np.array([True, False, True, False], dtype=np.bool)\n        self._check(idx, f, exp)\n\n        f = lambda x: x < pd.Period(\"2011-03\", freq=\"M\")\n        exp = np.array([True, False, False, False], dtype=np.bool)\n        self._check(idx, f, exp)\n\n        f = lambda x: x > pd.NaT\n        exp = np.array([False, False, False, False], dtype=np.bool)\n        self._check(idx, f, exp)\n\n        f = lambda x: pd.NaT >= x\n        exp = np.array([False, False, False, False], dtype=np.bool)\n        self._check(idx, f, exp)",
        "begin_line": 483,
        "end_line": 526,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodFrameArithmetic.test_ops_frame_period#534",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodFrameArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodFrameArithmetic.test_ops_frame_period(self)",
        "snippet": "    def test_ops_frame_period(self):\n        # GH#13043\n        df = pd.DataFrame(\n            {\n                \"A\": [pd.Period(\"2015-01\", freq=\"M\"), pd.Period(\"2015-02\", freq=\"M\")],\n                \"B\": [pd.Period(\"2014-01\", freq=\"M\"), pd.Period(\"2014-02\", freq=\"M\")],\n            }\n        )\n        assert df[\"A\"].dtype == \"Period[M]\"\n        assert df[\"B\"].dtype == \"Period[M]\"\n\n        p = pd.Period(\"2015-03\", freq=\"M\")\n        off = p.freq\n        # dtype will be object because of original dtype\n        exp = pd.DataFrame(\n            {\n                \"A\": np.array([2 * off, 1 * off], dtype=object),\n                \"B\": np.array([14 * off, 13 * off], dtype=object),\n            }\n        )\n        tm.assert_frame_equal(p - df, exp)\n        tm.assert_frame_equal(df - p, -1 * exp)\n\n        df2 = pd.DataFrame(\n            {\n                \"A\": [pd.Period(\"2015-05\", freq=\"M\"), pd.Period(\"2015-06\", freq=\"M\")],\n                \"B\": [pd.Period(\"2015-05\", freq=\"M\"), pd.Period(\"2015-06\", freq=\"M\")],\n            }\n        )\n        assert df2[\"A\"].dtype == \"Period[M]\"\n        assert df2[\"B\"].dtype == \"Period[M]\"\n\n        exp = pd.DataFrame(\n            {\n                \"A\": np.array([4 * off, 4 * off], dtype=object),\n                \"B\": np.array([16 * off, 16 * off], dtype=object),\n            }\n        )\n        tm.assert_frame_equal(df2 - df, exp)\n        tm.assert_frame_equal(df - df2, -1 * exp)",
        "begin_line": 534,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_iadd_parr_raises#583",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_iadd_parr_raises(self, box_with_array)",
        "snippet": "    def test_parr_add_iadd_parr_raises(self, box_with_array):\n        rng = pd.period_range(\"1/1/2000\", freq=\"D\", periods=5)\n        other = pd.period_range(\"1/6/2000\", freq=\"D\", periods=5)\n        # TODO: parametrize over boxes for other?\n\n        rng = tm.box_expected(rng, box_with_array)\n        # An earlier implementation of PeriodIndex addition performed\n        # a set operation (union).  This has since been changed to\n        # raise a TypeError. See GH#14164 and GH#13077 for historical\n        # reference.\n        msg = r\"unsupported operand type\\(s\\) for \\+: .* and .*\"\n        with pytest.raises(TypeError, match=msg):\n            rng + other\n\n        with pytest.raises(TypeError, match=msg):\n            rng += other",
        "begin_line": 583,
        "end_line": 598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_pi#600",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_pi(self)",
        "snippet": "    def test_pi_sub_isub_pi(self):\n        # GH#20049\n        # For historical reference see GH#14164, GH#13077.\n        # PeriodIndex subtraction originally performed set difference,\n        # then changed to raise TypeError before being implemented in GH#20049\n        rng = pd.period_range(\"1/1/2000\", freq=\"D\", periods=5)\n        other = pd.period_range(\"1/6/2000\", freq=\"D\", periods=5)\n\n        off = rng.freq\n        expected = pd.Index([-5 * off] * 5)\n        result = rng - other\n        tm.assert_index_equal(result, expected)\n\n        rng -= other\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 600,
        "end_line": 614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_pi_with_nat#616",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_pi_with_nat(self)",
        "snippet": "    def test_pi_sub_pi_with_nat(self):\n        rng = pd.period_range(\"1/1/2000\", freq=\"D\", periods=5)\n        other = rng[1:].insert(0, pd.NaT)\n        assert other[1:].equals(rng[1:])\n\n        result = rng - other\n        off = rng.freq\n        expected = pd.Index([pd.NaT, 0 * off, 0 * off, 0 * off, 0 * off])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 616,
        "end_line": 624,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_sub_pi_mismatched_freq#626",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_sub_pi_mismatched_freq(self, box_with_array)",
        "snippet": "    def test_parr_sub_pi_mismatched_freq(self, box_with_array):\n        rng = pd.period_range(\"1/1/2000\", freq=\"D\", periods=5)\n        other = pd.period_range(\"1/6/2000\", freq=\"H\", periods=5)\n        # TODO: parametrize over boxes for other?\n\n        rng = tm.box_expected(rng, box_with_array)\n        msg = r\"Input has different freq=[HD] from PeriodArray\\(freq=[DH]\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng - other",
        "begin_line": 626,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_ticks#637",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_ticks(self, tick_classes, n)",
        "snippet": "    def test_sub_n_gt_1_ticks(self, tick_classes, n):\n        # GH 23878\n        p1_d = \"19910905\"\n        p2_d = \"19920406\"\n        p1 = pd.PeriodIndex([p1_d], freq=tick_classes(n))\n        p2 = pd.PeriodIndex([p2_d], freq=tick_classes(n))\n\n        expected = pd.PeriodIndex([p2_d], freq=p2.freq.base) - pd.PeriodIndex(\n            [p1_d], freq=p1.freq.base\n        )\n\n        tm.assert_index_equal((p2 - p1), expected)",
        "begin_line": 637,
        "end_line": 648,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_offsets#660",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_sub_n_gt_1_offsets(self, offset, kwd_name, n)",
        "snippet": "    def test_sub_n_gt_1_offsets(self, offset, kwd_name, n):\n        # GH 23878\n        kwds = {kwd_name: 3} if kwd_name is not None else {}\n        p1_d = \"19910905\"\n        p2_d = \"19920406\"\n        freq = offset(n, normalize=False, **kwds)\n        p1 = pd.PeriodIndex([p1_d], freq=freq)\n        p2 = pd.PeriodIndex([p2_d], freq=freq)\n\n        result = p2 - p1\n        expected = pd.PeriodIndex([p2_d], freq=freq.base) - pd.PeriodIndex(\n            [p1_d], freq=freq.base\n        )\n\n        tm.assert_index_equal(result, expected)",
        "begin_line": 660,
        "end_line": 674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_float_raises#681",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_float_raises(self, op, other, box_with_array)",
        "snippet": "    def test_parr_add_sub_float_raises(self, op, other, box_with_array):\n        dti = pd.DatetimeIndex([\"2011-01-01\", \"2011-01-02\"], freq=\"D\")\n        pi = dti.to_period(\"D\")\n        pi = tm.box_expected(pi, box_with_array)\n        msg = r\"unsupported operand type\\(s\\) for [+-]: .* and .*\"\n        with pytest.raises(TypeError, match=msg):\n            op(pi, other)",
        "begin_line": 681,
        "end_line": 687,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_invalid#704",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_invalid(self, other, box_with_array)",
        "snippet": "    def test_parr_add_sub_invalid(self, other, box_with_array):\n        # GH#23215\n        rng = pd.period_range(\"1/1/2000\", freq=\"D\", periods=3)\n        rng = tm.box_expected(rng, box_with_array)\n\n        msg = (\n            r\"(:?cannot add PeriodArray and .*)\"\n            r\"|(:?cannot subtract .* from (:?a\\s)?.*)\"\n            r\"|(:?unsupported operand type\\(s\\) for \\+: .* and .*)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            rng + other\n        with pytest.raises(TypeError, match=msg):\n            other + rng\n        with pytest.raises(TypeError, match=msg):\n            rng - other\n        with pytest.raises(TypeError, match=msg):\n            other - rng",
        "begin_line": 704,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_non_tick_raises#726",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_non_tick_raises(self)",
        "snippet": "    def test_pi_add_sub_td64_array_non_tick_raises(self):\n        rng = pd.period_range(\"1/1/2000\", freq=\"Q\", periods=3)\n        tdi = pd.TimedeltaIndex([\"-1 Day\", \"-1 Day\", \"-1 Day\"])\n        tdarr = tdi.values\n\n        msg = r\"Input has different freq=None from PeriodArray\\(freq=Q-DEC\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng + tdarr\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            tdarr + rng\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng - tdarr\n        msg = r\"cannot subtract PeriodArray from timedelta64\\[ns\\]\"\n        with pytest.raises(TypeError, match=msg):\n            tdarr - rng",
        "begin_line": 726,
        "end_line": 741,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_tick#743",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_td64_array_tick(self)",
        "snippet": "    def test_pi_add_sub_td64_array_tick(self):\n        # PeriodIndex + Timedelta-like is allowed only with\n        #   tick-like frequencies\n        rng = pd.period_range(\"1/1/2000\", freq=\"90D\", periods=3)\n        tdi = pd.TimedeltaIndex([\"-1 Day\", \"-1 Day\", \"-1 Day\"])\n        tdarr = tdi.values\n\n        expected = pd.period_range(\"12/31/1999\", freq=\"90D\", periods=3)\n        result = rng + tdi\n        tm.assert_index_equal(result, expected)\n        result = rng + tdarr\n        tm.assert_index_equal(result, expected)\n        result = tdi + rng\n        tm.assert_index_equal(result, expected)\n        result = tdarr + rng\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.period_range(\"1/2/2000\", freq=\"90D\", periods=3)\n\n        result = rng - tdi\n        tm.assert_index_equal(result, expected)\n        result = rng - tdarr\n        tm.assert_index_equal(result, expected)\n\n        msg = r\"cannot subtract .* from .*\"\n        with pytest.raises(TypeError, match=msg):\n            tdarr - rng\n\n        with pytest.raises(TypeError, match=msg):\n            tdi - rng",
        "begin_line": 743,
        "end_line": 772,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_array#778",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_array(self, box)",
        "snippet": "    def test_pi_add_offset_array(self, box):\n        # GH#18849\n        pi = pd.PeriodIndex([pd.Period(\"2015Q1\"), pd.Period(\"2016Q2\")])\n        offs = box(\n            [\n                pd.offsets.QuarterEnd(n=1, startingMonth=12),\n                pd.offsets.QuarterEnd(n=-2, startingMonth=12),\n            ]\n        )\n        expected = pd.PeriodIndex([pd.Period(\"2015Q2\"), pd.Period(\"2015Q4\")])\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res = pi + offs\n        tm.assert_index_equal(res, expected)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res2 = offs + pi\n        tm.assert_index_equal(res2, expected)\n\n        unanchored = np.array([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)])\n        # addition/subtraction ops with incompatible offsets should issue\n        # a PerformanceWarning and _then_ raise a TypeError.\n        msg = r\"Input cannot be converted to Period\\(freq=Q-DEC\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            with tm.assert_produces_warning(PerformanceWarning):\n                pi + unanchored\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            with tm.assert_produces_warning(PerformanceWarning):\n                unanchored + pi",
        "begin_line": 778,
        "end_line": 806,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_offset_array#809",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_offset_array(self, box)",
        "snippet": "    def test_pi_sub_offset_array(self, box):\n        # GH#18824\n        pi = pd.PeriodIndex([pd.Period(\"2015Q1\"), pd.Period(\"2016Q2\")])\n        other = box(\n            [\n                pd.offsets.QuarterEnd(n=1, startingMonth=12),\n                pd.offsets.QuarterEnd(n=-2, startingMonth=12),\n            ]\n        )\n\n        expected = PeriodIndex([pi[n] - other[n] for n in range(len(pi))])\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res = pi - other\n        tm.assert_index_equal(res, expected)\n\n        anchored = box([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])\n\n        # addition/subtraction ops with anchored offsets should issue\n        # a PerformanceWarning and _then_ raise a TypeError.\n        msg = r\"Input has different freq=-1M from Period\\(freq=Q-DEC\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            with tm.assert_produces_warning(PerformanceWarning):\n                pi - anchored\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            with tm.assert_produces_warning(PerformanceWarning):\n                anchored - pi",
        "begin_line": 809,
        "end_line": 835,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_int#837",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_int(self, one)",
        "snippet": "    def test_pi_add_iadd_int(self, one):\n        # Variants of `one` for #19012\n        rng = pd.period_range(\"2000-01-01 09:00\", freq=\"H\", periods=10)\n        result = rng + one\n        expected = pd.period_range(\"2000-01-01 10:00\", freq=\"H\", periods=10)\n        tm.assert_index_equal(result, expected)\n        rng += one\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 837,
        "end_line": 844,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_int#846",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_int(self, one)",
        "snippet": "    def test_pi_sub_isub_int(self, one):\n        \"\"\"\n        PeriodIndex.__sub__ and __isub__ with several representations of\n        the integer 1, e.g. int, np.int64, np.uint8, ...\n        \"\"\"\n        rng = pd.period_range(\"2000-01-01 09:00\", freq=\"H\", periods=10)\n        result = rng - one\n        expected = pd.period_range(\"2000-01-01 08:00\", freq=\"H\", periods=10)\n        tm.assert_index_equal(result, expected)\n        rng -= one\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 846,
        "end_line": 856,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intlike#859",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intlike(self, five)",
        "snippet": "    def test_pi_sub_intlike(self, five):\n        rng = period_range(\"2007-01\", periods=50)\n\n        result = rng - five\n        exp = rng + (-five)\n        tm.assert_index_equal(result, exp)",
        "begin_line": 859,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_offset#866",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_offset(self)",
        "snippet": "    def test_pi_sub_isub_offset(self):\n        # offset\n        # DateOffset\n        rng = pd.period_range(\"2014\", \"2024\", freq=\"A\")\n        result = rng - pd.offsets.YearEnd(5)\n        expected = pd.period_range(\"2009\", \"2019\", freq=\"A\")\n        tm.assert_index_equal(result, expected)\n        rng -= pd.offsets.YearEnd(5)\n        tm.assert_index_equal(rng, expected)\n\n        rng = pd.period_range(\"2014-01\", \"2016-12\", freq=\"M\")\n        result = rng - pd.offsets.MonthEnd(5)\n        expected = pd.period_range(\"2013-08\", \"2016-07\", freq=\"M\")\n        tm.assert_index_equal(result, expected)\n\n        rng -= pd.offsets.MonthEnd(5)\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 866,
        "end_line": 882,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1#885",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1(self, box_with_array, transpose)",
        "snippet": "    def test_pi_add_offset_n_gt1(self, box_with_array, transpose):\n        # GH#23215\n        # add offset to PeriodIndex with freq.n > 1\n\n        per = pd.Period(\"2016-01\", freq=\"2M\")\n        pi = pd.PeriodIndex([per])\n\n        expected = pd.PeriodIndex([\"2016-03\"], freq=\"2M\")\n\n        pi = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n\n        result = pi + per.freq\n        tm.assert_equal(result, expected)\n\n        result = per.freq + pi\n        tm.assert_equal(result, expected)",
        "begin_line": 885,
        "end_line": 901,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1_not_divisible#903",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_offset_n_gt1_not_divisible(self, box_with_array)",
        "snippet": "    def test_pi_add_offset_n_gt1_not_divisible(self, box_with_array):\n        # GH#23215\n        # PeriodIndex with freq.n > 1 add offset with offset.n % freq.n != 0\n        pi = pd.PeriodIndex([\"2016-01\"], freq=\"2M\")\n        expected = pd.PeriodIndex([\"2016-04\"], freq=\"2M\")\n\n        # FIXME: with transposing these tests fail\n        pi = tm.box_expected(pi, box_with_array, transpose=False)\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        result = pi + to_offset(\"3M\")\n        tm.assert_equal(result, expected)\n\n        result = to_offset(\"3M\") + pi\n        tm.assert_equal(result, expected)",
        "begin_line": 903,
        "end_line": 917,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_intarray#924",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_intarray(self, int_holder, op)",
        "snippet": "    def test_pi_add_intarray(self, int_holder, op):\n        # GH#19959\n        pi = pd.PeriodIndex([pd.Period(\"2015Q1\"), pd.Period(\"NaT\")])\n        other = int_holder([4, -1])\n\n        result = op(pi, other)\n        expected = pd.PeriodIndex([pd.Period(\"2016Q1\"), pd.Period(\"NaT\")])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 924,
        "end_line": 931,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intarray#934",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_intarray(self, int_holder)",
        "snippet": "    def test_pi_sub_intarray(self, int_holder):\n        # GH#19959\n        pi = pd.PeriodIndex([pd.Period(\"2015Q1\"), pd.Period(\"NaT\")])\n        other = int_holder([4, -1])\n\n        result = pi - other\n        expected = pd.PeriodIndex([pd.Period(\"2014Q1\"), pd.Period(\"NaT\")])\n        tm.assert_index_equal(result, expected)\n\n        msg = r\"bad operand type for unary -: 'PeriodArray'\"\n        with pytest.raises(TypeError, match=msg):\n            other - pi",
        "begin_line": 934,
        "end_line": 945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_minute_gt1#951",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_minute_gt1(self, three_days)",
        "snippet": "    def test_pi_add_timedeltalike_minute_gt1(self, three_days):\n        # GH#23031 adding a time-delta-like offset to a PeriodArray that has\n        # minute frequency with n != 1.  A more general case is tested below\n        # in test_pi_add_timedeltalike_tick_gt1, but here we write out the\n        # expected result more explicitly.\n        other = three_days\n        rng = pd.period_range(\"2014-05-01\", periods=3, freq=\"2D\")\n\n        expected = pd.PeriodIndex([\"2014-05-04\", \"2014-05-06\", \"2014-05-08\"], freq=\"2D\")\n\n        result = rng + other\n        tm.assert_index_equal(result, expected)\n\n        result = other + rng\n        tm.assert_index_equal(result, expected)\n\n        # subtraction\n        expected = pd.PeriodIndex([\"2014-04-28\", \"2014-04-30\", \"2014-05-02\"], freq=\"2D\")\n        result = rng - other\n        tm.assert_index_equal(result, expected)\n\n        msg = (\n            r\"(:?bad operand type for unary -: 'PeriodArray')\"\n            r\"|(:?cannot subtract PeriodArray from timedelta64\\[[hD]\\])\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            other - rng",
        "begin_line": 951,
        "end_line": 977,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_tick_gt1#980",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_tick_gt1(self, three_days, freqstr)",
        "snippet": "    def test_pi_add_timedeltalike_tick_gt1(self, three_days, freqstr):\n        # GH#23031 adding a time-delta-like offset to a PeriodArray that has\n        # tick-like frequency with n != 1\n        other = three_days\n        rng = pd.period_range(\"2014-05-01\", periods=6, freq=freqstr)\n\n        expected = pd.period_range(rng[0] + other, periods=6, freq=freqstr)\n\n        result = rng + other\n        tm.assert_index_equal(result, expected)\n\n        result = other + rng\n        tm.assert_index_equal(result, expected)\n\n        # subtraction\n        expected = pd.period_range(rng[0] - other, periods=6, freq=freqstr)\n        result = rng - other\n        tm.assert_index_equal(result, expected)\n        msg = (\n            r\"(:?bad operand type for unary -: 'PeriodArray')\"\n            r\"|(:?cannot subtract PeriodArray from timedelta64\\[[hD]\\])\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            other - rng",
        "begin_line": 980,
        "end_line": 1003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_daily#1005",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_daily(self, three_days)",
        "snippet": "    def test_pi_add_iadd_timedeltalike_daily(self, three_days):\n        # Tick\n        other = three_days\n        rng = pd.period_range(\"2014-05-01\", \"2014-05-15\", freq=\"D\")\n        expected = pd.period_range(\"2014-05-04\", \"2014-05-18\", freq=\"D\")\n\n        result = rng + other\n        tm.assert_index_equal(result, expected)\n\n        rng += other\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1005,
        "end_line": 1015,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_daily#1017",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_daily(self, three_days)",
        "snippet": "    def test_pi_sub_isub_timedeltalike_daily(self, three_days):\n        # Tick-like 3 Days\n        other = three_days\n        rng = pd.period_range(\"2014-05-01\", \"2014-05-15\", freq=\"D\")\n        expected = pd.period_range(\"2014-04-28\", \"2014-05-12\", freq=\"D\")\n\n        result = rng - other\n        tm.assert_index_equal(result, expected)\n\n        rng -= other\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1017,
        "end_line": 1027,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_daily#1029",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_daily(self, not_daily)",
        "snippet": "    def test_pi_add_sub_timedeltalike_freq_mismatch_daily(self, not_daily):\n        other = not_daily\n        rng = pd.period_range(\"2014-05-01\", \"2014-05-15\", freq=\"D\")\n        msg = \"Input has different freq(=.+)? from Period.*?\\\\(freq=D\\\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng + other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng += other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng - other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng -= other",
        "begin_line": 1029,
        "end_line": 1040,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_hourly#1042",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_hourly(self, two_hours)",
        "snippet": "    def test_pi_add_iadd_timedeltalike_hourly(self, two_hours):\n        other = two_hours\n        rng = pd.period_range(\"2014-01-01 10:00\", \"2014-01-05 10:00\", freq=\"H\")\n        expected = pd.period_range(\"2014-01-01 12:00\", \"2014-01-05 12:00\", freq=\"H\")\n\n        result = rng + other\n        tm.assert_index_equal(result, expected)\n\n        rng += other\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1042,
        "end_line": 1051,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_mismatched_freq_hourly#1053",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_timedeltalike_mismatched_freq_hourly(self, not_hourly)",
        "snippet": "    def test_pi_add_timedeltalike_mismatched_freq_hourly(self, not_hourly):\n        other = not_hourly\n        rng = pd.period_range(\"2014-01-01 10:00\", \"2014-01-05 10:00\", freq=\"H\")\n        msg = \"Input has different freq(=.+)? from Period.*?\\\\(freq=H\\\\)\"\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng + other\n\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng += other",
        "begin_line": 1053,
        "end_line": 1062,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_hourly#1064",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_sub_isub_timedeltalike_hourly(self, two_hours)",
        "snippet": "    def test_pi_sub_isub_timedeltalike_hourly(self, two_hours):\n        other = two_hours\n        rng = pd.period_range(\"2014-01-01 10:00\", \"2014-01-05 10:00\", freq=\"H\")\n        expected = pd.period_range(\"2014-01-01 08:00\", \"2014-01-05 08:00\", freq=\"H\")\n\n        result = rng - other\n        tm.assert_index_equal(result, expected)\n\n        rng -= other\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1064,
        "end_line": 1073,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_add_iadd_timedeltalike_annual#1075",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_add_iadd_timedeltalike_annual(self)",
        "snippet": "    def test_add_iadd_timedeltalike_annual(self):\n        # offset\n        # DateOffset\n        rng = pd.period_range(\"2014\", \"2024\", freq=\"A\")\n        result = rng + pd.offsets.YearEnd(5)\n        expected = pd.period_range(\"2019\", \"2029\", freq=\"A\")\n        tm.assert_index_equal(result, expected)\n        rng += pd.offsets.YearEnd(5)\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1075,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_annual#1085",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_annual(self, mismatched_freq)",
        "snippet": "    def test_pi_add_sub_timedeltalike_freq_mismatch_annual(self, mismatched_freq):\n        other = mismatched_freq\n        rng = pd.period_range(\"2014\", \"2024\", freq=\"A\")\n        msg = \"Input has different freq(=.+)? from Period.*?\\\\(freq=A-DEC\\\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng + other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng += other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng - other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng -= other",
        "begin_line": 1085,
        "end_line": 1096,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_M#1098",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_iadd_timedeltalike_M(self)",
        "snippet": "    def test_pi_add_iadd_timedeltalike_M(self):\n        rng = pd.period_range(\"2014-01\", \"2016-12\", freq=\"M\")\n        expected = pd.period_range(\"2014-06\", \"2017-05\", freq=\"M\")\n\n        result = rng + pd.offsets.MonthEnd(5)\n        tm.assert_index_equal(result, expected)\n\n        rng += pd.offsets.MonthEnd(5)\n        tm.assert_index_equal(rng, expected)",
        "begin_line": 1098,
        "end_line": 1106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_monthly#1108",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_pi_add_sub_timedeltalike_freq_mismatch_monthly(self, mismatched_freq)",
        "snippet": "    def test_pi_add_sub_timedeltalike_freq_mismatch_monthly(self, mismatched_freq):\n        other = mismatched_freq\n        rng = pd.period_range(\"2014-01\", \"2016-12\", freq=\"M\")\n        msg = \"Input has different freq(=.+)? from Period.*?\\\\(freq=M\\\\)\"\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng + other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng += other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng - other\n        with pytest.raises(IncompatibleFrequency, match=msg):\n            rng -= other",
        "begin_line": 1108,
        "end_line": 1119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_td64_nat#1122",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_td64_nat(self, box_with_array, transpose)",
        "snippet": "    def test_parr_add_sub_td64_nat(self, box_with_array, transpose):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        other = np.timedelta64(\"NaT\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n\n        obj = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        msg = r\"cannot subtract .* from .*\"\n        with pytest.raises(TypeError, match=msg):\n            other - obj",
        "begin_line": 1122,
        "end_line": 1139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_tdt64_nat_array#1148",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_tdt64_nat_array(self, box_with_array, other)",
        "snippet": "    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n\n        obj = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        msg = r\"cannot subtract .* from .*\"\n        with pytest.raises(TypeError, match=msg):\n            other - obj",
        "begin_line": 1148,
        "end_line": 1163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_index#1168",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_index(self)",
        "snippet": "    def test_parr_add_sub_index(self):\n        # Check that PeriodArray defers to Index on arithmetic ops\n        pi = pd.period_range(\"2000-12-31\", periods=3)\n        parr = pi.array\n\n        result = parr - pi\n        expected = pi - pi\n        tm.assert_index_equal(result, expected)",
        "begin_line": 1168,
        "end_line": 1175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_object_array#1177",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic.test_parr_add_sub_object_array(self)",
        "snippet": "    def test_parr_add_sub_object_array(self):\n        pi = pd.period_range(\"2000-12-31\", periods=3, freq=\"D\")\n        parr = pi.array\n\n        other = np.array([pd.Timedelta(days=1), pd.offsets.Day(2), 3])\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            result = parr + other\n\n        expected = pd.PeriodIndex(\n            [\"2001-01-01\", \"2001-01-03\", \"2001-01-05\"], freq=\"D\"\n        ).array\n        tm.assert_equal(result, expected)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            result = parr - other\n\n        expected = pd.PeriodIndex([\"2000-12-30\"] * 3, freq=\"D\").array\n        tm.assert_equal(result, expected)",
        "begin_line": 1177,
        "end_line": 1195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_timedelta#1199",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_timedelta(self)",
        "snippet": "    def test_ops_series_timedelta(self):\n        # GH#13043\n        ser = pd.Series(\n            [pd.Period(\"2015-01-01\", freq=\"D\"), pd.Period(\"2015-01-02\", freq=\"D\")],\n            name=\"xxx\",\n        )\n        assert ser.dtype == \"Period[D]\"\n\n        expected = pd.Series(\n            [pd.Period(\"2015-01-02\", freq=\"D\"), pd.Period(\"2015-01-03\", freq=\"D\")],\n            name=\"xxx\",\n        )\n\n        result = ser + pd.Timedelta(\"1 days\")\n        tm.assert_series_equal(result, expected)\n\n        result = pd.Timedelta(\"1 days\") + ser\n        tm.assert_series_equal(result, expected)\n\n        result = ser + pd.tseries.offsets.Day()\n        tm.assert_series_equal(result, expected)\n\n        result = pd.tseries.offsets.Day() + ser\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1199,
        "end_line": 1222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_period#1224",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodSeriesArithmetic.test_ops_series_period(self)",
        "snippet": "    def test_ops_series_period(self):\n        # GH#13043\n        ser = pd.Series(\n            [pd.Period(\"2015-01-01\", freq=\"D\"), pd.Period(\"2015-01-02\", freq=\"D\")],\n            name=\"xxx\",\n        )\n        assert ser.dtype == \"Period[D]\"\n\n        per = pd.Period(\"2015-01-10\", freq=\"D\")\n        off = per.freq\n        # dtype will be object because of original dtype\n        expected = pd.Series([9 * off, 8 * off], name=\"xxx\", dtype=object)\n        tm.assert_series_equal(per - ser, expected)\n        tm.assert_series_equal(ser - per, -1 * expected)\n\n        s2 = pd.Series(\n            [pd.Period(\"2015-01-05\", freq=\"D\"), pd.Period(\"2015-01-04\", freq=\"D\")],\n            name=\"xxx\",\n        )\n        assert s2.dtype == \"Period[D]\"\n\n        expected = pd.Series([4 * off, 2 * off], name=\"xxx\", dtype=object)\n        tm.assert_series_equal(s2 - ser, expected)\n        tm.assert_series_equal(ser - s2, -1 * expected)",
        "begin_line": 1224,
        "end_line": 1247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods._check#1253",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods._check(self, values, func, expected)",
        "snippet": "    def _check(self, values, func, expected):\n        idx = pd.PeriodIndex(values)\n        result = func(idx)\n        tm.assert_equal(result, expected)\n\n        ser = pd.Series(values)\n        result = func(ser)\n\n        exp = pd.Series(expected, name=values.name)\n        tm.assert_series_equal(result, exp)",
        "begin_line": 1253,
        "end_line": 1262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops#1264",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops(self)",
        "snippet": "    def test_pi_ops(self):\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        expected = PeriodIndex(\n            [\"2011-03\", \"2011-04\", \"2011-05\", \"2011-06\"], freq=\"M\", name=\"idx\"\n        )\n\n        self._check(idx, lambda x: x + 2, expected)\n        self._check(idx, lambda x: 2 + x, expected)\n\n        self._check(idx + 2, lambda x: x - 2, idx)\n\n        result = idx - Period(\"2011-01\", freq=\"M\")\n        off = idx.freq\n        exp = pd.Index([0 * off, 1 * off, 2 * off, 3 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = Period(\"2011-01\", freq=\"M\") - idx\n        exp = pd.Index([0 * off, -1 * off, -2 * off, -3 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)",
        "begin_line": 1264,
        "end_line": 1285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_parr_ops_errors#1301",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_parr_ops_errors(self, ng, func, box_with_array)",
        "snippet": "    def test_parr_ops_errors(self, ng, func, box_with_array):\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n        obj = tm.box_expected(idx, box_with_array)\n        msg = (\n            r\"unsupported operand type\\(s\\)|can only concatenate|\"\n            r\"must be str|object to str implicitly\"\n        )\n\n        with pytest.raises(TypeError, match=msg):\n            func(obj, ng)",
        "begin_line": 1301,
        "end_line": 1312,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_nat#1314",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_nat(self)",
        "snippet": "    def test_pi_ops_nat(self):\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"NaT\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n        expected = PeriodIndex(\n            [\"2011-03\", \"2011-04\", \"NaT\", \"2011-06\"], freq=\"M\", name=\"idx\"\n        )\n\n        self._check(idx, lambda x: x + 2, expected)\n        self._check(idx, lambda x: 2 + x, expected)\n        self._check(idx, lambda x: np.add(x, 2), expected)\n\n        self._check(idx + 2, lambda x: x - 2, idx)\n        self._check(idx + 2, lambda x: np.subtract(x, 2), idx)\n\n        # freq with mult\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"NaT\", \"2011-04\"], freq=\"2M\", name=\"idx\"\n        )\n        expected = PeriodIndex(\n            [\"2011-07\", \"2011-08\", \"NaT\", \"2011-10\"], freq=\"2M\", name=\"idx\"\n        )\n\n        self._check(idx, lambda x: x + 3, expected)\n        self._check(idx, lambda x: 3 + x, expected)\n        self._check(idx, lambda x: np.add(x, 3), expected)\n\n        self._check(idx + 3, lambda x: x - 3, idx)\n        self._check(idx + 3, lambda x: np.subtract(x, 3), idx)",
        "begin_line": 1314,
        "end_line": 1342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_array_int#1344",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_array_int(self)",
        "snippet": "    def test_pi_ops_array_int(self):\n\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"NaT\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n        f = lambda x: x + np.array([1, 2, 3, 4])\n        exp = PeriodIndex(\n            [\"2011-02\", \"2011-04\", \"NaT\", \"2011-08\"], freq=\"M\", name=\"idx\"\n        )\n        self._check(idx, f, exp)\n\n        f = lambda x: np.add(x, np.array([4, -1, 1, 2]))\n        exp = PeriodIndex(\n            [\"2011-05\", \"2011-01\", \"NaT\", \"2011-06\"], freq=\"M\", name=\"idx\"\n        )\n        self._check(idx, f, exp)\n\n        f = lambda x: x - np.array([1, 2, 3, 4])\n        exp = PeriodIndex(\n            [\"2010-12\", \"2010-12\", \"NaT\", \"2010-12\"], freq=\"M\", name=\"idx\"\n        )\n        self._check(idx, f, exp)\n\n        f = lambda x: np.subtract(x, np.array([3, 2, 3, -2]))\n        exp = PeriodIndex(\n            [\"2010-10\", \"2010-12\", \"NaT\", \"2011-06\"], freq=\"M\", name=\"idx\"\n        )\n        self._check(idx, f, exp)",
        "begin_line": 1344,
        "end_line": 1371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_offset#1373",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_ops_offset(self)",
        "snippet": "    def test_pi_ops_offset(self):\n        idx = PeriodIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-03-01\", \"2011-04-01\"],\n            freq=\"D\",\n            name=\"idx\",\n        )\n        f = lambda x: x + pd.offsets.Day()\n        exp = PeriodIndex(\n            [\"2011-01-02\", \"2011-02-02\", \"2011-03-02\", \"2011-04-02\"],\n            freq=\"D\",\n            name=\"idx\",\n        )\n        self._check(idx, f, exp)\n\n        f = lambda x: x + pd.offsets.Day(2)\n        exp = PeriodIndex(\n            [\"2011-01-03\", \"2011-02-03\", \"2011-03-03\", \"2011-04-03\"],\n            freq=\"D\",\n            name=\"idx\",\n        )\n        self._check(idx, f, exp)\n\n        f = lambda x: x - pd.offsets.Day(2)\n        exp = PeriodIndex(\n            [\"2010-12-30\", \"2011-01-30\", \"2011-02-27\", \"2011-03-30\"],\n            freq=\"D\",\n            name=\"idx\",\n        )\n        self._check(idx, f, exp)",
        "begin_line": 1373,
        "end_line": 1401,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_offset_errors#1403",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_offset_errors(self)",
        "snippet": "    def test_pi_offset_errors(self):\n        idx = PeriodIndex(\n            [\"2011-01-01\", \"2011-02-01\", \"2011-03-01\", \"2011-04-01\"],\n            freq=\"D\",\n            name=\"idx\",\n        )\n        ser = pd.Series(idx)\n\n        # Series op is applied per Period instance, thus error is raised\n        # from Period\n        for obj in [idx, ser]:\n            msg = r\"Input has different freq=2H from Period.*?\\(freq=D\\)\"\n            with pytest.raises(IncompatibleFrequency, match=msg):\n                obj + pd.offsets.Hour(2)\n\n            with pytest.raises(IncompatibleFrequency, match=msg):\n                pd.offsets.Hour(2) + obj\n\n            msg = r\"Input has different freq=-2H from Period.*?\\(freq=D\\)\"\n            with pytest.raises(IncompatibleFrequency, match=msg):\n                obj - pd.offsets.Hour(2)",
        "begin_line": 1403,
        "end_line": 1423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period#1425",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period(self)",
        "snippet": "    def test_pi_sub_period(self):\n        # GH#13071\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        result = idx - pd.Period(\"2012-01\", freq=\"M\")\n        off = idx.freq\n        exp = pd.Index([-12 * off, -11 * off, -10 * off, -9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = np.subtract(idx, pd.Period(\"2012-01\", freq=\"M\"))\n        tm.assert_index_equal(result, exp)\n\n        result = pd.Period(\"2012-01\", freq=\"M\") - idx\n        exp = pd.Index([12 * off, 11 * off, 10 * off, 9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = np.subtract(pd.Period(\"2012-01\", freq=\"M\"), idx)\n        tm.assert_index_equal(result, exp)\n\n        exp = pd.TimedeltaIndex([np.nan, np.nan, np.nan, np.nan], name=\"idx\")\n        result = idx - pd.Period(\"NaT\", freq=\"M\")\n        tm.assert_index_equal(result, exp)\n        assert result.freq == exp.freq\n\n        result = pd.Period(\"NaT\", freq=\"M\") - idx\n        tm.assert_index_equal(result, exp)\n        assert result.freq == exp.freq",
        "begin_line": 1425,
        "end_line": 1453,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_pdnat#1455",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_pdnat(self)",
        "snippet": "    def test_pi_sub_pdnat(self):\n        # GH#13071\n        idx = PeriodIndex(\n            [\"2011-01\", \"2011-02\", \"NaT\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n        exp = pd.TimedeltaIndex([pd.NaT] * 4, name=\"idx\")\n        tm.assert_index_equal(pd.NaT - idx, exp)\n        tm.assert_index_equal(idx - pd.NaT, exp)",
        "begin_line": 1455,
        "end_line": 1462,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period_nat#1464",
        "src_path": "pandas/tests/arithmetic/test_period.py",
        "class_name": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods",
        "signature": "pandas.tests.arithmetic.test_period.TestPeriodIndexSeriesMethods.test_pi_sub_period_nat(self)",
        "snippet": "    def test_pi_sub_period_nat(self):\n        # GH#13071\n        idx = PeriodIndex(\n            [\"2011-01\", \"NaT\", \"2011-03\", \"2011-04\"], freq=\"M\", name=\"idx\"\n        )\n\n        result = idx - pd.Period(\"2012-01\", freq=\"M\")\n        off = idx.freq\n        exp = pd.Index([-12 * off, pd.NaT, -10 * off, -9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        result = pd.Period(\"2012-01\", freq=\"M\") - idx\n        exp = pd.Index([12 * off, pd.NaT, 10 * off, 9 * off], name=\"idx\")\n        tm.assert_index_equal(result, exp)\n\n        exp = pd.TimedeltaIndex([np.nan, np.nan, np.nan, np.nan], name=\"idx\")\n        tm.assert_index_equal(idx - pd.Period(\"NaT\", freq=\"M\"), exp)\n        tm.assert_index_equal(pd.Period(\"NaT\", freq=\"M\") - idx, exp)",
        "begin_line": 1464,
        "end_line": 1481,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.one#23",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.one(request)",
        "snippet": "def one(request):\n    \"\"\"\n    Several variants of integer value 1. The zero-dim integer array\n    behaves like an integer.\n\n    This fixture can be used to check that datetimelike indexes handle\n    addition and subtraction of integers and zero-dimensional arrays\n    of integers.\n\n    Examples\n    --------\n    >>> dti = pd.date_range('2016-01-01', periods=2, freq='H')\n    >>> dti\n    DatetimeIndex(['2016-01-01 00:00:00', '2016-01-01 01:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    >>> dti + one\n    DatetimeIndex(['2016-01-01 01:00:00', '2016-01-01 02:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    \"\"\"\n    return request.param",
        "begin_line": 23,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.zero#59",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.zero(request)",
        "snippet": "def zero(request):\n    \"\"\"\n    Several types of scalar zeros and length 5 vectors of zeros.\n\n    This fixture can be used to check that numeric-dtype indexes handle\n    division by any zero numeric-dtype.\n\n    Uses vector of length 5 for broadcasting with `numeric_idx` fixture,\n    which creates numeric-dtype vectors also of length 5.\n\n    Examples\n    --------\n    >>> arr = pd.RangeIndex(5)\n    >>> arr / zeros\n    Float64Index([nan, inf, inf, inf, inf], dtype='float64')\n    \"\"\"\n    return request.param",
        "begin_line": 59,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.numeric_idx#91",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.numeric_idx(request)",
        "snippet": "def numeric_idx(request):\n    \"\"\"\n    Several types of numeric-dtypes Index objects\n    \"\"\"\n    return request.param",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.scalar_td#110",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.scalar_td(request)",
        "snippet": "def scalar_td(request):\n    \"\"\"\n    Several variants of Timedelta scalars representing 5 minutes and 4 seconds\n    \"\"\"\n    return request.param",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.three_days#128",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.three_days(request)",
        "snippet": "def three_days(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 3-day timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 128,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.two_hours#147",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.two_hours(request)",
        "snippet": "def two_hours(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 2-hour timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 147,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_hourly#170",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_hourly(request)",
        "snippet": "def not_hourly(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Hourly frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 170,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_daily#186",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_daily(request)",
        "snippet": "def not_daily(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Daily frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 186,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.mismatched_freq#202",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.mismatched_freq(request)",
        "snippet": "def mismatched_freq(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Monthly or Annual frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 202,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box#214",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box(request)",
        "snippet": "def box(request):\n    \"\"\"\n    Several array-like containers that should have effectively identical\n    behavior with respect to arithmetic operations.\n    \"\"\"\n    return request.param",
        "begin_line": 214,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_df_fail#231",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_df_fail(request)",
        "snippet": "def box_df_fail(request):\n    \"\"\"\n    Fixture equivalent to `box` fixture but xfailing the DataFrame case.\n    \"\"\"\n    return request.param",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_with_array#239",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_with_array(request)",
        "snippet": "def box_with_array(request):\n    \"\"\"\n    Fixture to test behavior for Index, Series, DataFrame, and pandas Array\n    classes\n    \"\"\"\n    return request.param",
        "begin_line": 239,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.assert_invalid_addsub_type#11",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.assert_invalid_addsub_type(left, right, msg=None)",
        "snippet": "def assert_invalid_addsub_type(left, right, msg=None):\n    \"\"\"\n    Helper to assert that left and right can be neither added nor subtracted.\n\n    Parameters\n    ----------\n    left : object\n    right : object\n    msg : str or None, default None\n    \"\"\"\n    with pytest.raises(TypeError, match=msg):\n        left + right\n    with pytest.raises(TypeError, match=msg):\n        right + left\n    with pytest.raises(TypeError, match=msg):\n        left - right\n    with pytest.raises(TypeError, match=msg):\n        right - left",
        "begin_line": 11,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.get_upcast_box#31",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.get_upcast_box(box, vector)",
        "snippet": "def get_upcast_box(box, vector):\n    \"\"\"\n    Given two box-types, find the one that takes priority\n    \"\"\"\n    if box is DataFrame or isinstance(vector, DataFrame):\n        return DataFrame\n    if box is Series or isinstance(vector, Series):\n        return Series\n    if box is Index or isinstance(vector, Index):\n        return Index\n    return box",
        "begin_line": 31,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.common.assert_invalid_comparison#44",
        "src_path": "pandas/tests/arithmetic/common.py",
        "class_name": "pandas.tests.arithmetic.common",
        "signature": "pandas.tests.arithmetic.common.assert_invalid_comparison(left, right, box)",
        "snippet": "def assert_invalid_comparison(left, right, box):\n    \"\"\"\n    Assert that comparison operations with mismatched types behave correctly.\n\n    Parameters\n    ----------\n    left : np.ndarray, ExtensionArray, Index, or Series\n    right : object\n    box : {pd.DataFrame, pd.Series, pd.Index, tm.to_array}\n    \"\"\"\n    # Not for tznaive-tzaware comparison\n\n    # Note: not quite the same as how we do this for tm.box_expected\n    xbox = box if box is not Index else np.array\n\n    result = left == right\n    expected = xbox(np.zeros(result.shape, dtype=np.bool_))\n\n    tm.assert_equal(result, expected)\n\n    result = right == left\n    tm.assert_equal(result, expected)\n\n    result = left != right\n    tm.assert_equal(result, ~expected)\n\n    result = right != left\n    tm.assert_equal(result, ~expected)\n\n    msg = \"Invalid comparison between|Cannot compare type|not supported between\"\n    with pytest.raises(TypeError, match=msg):\n        left < right\n    with pytest.raises(TypeError, match=msg):\n        left <= right\n    with pytest.raises(TypeError, match=msg):\n        left > right\n    with pytest.raises(TypeError, match=msg):\n        left >= right\n    with pytest.raises(TypeError, match=msg):\n        right < left\n    with pytest.raises(TypeError, match=msg):\n        right <= left\n    with pytest.raises(TypeError, match=msg):\n        right > left\n    with pytest.raises(TypeError, match=msg):\n        right >= left",
        "begin_line": 44,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    }
]