[
    {
        "name": "test.helpers.with_config._make_dict#91",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#96",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#105",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 105,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#107",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#142",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#146",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#150",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 150,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#161",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_load_old_state#34",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_load_old_state(self)",
        "snippet": "    def test_load_old_state(self):\n        tasks = {}\n        active_workers = {'Worker1': 1e9, 'Worker2': time.time()}\n\n        with tempfile.NamedTemporaryFile(delete=True) as fn:\n            with open(fn.name, 'wb') as fobj:\n                state = (tasks, active_workers)\n                pickle.dump(state, fobj)\n\n            state = luigi.scheduler.SimpleTaskState(\n                state_path=fn.name)\n            state.load()\n\n            self.assertEqual(set(state.get_worker_ids()),\n                             set(['Worker1', 'Worker2']))",
        "begin_line": 34,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_load_broken_state#50",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_load_broken_state(self)",
        "snippet": "    def test_load_broken_state(self):\n        with tempfile.NamedTemporaryFile(delete=True) as fn:\n            with open(fn.name, 'w') as fobj:\n                print(\"b0rk\", file=fobj)\n\n            state = luigi.scheduler.SimpleTaskState(\n                state_path=fn.name)\n            state.load()  # bad if this crashes\n\n            self.assertEqual(list(state.get_worker_ids()), [])",
        "begin_line": 50,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_scheduler_with_config#62",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_scheduler_with_config(self)",
        "snippet": "    def test_scheduler_with_config(self):\n        cps = luigi.scheduler.CentralPlannerScheduler()\n        self.assertEqual(44, cps._config.disable_failures)\n        self.assertEqual(55, cps._config.worker_disconnect_delay)\n\n        # Override\n        cps = luigi.scheduler.CentralPlannerScheduler(disable_failures=66,\n                                                      worker_disconnect_delay=77)\n        self.assertEqual(66, cps._config.disable_failures)\n        self.assertEqual(77, cps._config.worker_disconnect_delay)",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_scheduler_with_resources#74",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_scheduler_with_resources(self)",
        "snippet": "    def test_scheduler_with_resources(self):\n        cps = luigi.scheduler.CentralPlannerScheduler()\n        self.assertEqual({'a': 100, 'b': 200}, cps._resources)",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_local_scheduler_task_history_status#80",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_local_scheduler_task_history_status(self)",
        "snippet": "    def test_local_scheduler_task_history_status(self):\n        ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()\n        self.assertEqual(False, ls._config.record_task_history)",
        "begin_line": 80,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_load_recovers_tasks_index#84",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_load_recovers_tasks_index(self)",
        "snippet": "    def test_load_recovers_tasks_index(self):\n        cps = luigi.scheduler.CentralPlannerScheduler()\n        cps.add_task(worker='A', task_id='1')\n        cps.add_task(worker='B', task_id='2')\n        cps.add_task(worker='C', task_id='3')\n        cps.add_task(worker='D', task_id='4')\n        self.assertEqual(cps.get_work(worker='A')['task_id'], '1')\n\n        with tempfile.NamedTemporaryFile(delete=True) as fn:\n            def reload_from_disk(cps):\n                cps._state._state_path = fn.name\n                cps.dump()\n                cps = luigi.scheduler.CentralPlannerScheduler()\n                cps._state._state_path = fn.name\n                cps.load()\n                return cps\n            del cps._state.get_worker('B').tasks  # If you upgrade from old server\n            cps = reload_from_disk(cps=cps)  # tihii, cps == continuation passing style ;)\n            self.assertEqual(cps.get_work(worker='B')['task_id'], '2')\n            self.assertEqual(cps.get_work(worker='C')['task_id'], '3')\n            cps = reload_from_disk(cps=cps)  # This time without deleting\n            self.assertEqual(cps.get_work(worker='D')['task_id'], '4')",
        "begin_line": 84,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.reload_from_disk#93",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.reload_from_disk(cps)",
        "snippet": "            def reload_from_disk(cps):\n                cps._state._state_path = fn.name\n                cps.dump()\n                cps = luigi.scheduler.CentralPlannerScheduler()\n                cps._state._state_path = fn.name\n                cps.load()\n                return cps",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.SchedulerTest.test_worker_prune_after_init#107",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.SchedulerTest",
        "signature": "test.scheduler_test.SchedulerTest.test_worker_prune_after_init(self)",
        "snippet": "    def test_worker_prune_after_init(self):\n        worker = luigi.scheduler.Worker(123)\n\n        class TmpCfg:\n            def __init__(self):\n                self.worker_disconnect_delay = 10\n\n        worker.prune(TmpCfg())",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.TmpCfg.test_worker_prune_after_init#107",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.TmpCfg",
        "signature": "test.scheduler_test.TmpCfg.test_worker_prune_after_init(self)",
        "snippet": "    def test_worker_prune_after_init(self):\n        worker = luigi.scheduler.Worker(123)\n\n        class TmpCfg:\n            def __init__(self):\n                self.worker_disconnect_delay = 10\n\n        worker.prune(TmpCfg())",
        "begin_line": 107,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.scheduler_test.TmpCfg.__init__#111",
        "src_path": "test/scheduler_test.py",
        "class_name": "test.scheduler_test.TmpCfg",
        "signature": "test.scheduler_test.TmpCfg.__init__(self)",
        "snippet": "            def __init__(self):\n                self.worker_disconnect_delay = 10",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    }
]