coverage run -m pytest test/scheduler_test.py::SchedulerTest::test_local_scheduler_task_history_status
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, requests-mock-1.8.0, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/scheduler_test.py F                                                 [100%]

=================================== FAILURES ===================================
____________ SchedulerTest.test_local_scheduler_task_history_status ____________

self = Engine(sqlite:////none/existing/path/hist.db)
fn = <bound method Pool.connect of <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>>
connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
>           return fn()

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>

    def connect(self):
        """Return a DBAPI connection from the pool.
    
        The connection is instrumented such that when its
        ``close()`` method is called, the connection will be returned to
        the pool.
    
        """
        if not self._use_threadlocal:
>           return _ConnectionFairy._checkout(self)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool.base._ConnectionFairy'>
pool = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>
threadconns = None, fairy = None

    @classmethod
    def _checkout(cls, pool, threadconns=None, fairy=None):
        if not fairy:
>           fairy = _ConnectionRecord.checkout(pool)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:773: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.pool.base._ConnectionRecord'>
pool = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>

    @classmethod
    def checkout(cls, pool):
>       rec = pool._do_get()

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:492: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>

    def _do_get(self):
>       return self._create_connection()

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/impl.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>

    def _create_connection(self):
        """Called by subclasses to create a new ConnectionRecord."""
    
>       return _ConnectionRecord(self)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.base._ConnectionRecord object at 0x7f93e557b910>
pool = <sqlalchemy.pool.impl.NullPool object at 0x7f93e5b6d910>, connect = True

    def __init__(self, pool, connect=True):
        self.__pool = pool
        if connect:
>           self.__connect(first_connect_check=True)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.pool.base._ConnectionRecord object at 0x7f93e557b910>
first_connect_check = True

    def __connect(self, first_connect_check=False):
        pool = self.__pool
    
        # ensure any existing connection is removed, so that if
        # creator fails, this attribute stays None
        self.connection = None
        try:
            self.starttime = time.time()
>           connection = pool._invoke_creator(self)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection_record = <sqlalchemy.pool.base._ConnectionRecord object at 0x7f93e557b910>

    def connect(connection_record=None):
        if dialect._has_events:
            for fn in dialect.dispatch.do_connect:
                connection = fn(
                    dialect, connection_record, cargs, cparams
                )
                if connection is not None:
                    return connection
>       return dialect.connect(*cargs, **cparams)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/strategies.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f93e5a9a700>
cargs = ('/none/existing/path/hist.db',), cparams = {}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)
E       sqlite3.OperationalError: unable to open database file

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/default.py:489: OperationalError

The above exception was the direct cause of the following exception:

self = <scheduler_test.SchedulerTest testMethod=test_local_scheduler_task_history_status>

    @with_config({'scheduler': {'record_task_history': 'True'},
                  'task_history': {'db_connection': 'sqlite:////none/existing/path/hist.db'}})
    def test_local_scheduler_task_history_status(self):
>       ls = luigi.interface._WorkerSchedulerFactory().create_local_scheduler()

test/scheduler_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
luigi/interface.py:134: in create_local_scheduler
    return scheduler.CentralPlannerScheduler(prune_on_get_work=True)
luigi/scheduler.py:534: in __init__
    self._task_history = db_task_history.DbTaskHistory()
luigi/db_task_history.py:84: in __init__
    Base.metadata.create_all(self.engine)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/sql/schema.py:4315: in create_all
    bind._run_visitor(
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2048: in _run_visitor
    with self._optional_conn_ctx_manager(connection) as conn:
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/contextlib.py:113: in __enter__
    return next(self.gen)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2040: in _optional_conn_ctx_manager
    with self._contextual_connect() as conn:
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2242: in _contextual_connect
    self._wrap_pool_connect(self.pool.connect, None),
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2279: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1547: in _handle_dbapi_exception_noconnection
    util.raise_from_cause(sqlalchemy_exception, exc_info)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/util/compat.py:398: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/util/compat.py:152: in reraise
    raise value.with_traceback(tb)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/base.py:2276: in _wrap_pool_connect
    return fn()
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:363: in connect
    return _ConnectionFairy._checkout(self)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:773: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:492: in checkout
    rec = pool._do_get()
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/impl.py:238: in _do_get
    return self._create_connection()
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:308: in _create_connection
    return _ConnectionRecord(self)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:437: in __init__
    self.__connect(first_connect_check=True)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/pool/base.py:652: in __connect
    connection = pool._invoke_creator(self)
/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/strategies.py:114: in connect
    return dialect.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f93e5a9a700>
cargs = ('/none/existing/path/hist.db',), cparams = {}

    def connect(self, *cargs, **cparams):
>       return self.dbapi.connect(*cargs, **cparams)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unable to open database file
E       (Background on this error at: http://sqlalche.me/e/e3q8)

/opt/conda/envs/ba888ac4c6c13d7c220d52840c5a0abb/lib/python3.8/site-packages/sqlalchemy/engine/default.py:489: OperationalError
----------------------------- Captured stdout call -----------------------------
INFO: Loaded []
------------------------------ Captured log call -------------------------------
INFO     luigi-interface:configuration.py:69 Loaded []
=========================== short test summary info ============================
FAILED test/scheduler_test.py::SchedulerTest::test_local_scheduler_task_history_status
============================== 1 failed in 0.91s ===============================
