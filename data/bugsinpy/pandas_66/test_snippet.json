[
    {
        "name": "pandas.tests.series.indexing.test_xs.test_xs_datetimelike_wrapping#6",
        "src_path": "pandas/tests/series/indexing/test_xs.py",
        "class_name": "pandas.tests.series.indexing.test_xs",
        "signature": "pandas.tests.series.indexing.test_xs.test_xs_datetimelike_wrapping()",
        "snippet": "def test_xs_datetimelike_wrapping():\n    # GH#31630 a case where we shouldn't wrap datetime64 in Timestamp\n    arr = pd.date_range(\"2016-01-01\", periods=3)._data._data\n\n    ser = pd.Series(arr, dtype=object)\n    for i in range(len(ser)):\n        ser.iloc[i] = arr[i]\n    assert ser.dtype == object\n    assert isinstance(ser[0], np.datetime64)\n\n    result = ser.xs(0)\n    assert isinstance(result, np.datetime64)",
        "begin_line": 6,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.string_series#7",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.string_series()",
        "snippet": "def string_series():\n    \"\"\"\n    Fixture for Series of floats with Index of unique strings\n    \"\"\"\n    s = tm.makeStringSeries()\n    s.name = \"series\"\n    return s",
        "begin_line": 7,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.series.conftest.object_series#17",
        "src_path": "pandas/tests/series/conftest.py",
        "class_name": "pandas.tests.series.conftest",
        "signature": "pandas.tests.series.conftest.object_series()",
        "snippet": "def object_series():\n    \"\"\"\n    Fixture for Series of dtype object with Index of unique strings\n    \"\"\"\n    s = tm.makeObjectSeries()\n    s.name = \"objects\"\n    return s",
        "begin_line": 17,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    }
]