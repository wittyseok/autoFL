[
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.load_fixture#32",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module#52",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed#71",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed#79",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed#73",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed#81",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.load_fixture#37",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module",
        "signature": "test.units.modules.network.junos.junos_module.load_fixture(name, content='xml')",
        "snippet": "def load_fixture(name, content='xml'):\n    path = os.path.join(fixture_path, name)\n    if path in fixture_data:\n        return fixture_data[path]\n\n    if content == 'str':\n        with open(path) as f:\n            data = f.read()\n        try:\n            data = json.load(path)\n        except Exception:\n            pass\n    else:\n        try:\n            data = parse(path).getroot()\n        except Exception:\n            pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 37,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module#61",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text'):\n\n        self.load_fixtures(commands, format, changed=changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.failed#74",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.changed#82",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures#90",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures(self, commands=None, format=None, changed=None)",
        "snippet": "    def load_fixtures(self, commands=None, format=None, changed=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.load_fixture#34",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module",
        "signature": "test.units.modules.network.opx.opx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module#54",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module(self, failed=False, changed=False, response=None, msg=None, db=None, commit_event=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       response=None, msg=None, db=None,\n                       commit_event=None):\n\n        self.load_fixtures(response)\n\n        if failed:\n            result = self.failed(msg)\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed, db)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.failed#69",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.failed(self, msg)",
        "snippet": "    def failed(self, msg):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        self.assertEqual(result['msg'], msg, result)\n        return result",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.changed#78",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.changed(self, changed=False, db=None)",
        "snippet": "    def changed(self, changed=False, db=None):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        print(\"res\" + str(result) + \"dv=\" + str(db) + \"ch=\" + str(changed))\n        self.assertEqual(result['changed'], changed, result)\n        if db:\n            self.assertEqual(result['db'], db, result)\n\n        return result",
        "begin_line": 78,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures(self, response=None)",
        "snippet": "    def load_fixtures(self, response=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.load_fixture#31",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module",
        "signature": "test.units.modules.network.nos.nos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module#51",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.failed#70",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.changed#78",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.load_fixture#32",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module",
        "signature": "test.units.modules.network.voss.voss_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module#52",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.failed#71",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.changed#79",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.plugins.loader_fixtures.import_fixture.test.__init__#7",
        "src_path": "test/units/plugins/loader_fixtures/import_fixture.py",
        "class_name": "test.units.plugins.loader_fixtures.import_fixture.test",
        "signature": "test.units.plugins.loader_fixtures.import_fixture.test.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        pass",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.apconos.apconos_module.load_fixture#32",
        "src_path": "test/units/modules/network/apconos/apconos_module.py",
        "class_name": "test.units.modules.network.apconos.apconos_module",
        "signature": "test.units.modules.network.apconos.apconos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.apconos.apconos_module.TestApconosModule.execute_module#52",
        "src_path": "test/units/modules/network/apconos/apconos_module.py",
        "class_name": "test.units.modules.network.apconos.apconos_module.TestApconosModule",
        "signature": "test.units.modules.network.apconos.apconos_module.TestApconosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.apconos.apconos_module.TestApconosModule.failed#71",
        "src_path": "test/units/modules/network/apconos/apconos_module.py",
        "class_name": "test.units.modules.network.apconos.apconos_module.TestApconosModule",
        "signature": "test.units.modules.network.apconos.apconos_module.TestApconosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.apconos.apconos_module.TestApconosModule.changed#79",
        "src_path": "test/units/modules/network/apconos/apconos_module.py",
        "class_name": "test.units.modules.network.apconos.apconos_module.TestApconosModule",
        "signature": "test.units.modules.network.apconos.apconos_module.TestApconosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.load_fixture#32",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module",
        "signature": "test.units.modules.network.eos.eos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module#52",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if transport == 'eapi':\n                cmd = []\n                value = []\n                for item in result['commands']:\n                    cmd.append(item['cmd'])\n                    if 'input' in item:\n                        value.append(item['input'])\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(cmd), cmd)\n                else:\n                    self.assertEqual(commands, cmd, cmd)\n                if inputs:\n                    self.assertEqual(inputs, value, value)\n            else:\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n                else:\n                    self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.failed#85",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.changed#93",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.load_fixture#32",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    if path not in fixture_data:\n        with open(path) as f:\n            data = json.load(f)\n        fixture_data[path] = data\n    return fixture_data[path]",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.__init__#42",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.__init__(self, method, params, code, body, headers=None)",
        "snippet": "    def __init__(self, method, params, code, body, headers=None):\n        if headers is None:\n            headers = {}\n\n        self.method = method\n        self.params = params\n\n        self.code = code\n        self.body = body\n        self.headers = dict(headers)",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.read#53",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.read(self)",
        "snippet": "    def read(self):\n        return self.body",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.mock_call#57",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None)",
        "snippet": "def mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None):\n    if len(calls) == 0:\n        raise ValueError('no call mock for method {0}({1})'.format(\n            url, data))\n\n    result = calls[0]\n    del calls[0]\n\n    request = json.loads(data)\n    if result.method != request['method']:\n        raise ValueError('expected method {0}({1}), got {2}({3})'.format(\n            result.method, result.params,\n            request['method'], request['params']))\n\n    for key, value in result.params.items():\n        if key not in request['params']:\n            raise ValueError('{0} not in parameters'.format(key))\n        if value != request['params'][key]:\n            raise ValueError('expected {0} to be {1}, got {2}'.format(\n                key, value, request['params'][key]))\n\n    return result",
        "begin_line": 57,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module#91",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module(self, failed=False, changed=False, **kwargs)",
        "snippet": "    def execute_module(self, failed=False, changed=False, **kwargs):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        for key, value in kwargs.items():\n            if key not in result:\n                self.fail(\"{0} not in result {1}\".format(key, result))\n            self.assertEqual(value, result[key])\n\n        return result",
        "begin_line": 91,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.failed#106",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 106,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json#107",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.changed#119",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 119,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json#120",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 120,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.load_fixture#31",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module",
        "signature": "test.units.modules.network.aireos.aireos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module#51",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed#70",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed#78",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.load_fixture#31",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module",
        "signature": "test.units.modules.network.slxos.slxos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module#51",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed#70",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed#78",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.failed#35",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.failed(result)",
        "snippet": "def failed(result):\n    ''' Test if task result yields failed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'failed' test expects a dictionary\")\n    return result.get('failed', False)",
        "begin_line": 35,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.success#42",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.success(result)",
        "snippet": "def success(result):\n    ''' Test if task result yields success '''\n    return not failed(result)",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.unreachable#47",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.unreachable(result)",
        "snippet": "def unreachable(result):\n    ''' Test if task result yields unreachable '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'unreachable' test expects a dictionary\")\n    return result.get('unreachable', False)",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.reachable#54",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.reachable(result)",
        "snippet": "def reachable(result):\n    ''' Test if task result yields reachable '''\n    return not unreachable(result)",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.changed#59",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.changed(result)",
        "snippet": "def changed(result):\n    ''' Test if task result yields changed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'changed' test expects a dictionary\")\n    if 'changed' not in result:\n        changed = False\n        if (\n            'results' in result and   # some modules return a 'results' key\n            isinstance(result['results'], MutableSequence) and\n            isinstance(result['results'][0], MutableMapping)\n        ):\n            for res in result['results']:\n                if res.get('changed', False):\n                    changed = True\n                    break\n    else:\n        changed = result.get('changed', False)\n    return changed",
        "begin_line": 59,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.skipped#79",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.skipped(result)",
        "snippet": "def skipped(result):\n    ''' Test if task result yields skipped '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'skipped' test expects a dictionary\")\n    return result.get('skipped', False)",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.started#86",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.started(result)",
        "snippet": "def started(result):\n    ''' Test if async task has started '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'started' test expects a dictionary\")\n    if 'started' in result:\n        # For async tasks, return status\n        # NOTE: The value of started is 0 or 1, not False or True :-/\n        return result.get('started', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if started\n        display.warning(\"The 'started' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 86,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.finished#100",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.finished(result)",
        "snippet": "def finished(result):\n    ''' Test if async task has finished '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'finished' test expects a dictionary\")\n    if 'finished' in result:\n        # For async tasks, return status\n        # NOTE: The value of finished is 0 or 1, not False or True :-/\n        return result.get('finished', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if finished\n        display.warning(\"The 'finished' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 100,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.regex#114",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search')",
        "snippet": "def regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):\n    ''' Expose `re` as a boolean filter using the `search` method by default.\n        This is likely only useful for `search` and `match` which already\n        have their own filters.\n    '''\n    # In addition to ensuring the correct type, to_text here will ensure\n    # _fail_with_undefined_error happens if the value is Undefined\n    value = to_text(value, errors='surrogate_or_strict')\n    flags = 0\n    if ignorecase:\n        flags |= re.I\n    if multiline:\n        flags |= re.M\n    _re = re.compile(pattern, flags=flags)\n    return bool(getattr(_re, match_type, 'search')(value))",
        "begin_line": 114,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.match#131",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.match(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def match(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.match` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'match')",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.search#136",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.search(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def search(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.search` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'search')",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.version_compare#141",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.version_compare(value, version, operator='eq', strict=False)",
        "snippet": "def version_compare(value, version, operator='eq', strict=False):\n    ''' Perform a version comparison on a value '''\n    op_map = {\n        '==': 'eq', '=': 'eq', 'eq': 'eq',\n        '<': 'lt', 'lt': 'lt',\n        '<=': 'le', 'le': 'le',\n        '>': 'gt', 'gt': 'gt',\n        '>=': 'ge', 'ge': 'ge',\n        '!=': 'ne', '<>': 'ne', 'ne': 'ne'\n    }\n\n    if strict:\n        Version = StrictVersion\n    else:\n        Version = LooseVersion\n\n    if operator in op_map:\n        operator = op_map[operator]\n    else:\n        raise errors.AnsibleFilterError('Invalid operator type')\n\n    try:\n        method = getattr(py_operator, operator)\n        return method(Version(str(value)), Version(str(version)))\n    except Exception as e:\n        raise errors.AnsibleFilterError('Version comparison: %s' % e)",
        "begin_line": 141,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.truthy#169",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.truthy(value, convert_bool=False)",
        "snippet": "def truthy(value, convert_bool=False):\n    \"\"\"Evaluate as value for truthiness using python ``bool``\n\n    Optionally, attempt to do a conversion to bool from boolean like values\n    such as ``\"false\"``, ``\"true\"``, ``\"yes\"``, ``\"no\"``, ``\"on\"``, ``\"off\"``, etc.\n\n    .. versionadded:: 2.10\n    \"\"\"\n    if convert_bool:\n        try:\n            value = boolean(value)\n        except TypeError:\n            pass\n\n    return bool(value)",
        "begin_line": 169,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.falsy#186",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.falsy(value, convert_bool=False)",
        "snippet": "def falsy(value, convert_bool=False):\n    \"\"\"Evaluate as value for falsiness using python ``bool``\n\n    Optionally, attempt to do a conversion to bool from boolean like values\n    such as ``\"false\"``, ``\"true\"``, ``\"yes\"``, ``\"no\"``, ``\"on\"``, ``\"off\"``, etc.\n\n    .. versionadded:: 2.10\n    \"\"\"\n    return not truthy(value, convert_bool=convert_bool)",
        "begin_line": 186,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.TestModule.tests#200",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core.TestModule",
        "signature": "lib.ansible.plugins.test.core.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # failure testing\n            'failed': failed,\n            'failure': failed,\n            'succeeded': success,\n            'success': success,\n            'successful': success,\n            'reachable': reachable,\n            'unreachable': unreachable,\n\n            # changed testing\n            'changed': changed,\n            'change': changed,\n\n            # skip testing\n            'skipped': skipped,\n            'skip': skipped,\n\n            # async testing\n            'finished': finished,\n            'started': started,\n\n            # regex\n            'match': match,\n            'search': search,\n            'regex': regex,\n\n            # version comparison\n            'version_compare': version_compare,\n            'version': version_compare,\n\n            # lists\n            'any': any,\n            'all': all,\n\n            # truthiness\n            'truthy': truthy,\n            'falsy': falsy,\n        }",
        "begin_line": 200,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.load_fixture#32",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module",
        "signature": "test.units.modules.network.ios.ios_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module#52",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.failed#71",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.changed#79",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.execute_module#28",
        "src_path": "test/units/modules/network/fortimanager/fortimanager_module.py",
        "class_name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule",
        "signature": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 28,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.failed#47",
        "src_path": "test/units/modules/network/fortimanager/fortimanager_module.py",
        "class_name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule",
        "signature": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 47,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.load_fixtures#63",
        "src_path": "test/units/modules/network/fortimanager/fortimanager_module.py",
        "class_name": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule",
        "signature": "test.units.modules.network.fortimanager.fortimanager_module.TestFortimanagerModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 63,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed#77",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest._mock_module#40",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest._mock_module(self)",
        "snippet": "    def _mock_module(self):\n        mock_module = Mock()\n        mock_module.params = {'gather_subset': self.gather_subset,\n                              'gather_timeout': 5,\n                              'filter': '*'}\n        mock_module.get_bin_path = Mock(return_value=None)\n        return mock_module",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect#50",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect(self, mock_gfc, mock_ps)",
        "snippet": "    def test_collect(self, mock_gfc, mock_ps):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect(module=module, collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace#59",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace(self, mock_gfc, mock_ps)",
        "snippet": "    def test_collect_with_namespace(self, mock_gfc, mock_ps):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect_with_namespace(module=module,\n                                                           collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module#52",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.changed#79",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures#87",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.load_fixture#32",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module",
        "signature": "test.units.modules.network.iosxr.iosxr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module#52",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed#71",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed#79",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures#87",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.load_fixture#31",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module",
        "signature": "test.units.modules.network.onyx.onyx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module#51",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if is_updates:\n                commands_res = result.get('updates')\n            else:\n                commands_res = result.get('commands')\n            if sort:\n                self.assertEqual(sorted(commands), sorted(commands_res), commands_res)\n            else:\n                self.assertEqual(commands, commands_res, commands_res)\n\n        return result",
        "begin_line": 51,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed#74",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed#82",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures(self, commands=None, transport='cli')",
        "snippet": "    def load_fixtures(self, commands=None, transport='cli'):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netscaler.netscaler_module.TestModule.failed#31",
        "src_path": "test/units/modules/network/netscaler/netscaler_module.py",
        "class_name": "test.units.modules.network.netscaler.netscaler_module.TestModule",
        "signature": "test.units.modules.network.netscaler.netscaler_module.TestModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 31,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netscaler.netscaler_module.TestModule.exited#39",
        "src_path": "test/units/modules/network/netscaler/netscaler_module.py",
        "class_name": "test.units.modules.network.netscaler.netscaler_module.TestModule",
        "signature": "test.units.modules.network.netscaler.netscaler_module.TestModule.exited(self, changed=False)",
        "snippet": "    def exited(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        return result",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cloudengine.ce_module.load_fixture#32",
        "src_path": "test/units/modules/network/cloudengine/ce_module.py",
        "class_name": "test.units.modules.network.cloudengine.ce_module",
        "signature": "test.units.modules.network.cloudengine.ce_module.load_fixture(module_name, name, device='')",
        "snippet": "def load_fixture(module_name, name, device=''):\n    path = os.path.join(fixture_path, module_name, device, name)\n    if not os.path.exists(path):\n        path = os.path.join(fixture_path, module_name, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.execute_module#54",
        "src_path": "test/units/modules/network/cloudengine/ce_module.py",
        "class_name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule",
        "signature": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.changed#81",
        "src_path": "test/units/modules/network/cloudengine/ce_module.py",
        "class_name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule",
        "signature": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.load_fixtures#89",
        "src_path": "test/units/modules/network/cloudengine/ce_module.py",
        "class_name": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule",
        "signature": "test.units.modules.network.cloudengine.ce_module.TestCloudEngineModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 89,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.load_fixture#20",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module",
        "signature": "test.units.modules.network.asa.asa_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 20,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module#40",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.changed#67",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issubset#24",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issubset(a, b)",
        "snippet": "def issubset(a, b):\n    return set(a) <= set(b)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issuperset#28",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issuperset(a, b)",
        "snippet": "def issuperset(a, b):\n    return set(a) >= set(b)",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.isnotanumber#32",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.isnotanumber(x)",
        "snippet": "def isnotanumber(x):\n    try:\n        return math.isnan(x)\n    except TypeError:\n        return False",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.contains#39",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.contains(seq, value)",
        "snippet": "def contains(seq, value):\n    '''Opposite of the ``in`` test, allowing use as a test in filters like ``selectattr``\n\n    .. versionadded:: 2.8\n    '''\n    return value in seq",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.TestModule.tests#50",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff.TestModule",
        "signature": "lib.ansible.plugins.test.mathstuff.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # set theory\n            'issubset': issubset,\n            'subset': issubset,\n            'issuperset': issuperset,\n            'superset': issuperset,\n            'contains': contains,\n\n            # numbers\n            'isnan': isnotanumber,\n            'nan': isnotanumber,\n        }",
        "begin_line": 50,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.load_fixture#32",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module",
        "signature": "test.units.modules.network.routeros.routeros_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module#52",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed#71",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed#79",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ov_client#11",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ov_client()",
        "snippet": "def mock_ov_client():\n    patcher_json_file = patch.object(OneViewClient, 'from_json_file')\n    client = patcher_json_file.start()\n    return client.return_value",
        "begin_line": 11,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module#18",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module()",
        "snippet": "def mock_ansible_module():\n    patcher_ansible = patch(ONEVIEW_MODULE_UTILS_PATH + '.AnsibleModule')\n    patcher_ansible = patcher_ansible.start()\n    ansible_module = Mock()\n    patcher_ansible.return_value = ansible_module\n    return ansible_module",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.fake_ansible_module#22",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.fake_ansible_module(request)",
        "snippet": "def fake_ansible_module(request):\n    \"\"\"Returns fake AnsibleModule with fake module params.\"\"\"\n    if hasattr(request, 'param'):\n        return FakeAnsibleModule(request.param)\n    else:\n        params = {\n            \"hostname\": \"somehost\",\n            \"username\": \"someuser\",\n            \"password\": \"somepwd\",\n            \"validate_certs\": True,\n        }\n\n        return FakeAnsibleModule(params)",
        "begin_line": 22,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.XenAPI#38",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.XenAPI()",
        "snippet": "def XenAPI():\n    \"\"\"Imports and returns fake XenAPI module.\"\"\"\n\n    # Import of fake XenAPI module is wrapped by fixture so that it does not\n    # affect other unit tests which could potentialy also use XenAPI module.\n\n    # First we use importlib.import_module() to import the module and assign\n    # it to a local symbol.\n    fake_xenapi = importlib.import_module('units.module_utils.xenserver.FakeXenAPI')\n\n    # Now we populate Python module cache with imported fake module using the\n    # original module name (XenAPI). That way, any 'import XenAPI' statement\n    # will just load already imported fake module from the cache.\n    sys.modules['XenAPI'] = fake_xenapi\n\n    return fake_xenapi",
        "begin_line": 38,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.xenserver#57",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.xenserver(XenAPI)",
        "snippet": "def xenserver(XenAPI):\n    \"\"\"Imports and returns xenserver module util.\"\"\"\n\n    # Since we are wrapping fake XenAPI module inside a fixture, all modules\n    # that depend on it have to be imported inside a test function. To make\n    # this easier to handle and remove some code repetition, we wrap the import\n    # of xenserver module util with a fixture.\n    from ansible.module_utils import xenserver\n\n    return xenserver",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.AnsibleExitJson.__init__#18",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures.AnsibleExitJson",
        "signature": "test.units.utils.kubevirt_fixtures.AnsibleExitJson.__init__(self, **kwargs)",
        "snippet": "    def __init__(self, **kwargs):\n        for k in kwargs:\n            setattr(self, k, kwargs[k])",
        "begin_line": 18,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.AnsibleExitJson.__getitem__#22",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures.AnsibleExitJson",
        "signature": "test.units.utils.kubevirt_fixtures.AnsibleExitJson.__getitem__(self, attr)",
        "snippet": "    def __getitem__(self, attr):\n        return getattr(self, attr)",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.AnsibleFailJson.__init__#29",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures.AnsibleFailJson",
        "signature": "test.units.utils.kubevirt_fixtures.AnsibleFailJson.__init__(self, **kwargs)",
        "snippet": "    def __init__(self, **kwargs):\n        for k in kwargs:\n            setattr(self, k, kwargs[k])",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.AnsibleFailJson.__getitem__#33",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures.AnsibleFailJson",
        "signature": "test.units.utils.kubevirt_fixtures.AnsibleFailJson.__getitem__(self, attr)",
        "snippet": "    def __getitem__(self, attr):\n        return getattr(self, attr)",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.exit_json#37",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures",
        "signature": "test.units.utils.kubevirt_fixtures.exit_json(*args, **kwargs)",
        "snippet": "def exit_json(*args, **kwargs):\n    kwargs['success'] = True\n    if 'changed' not in kwargs:\n        kwargs['changed'] = False\n    raise AnsibleExitJson(**kwargs)",
        "begin_line": 37,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.fail_json#44",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures",
        "signature": "test.units.utils.kubevirt_fixtures.fail_json(*args, **kwargs)",
        "snippet": "def fail_json(*args, **kwargs):\n    kwargs['success'] = False\n    raise AnsibleFailJson(**kwargs)",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.kubevirt_fixtures.base_fixture#50",
        "src_path": "test/units/utils/kubevirt_fixtures.py",
        "class_name": "test.units.utils.kubevirt_fixtures",
        "signature": "test.units.utils.kubevirt_fixtures.base_fixture(monkeypatch)",
        "snippet": "def base_fixture(monkeypatch):\n    monkeypatch.setattr(\n        KubernetesRawModule, \"exit_json\", exit_json)\n    monkeypatch.setattr(\n        KubernetesRawModule, \"fail_json\", fail_json)\n    # Create mock methods in Resource directly, otherwise dyn client\n    # tries binding those to corresponding methods in DynamicClient\n    # (with partial()), which is more problematic to intercept\n    openshift.dynamic.Resource.get = MagicMock()\n    openshift.dynamic.Resource.create = MagicMock()\n    openshift.dynamic.Resource.delete = MagicMock()\n    openshift.dynamic.Resource.patch = MagicMock()\n    openshift.dynamic.Resource.search = MagicMock()\n    openshift.dynamic.Resource.watch = MagicMock()\n    # Globally mock some methods, since all tests will use this\n    KubernetesRawModule.patch_resource = MagicMock()\n    KubernetesRawModule.patch_resource.return_value = ({}, None)\n    K8sAnsibleMixin.get_api_client = MagicMock()\n    K8sAnsibleMixin.get_api_client.return_value = None\n    K8sAnsibleMixin.find_resource = MagicMock()\n    KubeVirtRawModule.find_supported_resource = MagicMock()",
        "begin_line": 50,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.load_fixture#32",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module",
        "signature": "test.units.modules.network.ovs.ovs_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module#52",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module(self, failed=False, changed=False, commands=None, test_name=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       commands=None, test_name=None):\n\n        self.load_fixtures(test_name)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed#69",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed#77",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.__init__#29",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.__init__(self, text, encoding=None, errors=None, _bytes=None)",
        "snippet": "    def __init__(self, text, encoding=None, errors=None, _bytes=None):\n        super(TextVaultSecret, self).__init__()\n        self.text = text\n        self.encoding = encoding or 'utf-8'\n        self._bytes = _bytes\n        self.errors = errors or 'strict'",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.bytes#37",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.bytes(self)",
        "snippet": "    def bytes(self):\n        '''The text encoded with encoding, unless we specifically set _bytes.'''\n        return self._bytes or to_bytes(self.text, encoding=self.encoding, errors=self.errors)",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.load_fixture#19",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module",
        "signature": "test.units.modules.network.frr.frr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 19,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module#39",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 39,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.changed#66",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream#17",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream(self, obj, stream, dumper=None)",
        "snippet": "    def _dump_stream(self, obj, stream, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string stream.\"\"\"\n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_string#24",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_string(self, obj, dumper=None)",
        "snippet": "    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle#31",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle(self, obj)",
        "snippet": "    def _dump_load_cycle(self, obj):\n        # Each pass though a dump or load revs the 'generation'\n        # obj to yaml string\n        string_from_object_dump = self._dump_string(obj, dumper=AnsibleDumper)\n\n        # wrap a stream/file like StringIO around that yaml\n        stream_from_object_dump = io.StringIO(string_from_object_dump)\n        loader = self._loader(stream_from_object_dump)\n        # load the yaml stream to create a new instance of the object (gen 2)\n        obj_2 = loader.get_data()\n\n        # dump the gen 2 objects directory to strings\n        string_from_object_dump_2 = self._dump_string(obj_2,\n                                                      dumper=AnsibleDumper)\n\n        # The gen 1 and gen 2 yaml strings\n        self.assertEqual(string_from_object_dump, string_from_object_dump_2)\n        # the gen 1 (orig) and gen 2 py object\n        self.assertEqual(obj, obj_2)\n\n        # again! gen 3... load strings into py objects\n        stream_3 = io.StringIO(string_from_object_dump_2)\n        loader_3 = self._loader(stream_3)\n        obj_3 = loader_3.get_data()\n\n        string_from_object_dump_3 = self._dump_string(obj_3, dumper=AnsibleDumper)\n\n        self.assertEqual(obj, obj_3)\n        # should be transitive, but...\n        self.assertEqual(obj_2, obj_3)\n        self.assertEqual(string_from_object_dump, string_from_object_dump_3)",
        "begin_line": 31,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.swap_stdin_and_argv#34",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv",
        "signature": "test.units.mock.procenv.swap_stdin_and_argv(stdin_data='', argv_data=tuple())",
        "snippet": "def swap_stdin_and_argv(stdin_data='', argv_data=tuple()):\n    \"\"\"\n    context manager that temporarily masks the test runner's values for stdin and argv\n    \"\"\"\n    real_stdin = sys.stdin\n    real_argv = sys.argv\n\n    if PY3:\n        fake_stream = StringIO(stdin_data)\n        fake_stream.buffer = BytesIO(to_bytes(stdin_data))\n    else:\n        fake_stream = BytesIO(to_bytes(stdin_data))\n\n    try:\n        sys.stdin = fake_stream\n        sys.argv = argv_data\n\n        yield\n    finally:\n        sys.stdin = real_stdin\n        sys.argv = real_argv",
        "begin_line": 34,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.setUp#78",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.setUp(self, module_args=None)",
        "snippet": "    def setUp(self, module_args=None):\n        if module_args is None:\n            module_args = {'_ansible_remote_tmp': '/tmp', '_ansible_keep_remote_files': False}\n\n        args = json.dumps(dict(ANSIBLE_MODULE_ARGS=module_args))\n\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap = swap_stdin_and_argv(stdin_data=args)\n        self.stdin_swap.__enter__()",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.tearDown#88",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap.__exit__(None, None, None)",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__#10",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__(self, details)",
        "snippet": "    def __init__(self, details):\n        self.details = details",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__#13",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__(self)",
        "snippet": "    def __str__(self):\n        return str(self.details)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__#18",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__(self, uri, transport=None, encoding=None, verbose=0, allow_none=1, ignore_ssl=False)",
        "snippet": "    def __init__(self, uri, transport=None, encoding=None, verbose=0,\n                 allow_none=1, ignore_ssl=False):\n\n        self.transport = transport\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version#27",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version(self)",
        "snippet": "    def _get_api_version(self):\n        return FAKE_API_VERSION",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._login#30",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._login(self, method, params)",
        "snippet": "    def _login(self, method, params):\n        self._session = \"OpaqueRef:fake-xenapi-session-ref\"\n        self.last_login_method = method\n        self.last_login_params = params\n        self.API_version = self._get_api_version()",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout#36",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout(self)",
        "snippet": "    def _logout(self):\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request#42",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request(self, methodname, params)",
        "snippet": "    def xenapi_request(self, methodname, params):\n        if methodname.startswith('login'):\n            self._login(methodname, params)\n            return None\n        elif methodname == 'logout' or methodname == 'session.logout':\n            self._logout()\n            return None\n        else:\n            # Should be patched with mocker.patch().\n            return None",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__#53",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        if name == 'handle':\n            return self._session\n        elif name == 'xenapi':\n            # Should be patched with mocker.patch().\n            return None\n        elif name.startswith('login') or name.startswith('slave_local'):\n            return lambda *params: self._login(name, params)\n        elif name == 'logout':\n            return self._logout",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local#65",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local()",
        "snippet": "def xapi_local():\n    return Session(\"http://_var_lib_xcp_xapi/\")",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.files.TestModule.tests#29",
        "src_path": "lib/ansible/plugins/test/files.py",
        "class_name": "lib.ansible.plugins.test.files.TestModule",
        "signature": "lib.ansible.plugins.test.files.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # file testing\n            'is_dir': isdir,\n            'directory': isdir,\n            'is_file': isfile,\n            'file': isfile,\n            'is_link': islink,\n            'link': islink,\n            'exists': exists,\n            'link_exists': lexists,\n\n            # path testing\n            'is_abs': isabs,\n            'abs': isabs,\n            'is_same_file': samefile,\n            'same_file': samefile,\n            'is_mount': ismount,\n            'mount': ismount,\n        }",
        "begin_line": 29,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.load_fixture#16",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module",
        "signature": "test.units.modules.network.icx.icx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 16,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config#37",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config(self)",
        "snippet": "    def set_running_config(self):\n        self.ENV_ICX_USE_DIFF = self.get_running_config()",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config#40",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config(self, compare=None)",
        "snippet": "    def get_running_config(self, compare=None):\n        if compare is not None:\n            diff = compare\n        elif os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') is not None:\n            if os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') == 'False':\n                diff = False\n            else:\n                diff = True\n        else:\n            diff = True\n        return diff",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module#52",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']))\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        if fields is not None:\n            for key in fields:\n                if fields.get(key) is not None:\n                    self.assertEqual(fields.get(key), result.get(key))\n\n        return result",
        "begin_line": 52,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.failed#76",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.changed#84",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.load_fixture#34",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module",
        "signature": "test.units.modules.network.enos.enos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.setUp#62",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mock_sleep = patch('time.sleep')\n        self.mock_sleep.start()",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.tearDown#66",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.mock_sleep.stop()",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module#69",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 69,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.failed#91",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 91,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json#92",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.changed#104",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 104,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json#105",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.access_token#5",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest",
        "signature": "test.units.modules.cloud.linode_v4.conftest.access_token(monkeypatch)",
        "snippet": "def access_token(monkeypatch):\n    monkeypatch.setenv('LINODE_ACCESS_TOKEN', 'barfoo')",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.no_access_token_in_env#10",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest",
        "signature": "test.units.modules.cloud.linode_v4.conftest.no_access_token_in_env(monkeypatch)",
        "snippet": "def no_access_token_in_env(monkeypatch):\n    try:\n        monkeypatch.delenv('LINODE_ACCESS_TOKEN')\n    except KeyError:\n        pass",
        "begin_line": 10,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.default_args#18",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest",
        "signature": "test.units.modules.cloud.linode_v4.conftest.default_args()",
        "snippet": "def default_args():\n    return {'state': 'present', 'label': 'foo'}",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.Linode.mock_linode#23",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest.Linode",
        "signature": "test.units.modules.cloud.linode_v4.conftest.Linode.mock_linode()",
        "snippet": "def mock_linode():\n    class Linode():\n        def delete(self, *args, **kwargs):\n            pass\n\n        @property\n        def _raw_json(self):\n            return {\n                \"alerts\": {\n                    \"cpu\": 90,\n                    \"io\": 10000,\n                    \"network_in\": 10,\n                    \"network_out\": 10,\n                    \"transfer_quota\": 80\n                },\n                \"backups\": {\n                    \"enabled\": False,\n                    \"schedule\": {\n                        \"day\": None,\n                        \"window\": None,\n                    }\n                },\n                \"created\": \"2018-09-26T08:12:33\",\n                \"group\": \"Foobar Group\",\n                \"hypervisor\": \"kvm\",\n                \"id\": 10480444,\n                \"image\": \"linode/centos7\",\n                \"ipv4\": [\n                    \"130.132.285.233\"\n                ],\n                \"ipv6\": \"2a82:7e00::h03c:46ff:fe04:5cd2/64\",\n                \"label\": \"lin-foo\",\n                \"region\": \"eu-west\",\n                \"specs\": {\n                    \"disk\": 25600,\n                    \"memory\": 1024,\n                    \"transfer\": 1000,\n                    \"vcpus\": 1\n                },\n                \"status\": \"running\",\n                \"tags\": [],\n                \"type\": \"g6-nanode-1\",\n                \"updated\": \"2018-09-26T10:10:14\",\n                \"watchdog_enabled\": True\n            }\n    return Linode()",
        "begin_line": 23,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.Linode.delete#25",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest.Linode",
        "signature": "test.units.modules.cloud.linode_v4.conftest.Linode.delete(self, *args, **kwargs)",
        "snippet": "        def delete(self, *args, **kwargs):\n            pass",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.Linode._raw_json#29",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest.Linode",
        "signature": "test.units.modules.cloud.linode_v4.conftest.Linode._raw_json(self)",
        "snippet": "        def _raw_json(self):\n            return {\n                \"alerts\": {\n                    \"cpu\": 90,\n                    \"io\": 10000,\n                    \"network_in\": 10,\n                    \"network_out\": 10,\n                    \"transfer_quota\": 80\n                },\n                \"backups\": {\n                    \"enabled\": False,\n                    \"schedule\": {\n                        \"day\": None,\n                        \"window\": None,\n                    }\n                },\n                \"created\": \"2018-09-26T08:12:33\",\n                \"group\": \"Foobar Group\",\n                \"hypervisor\": \"kvm\",\n                \"id\": 10480444,\n                \"image\": \"linode/centos7\",\n                \"ipv4\": [\n                    \"130.132.285.233\"\n                ],\n                \"ipv6\": \"2a82:7e00::h03c:46ff:fe04:5cd2/64\",\n                \"label\": \"lin-foo\",\n                \"region\": \"eu-west\",\n                \"specs\": {\n                    \"disk\": 25600,\n                    \"memory\": 1024,\n                    \"transfer\": 1000,\n                    \"vcpus\": 1\n                },\n                \"status\": \"running\",\n                \"tags\": [],\n                \"type\": \"g6-nanode-1\",\n                \"updated\": \"2018-09-26T10:10:14\",\n                \"watchdog_enabled\": True\n            }",
        "begin_line": 29,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.linode_v4.conftest.mock_linode#23",
        "src_path": "test/units/modules/cloud/linode_v4/conftest.py",
        "class_name": "test.units.modules.cloud.linode_v4.conftest",
        "signature": "test.units.modules.cloud.linode_v4.conftest.mock_linode()",
        "snippet": "def mock_linode():\n    class Linode():\n        def delete(self, *args, **kwargs):\n            pass\n\n        @property\n        def _raw_json(self):\n            return {\n                \"alerts\": {\n                    \"cpu\": 90,\n                    \"io\": 10000,\n                    \"network_in\": 10,\n                    \"network_out\": 10,\n                    \"transfer_quota\": 80\n                },\n                \"backups\": {\n                    \"enabled\": False,\n                    \"schedule\": {\n                        \"day\": None,\n                        \"window\": None,\n                    }\n                },\n                \"created\": \"2018-09-26T08:12:33\",\n                \"group\": \"Foobar Group\",\n                \"hypervisor\": \"kvm\",\n                \"id\": 10480444,\n                \"image\": \"linode/centos7\",\n                \"ipv4\": [\n                    \"130.132.285.233\"\n                ],\n                \"ipv6\": \"2a82:7e00::h03c:46ff:fe04:5cd2/64\",\n                \"label\": \"lin-foo\",\n                \"region\": \"eu-west\",\n                \"specs\": {\n                    \"disk\": 25600,\n                    \"memory\": 1024,\n                    \"transfer\": 1000,\n                    \"vcpus\": 1\n                },\n                \"status\": \"running\",\n                \"tags\": [],\n                \"type\": \"g6-nanode-1\",\n                \"updated\": \"2018-09-26T10:10:14\",\n                \"watchdog_enabled\": True\n            }\n    return Linode()",
        "begin_line": 23,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module",
        "signature": "test.units.modules.network.edgeos.edgeos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed#69",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed#77",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.load_fixture#35",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module",
        "signature": "test.units.modules.network.cnos.cnos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 35,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp#62",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestCnosModule, self).setUp()\n\n        self.test_log = tempfile.mkstemp(prefix='ansible-test-cnos-module-', suffix='.log')[1]\n\n        self.mock_sleep = patch('time.sleep')\n        self.mock_sleep.start()",
        "begin_line": 62,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown#70",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(TestCnosModule, self).tearDown()\n\n        self.mock_sleep.stop()\n        os.remove(self.test_log)",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module#76",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 76,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed#98",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 98,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json#99",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed#111",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 111,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json#112",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__#17",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__(self, name, isActive=True)",
        "snippet": "    def __init__(self, name, isActive=True):\n        self._name = name\n        self._isActive = isActive",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name#21",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name(self)",
        "snippet": "    def name(self):\n        return self._name",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive#24",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive(self)",
        "snippet": "    def isActive(self):\n        return self._isActive",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__#29",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__(self)",
        "snippet": "    def __init__(self):\n        self._network = [\n            DummyNetwork(\"inactive_net\", isActive=False),\n            DummyNetwork(\"active_net\", isActive=True)]",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName#37",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName(self, name)",
        "snippet": "    def networkLookupByName(self, name):\n        for i in self._network:\n            if i.name() == name:\n                return i",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open#50",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open(cls, uri)",
        "snippet": "    def open(cls, uri):\n        return DummyLibvirtConn()",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt#62",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt(monkeypatch)",
        "snippet": "def dummy_libvirt(monkeypatch):\n    monkeypatch.setattr(virt_net, 'libvirt', DummyLibvirt)\n    return DummyLibvirt",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj#68",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj(dummy_libvirt)",
        "snippet": "def virt_net_obj(dummy_libvirt):\n    return virt_net.VirtNetwork('qemu:///nowhere', mock.MagicMock())",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.load_fixture#33",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module",
        "signature": "test.units.modules.network.ingate.ingate_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 33,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module#53",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module(self, failed=False, changed=False, fixture=None, command=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, fixture=None,\n                       command=None):\n\n        self.load_fixtures(fixture, command, changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 53,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed#75",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.load_fixture#32",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module",
        "signature": "test.units.modules.network.aruba.aruba_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module#52",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed#71",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed#79",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.load_fixture#32",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module",
        "signature": "test.units.modules.network.ironware.ironware_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module#52",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed#71",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed#79",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__#8",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__#22",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__(self, params=None, check_mode=False)",
        "snippet": "    def __init__(self, params=None, check_mode=False):\n        self.params = params\n        self.check_mode = check_mode",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json#29",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json(self, *args, **kwargs)",
        "snippet": "    def fail_json(self, *args, **kwargs):\n        raise FailJsonException(*args, **kwargs)",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module#58",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, state=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False, state=None):\n\n        self.load_fixtures(commands, state)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 58,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed#93",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 93,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json#94",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule.__init__#19",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule",
        "signature": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule.__init__(self)",
        "snippet": "    def __init__(self):\n        self.check_mode = False",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule.fail_json#22",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule",
        "signature": "test.units.modules.source_control.gitlab.gitlab.FakeAnsibleModule.fail_json(self, **args)",
        "snippet": "    def fail_json(self, **args):\n        pass",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.GitlabModuleTestCase.setUp#30",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab.GitlabModuleTestCase",
        "signature": "test.units.modules.source_control.gitlab.gitlab.GitlabModuleTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        unitest_python_version_check_requirement(self)\n\n        self.mock_module = FakeAnsibleModule()\n\n        self.gitlab_instance = Gitlab(\"http://localhost\", private_token=\"private_token\", api_version=4)",
        "begin_line": 30,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.python_version_match_requirement#43",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.python_version_match_requirement()",
        "snippet": "def python_version_match_requirement():\n    return sys.version_info >= GITLAB_MINIMUM_PYTHON_VERSION",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.unitest_python_version_check_requirement#48",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.unitest_python_version_check_requirement(unittest_testcase)",
        "snippet": "def unitest_python_version_check_requirement(unittest_testcase):\n    if not python_version_match_requirement():\n        unittest_testcase.skipTest(\"Python %s+ is needed for python-gitlab\" % \",\".join(map(str, GITLAB_MINIMUM_PYTHON_VERSION)))",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_find_user#59",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_find_user(url, request)",
        "snippet": "def resp_find_user(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('[{\"id\": 1, \"username\": \"john_smith\", \"name\": \"John Smith\", \"state\": \"active\",'\n               '\"avatar_url\": \"http://localhost:3000/uploads/user/avatar/1/cd8.jpeg\",'\n               '\"web_url\": \"http://localhost:3000/john_smith\"}, {\"id\": 2,'\n               '\"username\": \"jack_smith\", \"name\": \"Jack Smith\", \"state\": \"blocked\",'\n               '\"avatar_url\": \"http://gravatar.com/../e32131cd8.jpeg\",'\n               '\"web_url\": \"http://localhost:3000/jack_smith\"}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 59,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_user#72",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_user(url, request)",
        "snippet": "def resp_create_user(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"username\": \"john_smith\", \"name\": \"John Smith\", \"state\": \"active\",'\n               '\"avatar_url\": \"http://localhost:3000/uploads/user/avatar/1/cd8.jpeg\",'\n               '\"web_url\": \"http://localhost:3000/john_smith\",\"created_at\": \"2012-05-23T08:00:58Z\",'\n               '\"bio\": null, \"location\": null, \"public_email\": \"john@example.com\", \"skype\": \"\",'\n               '\"linkedin\": \"\", \"twitter\": \"\", \"website_url\": \"\", \"organization\": \"\"}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_user#84",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_user(url, request)",
        "snippet": "def resp_get_user(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"username\": \"john_smith\", \"name\": \"John Smith\",'\n               '\"state\": \"active\",'\n               '\"avatar_url\": \"http://localhost:3000/uploads/user/avatar/1/cd8.jpeg\",'\n               '\"web_url\": \"http://localhost:3000/john_smith\",'\n               '\"created_at\": \"2012-05-23T08:00:58Z\", \"bio\": null, \"location\": null,'\n               '\"public_email\": \"john@example.com\", \"skype\": \"\", \"linkedin\": \"\",'\n               '\"twitter\": \"\", \"website_url\": \"\", \"organization\": \"\", \"is_admin\": false}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 84,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_delete_user#106",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_delete_user(url, request)",
        "snippet": "def resp_delete_user(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{}')\n    content = content.encode(\"utf-8\")\n    return response(204, content, headers, None, 5, request)",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_user_keys#127",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_user_keys(url, request)",
        "snippet": "def resp_get_user_keys(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('[{\"id\": 1, \"title\": \"Public key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596'\n               'k6YjzGGphH2TUxwKzxcKDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQa'\n               'SeP3SAwGmQKUFHCddNaP0L+hM7zhFNzjFvpaMgJw0=\",'\n               '\"created_at\": \"2014-08-01T14:47:39.080Z\"},{\"id\": 3,'\n               '\"title\": \"Another Public key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596'\n               'k6YjzGGphH2TUxwKzxcKDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQaS'\n               'eP3SAwGmQKUFHCddNaP0L+hM7zhFNzjFvpaMgJw0=\",'\n               '\"created_at\": \"2014-08-01T14:47:39.080Z\"}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 127,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_user_keys#144",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_user_keys(url, request)",
        "snippet": "def resp_create_user_keys(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"title\": \"Private key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDA1YotVDm2mAyk2tPt4E7AHm01sS6JZmcUdRuSuA5z'\n               'szUJzYPPUSRAX3BCgTqLqYx//UuVncK7YqLVSbbwjKR2Ez5lISgCnVfLVEXzwhv+xawxKWmI7hJ5S0tOv6MJ+Ixy'\n               'Ta4xcKwJTwB86z22n9fVOQeJTR2dSOH1WJrf0PvRk+KVNY2jTiGHTi9AIjLnyD/jWRpOgtdfkLRc8EzAWrWlgNmH'\n               '2WOKBw6za0az6XoG75obUdFVdW3qcD0xc809OHLi7FDf+E7U4wiZJCFuUizMeXyuK/SkaE1aee4Qp5R4dxTR4TP9'\n               'M1XAYkf+kF0W9srZ+mhF069XD/zhUPJsvwEF\",'\n               '\"created_at\": \"2014-08-01T14:47:39.080Z\"}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 144,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_group#181",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_group(url, request)",
        "snippet": "def resp_get_group(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"name\": \"Foobar Group\", \"path\": \"foo-bar\",'\n               '\"description\": \"An interesting group\", \"visibility\": \"public\",'\n               '\"lfs_enabled\": true, \"avatar_url\": \"http://localhost:3000/uploads/group/avatar/1/foo.jpg\",'\n               '\"web_url\": \"http://localhost:3000/groups/foo-bar\", \"request_access_enabled\": false,'\n               '\"full_name\": \"Foobar Group\", \"full_path\": \"foo-bar\",'\n               '\"file_template_project_id\": 1, \"parent_id\": null, \"projects\": [{\"id\": 1,\"description\": null, \"default_branch\": \"master\",'\n               '\"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",'\n               '\"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",'\n               '\"web_url\": \"http://example.com/diaspora/diaspora-client\",'\n               '\"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",'\n               '\"tag_list\": [\"example\",\"disapora client\"],\"name\": \"Diaspora Client\",'\n               '\"name_with_namespace\": \"Diaspora / Diaspora Client\",\"path\": \"diaspora-client\",'\n               '\"path_with_namespace\": \"diaspora/diaspora-client\",\"created_at\": \"2013-09-30T13:46:02Z\",'\n               '\"last_activity_at\": \"2013-09-30T13:46:02Z\",\"forks_count\": 0,'\n               '\"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",'\n               '\"star_count\": 0}]}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 181,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_missing_group#204",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_missing_group(url, request)",
        "snippet": "def resp_get_missing_group(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{}')\n    content = content.encode(\"utf-8\")\n    return response(404, content, headers, None, 5, request)",
        "begin_line": 204,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_group#212",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_group(url, request)",
        "snippet": "def resp_create_group(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"name\": \"Foobar Group\", \"path\": \"foo-bar\",'\n               '\"description\": \"An interesting group\", \"visibility\": \"public\",'\n               '\"lfs_enabled\": true, \"avatar_url\": \"http://localhost:3000/uploads/group/avatar/1/foo.jpg\",'\n               '\"web_url\": \"http://localhost:3000/groups/foo-bar\", \"request_access_enabled\": false,'\n               '\"full_name\": \"Foobar Group\", \"full_path\": \"foo-bar\",'\n               '\"file_template_project_id\": 1, \"parent_id\": null}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 212,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_subgroup#225",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_subgroup(url, request)",
        "snippet": "def resp_create_subgroup(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 2, \"name\": \"BarFoo Group\", \"path\": \"bar-foor\",'\n               '\"description\": \"An interesting group\", \"visibility\": \"public\",'\n               '\"lfs_enabled\": true, \"avatar_url\": \"http://localhost:3000/uploads/group/avatar/2/bar.jpg\",'\n               '\"web_url\": \"http://localhost:3000/groups/foo-bar/bar-foo\", \"request_access_enabled\": false,'\n               '\"full_name\": \"BarFoo Group\", \"full_path\": \"foo-bar/bar-foo\",'\n               '\"file_template_project_id\": 1, \"parent_id\": 1}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 225,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_member#251",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_member(url, request)",
        "snippet": "def resp_get_member(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"username\": \"raymond_smith\", \"name\": \"Raymond Smith\", \"state\": \"active\",'\n               '\"avatar_url\": \"https://www.gravatar.com/avatar/c2525a7f58ae3776070e44c106c48e15?s=80&d=identicon\",'\n               '\"web_url\": \"http://192.168.1.8:3000/root\", \"expires_at\": \"2012-10-22T14:13:35Z\", \"access_level\": 30}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_update_member#287",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_update_member(url, request)",
        "snippet": "def resp_update_member(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1, \"username\": \"raymond_smith\", \"name\": \"Raymond Smith\",'\n               '\"state\": \"active\",'\n               '\"avatar_url\": \"https://www.gravatar.com/avatar/c2525a7f58ae3776070e44c106c48e15?s=80&d=identicon\",'\n               '\"web_url\": \"http://192.168.1.8:3000/root\", \"expires_at\": \"2012-10-22T14:13:35Z\",'\n               '\"access_level\": 10}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 287,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_find_project_deploy_key#304",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_find_project_deploy_key(url, request)",
        "snippet": "def resp_find_project_deploy_key(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('[{\"id\": 1,\"title\": \"Public key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596k6YjzGGphH2TUxwKzxc'\n               'KDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQaSeP3SAwGmQKUFHCddNaP0L+hM7zhFNzjFvpaMgJw0=\",'\n               '\"created_at\": \"2013-10-02T10:12:29Z\"},{\"id\": 3,\"title\": \"Another Public key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596k6YjzGGphH2TUxwKzxc'\n               'KDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQaSeP3SAwGmQKUFHCddNaP0L+hM7zhFNzjFvpaMgJw0=\",'\n               '\"created_at\": \"2013-10-02T11:12:29Z\"}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 304,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_project_deploy_key#329",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_project_deploy_key(url, request)",
        "snippet": "def resp_create_project_deploy_key(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1,\"title\": \"Public key\",'\n               '\"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt4596k6YjzGGphH2TUxwKzxc'\n               'KDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQaSeP3SAwGmQKUFHCddNaP0L+hM7zhFNzjFvpaMgJw0=\",'\n               '\"created_at\": \"2013-10-02T10:12:29Z\"}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 329,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project_deploy_key#340",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project_deploy_key(url, request)",
        "snippet": "def resp_delete_project_deploy_key(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{}')\n    content = content.encode(\"utf-8\")\n    return response(204, content, headers, None, 5, request)",
        "begin_line": 340,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_project#371",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_project(url, request)",
        "snippet": "def resp_get_project(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1,\"description\": null, \"default_branch\": \"master\",'\n               '\"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",'\n               '\"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",'\n               '\"web_url\": \"http://example.com/diaspora/diaspora-client\",'\n               '\"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",'\n               '\"tag_list\": [\"example\",\"disapora client\"],\"name\": \"Diaspora Client\",'\n               '\"name_with_namespace\": \"Diaspora / Diaspora Client\",\"path\": \"diaspora-client\",'\n               '\"path_with_namespace\": \"diaspora/diaspora-client\",\"created_at\": \"2013-09-30T13:46:02Z\",'\n               '\"last_activity_at\": \"2013-09-30T13:46:02Z\",\"forks_count\": 0,'\n               '\"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",'\n               '\"star_count\": 0}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 371,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_get_project_by_name#389",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_get_project_by_name(url, request)",
        "snippet": "def resp_get_project_by_name(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1,\"description\": null, \"default_branch\": \"master\",'\n               '\"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",'\n               '\"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",'\n               '\"web_url\": \"http://example.com/diaspora/diaspora-client\",'\n               '\"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",'\n               '\"tag_list\": [\"example\",\"disapora client\"],\"name\": \"Diaspora Client\",'\n               '\"name_with_namespace\": \"Diaspora / Diaspora Client\",\"path\": \"diaspora-client\",'\n               '\"path_with_namespace\": \"diaspora/diaspora-client\",\"created_at\": \"2013-09-30T13:46:02Z\",'\n               '\"last_activity_at\": \"2013-09-30T13:46:02Z\",\"forks_count\": 0,'\n               '\"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",'\n               '\"star_count\": 0}')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 389,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_find_group_project#407",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_find_group_project(url, request)",
        "snippet": "def resp_find_group_project(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('[{\"id\": 1,\"description\": null, \"default_branch\": \"master\",'\n               '\"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",'\n               '\"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",'\n               '\"web_url\": \"http://example.com/diaspora/diaspora-client\",'\n               '\"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",'\n               '\"tag_list\": [\"example\",\"disapora client\"],\"name\": \"Diaspora Client\",'\n               '\"name_with_namespace\": \"Diaspora / Diaspora Client\",\"path\": \"diaspora-client\",'\n               '\"path_with_namespace\": \"diaspora/diaspora-client\",\"created_at\": \"2013-09-30T13:46:02Z\",'\n               '\"last_activity_at\": \"2013-09-30T13:46:02Z\",\"forks_count\": 0,'\n               '\"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",'\n               '\"star_count\": 0}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 407,
        "end_line": 421,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_project#443",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_project(url, request)",
        "snippet": "def resp_create_project(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1,\"description\": null, \"default_branch\": \"master\",'\n               '\"ssh_url_to_repo\": \"git@example.com:diaspora/diaspora-client.git\",'\n               '\"http_url_to_repo\": \"http://example.com/diaspora/diaspora-client.git\",'\n               '\"web_url\": \"http://example.com/diaspora/diaspora-client\",'\n               '\"readme_url\": \"http://example.com/diaspora/diaspora-client/blob/master/README.md\",'\n               '\"tag_list\": [\"example\",\"disapora client\"],\"name\": \"Diaspora Client\",'\n               '\"name_with_namespace\": \"Diaspora / Diaspora Client\",\"path\": \"diaspora-client\",'\n               '\"path_with_namespace\": \"diaspora/diaspora-client\",\"created_at\": \"2013-09-30T13:46:02Z\",'\n               '\"last_activity_at\": \"2013-09-30T13:46:02Z\",\"forks_count\": 0,'\n               '\"avatar_url\": \"http://example.com/uploads/project/avatar/4/uploads/avatar.png\",'\n               '\"star_count\": 0}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 443,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project#461",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project(url, request)",
        "snippet": "def resp_delete_project(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{}')\n    content = content.encode(\"utf-8\")\n\n    return response(204, content, headers, None, 5, request)",
        "begin_line": 461,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_find_project_hook#475",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_find_project_hook(url, request)",
        "snippet": "def resp_find_project_hook(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('[{\"id\": 1,\"url\": \"http://example.com/hook\",\"project_id\": 3,'\n               '\"push_events\": true,\"push_events_branch_filter\": \"\",\"issues_events\": true,'\n               '\"confidential_issues_events\": true,\"merge_requests_events\": true,'\n               '\"tag_push_events\": true,\"note_events\": true,\"job_events\": true,'\n               '\"pipeline_events\": true,\"wiki_page_events\": true,\"enable_ssl_verification\": true,'\n               '\"created_at\": \"2012-10-12T17:04:47Z\"}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 475,
        "end_line": 484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_project_hook#501",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_project_hook(url, request)",
        "snippet": "def resp_create_project_hook(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"id\": 1,\"url\": \"http://example.com/hook\",\"project_id\": 3,'\n               '\"push_events\": true,\"push_events_branch_filter\": \"\",\"issues_events\": true,'\n               '\"confidential_issues_events\": true,\"merge_requests_events\": true,'\n               '\"tag_push_events\": true,\"note_events\": true,\"job_events\": true,'\n               '\"pipeline_events\": true,\"wiki_page_events\": true,\"enable_ssl_verification\": true,'\n               '\"created_at\": \"2012-10-12T17:04:47Z\"}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 501,
        "end_line": 510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project_hook#514",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_delete_project_hook(url, request)",
        "snippet": "def resp_delete_project_hook(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{}')\n    content = content.encode(\"utf-8\")\n    return response(204, content, headers, None, 5, request)",
        "begin_line": 514,
        "end_line": 518,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_find_runners_list#539",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_find_runners_list(url, request)",
        "snippet": "def resp_find_runners_list(url, request):\n    headers = {'content-type': 'application/json',\n               \"X-Page\": 1,\n               \"X-Next-Page\": 2,\n               \"X-Per-Page\": 1,\n               \"X-Total-Pages\": 1,\n               \"X-Total\": 2}\n    content = ('[{\"active\": true,\"description\": \"test-1-20150125\",\"id\": 1,'\n               '\"is_shared\": false,\"ip_address\": \"127.0.0.1\",\"name\": null,'\n               '\"online\": true,\"status\": \"online\"},{\"active\": true,'\n               '\"description\": \"test-2-20150125\",\"id\": 2,\"ip_address\": \"127.0.0.1\",'\n               '\"is_shared\": false,\"name\": null,\"online\": false,\"status\": \"offline\"}]')\n    content = content.encode(\"utf-8\")\n    return response(200, content, headers, None, 5, request)",
        "begin_line": 539,
        "end_line": 552,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.source_control.gitlab.gitlab.resp_create_runner#566",
        "src_path": "test/units/modules/source_control/gitlab/gitlab.py",
        "class_name": "test.units.modules.source_control.gitlab.gitlab",
        "signature": "test.units.modules.source_control.gitlab.gitlab.resp_create_runner(url, request)",
        "snippet": "def resp_create_runner(url, request):\n    headers = {'content-type': 'application/json'}\n    content = ('{\"active\": true,\"description\": \"test-1-20150125\",\"id\": 1,'\n               '\"is_shared\": false,\"ip_address\": \"127.0.0.1\",\"name\": null,'\n               '\"online\": true,\"status\": \"online\"}')\n    content = content.encode(\"utf-8\")\n    return response(201, content, headers, None, 5, request)",
        "begin_line": 566,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.set_module_args#9",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.set_module_args(args)",
        "snippet": "def set_module_args(args):\n    if '_ansible_remote_tmp' not in args:\n        args['_ansible_remote_tmp'] = '/tmp'\n    if '_ansible_keep_remote_files' not in args:\n        args['_ansible_keep_remote_files'] = False\n\n    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})\n    basic._ANSIBLE_ARGS = to_bytes(args)",
        "begin_line": 9,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.exit_json#27",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.exit_json(*args, **kwargs)",
        "snippet": "def exit_json(*args, **kwargs):\n    if 'changed' not in kwargs:\n        kwargs['changed'] = False\n    raise AnsibleExitJson(kwargs)",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.fail_json#33",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.fail_json(*args, **kwargs)",
        "snippet": "def fail_json(*args, **kwargs):\n    kwargs['failed'] = True\n    raise AnsibleFailJson(kwargs)",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.ModuleTestCase.setUp#40",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils.ModuleTestCase",
        "signature": "test.units.modules.utils.ModuleTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mock_module = patch.multiple(basic.AnsibleModule, exit_json=exit_json, fail_json=fail_json)\n        self.mock_module.start()\n        self.mock_sleep = patch('time.sleep')\n        self.mock_sleep.start()\n        set_module_args({})\n        self.addCleanup(self.mock_module.stop)\n        self.addCleanup(self.mock_sleep.stop)",
        "begin_line": 40,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.load_fixture#31",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module",
        "signature": "test.units.modules.network.exos.exos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module#51",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.failed#70",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.changed#78",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.set_module_args#29",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.set_module_args(args, ignore_provider=None)",
        "snippet": "def set_module_args(args, ignore_provider=None):\n    if 'provider' not in args and not ignore_provider:\n        args['provider'] = {'transport': args.get('transport') or 'cli'}\n\n    return _set_module_args(args)",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.load_fixture#40",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.load_fixture(module_name, name, device='')",
        "snippet": "def load_fixture(module_name, name, device=''):\n    path = os.path.join(fixture_path, module_name, device, name)\n    if not os.path.exists(path):\n        path = os.path.join(fixture_path, module_name, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices#62",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        module_name = self.module.__name__.rsplit('.', 1)[1]\n        local_fixture_path = os.path.join(fixture_path, module_name)\n\n        models = []\n        for path in os.listdir(local_fixture_path):\n            path = os.path.join(local_fixture_path, path)\n            if os.path.isdir(path):\n                models.append(os.path.basename(path))\n        if not models:\n            models = ['']\n\n        retvals = {}\n        for model in models:\n            retvals[model] = self.execute_module(failed, changed, commands, sort, device=model)\n\n        return retvals",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module#80",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, device='')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, device=''):\n\n        self.load_fixtures(commands, device=device)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed#99",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed#107",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.load_fixture#32",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module",
        "signature": "test.units.modules.network.vyos.vyos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module#52",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed#70",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed#78",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed#73",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed#81",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.__init__#31",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.__init__(self, file_mapping=None)",
        "snippet": "    def __init__(self, file_mapping=None):\n        file_mapping = {} if file_mapping is None else file_mapping\n        assert type(file_mapping) == dict\n\n        super(DictDataLoader, self).__init__()\n\n        self._file_mapping = file_mapping\n        self._build_known_directories()\n        self._vault_secrets = None",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.load_from_file#41",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.load_from_file(self, path, cache=True, unsafe=False)",
        "snippet": "    def load_from_file(self, path, cache=True, unsafe=False):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return self.load(self._file_mapping[path], path)\n        return None",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._get_file_contents#49",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._get_file_contents(self, path)",
        "snippet": "    def _get_file_contents(self, path):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return (to_bytes(self._file_mapping[path]), False)\n        else:\n            raise AnsibleParserError(\"file not found: %s\" % path)",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.path_exists#56",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.path_exists(self, path)",
        "snippet": "    def path_exists(self, path):\n        path = to_text(path)\n        return path in self._file_mapping or path in self._known_directories",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_file#60",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_file(self, path)",
        "snippet": "    def is_file(self, path):\n        path = to_text(path)\n        return path in self._file_mapping",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_directory#64",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_directory(self, path)",
        "snippet": "    def is_directory(self, path):\n        path = to_text(path)\n        return path in self._known_directories",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.list_directory#68",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.list_directory(self, path)",
        "snippet": "    def list_directory(self, path):\n        ret = []\n        path = to_text(path)\n        for x in (list(self._file_mapping.keys()) + self._known_directories):\n            if x.startswith(path):\n                if os.path.dirname(x) == path:\n                    ret.append(os.path.basename(x))\n        return ret",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_executable#77",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_executable(self, path)",
        "snippet": "    def is_executable(self, path):\n        # FIXME: figure out a way to make paths return true for this\n        return False",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._add_known_directory#81",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._add_known_directory(self, directory)",
        "snippet": "    def _add_known_directory(self, directory):\n        if directory not in self._known_directories:\n            self._known_directories.append(directory)",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._build_known_directories#85",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._build_known_directories(self)",
        "snippet": "    def _build_known_directories(self):\n        self._known_directories = []\n        for path in self._file_mapping:\n            dirname = os.path.dirname(path)\n            while dirname not in ('/', ''):\n                self._add_known_directory(dirname)\n                dirname = os.path.dirname(dirname)",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.get_basedir#112",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.get_basedir(self)",
        "snippet": "    def get_basedir(self):\n        return os.getcwd()",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.set_vault_secrets#115",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.set_vault_secrets(self, vault_secrets)",
        "snippet": "    def set_vault_secrets(self, vault_secrets):\n        self._vault_secrets = vault_secrets",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.call_galaxy_cli#32",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.call_galaxy_cli(args)",
        "snippet": "def call_galaxy_cli(args):\n    orig = co.GlobalCLIArgs._Singleton__instance\n    co.GlobalCLIArgs._Singleton__instance = None\n    try:\n        GalaxyCLI(args=['ansible-galaxy', 'collection'] + args).run()\n    finally:\n        co.GlobalCLIArgs._Singleton__instance = orig",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.artifact_json#41",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.artifact_json(namespace, name, version, dependencies, server)",
        "snippet": "def artifact_json(namespace, name, version, dependencies, server):\n    json_str = json.dumps({\n        'artifact': {\n            'filename': '%s-%s-%s.tar.gz' % (namespace, name, version),\n            'sha256': '2d76f3b8c4bab1072848107fb3914c345f71a12a1722f25c08f5d3f51f4ab5fd',\n            'size': 1234,\n        },\n        'download_url': '%s/download/%s-%s-%s.tar.gz' % (server, namespace, name, version),\n        'metadata': {\n            'namespace': namespace,\n            'name': name,\n            'dependencies': dependencies,\n        },\n        'version': version\n    })\n    return to_text(json_str)",
        "begin_line": 41,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.artifact_versions_json#59",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.artifact_versions_json(namespace, name, versions, galaxy_api, available_api_versions=None)",
        "snippet": "def artifact_versions_json(namespace, name, versions, galaxy_api, available_api_versions=None):\n    results = []\n    available_api_versions = available_api_versions or {}\n    api_version = 'v2'\n    if 'v3' in available_api_versions:\n        api_version = 'v3'\n    for version in versions:\n        results.append({\n            'href': '%s/api/%s/%s/%s/versions/%s/' % (galaxy_api.api_server, api_version, namespace, name, version),\n            'version': version,\n        })\n\n    if api_version == 'v2':\n        json_str = json.dumps({\n            'count': len(versions),\n            'next': None,\n            'previous': None,\n            'results': results\n        })\n\n    if api_version == 'v3':\n        response = {'meta': {'count': len(versions)},\n                    'data': results,\n                    'links': {'first': None,\n                              'last': None,\n                              'next': None,\n                              'previous': None},\n                    }\n        json_str = json.dumps(response)\n    return to_text(json_str)",
        "begin_line": 59,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.error_json#91",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.error_json(galaxy_api, errors_to_return=None, available_api_versions=None)",
        "snippet": "def error_json(galaxy_api, errors_to_return=None, available_api_versions=None):\n    errors_to_return = errors_to_return or []\n    available_api_versions = available_api_versions or {}\n\n    response = {}\n\n    api_version = 'v2'\n    if 'v3' in available_api_versions:\n        api_version = 'v3'\n\n    if api_version == 'v2':\n        assert len(errors_to_return) <= 1\n        if errors_to_return:\n            response = errors_to_return[0]\n\n    if api_version == 'v3':\n        response['errors'] = errors_to_return\n\n    json_str = json.dumps(response)\n    return to_text(json_str)",
        "begin_line": 91,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.reset_cli_args#114",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.reset_cli_args()",
        "snippet": "def reset_cli_args():\n    co.GlobalCLIArgs._Singleton__instance = None\n    yield\n    co.GlobalCLIArgs._Singleton__instance = None",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.collection_artifact#121",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.collection_artifact(request, tmp_path_factory)",
        "snippet": "def collection_artifact(request, tmp_path_factory):\n    test_dir = to_text(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections Input'))\n    namespace = 'ansible_namespace'\n    collection = 'collection'\n\n    skeleton_path = os.path.join(os.path.dirname(os.path.split(__file__)[0]), 'cli', 'test_data', 'collection_skeleton')\n    collection_path = os.path.join(test_dir, namespace, collection)\n\n    call_galaxy_cli(['init', '%s.%s' % (namespace, collection), '-c', '--init-path', test_dir,\n                     '--collection-skeleton', skeleton_path])\n    dependencies = getattr(request, 'param', None)\n    if dependencies:\n        galaxy_yml = os.path.join(collection_path, 'galaxy.yml')\n        with open(galaxy_yml, 'rb+') as galaxy_obj:\n            existing_yaml = yaml.safe_load(galaxy_obj)\n            existing_yaml['dependencies'] = dependencies\n\n            galaxy_obj.seek(0)\n            galaxy_obj.write(to_bytes(yaml.safe_dump(existing_yaml)))\n            galaxy_obj.truncate()\n\n    call_galaxy_cli(['build', collection_path, '--output-path', test_dir])\n\n    collection_tar = os.path.join(test_dir, '%s-%s-0.1.0.tar.gz' % (namespace, collection))\n    return to_bytes(collection_path), to_bytes(collection_tar)",
        "begin_line": 121,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.galaxy_server#149",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.galaxy_server()",
        "snippet": "def galaxy_server():\n    context.CLIARGS._store = {'ignore_certs': False}\n    galaxy_api = api.GalaxyAPI(None, 'test_server', 'https://galaxy.ansible.com')\n    return galaxy_api",
        "begin_line": 149,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_path#155",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_path(collection_artifact)",
        "snippet": "def test_build_requirement_from_path(collection_artifact):\n    actual = collection.CollectionRequirement.from_path(collection_artifact[0], True)\n\n    assert actual.namespace == u'ansible_namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path == collection_artifact[0]\n    assert actual.api is None\n    assert actual.skip is True\n    assert actual.versions == set([u'*'])\n    assert actual.latest_version == u'*'\n    assert actual.dependencies == {}",
        "begin_line": 155,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_with_manifest#169",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_with_manifest(version, collection_artifact)",
        "snippet": "def test_build_requirement_from_path_with_manifest(version, collection_artifact):\n    manifest_path = os.path.join(collection_artifact[0], b'MANIFEST.json')\n    manifest_value = json.dumps({\n        'collection_info': {\n            'namespace': 'namespace',\n            'name': 'name',\n            'version': version,\n            'dependencies': {\n                'ansible_namespace.collection': '*'\n            }\n        }\n    })\n    with open(manifest_path, 'wb') as manifest_obj:\n        manifest_obj.write(to_bytes(manifest_value))\n\n    actual = collection.CollectionRequirement.from_path(collection_artifact[0], True)\n\n    # While the folder name suggests a different collection, we treat MANIFEST.json as the source of truth.\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'name'\n    assert actual.b_path == collection_artifact[0]\n    assert actual.api is None\n    assert actual.skip is True\n    assert actual.versions == set([to_text(version)])\n    assert actual.latest_version == to_text(version)\n    assert actual.dependencies == {'ansible_namespace.collection': '*'}",
        "begin_line": 169,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_invalid_manifest#197",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_invalid_manifest(collection_artifact)",
        "snippet": "def test_build_requirement_from_path_invalid_manifest(collection_artifact):\n    manifest_path = os.path.join(collection_artifact[0], b'MANIFEST.json')\n    with open(manifest_path, 'wb') as manifest_obj:\n        manifest_obj.write(b\"not json\")\n\n    expected = \"Collection file at '%s' does not contain a valid json string.\" % to_native(manifest_path)\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_path(collection_artifact[0], True)",
        "begin_line": 197,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_no_version#207",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_path_no_version(collection_artifact, monkeypatch)",
        "snippet": "def test_build_requirement_from_path_no_version(collection_artifact, monkeypatch):\n    manifest_path = os.path.join(collection_artifact[0], b'MANIFEST.json')\n    manifest_value = json.dumps({\n        'collection_info': {\n            'namespace': 'namespace',\n            'name': 'name',\n            'version': '',\n            'dependencies': {}\n        }\n    })\n    with open(manifest_path, 'wb') as manifest_obj:\n        manifest_obj.write(to_bytes(manifest_value))\n\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    actual = collection.CollectionRequirement.from_path(collection_artifact[0], True)\n\n    # While the folder name suggests a different collection, we treat MANIFEST.json as the source of truth.\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'name'\n    assert actual.b_path == collection_artifact[0]\n    assert actual.api is None\n    assert actual.skip is True\n    assert actual.versions == set(['*'])\n    assert actual.latest_version == u'*'\n    assert actual.dependencies == {}\n\n    assert mock_display.call_count == 1\n\n    actual_warn = ' '.join(mock_display.mock_calls[0][1][0].split('\\n'))\n    expected_warn = \"Collection at '%s' does not have a valid version set, falling back to '*'. Found version: ''\" \\\n        % to_text(collection_artifact[0])\n    assert expected_warn in actual_warn",
        "begin_line": 207,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar#243",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar(collection_artifact)",
        "snippet": "def test_build_requirement_from_tar(collection_artifact):\n    actual = collection.CollectionRequirement.from_tar(collection_artifact[1], True, True)\n\n    assert actual.namespace == u'ansible_namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path == collection_artifact[1]\n    assert actual.api is None\n    assert actual.skip is False\n    assert actual.versions == set([u'0.1.0'])\n    assert actual.latest_version == u'0.1.0'\n    assert actual.dependencies == {}",
        "begin_line": 243,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_fail_not_tar#256",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_fail_not_tar(tmp_path_factory)",
        "snippet": "def test_build_requirement_from_tar_fail_not_tar(tmp_path_factory):\n    test_dir = to_bytes(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections Input'))\n    test_file = os.path.join(test_dir, b'fake.tar.gz')\n    with open(test_file, 'wb') as test_obj:\n        test_obj.write(b\"\\x00\\x01\\x02\\x03\")\n\n    expected = \"Collection artifact at '%s' is not a valid tar file.\" % to_native(test_file)\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_tar(test_file, True, True)",
        "begin_line": 256,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_no_manifest#267",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_no_manifest(tmp_path_factory)",
        "snippet": "def test_build_requirement_from_tar_no_manifest(tmp_path_factory):\n    test_dir = to_bytes(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections Input'))\n\n    json_data = to_bytes(json.dumps(\n        {\n            'files': [],\n            'format': 1,\n        }\n    ))\n\n    tar_path = os.path.join(test_dir, b'ansible-collections.tar.gz')\n    with tarfile.open(tar_path, 'w:gz') as tfile:\n        b_io = BytesIO(json_data)\n        tar_info = tarfile.TarInfo('FILES.json')\n        tar_info.size = len(json_data)\n        tar_info.mode = 0o0644\n        tfile.addfile(tarinfo=tar_info, fileobj=b_io)\n\n    expected = \"Collection at '%s' does not contain the required file MANIFEST.json.\" % to_native(tar_path)\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_tar(tar_path, True, True)",
        "begin_line": 267,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_no_files#290",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_no_files(tmp_path_factory)",
        "snippet": "def test_build_requirement_from_tar_no_files(tmp_path_factory):\n    test_dir = to_bytes(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections Input'))\n\n    json_data = to_bytes(json.dumps(\n        {\n            'collection_info': {},\n        }\n    ))\n\n    tar_path = os.path.join(test_dir, b'ansible-collections.tar.gz')\n    with tarfile.open(tar_path, 'w:gz') as tfile:\n        b_io = BytesIO(json_data)\n        tar_info = tarfile.TarInfo('MANIFEST.json')\n        tar_info.size = len(json_data)\n        tar_info.mode = 0o0644\n        tfile.addfile(tarinfo=tar_info, fileobj=b_io)\n\n    expected = \"Collection at '%s' does not contain the required file FILES.json.\" % to_native(tar_path)\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_tar(tar_path, True, True)",
        "begin_line": 290,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_invalid_manifest#312",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_tar_invalid_manifest(tmp_path_factory)",
        "snippet": "def test_build_requirement_from_tar_invalid_manifest(tmp_path_factory):\n    test_dir = to_bytes(tmp_path_factory.mktemp('test-\u00c5\u00d1\u015a\u00cc\u03b2\u0141\u00c8 Collections Input'))\n\n    json_data = b\"not a json\"\n\n    tar_path = os.path.join(test_dir, b'ansible-collections.tar.gz')\n    with tarfile.open(tar_path, 'w:gz') as tfile:\n        b_io = BytesIO(json_data)\n        tar_info = tarfile.TarInfo('MANIFEST.json')\n        tar_info.size = len(json_data)\n        tar_info.mode = 0o0644\n        tfile.addfile(tarinfo=tar_info, fileobj=b_io)\n\n    expected = \"Collection tar file member MANIFEST.json does not contain a valid json string.\"\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_tar(tar_path, True, True)",
        "begin_line": 312,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name#330",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name(galaxy_server, monkeypatch):\n    mock_get_versions = MagicMock()\n    mock_get_versions.return_value = ['2.1.9', '2.1.10']\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '*', True, True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'2.1.9', u'2.1.10'])\n    assert actual.latest_version == u'2.1.10'\n    assert actual.dependencies is None\n\n    assert mock_get_versions.call_count == 1\n    assert mock_get_versions.mock_calls[0][1] == ('namespace', 'collection')",
        "begin_line": 330,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_with_prerelease#350",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_with_prerelease(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_with_prerelease(galaxy_server, monkeypatch):\n    mock_get_versions = MagicMock()\n    mock_get_versions.return_value = ['1.0.1', '2.0.1-beta.1', '2.0.1']\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '*', True, True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'1.0.1', u'2.0.1'])\n    assert actual.latest_version == u'2.0.1'\n    assert actual.dependencies is None\n\n    assert mock_get_versions.call_count == 1\n    assert mock_get_versions.mock_calls[0][1] == ('namespace', 'collection')",
        "begin_line": 350,
        "end_line": 367,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirment_from_name_with_prerelease_explicit#370",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirment_from_name_with_prerelease_explicit(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirment_from_name_with_prerelease_explicit(galaxy_server, monkeypatch):\n    mock_get_info = MagicMock()\n    mock_get_info.return_value = api.CollectionVersionMetadata('namespace', 'collection', '2.0.1-beta.1', None, None,\n                                                               {})\n    monkeypatch.setattr(galaxy_server, 'get_collection_version_metadata', mock_get_info)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '2.0.1-beta.1', True,\n                                                        True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'2.0.1-beta.1'])\n    assert actual.latest_version == u'2.0.1-beta.1'\n    assert actual.dependencies == {}\n\n    assert mock_get_info.call_count == 1\n    assert mock_get_info.mock_calls[0][1] == ('namespace', 'collection', '2.0.1-beta.1')",
        "begin_line": 370,
        "end_line": 389,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_second_server#392",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_second_server(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_second_server(galaxy_server, monkeypatch):\n    mock_get_versions = MagicMock()\n    mock_get_versions.return_value = ['1.0.1', '1.0.2', '1.0.3']\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)\n\n    broken_server = copy.copy(galaxy_server)\n    broken_server.api_server = 'https://broken.com/'\n    mock_404 = MagicMock()\n    mock_404.side_effect = api.GalaxyError(urllib_error.HTTPError('https://galaxy.server.com', 404, 'msg', {},\n                                                                  StringIO()), \"custom msg\")\n    monkeypatch.setattr(broken_server, 'get_collection_versions', mock_404)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [broken_server, galaxy_server],\n                                                        '>1.0.1', False, True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    # assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'1.0.2', u'1.0.3'])\n    assert actual.latest_version == u'1.0.3'\n    assert actual.dependencies is None\n\n    assert mock_404.call_count == 1\n    assert mock_404.mock_calls[0][1] == ('namespace', 'collection')\n\n    assert mock_get_versions.call_count == 1\n    assert mock_get_versions.mock_calls[0][1] == ('namespace', 'collection')",
        "begin_line": 392,
        "end_line": 420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_missing#423",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_missing(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_missing(galaxy_server, monkeypatch):\n    mock_open = MagicMock()\n    mock_open.side_effect = api.GalaxyError(urllib_error.HTTPError('https://galaxy.server.com', 404, 'msg', {},\n                                                                   StringIO()), \"\")\n\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_open)\n\n    expected = \"Failed to find collection namespace.collection:*\"\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server, galaxy_server], '*', False,\n                                                   True)",
        "begin_line": 423,
        "end_line": 433,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_401_unauthorized#436",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_401_unauthorized(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_401_unauthorized(galaxy_server, monkeypatch):\n    mock_open = MagicMock()\n    mock_open.side_effect = api.GalaxyError(urllib_error.HTTPError('https://galaxy.server.com', 401, 'msg', {},\n                                                                   StringIO()), \"error\")\n\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_open)\n\n    expected = \"error (HTTP Code: 401, Message: msg)\"\n    with pytest.raises(api.GalaxyError, match=re.escape(expected)):\n        collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server, galaxy_server], '*', False)",
        "begin_line": 436,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_single_version#448",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_single_version(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_single_version(galaxy_server, monkeypatch):\n    mock_get_info = MagicMock()\n    mock_get_info.return_value = api.CollectionVersionMetadata('namespace', 'collection', '2.0.0', None, None,\n                                                               {})\n    monkeypatch.setattr(galaxy_server, 'get_collection_version_metadata', mock_get_info)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '2.0.0', True,\n                                                        True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'2.0.0'])\n    assert actual.latest_version == u'2.0.0'\n    assert actual.dependencies == {}\n\n    assert mock_get_info.call_count == 1\n    assert mock_get_info.mock_calls[0][1] == ('namespace', 'collection', '2.0.0')",
        "begin_line": 448,
        "end_line": 467,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_multiple_versions_one_match#470",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_multiple_versions_one_match(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_multiple_versions_one_match(galaxy_server, monkeypatch):\n    mock_get_versions = MagicMock()\n    mock_get_versions.return_value = ['2.0.0', '2.0.1', '2.0.2']\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)\n\n    mock_get_info = MagicMock()\n    mock_get_info.return_value = api.CollectionVersionMetadata('namespace', 'collection', '2.0.1', None, None,\n                                                               {})\n    monkeypatch.setattr(galaxy_server, 'get_collection_version_metadata', mock_get_info)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '>=2.0.1,<2.0.2',\n                                                        True, True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'2.0.1'])\n    assert actual.latest_version == u'2.0.1'\n    assert actual.dependencies == {}\n\n    assert mock_get_versions.call_count == 1\n    assert mock_get_versions.mock_calls[0][1] == ('namespace', 'collection')\n\n    assert mock_get_info.call_count == 1\n    assert mock_get_info.mock_calls[0][1] == ('namespace', 'collection', '2.0.1')",
        "begin_line": 470,
        "end_line": 496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_multiple_version_results#499",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_build_requirement_from_name_multiple_version_results(galaxy_server, monkeypatch)",
        "snippet": "def test_build_requirement_from_name_multiple_version_results(galaxy_server, monkeypatch):\n    mock_get_versions = MagicMock()\n    mock_get_versions.return_value = ['2.0.0', '2.0.1', '2.0.2', '2.0.3', '2.0.4', '2.0.5']\n    monkeypatch.setattr(galaxy_server, 'get_collection_versions', mock_get_versions)\n\n    actual = collection.CollectionRequirement.from_name('namespace.collection', [galaxy_server], '!=2.0.2',\n                                                        True, True)\n\n    assert actual.namespace == u'namespace'\n    assert actual.name == u'collection'\n    assert actual.b_path is None\n    assert actual.api == galaxy_server\n    assert actual.skip is False\n    assert actual.versions == set([u'2.0.0', u'2.0.1', u'2.0.3', u'2.0.4', u'2.0.5'])\n    assert actual.latest_version == u'2.0.5'\n    assert actual.dependencies is None\n\n    assert mock_get_versions.call_count == 1\n    assert mock_get_versions.mock_calls[0][1] == ('namespace', 'collection')",
        "begin_line": 499,
        "end_line": 517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_collection_requirements#530",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_collection_requirements(versions, requirement, expected_filter, expected_latest)",
        "snippet": "def test_add_collection_requirements(versions, requirement, expected_filter, expected_latest):\n    req = collection.CollectionRequirement('namespace', 'name', None, 'https://galaxy.com', versions, requirement,\n                                           False)\n    assert req.versions == set(expected_filter)\n    assert req.latest_version == expected_latest",
        "begin_line": 530,
        "end_line": 534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_collection_requirement_to_unknown_installed_version#537",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_collection_requirement_to_unknown_installed_version(monkeypatch)",
        "snippet": "def test_add_collection_requirement_to_unknown_installed_version(monkeypatch):\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    req = collection.CollectionRequirement('namespace', 'name', None, 'https://galaxy.com', ['*'], '*', False,\n                                           skip=True)\n\n    req.add_requirement('parent.collection', '1.0.0')\n    assert req.latest_version == '*'\n\n    assert mock_display.call_count == 1\n\n    actual_warn = ' '.join(mock_display.mock_calls[0][1][0].split('\\n'))\n    assert \"Failed to validate the collection requirement 'namespace.name:1.0.0' for parent.collection\" in actual_warn",
        "begin_line": 537,
        "end_line": 550,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_collection_wildcard_requirement_to_unknown_installed_version#553",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_collection_wildcard_requirement_to_unknown_installed_version()",
        "snippet": "def test_add_collection_wildcard_requirement_to_unknown_installed_version():\n    req = collection.CollectionRequirement('namespace', 'name', None, 'https://galaxy.com', ['*'], '*', False,\n                                           skip=True)\n    req.add_requirement(str(req), '*')\n\n    assert req.versions == set('*')\n    assert req.latest_version == '*'",
        "begin_line": 553,
        "end_line": 559,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_collection_requirement_with_conflict#562",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_collection_requirement_with_conflict(galaxy_server)",
        "snippet": "def test_add_collection_requirement_with_conflict(galaxy_server):\n    expected = \"Cannot meet requirement ==1.0.2 for dependency namespace.name from source '%s'. Available versions \" \\\n               \"before last requirement added: 1.0.0, 1.0.1\\n\" \\\n               \"Requirements from:\\n\" \\\n               \"\\tbase - 'namespace.name:==1.0.2'\" % galaxy_server.api_server\n    with pytest.raises(AnsibleError, match=expected):\n        collection.CollectionRequirement('namespace', 'name', None, galaxy_server, ['1.0.0', '1.0.1'], '==1.0.2',\n                                         False)",
        "begin_line": 562,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_requirement_to_existing_collection_with_conflict#572",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_requirement_to_existing_collection_with_conflict(galaxy_server)",
        "snippet": "def test_add_requirement_to_existing_collection_with_conflict(galaxy_server):\n    req = collection.CollectionRequirement('namespace', 'name', None, galaxy_server, ['1.0.0', '1.0.1'], '*', False)\n\n    expected = \"Cannot meet dependency requirement 'namespace.name:1.0.2' for collection namespace.collection2 from \" \\\n               \"source '%s'. Available versions before last requirement added: 1.0.0, 1.0.1\\n\" \\\n               \"Requirements from:\\n\" \\\n               \"\\tbase - 'namespace.name:*'\\n\" \\\n               \"\\tnamespace.collection2 - 'namespace.name:1.0.2'\" % galaxy_server.api_server\n    with pytest.raises(AnsibleError, match=re.escape(expected)):\n        req.add_requirement('namespace.collection2', '1.0.2')",
        "begin_line": 572,
        "end_line": 581,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_requirement_to_installed_collection_with_conflict#584",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_requirement_to_installed_collection_with_conflict()",
        "snippet": "def test_add_requirement_to_installed_collection_with_conflict():\n    source = 'https://galaxy.ansible.com'\n    req = collection.CollectionRequirement('namespace', 'name', None, source, ['1.0.0', '1.0.1'], '*', False,\n                                           skip=True)\n\n    expected = \"Cannot meet requirement namespace.name:1.0.2 as it is already installed at version '1.0.1'. \" \\\n               \"Use --force to overwrite\"\n    with pytest.raises(AnsibleError, match=re.escape(expected)):\n        req.add_requirement(None, '1.0.2')",
        "begin_line": 584,
        "end_line": 592,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_add_requirement_to_installed_collection_with_conflict_as_dep#595",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_add_requirement_to_installed_collection_with_conflict_as_dep()",
        "snippet": "def test_add_requirement_to_installed_collection_with_conflict_as_dep():\n    source = 'https://galaxy.ansible.com'\n    req = collection.CollectionRequirement('namespace', 'name', None, source, ['1.0.0', '1.0.1'], '*', False,\n                                           skip=True)\n\n    expected = \"Cannot meet requirement namespace.name:1.0.2 as it is already installed at version '1.0.1'. \" \\\n               \"Use --force-with-deps to overwrite\"\n    with pytest.raises(AnsibleError, match=re.escape(expected)):\n        req.add_requirement('namespace.collection2', '1.0.2')",
        "begin_line": 595,
        "end_line": 603,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_skipped_collection#606",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_skipped_collection(monkeypatch)",
        "snippet": "def test_install_skipped_collection(monkeypatch):\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    req = collection.CollectionRequirement('namespace', 'name', None, 'source', ['1.0.0'], '*', False, skip=True)\n    req.install(None, None)\n\n    assert mock_display.call_count == 1\n    assert mock_display.mock_calls[0][1][0] == \"Skipping 'namespace.name' as it is already installed\"",
        "begin_line": 606,
        "end_line": 614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_collection#617",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_collection(collection_artifact, monkeypatch)",
        "snippet": "def test_install_collection(collection_artifact, monkeypatch):\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    collection_tar = collection_artifact[1]\n    output_path = os.path.join(os.path.split(collection_tar)[0], b'output')\n    collection_path = os.path.join(output_path, b'ansible_namespace', b'collection')\n    os.makedirs(os.path.join(collection_path, b'delete_me'))  # Create a folder to verify the install cleans out the dir\n\n    temp_path = os.path.join(os.path.split(collection_tar)[0], b'temp')\n    os.makedirs(temp_path)\n\n    req = collection.CollectionRequirement.from_tar(collection_tar, True, True)\n    req.install(to_text(output_path), temp_path)\n\n    # Ensure the temp directory is empty, nothing is left behind\n    assert os.listdir(temp_path) == []\n\n    actual_files = os.listdir(collection_path)\n    actual_files.sort()\n    assert actual_files == [b'FILES.json', b'MANIFEST.json', b'README.md', b'docs', b'playbooks', b'plugins', b'roles']\n\n    assert mock_display.call_count == 1\n    assert mock_display.mock_calls[0][1][0] == \"Installing 'ansible_namespace.collection:0.1.0' to '%s'\" \\\n        % to_text(collection_path)",
        "begin_line": 617,
        "end_line": 641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_collection_with_download#644",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_collection_with_download(galaxy_server, collection_artifact, monkeypatch)",
        "snippet": "def test_install_collection_with_download(galaxy_server, collection_artifact, monkeypatch):\n    collection_tar = collection_artifact[1]\n    output_path = os.path.join(os.path.split(collection_tar)[0], b'output')\n    collection_path = os.path.join(output_path, b'ansible_namespace', b'collection')\n\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    mock_download = MagicMock()\n    mock_download.return_value = collection_tar\n    monkeypatch.setattr(collection, '_download_file', mock_download)\n\n    monkeypatch.setattr(galaxy_server, '_available_api_versions', {'v2': 'v2/'})\n    temp_path = os.path.join(os.path.split(collection_tar)[0], b'temp')\n    os.makedirs(temp_path)\n\n    meta = api.CollectionVersionMetadata('ansible_namespace', 'collection', '0.1.0', 'https://downloadme.com',\n                                         'myhash', {})\n    req = collection.CollectionRequirement('ansible_namespace', 'collection', None, galaxy_server,\n                                           ['0.1.0'], '*', False, metadata=meta)\n    req.install(to_text(output_path), temp_path)\n\n    # Ensure the temp directory is empty, nothing is left behind\n    assert os.listdir(temp_path) == []\n\n    actual_files = os.listdir(collection_path)\n    actual_files.sort()\n    assert actual_files == [b'FILES.json', b'MANIFEST.json', b'README.md', b'docs', b'playbooks', b'plugins', b'roles']\n\n    assert mock_display.call_count == 1\n    assert mock_display.mock_calls[0][1][0] == \"Installing 'ansible_namespace.collection:0.1.0' to '%s'\" \\\n        % to_text(collection_path)\n\n    assert mock_download.call_count == 1\n    assert mock_download.mock_calls[0][1][0] == 'https://downloadme.com'\n    assert mock_download.mock_calls[0][1][1] == temp_path\n    assert mock_download.mock_calls[0][1][2] == 'myhash'\n    assert mock_download.mock_calls[0][1][3] is True",
        "begin_line": 644,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_collections_from_tar#684",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_collections_from_tar(collection_artifact, monkeypatch)",
        "snippet": "def test_install_collections_from_tar(collection_artifact, monkeypatch):\n    collection_path, collection_tar = collection_artifact\n    temp_path = os.path.split(collection_tar)[0]\n    shutil.rmtree(collection_path)\n\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    collection.install_collections([(to_text(collection_tar), '*', None,)], to_text(temp_path),\n                                   [u'https://galaxy.ansible.com'], True, False, False, False, False)\n\n    assert os.path.isdir(collection_path)\n\n    actual_files = os.listdir(collection_path)\n    actual_files.sort()\n    assert actual_files == [b'FILES.json', b'MANIFEST.json', b'README.md', b'docs', b'playbooks', b'plugins', b'roles']\n\n    with open(os.path.join(collection_path, b'MANIFEST.json'), 'rb') as manifest_obj:\n        actual_manifest = json.loads(to_text(manifest_obj.read()))\n\n    assert actual_manifest['collection_info']['namespace'] == 'ansible_namespace'\n    assert actual_manifest['collection_info']['name'] == 'collection'\n    assert actual_manifest['collection_info']['version'] == '0.1.0'\n\n    # Filter out the progress cursor display calls.\n    display_msgs = [m[1][0] for m in mock_display.mock_calls if 'newline' not in m[2] and len(m[1]) == 1]\n    assert len(display_msgs) == 3\n    assert display_msgs[0] == \"Process install dependency map\"\n    assert display_msgs[1] == \"Starting collection install process\"\n    assert display_msgs[2] == \"Installing 'ansible_namespace.collection:0.1.0' to '%s'\" % to_text(collection_path)",
        "begin_line": 684,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_collections_existing_without_force#716",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_collections_existing_without_force(collection_artifact, monkeypatch)",
        "snippet": "def test_install_collections_existing_without_force(collection_artifact, monkeypatch):\n    collection_path, collection_tar = collection_artifact\n    temp_path = os.path.split(collection_tar)[0]\n\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    # If we don't delete collection_path it will think the original build skeleton is installed so we expect a skip\n    collection.install_collections([(to_text(collection_tar), '*', None,)], to_text(temp_path),\n                                   [u'https://galaxy.ansible.com'], True, False, False, False, False)\n\n    assert os.path.isdir(collection_path)\n\n    actual_files = os.listdir(collection_path)\n    actual_files.sort()\n    assert actual_files == [b'README.md', b'docs', b'galaxy.yml', b'playbooks', b'plugins', b'roles']\n\n    # Filter out the progress cursor display calls.\n    display_msgs = [m[1][0] for m in mock_display.mock_calls if 'newline' not in m[2] and len(m[1]) == 1]\n    assert len(display_msgs) == 4\n    # Msg1 is the warning about not MANIFEST.json, cannot really check message as it has line breaks which varies based\n    # on the path size\n    assert display_msgs[1] == \"Process install dependency map\"\n    assert display_msgs[2] == \"Starting collection install process\"\n    assert display_msgs[3] == \"Skipping 'ansible_namespace.collection' as it is already installed\"",
        "begin_line": 716,
        "end_line": 740,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.galaxy.test_collection_install.test_install_collection_with_circular_dependency#747",
        "src_path": "test/units/galaxy/test_collection_install.py",
        "class_name": "test.units.galaxy.test_collection_install",
        "signature": "test.units.galaxy.test_collection_install.test_install_collection_with_circular_dependency(collection_artifact, monkeypatch)",
        "snippet": "def test_install_collection_with_circular_dependency(collection_artifact, monkeypatch):\n    collection_path, collection_tar = collection_artifact\n    temp_path = os.path.split(collection_tar)[0]\n    shutil.rmtree(collection_path)\n\n    mock_display = MagicMock()\n    monkeypatch.setattr(Display, 'display', mock_display)\n\n    collection.install_collections([(to_text(collection_tar), '*', None,)], to_text(temp_path),\n                                   [u'https://galaxy.ansible.com'], True, False, False, False, False)\n\n    assert os.path.isdir(collection_path)\n\n    actual_files = os.listdir(collection_path)\n    actual_files.sort()\n    assert actual_files == [b'FILES.json', b'MANIFEST.json', b'README.md', b'docs', b'playbooks', b'plugins', b'roles']\n\n    with open(os.path.join(collection_path, b'MANIFEST.json'), 'rb') as manifest_obj:\n        actual_manifest = json.loads(to_text(manifest_obj.read()))\n\n    assert actual_manifest['collection_info']['namespace'] == 'ansible_namespace'\n    assert actual_manifest['collection_info']['name'] == 'collection'\n    assert actual_manifest['collection_info']['version'] == '0.1.0'\n\n    # Filter out the progress cursor display calls.\n    display_msgs = [m[1][0] for m in mock_display.mock_calls if 'newline' not in m[2] and len(m[1]) == 1]\n    assert len(display_msgs) == 3\n    assert display_msgs[0] == \"Process install dependency map\"\n    assert display_msgs[1] == \"Starting collection install process\"\n    assert display_msgs[2] == \"Installing 'ansible_namespace.collection:0.1.0' to '%s'\" % to_text(collection_path)",
        "begin_line": 747,
        "end_line": 776,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.load_fixture#32",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module#52",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed#71",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed#79",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.amazon_placebo_fixtures.placeboify#44",
        "src_path": "test/units/utils/amazon_placebo_fixtures.py",
        "class_name": "test.units.utils.amazon_placebo_fixtures",
        "signature": "test.units.utils.amazon_placebo_fixtures.placeboify(request, monkeypatch)",
        "snippet": "def placeboify(request, monkeypatch):\n    \"\"\"This fixture puts a recording/replaying harness around `boto3_conn`\n\n    Placeboify patches the `boto3_conn` function in ec2 module_utils to return\n    a boto3 session that in recording or replaying mode, depending on the\n    PLACEBO_RECORD environment variable. Unset PLACEBO_RECORD (the common case\n    for just running tests) will put placebo in replay mode, set PLACEBO_RECORD\n    to any value to turn off replay & operate on real AWS resources.\n\n    The recorded sessions are stored in the test file's directory, under the\n    namespace `placebo_recordings/{testfile name}/{test function name}` to\n    distinguish them.\n    \"\"\"\n    session = boto3.Session(region_name='us-west-2')\n\n    recordings_path = os.path.join(\n        request.fspath.dirname,\n        'placebo_recordings',\n        request.fspath.basename.replace('.py', ''),\n        request.function.__name__\n        # remove the test_ prefix from the function & file name\n    ).replace('test_', '')\n\n    if not os.getenv('PLACEBO_RECORD'):\n        if not os.path.isdir(recordings_path):\n            raise NotImplementedError('Missing Placebo recordings in directory: %s' % recordings_path)\n    else:\n        try:\n            # make sure the directory for placebo test recordings is available\n            os.makedirs(recordings_path)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n\n    pill = placebo.attach(session, data_path=recordings_path)\n    if os.getenv('PLACEBO_RECORD'):\n        pill.record()\n    else:\n        pill.playback()\n\n    def boto3_middleman_connection(module, conn_type, resource, region='us-west-2', **kwargs):\n        if conn_type != 'client':\n            # TODO support resource-based connections\n            raise ValueError('Mocker only supports client, not %s' % conn_type)\n        return session.client(resource, region_name=region)\n\n    import ansible.module_utils.ec2\n    monkeypatch.setattr(\n        ansible.module_utils.ec2,\n        'boto3_conn',\n        boto3_middleman_connection,\n    )\n    yield session\n\n    # tear down\n    pill.stop()",
        "begin_line": 44,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.amazon_placebo_fixtures.boto3_middleman_connection#84",
        "src_path": "test/units/utils/amazon_placebo_fixtures.py",
        "class_name": "test.units.utils.amazon_placebo_fixtures",
        "signature": "test.units.utils.amazon_placebo_fixtures.boto3_middleman_connection(module, conn_type, resource, region='us-west-2', **kwargs)",
        "snippet": "    def boto3_middleman_connection(module, conn_type, resource, region='us-west-2', **kwargs):\n        if conn_type != 'client':\n            # TODO support resource-based connections\n            raise ValueError('Mocker only supports client, not %s' % conn_type)\n        return session.client(resource, region_name=region)",
        "begin_line": 84,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.amazon_placebo_fixtures.maybe_sleep#201",
        "src_path": "test/units/utils/amazon_placebo_fixtures.py",
        "class_name": "test.units.utils.amazon_placebo_fixtures",
        "signature": "test.units.utils.amazon_placebo_fixtures.maybe_sleep()",
        "snippet": "def maybe_sleep():\n    \"\"\"If placebo is reading saved sessions, make sleep always take 0 seconds.\n\n    AWS modules often perform polling or retries, but when using recorded\n    sessions there's no reason to wait. We can still exercise retry and other\n    code paths without waiting for wall-clock time to pass.\"\"\"\n    if not os.getenv('PLACEBO_RECORD'):\n        p = mock.patch('time.sleep', return_value=None)\n        p.start()\n        yield\n        p.stop()\n    else:\n        yield",
        "begin_line": 201,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    }
]