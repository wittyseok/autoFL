coverage run -m pytest pandas/tests/arrays/test_integer.py::TestCasting::test_astype_boolean
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/arrays/test_integer.py F                                    [100%]

=================================== FAILURES ===================================
_______________________ TestCasting.test_astype_boolean ________________________

self = <pandas.tests.arrays.test_integer.TestCasting object at 0x7f45c287bdc0>

    def test_astype_boolean(self):
        # https://github.com/pandas-dev/pandas/issues/31102
        a = pd.array([1, 0, -1, 2, None], dtype="Int64")
>       result = a.astype("boolean")

pandas/tests/arrays/test_integer.py:686: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/arrays/integer.py:456: in astype
    data = self.to_numpy(dtype=dtype, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <IntegerArray>
[1, 0, -1, 2, <NA>]
Length: 5, dtype: Int64
dtype = 'boolean', copy = False, na_value = <NA>

    def to_numpy(
        self, dtype=None, copy=False, na_value: "Scalar" = lib.no_default,
    ):
        """
        Convert to a NumPy Array.
    
        By default converts to an object-dtype NumPy array. Specify the `dtype` and
        `na_value` keywords to customize the conversion.
    
        Parameters
        ----------
        dtype : dtype, default object
            The numpy dtype to convert to.
        copy : bool, default False
            Whether to ensure that the returned value is a not a view on
            the array. Note that ``copy=False`` does not *ensure* that
            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
            a copy is made, even if not strictly necessary. This is typically
            only possible when no missing values are present and `dtype`
            is the equivalent numpy dtype.
        na_value : scalar, optional
             Scalar missing value indicator to use in numpy array. Defaults
             to the native missing value indicator of this array (pd.NA).
    
        Returns
        -------
        numpy.ndarray
    
        Examples
        --------
        An object-dtype is the default result
    
        >>> a = pd.array([True, False, pd.NA], dtype="boolean")
        >>> a.to_numpy()
        array([True, False, NA], dtype=object)
    
        When no missing values are present, an equivalent dtype can be used.
    
        >>> pd.array([True, False], dtype="boolean").to_numpy(dtype="bool")
        array([ True, False])
        >>> pd.array([1, 2], dtype="Int64").to_numpy("int64")
        array([1, 2])
    
        However, requesting such dtype will raise a ValueError if
        missing values are present and the default missing value :attr:`NA`
        is used.
    
        >>> a = pd.array([True, False, pd.NA], dtype="boolean")
        >>> a
        <BooleanArray>
        [True, False, NA]
        Length: 3, dtype: boolean
    
        >>> a.to_numpy(dtype="bool")
        Traceback (most recent call last):
        ...
        ValueError: cannot convert to bool numpy array in presence of missing values
    
        Specify a valid `na_value` instead
    
        >>> a.to_numpy(dtype="bool", na_value=False)
        array([ True, False, False])
        """
        if na_value is lib.no_default:
            na_value = libmissing.NA
        if dtype is None:
            dtype = object
        if self._hasna:
            if (
                not (is_object_dtype(dtype) or is_string_dtype(dtype))
                and na_value is libmissing.NA
            ):
>               raise ValueError(
                    f"cannot convert to '{dtype}'-dtype NumPy array "
                    "with missing values. Specify an appropriate 'na_value' "
                    "for this dtype."
                )
E               ValueError: cannot convert to 'boolean'-dtype NumPy array with missing values. Specify an appropriate 'na_value' for this dtype.

pandas/core/arrays/masked.py:125: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/test_integer.py::TestCasting::test_astype_boolean
============================== 1 failed in 0.41s ===============================
