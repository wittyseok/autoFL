[
    {
        "name": "tests.conftest.no_memoize#5",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command#5",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Command(script='', stdout='', stderr='')",
        "snippet": "def Command(script='', stdout='', stderr=''):\n    return types.Command(script, stdout, stderr)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule#9",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Rule(name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "def Rule(name='', match=lambda *_: True,\n         get_new_command=lambda *_: '',\n         enabled_by_default=True,\n         side_effect=None,\n         priority=DEFAULT_PRIORITY,\n         requires_output=True):\n    return types.Rule(name, match, get_new_command,\n                      enabled_by_default, side_effect,\n                      priority, requires_output)",
        "begin_line": 9,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_fix_file.test_match#161",
        "src_path": "tests/rules/test_fix_file.py",
        "class_name": "tests.rules.test_fix_file",
        "signature": "tests.rules.test_fix_file.test_match(mocker, monkeypatch, test)",
        "snippet": "def test_match(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n    assert match(Command(stderr=test[4]), None)",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_fix_file.test_no_editor#168",
        "src_path": "tests/rules/test_fix_file.py",
        "class_name": "tests.rules.test_fix_file",
        "signature": "tests.rules.test_fix_file.test_no_editor(mocker, monkeypatch, test)",
        "snippet": "def test_no_editor(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=True)\n    if 'EDITOR' in os.environ:\n        monkeypatch.delenv('EDITOR')\n\n    assert not match(Command(stderr=test[4]), None)",
        "begin_line": 168,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_fix_file.test_not_file#177",
        "src_path": "tests/rules/test_fix_file.py",
        "class_name": "tests.rules.test_fix_file",
        "signature": "tests.rules.test_fix_file.test_not_file(mocker, monkeypatch, test)",
        "snippet": "def test_not_file(mocker, monkeypatch, test):\n    mocker.patch('os.path.isfile', return_value=False)\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n\n    assert not match(Command(stderr=test[4]), None)",
        "begin_line": 177,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_fix_file.test_get_new_command#185",
        "src_path": "tests/rules/test_fix_file.py",
        "class_name": "tests.rules.test_fix_file",
        "signature": "tests.rules.test_fix_file.test_get_new_command(monkeypatch, test)",
        "snippet": "def test_get_new_command(monkeypatch, test):\n    monkeypatch.setenv('EDITOR', 'dummy_editor')\n    assert (get_new_command(Command(script=test[0], stderr=test[4]), None) ==\n        'dummy_editor {} +{} && {}'.format(test[1], test[2], test[0]))",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    }
]