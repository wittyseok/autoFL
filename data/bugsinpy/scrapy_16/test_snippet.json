[
    {
        "name": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_any_domain#17",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.UrlUtilsTest",
        "signature": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_any_domain(self)",
        "snippet": "    def test_url_is_from_any_domain(self):\n        url = 'http://www.wheele-bin-art.co.uk/get/product/123'\n        self.assertTrue(url_is_from_any_domain(url, ['wheele-bin-art.co.uk']))\n        self.assertFalse(url_is_from_any_domain(url, ['art.co.uk']))\n\n        url = 'http://wheele-bin-art.co.uk/get/product/123'\n        self.assertTrue(url_is_from_any_domain(url, ['wheele-bin-art.co.uk']))\n        self.assertFalse(url_is_from_any_domain(url, ['art.co.uk']))\n\n        url = 'http://www.Wheele-Bin-Art.co.uk/get/product/123'\n        self.assertTrue(url_is_from_any_domain(url, ['wheele-bin-art.CO.UK']))\n        self.assertTrue(url_is_from_any_domain(url, ['WHEELE-BIN-ART.CO.UK']))\n\n        url = 'http://192.169.0.15:8080/mypage.html'\n        self.assertTrue(url_is_from_any_domain(url, ['192.169.0.15:8080']))\n        self.assertFalse(url_is_from_any_domain(url, ['192.169.0.15']))\n\n        url = 'javascript:%20document.orderform_2581_1190810811.mode.value=%27add%27;%20javascript:%20document.orderform_2581_1190810811.submit%28%29'\n        self.assertFalse(url_is_from_any_domain(url, ['testdomain.com']))\n        self.assertFalse(url_is_from_any_domain(url+'.testdomain.com', ['testdomain.com']))",
        "begin_line": 17,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider#38",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.UrlUtilsTest",
        "signature": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider(self)",
        "snippet": "    def test_url_is_from_spider(self):\n        spider = Spider(name='example.com')\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', spider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', spider))\n        self.assertFalse(url_is_from_spider('http://www.example.org/some/page.html', spider))\n        self.assertFalse(url_is_from_spider('http://www.example.net/some/page.html', spider))",
        "begin_line": 38,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_class_attributes#45",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.UrlUtilsTest",
        "signature": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_class_attributes(self)",
        "snippet": "    def test_url_is_from_spider_class_attributes(self):\n        class MySpider(Spider):\n            name = 'example.com'\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.org/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.net/some/page.html', MySpider))",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.MySpider.test_url_is_from_spider_class_attributes#45",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.MySpider",
        "signature": "tests.test_utils_url.MySpider.test_url_is_from_spider_class_attributes(self)",
        "snippet": "    def test_url_is_from_spider_class_attributes(self):\n        class MySpider(Spider):\n            name = 'example.com'\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.org/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.net/some/page.html', MySpider))",
        "begin_line": 45,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_with_allowed_domains#53",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.UrlUtilsTest",
        "signature": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_with_allowed_domains(self)",
        "snippet": "    def test_url_is_from_spider_with_allowed_domains(self):\n        spider = Spider(name='example.com', allowed_domains=['example.org', 'example.net'])\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', spider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', spider))\n        self.assertTrue(url_is_from_spider('http://example.com/some/page.html', spider))\n        self.assertTrue(url_is_from_spider('http://www.example.org/some/page.html', spider))\n        self.assertTrue(url_is_from_spider('http://www.example.net/some/page.html', spider))\n        self.assertFalse(url_is_from_spider('http://www.example.us/some/page.html', spider))\n\n        spider = Spider(name='example.com', allowed_domains=set(('example.com', 'example.net')))\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', spider))\n\n        spider = Spider(name='example.com', allowed_domains=('example.com', 'example.net'))\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', spider))",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_with_allowed_domains_class_attributes#68",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.UrlUtilsTest",
        "signature": "tests.test_utils_url.UrlUtilsTest.test_url_is_from_spider_with_allowed_domains_class_attributes(self)",
        "snippet": "    def test_url_is_from_spider_with_allowed_domains_class_attributes(self):\n        class MySpider(Spider):\n            name = 'example.com'\n            allowed_domains = ('example.org', 'example.net')\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://www.example.org/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://www.example.net/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.us/some/page.html', MySpider))",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.MySpider.test_url_is_from_spider_with_allowed_domains_class_attributes#68",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.MySpider",
        "signature": "tests.test_utils_url.MySpider.test_url_is_from_spider_with_allowed_domains_class_attributes(self)",
        "snippet": "    def test_url_is_from_spider_with_allowed_domains_class_attributes(self):\n        class MySpider(Spider):\n            name = 'example.com'\n            allowed_domains = ('example.org', 'example.net')\n        self.assertTrue(url_is_from_spider('http://www.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://sub.example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://example.com/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://www.example.org/some/page.html', MySpider))\n        self.assertTrue(url_is_from_spider('http://www.example.net/some/page.html', MySpider))\n        self.assertFalse(url_is_from_spider('http://www.example.us/some/page.html', MySpider))",
        "begin_line": 68,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url#82",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url(self)",
        "snippet": "    def test_canonicalize_url(self):\n        # simplest case\n        self.assertEqual(canonicalize_url(\"http://www.example.com/\"),\n                                          \"http://www.example.com/\")",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_return_str#87",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_return_str(self)",
        "snippet": "    def test_return_str(self):\n        assert isinstance(canonicalize_url(u\"http://www.example.com\"), str)\n        assert isinstance(canonicalize_url(b\"http://www.example.com\"), str)",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_append_missing_path#91",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_append_missing_path(self)",
        "snippet": "    def test_append_missing_path(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com\"),\n                                          \"http://www.example.com/\")",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_typical_usage#95",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_typical_usage(self)",
        "snippet": "    def test_typical_usage(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?a=1&b=2&c=3\"),\n                                          \"http://www.example.com/do?a=1&b=2&c=3\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?c=1&b=2&a=3\"),\n                                          \"http://www.example.com/do?a=3&b=2&c=1\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?&a=1\"),\n                                          \"http://www.example.com/do?a=1\")",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_sorting#103",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_sorting(self)",
        "snippet": "    def test_sorting(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?c=3&b=5&b=2&a=50\"),\n                                          \"http://www.example.com/do?a=50&b=2&b=5&c=3\")",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_keep_blank_values#107",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_keep_blank_values(self)",
        "snippet": "    def test_keep_blank_values(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&a=2\", keep_blank_values=False),\n                                          \"http://www.example.com/do?a=2\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&a=2\"),\n                                          \"http://www.example.com/do?a=2&b=\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\", keep_blank_values=False),\n                                          \"http://www.example.com/do?a=2\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\"),\n                                          \"http://www.example.com/do?a=2&b=&c=\")\n\n        self.assertEqual(canonicalize_url(u'http://www.example.com/do?1750,4'),\n                                           'http://www.example.com/do?1750%2C4=')",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_spaces#120",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_spaces(self)",
        "snippet": "    def test_spaces(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?q=a space&a=1\"),\n                                          \"http://www.example.com/do?a=1&q=a+space\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?q=a+space&a=1\"),\n                                          \"http://www.example.com/do?a=1&q=a+space\")\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?q=a%20space&a=1\"),\n                                          \"http://www.example.com/do?a=1&q=a+space\")",
        "begin_line": 120,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_path#128",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_path(self)",
        "snippet": "    def test_canonicalize_url_unicode_path(self):\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9\"),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9\")",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_query_string#132",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_query_string(self)",
        "snippet": "    def test_canonicalize_url_unicode_query_string(self):\n        # default encoding for path and query is UTF-8\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\"),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n\n        # passed encoding will affect query string\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\", encoding='latin1'),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?q=r%E9sum%E9\")\n\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9?country=\u0420\u043e\u0441\u0441\u0438\u044f\", encoding='cp1251'),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?country=%D0%EE%F1%F1%E8%FF\")",
        "begin_line": 132,
        "end_line": 142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_query_string_wrong_encoding#144",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_url_unicode_query_string_wrong_encoding(self)",
        "snippet": "    def test_canonicalize_url_unicode_query_string_wrong_encoding(self):\n        # trying to encode with wrong encoding\n        # fallback to UTF-8\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9?currency=\u20ac\", encoding='latin1'),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?currency=%E2%82%AC\")\n\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/r\u00e9sum\u00e9?country=\u0420\u043e\u0441\u0441\u0438\u044f\", encoding='latin1'),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?country=%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F\")",
        "begin_line": 144,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_normalize_percent_encoding_in_paths#153",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_normalize_percent_encoding_in_paths(self)",
        "snippet": "    def test_normalize_percent_encoding_in_paths(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/r%c3%a9sum%c3%a9\"),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9\")\n\n        # non-UTF8 encoded sequences: they should be kept untouched, only upper-cased\n        # 'latin1'-encoded sequence in path\n        self.assertEqual(canonicalize_url(\"http://www.example.com/a%a3do\"),\n                                          \"http://www.example.com/a%A3do\")\n\n        # 'latin1'-encoded path, UTF-8 encoded query string\n        self.assertEqual(canonicalize_url(\"http://www.example.com/a%a3do?q=r%c3%a9sum%c3%a9\"),\n                                          \"http://www.example.com/a%A3do?q=r%C3%A9sum%C3%A9\")\n\n        # 'latin1'-encoded path and query string\n        self.assertEqual(canonicalize_url(\"http://www.example.com/a%a3do?q=r%e9sum%e9\"),\n                                          \"http://www.example.com/a%A3do?q=r%E9sum%E9\")",
        "begin_line": 153,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_normalize_percent_encoding_in_query_arguments#170",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_normalize_percent_encoding_in_query_arguments(self)",
        "snippet": "    def test_normalize_percent_encoding_in_query_arguments(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?k=b%a3\"),\n                                          \"http://www.example.com/do?k=b%A3\")\n\n        self.assertEqual(canonicalize_url(\"http://www.example.com/do?k=r%c3%a9sum%c3%a9\"),\n                                          \"http://www.example.com/do?k=r%C3%A9sum%C3%A9\")",
        "begin_line": 170,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_non_ascii_percent_encoding_in_paths#177",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_non_ascii_percent_encoding_in_paths(self)",
        "snippet": "    def test_non_ascii_percent_encoding_in_paths(self):\n        self.assertEqual(canonicalize_url(\"http://www.example.com/a do?a=1\"),\n                                          \"http://www.example.com/a%20do?a=1\"),\n        self.assertEqual(canonicalize_url(\"http://www.example.com/a %20do?a=1\"),\n                                          \"http://www.example.com/a%20%20do?a=1\"),\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/a do\u00a3.html?a=1\"),\n                                          \"http://www.example.com/a%20do%C2%A3.html?a=1\")\n        self.assertEqual(canonicalize_url(b\"http://www.example.com/a do\\xc2\\xa3.html?a=1\"),\n                                          \"http://www.example.com/a%20do%C2%A3.html?a=1\")",
        "begin_line": 177,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_non_ascii_percent_encoding_in_query_arguments#187",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_non_ascii_percent_encoding_in_query_arguments(self)",
        "snippet": "    def test_non_ascii_percent_encoding_in_query_arguments(self):\n        self.assertEqual(canonicalize_url(u\"http://www.example.com/do?price=\u00a3500&a=5&z=3\"),\n                                          u\"http://www.example.com/do?a=5&price=%C2%A3500&z=3\")\n        self.assertEqual(canonicalize_url(b\"http://www.example.com/do?price=\\xc2\\xa3500&a=5&z=3\"),\n                                          \"http://www.example.com/do?a=5&price=%C2%A3500&z=3\")\n        self.assertEqual(canonicalize_url(b\"http://www.example.com/do?price(\\xc2\\xa3)=500&a=1\"),\n                                          \"http://www.example.com/do?a=1&price%28%C2%A3%29=500\")",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_urls_with_auth_and_ports#195",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_urls_with_auth_and_ports(self)",
        "snippet": "    def test_urls_with_auth_and_ports(self):\n        self.assertEqual(canonicalize_url(u\"http://user:pass@www.example.com:81/do?now=1\"),\n                                          u\"http://user:pass@www.example.com:81/do?now=1\")",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_remove_fragments#199",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_remove_fragments(self)",
        "snippet": "    def test_remove_fragments(self):\n        self.assertEqual(canonicalize_url(u\"http://user:pass@www.example.com/do?a=1#frag\"),\n                                          u\"http://user:pass@www.example.com/do?a=1\")\n        self.assertEqual(canonicalize_url(u\"http://user:pass@www.example.com/do?a=1#frag\", keep_fragments=True),\n                                          u\"http://user:pass@www.example.com/do?a=1#frag\")",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_dont_convert_safe_characters#205",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_dont_convert_safe_characters(self)",
        "snippet": "    def test_dont_convert_safe_characters(self):\n        # dont convert safe characters to percent encoding representation\n        self.assertEqual(canonicalize_url(\n            \"http://www.simplybedrooms.com/White-Bedroom-Furniture/Bedroom-Mirror:-Josephine-Cheval-Mirror.html\"),\n            \"http://www.simplybedrooms.com/White-Bedroom-Furniture/Bedroom-Mirror:-Josephine-Cheval-Mirror.html\")",
        "begin_line": 205,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_safe_characters_unicode#211",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_safe_characters_unicode(self)",
        "snippet": "    def test_safe_characters_unicode(self):\n        # urllib.quote uses a mapping cache of encoded characters. when parsing\n        # an already percent-encoded url, it will fail if that url was not\n        # percent-encoded as utf-8, that's why canonicalize_url must always\n        # convert the urls to string. the following test asserts that\n        # functionality.\n        self.assertEqual(canonicalize_url(u'http://www.example.com/caf%E9-con-leche.htm'),\n                                           'http://www.example.com/caf%E9-con-leche.htm')",
        "begin_line": 211,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_domains_are_case_insensitive#220",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_domains_are_case_insensitive(self)",
        "snippet": "    def test_domains_are_case_insensitive(self):\n        self.assertEqual(canonicalize_url(\"http://www.EXAMPLE.com/\"),\n                                          \"http://www.example.com/\")",
        "begin_line": 220,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_idns#224",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_idns(self)",
        "snippet": "    def test_canonicalize_idns(self):\n        self.assertEqual(canonicalize_url(u'http://www.b\u00fccher.de?q=b\u00fccher'),\n                                           'http://www.xn--bcher-kva.de/?q=b%C3%BCcher')\n        # Japanese (+ reordering query parameters)\n        self.assertEqual(canonicalize_url(u'http://\u306f\u3058\u3081\u3088\u3046.\u307f\u3093\u306a/?query=\u30b5&maxResults=5'),\n                                           'http://xn--p8j9a0d9c9a.xn--q9jyb4c/?maxResults=5&query=%E3%82%B5')",
        "begin_line": 224,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_quoted_slash_and_question_sign#231",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_quoted_slash_and_question_sign(self)",
        "snippet": "    def test_quoted_slash_and_question_sign(self):\n        self.assertEqual(canonicalize_url(\"http://foo.com/AC%2FDC+rocks%3f/?yeah=1\"),\n                         \"http://foo.com/AC%2FDC+rocks%3F/?yeah=1\")\n        self.assertEqual(canonicalize_url(\"http://foo.com/AC%2FDC/\"),\n                         \"http://foo.com/AC%2FDC/\")",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_urlparsed#237",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_urlparsed(self)",
        "snippet": "    def test_canonicalize_urlparsed(self):\n        # canonicalize_url() can be passed an already urlparse'd URL\n        self.assertEqual(canonicalize_url(urlparse(u\"http://www.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\")),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n        self.assertEqual(canonicalize_url(urlparse('http://www.example.com/caf%e9-con-leche.htm')),\n                                          'http://www.example.com/caf%E9-con-leche.htm')\n        self.assertEqual(canonicalize_url(urlparse(\"http://www.example.com/a%a3do?q=r%c3%a9sum%c3%a9\")),\n                                          \"http://www.example.com/a%A3do?q=r%C3%A9sum%C3%A9\")",
        "begin_line": 237,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_parse_url#246",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.CanonicalizeUrlTest",
        "signature": "tests.test_utils_url.CanonicalizeUrlTest.test_canonicalize_parse_url(self)",
        "snippet": "    def test_canonicalize_parse_url(self):\n        # parse_url() wraps urlparse and is used in link extractors\n        self.assertEqual(canonicalize_url(parse_url(u\"http://www.example.com/r\u00e9sum\u00e9?q=r\u00e9sum\u00e9\")),\n                                          \"http://www.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n        self.assertEqual(canonicalize_url(parse_url('http://www.example.com/caf%e9-con-leche.htm')),\n                                          'http://www.example.com/caf%E9-con-leche.htm')\n        self.assertEqual(canonicalize_url(parse_url(\"http://www.example.com/a%a3do?q=r%c3%a9sum%c3%a9\")),\n                                          \"http://www.example.com/a%A3do?q=r%C3%A9sum%C3%A9\")",
        "begin_line": 246,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_add_scheme#258",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_add_scheme(self)",
        "snippet": "    def test_add_scheme(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com'),\n                                               'http://www.example.com')",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_without_subdomain#262",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_without_subdomain(self)",
        "snippet": "    def test_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('example.com'),\n                                               'http://example.com')",
        "begin_line": 262,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_path#266",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_path(self)",
        "snippet": "    def test_path(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/some/page.html'),\n                                               'http://www.example.com/some/page.html')",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_port#270",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_port(self)",
        "snippet": "    def test_port(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com:80'),\n                                               'http://www.example.com:80')",
        "begin_line": 270,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_fragment#274",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_fragment(self)",
        "snippet": "    def test_fragment(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/some/page#frag'),\n                                               'http://www.example.com/some/page#frag')",
        "begin_line": 274,
        "end_line": 276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_query#278",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_query(self)",
        "snippet": "    def test_query(self):\n        self.assertEqual(add_http_if_no_scheme('www.example.com/do?a=1&b=2&c=3'),\n                                               'http://www.example.com/do?a=1&b=2&c=3')",
        "begin_line": 278,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_username_password#282",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_username_password(self)",
        "snippet": "    def test_username_password(self):\n        self.assertEqual(add_http_if_no_scheme('username:password@www.example.com'),\n                                               'http://username:password@www.example.com')",
        "begin_line": 282,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_complete_url#286",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_complete_url(self)",
        "snippet": "    def test_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme('username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'),\n                                               'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag')",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http#290",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http(self)",
        "snippet": "    def test_preserve_http(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com'),\n                                               'http://www.example.com')",
        "begin_line": 290,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_without_subdomain#294",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_without_subdomain(self)",
        "snippet": "    def test_preserve_http_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('http://example.com'),\n                                               'http://example.com')",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_path#298",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_path(self)",
        "snippet": "    def test_preserve_http_path(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com/some/page.html'),\n                                               'http://www.example.com/some/page.html')",
        "begin_line": 298,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_port#302",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_port(self)",
        "snippet": "    def test_preserve_http_port(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com:80'),\n                                               'http://www.example.com:80')",
        "begin_line": 302,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_fragment#306",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_fragment(self)",
        "snippet": "    def test_preserve_http_fragment(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com/some/page#frag'),\n                                               'http://www.example.com/some/page#frag')",
        "begin_line": 306,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_query#310",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_query(self)",
        "snippet": "    def test_preserve_http_query(self):\n        self.assertEqual(add_http_if_no_scheme('http://www.example.com/do?a=1&b=2&c=3'),\n                                               'http://www.example.com/do?a=1&b=2&c=3')",
        "begin_line": 310,
        "end_line": 312,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_username_password#314",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_username_password(self)",
        "snippet": "    def test_preserve_http_username_password(self):\n        self.assertEqual(add_http_if_no_scheme('http://username:password@www.example.com'),\n                                               'http://username:password@www.example.com')",
        "begin_line": 314,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_complete_url#318",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_http_complete_url(self)",
        "snippet": "    def test_preserve_http_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme('http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'),\n                                               'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag')",
        "begin_line": 318,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative#322",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative(self)",
        "snippet": "    def test_protocol_relative(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com'),\n                                               'http://www.example.com')",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_without_subdomain#326",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_without_subdomain(self)",
        "snippet": "    def test_protocol_relative_without_subdomain(self):\n        self.assertEqual(add_http_if_no_scheme('//example.com'),\n                                               'http://example.com')",
        "begin_line": 326,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_path#330",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_path(self)",
        "snippet": "    def test_protocol_relative_path(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com/some/page.html'),\n                                               'http://www.example.com/some/page.html')",
        "begin_line": 330,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_port#334",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_port(self)",
        "snippet": "    def test_protocol_relative_port(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com:80'),\n                                               'http://www.example.com:80')",
        "begin_line": 334,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_fragment#338",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_fragment(self)",
        "snippet": "    def test_protocol_relative_fragment(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com/some/page#frag'),\n                                               'http://www.example.com/some/page#frag')",
        "begin_line": 338,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_query#342",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_query(self)",
        "snippet": "    def test_protocol_relative_query(self):\n        self.assertEqual(add_http_if_no_scheme('//www.example.com/do?a=1&b=2&c=3'),\n                                               'http://www.example.com/do?a=1&b=2&c=3')",
        "begin_line": 342,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_username_password#346",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_username_password(self)",
        "snippet": "    def test_protocol_relative_username_password(self):\n        self.assertEqual(add_http_if_no_scheme('//username:password@www.example.com'),\n                                               'http://username:password@www.example.com')",
        "begin_line": 346,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_complete_url#350",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_protocol_relative_complete_url(self)",
        "snippet": "    def test_protocol_relative_complete_url(self):\n        self.assertEqual(add_http_if_no_scheme('//username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag'),\n                                               'http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag')",
        "begin_line": 350,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_https#354",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_https(self)",
        "snippet": "    def test_preserve_https(self):\n        self.assertEqual(add_http_if_no_scheme('https://www.example.com'),\n                                               'https://www.example.com')",
        "begin_line": 354,
        "end_line": 356,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_ftp#358",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url.AddHttpIfNoScheme",
        "signature": "tests.test_utils_url.AddHttpIfNoScheme.test_preserve_ftp(self)",
        "snippet": "    def test_preserve_ftp(self):\n        self.assertEqual(add_http_if_no_scheme('ftp://www.example.com'),\n                                               'ftp://www.example.com')",
        "begin_line": 358,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.create_guess_scheme_t#366",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url",
        "signature": "tests.test_utils_url.create_guess_scheme_t(args)",
        "snippet": "def create_guess_scheme_t(args):\n    def do_expected(self):\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1]), \\\n            'Wrong scheme guessed: for `%s` got `%s`, expected `%s...`' % (\n                args[0], url, args[1])\n    return do_expected",
        "begin_line": 366,
        "end_line": 372,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.do_expected#367",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url",
        "signature": "tests.test_utils_url.do_expected(self)",
        "snippet": "    def do_expected(self):\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1]), \\\n            'Wrong scheme guessed: for `%s` got `%s`, expected `%s...`' % (\n                args[0], url, args[1])",
        "begin_line": 367,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.create_skipped_scheme_t#374",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url",
        "signature": "tests.test_utils_url.create_skipped_scheme_t(args)",
        "snippet": "def create_skipped_scheme_t(args):\n    def do_expected(self):\n        raise unittest.SkipTest(args[2])\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1])\n    return do_expected",
        "begin_line": 374,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_url.do_expected#375",
        "src_path": "tests/test_utils_url.py",
        "class_name": "tests.test_utils_url",
        "signature": "tests.test_utils_url.do_expected(self)",
        "snippet": "    def do_expected(self):\n        raise unittest.SkipTest(args[2])\n        url = guess_scheme(args[0])\n        assert url.startswith(args[1])",
        "begin_line": 375,
        "end_line": 378,
        "comment": "",
        "is_bug": false
    }
]