[
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.get_upcast_box#25",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64",
        "signature": "pandas.tests.arithmetic.test_timedelta64.get_upcast_box(box, vector)",
        "snippet": "def get_upcast_box(box, vector):\n    \"\"\"\n    Given two box-types, find the one that takes priority\n    \"\"\"\n    if box is DataFrame or isinstance(vector, DataFrame):\n        return DataFrame\n    if box is Series or isinstance(vector, Series):\n        return Series\n    if box is pd.Index or isinstance(vector, pd.Index):\n        return pd.Index\n    return box",
        "begin_line": 25,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedelta64_zerodim#47",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedelta64_zerodim(self, box_with_array)",
        "snippet": "    def test_compare_timedelta64_zerodim(self, box_with_array):\n        # GH#26689 should unbox when comparing with zerodim array\n        box = box_with_array\n        xbox = box_with_array if box_with_array is not pd.Index else np.ndarray\n\n        tdi = pd.timedelta_range(\"2H\", periods=4)\n        other = np.array(tdi.to_numpy()[0])\n\n        tdi = tm.box_expected(tdi, box)\n        res = tdi <= other\n        expected = np.array([True, False, False, False])\n        expected = tm.box_expected(expected, xbox)\n        tm.assert_equal(res, expected)\n\n        with pytest.raises(TypeError):\n            # zero-dim of wrong dtype should still raise\n            tdi >= np.array(4)",
        "begin_line": 47,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedeltalike_scalar#69",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_compare_timedeltalike_scalar(self, box_with_array, td_scalar)",
        "snippet": "    def test_compare_timedeltalike_scalar(self, box_with_array, td_scalar):\n        # regression test for GH#5963\n        box = box_with_array\n        xbox = box if box is not pd.Index else np.ndarray\n        ser = pd.Series([timedelta(days=1), timedelta(days=2)])\n        ser = tm.box_expected(ser, box)\n        actual = ser > td_scalar\n        expected = pd.Series([False, True])\n        expected = tm.box_expected(expected, xbox)\n        tm.assert_equal(actual, expected)",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_td64_comparisons_invalid#81",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeComparisons.test_td64_comparisons_invalid(self, box_with_array, invalid)",
        "snippet": "    def test_td64_comparisons_invalid(self, box_with_array, invalid):\n        # GH#13624 for str\n        box = box_with_array\n        rng = timedelta_range(\"1 days\", periods=10)\n        obj = tm.box_expected(rng, box)\n\n        assert_invalid_comparison(obj, invalid, box)",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comp_nat#94",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comp_nat(self, dtype)",
        "snippet": "    def test_comp_nat(self, dtype):\n        left = pd.TimedeltaIndex(\n            [pd.Timedelta(\"1 days\"), pd.NaT, pd.Timedelta(\"3 days\")]\n        )\n        right = pd.TimedeltaIndex([pd.NaT, pd.NaT, pd.Timedelta(\"3 days\")])\n\n        lhs, rhs = left, right\n        if dtype is object:\n            lhs, rhs = left.astype(object), right.astype(object)\n\n        result = rhs == lhs\n        expected = np.array([False, False, True])\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = rhs != lhs\n        expected = np.array([True, True, False])\n        tm.assert_numpy_array_equal(result, expected)\n\n        expected = np.array([False, False, False])\n        tm.assert_numpy_array_equal(lhs == pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT == rhs, expected)\n\n        expected = np.array([True, True, True])\n        tm.assert_numpy_array_equal(lhs != pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT != lhs, expected)\n\n        expected = np.array([False, False, False])\n        tm.assert_numpy_array_equal(lhs < pd.NaT, expected)\n        tm.assert_numpy_array_equal(pd.NaT > lhs, expected)",
        "begin_line": 94,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_nat#124",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_nat(self)",
        "snippet": "    def test_comparisons_nat(self):\n        tdidx1 = pd.TimedeltaIndex(\n            [\n                \"1 day\",\n                pd.NaT,\n                \"1 day 00:00:01\",\n                pd.NaT,\n                \"1 day 00:00:01\",\n                \"5 day 00:00:03\",\n            ]\n        )\n        tdidx2 = pd.TimedeltaIndex(\n            [\"2 day\", \"2 day\", pd.NaT, pd.NaT, \"1 day 00:00:02\", \"5 days 00:00:03\"]\n        )\n        tdarr = np.array(\n            [\n                np.timedelta64(2, \"D\"),\n                np.timedelta64(2, \"D\"),\n                np.timedelta64(\"nat\"),\n                np.timedelta64(\"nat\"),\n                np.timedelta64(1, \"D\") + np.timedelta64(2, \"s\"),\n                np.timedelta64(5, \"D\") + np.timedelta64(3, \"s\"),\n            ]\n        )\n\n        cases = [(tdidx1, tdidx2), (tdidx1, tdarr)]\n\n        # Check pd.NaT is handles as the same as np.nan\n        for idx1, idx2 in cases:\n\n            result = idx1 < idx2\n            expected = np.array([True, False, False, False, True, False])\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = idx2 > idx1\n            expected = np.array([True, False, False, False, True, False])\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = idx1 <= idx2\n            expected = np.array([True, False, False, False, True, True])\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = idx2 >= idx1\n            expected = np.array([True, False, False, False, True, True])\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = idx1 == idx2\n            expected = np.array([False, False, False, False, False, True])\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = idx1 != idx2\n            expected = np.array([True, True, True, True, True, False])\n            tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 124,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_coverage#179",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayComparisons.test_comparisons_coverage(self)",
        "snippet": "    def test_comparisons_coverage(self):\n        rng = timedelta_range(\"1 days\", periods=10)\n\n        result = rng < rng[3]\n        expected = np.array([True, True, True] + [False] * 7)\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = rng == list(rng)\n        exp = rng == rng\n        tm.assert_numpy_array_equal(result, exp)",
        "begin_line": 179,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_ufunc_coercions#199",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_ufunc_coercions(self)",
        "snippet": "    def test_ufunc_coercions(self):\n        # normal ops are also tested in tseries/test_timedeltas.py\n        idx = TimedeltaIndex([\"2H\", \"4H\", \"6H\", \"8H\", \"10H\"], freq=\"2H\", name=\"x\")\n\n        for result in [idx * 2, np.multiply(idx, 2)]:\n            assert isinstance(result, TimedeltaIndex)\n            exp = TimedeltaIndex([\"4H\", \"8H\", \"12H\", \"16H\", \"20H\"], freq=\"4H\", name=\"x\")\n            tm.assert_index_equal(result, exp)\n            assert result.freq == \"4H\"\n\n        for result in [idx / 2, np.divide(idx, 2)]:\n            assert isinstance(result, TimedeltaIndex)\n            exp = TimedeltaIndex([\"1H\", \"2H\", \"3H\", \"4H\", \"5H\"], freq=\"H\", name=\"x\")\n            tm.assert_index_equal(result, exp)\n            assert result.freq == \"H\"\n\n        idx = TimedeltaIndex([\"2H\", \"4H\", \"6H\", \"8H\", \"10H\"], freq=\"2H\", name=\"x\")\n        for result in [-idx, np.negative(idx)]:\n            assert isinstance(result, TimedeltaIndex)\n            exp = TimedeltaIndex(\n                [\"-2H\", \"-4H\", \"-6H\", \"-8H\", \"-10H\"], freq=\"-2H\", name=\"x\"\n            )\n            tm.assert_index_equal(result, exp)\n            assert result.freq == \"-2H\"\n\n        idx = TimedeltaIndex([\"-2H\", \"-1H\", \"0H\", \"1H\", \"2H\"], freq=\"H\", name=\"x\")\n        for result in [abs(idx), np.absolute(idx)]:\n            assert isinstance(result, TimedeltaIndex)\n            exp = TimedeltaIndex([\"2H\", \"1H\", \"0H\", \"1H\", \"2H\"], freq=None, name=\"x\")\n            tm.assert_index_equal(result, exp)\n            assert result.freq is None",
        "begin_line": 199,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops#231",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops(self)",
        "snippet": "    def test_subtraction_ops(self):\n        # with datetimes/timedelta and tdi/dti\n        tdi = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"], name=\"foo\")\n        dti = pd.date_range(\"20130101\", periods=3, name=\"bar\")\n        td = Timedelta(\"1 days\")\n        dt = Timestamp(\"20130101\")\n\n        msg = \"cannot subtract a datelike from a TimedeltaArray\"\n        with pytest.raises(TypeError, match=msg):\n            tdi - dt\n        with pytest.raises(TypeError, match=msg):\n            tdi - dti\n\n        msg = r\"unsupported operand type\\(s\\) for -\"\n        with pytest.raises(TypeError, match=msg):\n            td - dt\n\n        msg = \"(bad|unsupported) operand type for unary\"\n        with pytest.raises(TypeError, match=msg):\n            td - dti\n\n        result = dt - dti\n        expected = TimedeltaIndex([\"0 days\", \"-1 days\", \"-2 days\"], name=\"bar\")\n        tm.assert_index_equal(result, expected)\n\n        result = dti - dt\n        expected = TimedeltaIndex([\"0 days\", \"1 days\", \"2 days\"], name=\"bar\")\n        tm.assert_index_equal(result, expected)\n\n        result = tdi - td\n        expected = TimedeltaIndex([\"0 days\", pd.NaT, \"1 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected, check_names=False)\n\n        result = td - tdi\n        expected = TimedeltaIndex([\"0 days\", pd.NaT, \"-1 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected, check_names=False)\n\n        result = dti - td\n        expected = DatetimeIndex([\"20121231\", \"20130101\", \"20130102\"], name=\"bar\")\n        tm.assert_index_equal(result, expected, check_names=False)\n\n        result = dt - tdi\n        expected = DatetimeIndex([\"20121231\", pd.NaT, \"20121230\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)",
        "begin_line": 231,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops_with_tz#276",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_subtraction_ops_with_tz(self)",
        "snippet": "    def test_subtraction_ops_with_tz(self):\n\n        # check that dt/dti subtraction ops with tz are validated\n        dti = pd.date_range(\"20130101\", periods=3)\n        ts = Timestamp(\"20130101\")\n        dt = ts.to_pydatetime()\n        dti_tz = pd.date_range(\"20130101\", periods=3).tz_localize(\"US/Eastern\")\n        ts_tz = Timestamp(\"20130101\").tz_localize(\"US/Eastern\")\n        ts_tz2 = Timestamp(\"20130101\").tz_localize(\"CET\")\n        dt_tz = ts_tz.to_pydatetime()\n        td = Timedelta(\"1 days\")\n\n        def _check(result, expected):\n            assert result == expected\n            assert isinstance(result, Timedelta)\n\n        # scalars\n        result = ts - ts\n        expected = Timedelta(\"0 days\")\n        _check(result, expected)\n\n        result = dt_tz - ts_tz\n        expected = Timedelta(\"0 days\")\n        _check(result, expected)\n\n        result = ts_tz - dt_tz\n        expected = Timedelta(\"0 days\")\n        _check(result, expected)\n\n        # tz mismatches\n        msg = \"Timestamp subtraction must have the same timezones or no timezones\"\n        with pytest.raises(TypeError, match=msg):\n            dt_tz - ts\n        msg = \"can't subtract offset-naive and offset-aware datetimes\"\n        with pytest.raises(TypeError, match=msg):\n            dt_tz - dt\n        msg = \"Timestamp subtraction must have the same timezones or no timezones\"\n        with pytest.raises(TypeError, match=msg):\n            dt_tz - ts_tz2\n        msg = \"can't subtract offset-naive and offset-aware datetimes\"\n        with pytest.raises(TypeError, match=msg):\n            dt - dt_tz\n        msg = \"Timestamp subtraction must have the same timezones or no timezones\"\n        with pytest.raises(TypeError, match=msg):\n            ts - dt_tz\n        with pytest.raises(TypeError, match=msg):\n            ts_tz2 - ts\n        with pytest.raises(TypeError, match=msg):\n            ts_tz2 - dt\n        with pytest.raises(TypeError, match=msg):\n            ts_tz - ts_tz2\n\n        # with dti\n        with pytest.raises(TypeError, match=msg):\n            dti - ts_tz\n        with pytest.raises(TypeError, match=msg):\n            dti_tz - ts\n        with pytest.raises(TypeError, match=msg):\n            dti_tz - ts_tz2\n\n        result = dti_tz - dt_tz\n        expected = TimedeltaIndex([\"0 days\", \"1 days\", \"2 days\"])\n        tm.assert_index_equal(result, expected)\n\n        result = dt_tz - dti_tz\n        expected = TimedeltaIndex([\"0 days\", \"-1 days\", \"-2 days\"])\n        tm.assert_index_equal(result, expected)\n\n        result = dti_tz - ts_tz\n        expected = TimedeltaIndex([\"0 days\", \"1 days\", \"2 days\"])\n        tm.assert_index_equal(result, expected)\n\n        result = ts_tz - dti_tz\n        expected = TimedeltaIndex([\"0 days\", \"-1 days\", \"-2 days\"])\n        tm.assert_index_equal(result, expected)\n\n        result = td - td\n        expected = Timedelta(\"0 days\")\n        _check(result, expected)\n\n        result = dti_tz - td\n        expected = DatetimeIndex([\"20121231\", \"20130101\", \"20130102\"], tz=\"US/Eastern\")\n        tm.assert_index_equal(result, expected)",
        "begin_line": 276,
        "end_line": 358,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted._check#288",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted._check(result, expected)",
        "snippet": "        def _check(result, expected):\n            assert result == expected\n            assert isinstance(result, Timedelta)",
        "begin_line": 288,
        "end_line": 290,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_dti_tdi_numeric_ops#360",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_dti_tdi_numeric_ops(self)",
        "snippet": "    def test_dti_tdi_numeric_ops(self):\n        # These are normally union/diff set-like ops\n        tdi = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"], name=\"foo\")\n        dti = pd.date_range(\"20130101\", periods=3, name=\"bar\")\n\n        # TODO(wesm): unused?\n        # td = Timedelta('1 days')\n        # dt = Timestamp('20130101')\n\n        result = tdi - tdi\n        expected = TimedeltaIndex([\"0 days\", pd.NaT, \"0 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        result = tdi + tdi\n        expected = TimedeltaIndex([\"2 days\", pd.NaT, \"4 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        result = dti - tdi  # name will be reset\n        expected = DatetimeIndex([\"20121231\", pd.NaT, \"20130101\"])\n        tm.assert_index_equal(result, expected)",
        "begin_line": 360,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_addition_ops#381",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_addition_ops(self)",
        "snippet": "    def test_addition_ops(self):\n        # with datetimes/timedelta and tdi/dti\n        tdi = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"], name=\"foo\")\n        dti = pd.date_range(\"20130101\", periods=3, name=\"bar\")\n        td = Timedelta(\"1 days\")\n        dt = Timestamp(\"20130101\")\n\n        result = tdi + dt\n        expected = DatetimeIndex([\"20130102\", pd.NaT, \"20130103\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        result = dt + tdi\n        expected = DatetimeIndex([\"20130102\", pd.NaT, \"20130103\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        result = td + tdi\n        expected = TimedeltaIndex([\"2 days\", pd.NaT, \"3 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        result = tdi + td\n        expected = TimedeltaIndex([\"2 days\", pd.NaT, \"3 days\"], name=\"foo\")\n        tm.assert_index_equal(result, expected)\n\n        # unequal length\n        msg = \"cannot add indices of unequal length\"\n        with pytest.raises(ValueError, match=msg):\n            tdi + dti[0:1]\n        with pytest.raises(ValueError, match=msg):\n            tdi[0:1] + dti\n\n        # random indexes\n        with pytest.raises(NullFrequencyError):\n            tdi + pd.Int64Index([1, 2, 3])\n\n        # this is a union!\n        # pytest.raises(TypeError, lambda : Int64Index([1,2,3]) + tdi)\n\n        result = tdi + dti  # name will be reset\n        expected = DatetimeIndex([\"20130102\", pd.NaT, \"20130105\"])\n        tm.assert_index_equal(result, expected)\n\n        result = dti + tdi  # name will be reset\n        expected = DatetimeIndex([\"20130102\", pd.NaT, \"20130105\"])\n        tm.assert_index_equal(result, expected)\n\n        result = dt + td\n        expected = Timestamp(\"20130102\")\n        assert result == expected\n\n        result = td + dt\n        expected = Timestamp(\"20130102\")\n        assert result == expected",
        "begin_line": 381,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_timedelta#437",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_timedelta(self, freq)",
        "snippet": "    def test_timedelta(self, freq):\n        index = pd.date_range(\"1/1/2000\", periods=50, freq=freq)\n\n        shifted = index + timedelta(1)\n        back = shifted + timedelta(-1)\n        tm.assert_index_equal(index, back)\n\n        if freq == \"D\":\n            expected = pd.tseries.offsets.Day(1)\n            assert index.freq == expected\n            assert shifted.freq == expected\n            assert back.freq == expected\n        else:  # freq == 'B'\n            assert index.freq == pd.tseries.offsets.BusinessDay(1)\n            assert shifted.freq is None\n            assert back.freq == pd.tseries.offsets.BusinessDay(1)\n\n        result = index - timedelta(1)\n        expected = index + timedelta(-1)\n        tm.assert_index_equal(result, expected)\n\n        # GH#4134, buggy with timedeltas\n        rng = pd.date_range(\"2013\", \"2014\")\n        s = Series(rng)\n        result1 = rng - pd.offsets.Hour(1)\n        result2 = DatetimeIndex(s - np.timedelta64(100000000))\n        result3 = rng - np.timedelta64(100000000)\n        result4 = DatetimeIndex(s - pd.offsets.Hour(1))\n        tm.assert_index_equal(result1, result4)\n        tm.assert_index_equal(result2, result3)",
        "begin_line": 437,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tda_add_sub_index#468",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArithmeticUnsorted.test_tda_add_sub_index(self)",
        "snippet": "    def test_tda_add_sub_index(self):\n        # Check that TimedeltaArray defers to Index on arithmetic ops\n        tdi = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"])\n        tda = tdi.array\n\n        dti = pd.date_range(\"1999-12-31\", periods=3, freq=\"D\")\n\n        result = tda + dti\n        expected = tdi + dti\n        tm.assert_index_equal(result, expected)\n\n        result = tda + tdi\n        expected = tdi + tdi\n        tm.assert_index_equal(result, expected)\n\n        result = tda - tdi\n        expected = tdi - tdi\n        tm.assert_index_equal(result, expected)",
        "begin_line": 468,
        "end_line": 485,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_timestamp_nat_masking#491",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_timestamp_nat_masking(self)",
        "snippet": "    def test_tdi_add_timestamp_nat_masking(self):\n        # GH#17991 checking for overflow-masking with NaT\n        tdinat = pd.to_timedelta([\"24658 days 11:15:00\", \"NaT\"])\n\n        tsneg = Timestamp(\"1950-01-01\")\n        ts_neg_variants = [\n            tsneg,\n            tsneg.to_pydatetime(),\n            tsneg.to_datetime64().astype(\"datetime64[ns]\"),\n            tsneg.to_datetime64().astype(\"datetime64[D]\"),\n        ]\n\n        tspos = Timestamp(\"1980-01-01\")\n        ts_pos_variants = [\n            tspos,\n            tspos.to_pydatetime(),\n            tspos.to_datetime64().astype(\"datetime64[ns]\"),\n            tspos.to_datetime64().astype(\"datetime64[D]\"),\n        ]\n\n        for variant in ts_neg_variants + ts_pos_variants:\n            res = tdinat + variant\n            assert res[1] is pd.NaT",
        "begin_line": 491,
        "end_line": 513,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_overflow#515",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestAddSubNaTMasking.test_tdi_add_overflow(self)",
        "snippet": "    def test_tdi_add_overflow(self):\n        # See GH#14068\n        # preliminary test scalar analogue of vectorized tests below\n        with pytest.raises(OutOfBoundsDatetime):\n            pd.to_timedelta(106580, \"D\") + Timestamp(\"2000\")\n        with pytest.raises(OutOfBoundsDatetime):\n            Timestamp(\"2000\") + pd.to_timedelta(106580, \"D\")\n\n        _NaT = int(pd.NaT) + 1\n        msg = \"Overflow in int64 addition\"\n        with pytest.raises(OverflowError, match=msg):\n            pd.to_timedelta([106580], \"D\") + Timestamp(\"2000\")\n        with pytest.raises(OverflowError, match=msg):\n            Timestamp(\"2000\") + pd.to_timedelta([106580], \"D\")\n        with pytest.raises(OverflowError, match=msg):\n            pd.to_timedelta([_NaT]) - Timedelta(\"1 days\")\n        with pytest.raises(OverflowError, match=msg):\n            pd.to_timedelta([\"5 days\", _NaT]) - Timedelta(\"1 days\")\n        with pytest.raises(OverflowError, match=msg):\n            (\n                pd.to_timedelta([_NaT, \"5 days\", \"1 hours\"])\n                - pd.to_timedelta([\"7 seconds\", _NaT, \"4 hours\"])\n            )\n\n        # These should not overflow!\n        exp = TimedeltaIndex([pd.NaT])\n        result = pd.to_timedelta([pd.NaT]) - Timedelta(\"1 days\")\n        tm.assert_index_equal(result, exp)\n\n        exp = TimedeltaIndex([\"4 days\", pd.NaT])\n        result = pd.to_timedelta([\"5 days\", pd.NaT]) - Timedelta(\"1 days\")\n        tm.assert_index_equal(result, exp)\n\n        exp = TimedeltaIndex([pd.NaT, pd.NaT, \"5 hours\"])\n        result = pd.to_timedelta([pd.NaT, \"5 days\", \"1 hours\"]) + pd.to_timedelta(\n            [\"7 seconds\", pd.NaT, \"4 hours\"]\n        )\n        tm.assert_index_equal(result, exp)",
        "begin_line": 515,
        "end_line": 552,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64_df_add_int_frame#559",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64_df_add_int_frame(self)",
        "snippet": "    def test_td64_df_add_int_frame(self):\n        # GH#22696 Check that we don't dispatch to numpy implementation,\n        #  which treats int64 as m8[ns]\n        tdi = pd.timedelta_range(\"1\", periods=3)\n        df = tdi.to_frame()\n        other = pd.DataFrame([1, 2, 3], index=tdi)  # indexed like `df`\n        with pytest.raises(TypeError):\n            df + other\n        with pytest.raises(TypeError):\n            other + df\n        with pytest.raises(TypeError):\n            df - other\n        with pytest.raises(TypeError):\n            other - df",
        "begin_line": 559,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta_ops_with_missing_values#576",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta_ops_with_missing_values(self)",
        "snippet": "    def test_timedelta_ops_with_missing_values(self):\n        # setup\n        s1 = pd.to_timedelta(Series([\"00:00:01\"]))\n        s2 = pd.to_timedelta(Series([\"00:00:02\"]))\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            # Passing datetime64-dtype data to TimedeltaIndex is deprecated\n            sn = pd.to_timedelta(Series([pd.NaT]))\n\n        df1 = pd.DataFrame([\"00:00:01\"]).apply(pd.to_timedelta)\n        df2 = pd.DataFrame([\"00:00:02\"]).apply(pd.to_timedelta)\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            # Passing datetime64-dtype data to TimedeltaIndex is deprecated\n            dfn = pd.DataFrame([pd.NaT]).apply(pd.to_timedelta)\n\n        scalar1 = pd.to_timedelta(\"00:00:01\")\n        scalar2 = pd.to_timedelta(\"00:00:02\")\n        timedelta_NaT = pd.to_timedelta(\"NaT\")\n\n        actual = scalar1 + scalar1\n        assert actual == scalar2\n        actual = scalar2 - scalar1\n        assert actual == scalar1\n\n        actual = s1 + s1\n        tm.assert_series_equal(actual, s2)\n        actual = s2 - s1\n        tm.assert_series_equal(actual, s1)\n\n        actual = s1 + scalar1\n        tm.assert_series_equal(actual, s2)\n        actual = scalar1 + s1\n        tm.assert_series_equal(actual, s2)\n        actual = s2 - scalar1\n        tm.assert_series_equal(actual, s1)\n        actual = -scalar1 + s2\n        tm.assert_series_equal(actual, s1)\n\n        actual = s1 + timedelta_NaT\n        tm.assert_series_equal(actual, sn)\n        actual = timedelta_NaT + s1\n        tm.assert_series_equal(actual, sn)\n        actual = s1 - timedelta_NaT\n        tm.assert_series_equal(actual, sn)\n        actual = -timedelta_NaT + s1\n        tm.assert_series_equal(actual, sn)\n\n        with pytest.raises(TypeError):\n            s1 + np.nan\n        with pytest.raises(TypeError):\n            np.nan + s1\n        with pytest.raises(TypeError):\n            s1 - np.nan\n        with pytest.raises(TypeError):\n            -np.nan + s1\n\n        actual = s1 + pd.NaT\n        tm.assert_series_equal(actual, sn)\n        actual = s2 - pd.NaT\n        tm.assert_series_equal(actual, sn)\n\n        actual = s1 + df1\n        tm.assert_frame_equal(actual, df2)\n        actual = s2 - df1\n        tm.assert_frame_equal(actual, df1)\n        actual = df1 + s1\n        tm.assert_frame_equal(actual, df2)\n        actual = df2 - s1\n        tm.assert_frame_equal(actual, df1)\n\n        actual = df1 + df1\n        tm.assert_frame_equal(actual, df2)\n        actual = df2 - df1\n        tm.assert_frame_equal(actual, df1)\n\n        actual = df1 + scalar1\n        tm.assert_frame_equal(actual, df2)\n        actual = df2 - scalar1\n        tm.assert_frame_equal(actual, df1)\n\n        actual = df1 + timedelta_NaT\n        tm.assert_frame_equal(actual, dfn)\n        actual = df1 - timedelta_NaT\n        tm.assert_frame_equal(actual, dfn)\n\n        with pytest.raises(TypeError):\n            df1 + np.nan\n        with pytest.raises(TypeError):\n            df1 - np.nan\n\n        actual = df1 + pd.NaT  # NaT is datetime, not timedelta\n        tm.assert_frame_equal(actual, dfn)\n        actual = df1 - pd.NaT\n        tm.assert_frame_equal(actual, dfn)",
        "begin_line": 576,
        "end_line": 668,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64#672",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64(self)",
        "snippet": "    def test_operators_timedelta64(self):\n        # series ops\n        v1 = pd.date_range(\"2012-1-1\", periods=3, freq=\"D\")\n        v2 = pd.date_range(\"2012-1-2\", periods=3, freq=\"D\")\n        rs = Series(v2) - Series(v1)\n        xp = Series(1e9 * 3600 * 24, rs.index).astype(\"int64\").astype(\"timedelta64[ns]\")\n        tm.assert_series_equal(rs, xp)\n        assert rs.dtype == \"timedelta64[ns]\"\n\n        df = DataFrame(dict(A=v1))\n        td = Series([timedelta(days=i) for i in range(3)])\n        assert td.dtype == \"timedelta64[ns]\"\n\n        # series on the rhs\n        result = df[\"A\"] - df[\"A\"].shift()\n        assert result.dtype == \"timedelta64[ns]\"\n\n        result = df[\"A\"] + td\n        assert result.dtype == \"M8[ns]\"\n\n        # scalar Timestamp on rhs\n        maxa = df[\"A\"].max()\n        assert isinstance(maxa, Timestamp)\n\n        resultb = df[\"A\"] - df[\"A\"].max()\n        assert resultb.dtype == \"timedelta64[ns]\"\n\n        # timestamp on lhs\n        result = resultb + df[\"A\"]\n        values = [Timestamp(\"20111230\"), Timestamp(\"20120101\"), Timestamp(\"20120103\")]\n        expected = Series(values, name=\"A\")\n        tm.assert_series_equal(result, expected)\n\n        # datetimes on rhs\n        result = df[\"A\"] - datetime(2001, 1, 1)\n        expected = Series([timedelta(days=4017 + i) for i in range(3)], name=\"A\")\n        tm.assert_series_equal(result, expected)\n        assert result.dtype == \"m8[ns]\"\n\n        d = datetime(2001, 1, 1, 3, 4)\n        resulta = df[\"A\"] - d\n        assert resulta.dtype == \"m8[ns]\"\n\n        # roundtrip\n        resultb = resulta + d\n        tm.assert_series_equal(df[\"A\"], resultb)\n\n        # timedeltas on rhs\n        td = timedelta(days=1)\n        resulta = df[\"A\"] + td\n        resultb = resulta - td\n        tm.assert_series_equal(resultb, df[\"A\"])\n        assert resultb.dtype == \"M8[ns]\"\n\n        # roundtrip\n        td = timedelta(minutes=5, seconds=3)\n        resulta = df[\"A\"] + td\n        resultb = resulta - td\n        tm.assert_series_equal(df[\"A\"], resultb)\n        assert resultb.dtype == \"M8[ns]\"\n\n        # inplace\n        value = rs[2] + np.timedelta64(timedelta(minutes=5, seconds=1))\n        rs[2] += np.timedelta64(timedelta(minutes=5, seconds=1))\n        assert rs[2] == value",
        "begin_line": 672,
        "end_line": 736,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_ops_nat#738",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_ops_nat(self)",
        "snippet": "    def test_timedelta64_ops_nat(self):\n        # GH 11349\n        timedelta_series = Series([NaT, Timedelta(\"1s\")])\n        nat_series_dtype_timedelta = Series([NaT, NaT], dtype=\"timedelta64[ns]\")\n        single_nat_dtype_timedelta = Series([NaT], dtype=\"timedelta64[ns]\")\n\n        # subtraction\n        tm.assert_series_equal(timedelta_series - NaT, nat_series_dtype_timedelta)\n        tm.assert_series_equal(-NaT + timedelta_series, nat_series_dtype_timedelta)\n\n        tm.assert_series_equal(\n            timedelta_series - single_nat_dtype_timedelta, nat_series_dtype_timedelta\n        )\n        tm.assert_series_equal(\n            -single_nat_dtype_timedelta + timedelta_series, nat_series_dtype_timedelta\n        )\n\n        # addition\n        tm.assert_series_equal(\n            nat_series_dtype_timedelta + NaT, nat_series_dtype_timedelta\n        )\n        tm.assert_series_equal(\n            NaT + nat_series_dtype_timedelta, nat_series_dtype_timedelta\n        )\n\n        tm.assert_series_equal(\n            nat_series_dtype_timedelta + single_nat_dtype_timedelta,\n            nat_series_dtype_timedelta,\n        )\n        tm.assert_series_equal(\n            single_nat_dtype_timedelta + nat_series_dtype_timedelta,\n            nat_series_dtype_timedelta,\n        )\n\n        tm.assert_series_equal(timedelta_series + NaT, nat_series_dtype_timedelta)\n        tm.assert_series_equal(NaT + timedelta_series, nat_series_dtype_timedelta)\n\n        tm.assert_series_equal(\n            timedelta_series + single_nat_dtype_timedelta, nat_series_dtype_timedelta\n        )\n        tm.assert_series_equal(\n            single_nat_dtype_timedelta + timedelta_series, nat_series_dtype_timedelta\n        )\n\n        tm.assert_series_equal(\n            nat_series_dtype_timedelta + NaT, nat_series_dtype_timedelta\n        )\n        tm.assert_series_equal(\n            NaT + nat_series_dtype_timedelta, nat_series_dtype_timedelta\n        )\n\n        tm.assert_series_equal(\n            nat_series_dtype_timedelta + single_nat_dtype_timedelta,\n            nat_series_dtype_timedelta,\n        )\n        tm.assert_series_equal(\n            single_nat_dtype_timedelta + nat_series_dtype_timedelta,\n            nat_series_dtype_timedelta,\n        )\n\n        # multiplication\n        tm.assert_series_equal(\n            nat_series_dtype_timedelta * 1.0, nat_series_dtype_timedelta\n        )\n        tm.assert_series_equal(\n            1.0 * nat_series_dtype_timedelta, nat_series_dtype_timedelta\n        )\n\n        tm.assert_series_equal(timedelta_series * 1, timedelta_series)\n        tm.assert_series_equal(1 * timedelta_series, timedelta_series)\n\n        tm.assert_series_equal(timedelta_series * 1.5, Series([NaT, Timedelta(\"1.5s\")]))\n        tm.assert_series_equal(1.5 * timedelta_series, Series([NaT, Timedelta(\"1.5s\")]))\n\n        tm.assert_series_equal(timedelta_series * np.nan, nat_series_dtype_timedelta)\n        tm.assert_series_equal(np.nan * timedelta_series, nat_series_dtype_timedelta)\n\n        # division\n        tm.assert_series_equal(timedelta_series / 2, Series([NaT, Timedelta(\"0.5s\")]))\n        tm.assert_series_equal(timedelta_series / 2.0, Series([NaT, Timedelta(\"0.5s\")]))\n        tm.assert_series_equal(timedelta_series / np.nan, nat_series_dtype_timedelta)",
        "begin_line": 738,
        "end_line": 818,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_invalid#824",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_invalid(self, box_with_array, other)",
        "snippet": "    def test_td64arr_add_sub_invalid(self, box_with_array, other):\n        # GH#13624 for str\n        tdi = TimedeltaIndex([\"1 day\", \"2 days\"])\n        tdarr = tm.box_expected(tdi, box_with_array)\n\n        with pytest.raises(TypeError):\n            tdarr + other\n        with pytest.raises(TypeError):\n            other + tdarr\n        with pytest.raises(TypeError):\n            tdarr - other\n        with pytest.raises(TypeError):\n            other - tdarr",
        "begin_line": 824,
        "end_line": 836,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_period#839",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_period(self, box_with_array, freq)",
        "snippet": "    def test_td64arr_sub_period(self, box_with_array, freq):\n        # GH#13078\n        # not supported, check TypeError\n        p = pd.Period(\"2011-01-01\", freq=\"D\")\n        idx = TimedeltaIndex([\"1 hours\", \"2 hours\"], freq=freq)\n        idx = tm.box_expected(idx, box_with_array)\n\n        with pytest.raises(TypeError):\n            idx - p\n\n        with pytest.raises(TypeError):\n            p - idx",
        "begin_line": 839,
        "end_line": 850,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_pi#854",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_pi(self, box_with_array, tdi_freq, pi_freq)",
        "snippet": "    def test_td64arr_sub_pi(self, box_with_array, tdi_freq, pi_freq):\n        # GH#20049 subtracting PeriodIndex should raise TypeError\n        tdi = TimedeltaIndex([\"1 hours\", \"2 hours\"], freq=tdi_freq)\n        dti = Timestamp(\"2018-03-07 17:16:40\") + tdi\n        pi = dti.to_period(pi_freq)\n\n        # TODO: parametrize over box for pi?\n        tdi = tm.box_expected(tdi, box_with_array)\n        with pytest.raises(TypeError):\n            tdi - pi",
        "begin_line": 854,
        "end_line": 863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timestamp_raises#868",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timestamp_raises(self, box_with_array)",
        "snippet": "    def test_td64arr_sub_timestamp_raises(self, box_with_array):\n        idx = TimedeltaIndex([\"1 day\", \"2 day\"])\n        idx = tm.box_expected(idx, box_with_array)\n\n        msg = (\n            \"cannot subtract a datelike from|\"\n            \"Could not operate|\"\n            \"cannot perform operation\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            idx - Timestamp(\"2011-01-01\")",
        "begin_line": 868,
        "end_line": 878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timestamp#880",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timestamp(self, box_with_array, tz_naive_fixture)",
        "snippet": "    def test_td64arr_add_timestamp(self, box_with_array, tz_naive_fixture):\n        # GH#23215\n\n        # TODO: parametrize over scalar datetime types?\n        tz = tz_naive_fixture\n        other = Timestamp(\"2011-01-01\", tz=tz)\n\n        idx = TimedeltaIndex([\"1 day\", \"2 day\"])\n        expected = DatetimeIndex([\"2011-01-02\", \"2011-01-03\"], tz=tz)\n\n        idx = tm.box_expected(idx, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = idx + other\n        tm.assert_equal(result, expected)\n\n        result = other + idx\n        tm.assert_equal(result, expected)",
        "begin_line": 880,
        "end_line": 897,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_datetimelike_scalar#907",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array)",
        "snippet": "    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):\n        # GH#11925, GH#29558\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.date_range(\"2012-01-02\", periods=3)\n\n        tdarr = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        tm.assert_equal(ts + tdarr, expected)\n        tm.assert_equal(tdarr + ts, expected)\n\n        expected2 = pd.date_range(\"2011-12-31\", periods=3, freq=\"-1D\")\n        expected2 = tm.box_expected(expected2, box_with_array)\n\n        tm.assert_equal(ts - tdarr, expected2)\n        tm.assert_equal(ts + (-tdarr), expected2)\n\n        with pytest.raises(TypeError):\n            tdarr - ts",
        "begin_line": 907,
        "end_line": 925,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_sub_dt64_array#927",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_sub_dt64_array(self, box_with_array)",
        "snippet": "    def test_tdi_sub_dt64_array(self, box_with_array):\n        dti = pd.date_range(\"2016-01-01\", periods=3)\n        tdi = dti - dti.shift(1)\n        dtarr = dti.values\n        expected = pd.DatetimeIndex(dtarr) - tdi\n\n        tdi = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        with pytest.raises(TypeError):\n            tdi - dtarr\n\n        # TimedeltaIndex.__rsub__\n        result = dtarr - tdi\n        tm.assert_equal(result, expected)",
        "begin_line": 927,
        "end_line": 941,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_add_dt64_array#943",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_tdi_add_dt64_array(self, box_with_array)",
        "snippet": "    def test_tdi_add_dt64_array(self, box_with_array):\n        dti = pd.date_range(\"2016-01-01\", periods=3)\n        tdi = dti - dti.shift(1)\n        dtarr = dti.values\n        expected = pd.DatetimeIndex(dtarr) + tdi\n\n        tdi = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdi + dtarr\n        tm.assert_equal(result, expected)\n        result = dtarr + tdi\n        tm.assert_equal(result, expected)",
        "begin_line": 943,
        "end_line": 955,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_datetime64_nat#957",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_datetime64_nat(self, box_with_array)",
        "snippet": "    def test_td64arr_add_datetime64_nat(self, box_with_array):\n        # GH#23215\n        other = np.datetime64(\"NaT\")\n\n        tdi = timedelta_range(\"1 day\", periods=3)\n        expected = pd.DatetimeIndex([\"NaT\", \"NaT\", \"NaT\"])\n\n        tdser = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        tm.assert_equal(tdser + other, expected)\n        tm.assert_equal(other + tdser, expected)",
        "begin_line": 957,
        "end_line": 968,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_numeric_invalid#987",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_numeric_invalid(self, box_with_array, other)",
        "snippet": "    def test_td64arr_addsub_numeric_invalid(self, box_with_array, other):\n        box = box_with_array\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        tdser = tm.box_expected(tdser, box)\n\n        err = TypeError\n        if box in [pd.Index, tm.to_array] and not isinstance(other, float):\n            err = NullFrequencyError\n\n        with pytest.raises(err):\n            tdser + other\n        with pytest.raises(err):\n            other + tdser\n        with pytest.raises(err):\n            tdser - other\n        with pytest.raises(err):\n            other - tdser",
        "begin_line": 987,
        "end_line": 1003,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_numeric_arr_invalid#1030",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_numeric_arr_invalid(self, box_with_array, vec, dtype)",
        "snippet": "    def test_td64arr_add_sub_numeric_arr_invalid(self, box_with_array, vec, dtype):\n        box = box_with_array\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        tdser = tm.box_expected(tdser, box)\n        err = TypeError\n        if box in [pd.Index, tm.to_array] and not dtype.startswith(\"float\"):\n            err = NullFrequencyError\n\n        vector = vec.astype(dtype)\n        with pytest.raises(err):\n            tdser + vector\n        with pytest.raises(err):\n            vector + tdser\n        with pytest.raises(err):\n            tdser - vector\n        with pytest.raises(err):\n            vector - tdser",
        "begin_line": 1030,
        "end_line": 1046,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64_with_timedelta#1052",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_operators_timedelta64_with_timedelta(self, scalar_td)",
        "snippet": "    def test_operators_timedelta64_with_timedelta(self, scalar_td):\n        # smoke tests\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        td1 + scalar_td\n        scalar_td + td1\n        td1 - scalar_td\n        scalar_td - td1\n        td1 / scalar_td\n        scalar_td / td1",
        "begin_line": 1052,
        "end_line": 1062,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_timedeltas#1065",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_timedeltas(self)",
        "snippet": "    def test_timedelta64_operations_with_timedeltas(self):\n        # td operate with td\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td2 = timedelta(minutes=5, seconds=4)\n        result = td1 - td2\n        expected = Series([timedelta(seconds=0)] * 3) - Series(\n            [timedelta(seconds=1)] * 3\n        )\n        assert result.dtype == \"m8[ns]\"\n        tm.assert_series_equal(result, expected)\n\n        result2 = td2 - td1\n        expected = Series([timedelta(seconds=1)] * 3) - Series(\n            [timedelta(seconds=0)] * 3\n        )\n        tm.assert_series_equal(result2, expected)\n\n        # roundtrip\n        tm.assert_series_equal(result + td2, td1)\n\n        # Now again, using pd.to_timedelta, which should build\n        # a Series or a scalar, depending on input.\n        td1 = Series(pd.to_timedelta([\"00:05:03\"] * 3))\n        td2 = pd.to_timedelta(\"00:05:04\")\n        result = td1 - td2\n        expected = Series([timedelta(seconds=0)] * 3) - Series(\n            [timedelta(seconds=1)] * 3\n        )\n        assert result.dtype == \"m8[ns]\"\n        tm.assert_series_equal(result, expected)\n\n        result2 = td2 - td1\n        expected = Series([timedelta(seconds=1)] * 3) - Series(\n            [timedelta(seconds=0)] * 3\n        )\n        tm.assert_series_equal(result2, expected)\n\n        # roundtrip\n        tm.assert_series_equal(result + td2, td1)",
        "begin_line": 1065,
        "end_line": 1103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_td64_array#1105",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_td64_array(self, box_with_array)",
        "snippet": "    def test_td64arr_add_td64_array(self, box_with_array):\n        box = box_with_array\n        dti = pd.date_range(\"2016-01-01\", periods=3)\n        tdi = dti - dti.shift(1)\n        tdarr = tdi.values\n\n        expected = 2 * tdi\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, box)\n\n        result = tdi + tdarr\n        tm.assert_equal(result, expected)\n        result = tdarr + tdi\n        tm.assert_equal(result, expected)",
        "begin_line": 1105,
        "end_line": 1118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_td64_array#1120",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_td64_array(self, box_with_array)",
        "snippet": "    def test_td64arr_sub_td64_array(self, box_with_array):\n        box = box_with_array\n        dti = pd.date_range(\"2016-01-01\", periods=3)\n        tdi = dti - dti.shift(1)\n        tdarr = tdi.values\n\n        expected = 0 * tdi\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, box)\n\n        result = tdi - tdarr\n        tm.assert_equal(result, expected)\n        result = tdarr - tdi\n        tm.assert_equal(result, expected)",
        "begin_line": 1120,
        "end_line": 1133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_tdi#1144",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_tdi(self, box, names)",
        "snippet": "    def test_td64arr_add_sub_tdi(self, box, names):\n        # GH#17250 make sure result dtype is correct\n        # GH#19043 make sure names are propagated correctly\n        if box is pd.DataFrame and names[1] == \"Venkman\":\n            pytest.skip(\n                \"Name propagation for DataFrame does not behave like \"\n                \"it does for Index/Series\"\n            )\n\n        tdi = TimedeltaIndex([\"0 days\", \"1 day\"], name=names[0])\n        ser = Series([Timedelta(hours=3), Timedelta(hours=4)], name=names[1])\n        expected = Series(\n            [Timedelta(hours=3), Timedelta(days=1, hours=4)], name=names[2]\n        )\n\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n\n        result = tdi + ser\n        tm.assert_equal(result, expected)\n        if box is not pd.DataFrame:\n            assert result.dtype == \"timedelta64[ns]\"\n        else:\n            assert result.dtypes[0] == \"timedelta64[ns]\"\n\n        result = ser + tdi\n        tm.assert_equal(result, expected)\n        if box is not pd.DataFrame:\n            assert result.dtype == \"timedelta64[ns]\"\n        else:\n            assert result.dtypes[0] == \"timedelta64[ns]\"\n\n        expected = Series(\n            [Timedelta(hours=-3), Timedelta(days=1, hours=-4)], name=names[2]\n        )\n        expected = tm.box_expected(expected, box)\n\n        result = tdi - ser\n        tm.assert_equal(result, expected)\n        if box is not pd.DataFrame:\n            assert result.dtype == \"timedelta64[ns]\"\n        else:\n            assert result.dtypes[0] == \"timedelta64[ns]\"\n\n        result = ser - tdi\n        tm.assert_equal(result, -expected)\n        if box is not pd.DataFrame:\n            assert result.dtype == \"timedelta64[ns]\"\n        else:\n            assert result.dtypes[0] == \"timedelta64[ns]\"",
        "begin_line": 1144,
        "end_line": 1193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_td64_nat#1195",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_td64_nat(self, box_with_array)",
        "snippet": "    def test_td64arr_add_sub_td64_nat(self, box_with_array):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        box = box_with_array\n        tdi = pd.TimedeltaIndex([NaT, Timedelta(\"1s\")])\n        other = np.timedelta64(\"NaT\")\n        expected = pd.TimedeltaIndex([\"NaT\"] * 2)\n\n        obj = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, box)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        result = other - obj\n        tm.assert_equal(result, expected)",
        "begin_line": 1195,
        "end_line": 1212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_NaT#1214",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_NaT(self, box_with_array)",
        "snippet": "    def test_td64arr_sub_NaT(self, box_with_array):\n        # GH#18808\n        box = box_with_array\n        ser = Series([NaT, Timedelta(\"1s\")])\n        expected = Series([NaT, NaT], dtype=\"timedelta64[ns]\")\n\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n\n        res = ser - pd.NaT\n        tm.assert_equal(res, expected)",
        "begin_line": 1214,
        "end_line": 1224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timedeltalike#1226",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_timedeltalike(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_add_timedeltalike(self, two_hours, box_with_array):\n        # only test adding/sub offsets as + is now numeric\n        box = box_with_array\n        rng = timedelta_range(\"1 days\", \"10 days\")\n        expected = timedelta_range(\"1 days 02:00:00\", \"10 days 02:00:00\", freq=\"D\")\n        rng = tm.box_expected(rng, box)\n        expected = tm.box_expected(expected, box)\n\n        result = rng + two_hours\n        tm.assert_equal(result, expected)",
        "begin_line": 1226,
        "end_line": 1235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timedeltalike#1237",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_timedeltalike(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_sub_timedeltalike(self, two_hours, box_with_array):\n        # only test adding/sub offsets as - is now numeric\n        box = box_with_array\n        rng = timedelta_range(\"1 days\", \"10 days\")\n        expected = timedelta_range(\"0 days 22:00:00\", \"9 days 22:00:00\")\n\n        rng = tm.box_expected(rng, box)\n        expected = tm.box_expected(expected, box)\n\n        result = rng - two_hours\n        tm.assert_equal(result, expected)",
        "begin_line": 1237,
        "end_line": 1247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_DateOffset#1253",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_timedelta64_operations_with_DateOffset(self)",
        "snippet": "    def test_timedelta64_operations_with_DateOffset(self):\n        # GH#10699\n        td = Series([timedelta(minutes=5, seconds=3)] * 3)\n        result = td + pd.offsets.Minute(1)\n        expected = Series([timedelta(minutes=6, seconds=3)] * 3)\n        tm.assert_series_equal(result, expected)\n\n        result = td - pd.offsets.Minute(1)\n        expected = Series([timedelta(minutes=4, seconds=3)] * 3)\n        tm.assert_series_equal(result, expected)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            result = td + Series(\n                [pd.offsets.Minute(1), pd.offsets.Second(3), pd.offsets.Hour(2)]\n            )\n        expected = Series(\n            [\n                timedelta(minutes=6, seconds=3),\n                timedelta(minutes=5, seconds=6),\n                timedelta(hours=2, minutes=5, seconds=3),\n            ]\n        )\n        tm.assert_series_equal(result, expected)\n\n        result = td + pd.offsets.Minute(1) + pd.offsets.Second(12)\n        expected = Series([timedelta(minutes=6, seconds=15)] * 3)\n        tm.assert_series_equal(result, expected)\n\n        # valid DateOffsets\n        for do in [\"Hour\", \"Minute\", \"Second\", \"Day\", \"Micro\", \"Milli\", \"Nano\"]:\n            op = getattr(pd.offsets, do)\n            td + op(5)\n            op(5) + td\n            td - op(5)\n            op(5) - td",
        "begin_line": 1253,
        "end_line": 1287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index#1292",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_index(self, names, box)",
        "snippet": "    def test_td64arr_add_offset_index(self, names, box):\n        # GH#18849, GH#19744\n        if box is pd.DataFrame and names[1] == \"bar\":\n            pytest.skip(\n                \"Name propagation for DataFrame does not behave like \"\n                \"it does for Index/Series\"\n            )\n\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"], name=names[0])\n        other = pd.Index([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)], name=names[1])\n\n        expected = TimedeltaIndex(\n            [tdi[n] + other[n] for n in range(len(tdi))], freq=\"infer\", name=names[2]\n        )\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, box)\n\n        # The DataFrame operation is transposed and so operates as separate\n        #  scalar operations, which do not issue a PerformanceWarning\n        warn = PerformanceWarning if box is not pd.DataFrame else None\n        with tm.assert_produces_warning(warn):\n            res = tdi + other\n        tm.assert_equal(res, expected)\n\n        with tm.assert_produces_warning(warn):\n            res2 = other + tdi\n        tm.assert_equal(res2, expected)",
        "begin_line": 1292,
        "end_line": 1318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_array#1322",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_add_offset_array(self, box_with_array)",
        "snippet": "    def test_td64arr_add_offset_array(self, box_with_array):\n        # GH#18849\n        box = box_with_array\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"])\n        other = np.array([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)])\n\n        expected = TimedeltaIndex(\n            [tdi[n] + other[n] for n in range(len(tdi))], freq=\"infer\"\n        )\n\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, box)\n\n        # The DataFrame operation is transposed and so operates as separate\n        #  scalar operations, which do not issue a PerformanceWarning\n        warn = PerformanceWarning if box is not pd.DataFrame else None\n        with tm.assert_produces_warning(warn):\n            res = tdi + other\n        tm.assert_equal(res, expected)\n\n        with tm.assert_produces_warning(warn):\n            res2 = other + tdi\n        tm.assert_equal(res2, expected)",
        "begin_line": 1322,
        "end_line": 1344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_index#1349",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_index(self, names, box_with_array)",
        "snippet": "    def test_td64arr_sub_offset_index(self, names, box_with_array):\n        # GH#18824, GH#19744\n        box = box_with_array\n        xbox = box if box is not tm.to_array else pd.Index\n        exname = names[2] if box is not tm.to_array else names[1]\n\n        if box is pd.DataFrame and names[1] == \"bar\":\n            pytest.skip(\n                \"Name propagation for DataFrame does not behave like \"\n                \"it does for Index/Series\"\n            )\n\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"], name=names[0])\n        other = pd.Index([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)], name=names[1])\n\n        expected = TimedeltaIndex(\n            [tdi[n] - other[n] for n in range(len(tdi))], freq=\"infer\", name=exname\n        )\n\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, xbox)\n\n        # The DataFrame operation is transposed and so operates as separate\n        #  scalar operations, which do not issue a PerformanceWarning\n        warn = PerformanceWarning if box is not pd.DataFrame else None\n        with tm.assert_produces_warning(warn):\n            res = tdi - other\n        tm.assert_equal(res, expected)",
        "begin_line": 1349,
        "end_line": 1376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_array#1378",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_sub_offset_array(self, box_with_array)",
        "snippet": "    def test_td64arr_sub_offset_array(self, box_with_array):\n        # GH#18824\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"])\n        other = np.array([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)])\n\n        expected = TimedeltaIndex(\n            [tdi[n] - other[n] for n in range(len(tdi))], freq=\"infer\"\n        )\n\n        tdi = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        # The DataFrame operation is transposed and so operates as separate\n        #  scalar operations, which do not issue a PerformanceWarning\n        warn = None if box_with_array is pd.DataFrame else PerformanceWarning\n        with tm.assert_produces_warning(warn):\n            res = tdi - other\n        tm.assert_equal(res, expected)",
        "begin_line": 1378,
        "end_line": 1395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_with_offset_series#1400",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_with_offset_series(self, names, box_df_fail)",
        "snippet": "    def test_td64arr_with_offset_series(self, names, box_df_fail):\n        # GH#18849\n        box = box_df_fail\n        box2 = Series if box in [pd.Index, tm.to_array] else box\n        exname = names[2] if box is not tm.to_array else names[1]\n\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"], name=names[0])\n        other = Series([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)], name=names[1])\n\n        expected_add = Series([tdi[n] + other[n] for n in range(len(tdi))], name=exname)\n        tdi = tm.box_expected(tdi, box)\n        expected_add = tm.box_expected(expected_add, box2)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res = tdi + other\n        tm.assert_equal(res, expected_add)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res2 = other + tdi\n        tm.assert_equal(res2, expected_add)\n\n        # TODO: separate/parametrize add/sub test?\n        expected_sub = Series([tdi[n] - other[n] for n in range(len(tdi))], name=exname)\n        expected_sub = tm.box_expected(expected_sub, box2)\n\n        with tm.assert_produces_warning(PerformanceWarning):\n            res3 = tdi - other\n        tm.assert_equal(res3, expected_sub)",
        "begin_line": 1400,
        "end_line": 1427,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_anchored_offset_arraylike#1430",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps.test_td64arr_addsub_anchored_offset_arraylike(self, obox, box_with_array)",
        "snippet": "    def test_td64arr_addsub_anchored_offset_arraylike(self, obox, box_with_array):\n        # GH#18824\n        tdi = TimedeltaIndex([\"1 days 00:00:00\", \"3 days 04:00:00\"])\n        tdi = tm.box_expected(tdi, box_with_array)\n\n        anchored = obox([pd.offsets.MonthEnd(), pd.offsets.Day(n=2)])\n\n        # addition/subtraction ops with anchored offsets should issue\n        # a PerformanceWarning and _then_ raise a TypeError.\n        with pytest.raises(TypeError):\n            with tm.assert_produces_warning(PerformanceWarning):\n                tdi + anchored\n        with pytest.raises(TypeError):\n            with tm.assert_produces_warning(PerformanceWarning):\n                anchored + tdi\n        with pytest.raises(TypeError):\n            with tm.assert_produces_warning(PerformanceWarning):\n                tdi - anchored\n        with pytest.raises(TypeError):\n            with tm.assert_produces_warning(PerformanceWarning):\n                anchored - tdi",
        "begin_line": 1430,
        "end_line": 1450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_timedelta64_conversions#1460",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_timedelta64_conversions(self, m, unit)",
        "snippet": "    def test_timedelta64_conversions(self, m, unit):\n        startdate = Series(pd.date_range(\"2013-01-01\", \"2013-01-03\"))\n        enddate = Series(pd.date_range(\"2013-03-01\", \"2013-03-03\"))\n\n        ser = enddate - startdate\n        ser[2] = np.nan\n\n        # op\n        expected = Series([x / np.timedelta64(m, unit) for x in ser])\n        result = ser / np.timedelta64(m, unit)\n        tm.assert_series_equal(result, expected)\n\n        # reverse op\n        expected = Series([Timedelta(np.timedelta64(m, unit)) / x for x in ser])\n        result = np.timedelta64(m, unit) / ser\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1460,
        "end_line": 1475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int#1481",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int(self, box_with_array)",
        "snippet": "    def test_td64arr_mul_int(self, box_with_array):\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box_with_array)\n\n        result = idx * 1\n        tm.assert_equal(result, idx)\n\n        result = 1 * idx\n        tm.assert_equal(result, idx)",
        "begin_line": 1481,
        "end_line": 1489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdlike_scalar_raises#1491",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdlike_scalar_raises(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_mul_tdlike_scalar_raises(self, two_hours, box_with_array):\n        rng = timedelta_range(\"1 days\", \"10 days\", name=\"foo\")\n        rng = tm.box_expected(rng, box_with_array)\n        with pytest.raises(TypeError):\n            rng * two_hours",
        "begin_line": 1491,
        "end_line": 1495,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array_zerodim#1497",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array_zerodim(self, box_with_array)",
        "snippet": "    def test_tdi_mul_int_array_zerodim(self, box_with_array):\n        rng5 = np.arange(5, dtype=\"int64\")\n        idx = TimedeltaIndex(rng5)\n        expected = TimedeltaIndex(rng5 * 5)\n\n        idx = tm.box_expected(idx, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = idx * np.array(5, dtype=\"int64\")\n        tm.assert_equal(result, expected)",
        "begin_line": 1497,
        "end_line": 1506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array#1508",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_array(self, box_with_array)",
        "snippet": "    def test_tdi_mul_int_array(self, box_with_array):\n        rng5 = np.arange(5, dtype=\"int64\")\n        idx = TimedeltaIndex(rng5)\n        expected = TimedeltaIndex(rng5 ** 2)\n\n        idx = tm.box_expected(idx, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = idx * rng5\n        tm.assert_equal(result, expected)",
        "begin_line": 1508,
        "end_line": 1517,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_series#1519",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_int_series(self, box_with_array)",
        "snippet": "    def test_tdi_mul_int_series(self, box_with_array):\n        box = box_with_array\n        xbox = pd.Series if box in [pd.Index, tm.to_array] else box\n\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        expected = TimedeltaIndex(np.arange(5, dtype=\"int64\") ** 2)\n\n        idx = tm.box_expected(idx, box)\n        expected = tm.box_expected(expected, xbox)\n\n        result = idx * pd.Series(np.arange(5, dtype=\"int64\"))\n        tm.assert_equal(result, expected)",
        "begin_line": 1519,
        "end_line": 1530,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_float_series#1532",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_mul_float_series(self, box_with_array)",
        "snippet": "    def test_tdi_mul_float_series(self, box_with_array):\n        box = box_with_array\n        xbox = pd.Series if box in [pd.Index, tm.to_array] else box\n\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box)\n\n        rng5f = np.arange(5, dtype=\"float64\")\n        expected = TimedeltaIndex(rng5f * (rng5f + 1.0))\n        expected = tm.box_expected(expected, xbox)\n\n        result = idx * Series(rng5f + 1.0)\n        tm.assert_equal(result, expected)",
        "begin_line": 1532,
        "end_line": 1544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_rmul_arraylike#1558",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdi_rmul_arraylike(self, other, box_with_array)",
        "snippet": "    def test_tdi_rmul_arraylike(self, other, box_with_array):\n        box = box_with_array\n        xbox = get_upcast_box(box, other)\n\n        tdi = TimedeltaIndex([\"1 Day\"] * 10)\n        expected = timedelta_range(\"1 days\", \"10 days\")\n        expected._data.freq = None\n\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, xbox)\n\n        result = other * tdi\n        tm.assert_equal(result, expected)\n        commute = tdi * other\n        tm.assert_equal(commute, expected)",
        "begin_line": 1558,
        "end_line": 1572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_nat_invalid#1577",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_nat_invalid(self, box_with_array)",
        "snippet": "    def test_td64arr_div_nat_invalid(self, box_with_array):\n        # don't allow division by NaT (maybe could in the future)\n        rng = timedelta_range(\"1 days\", \"10 days\", name=\"foo\")\n        rng = tm.box_expected(rng, box_with_array)\n\n        with pytest.raises(TypeError, match=\"unsupported operand type\"):\n            rng / pd.NaT\n        with pytest.raises(TypeError, match=\"Cannot divide NaTType by\"):\n            pd.NaT / rng",
        "begin_line": 1577,
        "end_line": 1585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64nat#1587",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64nat(self, box_with_array)",
        "snippet": "    def test_td64arr_div_td64nat(self, box_with_array):\n        # GH#23829\n        rng = timedelta_range(\"1 days\", \"10 days\")\n        rng = tm.box_expected(rng, box_with_array)\n\n        other = np.timedelta64(\"NaT\")\n\n        expected = np.array([np.nan] * 10)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = rng / other\n        tm.assert_equal(result, expected)\n\n        result = other / rng\n        tm.assert_equal(result, expected)",
        "begin_line": 1587,
        "end_line": 1601,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_int#1603",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_int(self, box_with_array)",
        "snippet": "    def test_td64arr_div_int(self, box_with_array):\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box_with_array)\n\n        result = idx / 1\n        tm.assert_equal(result, idx)\n\n        with pytest.raises(TypeError, match=\"Cannot divide\"):\n            # GH#23829\n            1 / idx",
        "begin_line": 1603,
        "end_line": 1612,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar#1614",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_div_tdlike_scalar(self, two_hours, box_with_array):\n        # GH#20088, GH#22163 ensure DataFrame returns correct dtype\n        rng = timedelta_range(\"1 days\", \"10 days\", name=\"foo\")\n        expected = pd.Float64Index((np.arange(10) + 1) * 12, name=\"foo\")\n\n        rng = tm.box_expected(rng, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = rng / two_hours\n        tm.assert_equal(result, expected)\n\n        result = two_hours / rng\n        expected = 1 / expected\n        tm.assert_equal(result, expected)",
        "begin_line": 1614,
        "end_line": 1627,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar_with_nat#1629",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_tdlike_scalar_with_nat(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_div_tdlike_scalar_with_nat(self, two_hours, box_with_array):\n        rng = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"], name=\"foo\")\n        expected = pd.Float64Index([12, np.nan, 24], name=\"foo\")\n\n        rng = tm.box_expected(rng, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = rng / two_hours\n        tm.assert_equal(result, expected)\n\n        result = two_hours / rng\n        expected = 1 / expected\n        tm.assert_equal(result, expected)",
        "begin_line": 1629,
        "end_line": 1641,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64_ndarray#1643",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_td64_ndarray(self, box_with_array)",
        "snippet": "    def test_td64arr_div_td64_ndarray(self, box_with_array):\n        # GH#22631\n        rng = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"])\n        expected = pd.Float64Index([12, np.nan, 24])\n\n        rng = tm.box_expected(rng, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        other = np.array([2, 4, 2], dtype=\"m8[h]\")\n        result = rng / other\n        tm.assert_equal(result, expected)\n\n        result = rng / tm.box_expected(other, box_with_array)\n        tm.assert_equal(result, expected)\n\n        result = rng / other.astype(object)\n        tm.assert_equal(result, expected)\n\n        result = rng / list(other)\n        tm.assert_equal(result, expected)\n\n        # reversed op\n        expected = 1 / expected\n        result = other / rng\n        tm.assert_equal(result, expected)\n\n        result = tm.box_expected(other, box_with_array) / rng\n        tm.assert_equal(result, expected)\n\n        result = other.astype(object) / rng\n        tm.assert_equal(result, expected)\n\n        result = list(other) / rng\n        tm.assert_equal(result, expected)",
        "begin_line": 1643,
        "end_line": 1676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdarr_div_length_mismatch#1678",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_tdarr_div_length_mismatch(self, box_with_array)",
        "snippet": "    def test_tdarr_div_length_mismatch(self, box_with_array):\n        rng = TimedeltaIndex([\"1 days\", pd.NaT, \"2 days\"])\n        mismatched = [1, 2, 3, 4]\n\n        rng = tm.box_expected(rng, box_with_array)\n        for obj in [mismatched, mismatched[:2]]:\n            # one shorter, one longer\n            for other in [obj, np.array(obj), pd.Index(obj)]:\n                with pytest.raises(ValueError):\n                    rng / other\n                with pytest.raises(ValueError):\n                    other / rng",
        "begin_line": 1678,
        "end_line": 1689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdscalar#1694",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdscalar(self, box_with_array, scalar_td)",
        "snippet": "    def test_td64arr_floordiv_tdscalar(self, box_with_array, scalar_td):\n        # GH#18831\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        expected = Series([0, 0, np.nan])\n\n        td1 = tm.box_expected(td1, box_with_array, transpose=False)\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        result = td1 // scalar_td\n        tm.assert_equal(result, expected)",
        "begin_line": 1694,
        "end_line": 1705,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar#1707",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar(self, box_with_array, scalar_td)",
        "snippet": "    def test_td64arr_rfloordiv_tdscalar(self, box_with_array, scalar_td):\n        # GH#18831\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        expected = Series([1, 1, np.nan])\n\n        td1 = tm.box_expected(td1, box_with_array, transpose=False)\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        result = scalar_td // td1\n        tm.assert_equal(result, expected)",
        "begin_line": 1707,
        "end_line": 1718,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar_explicit#1720",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdscalar_explicit(self, box_with_array, scalar_td)",
        "snippet": "    def test_td64arr_rfloordiv_tdscalar_explicit(self, box_with_array, scalar_td):\n        # GH#18831\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        expected = Series([1, 1, np.nan])\n\n        td1 = tm.box_expected(td1, box_with_array, transpose=False)\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        # We can test __rfloordiv__ using this syntax,\n        # see `test_timedelta_rfloordiv`\n        result = td1.__rfloordiv__(scalar_td)\n        tm.assert_equal(result, expected)",
        "begin_line": 1720,
        "end_line": 1733,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_int#1735",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_int(self, box_with_array)",
        "snippet": "    def test_td64arr_floordiv_int(self, box_with_array):\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box_with_array)\n        result = idx // 1\n        tm.assert_equal(result, idx)\n\n        pattern = \"floor_divide cannot use operands|Cannot divide int by Timedelta*\"\n        with pytest.raises(TypeError, match=pattern):\n            1 // idx",
        "begin_line": 1735,
        "end_line": 1743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdlike_scalar#1745",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_floordiv_tdlike_scalar(self, two_hours, box_with_array)",
        "snippet": "    def test_td64arr_floordiv_tdlike_scalar(self, two_hours, box_with_array):\n        tdi = timedelta_range(\"1 days\", \"10 days\", name=\"foo\")\n        expected = pd.Int64Index((np.arange(10) + 1) * 12, name=\"foo\")\n\n        tdi = tm.box_expected(tdi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdi // two_hours\n        tm.assert_equal(result, expected)",
        "begin_line": 1745,
        "end_line": 1753,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdlike_scalar#1765",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rfloordiv_tdlike_scalar(self, scalar_td, box_with_array)",
        "snippet": "    def test_td64arr_rfloordiv_tdlike_scalar(self, scalar_td, box_with_array):\n        # GH#19125\n        tdi = TimedeltaIndex([\"00:05:03\", \"00:05:03\", pd.NaT], freq=None)\n        expected = pd.Index([2.0, 2.0, np.nan])\n\n        tdi = tm.box_expected(tdi, box_with_array, transpose=False)\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        res = tdi.__rfloordiv__(scalar_td)\n        tm.assert_equal(res, expected)\n\n        expected = pd.Index([0.0, 0.0, np.nan])\n        expected = tm.box_expected(expected, box_with_array, transpose=False)\n\n        res = tdi // (scalar_td)\n        tm.assert_equal(res, expected)",
        "begin_line": 1765,
        "end_line": 1780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_tdscalar#1787",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_tdscalar(self, box_with_array, three_days)",
        "snippet": "    def test_td64arr_mod_tdscalar(self, box_with_array, three_days):\n        tdi = timedelta_range(\"1 Day\", \"9 days\")\n        tdarr = tm.box_expected(tdi, box_with_array)\n\n        expected = TimedeltaIndex([\"1 Day\", \"2 Days\", \"0 Days\"] * 3)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdarr % three_days\n        tm.assert_equal(result, expected)\n\n        if box_with_array is pd.DataFrame:\n            pytest.xfail(\"DataFrame does not have __divmod__ or __rdivmod__\")\n\n        result = divmod(tdarr, three_days)\n        tm.assert_equal(result[1], expected)\n        tm.assert_equal(result[0], tdarr // three_days)",
        "begin_line": 1787,
        "end_line": 1802,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_int#1804",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mod_int(self, box_with_array)",
        "snippet": "    def test_td64arr_mod_int(self, box_with_array):\n        tdi = timedelta_range(\"1 ns\", \"10 ns\", periods=10)\n        tdarr = tm.box_expected(tdi, box_with_array)\n\n        expected = TimedeltaIndex([\"1 ns\", \"0 ns\"] * 5)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdarr % 2\n        tm.assert_equal(result, expected)\n\n        with pytest.raises(TypeError):\n            2 % tdarr\n\n        if box_with_array is pd.DataFrame:\n            pytest.xfail(\"DataFrame does not have __divmod__ or __rdivmod__\")\n\n        result = divmod(tdarr, 2)\n        tm.assert_equal(result[1], expected)\n        tm.assert_equal(result[0], tdarr // 2)",
        "begin_line": 1804,
        "end_line": 1822,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmod_tdscalar#1824",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmod_tdscalar(self, box_with_array, three_days)",
        "snippet": "    def test_td64arr_rmod_tdscalar(self, box_with_array, three_days):\n        tdi = timedelta_range(\"1 Day\", \"9 days\")\n        tdarr = tm.box_expected(tdi, box_with_array)\n\n        expected = [\"0 Days\", \"1 Day\", \"0 Days\"] + [\"3 Days\"] * 6\n        expected = TimedeltaIndex(expected)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = three_days % tdarr\n        tm.assert_equal(result, expected)\n\n        if box_with_array is pd.DataFrame:\n            pytest.xfail(\"DataFrame does not have __divmod__ or __rdivmod__\")\n\n        result = divmod(three_days, tdarr)\n        tm.assert_equal(result[1], expected)\n        tm.assert_equal(result[0], three_days // tdarr)",
        "begin_line": 1824,
        "end_line": 1840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdscalar_invalid#1845",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_tdscalar_invalid(self, box_with_array, scalar_td)",
        "snippet": "    def test_td64arr_mul_tdscalar_invalid(self, box_with_array, scalar_td):\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        td1 = tm.box_expected(td1, box_with_array)\n\n        # check that we are getting a TypeError\n        # with 'operate' (from core/ops.py) for the ops that are not\n        # defined\n        pattern = \"operate|unsupported|cannot|not supported\"\n        with pytest.raises(TypeError, match=pattern):\n            td1 * scalar_td\n        with pytest.raises(TypeError, match=pattern):\n            scalar_td * td1",
        "begin_line": 1845,
        "end_line": 1858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_too_short_raises#1860",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_too_short_raises(self, box_with_array)",
        "snippet": "    def test_td64arr_mul_too_short_raises(self, box_with_array):\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box_with_array)\n        with pytest.raises(TypeError):\n            idx * idx[:3]\n        with pytest.raises(ValueError):\n            idx * np.array([1, 2])",
        "begin_line": 1860,
        "end_line": 1866,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_td64arr_raises#1868",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_td64arr_raises(self, box_with_array)",
        "snippet": "    def test_td64arr_mul_td64arr_raises(self, box_with_array):\n        idx = TimedeltaIndex(np.arange(5, dtype=\"int64\"))\n        idx = tm.box_expected(idx, box_with_array)\n        with pytest.raises(TypeError):\n            idx * idx",
        "begin_line": 1868,
        "end_line": 1872,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_numeric_scalar#1878",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_numeric_scalar(self, box_with_array, one)",
        "snippet": "    def test_td64arr_mul_numeric_scalar(self, box_with_array, one):\n        # GH#4521\n        # divide/multiply by integers\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        expected = Series([\"-59 Days\", \"-59 Days\", \"NaT\"], dtype=\"timedelta64[ns]\")\n\n        tdser = tm.box_expected(tdser, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdser * (-one)\n        tm.assert_equal(result, expected)\n        result = (-one) * tdser\n        tm.assert_equal(result, expected)\n\n        expected = Series([\"118 Days\", \"118 Days\", \"NaT\"], dtype=\"timedelta64[ns]\")\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdser * (2 * one)\n        tm.assert_equal(result, expected)\n        result = (2 * one) * tdser\n        tm.assert_equal(result, expected)",
        "begin_line": 1878,
        "end_line": 1898,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_scalar#1901",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_scalar(self, box_with_array, two)",
        "snippet": "    def test_td64arr_div_numeric_scalar(self, box_with_array, two):\n        # GH#4521\n        # divide/multiply by integers\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        expected = Series([\"29.5D\", \"29.5D\", \"NaT\"], dtype=\"timedelta64[ns]\")\n\n        tdser = tm.box_expected(tdser, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = tdser / two\n        tm.assert_equal(result, expected)\n\n        with pytest.raises(TypeError, match=\"Cannot divide\"):\n            two / tdser",
        "begin_line": 1901,
        "end_line": 1914,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmul_numeric_array#1936",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_rmul_numeric_array(self, box_with_array, vector, dtype)",
        "snippet": "    def test_td64arr_rmul_numeric_array(self, box_with_array, vector, dtype):\n        # GH#4521\n        # divide/multiply by integers\n        xbox = get_upcast_box(box_with_array, vector)\n\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        vector = vector.astype(dtype)\n\n        expected = Series([\"1180 Days\", \"1770 Days\", \"NaT\"], dtype=\"timedelta64[ns]\")\n\n        tdser = tm.box_expected(tdser, box_with_array)\n        expected = tm.box_expected(expected, xbox)\n\n        result = tdser * vector\n        tm.assert_equal(result, expected)\n\n        result = vector * tdser\n        tm.assert_equal(result, expected)",
        "begin_line": 1936,
        "end_line": 1953,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_array#1975",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_div_numeric_array(self, box_with_array, vector, dtype)",
        "snippet": "    def test_td64arr_div_numeric_array(self, box_with_array, vector, dtype):\n        # GH#4521\n        # divide/multiply by integers\n        xbox = get_upcast_box(box_with_array, vector)\n        tdser = pd.Series([\"59 Days\", \"59 Days\", \"NaT\"], dtype=\"m8[ns]\")\n        vector = vector.astype(dtype)\n        expected = Series([\"2.95D\", \"1D 23H 12m\", \"NaT\"], dtype=\"timedelta64[ns]\")\n\n        tdser = tm.box_expected(tdser, box_with_array)\n        expected = tm.box_expected(expected, xbox)\n\n        result = tdser / vector\n        tm.assert_equal(result, expected)\n\n        pattern = (\n            \"true_divide cannot use operands|\"\n            \"cannot perform __div__|\"\n            \"cannot perform __truediv__|\"\n            \"unsupported operand|\"\n            \"Cannot divide\"\n        )\n        with pytest.raises(TypeError, match=pattern):\n            vector / tdser\n\n        if not isinstance(vector, pd.Index):\n            # Index.__rdiv__ won't try to operate elementwise, just raises\n            result = tdser / vector.astype(object)\n            if box_with_array is pd.DataFrame:\n                expected = [tdser.iloc[0, n] / vector[n] for n in range(len(vector))]\n            else:\n                expected = [tdser[n] / vector[n] for n in range(len(tdser))]\n            expected = tm.box_expected(expected, xbox)\n            tm.assert_equal(result, expected)\n\n        with pytest.raises(TypeError, match=pattern):\n            vector.astype(object) / tdser",
        "begin_line": 1975,
        "end_line": 2010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int_series#2020",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_td64arr_mul_int_series(self, box_df_fail, names)",
        "snippet": "    def test_td64arr_mul_int_series(self, box_df_fail, names):\n        # GH#19042 test for correct name attachment\n        box = box_df_fail  # broadcasts along wrong axis, but doesn't raise\n        exname = names[2] if box is not tm.to_array else names[1]\n\n        tdi = TimedeltaIndex(\n            [\"0days\", \"1day\", \"2days\", \"3days\", \"4days\"], name=names[0]\n        )\n        # TODO: Should we be parametrizing over types for `ser` too?\n        ser = Series([0, 1, 2, 3, 4], dtype=np.int64, name=names[1])\n\n        expected = Series(\n            [\"0days\", \"1day\", \"4days\", \"9days\", \"16days\"],\n            dtype=\"timedelta64[ns]\",\n            name=exname,\n        )\n\n        tdi = tm.box_expected(tdi, box)\n        box = Series if (box is pd.Index or box is tm.to_array) else box\n        expected = tm.box_expected(expected, box)\n\n        result = ser * tdi\n        tm.assert_equal(result, expected)\n\n        # The direct operation tdi * ser still needs to be fixed.\n        result = ser.__rmul__(tdi)\n        tm.assert_equal(result, expected)",
        "begin_line": 2020,
        "end_line": 2046,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_float_series_rdiv_td64arr#2057",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeMulDivOps.test_float_series_rdiv_td64arr(self, box_with_array, names)",
        "snippet": "    def test_float_series_rdiv_td64arr(self, box_with_array, names):\n        # GH#19042 test for correct name attachment\n        # TODO: the direct operation TimedeltaIndex / Series still\n        # needs to be fixed.\n        box = box_with_array\n        tdi = TimedeltaIndex(\n            [\"0days\", \"1day\", \"2days\", \"3days\", \"4days\"], name=names[0]\n        )\n        ser = Series([1.5, 3, 4.5, 6, 7.5], dtype=np.float64, name=names[1])\n\n        xname = names[2] if box is not tm.to_array else names[1]\n        expected = Series(\n            [tdi[n] / ser[n] for n in range(len(ser))],\n            dtype=\"timedelta64[ns]\",\n            name=xname,\n        )\n\n        xbox = box\n        if box in [pd.Index, tm.to_array] and type(ser) is Series:\n            xbox = Series\n\n        tdi = tm.box_expected(tdi, box)\n        expected = tm.box_expected(expected, xbox)\n\n        result = ser.__rdiv__(tdi)\n        if box is pd.DataFrame:\n            # TODO: Should we skip this case sooner or test something else?\n            assert result is NotImplemented\n        else:\n            tm.assert_equal(result, expected)",
        "begin_line": 2057,
        "end_line": 2086,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeArithmetic.test_td64arr_pow_invalid#2094",
        "src_path": "pandas/tests/arithmetic/test_timedelta64.py",
        "class_name": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeArithmetic",
        "signature": "pandas.tests.arithmetic.test_timedelta64.TestTimedelta64ArrayLikeArithmetic.test_td64arr_pow_invalid(self, scalar_td, box_with_array)",
        "snippet": "    def test_td64arr_pow_invalid(self, scalar_td, box_with_array):\n        td1 = Series([timedelta(minutes=5, seconds=3)] * 3)\n        td1.iloc[2] = np.nan\n\n        td1 = tm.box_expected(td1, box_with_array)\n\n        # check that we are getting a TypeError\n        # with 'operate' (from core/ops.py) for the ops that are not\n        # defined\n        pattern = \"operate|unsupported|cannot|not supported\"\n        with pytest.raises(TypeError, match=pattern):\n            scalar_td ** td1\n\n        with pytest.raises(TypeError, match=pattern):\n            td1 ** scalar_td",
        "begin_line": 2094,
        "end_line": 2108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.one#23",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.one(request)",
        "snippet": "def one(request):\n    # zero-dim integer array behaves like an integer\n    return request.param",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.zero#42",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.zero(request)",
        "snippet": "def zero(request):\n    # For testing division by (or of) zero for Index with length 5, this\n    # gives several scalar-zeros and length-5 vector-zeros\n    return request.param",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.numeric_idx#61",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.numeric_idx(request)",
        "snippet": "def numeric_idx(request):\n    \"\"\"\n    Several types of numeric-dtypes Index objects\n    \"\"\"\n    return request.param",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.scalar_td#80",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.scalar_td(request)",
        "snippet": "def scalar_td(request):\n    \"\"\"\n    Several variants of Timedelta scalars representing 5 minutes and 4 seconds\n    \"\"\"\n    return request.param",
        "begin_line": 80,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.three_days#98",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.three_days(request)",
        "snippet": "def three_days(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 3-day timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.two_hours#117",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.two_hours(request)",
        "snippet": "def two_hours(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 2-hour timedelta\n    \"\"\"\n    return request.param",
        "begin_line": 117,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_hourly#140",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_hourly(request)",
        "snippet": "def not_hourly(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Hourly frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 140,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.not_daily#156",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.not_daily(request)",
        "snippet": "def not_daily(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Daily frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.mismatched_freq#172",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.mismatched_freq(request)",
        "snippet": "def mismatched_freq(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Monthly or Annual frequencies.\n    \"\"\"\n    return request.param",
        "begin_line": 172,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box#184",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box(request)",
        "snippet": "def box(request):\n    \"\"\"\n    Several array-like containers that should have effectively identical\n    behavior with respect to arithmetic operations.\n    \"\"\"\n    return request.param",
        "begin_line": 184,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_df_fail#201",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_df_fail(request)",
        "snippet": "def box_df_fail(request):\n    \"\"\"\n    Fixture equivalent to `box` fixture but xfailing the DataFrame case.\n    \"\"\"\n    return request.param",
        "begin_line": 201,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_transpose_fail#218",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_transpose_fail(request)",
        "snippet": "def box_transpose_fail(request):\n    \"\"\"\n    Fixture similar to `box` but testing both transpose cases for DataFrame,\n    with the tranpose=True case xfailed.\n    \"\"\"\n    # GH#23620\n    return request.param",
        "begin_line": 218,
        "end_line": 224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arithmetic.conftest.box_with_array#228",
        "src_path": "pandas/tests/arithmetic/conftest.py",
        "class_name": "pandas.tests.arithmetic.conftest",
        "signature": "pandas.tests.arithmetic.conftest.box_with_array(request)",
        "snippet": "def box_with_array(request):\n    \"\"\"\n    Fixture to test behavior for Index, Series, DataFrame, and pandas Array\n    classes\n    \"\"\"\n    return request.param",
        "begin_line": 228,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    }
]