coverage run -m pytest pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_sub_datetimelike_scalar
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 12 items

pandas/tests/arithmetic/test_timedelta64.py ..F........F                 [100%]

=================================== FAILURES ===================================
_ TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_datetimelike_scalar[Index-ts2] _

self = <pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x7f1601fcdeb0>
ts = numpy.datetime64('2012-01-01T00:00:00.000000000')
box_with_array = <class 'pandas.core.indexes.base.Index'>

    @pytest.mark.parametrize(
        "ts",
        [
            Timestamp("2012-01-01"),
            Timestamp("2012-01-01").to_pydatetime(),
            Timestamp("2012-01-01").to_datetime64(),
        ],
    )
    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):
        # GH#11925, GH#29558
        tdi = timedelta_range("1 day", periods=3)
        expected = pd.date_range("2012-01-02", periods=3)
    
        tdarr = tm.box_expected(tdi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
        tm.assert_equal(ts + tdarr, expected)
        tm.assert_equal(tdarr + ts, expected)
    
        expected2 = pd.date_range("2011-12-31", periods=3, freq="-1D")
        expected2 = tm.box_expected(expected2, box_with_array)
    
>       tm.assert_equal(ts - tdarr, expected2)

pandas/tests/arithmetic/test_timedelta64.py:921: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/datetimelike.py:558: in __rsub__
    result = self._data.__rsub__(maybe_unwrap_index(other))
pandas/core/arrays/datetimelike.py:1310: in __rsub__
    other = DatetimeArray(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("object of type 'NoneType' has no len()") raised in repr()] DatetimeArray object at 0x7f1601fcdf70>
values = numpy.datetime64('2012-01-01T00:00:00.000000000')
dtype = dtype('<M8[ns]'), freq = None, copy = False

    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):
        if isinstance(values, (ABCSeries, ABCIndexClass)):
            values = values._values
    
        inferred_freq = getattr(values, "_freq", None)
    
        if isinstance(values, type(self)):
            # validation
            dtz = getattr(dtype, "tz", None)
            if dtz and values.tz is None:
                dtype = DatetimeTZDtype(tz=dtype.tz)
            elif dtz and values.tz:
                if not timezones.tz_compare(dtz, values.tz):
                    msg = (
                        "Timezone of the array and 'dtype' do not match. "
                        "'{}' != '{}'"
                    )
                    raise TypeError(msg.format(dtz, values.tz))
            elif values.tz:
                dtype = values.dtype
            # freq = validate_values_freq(values, freq)
            if freq is None:
                freq = values.freq
            values = values._data
    
        if not isinstance(values, np.ndarray):
            msg = (
                "Unexpected type '{}'. 'values' must be a DatetimeArray "
                "ndarray, or Series or Index containing one of those."
            )
>           raise ValueError(msg.format(type(values).__name__))
E           ValueError: Unexpected type 'datetime64'. 'values' must be a DatetimeArray ndarray, or Series or Index containing one of those.

pandas/core/arrays/datetimes.py:363: ValueError
_ TestTimedeltaArraylikeAddSubOps.test_td64arr_add_sub_datetimelike_scalar[to_array-ts2] _

self = <pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x7f1601e64040>
ts = numpy.datetime64('2012-01-01T00:00:00.000000000')
box_with_array = <function to_array at 0x7f160c99ec10>

    @pytest.mark.parametrize(
        "ts",
        [
            Timestamp("2012-01-01"),
            Timestamp("2012-01-01").to_pydatetime(),
            Timestamp("2012-01-01").to_datetime64(),
        ],
    )
    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):
        # GH#11925, GH#29558
        tdi = timedelta_range("1 day", periods=3)
        expected = pd.date_range("2012-01-02", periods=3)
    
        tdarr = tm.box_expected(tdi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
        tm.assert_equal(ts + tdarr, expected)
        tm.assert_equal(tdarr + ts, expected)
    
        expected2 = pd.date_range("2011-12-31", periods=3, freq="-1D")
        expected2 = tm.box_expected(expected2, box_with_array)
    
>       tm.assert_equal(ts - tdarr, expected2)

pandas/tests/arithmetic/test_timedelta64.py:921: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/arrays/datetimelike.py:1310: in __rsub__
    other = DatetimeArray(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[TypeError("object of type 'NoneType' has no len()") raised in repr()] DatetimeArray object at 0x7f1601e64a00>
values = numpy.datetime64('2012-01-01T00:00:00.000000000')
dtype = dtype('<M8[ns]'), freq = None, copy = False

    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):
        if isinstance(values, (ABCSeries, ABCIndexClass)):
            values = values._values
    
        inferred_freq = getattr(values, "_freq", None)
    
        if isinstance(values, type(self)):
            # validation
            dtz = getattr(dtype, "tz", None)
            if dtz and values.tz is None:
                dtype = DatetimeTZDtype(tz=dtype.tz)
            elif dtz and values.tz:
                if not timezones.tz_compare(dtz, values.tz):
                    msg = (
                        "Timezone of the array and 'dtype' do not match. "
                        "'{}' != '{}'"
                    )
                    raise TypeError(msg.format(dtz, values.tz))
            elif values.tz:
                dtype = values.dtype
            # freq = validate_values_freq(values, freq)
            if freq is None:
                freq = values.freq
            values = values._data
    
        if not isinstance(values, np.ndarray):
            msg = (
                "Unexpected type '{}'. 'values' must be a DatetimeArray "
                "ndarray, or Series or Index containing one of those."
            )
>           raise ValueError(msg.format(type(values).__name__))
E           ValueError: Unexpected type 'datetime64'. 'values' must be a DatetimeArray ndarray, or Series or Index containing one of those.

pandas/core/arrays/datetimes.py:363: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_sub_datetimelike_scalar[Index-ts2]
FAILED pandas/tests/arithmetic/test_timedelta64.py::TestTimedeltaArraylikeAddSubOps::test_td64arr_add_sub_datetimelike_scalar[to_array-ts2]
========================= 2 failed, 10 passed in 0.77s =========================
