coverage run -m pytest pandas/tests/indexing/multiindex/test_loc.py::TestMultiIndexLoc::test_loc_multiindex_list_missing_label
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 3 items

pandas/tests/indexing/multiindex/test_loc.py FFF                         [100%]

=================================== FAILURES ===================================
_____ TestMultiIndexLoc.test_loc_multiindex_list_missing_label[key0-pos0] ______

self = <pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc object at 0x7f70cf8192e0>
key = [2, 4], pos = [0, 1]

    @pytest.mark.parametrize("key, pos", [([2, 4], [0, 1]), ([2], []), ([2, 3], [])])
    def test_loc_multiindex_list_missing_label(self, key, pos):
        # GH 27148 - lists with missing labels _do_ raise
        df = DataFrame(
            np.random.randn(3, 3),
            columns=[[2, 2, 4], [6, 8, 10]],
            index=[[4, 4, 8], [8, 10, 12]],
        )
    
        with pytest.raises(KeyError, match="not in index"):
>           df.loc[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/indexing/multiindex/test_loc.py:145: Failed
_____ TestMultiIndexLoc.test_loc_multiindex_list_missing_label[key1-pos1] ______

self = <pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc object at 0x7f70cf7bca30>
key = [2], pos = []

    @pytest.mark.parametrize("key, pos", [([2, 4], [0, 1]), ([2], []), ([2, 3], [])])
    def test_loc_multiindex_list_missing_label(self, key, pos):
        # GH 27148 - lists with missing labels _do_ raise
        df = DataFrame(
            np.random.randn(3, 3),
            columns=[[2, 2, 4], [6, 8, 10]],
            index=[[4, 4, 8], [8, 10, 12]],
        )
    
        with pytest.raises(KeyError, match="not in index"):
>           df.loc[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/indexing/multiindex/test_loc.py:145: Failed
_____ TestMultiIndexLoc.test_loc_multiindex_list_missing_label[key2-pos2] ______

self = <pandas.tests.indexing.multiindex.test_loc.TestMultiIndexLoc object at 0x7f70cf801fa0>
key = [2, 3], pos = []

    @pytest.mark.parametrize("key, pos", [([2, 4], [0, 1]), ([2], []), ([2, 3], [])])
    def test_loc_multiindex_list_missing_label(self, key, pos):
        # GH 27148 - lists with missing labels _do_ raise
        df = DataFrame(
            np.random.randn(3, 3),
            columns=[[2, 2, 4], [6, 8, 10]],
            index=[[4, 4, 8], [8, 10, 12]],
        )
    
        with pytest.raises(KeyError, match="not in index"):
>           df.loc[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/indexing/multiindex/test_loc.py:145: Failed
=========================== short test summary info ============================
FAILED pandas/tests/indexing/multiindex/test_loc.py::TestMultiIndexLoc::test_loc_multiindex_list_missing_label[key0-pos0]
FAILED pandas/tests/indexing/multiindex/test_loc.py::TestMultiIndexLoc::test_loc_multiindex_list_missing_label[key1-pos1]
FAILED pandas/tests/indexing/multiindex/test_loc.py::TestMultiIndexLoc::test_loc_multiindex_list_missing_label[key2-pos2]
============================== 3 failed in 0.22s ===============================

coverage run -m pytest pandas/tests/indexing/multiindex/test_slice.py::TestMultiIndexSlicers::test_per_axis_per_level_getitem
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/multiindex/test_slice.py F                         [100%]

=================================== FAILURES ===================================
____________ TestMultiIndexSlicers.test_per_axis_per_level_getitem _____________

self = <pandas.tests.indexing.multiindex.test_slice.TestMultiIndexSlicers object at 0x7faba356e4f0>

    def test_per_axis_per_level_getitem(self):
    
        # GH6134
        # example test case
        ix = MultiIndex.from_product(
            [_mklbl("A", 5), _mklbl("B", 7), _mklbl("C", 4), _mklbl("D", 2)]
        )
        df = DataFrame(np.arange(len(ix.to_numpy())), index=ix)
    
        result = df.loc[(slice("A1", "A3"), slice(None), ["C1", "C3"]), :]
        expected = df.loc[
            [
                tuple([a, b, c, d])
                for a, b, c, d in df.index.values
                if (a == "A1" or a == "A2" or a == "A3") and (c == "C1" or c == "C3")
            ]
        ]
        tm.assert_frame_equal(result, expected)
    
        expected = df.loc[
            [
                tuple([a, b, c, d])
                for a, b, c, d in df.index.values
                if (a == "A1" or a == "A2" or a == "A3")
                and (c == "C1" or c == "C2" or c == "C3")
            ]
        ]
        result = df.loc[(slice("A1", "A3"), slice(None), slice("C1", "C3")), :]
        tm.assert_frame_equal(result, expected)
    
        # test multi-index slicing with per axis and per index controls
        index = MultiIndex.from_tuples(
            [("A", 1), ("A", 2), ("A", 3), ("B", 1)], names=["one", "two"]
        )
        columns = MultiIndex.from_tuples(
            [("a", "foo"), ("a", "bar"), ("b", "foo"), ("b", "bah")],
            names=["lvl0", "lvl1"],
        )
    
        df = DataFrame(
            np.arange(16, dtype="int64").reshape(4, 4), index=index, columns=columns
        )
        df = df.sort_index(axis=0).sort_index(axis=1)
    
        # identity
        result = df.loc[(slice(None), slice(None)), :]
        tm.assert_frame_equal(result, df)
        result = df.loc[(slice(None), slice(None)), (slice(None), slice(None))]
        tm.assert_frame_equal(result, df)
        result = df.loc[:, (slice(None), slice(None))]
        tm.assert_frame_equal(result, df)
    
        # index
        result = df.loc[(slice(None), [1]), :]
        expected = df.iloc[[0, 3]]
        tm.assert_frame_equal(result, expected)
    
        result = df.loc[(slice(None), 1), :]
        expected = df.iloc[[0, 3]]
        tm.assert_frame_equal(result, expected)
    
        # columns
        result = df.loc[:, (slice(None), ["foo"])]
        expected = df.iloc[:, [1, 3]]
        tm.assert_frame_equal(result, expected)
    
        # both
        result = df.loc[(slice(None), 1), (slice(None), ["foo"])]
        expected = df.iloc[[0, 3], [1, 3]]
        tm.assert_frame_equal(result, expected)
    
        result = df.loc["A", "a"]
        expected = DataFrame(
            dict(bar=[1, 5, 9], foo=[0, 4, 8]),
            index=Index([1, 2, 3], name="two"),
            columns=Index(["bar", "foo"], name="lvl1"),
        )
        tm.assert_frame_equal(result, expected)
    
        result = df.loc[(slice(None), [1, 2]), :]
        expected = df.iloc[[0, 1, 3]]
        tm.assert_frame_equal(result, expected)
    
        # multi-level series
        s = Series(np.arange(len(ix.to_numpy())), index=ix)
        result = s.loc["A1":"A3", :, ["C1", "C3"]]
        expected = s.loc[
            [
                tuple([a, b, c, d])
                for a, b, c, d in s.index.values
                if (a == "A1" or a == "A2" or a == "A3") and (c == "C1" or c == "C3")
            ]
        ]
        tm.assert_series_equal(result, expected)
    
        # boolean indexers
        result = df.loc[(slice(None), df.loc[:, ("a", "bar")] > 5), :]
        expected = df.iloc[[2, 3]]
        tm.assert_frame_equal(result, expected)
    
        msg = (
            "cannot index with a boolean indexer "
            "that is not the same length as the index"
        )
        with pytest.raises(ValueError, match=msg):
            df.loc[(slice(None), np.array([True, False])), :]
    
        with pytest.raises(KeyError, match=r"\[1\] not in index"):
            # slice(None) is on the index, [1] is on the columns, but 1 is
            #  not in the columns, so we raise
            #  This used to treat [1] as positional GH#16396
>           df.loc[slice(None), [1]]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/indexing/multiindex/test_slice.py:125: Failed
=========================== short test summary info ============================
FAILED pandas/tests/indexing/multiindex/test_slice.py::TestMultiIndexSlicers::test_per_axis_per_level_getitem
============================== 1 failed in 0.33s ===============================

coverage run -m pytest pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 9 items

pandas/tests/series/indexing/test_getitem.py FFFFFFFFF                   [100%]

=================================== FAILURES ===================================
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[int64-list] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ec71340>
dtype = <class 'numpy.int64'>, box = <class 'list'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[int64-array] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ebcc250>
dtype = <class 'numpy.int64'>, box = <built-in function array>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[int64-Index] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ebff910>
dtype = <class 'numpy.int64'>, box = <class 'pandas.core.indexes.base.Index'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[float64-list] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ebccc70>
dtype = <class 'numpy.float64'>, box = <class 'list'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[float64-array] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360eb52dc0>
dtype = <class 'numpy.float64'>, box = <built-in function array>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[float64-Index] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360eb80b20>
dtype = <class 'numpy.float64'>, box = <class 'pandas.core.indexes.base.Index'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[uint64-list] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360eb4fb80>
dtype = <class 'numpy.uint64'>, box = <class 'list'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[uint64-array] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ebff2e0>
dtype = <class 'numpy.uint64'>, box = <built-in function array>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
_ TestSeriesGetitemListLike.test_getitem_intlist_multiindex_numeric_level[uint64-Index] _

self = <pandas.tests.series.indexing.test_getitem.TestSeriesGetitemListLike object at 0x7f360ec0bd60>
dtype = <class 'numpy.uint64'>, box = <class 'pandas.core.indexes.base.Index'>

    @pytest.mark.parametrize("box", [list, np.array, pd.Index])
    @pytest.mark.parametrize("dtype", [np.int64, np.float64, np.uint64])
    def test_getitem_intlist_multiindex_numeric_level(self, dtype, box):
        # GH#33404 do _not_ fall back to positional since ints are ambiguous
        idx = pd.Index(range(4)).astype(dtype)
        dti = date_range("2000-01-03", periods=3)
        mi = pd.MultiIndex.from_product([idx, dti])
        ser = Series(range(len(mi))[::-1], index=mi)
    
        key = box([5])
        with pytest.raises(KeyError, match="5"):
>           ser[key]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/series/indexing/test_getitem.py:128: Failed
=========================== short test summary info ============================
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[int64-list]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[int64-array]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[int64-Index]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[float64-list]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[float64-array]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[float64-Index]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[uint64-list]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[uint64-array]
FAILED pandas/tests/series/indexing/test_getitem.py::TestSeriesGetitemListLike::test_getitem_intlist_multiindex_numeric_level[uint64-Index]
============================== 9 failed in 0.29s ===============================
