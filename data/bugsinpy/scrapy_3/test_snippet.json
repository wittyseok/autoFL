[
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.setUp#14",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.crawler = get_crawler(Spider)\n        self.spider = self.crawler._create_spider('foo')\n        self.mw = RedirectMiddleware.from_crawler(self.crawler)",
        "begin_line": 14,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_priority_adjust#19",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_priority_adjust(self)",
        "snippet": "    def test_priority_adjust(self):\n        req = Request('http://a.com')\n        rsp = Response('http://a.com', headers={'Location': 'http://a.com/redirected'}, status=301)\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert req2.priority > req.priority",
        "begin_line": 19,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_3xx_permanent#25",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_3xx_permanent(self)",
        "snippet": "    def test_redirect_3xx_permanent(self):\n        def _test(method, status=301):\n            url = 'http://www.example.com/{}'.format(status)\n            url2 = 'http://www.example.com/redirected'\n            req = Request(url, method=method)\n            rsp = Response(url, headers={'Location': url2}, status=status)\n\n            req2 = self.mw.process_response(req, rsp, self.spider)\n            assert isinstance(req2, Request)\n            self.assertEqual(req2.url, url2)\n            self.assertEqual(req2.method, method)\n\n            # response without Location header but with status code is 3XX should be ignored\n            del rsp.headers['Location']\n            assert self.mw.process_response(req, rsp, self.spider) is rsp\n\n        _test('GET')\n        _test('POST')\n        _test('HEAD')\n\n        _test('GET', status=307)\n        _test('POST', status=307)\n        _test('HEAD', status=307)\n\n        _test('GET', status=308)\n        _test('POST', status=308)\n        _test('HEAD', status=308)",
        "begin_line": 25,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test#26",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test(method, status=301)",
        "snippet": "        def _test(method, status=301):\n            url = 'http://www.example.com/{}'.format(status)\n            url2 = 'http://www.example.com/redirected'\n            req = Request(url, method=method)\n            rsp = Response(url, headers={'Location': url2}, status=status)\n\n            req2 = self.mw.process_response(req, rsp, self.spider)\n            assert isinstance(req2, Request)\n            self.assertEqual(req2.url, url2)\n            self.assertEqual(req2.method, method)\n\n            # response without Location header but with status code is 3XX should be ignored\n            del rsp.headers['Location']\n            assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 26,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_dont_redirect#53",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_dont_redirect(self)",
        "snippet": "    def test_dont_redirect(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        req = Request(url, meta={'dont_redirect': True})\n        rsp = Response(url, headers={'Location': url2}, status=301)\n\n        r = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(r, Response)\n        assert r is rsp\n\n        # Test that it redirects when dont_redirect is False\n        req = Request(url, meta={'dont_redirect': False})\n        rsp = Response(url2, status=200)\n\n        r = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(r, Response)\n        assert r is rsp",
        "begin_line": 53,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302#72",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302(self)",
        "snippet": "    def test_redirect_302(self):\n        url = 'http://www.example.com/302'\n        url2 = 'http://www.example.com/redirected2'\n        req = Request(url, method='POST', body='test',\n            headers={'Content-Type': 'text/plain', 'Content-length': '4'})\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url2)\n        self.assertEqual(req2.method, 'GET')\n        assert 'Content-Type' not in req2.headers, \\\n            \"Content-Type header must not be present in redirected request\"\n        assert 'Content-Length' not in req2.headers, \\\n            \"Content-Length header must not be present in redirected request\"\n        assert not req2.body, \\\n            \"Redirected body must be empty, not '%s'\" % req2.body\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 72,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_head#94",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_head(self)",
        "snippet": "    def test_redirect_302_head(self):\n        url = 'http://www.example.com/302'\n        url2 = 'http://www.example.com/redirected2'\n        req = Request(url, method='HEAD')\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url2)\n        self.assertEqual(req2.method, 'HEAD')\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 94,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_relative#109",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_302_relative(self)",
        "snippet": "    def test_redirect_302_relative(self):\n        url = 'http://www.example.com/302'\n        url2 = '///i8n.example2.com/302'\n        url3 = 'http://i8n.example2.com/302'\n        req = Request(url, method='HEAD')\n        rsp = Response(url, headers={'Location': url2}, status=302)\n\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, url3)\n        self.assertEqual(req2.method, 'HEAD')\n\n        # response without Location header but with status code is 3XX should be ignored\n        del rsp.headers['Location']\n        assert self.mw.process_response(req, rsp, self.spider) is rsp",
        "begin_line": 109,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_max_redirect_times#126",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_max_redirect_times(self)",
        "snippet": "    def test_max_redirect_times(self):\n        self.mw.max_redirect_times = 1\n        req = Request('http://scrapytest.org/302')\n        rsp = Response('http://scrapytest.org/302', headers={'Location': '/redirected'}, status=302)\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        assert 'redirect_times' in req.meta\n        self.assertEqual(req.meta['redirect_times'], 1)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 126,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_ttl#137",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_ttl(self)",
        "snippet": "    def test_ttl(self):\n        self.mw.max_redirect_times = 100\n        req = Request('http://scrapytest.org/302', meta={'redirect_ttl': 1})\n        rsp = Response('http://www.scrapytest.org/302', headers={'Location': '/redirected'}, status=302)\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 137,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_urls#146",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_urls(self)",
        "snippet": "    def test_redirect_urls(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = Response('http://scrapytest.org/first', headers={'Location': '/redirected'}, status=302)\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        rsp2 = Response('http://scrapytest.org/redirected', headers={'Location': '/redirected2'}, status=302)\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n\n        self.assertEqual(req2.url, 'http://scrapytest.org/redirected')\n        self.assertEqual(req2.meta['redirect_urls'], ['http://scrapytest.org/first'])\n        self.assertEqual(req3.url, 'http://scrapytest.org/redirected2')\n        self.assertEqual(req3.meta['redirect_urls'], ['http://scrapytest.org/first', 'http://scrapytest.org/redirected'])",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_reasons#158",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_redirect_reasons(self)",
        "snippet": "    def test_redirect_reasons(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = Response('http://scrapytest.org/first', headers={'Location': '/redirected1'}, status=301)\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        rsp2 = Response('http://scrapytest.org/redirected1', headers={'Location': '/redirected2'}, status=301)\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n\n        self.assertEqual(req2.meta['redirect_reasons'], [301])\n        self.assertEqual(req3.meta['redirect_reasons'], [301, 301])",
        "begin_line": 158,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_spider_handling#168",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_spider_handling(self)",
        "snippet": "    def test_spider_handling(self):\n        smartspider = self.crawler._create_spider('smarty')\n        smartspider.handle_httpstatus_list = [404, 301, 302]\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        req = Request(url)\n        rsp = Response(url, headers={'Location': url2}, status=301)\n        r = self.mw.process_response(req, rsp, smartspider)\n        self.assertIs(r, rsp)",
        "begin_line": 168,
        "end_line": 176,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_request_meta_handling#178",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_request_meta_handling(self)",
        "snippet": "    def test_request_meta_handling(self):\n        url = 'http://www.example.com/301'\n        url2 = 'http://www.example.com/redirected'\n        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)\n        _test_passthrough(Request(url, meta={'handle_httpstatus_list':\n                                                           [404, 301, 302]}))\n        _test_passthrough(Request(url, meta={'handle_httpstatus_all': True}))",
        "begin_line": 178,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test_passthrough#181",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest._test_passthrough(req)",
        "snippet": "        def _test_passthrough(req):\n            rsp = Response(url, headers={'Location': url2}, status=301, request=req)\n            r = self.mw.process_response(req, rsp, self.spider)\n            self.assertIs(r, rsp)",
        "begin_line": 181,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_latin1_location#189",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_latin1_location(self)",
        "snippet": "    def test_latin1_location(self):\n        req = Request('http://scrapytest.org/first')\n        latin1_location = u'/a\u00e7\u00e3o'.encode('latin1')  # HTTP historically supports latin1\n        resp = Response('http://scrapytest.org/first', headers={'Location': latin1_location}, status=302)\n        req_result = self.mw.process_response(req, resp, self.spider)\n        perc_encoded_utf8_url = 'http://scrapytest.org/a%E7%E3o'\n        self.assertEqual(perc_encoded_utf8_url, req_result.url)",
        "begin_line": 189,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_utf8_location#197",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.RedirectMiddlewareTest.test_utf8_location(self)",
        "snippet": "    def test_utf8_location(self):\n        req = Request('http://scrapytest.org/first')\n        utf8_location = u'/a\u00e7\u00e3o'.encode('utf-8')  # header using UTF-8 encoding\n        resp = Response('http://scrapytest.org/first', headers={'Location': utf8_location}, status=302)\n        req_result = self.mw.process_response(req, resp, self.spider)\n        perc_encoded_utf8_url = 'http://scrapytest.org/a%C3%A7%C3%A3o'\n        self.assertEqual(perc_encoded_utf8_url, req_result.url)",
        "begin_line": 197,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.setUp#208",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.setUp(self)",
        "snippet": "    def setUp(self):\n        crawler = get_crawler(Spider)\n        self.spider = crawler._create_spider('foo')\n        self.mw = MetaRefreshMiddleware.from_crawler(crawler)",
        "begin_line": 208,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest._body#213",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest._body(self, interval=5, url='http://example.org/newpage')",
        "snippet": "    def _body(self, interval=5, url='http://example.org/newpage'):\n        html = u\"\"\"<html><head><meta http-equiv=\"refresh\" content=\"{0};url={1}\"/></head></html>\"\"\"\n        return html.format(interval, url).encode('utf-8')",
        "begin_line": 213,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_priority_adjust#217",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_priority_adjust(self)",
        "snippet": "    def test_priority_adjust(self):\n        req = Request('http://a.com')\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert req2.priority > req.priority",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh#223",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh(self)",
        "snippet": "    def test_meta_refresh(self):\n        req = Request(url='http://example.org')\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, 'http://example.org/newpage')",
        "begin_line": 223,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_with_high_interval#230",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_with_high_interval(self)",
        "snippet": "    def test_meta_refresh_with_high_interval(self):\n        # meta-refresh with high intervals don't trigger redirects\n        req = Request(url='http://example.org')\n        rsp = HtmlResponse(url='http://example.org',\n                           body=self._body(interval=1000),\n                           encoding='utf-8')\n        rsp2 = self.mw.process_response(req, rsp, self.spider)\n        assert rsp is rsp2",
        "begin_line": 230,
        "end_line": 237,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_trough_posted_request#239",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_meta_refresh_trough_posted_request(self)",
        "snippet": "    def test_meta_refresh_trough_posted_request(self):\n        req = Request(url='http://example.org', method='POST', body='test',\n                      headers={'Content-Type': 'text/plain', 'Content-length': '4'})\n        rsp = HtmlResponse(req.url, body=self._body())\n        req2 = self.mw.process_response(req, rsp, self.spider)\n\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, 'http://example.org/newpage')\n        self.assertEqual(req2.method, 'GET')\n        assert 'Content-Type' not in req2.headers, \\\n            \"Content-Type header must not be present in redirected request\"\n        assert 'Content-Length' not in req2.headers, \\\n            \"Content-Length header must not be present in redirected request\"\n        assert not req2.body, \\\n            \"Redirected body must be empty, not '%s'\" % req2.body",
        "begin_line": 239,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_max_redirect_times#255",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_max_redirect_times(self)",
        "snippet": "    def test_max_redirect_times(self):\n        self.mw.max_redirect_times = 1\n        req = Request('http://scrapytest.org/max')\n        rsp = HtmlResponse(req.url, body=self._body())\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        assert 'redirect_times' in req.meta\n        self.assertEqual(req.meta['redirect_times'], 1)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 255,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ttl#266",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ttl(self)",
        "snippet": "    def test_ttl(self):\n        self.mw.max_redirect_times = 100\n        req = Request('http://scrapytest.org/302', meta={'redirect_ttl': 1})\n        rsp = HtmlResponse(req.url, body=self._body())\n\n        req = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(req, Request)\n        self.assertRaises(IgnoreRequest, self.mw.process_response, req, rsp, self.spider)",
        "begin_line": 266,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_urls#275",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_urls(self)",
        "snippet": "    def test_redirect_urls(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = HtmlResponse(req1.url, body=self._body(url='/redirected'))\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        assert isinstance(req2, Request), req2\n        rsp2 = HtmlResponse(req2.url, body=self._body(url='/redirected2'))\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n        assert isinstance(req3, Request), req3\n        self.assertEqual(req2.url, 'http://scrapytest.org/redirected')\n        self.assertEqual(req2.meta['redirect_urls'], ['http://scrapytest.org/first'])\n        self.assertEqual(req3.url, 'http://scrapytest.org/redirected2')\n        self.assertEqual(req3.meta['redirect_urls'], ['http://scrapytest.org/first', 'http://scrapytest.org/redirected'])",
        "begin_line": 275,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_reasons#288",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_redirect_reasons(self)",
        "snippet": "    def test_redirect_reasons(self):\n        req1 = Request('http://scrapytest.org/first')\n        rsp1 = HtmlResponse('http://scrapytest.org/first', body=self._body(url='/redirected'))\n        req2 = self.mw.process_response(req1, rsp1, self.spider)\n        rsp2 = HtmlResponse('http://scrapytest.org/redirected', body=self._body(url='/redirected1'))\n        req3 = self.mw.process_response(req2, rsp2, self.spider)\n\n        self.assertEqual(req2.meta['redirect_reasons'], ['meta refresh'])\n        self.assertEqual(req3.meta['redirect_reasons'], ['meta refresh', 'meta refresh'])",
        "begin_line": 288,
        "end_line": 296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ignore_tags_default#298",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ignore_tags_default(self)",
        "snippet": "    def test_ignore_tags_default(self):\n        req = Request(url='http://example.org')\n        body = ('''<noscript><meta http-equiv=\"refresh\" '''\n                '''content=\"0;URL='http://example.org/newpage'\"></noscript>''')\n        rsp = HtmlResponse(req.url, body=body.encode())\n        response = self.mw.process_response(req, rsp, self.spider)\n        assert isinstance(response, Response)",
        "begin_line": 298,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ignore_tags_empty_list#306",
        "src_path": "tests/test_downloadermiddleware_redirect.py",
        "class_name": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest",
        "signature": "tests.test_downloadermiddleware_redirect.MetaRefreshMiddlewareTest.test_ignore_tags_empty_list(self)",
        "snippet": "    def test_ignore_tags_empty_list(self):\n        crawler = get_crawler(Spider, {'METAREFRESH_IGNORE_TAGS': []})\n        mw = MetaRefreshMiddleware.from_crawler(crawler)\n        req = Request(url='http://example.org')\n        body = ('''<noscript><meta http-equiv=\"refresh\" '''\n                '''content=\"0;URL='http://example.org/newpage'\"></noscript>''')\n        rsp = HtmlResponse(req.url, body=body.encode())\n        req2 = mw.process_response(req, rsp, self.spider)\n        assert isinstance(req2, Request)\n        self.assertEqual(req2.url, 'http://example.org/newpage')",
        "begin_line": 306,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    }
]