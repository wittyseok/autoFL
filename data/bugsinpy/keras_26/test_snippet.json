[
    {
        "name": "tests.keras.backend.backend_test.check_dtype#38",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.check_dtype(var, dtype)",
        "snippet": "def check_dtype(var, dtype):\n    if K._BACKEND == 'theano':\n        assert var.dtype == dtype\n    else:\n        assert var.dtype.name == '%s_ref' % dtype",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.cntk_func_single_tensor#45",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.cntk_func_single_tensor(function_name, x_shape, **kwargs)",
        "snippet": "def cntk_func_single_tensor(function_name, x_shape, **kwargs):\n    xc = KC.placeholder(x_shape)\n    output_cntk = getattr(KC, function_name)(xc, **kwargs)\n    return KC.function([xc], [output_cntk])",
        "begin_line": 45,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.cntk_func_two_tensor#51",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.cntk_func_two_tensor(function_name, x_shape, y, **kwargs)",
        "snippet": "def cntk_func_two_tensor(function_name, x_shape, y, **kwargs):\n    if isinstance(y, (np.generic, np.ndarray)):\n        xc = KC.placeholder(x_shape)\n        output_cntk = getattr(KC, function_name)(xc, KC.variable(y), **kwargs)\n        return KC.function([xc], [output_cntk])\n    else:\n        xc = KC.placeholder(ndim=len(x_shape))\n        yc = KC.placeholder(y)\n        output_cntk = getattr(KC, function_name)(xc, yc, **kwargs)\n        return KC.function([xc, yc], [output_cntk])",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.cntk_func_three_tensor#63",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.cntk_func_three_tensor(function_name, x_shape, y, z, **kwargs)",
        "snippet": "def cntk_func_three_tensor(function_name, x_shape, y, z, **kwargs):\n    xc = KC.placeholder(x_shape)\n    output_cntk = getattr(KC, function_name)(xc, KC.variable(y), KC.variable(z), **kwargs)\n    return KC.function([xc], [output_cntk])",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.parse_shape_or_val#69",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.parse_shape_or_val(shape_or_val)",
        "snippet": "def parse_shape_or_val(shape_or_val):\n    if isinstance(shape_or_val, np.ndarray):\n        return shape_or_val.shape, shape_or_val\n    else:\n        return shape_or_val, np.random.random(shape_or_val).astype(np.float32) - 0.5",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.assert_list_pairwise#76",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.assert_list_pairwise(z_list, shape=True, allclose=True, itself=False, atol=1e-05)",
        "snippet": "def assert_list_pairwise(z_list, shape=True, allclose=True, itself=False, atol=1e-05):\n    for (z1, z2) in zip(z_list[1:], z_list[:-1]):\n        if shape:\n            assert z1.shape == z2.shape\n        if allclose:\n            assert_allclose(z1, z2, atol=atol)\n        if itself:\n            assert z1 == z2",
        "begin_line": 76,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.assert_list_with_ref#86",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.assert_list_with_ref(z_list, ref)",
        "snippet": "def assert_list_with_ref(z_list, ref):\n    for z in z_list:\n        assert z.shape == ref.shape\n        assert_allclose(z, ref, atol=1e-05)",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.assert_list_keras_shape#92",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.assert_list_keras_shape(z_list)",
        "snippet": "def assert_list_keras_shape(z_list):\n    for z in z_list:\n        if hasattr(z, '_keras_shape'):\n            assert z._keras_shape == z.shape",
        "begin_line": 92,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.check_single_tensor_operation#99",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.check_single_tensor_operation(function_name, x_shape_or_val, backend_list, **kwargs)",
        "snippet": "def check_single_tensor_operation(function_name, x_shape_or_val, backend_list, **kwargs):\n    shape_or_val = kwargs.pop('shape_or_val', True)\n    assert_value_equality = kwargs.pop('assert_value_equality', True)\n    assert_value_with_ref = kwargs.pop('assert_value_with_ref', None)\n    cntk_dynamicity = kwargs.pop('cntk_dynamicity', False)\n    return_results = kwargs.pop('return_results', False)\n\n    if shape_or_val:\n        x_shape, x_val = parse_shape_or_val(x_shape_or_val)\n\n    z_list = []\n    for k in backend_list:\n        if shape_or_val:\n            if (k == KC) & (cntk_dynamicity):\n                z = cntk_func_single_tensor(function_name, x_shape,\n                                            **kwargs)([x_val])[0]\n            else:\n                z = k.eval(getattr(k, function_name)(k.variable(x_val), **kwargs))\n        else:\n            z = k.eval(getattr(k, function_name)(x_shape_or_val, **kwargs))\n        z_list += [z]\n\n    if return_results:\n        if len(z_list) > 1:\n            return z_list\n        else:\n            return z_list[0]\n\n    if assert_value_with_ref is not None:\n        assert_list_with_ref(z_list, assert_value_with_ref)\n    else:\n        assert_list_pairwise(z_list, allclose=assert_value_equality)\n    assert_list_keras_shape(z_list)",
        "begin_line": 99,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.check_two_tensor_operation#135",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.check_two_tensor_operation(function_name, x_shape_or_val, y_shape_or_val, backend_list, **kwargs)",
        "snippet": "def check_two_tensor_operation(function_name, x_shape_or_val,\n                               y_shape_or_val, backend_list, **kwargs):\n    shape_or_val = kwargs.pop('shape_or_val', True)\n    concat_args = kwargs.pop('concat_args', False)\n    cntk_dynamicity = kwargs.pop('cntk_dynamicity', False)\n    cntk_two_dynamicity = kwargs.pop('cntk_two_dynamicity', False)\n    return_results = kwargs.pop('return_results', False)\n\n    if shape_or_val:\n        x_shape, x_val = parse_shape_or_val(x_shape_or_val)\n        y_shape, y_val = parse_shape_or_val(y_shape_or_val)\n\n    z_list = []\n    for k in backend_list:\n        if shape_or_val:\n            if (k == KC) & (cntk_dynamicity):\n                z = cntk_func_two_tensor(function_name, x_shape,\n                                         y=y_val, **kwargs)([x_val])[0]\n            elif (k == KC) & (cntk_two_dynamicity):\n                z = cntk_func_two_tensor(function_name, x_shape,\n                                         y=y_shape, **kwargs)([x_val, y_val])[0]\n            elif (k == KTH) & (function_name[:4] == 'conv'):\n                z = k.eval(getattr(k, function_name)(\n                    k.variable(x_val), k.variable(convert_kernel(y_val)), **kwargs))\n            elif concat_args:\n                z = k.eval(getattr(k, function_name)(\n                    [k.variable(x_val), k.variable(y_val)], **kwargs))\n            else:\n                z = k.eval(getattr(k, function_name)(\n                    k.variable(x_val), k.variable(y_val), **kwargs))\n        else:\n            z = k.eval(getattr(k, function_name)(\n                x_shape_or_val, y_shape_or_val, **kwargs))\n        z_list += [z]\n\n    if return_results:\n        if len(z_list) > 1:\n            return z_list\n        else:\n            return z_list[0]\n\n    assert_list_pairwise(z_list)\n    assert_list_keras_shape(z_list)",
        "begin_line": 135,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.check_composed_tensor_operations#181",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test",
        "signature": "tests.keras.backend.backend_test.check_composed_tensor_operations(first_function_name, first_function_args, second_function_name, second_function_args, input_shape, backend_list)",
        "snippet": "def check_composed_tensor_operations(first_function_name, first_function_args,\n                                     second_function_name, second_function_args,\n                                     input_shape, backend_list):\n    val = np.random.random(input_shape) - 0.5\n\n    z_list = []\n    for k in backend_list:\n        x = k.variable(val)\n        y = getattr(k, first_function_name)(x, **first_function_args)\n        z = k.eval(getattr(k, second_function_name)(y, **second_function_args))\n        z_list += [z]\n\n    assert_list_pairwise(z_list)",
        "begin_line": 181,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_is_keras_tensor#198",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_is_keras_tensor(self)",
        "snippet": "    def test_is_keras_tensor(self):\n        for k in BACKENDS:\n            np_var = np.array([1, 2])\n            with pytest.raises(ValueError):\n                k.is_keras_tensor(np_var)\n\n            keras_var = k.variable(np_var)\n            assert k.is_keras_tensor(keras_var) is False\n            keras_placeholder = k.placeholder(shape=(2, 4, 5))\n            assert k.is_keras_tensor(keras_placeholder) is False",
        "begin_line": 198,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_set_learning_phase#209",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_set_learning_phase(self)",
        "snippet": "    def test_set_learning_phase(self):\n        # not supported learning_phase\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                k.set_learning_phase(2)",
        "begin_line": 209,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_eye#215",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_eye(self)",
        "snippet": "    def test_eye(self):\n        z_list = [k.eval(k.eye(3)) for k in BACKENDS]\n        assert_list_pairwise(z_list)",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_linear_operations#219",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_linear_operations(self)",
        "snippet": "    def test_linear_operations(self):\n        check_two_tensor_operation('dot', (4, 2), (2, 4), BACKENDS)\n        check_two_tensor_operation('dot', (4, 2), (5, 2, 3), BACKENDS)\n\n        check_two_tensor_operation('batch_dot', (4, 2, 3), (4, 5, 3),\n                                   BACKENDS, cntk_two_dynamicity=True, axes=(2, 2))\n        check_two_tensor_operation('batch_dot', (4, 2, 3), (4, 3),\n                                   BACKENDS, cntk_two_dynamicity=True, axes=(2, 1))\n        check_two_tensor_operation('batch_dot', (4, 2), (4, 2, 3),\n                                   BACKENDS, cntk_two_dynamicity=True, axes=(1, 1))\n        check_two_tensor_operation('batch_dot', (32, 20), (32, 20),\n                                   BACKENDS, cntk_two_dynamicity=True, axes=1)\n        check_two_tensor_operation('batch_dot', (32, 20), (32, 20),\n                                   BACKENDS, cntk_two_dynamicity=True, axes=(1, 1))\n\n        check_single_tensor_operation('transpose', (4, 2), BACKENDS)\n        check_single_tensor_operation('reverse', (4, 3, 2), BACKENDS, axes=1)\n        check_single_tensor_operation('reverse', (4, 3, 2), [KTH, KTF], axes=(1, 2))",
        "begin_line": 219,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_random_variables#238",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_random_variables(self)",
        "snippet": "    def test_random_variables(self):\n        check_single_tensor_operation('random_uniform_variable', (2, 3), BACKENDS,\n                                      low=0., high=1.,\n                                      shape_or_val=False, assert_value_equality=False)\n        check_single_tensor_operation('random_normal_variable', (2, 3), BACKENDS,\n                                      mean=0., scale=1.,\n                                      shape_or_val=False, assert_value_equality=False)",
        "begin_line": 238,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_batch_dot_shape#247",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_batch_dot_shape(self)",
        "snippet": "    def test_batch_dot_shape(self):\n        x_batch = K.ones(shape=(32, 20))\n        y_batch = K.ones(shape=(32, 20))\n        xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=1)\n        assert_allclose(K.eval(xy_batch_dot), np.ones((32, 1)) * 20, atol=1e-05)\n        xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=0)\n        assert_allclose(K.eval(xy_batch_dot), np.ones((20, 1)) * 32, atol=1e-05)\n        # making sure swapping axes when ndim == 2 works\n        x_batch = K.ones(shape=(32, 20))\n        y_batch = K.ones(shape=(20, 32))\n        xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=(0, 1))\n        assert_allclose(K.eval(xy_batch_dot), np.ones((20, 1)) * 32, atol=1e-05)\n        xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=(1, 0))\n        assert_allclose(K.eval(xy_batch_dot), np.ones((32, 1)) * 20, atol=1e-05)",
        "begin_line": 247,
        "end_line": 260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_shape_operations#262",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_shape_operations(self)",
        "snippet": "    def test_shape_operations(self):\n        check_two_tensor_operation('concatenate', (4, 3), (4, 2), BACKENDS,\n                                   axis=-1, concat_args=True)\n\n        check_single_tensor_operation('reshape', (4, 2), BACKENDS, shape=(8, 1))\n        check_single_tensor_operation('permute_dimensions', (4, 2, 3), BACKENDS,\n                                      pattern=(2, 0, 1))\n        check_single_tensor_operation('repeat', (4, 1), BACKENDS, n=3)\n        check_single_tensor_operation('flatten', (4, 1), BACKENDS)\n        check_single_tensor_operation('batch_flatten', (20, 2, 5), BACKENDS,\n                                      cntk_dynamicity=True)\n        check_single_tensor_operation('expand_dims', (4, 3), BACKENDS, axis=-1)\n        check_single_tensor_operation('expand_dims', (4, 3, 2), BACKENDS, axis=1)\n        check_single_tensor_operation('squeeze', (4, 3, 1), BACKENDS, axis=2)\n        check_single_tensor_operation('squeeze', (4, 1, 1), BACKENDS, axis=1)\n        check_composed_tensor_operations('reshape', {'shape': (4, 3, 1, 1)},\n                                         'squeeze', {'axis': 2},\n                                         (4, 3, 1, 1), BACKENDS)",
        "begin_line": 262,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_none_shape_operations#281",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_none_shape_operations(self)",
        "snippet": "    def test_none_shape_operations(self):\n        # Test shape inference when input\n        # shape has `None` entries\n        if K.backend() == 'theano':\n            x = KTH.placeholder((3, None, 4))\n\n            y = KTH.batch_flatten(x)\n            if hasattr(y, '_keras_shape'):\n                assert y._keras_shape == (3, None)\n\n            y = KTH.flatten(x)\n            if hasattr(y, '_keras_shape'):\n                assert y._keras_shape == (None, )",
        "begin_line": 281,
        "end_line": 293,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_repeat_elements#295",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_repeat_elements(self)",
        "snippet": "    def test_repeat_elements(self):\n        reps = 3\n        for ndims in [1, 2, 3]:\n            shape = np.arange(2, 2 + ndims)\n            arr = np.arange(np.prod(shape)).reshape(shape)\n\n            for rep_axis in range(ndims):\n                np_rep = np.repeat(arr, reps, axis=rep_axis)\n                check_single_tensor_operation('repeat_elements', arr, BACKENDS,\n                                              rep=reps, axis=rep_axis,\n                                              assert_value_with_ref=np_rep)\n\n                if K.backend() != 'cntk':\n                    shape = list(shape)\n                    shape[rep_axis] = None\n                    x = K.placeholder(shape=shape)\n                    y = K.repeat_elements(x, reps, axis=rep_axis)\n                    assert y._keras_shape == tuple(shape)\n                    assert y._keras_shape == K.int_shape(y)",
        "begin_line": 295,
        "end_line": 313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_tile#315",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_tile(self)",
        "snippet": "    def test_tile(self):\n        shape = (3, 4)\n        arr = np.arange(np.prod(shape)).reshape(shape)\n        check_single_tensor_operation('tile', arr, BACKENDS, n=[2, 1])\n        check_single_tensor_operation('tile', (2, 5), BACKENDS, n=[5, 2])\n\n        # test theano shape inference when\n        # input shape has None entries\n        if K.backend() == 'theano':\n            x = K.placeholder(shape=(None, 4))\n            n = 2\n            y = K.tile(x, n)\n            assert y._keras_shape == (None, 8)\n            n = (4, 3)\n            y = K.tile(x, n)\n            assert y._keras_shape == (None, 12)",
        "begin_line": 315,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_gather#332",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_gather(self)",
        "snippet": "    def test_gather(self):\n        shape = (10, 2, 3)\n        ref = np.arange(np.prod(shape)).reshape(shape)\n        inds = [1, 3, 7, 9]\n        z_list = [k.eval(k.gather(k.variable(ref), k.variable(inds, dtype='int32')))\n                  for k in BACKENDS]\n\n        assert_list_pairwise(z_list)\n        assert_list_keras_shape(z_list)\n\n        # test theano shape inference when\n        # input shape has None entries\n        if K.backend() == 'theano':\n            x = K.placeholder(shape=(None, 3, 4))\n            indices = K.placeholder(shape=(5, 6), dtype='int32')\n            y = K.gather(x, indices)\n            assert y._keras_shape == (5, 6, 3, 4)",
        "begin_line": 332,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_value_manipulation#350",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_value_manipulation(self)",
        "snippet": "    def test_value_manipulation(self):\n        val = np.random.random((4, 2))\n        for function_name in ['get_value', 'count_params',\n                              'int_shape', 'get_variable_shape']:\n            v_list = [getattr(k, function_name)(k.variable(val))\n                      for k in BACKENDS]\n\n            if function_name == 'get_value':\n                assert_list_pairwise(v_list)\n            else:\n                assert_list_pairwise(v_list, shape=False, allclose=False, itself=True)\n\n        # print_tensor\n        check_single_tensor_operation('print_tensor', (), BACKENDS)\n        check_single_tensor_operation('print_tensor', (2,), BACKENDS)\n        check_single_tensor_operation('print_tensor', (4, 3), BACKENDS)\n        check_single_tensor_operation('print_tensor', (1, 2, 3), BACKENDS)",
        "begin_line": 350,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_elementwise_operations#368",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_elementwise_operations(self)",
        "snippet": "    def test_elementwise_operations(self):\n        check_single_tensor_operation('max', (4, 2), BACKENDS)\n        check_single_tensor_operation('max', (4, 2), BACKENDS, axis=1, keepdims=True)\n\n        check_single_tensor_operation('min', (4, 2), BACKENDS)\n        check_single_tensor_operation('min', (4, 2), BACKENDS, axis=1, keepdims=True)\n        check_single_tensor_operation('min', (4, 2, 3), BACKENDS, axis=[1, -1])\n\n        check_single_tensor_operation('mean', (4, 2), BACKENDS)\n        check_single_tensor_operation('mean', (4, 2), BACKENDS, axis=1, keepdims=True)\n        check_single_tensor_operation('mean', (4, 2, 3), BACKENDS, axis=-1, keepdims=True)\n        check_single_tensor_operation('mean', (4, 2, 3), BACKENDS, axis=[1, -1])\n\n        check_single_tensor_operation('std', (4, 2), BACKENDS)\n        check_single_tensor_operation('std', (4, 2), BACKENDS, axis=1, keepdims=True)\n        check_single_tensor_operation('std', (4, 2, 3), BACKENDS, axis=[1, -1])\n\n        check_single_tensor_operation('prod', (4, 2), BACKENDS)\n        check_single_tensor_operation('prod', (4, 2), BACKENDS, axis=1, keepdims=True)\n        check_single_tensor_operation('prod', (4, 2, 3), BACKENDS, axis=[1, -1])\n\n        # cntk does not support cumsum and cumprod yet\n        check_single_tensor_operation('cumsum', (4, 2), [KTF, KTH])\n        check_single_tensor_operation('cumsum', (4, 2), [KTF, KTH], axis=1)\n\n        check_single_tensor_operation('cumprod', (4, 2), [KTF, KTH])\n        check_single_tensor_operation('cumprod', (4, 2), [KTF, KTH], axis=1)\n\n        check_single_tensor_operation('any', (4, 2), BACKENDS)\n        check_single_tensor_operation('any', (4, 2), BACKENDS, axis=1, keepdims=True)\n\n        check_single_tensor_operation('all', (4, 2), BACKENDS)\n        check_single_tensor_operation('all', (4, 2), BACKENDS, axis=1, keepdims=True)\n\n        check_single_tensor_operation('argmax', (4, 2), BACKENDS)\n        check_single_tensor_operation('argmax', (4, 2), BACKENDS, axis=1)\n\n        check_single_tensor_operation('argmin', (4, 2), BACKENDS)\n        check_single_tensor_operation('argmin', (4, 2), BACKENDS, axis=1)\n\n        check_single_tensor_operation('square', (4, 2), BACKENDS)\n        check_single_tensor_operation('abs', (4, 2), BACKENDS)\n        check_single_tensor_operation('sqrt', (4, 2), BACKENDS)\n        check_single_tensor_operation('exp', (4, 2), BACKENDS)\n        # cntk return -85.1 for zero or negative number, not nan, so can't compare with other backend.\n        check_single_tensor_operation('log', (4, 2), [KTH, KTF])\n        check_single_tensor_operation('round', (4, 2), BACKENDS)\n        check_single_tensor_operation('sign', (4, 2), BACKENDS)\n        check_single_tensor_operation('pow', (4, 2), BACKENDS, a=3)\n        check_single_tensor_operation('clip', (4, 2), BACKENDS, min_value=0.4,\n                                      max_value=0.6)\n\n        # two-tensor ops\n        check_two_tensor_operation('equal', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('not_equal', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('greater', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('greater_equal', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('less', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('less_equal', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('maximum', (4, 2), (4, 2), BACKENDS)\n        check_two_tensor_operation('minimum', (4, 2), (4, 2), BACKENDS)",
        "begin_line": 368,
        "end_line": 428,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_gradient#431",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_gradient(self)",
        "snippet": "    def test_gradient(self):\n        val = np.random.random((4, 2))\n        x_list = [k.variable(val) for k in [KTH, KTF]]\n        z_list = []\n        zero_list = []\n        for x, k in zip(x_list, [KTH, KTF]):\n            exp = x * k.exp(x)\n            loss = k.sum(exp)\n            zero_loss = k.stop_gradient(loss)\n            grad = k.gradients(loss, [exp])\n            zero_grad = k.gradients(loss + zero_loss, [exp])\n            z_list.append(k.eval(grad[0]))\n            zero_list.append(k.eval(zero_grad[0]))\n\n        assert_list_pairwise(z_list)\n        assert_list_pairwise(zero_list)\n        for i in range(len(z_list)):\n            assert_allclose(zero_list[i], z_list[i], atol=1e-05)",
        "begin_line": 431,
        "end_line": 448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_stop_gradient#450",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_stop_gradient(self)",
        "snippet": "    def test_stop_gradient(self):\n        # This test checks the consistency of the stop_gradient backend API.\n        # It doesn't check the functionality (which is checked at the\n        # test_gradient test).\n        val = np.random.random((4, 2))\n        for k in BACKENDS:\n            a = k.variable(val)\n            b = k.square(a)\n            c, d = k.stop_gradient([a, b])\n            e = k.stop_gradient(b)",
        "begin_line": 450,
        "end_line": 459,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_function#462",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_function(self)",
        "snippet": "    def test_function(self):\n        test_backend = [KTH, KTF]\n        val = np.random.random((4, 2))\n        input_val = np.random.random((4, 2))\n\n        f_list = []\n        x_list = []\n        for k in test_backend:\n            x = k.variable(val)\n            x_list.append(x)\n            y = k.placeholder(ndim=2)\n            exp = k.square(x) + y\n            update = x * 2\n            f = k.function([y], [exp], updates=[(x, update)])\n            f_list.append(f)\n\n        function_outputs_list = [f([input_val])[0] for f in f_list]\n        assert_list_pairwise(function_outputs_list)\n\n        new_val_list = [k.get_value(x) for x, k in zip(x_list, test_backend)]\n        assert_list_pairwise(new_val_list)",
        "begin_line": 462,
        "end_line": 482,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_function_tf_fetches#484",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_function_tf_fetches(self)",
        "snippet": "    def test_function_tf_fetches(self):\n        # Additional operations can be passed to tf.Session().run() via its\n        # `fetches` arguments. In contrast to `updates` argument of\n        # KTF.function() these do not have control dependency on `outputs`, so\n        # they can run in parallel. Also they should not contribute to output of\n        # KTF.function().\n\n        x = KTF.variable(0.)\n        y = KTF.variable(0.)\n        x_placeholder = KTF.placeholder(shape=())\n        y_placeholder = KTF.placeholder(shape=())\n\n        f = KTF.function(inputs=[x_placeholder, y_placeholder],\n                         outputs=[x_placeholder + y_placeholder],\n                         updates=[(x, x_placeholder + 1.)],\n                         fetches=[KTF.update(y, 5.)])\n        output = f([10., 20.])\n        assert output == [30.]\n        assert KTF.get_session().run(fetches=[x, y]) == [11., 5.]",
        "begin_line": 484,
        "end_line": 502,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_function_tf_feed_dict#504",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_function_tf_feed_dict(self)",
        "snippet": "    def test_function_tf_feed_dict(self):\n        # Additional substitutions can be passed to `tf.Session().run()` via its\n        # `feed_dict` arguments. Note that the feed_dict is passed once in the\n        # constructor but we can modify the values in the dictionary. Through\n        # this feed_dict we can provide additional substitutions besides Keras\n        # inputs.\n\n        x = KTF.variable(0.)\n        y = KTF.variable(0.)\n        x_placeholder = KTF.placeholder(shape=())\n        y_placeholder = KTF.placeholder(shape=())\n\n        feed_dict = {y_placeholder: 3.}\n\n        f = KTF.function(inputs=[x_placeholder],\n                         outputs=[x_placeholder + 1.],\n                         updates=[(x, x_placeholder + 10.)],\n                         feed_dict=feed_dict,\n                         fetches=[KTF.update(y, y_placeholder * 10.)])\n        output = f([10.])\n        assert output == [11.]\n        assert KTF.get_session().run(fetches=[x, y]) == [20., 30.]\n\n        # updated value in feed_dict will be modified within the K.function()\n        feed_dict[y_placeholder] = 4.\n        output = f([20.])\n        assert output == [21.]\n        assert KTF.get_session().run(fetches=[x, y]) == [30., 40.]",
        "begin_line": 504,
        "end_line": 531,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_rnn#533",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_rnn(self)",
        "snippet": "    def test_rnn(self):\n        # implement a simple RNN\n        num_samples = 4\n        input_dim = 5\n        output_dim = 3\n        timesteps = 6\n\n        _, x = parse_shape_or_val((num_samples, timesteps, input_dim))\n        _, h0 = parse_shape_or_val((num_samples, output_dim))\n        _, wi = parse_shape_or_val((input_dim, output_dim))\n        _, wh = parse_shape_or_val((output_dim, output_dim))\n        mask = np.random.randint(2, size=(num_samples, timesteps))\n\n        x_k = K.variable(x)\n        h0_k = [K.variable(h0)]\n        wi_k = K.variable(wi)\n        wh_k = K.variable(wh)\n        mask_k = K.variable(mask)\n\n        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 1\n            y_k = K.dot(x_k, wi_k) + K.dot(h_k[0], wh_k)\n            return y_k, [y_k]\n\n        # test default setup\n        last_output_list = []\n        outputs_list = []\n        state_list = []\n\n        kwargs_list = [\n            {'go_backwards': False, 'mask': None},\n            {'go_backwards': False, 'mask': None, 'unroll': True, 'input_length': timesteps},\n            {'go_backwards': True, 'mask': None},\n            {'go_backwards': True, 'mask': None, 'unroll': True, 'input_length': timesteps},\n            {'go_backwards': False, 'mask': mask_k},\n            {'go_backwards': False, 'mask': mask_k, 'unroll': True, 'input_length': timesteps},\n        ]\n\n        for (i, kwargs) in enumerate(kwargs_list):\n            last_y1, y1, h1 = reference_operations.rnn(x, [wi, wh, None], h0, **kwargs)\n            last_y2, y2, h2 = K.rnn(rnn_fn, x_k, h0_k, **kwargs)\n\n            assert len(h2) == 1\n            last_y2 = K.eval(last_y2)\n            y2 = K.eval(y2)\n            h1 = h1[:, -1]\n            h2 = K.eval(h2[0])\n\n            if kwargs['mask'] is not None:\n                last_y1 = last_y1 * np.expand_dims(mask[:, -1], -1)\n                last_y2 = last_y2 * np.expand_dims(mask[:, -1], -1)\n                y1 = y1 * np.expand_dims(mask, -1)\n                y2 = y2 * np.expand_dims(mask, -1)\n                h1 = h1 * np.expand_dims(mask[:, -1], -1)\n                h2 = h2 * np.expand_dims(mask[:, -1], -1)\n\n            last_output_list.append(last_y2)\n            outputs_list.append(y2)\n            state_list.append(h2)\n\n            if i % 2 == 0:\n                assert_allclose(last_y1, last_y2, atol=1e-05)\n                assert_allclose(y1, y2, atol=1e-05)\n                assert_allclose(h1, h2, atol=1e-05)\n            else:\n                assert_allclose(last_output_list[i - 1], last_output_list[i], atol=1e-05)\n                assert_allclose(outputs_list[i - 1], outputs_list[i], atol=1e-05)\n                assert_allclose(state_list[i - 1], state_list[i], atol=1e-05)",
        "begin_line": 533,
        "end_line": 600,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.rnn_fn#552",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.rnn_fn(x_k, h_k)",
        "snippet": "        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 1\n            y_k = K.dot(x_k, wi_k) + K.dot(h_k[0], wh_k)\n            return y_k, [y_k]",
        "begin_line": 552,
        "end_line": 555,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_rnn_additional_states#602",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_rnn_additional_states(self)",
        "snippet": "    def test_rnn_additional_states(self):\n        # implement a simple RNN with an additional state\n        # whose shape is different from that of the output\n        num_samples = 4\n        input_dim = 5\n        output_dim = 3\n        timesteps = 6\n\n        _, x = parse_shape_or_val((num_samples, timesteps, input_dim))\n        _, h0 = parse_shape_or_val((num_samples, output_dim))\n        _, wi = parse_shape_or_val((input_dim, output_dim))\n        _, wh = parse_shape_or_val((output_dim, output_dim))\n        mask = np.random.randint(2, size=(num_samples, timesteps))\n\n        x_k = K.variable(x)\n        h0_k = [K.variable(h0), K.variable(np.concatenate([h0, h0], axis=-1))]\n        wi_k = K.variable(wi)\n        wh_k = K.variable(wh)\n        mask_k = K.variable(mask)\n\n        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 2\n            y_k = K.dot(x_k, wi_k) + K.dot(h_k[0], wh_k)\n            return y_k, [y_k, K.concatenate([y_k, y_k], axis=-1)]\n\n        # test default setup\n        last_output_list = []\n        outputs_list = []\n        state_list = []\n\n        kwargs_list = [\n            {'go_backwards': False, 'mask': None},\n            {'go_backwards': False, 'mask': None, 'unroll': True, 'input_length': timesteps},\n            {'go_backwards': True, 'mask': None},\n            {'go_backwards': True, 'mask': None, 'unroll': True, 'input_length': timesteps},\n            {'go_backwards': False, 'mask': mask_k},\n            {'go_backwards': False, 'mask': mask_k, 'unroll': True, 'input_length': timesteps},\n        ]\n\n        for (i, kwargs) in enumerate(kwargs_list):\n            last_y1, y1, h1 = reference_operations.rnn(x, [wi, wh, None], h0, **kwargs)\n            last_y2, y2, h2 = K.rnn(rnn_fn, x_k, h0_k, **kwargs)\n\n            assert len(h2) == 2\n            last_y2 = K.eval(last_y2)\n            y2 = K.eval(y2)\n            h11 = h1[:, -1]\n            h12 = np.concatenate([h1[:, -1], h1[:, -1]], axis=-1)\n            h21 = K.eval(h2[0])\n            h22 = K.eval(h2[1])\n\n            if kwargs['mask'] is not None:\n                last_y1 = last_y1 * np.expand_dims(mask[:, -1], -1)\n                last_y2 = last_y2 * np.expand_dims(mask[:, -1], -1)\n                y1 = y1 * np.expand_dims(mask, -1)\n                y2 = y2 * np.expand_dims(mask, -1)\n                h11 = h11 * np.expand_dims(mask[:, -1], -1)\n                h21 = h21 * np.expand_dims(mask[:, -1], -1)\n                h12 = h12 * np.expand_dims(mask[:, -1], -1)\n                h22 = h22 * np.expand_dims(mask[:, -1], -1)\n\n            last_output_list.append(last_y2)\n            outputs_list.append(y2)\n            state_list.append((h21, h22))\n\n            if i % 2 == 0:\n                assert_allclose(last_y1, last_y2, atol=1e-05)\n                assert_allclose(y1, y2, atol=1e-05)\n                assert_allclose(h11, h21, atol=1e-05)\n                assert_allclose(h12, h22, atol=1e-05)\n            else:\n                assert_allclose(last_output_list[i - 1], last_output_list[i], atol=1e-05)\n                assert_allclose(outputs_list[i - 1], outputs_list[i], atol=1e-05)\n                assert_allclose(state_list[i - 1][0], state_list[i][0], atol=1e-05)\n                assert_allclose(state_list[i - 1][1], state_list[i][1], atol=1e-05)",
        "begin_line": 602,
        "end_line": 676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.rnn_fn#622",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.rnn_fn(x_k, h_k)",
        "snippet": "        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 2\n            y_k = K.dot(x_k, wi_k) + K.dot(h_k[0], wh_k)\n            return y_k, [y_k, K.concatenate([y_k, y_k], axis=-1)]",
        "begin_line": 622,
        "end_line": 625,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_rnn_no_states#678",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_rnn_no_states(self)",
        "snippet": "    def test_rnn_no_states(self):\n        # implement a simple RNN without states\n        input_dim = 8\n        output_dim = 4\n        timesteps = 5\n\n        _, x = parse_shape_or_val((32, timesteps, input_dim))\n        _, wi = parse_shape_or_val((input_dim, output_dim))\n\n        x_k = K.variable(x)\n        wi_k = K.variable(wi)\n\n        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 0\n            y_k = K.dot(x_k, wi_k)\n            return y_k, []\n\n        last_y1, y1, h1 = reference_operations.rnn(x, [wi, None, None], None,\n                                                   go_backwards=False, mask=None)\n        last_y2, y2, h2 = K.rnn(rnn_fn, x_k, [],\n                                go_backwards=False, mask=None)\n\n        assert len(h2) == 0\n        last_y2 = K.eval(last_y2)\n        y2 = K.eval(y2)\n\n        assert_allclose(last_y1, last_y2, atol=1e-05)\n        assert_allclose(y1, y2, atol=1e-05)",
        "begin_line": 678,
        "end_line": 705,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.rnn_fn#690",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.rnn_fn(x_k, h_k)",
        "snippet": "        def rnn_fn(x_k, h_k):\n            assert len(h_k) == 0\n            y_k = K.dot(x_k, wi_k)\n            return y_k, []",
        "begin_line": 690,
        "end_line": 693,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_rnn#707",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_rnn(self)",
        "snippet": "    def legacy_test_rnn(self):\n        # implement a simple RNN\n        num_samples = 4\n        input_dim = 5\n        output_dim = 3\n        timesteps = 6\n\n        input_val = np.random.random((num_samples, timesteps, input_dim)).astype(np.float32)\n        init_state_val = np.random.random((num_samples, output_dim)).astype(np.float32)\n        W_i_val = np.random.random((input_dim, output_dim)).astype(np.float32)\n        W_o_val = np.random.random((output_dim, output_dim)).astype(np.float32)\n        np_mask = np.random.randint(2, size=(num_samples, timesteps))\n\n        def rnn_step_fn(k):\n            W_i = k.variable(W_i_val)\n            W_o = k.variable(W_o_val)\n\n            def step_function(x, states):\n                assert len(states) == 1\n                prev_output = states[0]\n                output = k.dot(x, W_i) + k.dot(prev_output, W_o)\n                return output, [output]\n\n            return step_function\n\n        # test default setup\n        last_output_list = [[], [], [], [], [], []]\n        outputs_list = [[], [], [], [], [], []]\n        state_list = [[], [], [], [], [], []]\n\n        for k in BACKENDS:\n            rnn_fn = rnn_step_fn(k)\n            inputs = k.variable(input_val)\n            initial_states = [k.variable(init_state_val)]\n            mask = k.variable(np_mask)\n\n            kwargs_list = [\n                {'go_backwards': False, 'mask': None},\n                {'go_backwards': False, 'mask': None, 'unroll': True, 'input_length': timesteps},\n                {'go_backwards': True, 'mask': None},\n                {'go_backwards': True, 'mask': None, 'unroll': True, 'input_length': timesteps},\n                {'go_backwards': False, 'mask': mask},\n                {'go_backwards': False, 'mask': mask, 'unroll': True, 'input_length': timesteps},\n            ]\n\n            for (i, kwargs) in enumerate(kwargs_list):\n                last_output, outputs, new_states = k.rnn(rnn_fn, inputs,\n                                                         initial_states,\n                                                         **kwargs)\n\n                last_output_list[i].append(k.eval(last_output))\n                outputs_list[i].append(k.eval(outputs))\n                assert len(new_states) == 1\n                state_list[i].append(k.eval(new_states[0]))\n\n        assert_list_pairwise(last_output_list[0], shape=False, atol=1e-04)\n        assert_list_pairwise(outputs_list[0], shape=False, atol=1e-04)\n        assert_list_pairwise(state_list[0], shape=False, atol=1e-04)\n        assert_list_pairwise(last_output_list[2], shape=False, atol=1e-04)\n        assert_list_pairwise(outputs_list[2], shape=False, atol=1e-04)\n        assert_list_pairwise(state_list[2], shape=False, atol=1e-04)\n\n        for l, u_l in zip(last_output_list[0], last_output_list[1]):\n            assert_allclose(l, u_l, atol=1e-04)\n\n        for o, u_o in zip(outputs_list[0], outputs_list[1]):\n            assert_allclose(o, u_o, atol=1e-04)\n\n        for s, u_s in zip(state_list[0], state_list[1]):\n            assert_allclose(s, u_s, atol=1e-04)\n\n        for b_l, b_u_l in zip(last_output_list[2], last_output_list[3]):\n            assert_allclose(b_l, b_u_l, atol=1e-04)\n\n        for b_o, b_u_o in zip(outputs_list[2], outputs_list[3]):\n            assert_allclose(b_o, b_u_o, atol=1e-04)\n\n        for b_s, b_u_s in zip(state_list[2], state_list[3]):\n            assert_allclose(b_s, b_u_s, atol=1e-04)\n\n        for m_l, u_m_l, k in zip(last_output_list[4], last_output_list[5], BACKENDS):\n            if k == KTF:\n                m_l = m_l * np.expand_dims(np_mask[:, -1], -1)\n                u_m_l = u_m_l * np.expand_dims(np_mask[:, -1], -1)\n            assert_allclose(m_l, u_m_l, atol=1e-04)\n\n        for m_o, u_m_o, k in zip(outputs_list[4], outputs_list[5], BACKENDS):\n            if k == KTF:\n                m_o = m_o * np.expand_dims(np_mask, -1)\n                u_m_o = u_m_o * np.expand_dims(np_mask, -1)\n            assert_allclose(m_o, u_m_o, atol=1e-04)\n\n        for m_s, u_m_s, k in zip(state_list[4], state_list[5], BACKENDS):\n            assert_allclose(m_s, u_m_s, atol=1e-04)",
        "begin_line": 707,
        "end_line": 800,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.rnn_step_fn#720",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.rnn_step_fn(k)",
        "snippet": "        def rnn_step_fn(k):\n            W_i = k.variable(W_i_val)\n            W_o = k.variable(W_o_val)\n\n            def step_function(x, states):\n                assert len(states) == 1\n                prev_output = states[0]\n                output = k.dot(x, W_i) + k.dot(prev_output, W_o)\n                return output, [output]\n\n            return step_function",
        "begin_line": 720,
        "end_line": 730,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.step_function#724",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.step_function(x, states)",
        "snippet": "            def step_function(x, states):\n                assert len(states) == 1\n                prev_output = states[0]\n                output = k.dot(x, W_i) + k.dot(prev_output, W_o)\n                return output, [output]",
        "begin_line": 724,
        "end_line": 728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_rnn_no_states#802",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_rnn_no_states(self)",
        "snippet": "    def legacy_test_rnn_no_states(self):\n        # implement a simple RNN without states\n        input_dim = 8\n        output_dim = 4\n        timesteps = 5\n\n        input_val = np.random.random((32, timesteps, input_dim))\n        W_i_val = np.random.random((input_dim, output_dim))\n\n        def rnn_step_fn(k):\n            W_i = k.variable(W_i_val)\n\n            def step_function(x, states):\n                assert len(states) == 0\n                output = k.dot(x, W_i)\n                return output, []\n\n            return step_function\n\n        # test default setup\n        last_output_list = []\n        outputs_list = []\n\n        for k in BACKENDS:\n            rnn_fn = rnn_step_fn(k)\n            inputs = k.variable(input_val)\n            initial_states = []\n            last_output, outputs, new_states = k.rnn(rnn_fn, inputs,\n                                                     initial_states,\n                                                     go_backwards=False,\n                                                     mask=None)\n            last_output_list.append(k.eval(last_output))\n            outputs_list.append(k.eval(outputs))\n            assert len(new_states) == 0\n\n        assert_list_pairwise(last_output_list, shape=False)\n        assert_list_pairwise(outputs_list, shape=False)",
        "begin_line": 802,
        "end_line": 838,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.rnn_step_fn#811",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.rnn_step_fn(k)",
        "snippet": "        def rnn_step_fn(k):\n            W_i = k.variable(W_i_val)\n\n            def step_function(x, states):\n                assert len(states) == 0\n                output = k.dot(x, W_i)\n                return output, []\n\n            return step_function",
        "begin_line": 811,
        "end_line": 819,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.step_function#814",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.step_function(x, states)",
        "snippet": "            def step_function(x, states):\n                assert len(states) == 0\n                output = k.dot(x, W_i)\n                return output, []",
        "begin_line": 814,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_logsumexp#855",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_logsumexp(self, x_np, axis, keepdims)",
        "snippet": "    def test_logsumexp(self, x_np, axis, keepdims):\n        '''\n        Check if K.logsumexp works properly for values close to one.\n        '''\n        for k in BACKENDS:\n            x = k.variable(x_np)\n            assert_allclose(k.eval(k.logsumexp(x, axis=axis, keepdims=keepdims)),\n                            np.log(np.sum(np.exp(x_np), axis=axis, keepdims=keepdims)),\n                            rtol=1e-5)",
        "begin_line": 855,
        "end_line": 863,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_logsumexp_optim#865",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_logsumexp_optim(self)",
        "snippet": "    def test_logsumexp_optim(self):\n        '''\n        Check if optimization works.\n        '''\n        for k in [KTF]:\n            x_np = np.array([1e+4, 1e-4])\n            assert_allclose(k.eval(k.logsumexp(k.variable(x_np), axis=0)),\n                            1e4,\n                            rtol=1e-5)",
        "begin_line": 865,
        "end_line": 873,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_switch#875",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_switch(self)",
        "snippet": "    def test_switch(self):\n        # scalar\n        val = np.random.random()\n        z_list = []\n        for k in BACKENDS:\n            x = k.variable(val)\n            x = k.switch(k.greater_equal(x, 0.5), x * 0.1, x * 0.2)\n            z_list.append(k.eval(x))\n        assert_list_pairwise(z_list)\n        # non scalar\n        shapes = []\n        shapes.append([(4, 3, 2), (4, 3, 2), (4, 3, 2)])\n        shapes.append([(4, 3,), (4, 3, 2), (4, 3, 2)])\n        shapes.append([(4,), (4, 3, 2), (4, 3, 2)])\n        for s in shapes:\n            z_list = []\n            arrays = list(map(np.random.random, s))\n            for k in BACKENDS:\n                x, then_expr, else_expr = map(k.variable, arrays)\n                cond = k.greater_equal(x, 0.5)\n                z_list.append(k.eval(k.switch(cond, then_expr, else_expr)))\n            assert_list_pairwise(z_list)",
        "begin_line": 875,
        "end_line": 896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_dropout#898",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_dropout(self)",
        "snippet": "    def test_dropout(self):\n        val = np.random.random((100, 100))\n        z_list = [k.eval(k.dropout(k.variable(val), level=0.2))\n                  for k in BACKENDS]\n        assert_list_pairwise(z_list, allclose=False)\n        # dropout patterns are different, only check mean\n        for i in range(len(z_list) - 1):\n            assert np.abs(z_list[i].mean() - z_list[i + 1].mean()) < 0.05\n\n        z_list = [k.eval(k.dropout(k.variable(val), level=0.2,\n                                   noise_shape=list(val.shape)))\n                  for k in BACKENDS]\n        assert_list_pairwise(z_list, allclose=False)\n        # dropout patterns are different, only check mean\n        for i in range(len(z_list) - 1):\n            assert np.abs(z_list[i].mean() - z_list[i + 1].mean()) < 0.05\n\n        # Test invalid use cases\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                z = k.dropout(k.variable(val), level=-0.5)",
        "begin_line": 898,
        "end_line": 918,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_nn_operations#920",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_nn_operations(self)",
        "snippet": "    def test_nn_operations(self):\n        check_single_tensor_operation('relu', (4, 2), BACKENDS, alpha=0.1, max_value=0.5)\n        check_single_tensor_operation('softplus', (4, 10), BACKENDS)\n        check_single_tensor_operation('elu', (4, 10), BACKENDS, alpha=0.5)\n\n        check_single_tensor_operation('sigmoid', (4, 2), BACKENDS)\n        check_single_tensor_operation('hard_sigmoid', (4, 2), BACKENDS)\n        check_single_tensor_operation('tanh', (4, 2), BACKENDS)\n\n        check_single_tensor_operation('softmax', (4, 10), BACKENDS)\n        check_single_tensor_operation('softmax', (4, 5, 3, 10), BACKENDS, axis=2)\n\n        check_two_tensor_operation('binary_crossentropy', (4, 2), (4, 2), BACKENDS, from_logits=True)\n        # cross_entropy call require the label is a valid probability distribution,\n        # otherwise it is garbage in garbage out...\n        # due to the algo difference, we can't guarantee CNTK has the same result on the garbage input.\n        # so create a separate test case for valid label input\n        check_two_tensor_operation('categorical_crossentropy', (4, 2), (4, 2), [KTH, KTF], from_logits=True)\n        xval = np.asarray([[0.26157712, 0.0432167], [-0.43380741, 0.30559841],\n                           [0.20225059, -0.38956559], [-0.13805378, 0.08506755]], dtype=np.float32)\n        yval = np.asarray([[0.46221867, 0.53778133], [0.51228984, 0.48771016],\n                           [0.64916514, 0.35083486], [0.47028078, 0.52971922]], dtype=np.float32)\n        check_two_tensor_operation('categorical_crossentropy', yval, xval,\n                                   BACKENDS, cntk_two_dynamicity=True, from_logits=True)\n        check_two_tensor_operation('binary_crossentropy', (4, 2), (4, 2), BACKENDS, from_logits=False)\n        check_two_tensor_operation('categorical_crossentropy', (4, 2), (4, 2), BACKENDS, from_logits=False)\n\n        check_single_tensor_operation('l2_normalize', (4, 3), BACKENDS, axis=-1)\n        check_single_tensor_operation('l2_normalize', (4, 3), BACKENDS, axis=1)",
        "begin_line": 920,
        "end_line": 948,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_in_top_k#950",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_in_top_k(self)",
        "snippet": "    def test_in_top_k(self):\n        batch_size = 20\n        num_classes = 10\n\n        # Random prediction test case\n        predictions = np.random.random((batch_size, num_classes)).astype('float32')\n        targets = np.random.randint(num_classes, size=batch_size, dtype='int32')\n\n        # (k == 0 or k > num_classes) does not raise an error but just return an unmeaningful tensor.\n        for k in range(num_classes + 1):\n            z_list = [b.eval(b.in_top_k(b.variable(predictions, dtype='float32'),\n                                        b.variable(targets, dtype='int32'), k))\n                      for b in [KTH, KTF]]\n            assert_list_pairwise(z_list)\n\n        # Identical prediction test case:\n        # randomly set half of the predictions to an identical value\n        num_identical = num_classes // 2\n        for i in range(batch_size):\n            idx_identical = np.random.choice(num_classes, size=num_identical, replace=False)\n            predictions[i, idx_identical] = predictions[i, 0]\n        targets = np.zeros(batch_size, dtype='int32')\n\n        for k in range(1, num_classes + 1):\n            z_list = [b.eval(b.in_top_k(b.variable(predictions, dtype='float32'),\n                                        b.variable(targets, dtype='int32'), k))\n                      for b in [KTH, KTF]]\n            assert_list_pairwise(z_list)",
        "begin_line": 950,
        "end_line": 977,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_conv#991",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_conv(self, op, input_shape, kernel_shape, padding, data_format)",
        "snippet": "    def test_conv(self, op, input_shape, kernel_shape, padding, data_format):\n        k = K.backend()\n        _, x = parse_shape_or_val(input_shape)\n        _, w = parse_shape_or_val(kernel_shape)\n        y1 = reference_operations.conv(x, w, padding, data_format)\n        y2 = check_two_tensor_operation(\n            op, x, w, [KTH if k == 'theano' else KC if k == 'cntk' else KTF],\n            padding=padding, data_format=data_format,\n            cntk_dynamicity=True, return_results=True)\n        assert_allclose(y1, y2, atol=1e-05)",
        "begin_line": 991,
        "end_line": 1000,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_depthwise_conv#1008",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_depthwise_conv(self, op, input_shape, kernel_shape, padding, data_format)",
        "snippet": "    def test_depthwise_conv(self, op, input_shape, kernel_shape, padding, data_format):\n        k = K.backend()\n        _, x = parse_shape_or_val(input_shape)\n        _, w = parse_shape_or_val(kernel_shape)\n        y1 = reference_operations.depthwise_conv(x, w, padding, data_format)\n        y2 = check_two_tensor_operation(\n            op, x, w, [KTH if k == 'theano' else KC if k == 'cntk' else KTF],\n            padding=padding, data_format=data_format,\n            cntk_dynamicity=True, return_results=True)\n        assert_allclose(y1, y2, atol=1e-05)",
        "begin_line": 1008,
        "end_line": 1017,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_pool#1029",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_pool(self, op, input_shape, pool_size, strides, padding, data_format, pool_mode)",
        "snippet": "    def test_pool(self, op, input_shape, pool_size, strides, padding, data_format, pool_mode):\n        k = K.backend()\n        _, x = parse_shape_or_val(input_shape)\n        y1 = reference_operations.pool(x, pool_size, strides, padding, data_format, pool_mode)\n        y2 = check_single_tensor_operation(\n            op, x, [KTH if k == 'theano' else KC if k == 'cntk' else KTF],\n            pool_size=pool_size, strides=strides,\n            padding=padding, data_format=data_format, pool_mode=pool_mode,\n            cntk_dynamicity=True, return_results=True)\n        assert_allclose(y1, y2, atol=1e-05)",
        "begin_line": 1029,
        "end_line": 1038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv1d#1040",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv1d(self)",
        "snippet": "    def legacy_test_conv1d(self):\n        # channels_last input shape: (n, length, input_depth)\n        input_shape = (4, 8, 2)\n        kernel_shape = (3, 2, 3)\n        for strides in [1, 2]:\n            check_two_tensor_operation('conv1d', input_shape, kernel_shape,\n                                       BACKENDS, cntk_dynamicity=True,\n                                       strides=strides,\n                                       data_format='channels_last')",
        "begin_line": 1040,
        "end_line": 1048,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv2d#1050",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv2d(self)",
        "snippet": "    def legacy_test_conv2d(self):\n        # TF kernel shape: (rows, cols, input_depth, depth)\n        # channels_first input shape: (n, input_depth, rows, cols)\n        for (input_shape, kernel_shape, data_format) in [\n                ((2, 3, 4, 5), (2, 2, 3, 4), 'channels_first'),\n                ((2, 3, 5, 6), (4, 3, 3, 4), 'channels_first'),\n                ((1, 6, 5, 3), (3, 3, 3, 2), 'channels_last')]:\n            check_two_tensor_operation('conv2d', input_shape, kernel_shape,\n                                       BACKENDS, cntk_dynamicity=True,\n                                       data_format=data_format)",
        "begin_line": 1050,
        "end_line": 1059,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_depthwise_conv_2d#1061",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_depthwise_conv_2d(self)",
        "snippet": "    def legacy_test_depthwise_conv_2d(self):\n        # TF kernel shape: (rows, cols, input_depth, depth_multiplier)\n        # channels_first input shape: (n, input_depth, rows, cols)\n        for (input_shape, kernel_shape, data_format) in [\n                ((2, 3, 4, 5), (2, 2, 3, 4), 'channels_first'),\n                ((2, 3, 5, 6), (4, 3, 3, 4), 'channels_first'),\n                ((1, 6, 5, 3), (3, 3, 3, 2), 'channels_last')]:\n            check_two_tensor_operation('depthwise_conv2d',\n                                       input_shape, kernel_shape,\n                                       BACKENDS, cntk_dynamicity=True,\n                                       data_format=data_format)",
        "begin_line": 1061,
        "end_line": 1071,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv3d#1073",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_conv3d(self)",
        "snippet": "    def legacy_test_conv3d(self):\n        # TH input shape: (samples, input_depth, conv_dim1, conv_dim2, conv_dim3)\n        # TF input shape: (samples, conv_dim1, conv_dim2, conv_dim3, input_depth)\n        # TH kernel shape: (depth, input_depth, x, y, z)\n        # TF kernel shape: (x, y, z, input_depth, depth)\n        for (input_shape, kernel_shape, data_format) in [\n                ((2, 3, 4, 5, 4), (2, 2, 2, 3, 4), 'channels_first'),\n                ((2, 3, 5, 4, 6), (3, 2, 4, 3, 4), 'channels_first'),\n                ((1, 2, 2, 2, 1), (2, 2, 2, 1, 1), 'channels_last')]:\n            check_two_tensor_operation('conv3d', input_shape, kernel_shape,\n                                       BACKENDS, cntk_dynamicity=True,\n                                       data_format=data_format)",
        "begin_line": 1073,
        "end_line": 1084,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_separable_conv2d#1092",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_separable_conv2d(self, op, input_shape, kernel_shape, depth_multiplier, padding, data_format)",
        "snippet": "    def test_separable_conv2d(self, op, input_shape, kernel_shape, depth_multiplier, padding, data_format):\n        input_depth = input_shape[1] if data_format == 'channels_first' else input_shape[-1]\n        _, x = parse_shape_or_val(input_shape)\n        _, depthwise = parse_shape_or_val(kernel_shape + (input_depth, depth_multiplier))\n        _, pointwise = parse_shape_or_val((1, 1) + (input_depth * depth_multiplier, 7))\n        y1 = reference_operations.separable_conv(x, depthwise, pointwise, padding, data_format)\n        if K.backend() == 'cntk':\n            y2 = cntk_func_three_tensor(\n                op, input_shape,\n                depthwise, pointwise,\n                padding=padding, data_format=data_format)([x])[0]\n        else:\n            y2 = K.eval(getattr(K, op)(\n                K.variable(x),\n                K.variable(depthwise), K.variable(pointwise),\n                padding=padding, data_format=data_format))\n        assert_allclose(y1, y2, atol=1e-05)",
        "begin_line": 1092,
        "end_line": 1108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_pool2d#1110",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_pool2d(self)",
        "snippet": "    def legacy_test_pool2d(self):\n        check_single_tensor_operation('pool2d', (5, 10, 12, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2), strides=(1, 1), padding='valid')\n\n        check_single_tensor_operation('pool2d', (5, 9, 11, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2), strides=(1, 1), padding='valid')\n\n        check_single_tensor_operation('pool2d', (5, 9, 11, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2), strides=(1, 1), pool_mode='avg')\n\n        check_single_tensor_operation('pool2d', (5, 9, 11, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 3), strides=(1, 1), padding='valid')\n\n        check_single_tensor_operation('pool2d', (2, 7, 7, 5),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(3, 3), strides=(1, 1),\n                                      padding='same', pool_mode='avg')",
        "begin_line": 1110,
        "end_line": 1130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.legacy_test_pool3d#1132",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.legacy_test_pool3d(self)",
        "snippet": "    def legacy_test_pool3d(self):\n        check_single_tensor_operation('pool3d', (5, 10, 12, 5, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2, 2), strides=(1, 1, 1), padding='valid')\n\n        check_single_tensor_operation('pool3d', (5, 9, 11, 5, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2, 2), strides=(1, 1, 1), padding='valid')\n\n        check_single_tensor_operation('pool3d', (5, 9, 11, 5, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 2, 2), strides=(1, 1, 1), pool_mode='avg')\n\n        check_single_tensor_operation('pool3d', (5, 9, 11, 5, 3),\n                                      BACKENDS, cntk_dynamicity=True,\n                                      pool_size=(2, 3, 2), strides=(1, 1, 1), padding='valid')\n\n        check_single_tensor_operation('pool3d', (2, 6, 6, 6, 3), [KTH, KTF], pool_size=(3, 3, 3),\n                                      strides=(1, 1, 1), padding='same', pool_mode='avg')",
        "begin_line": 1132,
        "end_line": 1150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_random_normal#1152",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_random_normal(self)",
        "snippet": "    def test_random_normal(self):\n        mean = 0.\n        std = 1.\n        for k in BACKENDS:\n            rand = k.eval(k.random_normal((300, 200), mean=mean, stddev=std, seed=1337))\n            assert rand.shape == (300, 200)\n            assert np.abs(np.mean(rand) - mean) < 0.015\n            assert np.abs(np.std(rand) - std) < 0.015",
        "begin_line": 1152,
        "end_line": 1159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_random_uniform#1161",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_random_uniform(self)",
        "snippet": "    def test_random_uniform(self):\n        min_val = -1.\n        max_val = 1.\n        for k in BACKENDS:\n            rand = k.eval(k.random_uniform((200, 100), min_val, max_val))\n            assert rand.shape == (200, 100)\n            assert np.abs(np.mean(rand)) < 0.015\n            assert np.max(rand) <= max_val\n            assert np.min(rand) >= min_val",
        "begin_line": 1161,
        "end_line": 1169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_random_binomial#1171",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_random_binomial(self)",
        "snippet": "    def test_random_binomial(self):\n        p = 0.5\n        for k in BACKENDS:\n            rand = k.eval(k.random_binomial((200, 100), p))\n            assert rand.shape == (200, 100)\n            assert np.abs(np.mean(rand) - p) < 0.015\n            assert np.max(rand) == 1\n            assert np.min(rand) == 0",
        "begin_line": 1171,
        "end_line": 1178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_conv_invalid_use#1180",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_conv_invalid_use(self)",
        "snippet": "    def test_conv_invalid_use(self):\n        with pytest.raises(ValueError):\n            K.conv1d(K.variable(np.ones((4, 8, 2))),\n                     K.variable(np.ones((3, 2, 3))),\n                     data_format='channels_middle')\n\n        with pytest.raises(ValueError):\n            K.conv2d(K.variable(np.ones((2, 3, 4, 5))),\n                     K.variable(np.ones((2, 2, 3, 4))),\n                     data_format='channels_middle')\n\n        with pytest.raises(ValueError):\n            K.conv3d(K.variable(np.ones((2, 3, 4, 5, 4))),\n                     K.variable(np.ones((2, 2, 2, 3, 4))),\n                     data_format='channels_middle')\n\n        if K.backend() != 'theano':\n            with pytest.raises(ValueError):\n                K.separable_conv2d(K.variable(np.ones((2, 3, 4, 5))),\n                                   K.variable(np.ones((2, 2, 3, 4))),\n                                   K.variable(np.ones((1, 1, 12, 7))),\n                                   data_format='channels_middle')\n\n        with pytest.raises(ValueError):\n            K.depthwise_conv2d(K.variable(np.ones((2, 3, 4, 5))),\n                               K.variable(np.ones((2, 2, 3, 4))),\n                               data_format='channels_middle')",
        "begin_line": 1180,
        "end_line": 1206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_pooling_invalid_use#1208",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_pooling_invalid_use(self)",
        "snippet": "    def test_pooling_invalid_use(self):\n        for (input_shape, pool_size) in zip([(5, 10, 12, 3), (5, 10, 12, 6, 3)], [(2, 2), (2, 2, 2)]):\n            x = K.variable(np.random.random(input_shape))\n            if len(pool_size) == 2:\n                with pytest.raises(ValueError):\n                    K.pool2d(x, pool_size=pool_size, data_format='channels_middle')\n                with pytest.raises(ValueError):\n                    K.pool2d(x, pool_size=pool_size, padding='twice')\n                with pytest.raises(ValueError):\n                    K.pool2d(x, pool_size=pool_size, pool_mode='median')\n            else:\n                with pytest.raises(ValueError):\n                    K.pool3d(x, pool_size=pool_size, data_format='channels_middle')\n                with pytest.raises(ValueError):\n                    K.pool3d(x, pool_size=pool_size, padding='twice')\n                with pytest.raises(ValueError):\n                    K.pool3d(x, pool_size=pool_size, pool_mode='median')",
        "begin_line": 1208,
        "end_line": 1224,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_resize_images#1226",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_resize_images(self)",
        "snippet": "    def test_resize_images(self):\n        for data_format in ['channels_first', 'channels_last']:\n            shape = (5, 5)\n            if data_format == 'channels_first':\n                x_shape = (2, 3) + shape\n            elif data_format == 'channels_last':\n                x_shape = (2,) + shape + (3,)\n            check_single_tensor_operation('resize_images', x_shape,\n                                          BACKENDS, cntk_dynamicity=True,\n                                          height_factor=2,\n                                          width_factor=2,\n                                          data_format=data_format)\n\n        # Test invalid use cases\n        xval = np.random.random(x_shape)\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                k.resize_images(k.variable(xval), 2, 2,\n                                data_format='channels_middle')",
        "begin_line": 1226,
        "end_line": 1244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_resize_volumes#1246",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_resize_volumes(self)",
        "snippet": "    def test_resize_volumes(self):\n        for data_format in ['channels_first', 'channels_last']:\n            shape = (5, 5, 5)\n            if data_format == 'channels_first':\n                x_shape = (2, 3) + shape\n            elif data_format == 'channels_last':\n                x_shape = (2,) + shape + (3,)\n            check_single_tensor_operation('resize_volumes', x_shape,\n                                          BACKENDS, cntk_dynamicity=True,\n                                          depth_factor=2,\n                                          height_factor=2,\n                                          width_factor=2,\n                                          data_format=data_format)\n\n        # Test invalid use cases\n        xval = np.random.random(x_shape)\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                k.resize_volumes(k.variable(xval), 2, 2, 2,\n                                 data_format='channels_middle')",
        "begin_line": 1246,
        "end_line": 1265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_temporal_padding#1267",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_temporal_padding(self)",
        "snippet": "    def test_temporal_padding(self):\n        check_single_tensor_operation('temporal_padding', (4, 3, 3),\n                                      BACKENDS)\n        check_single_tensor_operation('temporal_padding', (2, 3, 4),\n                                      BACKENDS, padding=(1, 2))",
        "begin_line": 1267,
        "end_line": 1271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_spatial_2d_padding#1273",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_spatial_2d_padding(self)",
        "snippet": "    def test_spatial_2d_padding(self):\n        padding = ((1, 2), (2, 1))\n        for data_format in ['channels_first', 'channels_last']:\n            shape = (5, 5)\n            if data_format == 'channels_first':\n                x_shape = (1, 3) + shape\n            else:\n                x_shape = (1,) + shape + (3,)\n            check_single_tensor_operation('spatial_2d_padding', x_shape, BACKENDS,\n                                          padding=padding, data_format=data_format)\n\n        # Test invalid use cases\n        xval = np.random.random(x_shape)\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                k.spatial_2d_padding(k.variable(xval), padding=padding,\n                                     data_format='channels_middle')",
        "begin_line": 1273,
        "end_line": 1289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_spatial_3d_padding#1291",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_spatial_3d_padding(self)",
        "snippet": "    def test_spatial_3d_padding(self):\n        padding = ((1, 2), (2, 1), (1, 2))\n        for data_format in ['channels_first', 'channels_last']:\n            shape = (5, 5, 5)\n            if data_format == 'channels_first':\n                x_shape = (1, 3) + shape\n            else:\n                x_shape = (1,) + shape + (3,)\n            check_single_tensor_operation('spatial_3d_padding', x_shape, BACKENDS,\n                                          padding=padding, data_format=data_format)\n\n        # Test invalid use cases\n        xval = np.random.random(x_shape)\n        for k in BACKENDS:\n            with pytest.raises(ValueError):\n                k.spatial_3d_padding(k.variable(xval), padding=padding,\n                                     data_format='channels_middle')",
        "begin_line": 1291,
        "end_line": 1307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_bias_add#1309",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_bias_add(self)",
        "snippet": "    def test_bias_add(self):\n        for data_format in ['channels_first', 'channels_last']:\n            for shape in [(), (3,), (2, 3), (5, 3, 2)]:\n                if data_format == 'channels_first':\n                    x_shape = (1, 4) + shape\n                else:\n                    x_shape = (1,) + shape + (4,)\n                bias_shape = (4,)\n                check_two_tensor_operation('bias_add', x_shape, bias_shape,\n                                           BACKENDS, cntk_dynamicity=True,\n                                           data_format=data_format)\n\n            if data_format == 'channels_first':\n                x_shape = (20, 6, 10)\n            else:\n                x_shape = (20, 10, 6)\n            check_two_tensor_operation('bias_add', x_shape, (10, 6),\n                                       BACKENDS, cntk_dynamicity=True,\n                                       data_format=data_format)\n\n        # Test invalid use cases\n        for k in BACKENDS:\n            x = k.variable(np.random.random(x_shape))\n            b = k.variable(np.random.random(bias_shape))\n            with pytest.raises(ValueError):\n                k.bias_add(x, b, data_format='channels_middle')",
        "begin_line": 1309,
        "end_line": 1334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_batchnorm#1336",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_batchnorm(self)",
        "snippet": "    def test_batchnorm(self):\n        shape = (2, 3)\n        for data_format in ['channels_first', 'channels_last']:\n            if data_format == 'channels_first':\n                x_shape = (1, 4) + shape\n            else:\n                x_shape = (1,) + shape + (4,)\n            x_val = np.random.random(x_shape).astype(np.float32)\n            xth = KTH.variable(x_val)\n            xtf = KTF.variable(x_val)\n            xc = KC.placeholder(x_shape)\n            zth, _, _ = KTH.normalize_batch_in_training(xth, None, None,\n                                                        reduction_axes='per-activation')\n            ztf, _, _ = KTF.normalize_batch_in_training(xtf, None, None,\n                                                        reduction_axes=[0, 1, 2, 3])\n            zc, _, _ = KC.normalize_batch_in_training(xc, None, None,\n                                                      reduction_axes=[0, 1, 2, 3])\n            zth = KTH.eval(zth)\n            ztf = KTF.eval(ztf)\n            zc = KC.function([xc], [zc])([x_val])[0]\n            assert zth.shape == ztf.shape\n            assert zth.shape == zc.shape",
        "begin_line": 1336,
        "end_line": 1357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_ctc#1364",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_ctc(self)",
        "snippet": "    def test_ctc(self):\n        if K.backend() == 'theano':\n            ref = [1.73308, 3.81351]\n        else:\n            ref = [3.34211, 5.42262]\n        # simplified version of TensorFlow's test\n\n        label_lens = np.expand_dims(np.asarray([5, 4]), 1)\n        input_lens = np.expand_dims(np.asarray([5, 5]), 1)  # number of timesteps\n\n        # dimensions are batch x time x categories\n        labels = np.asarray([[0, 1, 2, 1, 0], [0, 1, 1, 0, -1]])\n        inputs = np.asarray(\n            [[[0.633766, 0.221185, 0.0917319, 0.0129757, 0.0142857, 0.0260553],\n              [0.111121, 0.588392, 0.278779, 0.0055756, 0.00569609, 0.010436],\n              [0.0357786, 0.633813, 0.321418, 0.00249248, 0.00272882, 0.0037688],\n              [0.0663296, 0.643849, 0.280111, 0.00283995, 0.0035545, 0.00331533],\n              [0.458235, 0.396634, 0.123377, 0.00648837, 0.00903441, 0.00623107]],\n             [[0.30176, 0.28562, 0.0831517, 0.0862751, 0.0816851, 0.161508],\n              [0.24082, 0.397533, 0.0557226, 0.0546814, 0.0557528, 0.19549],\n              [0.230246, 0.450868, 0.0389607, 0.038309, 0.0391602, 0.202456],\n              [0.280884, 0.429522, 0.0326593, 0.0339046, 0.0326856, 0.190345],\n              [0.423286, 0.315517, 0.0338439, 0.0393744, 0.0339315, 0.154046]]],\n            dtype=np.float32)\n\n        k_labels = K.variable(labels, dtype=\"int32\")\n        k_inputs = K.variable(inputs, dtype=\"float32\")\n        k_input_lens = K.variable(input_lens, dtype=\"int32\")\n        k_label_lens = K.variable(label_lens, dtype=\"int32\")\n        res = K.eval(K.ctc_batch_cost(k_labels, k_inputs, k_input_lens, k_label_lens))\n        assert_allclose(res[0, :] if K.backend() == 'theano' else res[:, 0], ref, atol=1e-05)\n\n        # test when batch_size = 1, that is, one sample only\n        # get only first sample from above test case\n        if K.backend() == 'theano':\n            ref = [1.73308]\n        else:\n            ref = [3.34211]\n\n        input_lens = np.expand_dims(np.asarray([5]), 1)\n        label_lens = np.expand_dims(np.asarray([5]), 1)\n\n        labels = np.asarray([[0, 1, 2, 1, 0]])\n        inputs = np.asarray(\n            [[[0.633766, 0.221185, 0.0917319, 0.0129757, 0.0142857, 0.0260553],\n              [0.111121, 0.588392, 0.278779, 0.0055756, 0.00569609, 0.010436],\n              [0.0357786, 0.633813, 0.321418, 0.00249248, 0.00272882, 0.0037688],\n              [0.0663296, 0.643849, 0.280111, 0.00283995, 0.0035545, 0.00331533],\n              [0.458235, 0.396634, 0.123377, 0.00648837, 0.00903441, 0.00623107]]],\n            dtype=np.float32)\n\n        k_labels = K.variable(labels, dtype=\"int32\")\n        k_inputs = K.variable(inputs, dtype=\"float32\")\n        k_input_lens = K.variable(input_lens, dtype=\"int32\")\n        k_label_lens = K.variable(label_lens, dtype=\"int32\")\n        res = K.eval(K.ctc_batch_cost(k_labels, k_inputs, k_input_lens, k_label_lens))\n        assert_allclose(res[0, :] if K.backend() == 'theano' else res[:, 0], ref, atol=1e-05)",
        "begin_line": 1364,
        "end_line": 1420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_ctc_decode_greedy#1424",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_ctc_decode_greedy(self)",
        "snippet": "    def test_ctc_decode_greedy(self):\n        # Test adapted from tensorflow\n        \"\"\"Test two batch entries - best path decoder.\"\"\"\n        max_time_steps = 6\n\n        seq_len_0 = 4\n        input_prob_matrix_0 = np.asarray(\n            [[1.0, 0.0, 0.0, 0.0],  # t=0\n             [0.0, 0.0, 0.4, 0.6],  # t=1\n             [0.0, 0.0, 0.4, 0.6],  # t=2\n             [0.0, 0.9, 0.1, 0.0],  # t=3\n             [0.0, 0.0, 0.0, 0.0],  # t=4 (ignored)\n             [0.0, 0.0, 0.0, 0.0]],  # t=5 (ignored)\n            dtype=np.float32)\n        input_log_prob_matrix_0 = np.log(input_prob_matrix_0)\n\n        seq_len_1 = 5\n        # dimensions are time x depth\n\n        input_prob_matrix_1 = np.asarray(\n            [[0.1, 0.9, 0.0, 0.0],  # t=0\n             [0.0, 0.9, 0.1, 0.0],  # t=1\n             [0.0, 0.0, 0.1, 0.9],  # t=2\n             [0.0, 0.9, 0.1, 0.1],  # t=3\n             [0.9, 0.1, 0.0, 0.0],  # t=4\n             [0.0, 0.0, 0.0, 0.0]],  # t=5 (ignored)\n            dtype=np.float32)\n\n        # len max_time_steps array of batch_size x depth matrices\n        inputs = [np.vstack([input_prob_matrix_0[t, :],\n                             input_prob_matrix_1[t, :]])\n                  for t in range(max_time_steps)]\n\n        # change tensorflow order to keras backend order\n        inputs = KTF.variable(np.asarray(inputs).transpose((1, 0, 2)))\n        # batch_size length vector of sequence_lengths\n        input_length = KTF.variable(np.array([seq_len_0, seq_len_1], dtype=np.int32))\n\n        # batch_size length vector of negative log probabilities\n        log_prob_truth = np.array([\n            np.sum(-np.log([1.0, 0.6, 0.6, 0.9])),\n            np.sum(-np.log([0.9, 0.9, 0.9, 0.9, 0.9]))\n        ], np.float32)[:, np.newaxis]\n\n        # keras output, unlike tensorflow, is a dense (not sparse) tensor\n        decode_truth = np.array([[0, 1, -1], [1, 1, 0]])\n\n        decode_pred_tf, log_prob_pred_tf = KTF.ctc_decode(inputs,\n                                                          input_length,\n                                                          greedy=True)\n\n        assert len(decode_pred_tf) == 1\n\n        decode_pred = KTF.eval(decode_pred_tf[0])\n        log_prob_pred = KTF.eval(log_prob_pred_tf)\n\n        assert np.alltrue(decode_truth == decode_pred)\n        assert np.allclose(log_prob_truth, log_prob_pred)",
        "begin_line": 1424,
        "end_line": 1481,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_ctc_decode_beam_search#1485",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_ctc_decode_beam_search(self)",
        "snippet": "    def test_ctc_decode_beam_search(self):\n        \"\"\"Test one batch, two beams - hibernating beam search.\"\"\"\n\n        depth = 6\n\n        seq_len_0 = 5\n        input_prob_matrix_0 = np.asarray(\n            [[0.30999, 0.309938, 0.0679938, 0.0673362, 0.0708352, 0.173908],\n             [0.215136, 0.439699, 0.0370931, 0.0393967, 0.0381581, 0.230517],\n             [0.199959, 0.489485, 0.0233221, 0.0251417, 0.0233289, 0.238763],\n             [0.279611, 0.452966, 0.0204795, 0.0209126, 0.0194803, 0.20655],\n             [0.51286, 0.288951, 0.0243026, 0.0220788, 0.0219297, 0.129878],\n             # Random entry added in at time=5\n             [0.155251, 0.164444, 0.173517, 0.176138, 0.169979, 0.160671]],\n            dtype=np.float32)\n\n        # len max_time_steps array of batch_size x depth matrices\n        inputs = ([input_prob_matrix_0[t, :][np.newaxis, :]\n                   for t in range(seq_len_0)] +  # Pad to max_time_steps = 8\n                  2 * [np.zeros((1, depth), dtype=np.float32)])\n\n        inputs = KTF.variable(np.asarray(inputs).transpose((1, 0, 2)))\n\n        # batch_size length vector of sequence_lengths\n        input_length = KTF.variable(np.array([seq_len_0], dtype=np.int32))\n        # batch_size length vector of negative log probabilities\n        log_prob_truth = np.array([\n            0.584855,  # output beam 0\n            0.389139  # output beam 1\n        ], np.float32)[np.newaxis, :]\n\n        decode_truth = [np.array([1, 0]), np.array([0, 1, 0])]\n\n        beam_width = 2\n        top_paths = 2\n\n        decode_pred_tf, log_prob_pred_tf = KTF.ctc_decode(inputs,\n                                                          input_length,\n                                                          greedy=False,\n                                                          beam_width=beam_width,\n                                                          top_paths=top_paths)\n\n        assert len(decode_pred_tf) == top_paths\n\n        log_prob_pred = KTF.eval(log_prob_pred_tf)\n\n        for i in range(top_paths):\n            assert np.alltrue(decode_truth[i] == KTF.eval(decode_pred_tf[i]))\n\n        assert np.allclose(log_prob_truth, log_prob_pred)",
        "begin_line": 1485,
        "end_line": 1534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_one_hot#1536",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_one_hot(self)",
        "snippet": "    def test_one_hot(self):\n        input_length = 10\n        num_classes = 20\n        batch_size = 30\n        indices = np.random.randint(0, num_classes, size=(batch_size, input_length))\n        oh = np.eye(num_classes)[indices]\n        for k in BACKENDS:\n            koh = k.eval(k.one_hot(k.variable(indices, dtype='int32'), num_classes))\n            assert np.all(koh == oh)",
        "begin_line": 1536,
        "end_line": 1544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_sparse_dot#1546",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_sparse_dot(self)",
        "snippet": "    def test_sparse_dot(self):\n        x_d = np.array([0, 7, 2, 3], dtype=np.float32)\n        x_r = np.array([0, 2, 2, 3], dtype=np.int64)\n        x_c = np.array([4, 3, 2, 3], dtype=np.int64)\n\n        x_sparse = sparse.csr_matrix((x_d, (x_r, x_c)), shape=(4, 5))\n        x_dense = x_sparse.toarray()\n\n        W = np.random.random((5, 4))\n        # cntk not support it yet\n        backends = [KTF]\n        if KTH.th_sparse_module:\n            # Theano has some dependency issues for sparse\n            backends.append(KTH)\n\n        for k in backends:\n            t_W = k.variable(W)\n            k_s = k.eval(k.dot(k.variable(x_sparse), t_W))\n            k_d = k.eval(k.dot(k.variable(x_dense), t_W))\n\n            assert k_s.shape == k_d.shape\n            assert_allclose(k_s, k_d, atol=1e-05)",
        "begin_line": 1546,
        "end_line": 1567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_sparse_concat#1569",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_sparse_concat(self)",
        "snippet": "    def test_sparse_concat(self):\n        x_d = np.array([0, 7, 2, 3], dtype=np.float32)\n        x_r = np.array([0, 2, 2, 3], dtype=np.int64)\n        x_c = np.array([4, 3, 2, 3], dtype=np.int64)\n\n        x_sparse_1 = sparse.csr_matrix((x_d, (x_r, x_c)), shape=(4, 5))\n\n        x_d = np.array([0, 7, 2, 3], dtype=np.float32)\n        x_r = np.array([0, 2, 2, 3], dtype=np.int64)\n        x_c = np.array([4, 3, 2, 3], dtype=np.int64)\n\n        x_sparse_2 = sparse.csr_matrix((x_d, (x_r, x_c)), shape=(4, 5))\n\n        x_dense_1 = x_sparse_1.toarray()\n        x_dense_2 = x_sparse_2.toarray()\n\n        # cntk not support it yet\n        backends = [KTF]\n        if KTH.th_sparse_module:\n            # Theano has some dependency issues for sparse\n            backends.append(KTH)\n\n        for k in backends:\n            k_s = k.concatenate([k.variable(x_sparse_1), k.variable(x_sparse_2)])\n            assert k.is_sparse(k_s)\n\n            k_s_d = k.eval(k_s)\n\n            k_d = k.eval(k.concatenate([k.variable(x_dense_1), k.variable(x_dense_2)]))\n\n            assert k_s_d.shape == k_d.shape\n            assert_allclose(k_s_d, k_d, atol=1e-05)",
        "begin_line": 1569,
        "end_line": 1600,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_map#1603",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_map(self)",
        "snippet": "    def test_map(self):\n        x = np.random.rand(10, 3).astype(np.float32)\n        vx = K.variable(x)\n        kx = K.eval(K.map_fn(K.sum, vx))\n        # make sure we can also walk the indexes in tensorflow which we\n        # can't without specifying dtype\n        kx2 = K.eval(K.map_fn(\n            lambda i: K.sum(vx[i]),\n            K.arange(10),\n            dtype=K.floatx()\n        ))\n\n        assert (10,) == kx.shape\n        assert (10,) == kx2.shape\n        assert_allclose(x.sum(axis=1), kx, atol=1e-05)\n        assert_allclose(kx, kx2, atol=1e-05)",
        "begin_line": 1603,
        "end_line": 1618,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_foldl#1621",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_foldl(self)",
        "snippet": "    def test_foldl(self):\n        x = np.random.rand(10, 3).astype(np.float32)\n        kx = K.eval(K.foldl(lambda a, b: a + b, K.variable(x)))\n\n        assert (3,) == kx.shape\n        assert_allclose(x.sum(axis=0), kx, atol=1e-05)",
        "begin_line": 1621,
        "end_line": 1626,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_foldr#1629",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_foldr(self)",
        "snippet": "    def test_foldr(self):\n        # This test aims to make sure that we walk the array from right to left\n        # and checks it in the following way: multiplying left to right 1e-40\n        # cannot be held into a float32 so it causes an underflow while from\n        # right to left we have no such problem and the result is larger\n        x = np.array([1e-20, 1e-20, 10, 10, 10], dtype=np.float32)\n        vx = K.variable(x)\n        p1 = K.eval(K.foldl(lambda a, b: a * b, vx))\n        p2 = K.eval(K.foldr(lambda a, b: a * b, vx))\n\n        assert p1 < p2\n        assert 9e-38 < p2 <= 1e-37",
        "begin_line": 1629,
        "end_line": 1640,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_arange#1642",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_arange(self)",
        "snippet": "    def test_arange(self):\n        for test_value in (-20, 0, 1, 10):\n            a_list = []\n            dtype_list = []\n            # cntk has issue with negative number\n            for k in [KTH, KTF]:\n                t = k.arange(test_value)\n                a = k.eval(t)\n                assert np.array_equal(a, np.arange(test_value))\n                dtype_list.append(k.dtype(t))\n                a_list.append(a)\n\n            for i in range(len(a_list) - 1):\n                assert np.array_equal(a_list[i], a_list[i + 1])\n\n        for start, stop, step in ((0, 5, 1), (-5, 5, 2), (0, 1, 2)):\n            a_list = []\n            for k in [KTH, KTF]:\n                a = k.eval(k.arange(start, stop, step))\n                assert np.array_equal(a, np.arange(start, stop, step))\n                a_list.append(a)\n            for i in range(len(a_list) - 1):\n                assert np.array_equal(a_list[i], a_list[i + 1])\n\n        for dtype in ('int32', 'int64', 'float32', 'float64'):\n            for k in [KTH, KTF]:\n                t = k.arange(10, dtype=dtype)\n                assert k.dtype(t) == dtype\n\n        for k in [KTH, KTF]:\n            start = k.constant(1, dtype='int32')\n            t = k.arange(start)\n            assert len(k.eval(t)) == 1\n\n            start = k.constant(-1, dtype='int32')\n            t = k.arange(start)\n            assert len(k.eval(t)) == 0",
        "begin_line": 1642,
        "end_line": 1678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_in_train_phase#1680",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_in_train_phase(self)",
        "snippet": "    def test_in_train_phase(self):\n        for training in [True, False]:\n            check_two_tensor_operation('in_train_phase', (3, 3), (2, 2), [KTH, KTF],\n                                       training=training)\n            check_two_tensor_operation('in_train_phase', (2, 3), (2, 3), BACKENDS,\n                                       training=training)",
        "begin_line": 1680,
        "end_line": 1685,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_in_test_phase#1687",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_in_test_phase(self)",
        "snippet": "    def test_in_test_phase(self):\n        for training in [True, False]:\n            check_two_tensor_operation('in_test_phase', (3, 3), (2, 2), [KTH, KTF],\n                                       training=training)\n            check_two_tensor_operation('in_test_phase', (2, 3), (2, 3), BACKENDS,\n                                       training=training)",
        "begin_line": 1687,
        "end_line": 1692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_setfloatx_incorrect_values#1694",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_setfloatx_incorrect_values(self)",
        "snippet": "    def test_setfloatx_incorrect_values(self):\n        # Keep track of the old value\n        old_floatx = floatx()\n        # Try some incorrect values\n        initial = floatx()\n        for value in ['', 'beerfloat', 123]:\n            with pytest.raises(ValueError):\n                set_floatx(value)\n        assert floatx() == initial\n        # Restore old value\n        set_floatx(old_floatx)",
        "begin_line": 1694,
        "end_line": 1704,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_setfloatx_correct_values#1706",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_setfloatx_correct_values(self)",
        "snippet": "    def test_setfloatx_correct_values(self):\n        # Keep track of the old value\n        old_floatx = floatx()\n        # Check correct values\n        for value in ['float16', 'float32', 'float64']:\n            set_floatx(value)\n            assert floatx() == value\n        # Restore old value\n        set_floatx(old_floatx)",
        "begin_line": 1706,
        "end_line": 1714,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_set_floatx#1718",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_set_floatx(self)",
        "snippet": "    def test_set_floatx(self):\n        \"\"\"\n        Make sure that changes to the global floatx are effectively\n        taken into account by the backend.\n        \"\"\"\n        # Keep track of the old value\n        old_floatx = floatx()\n\n        set_floatx('float16')\n        var = variable([10])\n        check_dtype(var, 'float16')\n\n        set_floatx('float64')\n        var = variable([10])\n        check_dtype(var, 'float64')\n\n        # Restore old value\n        set_floatx(old_floatx)",
        "begin_line": 1718,
        "end_line": 1735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_dtype#1737",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_dtype(self)",
        "snippet": "    def test_dtype(self):\n        assert K.dtype(K.variable(1, dtype='float64')) == 'float64'\n        assert K.dtype(K.variable(1, dtype='float32')) == 'float32'\n        if K.backend() == 'cntk':\n            with pytest.raises(ValueError):\n                K.variable(1, dtype='float16')\n        else:\n            assert K.dtype(K.variable(1, dtype='float16')) == 'float16'",
        "begin_line": 1737,
        "end_line": 1744,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.backend_test.TestBackend.test_variable_support_bool_dtype#1746",
        "src_path": "tests/keras/backend/backend_test.py",
        "class_name": "tests.keras.backend.backend_test.TestBackend",
        "signature": "tests.keras.backend.backend_test.TestBackend.test_variable_support_bool_dtype(self)",
        "snippet": "    def test_variable_support_bool_dtype(self):\n        # Github issue: 7819\n        if K.backend() == 'tensorflow':\n            assert K.dtype(K.variable(1, dtype='int16')) == 'int16'\n            assert K.dtype(K.variable(False, dtype='bool')) == 'bool'\n            with pytest.raises(TypeError):\n                K.variable('', dtype='unsupported')",
        "begin_line": 1746,
        "end_line": 1752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.wrapper#11",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.wrapper(*args)",
        "snippet": "    def wrapper(*args):\n        x = args[0]\n        w = args[1]\n        if x.ndim == 3:\n            w = np.flipud(w)\n            w = np.transpose(w, (1, 2, 0))\n            if args[3] == 'channels_last':\n                x = np.transpose(x, (0, 2, 1))\n        elif x.ndim == 4:\n            w = np.fliplr(np.flipud(w))\n            w = np.transpose(w, (2, 3, 0, 1))\n            if args[3] == 'channels_last':\n                x = np.transpose(x, (0, 3, 1, 2))\n        else:\n            w = np.flip(np.fliplr(np.flipud(w)), axis=2)\n            w = np.transpose(w, (3, 4, 0, 1, 2))\n            if args[3] == 'channels_last':\n                x = np.transpose(x, (0, 4, 1, 2, 3))\n\n        y = func(x, w, args[2], args[3])\n\n        if args[3] == 'channels_last':\n            if y.ndim == 3:\n                y = np.transpose(y, (0, 2, 1))\n            elif y.ndim == 4:\n                y = np.transpose(y, (0, 2, 3, 1))\n            else:\n                y = np.transpose(y, (0, 2, 3, 4, 1))\n\n        return y",
        "begin_line": 11,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.conv#46",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.conv(x, w, padding, data_format)",
        "snippet": "def conv(x, w, padding, data_format):\n    y = []\n    for i in range(x.shape[0]):\n        _y = []\n        for j in range(w.shape[1]):\n            __y = []\n            for k in range(w.shape[0]):\n                __y.append(signal.convolve(x[i, k], w[k, j], mode=padding))\n            _y.append(np.sum(np.stack(__y, axis=-1), axis=-1))\n        y.append(_y)\n    y = np.array(y)\n    return y",
        "begin_line": 46,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.depthwise_conv#61",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.depthwise_conv(x, w, padding, data_format)",
        "snippet": "def depthwise_conv(x, w, padding, data_format):\n    y = []\n    for i in range(x.shape[0]):\n        _y = []\n        for j in range(w.shape[0]):\n            __y = []\n            for k in range(w.shape[1]):\n                __y.append(signal.convolve(x[i, j], w[j, k], mode=padding))\n            _y.append(np.stack(__y, axis=0))\n        y.append(np.concatenate(_y, axis=0))\n    y = np.array(y)\n    return y",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.separable_conv#75",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.separable_conv(x, w1, w2, padding, data_format)",
        "snippet": "def separable_conv(x, w1, w2, padding, data_format):\n    x2 = depthwise_conv(x, w1, padding, data_format)\n    return conv(x2, w2, padding, data_format)",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.pool#80",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.pool(x, pool_size, strides, padding, data_format, pool_mode)",
        "snippet": "def pool(x, pool_size, strides, padding, data_format, pool_mode):\n    if data_format == 'channels_last':\n        if x.ndim == 3:\n            x = np.transpose(x, (0, 2, 1))\n        elif x.ndim == 4:\n            x = np.transpose(x, (0, 3, 1, 2))\n        else:\n            x = np.transpose(x, (0, 4, 1, 2, 3))\n\n    if padding == 'same':\n        pad = [(0, 0), (0, 0)] + [(s // 2, s // 2) for s in pool_size]\n        x = np.pad(x, pad, 'constant', constant_values=-np.inf)\n\n    # indexing trick\n    x = np.pad(x, [(0, 0), (0, 0)] + [(0, 1) for _ in pool_size],\n               'constant', constant_values=0)\n\n    if x.ndim == 3:\n        y = [x[:, :, k:k1:strides[0]]\n             for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0))]\n    elif x.ndim == 4:\n        y = []\n        for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0)):\n            for (l, l1) in zip(range(pool_size[1]), range(-pool_size[1], 0)):\n                y.append(x[:, :, k:k1:strides[0], l:l1:strides[1]])\n    else:\n        y = []\n        for (k, k1) in zip(range(pool_size[0]), range(-pool_size[0], 0)):\n            for (l, l1) in zip(range(pool_size[1]), range(-pool_size[1], 0)):\n                for (m, m1) in zip(range(pool_size[2]), range(-pool_size[2], 0)):\n                    y.append(x[:, :, k:k1:strides[0], l:l1:strides[1], m:m1:strides[2]])\n    y = np.stack(y, axis=-1)\n    if pool_mode == 'avg':\n        y = np.mean(np.ma.masked_invalid(y), axis=-1).data\n    elif pool_mode == 'max':\n        y = np.max(y, axis=-1)\n\n    if data_format == 'channels_last':\n        if y.ndim == 3:\n            y = np.transpose(y, (0, 2, 1))\n        elif y.ndim == 4:\n            y = np.transpose(y, (0, 2, 3, 1))\n        else:\n            y = np.transpose(y, (0, 2, 3, 4, 1))\n\n    return y",
        "begin_line": 80,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.backend.reference_operations.rnn#128",
        "src_path": "tests/keras/backend/reference_operations.py",
        "class_name": "tests.keras.backend.reference_operations",
        "signature": "tests.keras.backend.reference_operations.rnn(x, w, init, go_backwards=False, mask=None, unroll=False, input_length=None)",
        "snippet": "def rnn(x, w, init, go_backwards=False, mask=None, unroll=False, input_length=None):\n    w_i, w_h, w_o = w\n    h = []\n    o = []\n\n    if go_backwards:\n        t_list = range(x.shape[1] - 1, -1, -1)\n    else:\n        t_list = range(x.shape[1])\n\n    if mask is not None:\n        from keras import backend as K\n        np_mask = K.eval(mask)\n    else:\n        np_mask = None\n\n    for (i, t) in enumerate(t_list):\n        h_t = np.dot(x[:, t], w_i)\n\n        if w_h is not None:\n            prev = h[i - 1] if i > 0 else init\n            h_t1 = np.dot(prev, w_h)\n            if np_mask is not None:\n                h_t1[np_mask[:, t] == 0] = prev[np_mask[:, t] == 0]\n        else:\n            h_t1 = 0\n\n        o_t = h_t + h_t1\n        if w_o is not None:\n            o_t = np.dot(o_t, w_o)\n        o.append(o_t)\n\n        if np_mask is not None:\n            h_t = h_t * np_mask[:, t].reshape(-1, 1)\n        h.append(h_t + h_t1)\n\n    return o[-1], np.stack(o, axis=1), np.stack(h, axis=1)",
        "begin_line": 128,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    }
]