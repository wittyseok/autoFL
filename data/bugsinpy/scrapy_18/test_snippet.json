[
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_filename#9",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_filename(self)",
        "snippet": "    def test_from_filename(self):\n        mappings = [\n            ('data.bin', Response),\n            ('file.txt', TextResponse),\n            ('file.xml.gz', Response),\n            ('file.xml', XmlResponse),\n            ('file.html', HtmlResponse),\n            ('file.unknownext', Response),\n        ]\n        for source, cls in mappings:\n            retcls = responsetypes.from_filename(source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 9,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_content_disposition#22",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_content_disposition(self)",
        "snippet": "    def test_from_content_disposition(self):\n        mappings = [\n            (b'attachment; filename=\"data.xml\"', XmlResponse),\n            (b'attachment; filename=data.xml', XmlResponse),\n            (u'attachment;filename=data\u00a3.tar.gz'.encode('utf-8'), Response),\n            (u'attachment;filename=data\u00b5.tar.gz'.encode('latin-1'), Response),\n            (u'attachment;filename=data\u9ad8.doc'.encode('gbk'), Response),\n            (u'attachment;filename=\u062f\u0648\u0631\u0647data.html'.encode('cp720'), HtmlResponse),\n            (u'attachment;filename=\u65e5\u672c\u8a9e\u7248Wikipedia.xml'.encode('iso2022_jp'), XmlResponse),\n\n        ]\n        for source, cls in mappings:\n            retcls = responsetypes.from_content_disposition(source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 22,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_content_type#37",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_content_type(self)",
        "snippet": "    def test_from_content_type(self):\n        mappings = [\n            ('text/html; charset=UTF-8', HtmlResponse),\n            ('text/xml; charset=UTF-8', XmlResponse),\n            ('application/xhtml+xml; charset=UTF-8', HtmlResponse),\n            ('application/vnd.wap.xhtml+xml; charset=utf-8', HtmlResponse),\n            ('application/xml; charset=UTF-8', XmlResponse),\n            ('application/octet-stream', Response),\n            ('application/x-json; encoding=UTF8;charset=UTF-8', TextResponse),\n        ]\n        for source, cls in mappings:\n            retcls = responsetypes.from_content_type(source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 37,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_body#51",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_body(self)",
        "snippet": "    def test_from_body(self):\n        mappings = [\n            (b'\\x03\\x02\\xdf\\xdd\\x23', Response),\n            (b'Some plain text\\ndata with tabs\\t and null bytes\\0', TextResponse),\n            (b'<html><head><title>Hello</title></head>', HtmlResponse),\n            (b'<?xml version=\"1.0\" encoding=\"utf-8\"', XmlResponse),\n        ]\n        for source, cls in mappings:\n            retcls = responsetypes.from_body(source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_headers#62",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_headers(self)",
        "snippet": "    def test_from_headers(self):\n        mappings = [\n            ({'Content-Type': ['text/html; charset=utf-8']}, HtmlResponse),\n            ({'Content-Type': ['application/octet-stream'], 'Content-Disposition': ['attachment; filename=data.txt']}, TextResponse),\n            ({'Content-Type': ['text/html; charset=utf-8'], 'Content-Encoding': ['gzip']}, Response),\n        ]\n        for source, cls in mappings:\n            source = Headers(source)\n            retcls = responsetypes.from_headers(source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 62,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_from_args#73",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_from_args(self)",
        "snippet": "    def test_from_args(self):\n        # TODO: add more tests that check precedence between the different arguments\n        mappings = [\n            ({'url': 'http://www.example.com/data.csv'}, TextResponse),\n            # headers takes precedence over url\n            ({'headers': Headers({'Content-Type': ['text/html; charset=utf-8']}), 'url': 'http://www.example.com/item/'}, HtmlResponse),\n            ({'headers': Headers({'Content-Disposition': ['attachment; filename=\"data.xml.gz\"']}), 'url': 'http://www.example.com/page/'}, Response),\n\n\n        ]\n        for source, cls in mappings:\n            retcls = responsetypes.from_args(**source)\n            assert retcls is cls, \"%s ==> %s != %s\" % (source, retcls, cls)",
        "begin_line": 73,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_responsetypes.ResponseTypesTest.test_custom_mime_types_loaded#87",
        "src_path": "tests/test_responsetypes.py",
        "class_name": "tests.test_responsetypes.ResponseTypesTest",
        "signature": "tests.test_responsetypes.ResponseTypesTest.test_custom_mime_types_loaded(self)",
        "snippet": "    def test_custom_mime_types_loaded(self):\n        # check that mime.types files shipped with scrapy are loaded\n        self.assertEqual(responsetypes.mimetypes.guess_type('x.scrapytest')[0], 'x-scrapy/test')",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    }
]