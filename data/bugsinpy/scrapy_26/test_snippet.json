[
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.setUp#13",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.attribute = SettingsAttribute('value', 10)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_greater_priority#16",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_greater_priority(self)",
        "snippet": "    def test_set_greater_priority(self):\n        self.attribute.set('value2', 20)\n        self.assertEqual(self.attribute.value, 'value2')\n        self.assertEqual(self.attribute.priority, 20)",
        "begin_line": 16,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_equal_priority#21",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_equal_priority(self)",
        "snippet": "    def test_set_equal_priority(self):\n        self.attribute.set('value2', 10)\n        self.assertEqual(self.attribute.value, 'value2')\n        self.assertEqual(self.attribute.priority, 10)",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_less_priority#26",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_less_priority(self)",
        "snippet": "    def test_set_less_priority(self):\n        self.attribute.set('value2', 0)\n        self.assertEqual(self.attribute.value, 'value')\n        self.assertEqual(self.attribute.priority, 10)",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsAttributeTest.test_set_per_key_priorities#31",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsAttributeTest",
        "signature": "tests.test_settings.__init__.SettingsAttributeTest.test_set_per_key_priorities(self)",
        "snippet": "    def test_set_per_key_priorities(self):\n        attribute = SettingsAttribute(\n                        BaseSettings({'one': 10, 'two': 20}, 0),\n                        0)\n\n        new_dict = {'one': 11, 'two': 21}\n        attribute.set(new_dict, 10)\n        self.assertEqual(attribute.value['one'], 11)\n        self.assertEqual(attribute.value['two'], 21)\n\n        new_settings = BaseSettings()\n        new_settings.set('one', 12, 20)\n        new_settings.set('two', 12, 0)\n        attribute.set(new_settings, 0)\n        self.assertEqual(attribute.value['one'], 12)\n        self.assertEqual(attribute.value['two'], 21)",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.setUp#54",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.settings = BaseSettings()",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_set_new_attribute#57",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_set_new_attribute(self)",
        "snippet": "    def test_set_new_attribute(self):\n        self.settings.set('TEST_OPTION', 'value', 0)\n        self.assertIn('TEST_OPTION', self.settings.attributes)\n\n        attr = self.settings.attributes['TEST_OPTION']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'value')\n        self.assertEqual(attr.priority, 0)",
        "begin_line": 57,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_set_settingsattribute#66",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_set_settingsattribute(self)",
        "snippet": "    def test_set_settingsattribute(self):\n        myattr = SettingsAttribute(0, 30) # Note priority 30\n        self.settings.set('TEST_ATTR', myattr, 10)\n        self.assertEqual(self.settings.get('TEST_ATTR'), 0)\n        self.assertEqual(self.settings.getpriority('TEST_ATTR'), 30)",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_set_instance_identity_on_update#72",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_set_instance_identity_on_update(self)",
        "snippet": "    def test_set_instance_identity_on_update(self):\n        attr = SettingsAttribute('value', 0)\n        self.settings.attributes = {'TEST_OPTION': attr}\n        self.settings.set('TEST_OPTION', 'othervalue', 10)\n\n        self.assertIn('TEST_OPTION', self.settings.attributes)\n        self.assertIs(attr, self.settings.attributes['TEST_OPTION'])",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_set_calls_settings_attributes_methods_on_update#80",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_set_calls_settings_attributes_methods_on_update(self)",
        "snippet": "    def test_set_calls_settings_attributes_methods_on_update(self):\n        attr = SettingsAttribute('value', 10)\n        with mock.patch.object(attr, '__setattr__') as mock_setattr, \\\n                mock.patch.object(attr, 'set') as mock_set:\n\n            self.settings.attributes = {'TEST_OPTION': attr}\n\n            for priority in (0, 10, 20):\n                self.settings.set('TEST_OPTION', 'othervalue', priority)\n                mock_set.assert_called_once_with('othervalue', priority)\n                self.assertFalse(mock_setattr.called)\n                mock_set.reset_mock()\n                mock_setattr.reset_mock()",
        "begin_line": 80,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_setitem#94",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_setitem(self)",
        "snippet": "    def test_setitem(self):\n        settings = BaseSettings()\n        settings.set('key', 'a', 'default')\n        settings['key'] = 'b'\n        self.assertEqual(settings['key'], 'b')\n        self.assertEqual(settings.getpriority('key'), 20)\n        settings['key'] = 'c'\n        self.assertEqual(settings['key'], 'c')\n        settings['key2'] = 'x'\n        self.assertIn('key2', settings)\n        self.assertEqual(settings['key2'], 'x')\n        self.assertEqual(settings.getpriority('key2'), 20)",
        "begin_line": 94,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_setdict_alias#107",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_setdict_alias(self)",
        "snippet": "    def test_setdict_alias(self):\n        with mock.patch.object(self.settings, 'set') as mock_set:\n            self.settings.setdict({'TEST_1': 'value1', 'TEST_2': 'value2'}, 10)\n            self.assertEqual(mock_set.call_count, 2)\n            calls = [mock.call('TEST_1', 'value1', 10),\n                     mock.call('TEST_2', 'value2', 10)]\n            mock_set.assert_has_calls(calls, any_order=True)",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_only_load_uppercase_vars#115",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_only_load_uppercase_vars(self)",
        "snippet": "    def test_setmodule_only_load_uppercase_vars(self):\n        class ModuleMock():\n            UPPERCASE_VAR = 'value'\n            MIXEDcase_VAR = 'othervalue'\n            lowercase_var = 'anothervalue'\n\n        self.settings.attributes = {}\n        self.settings.setmodule(ModuleMock(), 10)\n        self.assertIn('UPPERCASE_VAR', self.settings.attributes)\n        self.assertNotIn('MIXEDcase_VAR', self.settings.attributes)\n        self.assertNotIn('lowercase_var', self.settings.attributes)\n        self.assertEqual(len(self.settings.attributes), 1)",
        "begin_line": 115,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.ModuleMock.test_setmodule_only_load_uppercase_vars#115",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.ModuleMock",
        "signature": "tests.test_settings.__init__.ModuleMock.test_setmodule_only_load_uppercase_vars(self)",
        "snippet": "    def test_setmodule_only_load_uppercase_vars(self):\n        class ModuleMock():\n            UPPERCASE_VAR = 'value'\n            MIXEDcase_VAR = 'othervalue'\n            lowercase_var = 'anothervalue'\n\n        self.settings.attributes = {}\n        self.settings.setmodule(ModuleMock(), 10)\n        self.assertIn('UPPERCASE_VAR', self.settings.attributes)\n        self.assertNotIn('MIXEDcase_VAR', self.settings.attributes)\n        self.assertNotIn('lowercase_var', self.settings.attributes)\n        self.assertEqual(len(self.settings.attributes), 1)",
        "begin_line": 115,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_alias#128",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_alias(self)",
        "snippet": "    def test_setmodule_alias(self):\n        with mock.patch.object(self.settings, 'set') as mock_set:\n            self.settings.setmodule(default_settings, 10)\n            mock_set.assert_any_call('TEST_DEFAULT', 'defvalue', 10)\n            mock_set.assert_any_call('TEST_DICT', {'key': 'val'}, 10)",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_by_path#134",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_setmodule_by_path(self)",
        "snippet": "    def test_setmodule_by_path(self):\n        self.settings.attributes = {}\n        self.settings.setmodule(default_settings, 10)\n        ctrl_attributes = self.settings.attributes.copy()\n\n        self.settings.attributes = {}\n        self.settings.setmodule(\n            'tests.test_settings.default_settings', 10)\n\n        self.assertItemsEqual(six.iterkeys(self.settings.attributes),\n                              six.iterkeys(ctrl_attributes))\n\n        for key in six.iterkeys(ctrl_attributes):\n            attr = self.settings.attributes[key]\n            ctrl_attr = ctrl_attributes[key]\n            self.assertEqual(attr.value, ctrl_attr.value)\n            self.assertEqual(attr.priority, ctrl_attr.priority)",
        "begin_line": 134,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_update#152",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_update(self)",
        "snippet": "    def test_update(self):\n        settings = BaseSettings({'key_lowprio': 0}, priority=0)\n        settings.set('key_highprio', 10, priority=50)\n        custom_settings = BaseSettings({'key_lowprio': 1, 'key_highprio': 11}, priority=30)\n        custom_settings.set('newkey_one', None, priority=50)\n        custom_dict = {'key_lowprio': 2, 'key_highprio': 12, 'newkey_two': None}\n\n        settings.update(custom_dict, priority=20)\n        self.assertEqual(settings['key_lowprio'], 2)\n        self.assertEqual(settings.getpriority('key_lowprio'), 20)\n        self.assertEqual(settings['key_highprio'], 10)\n        self.assertIn('newkey_two', settings)\n        self.assertEqual(settings.getpriority('newkey_two'), 20)\n\n        settings.update(custom_settings)\n        self.assertEqual(settings['key_lowprio'], 1)\n        self.assertEqual(settings.getpriority('key_lowprio'), 30)\n        self.assertEqual(settings['key_highprio'], 10)\n        self.assertIn('newkey_one', settings)\n        self.assertEqual(settings.getpriority('newkey_one'), 50)\n\n        settings.update({'key_lowprio': 3}, priority=20)\n        self.assertEqual(settings['key_lowprio'], 1)",
        "begin_line": 152,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_update_jsonstring#176",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_update_jsonstring(self)",
        "snippet": "    def test_update_jsonstring(self):\n        settings = BaseSettings({'number': 0, 'dict': BaseSettings({'key': 'val'})})\n        settings.update('{\"number\": 1, \"newnumber\": 2}')\n        self.assertEqual(settings['number'], 1)\n        self.assertEqual(settings['newnumber'], 2)\n        settings.set(\"dict\", '{\"key\": \"newval\", \"newkey\": \"newval2\"}')\n        self.assertEqual(settings['dict']['key'], \"newval\")\n        self.assertEqual(settings['dict']['newkey'], \"newval2\")",
        "begin_line": 176,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_delete#185",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_delete(self)",
        "snippet": "    def test_delete(self):\n        settings = BaseSettings({'key': None})\n        settings.set('key_highprio', None, priority=50)\n        settings.delete('key')\n        settings.delete('key_highprio')\n        self.assertNotIn('key', settings)\n        self.assertIn('key_highprio', settings)\n        del settings['key_highprio']\n        self.assertNotIn('key_highprio', settings)",
        "begin_line": 185,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_get#195",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_get(self)",
        "snippet": "    def test_get(self):\n        test_configuration = {\n            'TEST_ENABLED1': '1',\n            'TEST_ENABLED2': True,\n            'TEST_ENABLED3': 1,\n            'TEST_DISABLED1': '0',\n            'TEST_DISABLED2': False,\n            'TEST_DISABLED3': 0,\n            'TEST_INT1': 123,\n            'TEST_INT2': '123',\n            'TEST_FLOAT1': 123.45,\n            'TEST_FLOAT2': '123.45',\n            'TEST_LIST1': ['one', 'two'],\n            'TEST_LIST2': 'one,two',\n            'TEST_STR': 'value',\n            'TEST_DICT1': {'key1': 'val1', 'ke2': 3},\n            'TEST_DICT2': '{\"key1\": \"val1\", \"ke2\": 3}',\n        }\n        settings = self.settings\n        settings.attributes = {key: SettingsAttribute(value, 0) for key, value\n                               in six.iteritems(test_configuration)}\n\n        self.assertTrue(settings.getbool('TEST_ENABLED1'))\n        self.assertTrue(settings.getbool('TEST_ENABLED2'))\n        self.assertTrue(settings.getbool('TEST_ENABLED3'))\n        self.assertFalse(settings.getbool('TEST_ENABLEDx'))\n        self.assertTrue(settings.getbool('TEST_ENABLEDx', True))\n        self.assertFalse(settings.getbool('TEST_DISABLED1'))\n        self.assertFalse(settings.getbool('TEST_DISABLED2'))\n        self.assertFalse(settings.getbool('TEST_DISABLED3'))\n        self.assertEqual(settings.getint('TEST_INT1'), 123)\n        self.assertEqual(settings.getint('TEST_INT2'), 123)\n        self.assertEqual(settings.getint('TEST_INTx'), 0)\n        self.assertEqual(settings.getint('TEST_INTx', 45), 45)\n        self.assertEqual(settings.getfloat('TEST_FLOAT1'), 123.45)\n        self.assertEqual(settings.getfloat('TEST_FLOAT2'), 123.45)\n        self.assertEqual(settings.getfloat('TEST_FLOATx'), 0.0)\n        self.assertEqual(settings.getfloat('TEST_FLOATx', 55.0), 55.0)\n        self.assertEqual(settings.getlist('TEST_LIST1'), ['one', 'two'])\n        self.assertEqual(settings.getlist('TEST_LIST2'), ['one', 'two'])\n        self.assertEqual(settings.getlist('TEST_LISTx'), [])\n        self.assertEqual(settings.getlist('TEST_LISTx', ['default']), ['default'])\n        self.assertEqual(settings['TEST_STR'], 'value')\n        self.assertEqual(settings.get('TEST_STR'), 'value')\n        self.assertEqual(settings['TEST_STRx'], None)\n        self.assertEqual(settings.get('TEST_STRx'), None)\n        self.assertEqual(settings.get('TEST_STRx', 'default'), 'default')\n        self.assertEqual(settings.getdict('TEST_DICT1'), {'key1': 'val1', 'ke2': 3})\n        self.assertEqual(settings.getdict('TEST_DICT2'), {'key1': 'val1', 'ke2': 3})\n        self.assertEqual(settings.getdict('TEST_DICT3'), {})\n        self.assertEqual(settings.getdict('TEST_DICT3', {'key1': 5}), {'key1': 5})\n        self.assertRaises(ValueError, settings.getdict, 'TEST_LIST1')",
        "begin_line": 195,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_getpriority#248",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_getpriority(self)",
        "snippet": "    def test_getpriority(self):\n        settings = BaseSettings({'key': 'value'}, priority=99)\n        self.assertEqual(settings.getpriority('key'), 99)\n        self.assertEqual(settings.getpriority('nonexistentkey'), None)",
        "begin_line": 248,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_getcomposite#253",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_getcomposite(self)",
        "snippet": "    def test_getcomposite(self):\n        s = BaseSettings({'TEST_BASE': {1: 1, 2: 2},\n                          'TEST': BaseSettings({1: 10, 3: 30}, 'default'),\n                          'HASNOBASE': BaseSettings({1: 1}, 'default')})\n        s['TEST'].set(4, 4, priority='project')\n        # When users specify a _BASE setting they explicitly don't want to use\n        # Scrapy's defaults, so we don't want to see anything that has a\n        # 'default' priority from TEST\n        cs = s._getcomposite('TEST')\n        self.assertEqual(len(cs), 3)\n        self.assertEqual(cs[1], 1)\n        self.assertEqual(cs[2], 2)\n        self.assertEqual(cs[4], 4)\n        cs = s._getcomposite('HASNOBASE')\n        self.assertEqual(len(cs), 1)\n        self.assertEqual(cs[1], 1)\n        cs = s._getcomposite('NONEXISTENT')\n        self.assertIsNone(cs)",
        "begin_line": 253,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_maxpriority#272",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_maxpriority(self)",
        "snippet": "    def test_maxpriority(self):\n        # Empty settings should return 'default'\n        self.assertEqual(self.settings.maxpriority(), 0)\n        self.settings.set('A', 0, 10)\n        self.settings.set('B', 0, 30)\n        self.assertEqual(self.settings.maxpriority(), 30)",
        "begin_line": 272,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_copy#279",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        values = {\n            'TEST_BOOL': True,\n            'TEST_LIST': ['one', 'two'],\n            'TEST_LIST_OF_LISTS': [['first_one', 'first_two'],\n                                   ['second_one', 'second_two']]\n        }\n        self.settings.setdict(values)\n        copy = self.settings.copy()\n        self.settings.set('TEST_BOOL', False)\n        self.assertTrue(copy.get('TEST_BOOL'))\n\n        test_list = self.settings.get('TEST_LIST')\n        test_list.append('three')\n        self.assertListEqual(copy.get('TEST_LIST'), ['one', 'two'])\n\n        test_list_of_lists = self.settings.get('TEST_LIST_OF_LISTS')\n        test_list_of_lists[0].append('first_three')\n        self.assertListEqual(copy.get('TEST_LIST_OF_LISTS')[0],\n                             ['first_one', 'first_two'])",
        "begin_line": 279,
        "end_line": 298,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_freeze#300",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_freeze(self)",
        "snippet": "    def test_freeze(self):\n        self.settings.freeze()\n        with self.assertRaises(TypeError) as cm:\n            self.settings.set('TEST_BOOL', False)\n            self.assertEqual(str(cm.exception),\n                             \"Trying to modify an immutable Settings object\")",
        "begin_line": 300,
        "end_line": 305,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_frozencopy#307",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_frozencopy(self)",
        "snippet": "    def test_frozencopy(self):\n        frozencopy = self.settings.frozencopy()\n        self.assertTrue(frozencopy.frozen)\n        self.assertIsNot(frozencopy, self.settings)",
        "begin_line": 307,
        "end_line": 310,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_deprecated_attribute_overrides#312",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_deprecated_attribute_overrides(self)",
        "snippet": "    def test_deprecated_attribute_overrides(self):\n        self.settings.set('BAR', 'fuz', priority='cmdline')\n        with warnings.catch_warnings(record=True) as w:\n            self.settings.overrides['BAR'] = 'foo'\n            self.assertIn(\"Settings.overrides\", str(w[0].message))\n            self.assertEqual(self.settings.get('BAR'), 'foo')\n            self.assertEqual(self.settings.overrides.get('BAR'), 'foo')\n            self.assertIn('BAR', self.settings.overrides)\n\n            self.settings.overrides.update(BAR='bus')\n            self.assertEqual(self.settings.get('BAR'), 'bus')\n            self.assertEqual(self.settings.overrides.get('BAR'), 'bus')\n\n            self.settings.overrides.setdefault('BAR', 'fez')\n            self.assertEqual(self.settings.get('BAR'), 'bus')\n\n            self.settings.overrides.setdefault('FOO', 'fez')\n            self.assertEqual(self.settings.get('FOO'), 'fez')\n            self.assertEqual(self.settings.overrides.get('FOO'), 'fez')",
        "begin_line": 312,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.BaseSettingsTest.test_deprecated_attribute_defaults#333",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.BaseSettingsTest",
        "signature": "tests.test_settings.__init__.BaseSettingsTest.test_deprecated_attribute_defaults(self)",
        "snippet": "    def test_deprecated_attribute_defaults(self):\n        self.settings.set('BAR', 'fuz', priority='default')\n        with warnings.catch_warnings(record=True) as w:\n            self.settings.defaults['BAR'] = 'foo'\n            self.assertIn(\"Settings.defaults\", str(w[0].message))\n            self.assertEqual(self.settings.get('BAR'), 'foo')\n            self.assertEqual(self.settings.defaults.get('BAR'), 'foo')\n            self.assertIn('BAR', self.settings.defaults)",
        "begin_line": 333,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.setUp#348",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.settings = Settings()",
        "begin_line": 348,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_initial_defaults#353",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_initial_defaults(self)",
        "snippet": "    def test_initial_defaults(self):\n        settings = Settings()\n        self.assertEqual(len(settings.attributes), 2)\n        self.assertIn('TEST_DEFAULT', settings.attributes)\n\n        attr = settings.attributes['TEST_DEFAULT']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'defvalue')\n        self.assertEqual(attr.priority, 10)",
        "begin_line": 353,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_initial_values#365",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_initial_values(self)",
        "snippet": "    def test_initial_values(self):\n        settings = Settings({'TEST_OPTION': 'value'}, 10)\n        self.assertEqual(len(settings.attributes), 1)\n        self.assertIn('TEST_OPTION', settings.attributes)\n\n        attr = settings.attributes['TEST_OPTION']\n        self.assertIsInstance(attr, SettingsAttribute)\n        self.assertEqual(attr.value, 'value')\n        self.assertEqual(attr.priority, 10)",
        "begin_line": 365,
        "end_line": 373,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_autopromote_dicts#376",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_autopromote_dicts(self)",
        "snippet": "    def test_autopromote_dicts(self):\n        settings = Settings()\n        mydict = settings.get('TEST_DICT')\n        self.assertIsInstance(mydict, BaseSettings)\n        self.assertIn('key', mydict)\n        self.assertEqual(mydict['key'], 'val')\n        self.assertEqual(mydict.getpriority('key'), 0)",
        "begin_line": 376,
        "end_line": 382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.SettingsTest.test_getdict_autodegrade_basesettings#385",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.SettingsTest",
        "signature": "tests.test_settings.__init__.SettingsTest.test_getdict_autodegrade_basesettings(self)",
        "snippet": "    def test_getdict_autodegrade_basesettings(self):\n        settings = Settings()\n        mydict = settings.getdict('TEST_DICT')\n        self.assertIsInstance(mydict, dict)\n        self.assertEqual(len(mydict), 1)\n        self.assertIn('key', mydict)\n        self.assertEqual(mydict['key'], 'val')",
        "begin_line": 385,
        "end_line": 391,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.CrawlerSettingsTest.test_deprecated_crawlersettings#396",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.CrawlerSettingsTest",
        "signature": "tests.test_settings.__init__.CrawlerSettingsTest.test_deprecated_crawlersettings(self)",
        "snippet": "    def test_deprecated_crawlersettings(self):\n        def _get_settings(settings_dict=None):\n            settings_module = type('SettingsModuleMock', (object,), settings_dict or {})\n            return CrawlerSettings(settings_module)\n\n        with warnings.catch_warnings(record=True) as w:\n            settings = _get_settings()\n            self.assertIn(\"CrawlerSettings is deprecated\", str(w[0].message))\n\n            # test_global_defaults\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 180)\n\n            # test_defaults\n            settings.defaults['DOWNLOAD_TIMEOUT'] = '99'\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 99)\n\n            # test_settings_module\n            settings = _get_settings({'DOWNLOAD_TIMEOUT': '3'})\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 3)\n\n            # test_overrides\n            settings = _get_settings({'DOWNLOAD_TIMEOUT': '3'})\n            settings.overrides['DOWNLOAD_TIMEOUT'] = '15'\n            self.assertEqual(settings.getint('DOWNLOAD_TIMEOUT'), 15)",
        "begin_line": 396,
        "end_line": 419,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_settings.__init__.CrawlerSettingsTest._get_settings#397",
        "src_path": "tests/test_settings/__init__.py",
        "class_name": "tests.test_settings.__init__.CrawlerSettingsTest",
        "signature": "tests.test_settings.__init__.CrawlerSettingsTest._get_settings(settings_dict=None)",
        "snippet": "        def _get_settings(settings_dict=None):\n            settings_module = type('SettingsModuleMock', (object,), settings_dict or {})\n            return CrawlerSettings(settings_module)",
        "begin_line": 397,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    }
]