[
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.setup_method#10",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.df = tm.makeTimeDataFrame()[:10]\n        self.df[\"id1\"] = (self.df[\"A\"] > 0).astype(np.int64)\n        self.df[\"id2\"] = (self.df[\"B\"] > 0).astype(np.int64)\n\n        self.var_name = \"var\"\n        self.value_name = \"val\"\n\n        self.df1 = pd.DataFrame(\n            [\n                [1.067683, -1.110463, 0.20867],\n                [-1.321405, 0.368915, -1.055342],\n                [-0.807333, 0.08298, -0.873361],\n            ]\n        )\n        self.df1.columns = [list(\"ABC\"), list(\"abc\")]\n        self.df1.columns.names = [\"CAP\", \"low\"]",
        "begin_line": 10,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_top_level_method#28",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_top_level_method(self)",
        "snippet": "    def test_top_level_method(self):\n        result = melt(self.df)\n        assert result.columns.tolist() == [\"variable\", \"value\"]",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_method_signatures#32",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_method_signatures(self)",
        "snippet": "    def test_method_signatures(self):\n        tm.assert_frame_equal(self.df.melt(), melt(self.df))\n\n        tm.assert_frame_equal(\n            self.df.melt(id_vars=[\"id1\", \"id2\"], value_vars=[\"A\", \"B\"]),\n            melt(self.df, id_vars=[\"id1\", \"id2\"], value_vars=[\"A\", \"B\"]),\n        )\n\n        tm.assert_frame_equal(\n            self.df.melt(var_name=self.var_name, value_name=self.value_name),\n            melt(self.df, var_name=self.var_name, value_name=self.value_name),\n        )\n\n        tm.assert_frame_equal(self.df1.melt(col_level=0), melt(self.df1, col_level=0))",
        "begin_line": 32,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_default_col_names#47",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_default_col_names(self)",
        "snippet": "    def test_default_col_names(self):\n        result = self.df.melt()\n        assert result.columns.tolist() == [\"variable\", \"value\"]\n\n        result1 = self.df.melt(id_vars=[\"id1\"])\n        assert result1.columns.tolist() == [\"id1\", \"variable\", \"value\"]\n\n        result2 = self.df.melt(id_vars=[\"id1\", \"id2\"])\n        assert result2.columns.tolist() == [\"id1\", \"id2\", \"variable\", \"value\"]",
        "begin_line": 47,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_value_vars#57",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_value_vars(self)",
        "snippet": "    def test_value_vars(self):\n        result3 = self.df.melt(id_vars=[\"id1\", \"id2\"], value_vars=\"A\")\n        assert len(result3) == 10\n\n        result4 = self.df.melt(id_vars=[\"id1\", \"id2\"], value_vars=[\"A\", \"B\"])\n        expected4 = DataFrame(\n            {\n                \"id1\": self.df[\"id1\"].tolist() * 2,\n                \"id2\": self.df[\"id2\"].tolist() * 2,\n                \"variable\": [\"A\"] * 10 + [\"B\"] * 10,\n                \"value\": (self.df[\"A\"].tolist() + self.df[\"B\"].tolist()),\n            },\n            columns=[\"id1\", \"id2\", \"variable\", \"value\"],\n        )\n        tm.assert_frame_equal(result4, expected4)",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_value_vars_types#73",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_value_vars_types(self)",
        "snippet": "    def test_value_vars_types(self):\n        # GH 15348\n        expected = DataFrame(\n            {\n                \"id1\": self.df[\"id1\"].tolist() * 2,\n                \"id2\": self.df[\"id2\"].tolist() * 2,\n                \"variable\": [\"A\"] * 10 + [\"B\"] * 10,\n                \"value\": (self.df[\"A\"].tolist() + self.df[\"B\"].tolist()),\n            },\n            columns=[\"id1\", \"id2\", \"variable\", \"value\"],\n        )\n\n        for type_ in (tuple, list, np.array):\n            result = self.df.melt(id_vars=[\"id1\", \"id2\"], value_vars=type_((\"A\", \"B\")))\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 73,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_vars_work_with_multiindex#89",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_vars_work_with_multiindex(self)",
        "snippet": "    def test_vars_work_with_multiindex(self):\n        expected = DataFrame(\n            {\n                (\"A\", \"a\"): self.df1[(\"A\", \"a\")],\n                \"CAP\": [\"B\"] * len(self.df1),\n                \"low\": [\"b\"] * len(self.df1),\n                \"value\": self.df1[(\"B\", \"b\")],\n            },\n            columns=[(\"A\", \"a\"), \"CAP\", \"low\", \"value\"],\n        )\n\n        result = self.df1.melt(id_vars=[(\"A\", \"a\")], value_vars=[(\"B\", \"b\")])\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 89,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_single_vars_work_with_multiindex#103",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_single_vars_work_with_multiindex(self)",
        "snippet": "    def test_single_vars_work_with_multiindex(self):\n        expected = DataFrame(\n            {\n                \"A\": {0: 1.067683, 1: -1.321405, 2: -0.807333},\n                \"CAP\": {0: \"B\", 1: \"B\", 2: \"B\"},\n                \"value\": {0: -1.110463, 1: 0.368915, 2: 0.08298},\n            }\n        )\n        result = self.df1.melt([\"A\"], [\"B\"], col_level=0)\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 103,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_tuple_vars_fail_with_multiindex#114",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_tuple_vars_fail_with_multiindex(self)",
        "snippet": "    def test_tuple_vars_fail_with_multiindex(self):\n        # melt should fail with an informative error message if\n        # the columns have a MultiIndex and a tuple is passed\n        # for id_vars or value_vars.\n        tuple_a = (\"A\", \"a\")\n        list_a = [tuple_a]\n        tuple_b = (\"B\", \"b\")\n        list_b = [tuple_b]\n\n        msg = r\"(id|value)_vars must be a list of tuples when columns are a MultiIndex\"\n        for id_vars, value_vars in (\n            (tuple_a, list_b),\n            (list_a, tuple_b),\n            (tuple_a, tuple_b),\n        ):\n            with pytest.raises(ValueError, match=msg):\n                self.df1.melt(id_vars=id_vars, value_vars=value_vars)",
        "begin_line": 114,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_custom_var_name#132",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_custom_var_name(self)",
        "snippet": "    def test_custom_var_name(self):\n        result5 = self.df.melt(var_name=self.var_name)\n        assert result5.columns.tolist() == [\"var\", \"value\"]\n\n        result6 = self.df.melt(id_vars=[\"id1\"], var_name=self.var_name)\n        assert result6.columns.tolist() == [\"id1\", \"var\", \"value\"]\n\n        result7 = self.df.melt(id_vars=[\"id1\", \"id2\"], var_name=self.var_name)\n        assert result7.columns.tolist() == [\"id1\", \"id2\", \"var\", \"value\"]\n\n        result8 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"], value_vars=\"A\", var_name=self.var_name\n        )\n        assert result8.columns.tolist() == [\"id1\", \"id2\", \"var\", \"value\"]\n\n        result9 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"], value_vars=[\"A\", \"B\"], var_name=self.var_name\n        )\n        expected9 = DataFrame(\n            {\n                \"id1\": self.df[\"id1\"].tolist() * 2,\n                \"id2\": self.df[\"id2\"].tolist() * 2,\n                self.var_name: [\"A\"] * 10 + [\"B\"] * 10,\n                \"value\": (self.df[\"A\"].tolist() + self.df[\"B\"].tolist()),\n            },\n            columns=[\"id1\", \"id2\", self.var_name, \"value\"],\n        )\n        tm.assert_frame_equal(result9, expected9)",
        "begin_line": 132,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_custom_value_name#161",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_custom_value_name(self)",
        "snippet": "    def test_custom_value_name(self):\n        result10 = self.df.melt(value_name=self.value_name)\n        assert result10.columns.tolist() == [\"variable\", \"val\"]\n\n        result11 = self.df.melt(id_vars=[\"id1\"], value_name=self.value_name)\n        assert result11.columns.tolist() == [\"id1\", \"variable\", \"val\"]\n\n        result12 = self.df.melt(id_vars=[\"id1\", \"id2\"], value_name=self.value_name)\n        assert result12.columns.tolist() == [\"id1\", \"id2\", \"variable\", \"val\"]\n\n        result13 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"], value_vars=\"A\", value_name=self.value_name\n        )\n        assert result13.columns.tolist() == [\"id1\", \"id2\", \"variable\", \"val\"]\n\n        result14 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"], value_vars=[\"A\", \"B\"], value_name=self.value_name\n        )\n        expected14 = DataFrame(\n            {\n                \"id1\": self.df[\"id1\"].tolist() * 2,\n                \"id2\": self.df[\"id2\"].tolist() * 2,\n                \"variable\": [\"A\"] * 10 + [\"B\"] * 10,\n                self.value_name: (self.df[\"A\"].tolist() + self.df[\"B\"].tolist()),\n            },\n            columns=[\"id1\", \"id2\", \"variable\", self.value_name],\n        )\n        tm.assert_frame_equal(result14, expected14)",
        "begin_line": 161,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_custom_var_and_value_name#190",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_custom_var_and_value_name(self)",
        "snippet": "    def test_custom_var_and_value_name(self):\n\n        result15 = self.df.melt(var_name=self.var_name, value_name=self.value_name)\n        assert result15.columns.tolist() == [\"var\", \"val\"]\n\n        result16 = self.df.melt(\n            id_vars=[\"id1\"], var_name=self.var_name, value_name=self.value_name\n        )\n        assert result16.columns.tolist() == [\"id1\", \"var\", \"val\"]\n\n        result17 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"], var_name=self.var_name, value_name=self.value_name\n        )\n        assert result17.columns.tolist() == [\"id1\", \"id2\", \"var\", \"val\"]\n\n        result18 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"],\n            value_vars=\"A\",\n            var_name=self.var_name,\n            value_name=self.value_name,\n        )\n        assert result18.columns.tolist() == [\"id1\", \"id2\", \"var\", \"val\"]\n\n        result19 = self.df.melt(\n            id_vars=[\"id1\", \"id2\"],\n            value_vars=[\"A\", \"B\"],\n            var_name=self.var_name,\n            value_name=self.value_name,\n        )\n        expected19 = DataFrame(\n            {\n                \"id1\": self.df[\"id1\"].tolist() * 2,\n                \"id2\": self.df[\"id2\"].tolist() * 2,\n                self.var_name: [\"A\"] * 10 + [\"B\"] * 10,\n                self.value_name: (self.df[\"A\"].tolist() + self.df[\"B\"].tolist()),\n            },\n            columns=[\"id1\", \"id2\", self.var_name, self.value_name],\n        )\n        tm.assert_frame_equal(result19, expected19)\n\n        df20 = self.df.copy()\n        df20.columns.name = \"foo\"\n        result20 = df20.melt()\n        assert result20.columns.tolist() == [\"foo\", \"value\"]",
        "begin_line": 190,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_col_level#235",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_col_level(self)",
        "snippet": "    def test_col_level(self):\n        res1 = self.df1.melt(col_level=0)\n        res2 = self.df1.melt(col_level=\"CAP\")\n        assert res1.columns.tolist() == [\"CAP\", \"value\"]\n        assert res2.columns.tolist() == [\"CAP\", \"value\"]",
        "begin_line": 235,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_multiindex#241",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_multiindex(self)",
        "snippet": "    def test_multiindex(self):\n        res = self.df1.melt()\n        assert res.columns.tolist() == [\"CAP\", \"low\", \"value\"]",
        "begin_line": 241,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_pandas_dtypes#253",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_pandas_dtypes(self, col)",
        "snippet": "    def test_pandas_dtypes(self, col):\n        # GH 15785\n        df = DataFrame(\n            {\"klass\": range(5), \"col\": col, \"attr1\": [1, 0, 0, 0, 0], \"attr2\": col}\n        )\n        expected_value = pd.concat([pd.Series([1, 0, 0, 0, 0]), col], ignore_index=True)\n        result = melt(\n            df, id_vars=[\"klass\", \"col\"], var_name=\"attribute\", value_name=\"value\"\n        )\n        expected = DataFrame(\n            {\n                0: list(range(5)) * 2,\n                1: pd.concat([col] * 2, ignore_index=True),\n                2: [\"attr1\"] * 5 + [\"attr2\"] * 5,\n                3: expected_value,\n            }\n        )\n        expected.columns = [\"klass\", \"col\", \"attribute\", \"value\"]\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 253,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_preserve_category#273",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_preserve_category(self)",
        "snippet": "    def test_preserve_category(self):\n        # GH 15853\n        data = DataFrame({\"A\": [1, 2], \"B\": pd.Categorical([\"X\", \"Y\"])})\n        result = pd.melt(data, [\"B\"], [\"A\"])\n        expected = DataFrame(\n            {\"B\": pd.Categorical([\"X\", \"Y\"]), \"variable\": [\"A\", \"A\"], \"value\": [1, 2]}\n        )\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 273,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_melt_missing_columns_raises#283",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_melt_missing_columns_raises(self)",
        "snippet": "    def test_melt_missing_columns_raises(self):\n        # GH-23575\n        # This test is to ensure that pandas raises an error if melting is\n        # attempted with column names absent from the dataframe\n\n        # Generate data\n        df = pd.DataFrame(np.random.randn(5, 4), columns=list(\"abcd\"))\n\n        # Try to melt with missing `value_vars` column name\n        msg = \"The following '{Var}' are not present in the DataFrame: {Col}\"\n        with pytest.raises(\n            KeyError, match=msg.format(Var=\"value_vars\", Col=\"\\\\['C'\\\\]\")\n        ):\n            df.melt([\"a\", \"b\"], [\"C\", \"d\"])\n\n        # Try to melt with missing `id_vars` column name\n        with pytest.raises(KeyError, match=msg.format(Var=\"id_vars\", Col=\"\\\\['A'\\\\]\")):\n            df.melt([\"A\", \"b\"], [\"c\", \"d\"])\n\n        # Multiple missing\n        with pytest.raises(\n            KeyError,\n            match=msg.format(Var=\"id_vars\", Col=\"\\\\['not_here', 'or_there'\\\\]\"),\n        ):\n            df.melt([\"a\", \"b\", \"not_here\", \"or_there\"], [\"c\", \"d\"])\n\n        # Multiindex melt fails if column is missing from multilevel melt\n        multi = df.copy()\n        multi.columns = [list(\"ABCD\"), list(\"abcd\")]\n        with pytest.raises(KeyError, match=msg.format(Var=\"id_vars\", Col=\"\\\\['E'\\\\]\")):\n            multi.melt([(\"E\", \"a\")], [(\"B\", \"b\")])\n        # Multiindex fails if column is missing from single level melt\n        with pytest.raises(\n            KeyError, match=msg.format(Var=\"value_vars\", Col=\"\\\\['F'\\\\]\")\n        ):\n            multi.melt([\"A\"], [\"F\"], col_level=0)",
        "begin_line": 283,
        "end_line": 318,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_id_vars#320",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_id_vars(self)",
        "snippet": "    def test_melt_mixed_int_str_id_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"], \"b\": [1], \"d\": [2]})\n        result = melt(df, id_vars=[0, \"a\"], value_vars=[\"b\", \"d\"])\n        expected = DataFrame(\n            {0: [\"foo\"] * 2, \"a\": [\"bar\"] * 2, \"variable\": list(\"bd\"), \"value\": [1, 2]}\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 320,
        "end_line": 327,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_value_vars#329",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestMelt",
        "signature": "pandas.tests.reshape.test_melt.TestMelt.test_melt_mixed_int_str_value_vars(self)",
        "snippet": "    def test_melt_mixed_int_str_value_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"]})\n        result = melt(df, value_vars=[0, \"a\"])\n        expected = DataFrame({\"variable\": [0, \"a\"], \"value\": [\"foo\", \"bar\"]})\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 329,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestLreshape.test_pairs#338",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestLreshape",
        "signature": "pandas.tests.reshape.test_melt.TestLreshape.test_pairs(self)",
        "snippet": "    def test_pairs(self):\n        data = {\n            \"birthdt\": [\n                \"08jan2009\",\n                \"20dec2008\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n            ],\n            \"birthwt\": [1766, 3301, 1454, 3139, 4133],\n            \"id\": [101, 102, 103, 104, 105],\n            \"sex\": [\"Male\", \"Female\", \"Female\", \"Female\", \"Female\"],\n            \"visitdt1\": [\n                \"11jan2009\",\n                \"22dec2008\",\n                \"04jan2009\",\n                \"29dec2008\",\n                \"20jan2009\",\n            ],\n            \"visitdt2\": [\"21jan2009\", np.nan, \"22jan2009\", \"31dec2008\", \"03feb2009\"],\n            \"visitdt3\": [\"05feb2009\", np.nan, np.nan, \"02jan2009\", \"15feb2009\"],\n            \"wt1\": [1823, 3338, 1549, 3298, 4306],\n            \"wt2\": [2011.0, np.nan, 1892.0, 3338.0, 4575.0],\n            \"wt3\": [2293.0, np.nan, np.nan, 3377.0, 4805.0],\n        }\n\n        df = DataFrame(data)\n\n        spec = {\n            \"visitdt\": [\"visitdt{i:d}\".format(i=i) for i in range(1, 4)],\n            \"wt\": [\"wt{i:d}\".format(i=i) for i in range(1, 4)],\n        }\n        result = lreshape(df, spec)\n\n        exp_data = {\n            \"birthdt\": [\n                \"08jan2009\",\n                \"20dec2008\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n                \"08jan2009\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n                \"08jan2009\",\n                \"21dec2008\",\n                \"11jan2009\",\n            ],\n            \"birthwt\": [\n                1766,\n                3301,\n                1454,\n                3139,\n                4133,\n                1766,\n                1454,\n                3139,\n                4133,\n                1766,\n                3139,\n                4133,\n            ],\n            \"id\": [101, 102, 103, 104, 105, 101, 103, 104, 105, 101, 104, 105],\n            \"sex\": [\n                \"Male\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Male\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Male\",\n                \"Female\",\n                \"Female\",\n            ],\n            \"visitdt\": [\n                \"11jan2009\",\n                \"22dec2008\",\n                \"04jan2009\",\n                \"29dec2008\",\n                \"20jan2009\",\n                \"21jan2009\",\n                \"22jan2009\",\n                \"31dec2008\",\n                \"03feb2009\",\n                \"05feb2009\",\n                \"02jan2009\",\n                \"15feb2009\",\n            ],\n            \"wt\": [\n                1823.0,\n                3338.0,\n                1549.0,\n                3298.0,\n                4306.0,\n                2011.0,\n                1892.0,\n                3338.0,\n                4575.0,\n                2293.0,\n                3377.0,\n                4805.0,\n            ],\n        }\n        exp = DataFrame(exp_data, columns=result.columns)\n        tm.assert_frame_equal(result, exp)\n\n        result = lreshape(df, spec, dropna=False)\n        exp_data = {\n            \"birthdt\": [\n                \"08jan2009\",\n                \"20dec2008\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n                \"08jan2009\",\n                \"20dec2008\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n                \"08jan2009\",\n                \"20dec2008\",\n                \"30dec2008\",\n                \"21dec2008\",\n                \"11jan2009\",\n            ],\n            \"birthwt\": [\n                1766,\n                3301,\n                1454,\n                3139,\n                4133,\n                1766,\n                3301,\n                1454,\n                3139,\n                4133,\n                1766,\n                3301,\n                1454,\n                3139,\n                4133,\n            ],\n            \"id\": [\n                101,\n                102,\n                103,\n                104,\n                105,\n                101,\n                102,\n                103,\n                104,\n                105,\n                101,\n                102,\n                103,\n                104,\n                105,\n            ],\n            \"sex\": [\n                \"Male\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Male\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Male\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n                \"Female\",\n            ],\n            \"visitdt\": [\n                \"11jan2009\",\n                \"22dec2008\",\n                \"04jan2009\",\n                \"29dec2008\",\n                \"20jan2009\",\n                \"21jan2009\",\n                np.nan,\n                \"22jan2009\",\n                \"31dec2008\",\n                \"03feb2009\",\n                \"05feb2009\",\n                np.nan,\n                np.nan,\n                \"02jan2009\",\n                \"15feb2009\",\n            ],\n            \"wt\": [\n                1823.0,\n                3338.0,\n                1549.0,\n                3298.0,\n                4306.0,\n                2011.0,\n                np.nan,\n                1892.0,\n                3338.0,\n                4575.0,\n                2293.0,\n                np.nan,\n                np.nan,\n                3377.0,\n                4805.0,\n            ],\n        }\n        exp = DataFrame(exp_data, columns=result.columns)\n        tm.assert_frame_equal(result, exp)\n\n        spec = {\n            \"visitdt\": [\"visitdt{i:d}\".format(i=i) for i in range(1, 3)],\n            \"wt\": [\"wt{i:d}\".format(i=i) for i in range(1, 4)],\n        }\n        msg = \"All column lists must be same length\"\n        with pytest.raises(ValueError, match=msg):\n            lreshape(df, spec)",
        "begin_line": 338,
        "end_line": 562,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_simple#566",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_simple(self)",
        "snippet": "    def test_simple(self):\n        np.random.seed(123)\n        x = np.random.randn(3)\n        df = pd.DataFrame(\n            {\n                \"A1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n                \"A1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n                \"B1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n                \"B1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n                \"X\": dict(zip(range(3), x)),\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": x.tolist() + x.tolist(),\n            \"A\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n            \"B\": [2.5, 1.2, 0.7, 3.2, 1.3, 0.1],\n            \"year\": [1970, 1970, 1970, 1980, 1980, 1980],\n            \"id\": [0, 1, 2, 0, 1, 2],\n        }\n        expected = DataFrame(exp_data)\n        expected = expected.set_index([\"id\", \"year\"])[[\"X\", \"A\", \"B\"]]\n        result = wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 566,
        "end_line": 589,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_stubs#591",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_stubs(self)",
        "snippet": "    def test_stubs(self):\n        # GH9204\n        df = pd.DataFrame([[0, 1, 2, 3, 8], [4, 5, 6, 7, 9]])\n        df.columns = [\"id\", \"inc1\", \"inc2\", \"edu1\", \"edu2\"]\n        stubs = [\"inc\", \"edu\"]\n\n        # TODO: unused?\n        df_long = pd.wide_to_long(df, stubs, i=\"id\", j=\"age\")  # noqa\n\n        assert stubs == [\"inc\", \"edu\"]",
        "begin_line": 591,
        "end_line": 600,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_separating_character#602",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_separating_character(self)",
        "snippet": "    def test_separating_character(self):\n        # GH14779\n        np.random.seed(123)\n        x = np.random.randn(3)\n        df = pd.DataFrame(\n            {\n                \"A.1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n                \"A.1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n                \"B.1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n                \"B.1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n                \"X\": dict(zip(range(3), x)),\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": x.tolist() + x.tolist(),\n            \"A\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n            \"B\": [2.5, 1.2, 0.7, 3.2, 1.3, 0.1],\n            \"year\": [1970, 1970, 1970, 1980, 1980, 1980],\n            \"id\": [0, 1, 2, 0, 1, 2],\n        }\n        expected = DataFrame(exp_data)\n        expected = expected.set_index([\"id\", \"year\"])[[\"X\", \"A\", \"B\"]]\n        result = wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\", sep=\".\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 602,
        "end_line": 626,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_escapable_characters#628",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_escapable_characters(self)",
        "snippet": "    def test_escapable_characters(self):\n        np.random.seed(123)\n        x = np.random.randn(3)\n        df = pd.DataFrame(\n            {\n                \"A(quarterly)1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n                \"A(quarterly)1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n                \"B(quarterly)1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n                \"B(quarterly)1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n                \"X\": dict(zip(range(3), x)),\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": x.tolist() + x.tolist(),\n            \"A(quarterly)\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n            \"B(quarterly)\": [2.5, 1.2, 0.7, 3.2, 1.3, 0.1],\n            \"year\": [1970, 1970, 1970, 1980, 1980, 1980],\n            \"id\": [0, 1, 2, 0, 1, 2],\n        }\n        expected = DataFrame(exp_data)\n        expected = expected.set_index([\"id\", \"year\"])[\n            [\"X\", \"A(quarterly)\", \"B(quarterly)\"]\n        ]\n        result = wide_to_long(df, [\"A(quarterly)\", \"B(quarterly)\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 628,
        "end_line": 653,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_unbalanced#655",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_unbalanced(self)",
        "snippet": "    def test_unbalanced(self):\n        # test that we can have a varying amount of time variables\n        df = pd.DataFrame(\n            {\n                \"A2010\": [1.0, 2.0],\n                \"A2011\": [3.0, 4.0],\n                \"B2010\": [5.0, 6.0],\n                \"X\": [\"X1\", \"X2\"],\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": [\"X1\", \"X1\", \"X2\", \"X2\"],\n            \"A\": [1.0, 3.0, 2.0, 4.0],\n            \"B\": [5.0, np.nan, 6.0, np.nan],\n            \"id\": [0, 0, 1, 1],\n            \"year\": [2010, 2011, 2010, 2011],\n        }\n        expected = pd.DataFrame(exp_data)\n        expected = expected.set_index([\"id\", \"year\"])[[\"X\", \"A\", \"B\"]]\n        result = wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 655,
        "end_line": 676,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_character_overlap#678",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_character_overlap(self)",
        "snippet": "    def test_character_overlap(self):\n        # Test we handle overlapping characters in both id_vars and value_vars\n        df = pd.DataFrame(\n            {\n                \"A11\": [\"a11\", \"a22\", \"a33\"],\n                \"A12\": [\"a21\", \"a22\", \"a23\"],\n                \"B11\": [\"b11\", \"b12\", \"b13\"],\n                \"B12\": [\"b21\", \"b22\", \"b23\"],\n                \"BB11\": [1, 2, 3],\n                \"BB12\": [4, 5, 6],\n                \"BBBX\": [91, 92, 93],\n                \"BBBZ\": [91, 92, 93],\n            }\n        )\n        df[\"id\"] = df.index\n        expected = pd.DataFrame(\n            {\n                \"BBBX\": [91, 92, 93, 91, 92, 93],\n                \"BBBZ\": [91, 92, 93, 91, 92, 93],\n                \"A\": [\"a11\", \"a22\", \"a33\", \"a21\", \"a22\", \"a23\"],\n                \"B\": [\"b11\", \"b12\", \"b13\", \"b21\", \"b22\", \"b23\"],\n                \"BB\": [1, 2, 3, 4, 5, 6],\n                \"id\": [0, 1, 2, 0, 1, 2],\n                \"year\": [11, 11, 11, 12, 12, 12],\n            }\n        )\n        expected = expected.set_index([\"id\", \"year\"])[[\"BBBX\", \"BBBZ\", \"A\", \"B\", \"BB\"]]\n        result = wide_to_long(df, [\"A\", \"B\", \"BB\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))",
        "begin_line": 678,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_separator#708",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_separator(self)",
        "snippet": "    def test_invalid_separator(self):\n        # if an invalid separator is supplied a empty data frame is returned\n        sep = \"nope!\"\n        df = pd.DataFrame(\n            {\n                \"A2010\": [1.0, 2.0],\n                \"A2011\": [3.0, 4.0],\n                \"B2010\": [5.0, 6.0],\n                \"X\": [\"X1\", \"X2\"],\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": \"\",\n            \"A2010\": [],\n            \"A2011\": [],\n            \"B2010\": [],\n            \"id\": [],\n            \"year\": [],\n            \"A\": [],\n            \"B\": [],\n        }\n        expected = pd.DataFrame(exp_data).astype({\"year\": \"int\"})\n        expected = expected.set_index([\"id\", \"year\"])[\n            [\"X\", \"A2010\", \"A2011\", \"B2010\", \"A\", \"B\"]\n        ]\n        expected.index.set_levels([0, 1], level=0, inplace=True)\n        result = wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\", sep=sep)\n        tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))",
        "begin_line": 708,
        "end_line": 736,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_num_string_disambiguation#738",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_num_string_disambiguation(self)",
        "snippet": "    def test_num_string_disambiguation(self):\n        # Test that we can disambiguate number value_vars from\n        # string value_vars\n        df = pd.DataFrame(\n            {\n                \"A11\": [\"a11\", \"a22\", \"a33\"],\n                \"A12\": [\"a21\", \"a22\", \"a23\"],\n                \"B11\": [\"b11\", \"b12\", \"b13\"],\n                \"B12\": [\"b21\", \"b22\", \"b23\"],\n                \"BB11\": [1, 2, 3],\n                \"BB12\": [4, 5, 6],\n                \"Arating\": [91, 92, 93],\n                \"Arating_old\": [91, 92, 93],\n            }\n        )\n        df[\"id\"] = df.index\n        expected = pd.DataFrame(\n            {\n                \"Arating\": [91, 92, 93, 91, 92, 93],\n                \"Arating_old\": [91, 92, 93, 91, 92, 93],\n                \"A\": [\"a11\", \"a22\", \"a33\", \"a21\", \"a22\", \"a23\"],\n                \"B\": [\"b11\", \"b12\", \"b13\", \"b21\", \"b22\", \"b23\"],\n                \"BB\": [1, 2, 3, 4, 5, 6],\n                \"id\": [0, 1, 2, 0, 1, 2],\n                \"year\": [11, 11, 11, 12, 12, 12],\n            }\n        )\n        expected = expected.set_index([\"id\", \"year\"])[\n            [\"Arating\", \"Arating_old\", \"A\", \"B\", \"BB\"]\n        ]\n        result = wide_to_long(df, [\"A\", \"B\", \"BB\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))",
        "begin_line": 738,
        "end_line": 769,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_suffixtype#771",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_invalid_suffixtype(self)",
        "snippet": "    def test_invalid_suffixtype(self):\n        # If all stubs names end with a string, but a numeric suffix is\n        # assumed,  an empty data frame is returned\n        df = pd.DataFrame(\n            {\n                \"Aone\": [1.0, 2.0],\n                \"Atwo\": [3.0, 4.0],\n                \"Bone\": [5.0, 6.0],\n                \"X\": [\"X1\", \"X2\"],\n            }\n        )\n        df[\"id\"] = df.index\n        exp_data = {\n            \"X\": \"\",\n            \"Aone\": [],\n            \"Atwo\": [],\n            \"Bone\": [],\n            \"id\": [],\n            \"year\": [],\n            \"A\": [],\n            \"B\": [],\n        }\n        expected = pd.DataFrame(exp_data).astype({\"year\": \"int\"})\n\n        expected = expected.set_index([\"id\", \"year\"])\n        expected.index.set_levels([0, 1], level=0, inplace=True)\n        result = wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n        tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))",
        "begin_line": 771,
        "end_line": 798,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_multiple_id_columns#800",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_multiple_id_columns(self)",
        "snippet": "    def test_multiple_id_columns(self):\n        # Taken from http://www.ats.ucla.edu/stat/stata/modules/reshapel.htm\n        df = pd.DataFrame(\n            {\n                \"famid\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"birth\": [1, 2, 3, 1, 2, 3, 1, 2, 3],\n                \"ht1\": [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n                \"ht2\": [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9],\n            }\n        )\n        expected = pd.DataFrame(\n            {\n                \"ht\": [\n                    2.8,\n                    3.4,\n                    2.9,\n                    3.8,\n                    2.2,\n                    2.9,\n                    2.0,\n                    3.2,\n                    1.8,\n                    2.8,\n                    1.9,\n                    2.4,\n                    2.2,\n                    3.3,\n                    2.3,\n                    3.4,\n                    2.1,\n                    2.9,\n                ],\n                \"famid\": [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3],\n                \"birth\": [1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, 3, 3],\n                \"age\": [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n            }\n        )\n        expected = expected.set_index([\"famid\", \"birth\", \"age\"])[[\"ht\"]]\n        result = wide_to_long(df, \"ht\", i=[\"famid\", \"birth\"], j=\"age\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 800,
        "end_line": 839,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_non_unique_idvars#841",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_non_unique_idvars(self)",
        "snippet": "    def test_non_unique_idvars(self):\n        # GH16382\n        # Raise an error message if non unique id vars (i) are passed\n        df = pd.DataFrame(\n            {\"A_A1\": [1, 2, 3, 4, 5], \"B_B1\": [1, 2, 3, 4, 5], \"x\": [1, 1, 1, 1, 1]}\n        )\n        msg = \"the id variables need to uniquely identify each row\"\n        with pytest.raises(ValueError, match=msg):\n            wide_to_long(df, [\"A_A\", \"B_B\"], i=\"x\", j=\"colname\")",
        "begin_line": 841,
        "end_line": 849,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_cast_j_int#851",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_cast_j_int(self)",
        "snippet": "    def test_cast_j_int(self):\n        df = pd.DataFrame(\n            {\n                \"actor_1\": [\"CCH Pounder\", \"Johnny Depp\", \"Christoph Waltz\"],\n                \"actor_2\": [\"Joel David Moore\", \"Orlando Bloom\", \"Rory Kinnear\"],\n                \"actor_fb_likes_1\": [1000.0, 40000.0, 11000.0],\n                \"actor_fb_likes_2\": [936.0, 5000.0, 393.0],\n                \"title\": [\"Avatar\", \"Pirates of the Caribbean\", \"Spectre\"],\n            }\n        )\n\n        expected = pd.DataFrame(\n            {\n                \"actor\": [\n                    \"CCH Pounder\",\n                    \"Johnny Depp\",\n                    \"Christoph Waltz\",\n                    \"Joel David Moore\",\n                    \"Orlando Bloom\",\n                    \"Rory Kinnear\",\n                ],\n                \"actor_fb_likes\": [1000.0, 40000.0, 11000.0, 936.0, 5000.0, 393.0],\n                \"num\": [1, 1, 1, 2, 2, 2],\n                \"title\": [\n                    \"Avatar\",\n                    \"Pirates of the Caribbean\",\n                    \"Spectre\",\n                    \"Avatar\",\n                    \"Pirates of the Caribbean\",\n                    \"Spectre\",\n                ],\n            }\n        ).set_index([\"title\", \"num\"])\n        result = wide_to_long(\n            df, [\"actor\", \"actor_fb_likes\"], i=\"title\", j=\"num\", sep=\"_\"\n        )\n\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 851,
        "end_line": 888,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_identical_stubnames#890",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_identical_stubnames(self)",
        "snippet": "    def test_identical_stubnames(self):\n        df = pd.DataFrame(\n            {\n                \"A2010\": [1.0, 2.0],\n                \"A2011\": [3.0, 4.0],\n                \"B2010\": [5.0, 6.0],\n                \"A\": [\"X1\", \"X2\"],\n            }\n        )\n        msg = \"stubname can't be identical to a column name\"\n        with pytest.raises(ValueError, match=msg):\n            wide_to_long(df, [\"A\", \"B\"], i=\"A\", j=\"colname\")",
        "begin_line": 890,
        "end_line": 901,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_nonnumeric_suffix#903",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_nonnumeric_suffix(self)",
        "snippet": "    def test_nonnumeric_suffix(self):\n        df = pd.DataFrame(\n            {\n                \"treatment_placebo\": [1.0, 2.0],\n                \"treatment_test\": [3.0, 4.0],\n                \"result_placebo\": [5.0, 6.0],\n                \"A\": [\"X1\", \"X2\"],\n            }\n        )\n        expected = pd.DataFrame(\n            {\n                \"A\": [\"X1\", \"X1\", \"X2\", \"X2\"],\n                \"colname\": [\"placebo\", \"test\", \"placebo\", \"test\"],\n                \"result\": [5.0, np.nan, 6.0, np.nan],\n                \"treatment\": [1.0, 3.0, 2.0, 4.0],\n            }\n        )\n        expected = expected.set_index([\"A\", \"colname\"])\n        result = wide_to_long(\n            df, [\"result\", \"treatment\"], i=\"A\", j=\"colname\", suffix=\"[a-z]+\", sep=\"_\"\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 903,
        "end_line": 924,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_mixed_type_suffix#926",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_mixed_type_suffix(self)",
        "snippet": "    def test_mixed_type_suffix(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [\"X1\", \"X2\"],\n                \"result_1\": [0, 9],\n                \"result_foo\": [5.0, 6.0],\n                \"treatment_1\": [1.0, 2.0],\n                \"treatment_foo\": [3.0, 4.0],\n            }\n        )\n        expected = pd.DataFrame(\n            {\n                \"A\": [\"X1\", \"X2\", \"X1\", \"X2\"],\n                \"colname\": [\"1\", \"1\", \"foo\", \"foo\"],\n                \"result\": [0.0, 9.0, 5.0, 6.0],\n                \"treatment\": [1.0, 2.0, 3.0, 4.0],\n            }\n        ).set_index([\"A\", \"colname\"])\n        result = wide_to_long(\n            df, [\"result\", \"treatment\"], i=\"A\", j=\"colname\", suffix=\".+\", sep=\"_\"\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 926,
        "end_line": 947,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_float_suffix#949",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_float_suffix(self)",
        "snippet": "    def test_float_suffix(self):\n        df = pd.DataFrame(\n            {\n                \"treatment_1.1\": [1.0, 2.0],\n                \"treatment_2.1\": [3.0, 4.0],\n                \"result_1.2\": [5.0, 6.0],\n                \"result_1\": [0, 9],\n                \"A\": [\"X1\", \"X2\"],\n            }\n        )\n        expected = pd.DataFrame(\n            {\n                \"A\": [\"X1\", \"X1\", \"X1\", \"X1\", \"X2\", \"X2\", \"X2\", \"X2\"],\n                \"colname\": [1, 1.1, 1.2, 2.1, 1, 1.1, 1.2, 2.1],\n                \"result\": [0.0, np.nan, 5.0, np.nan, 9.0, np.nan, 6.0, np.nan],\n                \"treatment\": [np.nan, 1.0, np.nan, 3.0, np.nan, 2.0, np.nan, 4.0],\n            }\n        )\n        expected = expected.set_index([\"A\", \"colname\"])\n        result = wide_to_long(\n            df, [\"result\", \"treatment\"], i=\"A\", j=\"colname\", suffix=\"[0-9.]+\", sep=\"_\"\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 949,
        "end_line": 971,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reshape.test_melt.TestWideToLong.test_col_substring_of_stubname#973",
        "src_path": "pandas/tests/reshape/test_melt.py",
        "class_name": "pandas.tests.reshape.test_melt.TestWideToLong",
        "signature": "pandas.tests.reshape.test_melt.TestWideToLong.test_col_substring_of_stubname(self)",
        "snippet": "    def test_col_substring_of_stubname(self):\n        # GH22468\n        # Don't raise ValueError when a column name is a substring\n        # of a stubname that's been passed as a string\n        wide_data = {\n            \"node_id\": {0: 0, 1: 1, 2: 2, 3: 3, 4: 4},\n            \"A\": {0: 0.80, 1: 0.0, 2: 0.25, 3: 1.0, 4: 0.81},\n            \"PA0\": {0: 0.74, 1: 0.56, 2: 0.56, 3: 0.98, 4: 0.6},\n            \"PA1\": {0: 0.77, 1: 0.64, 2: 0.52, 3: 0.98, 4: 0.67},\n            \"PA3\": {0: 0.34, 1: 0.70, 2: 0.52, 3: 0.98, 4: 0.67},\n        }\n        wide_df = pd.DataFrame.from_dict(wide_data)\n        expected = pd.wide_to_long(\n            wide_df, stubnames=[\"PA\"], i=[\"node_id\", \"A\"], j=\"time\"\n        )\n        result = pd.wide_to_long(wide_df, stubnames=\"PA\", i=[\"node_id\", \"A\"], j=\"time\")\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 973,
        "end_line": 989,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#187",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 187,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    }
]