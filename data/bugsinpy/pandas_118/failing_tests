coverage run -m pytest pandas/tests/reshape/test_melt.py::TestMelt::test_melt_mixed_int_str_id_vars
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/reshape/test_melt.py F                                      [100%]

=================================== FAILURES ===================================
___________________ TestMelt.test_melt_mixed_int_str_id_vars ___________________

self = <pandas.tests.reshape.test_melt.TestMelt object at 0x7f69fa18c3a0>

    def test_melt_mixed_int_str_id_vars(self):
        # GH 29718
        df = DataFrame({0: ["foo"], "a": ["bar"], "b": [1], "d": [2]})
>       result = melt(df, id_vars=[0, "a"], value_vars=["b", "d"])

pandas/tests/reshape/test_melt.py:323: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

frame =      0    a  b  d
0  foo  bar  1  2, id_vars = [0, 'a']
value_vars = ['b', 'd'], var_name = None, value_name = 'value', col_level = None

    @Appender(
        _shared_docs["melt"]
        % dict(caller="pd.melt(df, ", versionadded="", other="DataFrame.melt")
    )
    def melt(
        frame: DataFrame,
        id_vars=None,
        value_vars=None,
        var_name=None,
        value_name="value",
        col_level=None,
    ) -> DataFrame:
        # TODO: what about the existing index?
        # If multiindex, gather names of columns on all level for checking presence
        # of `id_vars` and `value_vars`
        if isinstance(frame.columns, ABCMultiIndex):
            cols = [x for c in frame.columns for x in c]
        else:
            cols = list(frame.columns)
    
        if id_vars is not None:
            if not is_list_like(id_vars):
                id_vars = [id_vars]
            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):
                raise ValueError(
                    "id_vars must be a list of tuples when columns are a MultiIndex"
                )
            else:
                # Check that `id_vars` are in frame
                id_vars = list(id_vars)
                missing = Index(np.ravel(id_vars)).difference(cols)
                if not missing.empty:
>                   raise KeyError(
                        "The following 'id_vars' are not present"
                        " in the DataFrame: {missing}"
                        "".format(missing=list(missing))
                    )
E                   KeyError: "The following 'id_vars' are not present in the DataFrame: ['0']"

pandas/core/reshape/melt.py:52: KeyError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/test_melt.py::TestMelt::test_melt_mixed_int_str_id_vars
============================== 1 failed in 0.47s ===============================

coverage run -m pytest pandas/tests/reshape/test_melt.py::TestMelt::test_melt_mixed_int_str_value_vars
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/reshape/test_melt.py F                                      [100%]

=================================== FAILURES ===================================
_________________ TestMelt.test_melt_mixed_int_str_value_vars __________________

self = <pandas.tests.reshape.test_melt.TestMelt object at 0x7f954477d3a0>

    def test_melt_mixed_int_str_value_vars(self):
        # GH 29718
        df = DataFrame({0: ["foo"], "a": ["bar"]})
>       result = melt(df, value_vars=[0, "a"])

pandas/tests/reshape/test_melt.py:332: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

frame =      0    a
0  foo  bar, id_vars = [], value_vars = [0, 'a']
var_name = None, value_name = 'value', col_level = None

    @Appender(
        _shared_docs["melt"]
        % dict(caller="pd.melt(df, ", versionadded="", other="DataFrame.melt")
    )
    def melt(
        frame: DataFrame,
        id_vars=None,
        value_vars=None,
        var_name=None,
        value_name="value",
        col_level=None,
    ) -> DataFrame:
        # TODO: what about the existing index?
        # If multiindex, gather names of columns on all level for checking presence
        # of `id_vars` and `value_vars`
        if isinstance(frame.columns, ABCMultiIndex):
            cols = [x for c in frame.columns for x in c]
        else:
            cols = list(frame.columns)
    
        if id_vars is not None:
            if not is_list_like(id_vars):
                id_vars = [id_vars]
            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):
                raise ValueError(
                    "id_vars must be a list of tuples when columns are a MultiIndex"
                )
            else:
                # Check that `id_vars` are in frame
                id_vars = list(id_vars)
                missing = Index(np.ravel(id_vars)).difference(cols)
                if not missing.empty:
                    raise KeyError(
                        "The following 'id_vars' are not present"
                        " in the DataFrame: {missing}"
                        "".format(missing=list(missing))
                    )
        else:
            id_vars = []
    
        if value_vars is not None:
            if not is_list_like(value_vars):
                value_vars = [value_vars]
            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(
                value_vars, list
            ):
                raise ValueError(
                    "value_vars must be a list of tuples when columns are a MultiIndex"
                )
            else:
                value_vars = list(value_vars)
                # Check that `value_vars` are in frame
                missing = Index(np.ravel(value_vars)).difference(cols)
                if not missing.empty:
>                   raise KeyError(
                        "The following 'value_vars' are not present in"
                        " the DataFrame: {missing}"
                        "".format(missing=list(missing))
                    )
E                   KeyError: "The following 'value_vars' are not present in the DataFrame: ['0']"

pandas/core/reshape/melt.py:74: KeyError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/test_melt.py::TestMelt::test_melt_mixed_int_str_value_vars
============================== 1 failed in 0.42s ===============================
