coverage run -m pytest test/units/galaxy/test_collection.py::test_verify_collections_no_version
============================= test session starts ==============================
platform linux -- Python 3.6.9, pytest-3.10.1, py-1.11.0, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/ansible, inifile:
collected 1 item

test/units/galaxy/test_collection.py F                                   [100%]

=================================== FAILURES ===================================
______________________ test_verify_collections_no_version ______________________

mock_isdir = <MagicMock name='isdir' id='140475934349464'>
mock_collection = <function mock_collection.<locals>.create_mock_collection at 0x7fc318f24ae8>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fc31a2a9128>

    @patch.object(os.path, 'isdir', return_value=True)
    def test_verify_collections_no_version(mock_isdir, mock_collection, monkeypatch):
        namespace = 'ansible_namespace'
        name = 'collection'
        version = '*'  # Occurs if MANIFEST.json does not exist
    
        local_collection = mock_collection(namespace=namespace, name=name, version=version)
        monkeypatch.setattr(collection.CollectionRequirement, 'from_path', MagicMock(return_value=local_collection))
    
        collections = [('%s.%s' % (namespace, name), version, None)]
    
        with pytest.raises(AnsibleError) as err:
>           collection.verify_collections(collections, './', local_collection.api, False, False)

test/units/galaxy/test_collection.py:1169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/e91cde33ffcafb3e40ee0f44cab38afc/lib/python3.6/site-packages/ansible_base-2.10.0.dev0-py3.6.egg/ansible/galaxy/collection.py:679: in verify_collections
    allow_pre_release=allow_pre_release)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

collection = 'ansible_namespace.collection'
apis = <ansible.galaxy.api.GalaxyAPI object at 0x7fc31a2a9160>
requirement = '*', force = False, parent = None, allow_pre_release = False

    @staticmethod
    def from_name(collection, apis, requirement, force, parent=None, allow_pre_release=False):
        namespace, name = collection.split('.', 1)
        galaxy_meta = None
    
>       for api in apis:
E       TypeError: 'GalaxyAPI' object is not iterable

/opt/conda/envs/e91cde33ffcafb3e40ee0f44cab38afc/lib/python3.6/site-packages/ansible_base-2.10.0.dev0-py3.6.egg/ansible/galaxy/collection.py:442: TypeError
=========================== 1 failed in 1.45 seconds ===========================
