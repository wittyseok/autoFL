coverage run -m pytest tests/keras/engine/test_training.py::test_sample_weights
============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 -- /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python
cachedir: .pytest_cache
rootdir: /home/user/BugsInPy/temp/projects/keras, inifile: pytest.ini
plugins: forked-1.1.3, flaky-3.6.1, xdist-1.32.0
gw0 I / gw1 I

[gw0] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw1] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw0] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]

[gw1] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]
gw0 [1] / gw1 [1]

scheduling tests via LoadScheduling

tests/keras/engine/test_training.py::test_sample_weights 
[gw0] [100%] FAILED tests/keras/engine/test_training.py::test_sample_weights 

=================================== FAILURES ===================================
_____________________________ test_sample_weights ______________________________
[gw0] linux -- Python 3.7.3 /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/bin/python

    def test_sample_weights():
        y = np.array([0, 1, 0, 0, 2])
        sample_weights = np.array([0.5, 1., 1., 0., 2.])
        class_weights = {0: 0.5, 1: 1., 2: 1.5}
    
        # Only `sample_weights`.
        weights = training_utils.standardize_weights(y, sample_weights)
        assert np.allclose(weights, sample_weights)
    
        # Only `class_weights`.
>       weights = training_utils.standardize_weights(y, class_weight=class_weights)

tests/keras/engine/test_training.py:1588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

y = array([0, 1, 0, 0, 2]), sample_weight = None
class_weight = {0: 0.5, 1: 1.0, 2: 1.5}, sample_weight_mode = None

    def standardize_weights(y,
                            sample_weight=None,
                            class_weight=None,
                            sample_weight_mode=None):
        """Performs sample weight validation and standardization.
    
        Everything gets normalized to a single sample-wise (or timestep-wise)
        weight array.
    
        # Arguments
            y: Numpy array of model targets to be weighted.
            sample_weight: User-provided `sample_weight` argument.
            class_weight: User-provided `class_weight` argument.
            sample_weight_mode: One of `None` or `"temporal"`.
                `"temporal"` indicated that we expect 2D weight data
                that will be applied to the last 2 dimensions of
                the targets (i.e. we are weighting timesteps, not samples).
    
        # Returns
            A Numpy array of target weights, one entry per sample to weight.
    
        # Raises
            ValueError: In case of invalid user-provided arguments.
        """
        if sample_weight_mode is not None:
            if sample_weight_mode != 'temporal':
                raise ValueError('"sample_weight_mode '
                                 'should be None or "temporal". '
                                 'Found: ' + str(sample_weight_mode))
            if len(y.shape) < 3:
                raise ValueError('Found a sample_weight array for '
                                 'an input with shape ' +
                                 str(y.shape) + '. '
                                 'Timestep-wise sample weighting (use of '
                                 'sample_weight_mode="temporal") is restricted to '
                                 'outputs that are at least 3D, i.e. that have '
                                 'a time dimension.')
            if sample_weight is not None and len(sample_weight.shape) != 2:
                raise ValueError('Found a sample_weight array with shape ' +
                                 str(sample_weight.shape) + '. '
                                 'In order to use timestep-wise sample weighting, '
                                 'you should pass a 2D sample_weight array.')
        else:
            if sample_weight is not None and len(sample_weight.shape) != 1:
                raise ValueError('Found a sample_weight array with shape ' +
                                 str(sample_weight.shape) + '. '
                                 'In order to use timestep-wise sample weights, '
                                 'you should specify '
                                 'sample_weight_mode="temporal" '
                                 'in compile(). If you just mean to use '
                                 'sample-wise weights, make sure your '
                                 'sample_weight array is 1D.')
    
        if sample_weight is not None and class_weight is not None:
            warnings.warn('Found both `sample_weight` and `class_weight`: '
                          '`class_weight` argument will be ignored.')
    
        if sample_weight is not None:
            if len(sample_weight.shape) > len(y.shape):
                raise ValueError('Found a sample_weight with shape' +
                                 str(sample_weight.shape) + '.'
                                 'Expected sample_weight with rank '
                                 'less than or equal to ' + str(len(y.shape)))
    
            if y.shape[:sample_weight.ndim] != sample_weight.shape:
                raise ValueError('Found a sample_weight array with shape ' +
                                 str(sample_weight.shape) +
                                 ' for an input with shape ' +
                                 str(y.shape) + '. '
                                 'sample_weight cannot be broadcast.')
            return sample_weight
        elif isinstance(class_weight, dict):
            if len(y.shape) > 2:
                raise ValueError('`class_weight` not supported for '
                                 '3+ dimensional targets.')
>           if y.shape[1] > 1:
E           IndexError: tuple index out of range

keras/engine/training_utils.py:503: IndexError
--------------------------- Captured stderr teardown ---------------------------
WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:95: The name tf.reset_default_graph is deprecated. Please use tf.compat.v1.reset_default_graph instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:98: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.

WARNING:tensorflow:From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:102: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.

---------------------------- Captured log teardown -----------------------------
WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:95: The name tf.reset_default_graph is deprecated. Please use tf.compat.v1.reset_default_graph instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:98: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.

WARNING  tensorflow:module_wrapper.py:139 From /home/user/BugsInPy/temp/projects/keras/keras/backend/tensorflow_backend.py:102: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.
=============================== warnings summary ===============================
/opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26
  /opt/conda/envs/ec1239e90de2b89d455019719a3688a0/lib/python3.7/site-packages/tensorflow_core/contrib/learn/python/learn/learn_io/generator_io.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    from collections import Container

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== slowest 20 test durations ===========================

(0.00 durations hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/keras/engine/test_training.py::test_sample_weights - IndexError:...
========================= 1 failed, 1 warning in 2.58s =========================
Using TensorFlow backend.
