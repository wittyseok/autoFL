coverage run -m pytest pandas/tests/test_expressions.py::TestExpressions::test_frame_series_axis
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 12 items

pandas/tests/test_expressions.py ......FFF.Fx                            [100%]

=================================== FAILURES ===================================
________________ TestExpressions.test_frame_series_axis[1-add] _________________

self = <pandas.tests.test_expressions.TestExpressions object at 0x7f65e29ebca0>
axis = 1, arith = 'add'

    @pytest.mark.parametrize(
        "arith", ("add", "sub", "mul", "mod", "truediv", "floordiv")
    )
    @pytest.mark.parametrize("axis", (0, 1))
    def test_frame_series_axis(self, axis, arith):
        # GH#26736 Dataframe.floordiv(Series, axis=1) fails
        if axis == 1 and arith == "floordiv":
            pytest.xfail("'floordiv' does not succeed with axis=1 #27636")
    
        df = self.frame
        if axis == 1:
            other = self.frame.iloc[0, :]
        else:
            other = self.frame.iloc[:, 0]
    
        expr._MIN_ELEMENTS = 0
    
        op_func = getattr(df, arith)
    
        expr.set_use_numexpr(False)
        expected = op_func(other, axis=axis)
        expr.set_use_numexpr(True)
    
>       result = op_func(other, axis=axis)

pandas/tests/test_expressions.py:457: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:1010: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:910: in _combine_series_frame
    return self._combine_match_columns(other, func, level=level)
pandas/core/frame.py:5332: in _combine_match_columns
    return ops.dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:515: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:124: in _evaluate_numexpr
    result = _evaluate_standard(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:503: in column_op
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:503: in <dictcomp>
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/array_ops.py:121: in na_op
    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:101: in _evaluate_numexpr
    if _can_use_numexpr(op, op_str, a, b, "evaluate"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function add>, op_str = '+'
a = 0      -0.725011
1      -1.563514
2      -0.464110
3      -0.247253
4       0.367370
          ...   
9995    1.172999
9996   -0.715449
9997   -0.694618
9998   -0.423903
9999    0.205281
Name: A, Length: 10000, dtype: float64
b = -0.7250105319457045, dtype_check = 'evaluate'

    def _can_use_numexpr(op, op_str, a, b, dtype_check):
        """ return a boolean if we WILL be using numexpr """
        if op_str is not None:
    
            # required min elements (otherwise we are adding overhead)
            if np.prod(a.shape) > _MIN_ELEMENTS:
    
                # check for dtype compatibility
                dtypes = set()
                for o in [a, b]:
                    if hasattr(o, "dtypes"):
>                       s = o.dtypes.value_counts()
E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'

pandas/core/computation/expressions.py:84: AttributeError
________________ TestExpressions.test_frame_series_axis[1-sub] _________________

self = <pandas.tests.test_expressions.TestExpressions object at 0x7f65e279d250>
axis = 1, arith = 'sub'

    @pytest.mark.parametrize(
        "arith", ("add", "sub", "mul", "mod", "truediv", "floordiv")
    )
    @pytest.mark.parametrize("axis", (0, 1))
    def test_frame_series_axis(self, axis, arith):
        # GH#26736 Dataframe.floordiv(Series, axis=1) fails
        if axis == 1 and arith == "floordiv":
            pytest.xfail("'floordiv' does not succeed with axis=1 #27636")
    
        df = self.frame
        if axis == 1:
            other = self.frame.iloc[0, :]
        else:
            other = self.frame.iloc[:, 0]
    
        expr._MIN_ELEMENTS = 0
    
        op_func = getattr(df, arith)
    
        expr.set_use_numexpr(False)
        expected = op_func(other, axis=axis)
        expr.set_use_numexpr(True)
    
>       result = op_func(other, axis=axis)

pandas/tests/test_expressions.py:457: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:1010: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:910: in _combine_series_frame
    return self._combine_match_columns(other, func, level=level)
pandas/core/frame.py:5332: in _combine_match_columns
    return ops.dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:515: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:124: in _evaluate_numexpr
    result = _evaluate_standard(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:503: in column_op
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:503: in <dictcomp>
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/array_ops.py:121: in na_op
    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:101: in _evaluate_numexpr
    if _can_use_numexpr(op, op_str, a, b, "evaluate"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function sub>, op_str = '-'
a = 0      -0.725011
1      -1.563514
2      -0.464110
3      -0.247253
4       0.367370
          ...   
9995    1.172999
9996   -0.715449
9997   -0.694618
9998   -0.423903
9999    0.205281
Name: A, Length: 10000, dtype: float64
b = -0.7250105319457045, dtype_check = 'evaluate'

    def _can_use_numexpr(op, op_str, a, b, dtype_check):
        """ return a boolean if we WILL be using numexpr """
        if op_str is not None:
    
            # required min elements (otherwise we are adding overhead)
            if np.prod(a.shape) > _MIN_ELEMENTS:
    
                # check for dtype compatibility
                dtypes = set()
                for o in [a, b]:
                    if hasattr(o, "dtypes"):
>                       s = o.dtypes.value_counts()
E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'

pandas/core/computation/expressions.py:84: AttributeError
________________ TestExpressions.test_frame_series_axis[1-mul] _________________

self = <pandas.tests.test_expressions.TestExpressions object at 0x7f65e2493370>
axis = 1, arith = 'mul'

    @pytest.mark.parametrize(
        "arith", ("add", "sub", "mul", "mod", "truediv", "floordiv")
    )
    @pytest.mark.parametrize("axis", (0, 1))
    def test_frame_series_axis(self, axis, arith):
        # GH#26736 Dataframe.floordiv(Series, axis=1) fails
        if axis == 1 and arith == "floordiv":
            pytest.xfail("'floordiv' does not succeed with axis=1 #27636")
    
        df = self.frame
        if axis == 1:
            other = self.frame.iloc[0, :]
        else:
            other = self.frame.iloc[:, 0]
    
        expr._MIN_ELEMENTS = 0
    
        op_func = getattr(df, arith)
    
        expr.set_use_numexpr(False)
        expected = op_func(other, axis=axis)
        expr.set_use_numexpr(True)
    
>       result = op_func(other, axis=axis)

pandas/tests/test_expressions.py:457: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:1010: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:910: in _combine_series_frame
    return self._combine_match_columns(other, func, level=level)
pandas/core/frame.py:5332: in _combine_match_columns
    return ops.dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:515: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:124: in _evaluate_numexpr
    result = _evaluate_standard(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:503: in column_op
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:503: in <dictcomp>
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/array_ops.py:121: in na_op
    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:101: in _evaluate_numexpr
    if _can_use_numexpr(op, op_str, a, b, "evaluate"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function mul>, op_str = '*'
a = 0      -0.725011
1      -1.563514
2      -0.464110
3      -0.247253
4       0.367370
          ...   
9995    1.172999
9996   -0.715449
9997   -0.694618
9998   -0.423903
9999    0.205281
Name: A, Length: 10000, dtype: float64
b = -0.7250105319457045, dtype_check = 'evaluate'

    def _can_use_numexpr(op, op_str, a, b, dtype_check):
        """ return a boolean if we WILL be using numexpr """
        if op_str is not None:
    
            # required min elements (otherwise we are adding overhead)
            if np.prod(a.shape) > _MIN_ELEMENTS:
    
                # check for dtype compatibility
                dtypes = set()
                for o in [a, b]:
                    if hasattr(o, "dtypes"):
>                       s = o.dtypes.value_counts()
E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'

pandas/core/computation/expressions.py:84: AttributeError
______________ TestExpressions.test_frame_series_axis[1-truediv] _______________

self = <pandas.tests.test_expressions.TestExpressions object at 0x7f65e26b6370>
axis = 1, arith = 'truediv'

    @pytest.mark.parametrize(
        "arith", ("add", "sub", "mul", "mod", "truediv", "floordiv")
    )
    @pytest.mark.parametrize("axis", (0, 1))
    def test_frame_series_axis(self, axis, arith):
        # GH#26736 Dataframe.floordiv(Series, axis=1) fails
        if axis == 1 and arith == "floordiv":
            pytest.xfail("'floordiv' does not succeed with axis=1 #27636")
    
        df = self.frame
        if axis == 1:
            other = self.frame.iloc[0, :]
        else:
            other = self.frame.iloc[:, 0]
    
        expr._MIN_ELEMENTS = 0
    
        op_func = getattr(df, arith)
    
        expr.set_use_numexpr(False)
        expected = op_func(other, axis=axis)
        expr.set_use_numexpr(True)
    
>       result = op_func(other, axis=axis)

pandas/tests/test_expressions.py:457: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/ops/__init__.py:1010: in f
    return _combine_series_frame(
pandas/core/ops/__init__.py:910: in _combine_series_frame
    return self._combine_match_columns(other, func, level=level)
pandas/core/frame.py:5332: in _combine_match_columns
    return ops.dispatch_to_series(left, right, func, axis="columns")
pandas/core/ops/__init__.py:515: in dispatch_to_series
    new_data = expressions.evaluate(column_op, str_rep, left, right)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:124: in _evaluate_numexpr
    result = _evaluate_standard(op, op_str, a, b)
pandas/core/computation/expressions.py:70: in _evaluate_standard
    return op(a, b)
pandas/core/ops/__init__.py:503: in column_op
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/__init__.py:503: in <dictcomp>
    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}
pandas/core/ops/array_ops.py:121: in na_op
    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)
pandas/core/computation/expressions.py:220: in evaluate
    return _evaluate(op, op_str, a, b, **eval_kwargs)
pandas/core/computation/expressions.py:101: in _evaluate_numexpr
    if _can_use_numexpr(op, op_str, a, b, "evaluate"):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

op = <built-in function truediv>, op_str = '/'
a = 0      -0.725011
1      -1.563514
2      -0.464110
3      -0.247253
4       0.367370
          ...   
9995    1.172999
9996   -0.715449
9997   -0.694618
9998   -0.423903
9999    0.205281
Name: A, Length: 10000, dtype: float64
b = -0.7250105319457045, dtype_check = 'evaluate'

    def _can_use_numexpr(op, op_str, a, b, dtype_check):
        """ return a boolean if we WILL be using numexpr """
        if op_str is not None:
    
            # required min elements (otherwise we are adding overhead)
            if np.prod(a.shape) > _MIN_ELEMENTS:
    
                # check for dtype compatibility
                dtypes = set()
                for o in [a, b]:
                    if hasattr(o, "dtypes"):
>                       s = o.dtypes.value_counts()
E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'

pandas/core/computation/expressions.py:84: AttributeError
=========================== short test summary info ============================
FAILED pandas/tests/test_expressions.py::TestExpressions::test_frame_series_axis[1-add]
FAILED pandas/tests/test_expressions.py::TestExpressions::test_frame_series_axis[1-sub]
FAILED pandas/tests/test_expressions.py::TestExpressions::test_frame_series_axis[1-mul]
FAILED pandas/tests/test_expressions.py::TestExpressions::test_frame_series_axis[1-truediv]
==================== 4 failed, 7 passed, 1 xfailed in 1.51s ====================
