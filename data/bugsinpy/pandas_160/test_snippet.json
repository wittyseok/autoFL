[
    {
        "name": "pandas.tests.test_expressions.TestExpressions.setup_method#47",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n\n        self.frame = _frame.copy()\n        self.frame2 = _frame2.copy()\n        self.mixed = _mixed.copy()\n        self.mixed2 = _mixed2.copy()\n        self.integer = _integer.copy()\n        self._MIN_ELEMENTS = expr._MIN_ELEMENTS",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.teardown_method#56",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.teardown_method(self, method)",
        "snippet": "    def teardown_method(self, method):\n        expr._MIN_ELEMENTS = self._MIN_ELEMENTS",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.run_arithmetic#59",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.run_arithmetic(self, df, other, assert_func, check_dtype=False, test_flex=True)",
        "snippet": "    def run_arithmetic(self, df, other, assert_func, check_dtype=False, test_flex=True):\n        expr._MIN_ELEMENTS = 0\n        operations = [\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\"]\n        for arith in operations:\n\n            operator_name = arith\n            if arith == \"div\":\n                operator_name = \"truediv\"\n\n            if test_flex:\n                op = lambda x, y: getattr(x, arith)(y)\n                op.__name__ = arith\n            else:\n                op = getattr(operator, operator_name)\n            expr.set_use_numexpr(False)\n            expected = op(df, other)\n            expr.set_use_numexpr(True)\n\n            result = op(df, other)\n            try:\n                if check_dtype:\n                    if arith == \"truediv\":\n                        assert expected.dtype.kind == \"f\"\n                assert_func(expected, result)\n            except Exception:\n                pprint_thing(\"Failed test with operator {op.__name__!r}\".format(op=op))\n                raise",
        "begin_line": 59,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic#87",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic(self)",
        "snippet": "    def test_integer_arithmetic(self):\n        self.run_arithmetic(self.integer, self.integer, assert_frame_equal)\n        self.run_arithmetic(\n            self.integer.iloc[:, 0],\n            self.integer.iloc[:, 0],\n            assert_series_equal,\n            check_dtype=True,\n        )",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.run_binary#96",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.run_binary(self, df, other, assert_func, test_flex=False, numexpr_ops={'gt', 'lt', 'ge', 'le', 'eq', 'ne'})",
        "snippet": "    def run_binary(\n        self,\n        df,\n        other,\n        assert_func,\n        test_flex=False,\n        numexpr_ops={\"gt\", \"lt\", \"ge\", \"le\", \"eq\", \"ne\"},\n    ):\n        \"\"\"\n        tests solely that the result is the same whether or not numexpr is\n        enabled.  Need to test whether the function does the correct thing\n        elsewhere.\n        \"\"\"\n        expr._MIN_ELEMENTS = 0\n        expr.set_test_mode(True)\n        operations = [\"gt\", \"lt\", \"ge\", \"le\", \"eq\", \"ne\"]\n\n        for arith in operations:\n            if test_flex:\n                op = lambda x, y: getattr(df, arith)(y)\n                op.__name__ = arith\n            else:\n                op = getattr(operator, arith)\n            expr.set_use_numexpr(False)\n            expected = op(df, other)\n            expr.set_use_numexpr(True)\n            expr.get_test_result()\n            result = op(df, other)\n            used_numexpr = expr.get_test_result()\n            try:\n                if arith in numexpr_ops:\n                    assert used_numexpr, \"Did not use numexpr as expected.\"\n                else:\n                    assert not used_numexpr, \"Used numexpr unexpectedly.\"\n                assert_func(expected, result)\n            except Exception:\n                pprint_thing(\"Failed test with operation {arith!r}\".format(arith=arith))\n                pprint_thing(\"test_flex was {test_flex!r}\".format(test_flex=test_flex))\n                raise",
        "begin_line": 96,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.run_frame#136",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.run_frame(self, df, other, binary_comp=None, run_binary=True, **kwargs)",
        "snippet": "    def run_frame(self, df, other, binary_comp=None, run_binary=True, **kwargs):\n        self.run_arithmetic(df, other, assert_frame_equal, test_flex=False, **kwargs)\n        self.run_arithmetic(df, other, assert_frame_equal, test_flex=True, **kwargs)\n        if run_binary:\n            if binary_comp is None:\n                expr.set_use_numexpr(False)\n                binary_comp = other + 1\n                expr.set_use_numexpr(True)\n            self.run_binary(\n                df, binary_comp, assert_frame_equal, test_flex=False, **kwargs\n            )\n            self.run_binary(\n                df, binary_comp, assert_frame_equal, test_flex=True, **kwargs\n            )",
        "begin_line": 136,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.run_series#151",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.run_series(self, ser, other, binary_comp=None, **kwargs)",
        "snippet": "    def run_series(self, ser, other, binary_comp=None, **kwargs):\n        self.run_arithmetic(ser, other, assert_series_equal, test_flex=False, **kwargs)\n        self.run_arithmetic(ser, other, assert_almost_equal, test_flex=True, **kwargs)",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_frame#162",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_frame(self)",
        "snippet": "    def test_integer_arithmetic_frame(self):\n        self.run_frame(self.integer, self.integer)",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_series#165",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_series(self)",
        "snippet": "    def test_integer_arithmetic_series(self):\n        self.run_series(self.integer.iloc[:, 0], self.integer.iloc[:, 0])",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_float_arithemtic_frame#168",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_float_arithemtic_frame(self)",
        "snippet": "    def test_float_arithemtic_frame(self):\n        self.run_frame(self.frame2, self.frame2)",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_float_arithmetic_series#171",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_float_arithmetic_series(self)",
        "snippet": "    def test_float_arithmetic_series(self):\n        self.run_series(self.frame2.iloc[:, 0], self.frame2.iloc[:, 0])",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_frame#174",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_frame(self)",
        "snippet": "    def test_mixed_arithmetic_frame(self):\n        # TODO: FIGURE OUT HOW TO GET IT TO WORK...\n        # can't do arithmetic because comparison methods try to do *entire*\n        # frame instead of by-column\n        self.run_frame(self.mixed2, self.mixed2, run_binary=False)",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_series#180",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_series(self)",
        "snippet": "    def test_mixed_arithmetic_series(self):\n        for col in self.mixed2.columns:\n            self.run_series(self.mixed2[col], self.mixed2[col], binary_comp=4)",
        "begin_line": 180,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_float_arithemtic#184",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_float_arithemtic(self)",
        "snippet": "    def test_float_arithemtic(self):\n        self.run_arithmetic(self.frame, self.frame, assert_frame_equal)\n        self.run_arithmetic(\n            self.frame.iloc[:, 0],\n            self.frame.iloc[:, 0],\n            assert_series_equal,\n            check_dtype=True,\n        )",
        "begin_line": 184,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic#193",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic(self)",
        "snippet": "    def test_mixed_arithmetic(self):\n        self.run_arithmetic(self.mixed, self.mixed, assert_frame_equal)\n        for col in self.mixed.columns:\n            self.run_arithmetic(self.mixed[col], self.mixed[col], assert_series_equal)",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_integer_with_zeros#198",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_integer_with_zeros(self)",
        "snippet": "    def test_integer_with_zeros(self):\n        self.integer *= np.random.randint(0, 2, size=np.shape(self.integer))\n        self.run_arithmetic(self.integer, self.integer, assert_frame_equal)\n        self.run_arithmetic(\n            self.integer.iloc[:, 0], self.integer.iloc[:, 0], assert_series_equal\n        )",
        "begin_line": 198,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_invalid#205",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_invalid(self)",
        "snippet": "    def test_invalid(self):\n\n        # no op\n        result = expr._can_use_numexpr(\n            operator.add, None, self.frame, self.frame, \"evaluate\"\n        )\n        assert not result\n\n        # mixed\n        result = expr._can_use_numexpr(\n            operator.add, \"+\", self.mixed, self.frame, \"evaluate\"\n        )\n        assert not result\n\n        # min elements\n        result = expr._can_use_numexpr(\n            operator.add, \"+\", self.frame2, self.frame2, \"evaluate\"\n        )\n        assert not result\n\n        # ok, we only check on first part of expression\n        result = expr._can_use_numexpr(\n            operator.add, \"+\", self.frame, self.frame2, \"evaluate\"\n        )\n        assert result",
        "begin_line": 205,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_binary_ops#231",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_binary_ops(self)",
        "snippet": "    def test_binary_ops(self):\n        def testit():\n\n            for f, f2 in [(self.frame, self.frame2), (self.mixed, self.mixed2)]:\n\n                for op, op_str in [\n                    (\"add\", \"+\"),\n                    (\"sub\", \"-\"),\n                    (\"mul\", \"*\"),\n                    (\"div\", \"/\"),\n                    (\"pow\", \"**\"),\n                ]:\n\n                    if op == \"pow\":\n                        continue\n\n                    if op == \"div\":\n                        op = getattr(operator, \"truediv\", None)\n                    else:\n                        op = getattr(operator, op, None)\n                    if op is not None:\n                        result = expr._can_use_numexpr(op, op_str, f, f, \"evaluate\")\n                        assert result != f._is_mixed_type\n\n                        result = expr.evaluate(op, op_str, f, f, use_numexpr=True)\n                        expected = expr.evaluate(op, op_str, f, f, use_numexpr=False)\n\n                        if isinstance(result, DataFrame):\n                            tm.assert_frame_equal(result, expected)\n                        else:\n                            tm.assert_numpy_array_equal(result, expected.values)\n\n                        result = expr._can_use_numexpr(op, op_str, f2, f2, \"evaluate\")\n                        assert not result\n\n        expr.set_use_numexpr(False)\n        testit()\n        expr.set_use_numexpr(True)\n        expr.set_numexpr_threads(1)\n        testit()\n        expr.set_numexpr_threads()\n        testit()",
        "begin_line": 231,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.testit#232",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.testit()",
        "snippet": "        def testit():\n\n            for f, f2 in [(self.frame, self.frame2), (self.mixed, self.mixed2)]:\n\n                for op, op_str in [\n                    (\"add\", \"+\"),\n                    (\"sub\", \"-\"),\n                    (\"mul\", \"*\"),\n                    (\"div\", \"/\"),\n                    (\"pow\", \"**\"),\n                ]:\n\n                    if op == \"pow\":\n                        continue\n\n                    if op == \"div\":\n                        op = getattr(operator, \"truediv\", None)\n                    else:\n                        op = getattr(operator, op, None)\n                    if op is not None:\n                        result = expr._can_use_numexpr(op, op_str, f, f, \"evaluate\")\n                        assert result != f._is_mixed_type\n\n                        result = expr.evaluate(op, op_str, f, f, use_numexpr=True)\n                        expected = expr.evaluate(op, op_str, f, f, use_numexpr=False)\n\n                        if isinstance(result, DataFrame):\n                            tm.assert_frame_equal(result, expected)\n                        else:\n                            tm.assert_numpy_array_equal(result, expected.values)\n\n                        result = expr._can_use_numexpr(op, op_str, f2, f2, \"evaluate\")\n                        assert not result",
        "begin_line": 232,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_boolean_ops#274",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_boolean_ops(self)",
        "snippet": "    def test_boolean_ops(self):\n        def testit():\n            for f, f2 in [(self.frame, self.frame2), (self.mixed, self.mixed2)]:\n\n                f11 = f\n                f12 = f + 1\n\n                f21 = f2\n                f22 = f2 + 1\n\n                for op, op_str in [\n                    (\"gt\", \">\"),\n                    (\"lt\", \"<\"),\n                    (\"ge\", \">=\"),\n                    (\"le\", \"<=\"),\n                    (\"eq\", \"==\"),\n                    (\"ne\", \"!=\"),\n                ]:\n\n                    op = getattr(operator, op)\n\n                    result = expr._can_use_numexpr(op, op_str, f11, f12, \"evaluate\")\n                    assert result != f11._is_mixed_type\n\n                    result = expr.evaluate(op, op_str, f11, f12, use_numexpr=True)\n                    expected = expr.evaluate(op, op_str, f11, f12, use_numexpr=False)\n                    if isinstance(result, DataFrame):\n                        tm.assert_frame_equal(result, expected)\n                    else:\n                        tm.assert_numpy_array_equal(result, expected.values)\n\n                    result = expr._can_use_numexpr(op, op_str, f21, f22, \"evaluate\")\n                    assert not result\n\n        expr.set_use_numexpr(False)\n        testit()\n        expr.set_use_numexpr(True)\n        expr.set_numexpr_threads(1)\n        testit()\n        expr.set_numexpr_threads()\n        testit()",
        "begin_line": 274,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.testit#275",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.testit()",
        "snippet": "        def testit():\n            for f, f2 in [(self.frame, self.frame2), (self.mixed, self.mixed2)]:\n\n                f11 = f\n                f12 = f + 1\n\n                f21 = f2\n                f22 = f2 + 1\n\n                for op, op_str in [\n                    (\"gt\", \">\"),\n                    (\"lt\", \"<\"),\n                    (\"ge\", \">=\"),\n                    (\"le\", \"<=\"),\n                    (\"eq\", \"==\"),\n                    (\"ne\", \"!=\"),\n                ]:\n\n                    op = getattr(operator, op)\n\n                    result = expr._can_use_numexpr(op, op_str, f11, f12, \"evaluate\")\n                    assert result != f11._is_mixed_type\n\n                    result = expr.evaluate(op, op_str, f11, f12, use_numexpr=True)\n                    expected = expr.evaluate(op, op_str, f11, f12, use_numexpr=False)\n                    if isinstance(result, DataFrame):\n                        tm.assert_frame_equal(result, expected)\n                    else:\n                        tm.assert_numpy_array_equal(result, expected.values)\n\n                    result = expr._can_use_numexpr(op, op_str, f21, f22, \"evaluate\")\n                    assert not result",
        "begin_line": 275,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_where#316",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_where(self)",
        "snippet": "    def test_where(self):\n        def testit():\n            for f in [self.frame, self.frame2, self.mixed, self.mixed2]:\n\n                for cond in [True, False]:\n                    c = np.empty(f.shape, dtype=np.bool_)\n                    c.fill(cond)\n                    result = expr.where(c, f.values, f.values + 1)\n                    expected = np.where(c, f.values, f.values + 1)\n                    tm.assert_numpy_array_equal(result, expected)\n\n        expr.set_use_numexpr(False)\n        testit()\n        expr.set_use_numexpr(True)\n        expr.set_numexpr_threads(1)\n        testit()\n        expr.set_numexpr_threads()\n        testit()",
        "begin_line": 316,
        "end_line": 333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.testit#317",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.testit()",
        "snippet": "        def testit():\n            for f in [self.frame, self.frame2, self.mixed, self.mixed2]:\n\n                for cond in [True, False]:\n                    c = np.empty(f.shape, dtype=np.bool_)\n                    c.fill(cond)\n                    result = expr.where(c, f.values, f.values + 1)\n                    expected = np.where(c, f.values, f.values + 1)\n                    tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 317,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_raise_on_arithmetic#335",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_raise_on_arithmetic(self)",
        "snippet": "    def test_bool_ops_raise_on_arithmetic(self):\n        df = DataFrame({\"a\": np.random.rand(10) > 0.5, \"b\": np.random.rand(10) > 0.5})\n        names = \"truediv\", \"floordiv\", \"pow\"\n        ops = \"/\", \"//\", \"**\"\n        msg = \"operator %r not implemented for bool dtypes\"\n        for op, name in zip(ops, names):\n            f = getattr(operator, name)\n            err_msg = re.escape(msg % op)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(df, df)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(df.a, df.b)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(df.a, True)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(False, df.a)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(False, df)\n\n            with pytest.raises(NotImplementedError, match=err_msg):\n                f(df, True)",
        "begin_line": 335,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_warn_on_arithmetic#362",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_warn_on_arithmetic(self)",
        "snippet": "    def test_bool_ops_warn_on_arithmetic(self):\n        n = 10\n        df = DataFrame({\"a\": np.random.rand(n) > 0.5, \"b\": np.random.rand(n) > 0.5})\n        names = \"add\", \"mul\", \"sub\"\n        ops = \"+\", \"*\", \"-\"\n        subs = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n        sub_funcs = {\"|\": \"or_\", \"&\": \"and_\", \"^\": \"xor\"}\n        for op, name in zip(ops, names):\n            f = getattr(operator, name)\n            fe = getattr(operator, sub_funcs[subs[op]])\n\n            if op == \"-\":\n                # raises TypeError\n                continue\n\n            with tm.use_numexpr(True, min_elements=5):\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(df, df)\n                    e = fe(df, df)\n                    tm.assert_frame_equal(r, e)\n\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(df.a, df.b)\n                    e = fe(df.a, df.b)\n                    tm.assert_series_equal(r, e)\n\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(df.a, True)\n                    e = fe(df.a, True)\n                    tm.assert_series_equal(r, e)\n\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(False, df.a)\n                    e = fe(False, df.a)\n                    tm.assert_series_equal(r, e)\n\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(False, df)\n                    e = fe(False, df)\n                    tm.assert_frame_equal(r, e)\n\n                with tm.assert_produces_warning(check_stacklevel=False):\n                    r = f(df, True)\n                    e = fe(df, True)\n                    tm.assert_frame_equal(r, e)",
        "begin_line": 362,
        "end_line": 406,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_column_name_dtype#429",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_bool_ops_column_name_dtype(self, test_input, expected)",
        "snippet": "    def test_bool_ops_column_name_dtype(self, test_input, expected):\n        # GH 22383 - .ne fails if columns containing column name 'dtype'\n        result = test_input.loc[:, [\"a\", \"dtype\"]].ne(test_input.loc[:, [\"a\", \"dtype\"]])\n        assert_frame_equal(result, expected)",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.test_expressions.TestExpressions.test_frame_series_axis#438",
        "src_path": "pandas/tests/test_expressions.py",
        "class_name": "pandas.tests.test_expressions.TestExpressions",
        "signature": "pandas.tests.test_expressions.TestExpressions.test_frame_series_axis(self, axis, arith)",
        "snippet": "    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "begin_line": 438,
        "end_line": 458,
        "comment": "",
        "is_bug": false
    }
]