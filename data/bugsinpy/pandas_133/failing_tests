coverage run -m pytest pandas/tests/frame/test_missing.py::TestDataFrameInterpolate::test_interp_axis_names
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 3 items

pandas/tests/frame/test_missing.py FFF                                   [100%]

=================================== FAILURES ===================================
___________ TestDataFrameInterpolate.test_interp_axis_names[rows_0] ____________

self = <pandas.tests.frame.test_missing.TestDataFrameInterpolate object at 0x7ff57e573e20>
axis_name = 'rows', axis_number = 0

    @pytest.mark.parametrize(
        "axis_name, axis_number",
        [
            pytest.param("rows", 0, id="rows_0"),
            pytest.param("index", 0, id="index_0"),
            pytest.param("columns", 1, id="columns_1"),
        ],
    )
    def test_interp_axis_names(self, axis_name, axis_number):
        # GH 29132: test axis names
        data = {0: [0, np.nan, 6], 1: [1, np.nan, 7], 2: [2, 5, 8]}
    
        df = DataFrame(data, dtype=np.float64)
>       result = df.interpolate(axis=axis_name, method="linear")

pandas/tests/frame/test_missing.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0
method = 'linear', axis = 'rows', limit = None, inplace = False
limit_direction = 'forward', limit_area = None, downcast = None, kwargs = {}
_maybe_transposed_self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0

    @Appender(_shared_docs["interpolate"] % _shared_doc_kwargs)
    def interpolate(
        self,
        method="linear",
        axis=0,
        limit=None,
        inplace=False,
        limit_direction="forward",
        limit_area=None,
        downcast=None,
        **kwargs
    ):
        """
        Interpolate values according to different methods.
        """
        inplace = validate_bool_kwarg(inplace, "inplace")
    
        if axis == 0:
            ax = self._info_axis_name
            _maybe_transposed_self = self
        elif axis == 1:
            _maybe_transposed_self = self.T
            ax = 1
        else:
            _maybe_transposed_self = self
>       ax = _maybe_transposed_self._get_axis_number(ax)
E       UnboundLocalError: local variable 'ax' referenced before assignment

pandas/core/generic.py:7059: UnboundLocalError
___________ TestDataFrameInterpolate.test_interp_axis_names[index_0] ___________

self = <pandas.tests.frame.test_missing.TestDataFrameInterpolate object at 0x7ff57e5733d0>
axis_name = 'index', axis_number = 0

    @pytest.mark.parametrize(
        "axis_name, axis_number",
        [
            pytest.param("rows", 0, id="rows_0"),
            pytest.param("index", 0, id="index_0"),
            pytest.param("columns", 1, id="columns_1"),
        ],
    )
    def test_interp_axis_names(self, axis_name, axis_number):
        # GH 29132: test axis names
        data = {0: [0, np.nan, 6], 1: [1, np.nan, 7], 2: [2, 5, 8]}
    
        df = DataFrame(data, dtype=np.float64)
>       result = df.interpolate(axis=axis_name, method="linear")

pandas/tests/frame/test_missing.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0
method = 'linear', axis = 'index', limit = None, inplace = False
limit_direction = 'forward', limit_area = None, downcast = None, kwargs = {}
_maybe_transposed_self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0

    @Appender(_shared_docs["interpolate"] % _shared_doc_kwargs)
    def interpolate(
        self,
        method="linear",
        axis=0,
        limit=None,
        inplace=False,
        limit_direction="forward",
        limit_area=None,
        downcast=None,
        **kwargs
    ):
        """
        Interpolate values according to different methods.
        """
        inplace = validate_bool_kwarg(inplace, "inplace")
    
        if axis == 0:
            ax = self._info_axis_name
            _maybe_transposed_self = self
        elif axis == 1:
            _maybe_transposed_self = self.T
            ax = 1
        else:
            _maybe_transposed_self = self
>       ax = _maybe_transposed_self._get_axis_number(ax)
E       UnboundLocalError: local variable 'ax' referenced before assignment

pandas/core/generic.py:7059: UnboundLocalError
__________ TestDataFrameInterpolate.test_interp_axis_names[columns_1] __________

self = <pandas.tests.frame.test_missing.TestDataFrameInterpolate object at 0x7ff57e5737f0>
axis_name = 'columns', axis_number = 1

    @pytest.mark.parametrize(
        "axis_name, axis_number",
        [
            pytest.param("rows", 0, id="rows_0"),
            pytest.param("index", 0, id="index_0"),
            pytest.param("columns", 1, id="columns_1"),
        ],
    )
    def test_interp_axis_names(self, axis_name, axis_number):
        # GH 29132: test axis names
        data = {0: [0, np.nan, 6], 1: [1, np.nan, 7], 2: [2, 5, 8]}
    
        df = DataFrame(data, dtype=np.float64)
>       result = df.interpolate(axis=axis_name, method="linear")

pandas/tests/frame/test_missing.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0
method = 'linear', axis = 'columns', limit = None, inplace = False
limit_direction = 'forward', limit_area = None, downcast = None, kwargs = {}
_maybe_transposed_self =      0    1    2
0  0.0  1.0  2.0
1  NaN  NaN  5.0
2  6.0  7.0  8.0

    @Appender(_shared_docs["interpolate"] % _shared_doc_kwargs)
    def interpolate(
        self,
        method="linear",
        axis=0,
        limit=None,
        inplace=False,
        limit_direction="forward",
        limit_area=None,
        downcast=None,
        **kwargs
    ):
        """
        Interpolate values according to different methods.
        """
        inplace = validate_bool_kwarg(inplace, "inplace")
    
        if axis == 0:
            ax = self._info_axis_name
            _maybe_transposed_self = self
        elif axis == 1:
            _maybe_transposed_self = self.T
            ax = 1
        else:
            _maybe_transposed_self = self
>       ax = _maybe_transposed_self._get_axis_number(ax)
E       UnboundLocalError: local variable 'ax' referenced before assignment

pandas/core/generic.py:7059: UnboundLocalError
=========================== short test summary info ============================
FAILED pandas/tests/frame/test_missing.py::TestDataFrameInterpolate::test_interp_axis_names[rows_0]
FAILED pandas/tests/frame/test_missing.py::TestDataFrameInterpolate::test_interp_axis_names[index_0]
FAILED pandas/tests/frame/test_missing.py::TestDataFrameInterpolate::test_interp_axis_names[columns_1]
============================== 3 failed in 0.89s ===============================
