[
    {
        "name": "pandas.tests.frame.conftest.float_frame_with_na#9",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_frame_with_na()",
        "snippet": "def float_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                       A         B         C         D\n    ABwBzA0ljw -1.128865 -0.897161  0.046603  0.274997\n    DJiRzmbyQF  0.728869  0.233502  0.722431 -0.890872\n    neMgPD5UBF  0.486072 -1.027393 -0.031553  1.449522\n    0yWA4n8VeX -1.937191 -1.142531  0.805215 -0.462018\n    3slYUbbqU1  0.153260  1.164691  1.489795 -0.545826\n    soujjZ0A08       NaN       NaN       NaN       NaN\n    7W6NLGsjB9       NaN       NaN       NaN       NaN\n    ...              ...       ...       ...       ...\n    uhfeaNkCR1 -0.231210 -0.340472  0.244717 -0.901590\n    n6p7GYuBIV -0.419052  1.922721 -0.125361 -0.727717\n    ZhzAeY6p1y  1.234374 -1.425359 -0.827038 -0.633189\n    uWdPsORyUh  0.046738 -0.980445 -1.102965  0.605503\n    3DJA6aN590 -0.091018 -1.684734 -1.100900  0.215947\n    2GBPAzdbMk -2.883405 -1.021071  1.209877  1.633083\n    sHadBoyVHw -2.223032 -0.326384  0.258931  0.245517\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 9,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.bool_frame_with_na#42",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.bool_frame_with_na()",
        "snippet": "def bool_frame_with_na():\n    \"\"\"\n    Fixture for DataFrame of booleans with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n\n                    A      B      C      D\n    zBZxY2IDGd  False  False  False  False\n    IhBWBMWllt  False   True   True   True\n    ctjdvZSR6R   True  False   True   True\n    AVTujptmxb  False   True  False   True\n    G9lrImrSWq  False  False  False   True\n    sFFwdIUfz2    NaN    NaN    NaN    NaN\n    s15ptEJnRb    NaN    NaN    NaN    NaN\n    ...           ...    ...    ...    ...\n    UW41KkDyZ4   True   True  False  False\n    l9l6XkOdqV   True  False  False  False\n    X2MeZfzDYA  False   True  False  False\n    xWkIKU7vfX  False   True  False   True\n    QOhL6VmpGU  False  False  False   True\n    22PwkRJdat  False   True  False  False\n    kfboQ3VeIK   True  False   True  False\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData()) > 0\n    df = df.astype(object)\n    # set some NAs\n    df.loc[5:10] = np.nan\n    df.loc[15:20, -2:] = np.nan\n    return df",
        "begin_line": 42,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.int_frame#76",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.int_frame()",
        "snippet": "def int_frame():\n    \"\"\"\n    Fixture for DataFrame of ints with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                A  B  C  D\n    vpBeWjM651  1  0  1  0\n    5JyxmrP1En -1  0  0  0\n    qEDaoD49U2 -1  1  0  0\n    m66TkTfsFe  0  0  0  0\n    EHPaNzEUFm -1  0 -1  0\n    fpRJCevQhi  2  0  0  0\n    OlQvnmfi3Q  0  0 -2  0\n    ...        .. .. .. ..\n    uB1FPlz4uP  0  0  0  1\n    EcSe6yNzCU  0  0 -1  0\n    L50VudaiI8 -1  1 -2  0\n    y3bpw4nwIp  0 -1  0  0\n    H0RdLLwrCT  1  1  0  0\n    rY82K0vMwm  0  0  0  0\n    1OPIUjnkjk  2  0  0  0\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    # force these all to int64 to avoid platform testing issues\n    return DataFrame({c: s for c, s in df.items()}, dtype=np.int64)",
        "begin_line": 76,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.datetime_frame#107",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.datetime_frame()",
        "snippet": "def datetime_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']\n\n                       A         B         C         D\n    2000-01-03 -1.122153  0.468535  0.122226  1.693711\n    2000-01-04  0.189378  0.486100  0.007864 -1.216052\n    2000-01-05  0.041401 -0.835752 -0.035279 -0.414357\n    2000-01-06  0.430050  0.894352  0.090719  0.036939\n    2000-01-07 -0.620982 -0.668211 -0.706153  1.466335\n    2000-01-10 -0.752633  0.328434 -0.815325  0.699674\n    2000-01-11 -2.236969  0.615737 -0.829076 -1.196106\n    ...              ...       ...       ...       ...\n    2000-02-03  1.642618 -0.579288  0.046005  1.385249\n    2000-02-04 -0.544873 -1.160962 -0.284071 -1.418351\n    2000-02-07 -2.656149 -0.601387  1.410148  0.444150\n    2000-02-08 -1.201881 -1.289040  0.772992 -1.445300\n    2000-02-09  1.377373  0.398619  1.008453 -0.928207\n    2000-02-10  0.473194 -0.636677  0.984058  0.511519\n    2000-02-11 -0.965556  0.408313 -1.312844 -0.381948\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getTimeSeriesData())",
        "begin_line": 107,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.float_string_frame#136",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for DataFrame of floats and strings with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D', 'foo'].\n\n                       A         B         C         D  foo\n    w3orJvq07g -1.594062 -1.084273 -1.252457  0.356460  bar\n    PeukuVdmz2  0.109855 -0.955086 -0.809485  0.409747  bar\n    ahp2KvwiM8 -1.533729 -0.142519 -0.154666  1.302623  bar\n    3WSJ7BUCGd  2.484964  0.213829  0.034778 -2.327831  bar\n    khdAmufk0U -0.193480 -0.743518 -0.077987  0.153646  bar\n    LE2DZiFlrE -0.193566 -1.343194 -0.107321  0.959978  bar\n    HJXSJhVn7b  0.142590  1.257603 -0.659409 -0.223844  bar\n    ...              ...       ...       ...       ...  ...\n    9a1Vypttgw -1.316394  1.601354  0.173596  1.213196  bar\n    h5d1gVFbEy  0.609475  1.106738 -0.155271  0.294630  bar\n    mK9LsTQG92  1.303613  0.857040 -1.019153  0.369468  bar\n    oOLksd9gKH  0.558219 -0.134491 -0.289869 -0.951033  bar\n    9jgoOjKyHg  0.058270 -0.496110 -0.413212 -0.852659  bar\n    jZLDHclHAO  0.096298  1.267510  0.549206 -0.005235  bar\n    lR0nxDp1C2 -2.119350 -0.794384  0.544118  0.145849  bar\n\n    [30 rows x 5 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df[\"foo\"] = \"bar\"\n    return df",
        "begin_line": 136,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_float_frame#167",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_float_frame()",
        "snippet": "def mixed_float_frame():\n    \"\"\"\n    Fixture for DataFrame of different float types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    GI7bbDaEZe -0.237908 -0.246225 -0.468506  0.752993\n    KGp9mFepzA -1.140809 -0.644046 -1.225586  0.801588\n    VeVYLAb1l2 -1.154013 -1.677615  0.690430 -0.003731\n    kmPME4WKhO  0.979578  0.998274 -0.776367  0.897607\n    CPyopdXTiz  0.048119 -0.257174  0.836426  0.111266\n    0kJZQndAj0  0.274357 -0.281135 -0.344238  0.834541\n    tqdwQsaHG8 -0.979716 -0.519897  0.582031  0.144710\n    ...              ...       ...       ...       ...\n    7FhZTWILQj -2.906357  1.261039 -0.780273 -0.537237\n    4pUDPM4eGq -2.042512 -0.464382 -0.382080  1.132612\n    B8dUgUzwTi -1.506637 -0.364435  1.087891  0.297653\n    hErlVYjVv9  1.477453 -0.495515 -0.713867  1.438427\n    1BKN3o7YLs  0.127535 -0.349812 -0.881836  0.489827\n    9S4Ekn7zga  1.445518 -2.095149  0.031982  0.373204\n    xN1dNn6OV6  1.425017 -0.983995 -0.363281 -0.224502\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame(tm.getSeriesData())\n    df.A = df.A.astype(\"float32\")\n    df.B = df.B.astype(\"float32\")\n    df.C = df.C.astype(\"float16\")\n    df.D = df.D.astype(\"float64\")\n    return df",
        "begin_line": 167,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_int_frame#201",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_int_frame()",
        "snippet": "def mixed_int_frame():\n    \"\"\"\n    Fixture for DataFrame of different int types with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                A  B    C    D\n    mUrCZ67juP  0  1    2    2\n    rw99ACYaKS  0  1    0    0\n    7QsEcpaaVU  0  1    1    1\n    xkrimI2pcE  0  1    0    0\n    dz01SuzoS8  0  1  255  255\n    ccQkqOHX75 -1  1    0    0\n    DN0iXaoDLd  0  1    0    0\n    ...        .. ..  ...  ...\n    Dfb141wAaQ  1  1  254  254\n    IPD8eQOVu5  0  1    0    0\n    CcaKulsCmv  0  1    0    0\n    rIBa8gu7E5  0  1    0    0\n    RP6peZmh5o  0  1    1    1\n    NMb9pipQWQ  0  1    0    0\n    PqgbJEzjib  0  1    3    3\n\n    [30 rows x 4 columns]\n    \"\"\"\n    df = DataFrame({k: v.astype(int) for k, v in tm.getSeriesData().items()})\n    df.A = df.A.astype(\"int32\")\n    df.B = np.ones(len(df.B), dtype=\"uint64\")\n    df.C = df.C.astype(\"uint8\")\n    df.D = df.C.astype(\"int64\")\n    return df",
        "begin_line": 201,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.mixed_type_frame#235",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.mixed_type_frame()",
        "snippet": "def mixed_type_frame():\n    \"\"\"\n    Fixture for DataFrame of float/int/string columns with RangeIndex\n    Columns are ['a', 'b', 'c', 'float32', 'int32'].\n    \"\"\"\n    return DataFrame(\n        {\n            \"a\": 1.0,\n            \"b\": 2,\n            \"c\": \"foo\",\n            \"float32\": np.array([1.0] * 10, dtype=\"float32\"),\n            \"int32\": np.array([1] * 10, dtype=\"int32\"),\n        },\n        index=np.arange(10),\n    )",
        "begin_line": 235,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.timezone_frame#253",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.timezone_frame()",
        "snippet": "def timezone_frame():\n    \"\"\"\n    Fixture for DataFrame of date_range Series with different time zones\n\n    Columns are ['A', 'B', 'C']; some entries are missing\n\n               A                         B                         C\n    0 2013-01-01 2013-01-01 00:00:00-05:00 2013-01-01 00:00:00+01:00\n    1 2013-01-02                       NaT                       NaT\n    2 2013-01-03 2013-01-03 00:00:00-05:00 2013-01-03 00:00:00+01:00\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": date_range(\"20130101\", periods=3),\n            \"B\": date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\n            \"C\": date_range(\"20130101\", periods=3, tz=\"CET\"),\n        }\n    )\n    df.iloc[1, 1] = NaT\n    df.iloc[1, 2] = NaT\n    return df",
        "begin_line": 253,
        "end_line": 273,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.uint64_frame#277",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.uint64_frame()",
        "snippet": "def uint64_frame():\n    \"\"\"\n    Fixture for DataFrame with uint64 values\n\n    Columns are ['A', 'B']\n    \"\"\"\n    return DataFrame(\n        {\"A\": np.arange(3), \"B\": [2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10]}, dtype=np.uint64\n    )",
        "begin_line": 277,
        "end_line": 285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.simple_frame#289",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.simple_frame()",
        "snippet": "def simple_frame():\n    \"\"\"\n    Fixture for simple 3x3 DataFrame\n\n    Columns are ['one', 'two', 'three'], index is ['a', 'b', 'c'].\n\n       one  two  three\n    a  1.0  2.0    3.0\n    b  4.0  5.0    6.0\n    c  7.0  8.0    9.0\n    \"\"\"\n    arr = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n    return DataFrame(arr, columns=[\"one\", \"two\", \"three\"], index=[\"a\", \"b\", \"c\"])",
        "begin_line": 289,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.conftest.frame_of_index_cols#306",
        "src_path": "pandas/tests/frame/conftest.py",
        "class_name": "pandas.tests.frame.conftest",
        "signature": "pandas.tests.frame.conftest.frame_of_index_cols()",
        "snippet": "def frame_of_index_cols():\n    \"\"\"\n    Fixture for DataFrame of columns that can be used for indexing\n\n    Columns are ['A', 'B', 'C', 'D', 'E', ('tuple', 'as', 'label')];\n    'A' & 'B' contain duplicates (but are jointly unique), the rest are unique.\n\n         A      B  C         D         E  (tuple, as, label)\n    0  foo    one  a  0.608477 -0.012500           -1.664297\n    1  foo    two  b -0.633460  0.249614           -0.364411\n    2  foo  three  c  0.615256  2.154968           -0.834666\n    3  bar    one  d  0.234246  1.085675            0.718445\n    4  bar    two  e  0.533841 -0.005702           -3.533912\n    \"\"\"\n    df = DataFrame(\n        {\n            \"A\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\"],\n            \"B\": [\"one\", \"two\", \"three\", \"one\", \"two\"],\n            \"C\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n            \"D\": np.random.randn(5),\n            \"E\": np.random.randn(5),\n            (\"tuple\", \"as\", \"label\"): np.random.randn(5),\n        }\n    )\n    return df",
        "begin_line": 306,
        "end_line": 330,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common.TestData.mixed_frame#40",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common.TestData",
        "signature": "pandas.tests.frame.common.TestData.mixed_frame(self)",
        "snippet": "    def mixed_frame(self):\n        return _mixed_frame.copy()",
        "begin_line": 40,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_float#125",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_float(df, dtype=None)",
        "snippet": "def _check_mixed_float(df, dtype=None):\n    # float16 are most likely to be upcasted to float32\n    dtypes = dict(A=\"float32\", B=\"float32\", C=\"float16\", D=\"float64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.common._check_mixed_int#142",
        "src_path": "pandas/tests/frame/common.py",
        "class_name": "pandas.tests.frame.common",
        "signature": "pandas.tests.frame.common._check_mixed_int(df, dtype=None)",
        "snippet": "def _check_mixed_int(df, dtype=None):\n    dtypes = dict(A=\"int32\", B=\"uint64\", C=\"uint8\", D=\"int64\")\n    if isinstance(dtype, str):\n        dtypes = {k: dtype for k, v in dtypes.items()}\n    elif isinstance(dtype, dict):\n        dtypes.update(dtype)\n    if dtypes.get(\"A\"):\n        assert df.dtypes[\"A\"] == dtypes[\"A\"]\n    if dtypes.get(\"B\"):\n        assert df.dtypes[\"B\"] == dtypes[\"B\"]\n    if dtypes.get(\"C\"):\n        assert df.dtypes[\"C\"] == dtypes[\"C\"]\n    if dtypes.get(\"D\"):\n        assert df.dtypes[\"D\"] == dtypes[\"D\"]",
        "begin_line": 142,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing._skip_if_no_pchip#16",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing",
        "signature": "pandas.tests.frame.test_missing._skip_if_no_pchip()",
        "snippet": "def _skip_if_no_pchip():\n    try:\n        from scipy.interpolate import pchip_interpolate  # noqa\n    except ImportError:\n        import pytest\n\n        pytest.skip(\"scipy.interpolate.pchip missing\")",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropEmptyRows#26",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropEmptyRows(self, float_frame)",
        "snippet": "    def test_dropEmptyRows(self, float_frame):\n        N = len(float_frame.index)\n        mat = np.random.randn(N)\n        mat[:5] = np.nan\n\n        frame = DataFrame({\"foo\": mat}, index=float_frame.index)\n        original = Series(mat, index=float_frame.index, name=\"foo\")\n        expected = original.dropna()\n        inplace_frame1, inplace_frame2 = frame.copy(), frame.copy()\n\n        smaller_frame = frame.dropna(how=\"all\")\n        # check that original was preserved\n        assert_series_equal(frame[\"foo\"], original)\n        inplace_frame1.dropna(how=\"all\", inplace=True)\n        assert_series_equal(smaller_frame[\"foo\"], expected)\n        assert_series_equal(inplace_frame1[\"foo\"], expected)\n\n        smaller_frame = frame.dropna(how=\"all\", subset=[\"foo\"])\n        inplace_frame2.dropna(how=\"all\", subset=[\"foo\"], inplace=True)\n        assert_series_equal(smaller_frame[\"foo\"], expected)\n        assert_series_equal(inplace_frame2[\"foo\"], expected)",
        "begin_line": 26,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropIncompleteRows#48",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropIncompleteRows(self, float_frame)",
        "snippet": "    def test_dropIncompleteRows(self, float_frame):\n        N = len(float_frame.index)\n        mat = np.random.randn(N)\n        mat[:5] = np.nan\n\n        frame = DataFrame({\"foo\": mat}, index=float_frame.index)\n        frame[\"bar\"] = 5\n        original = Series(mat, index=float_frame.index, name=\"foo\")\n        inp_frame1, inp_frame2 = frame.copy(), frame.copy()\n\n        smaller_frame = frame.dropna()\n        assert_series_equal(frame[\"foo\"], original)\n        inp_frame1.dropna(inplace=True)\n\n        exp = Series(mat[5:], index=float_frame.index[5:], name=\"foo\")\n        tm.assert_series_equal(smaller_frame[\"foo\"], exp)\n        tm.assert_series_equal(inp_frame1[\"foo\"], exp)\n\n        samesize_frame = frame.dropna(subset=[\"bar\"])\n        assert_series_equal(frame[\"foo\"], original)\n        assert (frame[\"bar\"] == 5).all()\n        inp_frame2.dropna(subset=[\"bar\"], inplace=True)\n        tm.assert_index_equal(samesize_frame.index, float_frame.index)\n        tm.assert_index_equal(inp_frame2.index, float_frame.index)",
        "begin_line": 48,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna#73",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna(self)",
        "snippet": "    def test_dropna(self):\n        df = DataFrame(np.random.randn(6, 4))\n        df[2][:2] = np.nan\n\n        dropped = df.dropna(axis=1)\n        expected = df.loc[:, [0, 1, 3]]\n        inp = df.copy()\n        inp.dropna(axis=1, inplace=True)\n        assert_frame_equal(dropped, expected)\n        assert_frame_equal(inp, expected)\n\n        dropped = df.dropna(axis=0)\n        expected = df.loc[list(range(2, 6))]\n        inp = df.copy()\n        inp.dropna(axis=0, inplace=True)\n        assert_frame_equal(dropped, expected)\n        assert_frame_equal(inp, expected)\n\n        # threshold\n        dropped = df.dropna(axis=1, thresh=5)\n        expected = df.loc[:, [0, 1, 3]]\n        inp = df.copy()\n        inp.dropna(axis=1, thresh=5, inplace=True)\n        assert_frame_equal(dropped, expected)\n        assert_frame_equal(inp, expected)\n\n        dropped = df.dropna(axis=0, thresh=4)\n        expected = df.loc[range(2, 6)]\n        inp = df.copy()\n        inp.dropna(axis=0, thresh=4, inplace=True)\n        assert_frame_equal(dropped, expected)\n        assert_frame_equal(inp, expected)\n\n        dropped = df.dropna(axis=1, thresh=4)\n        assert_frame_equal(dropped, df)\n\n        dropped = df.dropna(axis=1, thresh=3)\n        assert_frame_equal(dropped, df)\n\n        # subset\n        dropped = df.dropna(axis=0, subset=[0, 1, 3])\n        inp = df.copy()\n        inp.dropna(axis=0, subset=[0, 1, 3], inplace=True)\n        assert_frame_equal(dropped, df)\n        assert_frame_equal(inp, df)\n\n        # all\n        dropped = df.dropna(axis=1, how=\"all\")\n        assert_frame_equal(dropped, df)\n\n        df[2] = np.nan\n        dropped = df.dropna(axis=1, how=\"all\")\n        expected = df.loc[:, [0, 1, 3]]\n        assert_frame_equal(dropped, expected)\n\n        # bad input\n        msg = \"No axis named 3 for object type <class 'pandas.core.frame.DataFrame'>\"\n        with pytest.raises(ValueError, match=msg):\n            df.dropna(axis=3)",
        "begin_line": 73,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_drop_and_dropna_caching#133",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_drop_and_dropna_caching(self)",
        "snippet": "    def test_drop_and_dropna_caching(self):\n        # tst that cacher updates\n        original = Series([1, 2, np.nan], name=\"A\")\n        expected = Series([1, 2], dtype=original.dtype, name=\"A\")\n        df = pd.DataFrame({\"A\": original.values.copy()})\n        df2 = df.copy()\n        df[\"A\"].dropna()\n        assert_series_equal(df[\"A\"], original)\n        df[\"A\"].dropna(inplace=True)\n        assert_series_equal(df[\"A\"], expected)\n        df2[\"A\"].drop([1])\n        assert_series_equal(df2[\"A\"], original)\n        df2[\"A\"].drop([1], inplace=True)\n        assert_series_equal(df2[\"A\"], original.drop([1]))",
        "begin_line": 133,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_corner#148",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_corner(self, float_frame)",
        "snippet": "    def test_dropna_corner(self, float_frame):\n        # bad input\n        msg = \"invalid how option: foo\"\n        with pytest.raises(ValueError, match=msg):\n            float_frame.dropna(how=\"foo\")\n        msg = \"must specify how or thresh\"\n        with pytest.raises(TypeError, match=msg):\n            float_frame.dropna(how=None)\n        # non-existent column - 8303\n        with pytest.raises(KeyError, match=r\"^\\['X'\\]$\"):\n            float_frame.dropna(subset=[\"A\", \"X\"])",
        "begin_line": 148,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_multiple_axes#160",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_multiple_axes(self)",
        "snippet": "    def test_dropna_multiple_axes(self):\n        df = DataFrame(\n            [\n                [1, np.nan, 2, 3],\n                [4, np.nan, 5, 6],\n                [np.nan, np.nan, np.nan, np.nan],\n                [7, np.nan, 8, 9],\n            ]\n        )\n        cp = df.copy()\n\n        # GH20987\n        with tm.assert_produces_warning(FutureWarning):\n            result = df.dropna(how=\"all\", axis=[0, 1])\n        with tm.assert_produces_warning(FutureWarning):\n            result2 = df.dropna(how=\"all\", axis=(0, 1))\n        expected = df.dropna(how=\"all\").dropna(how=\"all\", axis=1)\n\n        assert_frame_equal(result, expected)\n        assert_frame_equal(result2, expected)\n        assert_frame_equal(df, cp)\n\n        inp = df.copy()\n        with tm.assert_produces_warning(FutureWarning):\n            inp.dropna(how=\"all\", axis=(0, 1), inplace=True)\n        assert_frame_equal(inp, expected)",
        "begin_line": 160,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_tz_aware_datetime#187",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_tz_aware_datetime(self)",
        "snippet": "    def test_dropna_tz_aware_datetime(self):\n        # GH13407\n        df = DataFrame()\n        dt1 = datetime.datetime(2015, 1, 1, tzinfo=dateutil.tz.tzutc())\n        dt2 = datetime.datetime(2015, 2, 2, tzinfo=dateutil.tz.tzutc())\n        df[\"Time\"] = [dt1]\n        result = df.dropna(axis=0)\n        expected = DataFrame({\"Time\": [dt1]})\n        assert_frame_equal(result, expected)\n\n        # Ex2\n        df = DataFrame({\"Time\": [dt1, None, np.nan, dt2]})\n        result = df.dropna(axis=0)\n        expected = DataFrame([dt1, dt2], columns=[\"Time\"], index=[0, 3])\n        assert_frame_equal(result, expected)",
        "begin_line": 187,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_categorical_interval_index#203",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_categorical_interval_index(self)",
        "snippet": "    def test_dropna_categorical_interval_index(self):\n        # GH 25087\n        ii = pd.IntervalIndex.from_breaks([0, 2.78, 3.14, 6.28])\n        ci = pd.CategoricalIndex(ii)\n        df = pd.DataFrame({\"A\": list(\"abc\")}, index=ci)\n\n        expected = df\n        result = df.dropna()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 203,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime#213",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime(self, datetime_frame)",
        "snippet": "    def test_fillna_datetime(self, datetime_frame):\n        tf = datetime_frame\n        tf.loc[tf.index[:5], \"A\"] = np.nan\n        tf.loc[tf.index[-5:], \"A\"] = np.nan\n\n        zero_filled = datetime_frame.fillna(0)\n        assert (zero_filled.loc[zero_filled.index[:5], \"A\"] == 0).all()\n\n        padded = datetime_frame.fillna(method=\"pad\")\n        assert np.isnan(padded.loc[padded.index[:5], \"A\"]).all()\n        assert (\n            padded.loc[padded.index[-5:], \"A\"] == padded.loc[padded.index[-5], \"A\"]\n        ).all()\n\n        msg = \"Must specify a fill 'value' or 'method'\"\n        with pytest.raises(ValueError, match=msg):\n            datetime_frame.fillna()\n        msg = \"Cannot specify both 'value' and 'method'\"\n        with pytest.raises(ValueError, match=msg):\n            datetime_frame.fillna(5, method=\"ffill\")",
        "begin_line": 213,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_type#234",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_type(self, float_string_frame)",
        "snippet": "    def test_fillna_mixed_type(self, float_string_frame):\n\n        mf = float_string_frame\n        mf.loc[mf.index[5:20], \"foo\"] = np.nan\n        mf.loc[mf.index[-10:], \"A\"] = np.nan\n        # TODO: make stronger assertion here, GH 25640\n        mf.fillna(value=0)\n        mf.fillna(method=\"pad\")",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_float#243",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_mixed_float(self, mixed_float_frame)",
        "snippet": "    def test_fillna_mixed_float(self, mixed_float_frame):\n\n        # mixed numeric (but no float16)\n        mf = mixed_float_frame.reindex(columns=[\"A\", \"B\", \"D\"])\n        mf.loc[mf.index[-10:], \"A\"] = np.nan\n        result = mf.fillna(value=0)\n        _check_mixed_float(result, dtype=dict(C=None))\n\n        result = mf.fillna(method=\"pad\")\n        _check_mixed_float(result, dtype=dict(C=None))",
        "begin_line": 243,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_empty#254",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_empty(self)",
        "snippet": "    def test_fillna_empty(self):\n        # empty frame (GH #2778)\n        df = DataFrame(columns=[\"x\"])\n        for m in [\"pad\", \"backfill\"]:\n            df.x.fillna(method=m, inplace=True)\n            df.x.fillna(method=m)",
        "begin_line": 254,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_different_dtype#261",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_different_dtype(self)",
        "snippet": "    def test_fillna_different_dtype(self):\n        # with different dtype (GH#3386)\n        df = DataFrame(\n            [[\"a\", \"a\", np.nan, \"a\"], [\"b\", \"b\", np.nan, \"b\"], [\"c\", \"c\", np.nan, \"c\"]]\n        )\n\n        result = df.fillna({2: \"foo\"})\n        expected = DataFrame(\n            [[\"a\", \"a\", \"foo\", \"a\"], [\"b\", \"b\", \"foo\", \"b\"], [\"c\", \"c\", \"foo\", \"c\"]]\n        )\n        assert_frame_equal(result, expected)\n\n        df.fillna({2: \"foo\"}, inplace=True)\n        assert_frame_equal(df, expected)",
        "begin_line": 261,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_limit_and_value#276",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_limit_and_value(self)",
        "snippet": "    def test_fillna_limit_and_value(self):\n        # limit and value\n        df = DataFrame(np.random.randn(10, 3))\n        df.iloc[2:7, 0] = np.nan\n        df.iloc[3:5, 2] = np.nan\n\n        expected = df.copy()\n        expected.iloc[2, 0] = 999\n        expected.iloc[3, 2] = 999\n        result = df.fillna(999, limit=1)\n        assert_frame_equal(result, expected)",
        "begin_line": 276,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datelike#288",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datelike(self)",
        "snippet": "    def test_fillna_datelike(self):\n        # with datelike\n        # GH#6344\n        df = DataFrame(\n            {\n                \"Date\": [pd.NaT, Timestamp(\"2014-1-1\")],\n                \"Date2\": [Timestamp(\"2013-1-1\"), pd.NaT],\n            }\n        )\n\n        expected = df.copy()\n        expected[\"Date\"] = expected[\"Date\"].fillna(df.loc[df.index[0], \"Date2\"])\n        result = df.fillna(value={\"Date\": df[\"Date2\"]})\n        assert_frame_equal(result, expected)",
        "begin_line": 288,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware#303",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware(self)",
        "snippet": "    def test_fillna_tzaware(self):\n        # with timezone\n        # GH#15855\n        df = pd.DataFrame({\"A\": [pd.Timestamp(\"2012-11-11 00:00:00+01:00\"), pd.NaT]})\n        exp = pd.DataFrame(\n            {\n                \"A\": [\n                    pd.Timestamp(\"2012-11-11 00:00:00+01:00\"),\n                    pd.Timestamp(\"2012-11-11 00:00:00+01:00\"),\n                ]\n            }\n        )\n        assert_frame_equal(df.fillna(method=\"pad\"), exp)\n\n        df = pd.DataFrame({\"A\": [pd.NaT, pd.Timestamp(\"2012-11-11 00:00:00+01:00\")]})\n        exp = pd.DataFrame(\n            {\n                \"A\": [\n                    pd.Timestamp(\"2012-11-11 00:00:00+01:00\"),\n                    pd.Timestamp(\"2012-11-11 00:00:00+01:00\"),\n                ]\n            }\n        )\n        assert_frame_equal(df.fillna(method=\"bfill\"), exp)",
        "begin_line": 303,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware_different_column#328",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_tzaware_different_column(self)",
        "snippet": "    def test_fillna_tzaware_different_column(self):\n        # with timezone in another column\n        # GH#15522\n        df = pd.DataFrame(\n            {\n                \"A\": pd.date_range(\"20130101\", periods=4, tz=\"US/Eastern\"),\n                \"B\": [1, 2, np.nan, np.nan],\n            }\n        )\n        result = df.fillna(method=\"pad\")\n        expected = pd.DataFrame(\n            {\n                \"A\": pd.date_range(\"20130101\", periods=4, tz=\"US/Eastern\"),\n                \"B\": [1.0, 2.0, 2.0, 2.0],\n            }\n        )\n        assert_frame_equal(result, expected)",
        "begin_line": 328,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_na_actions_categorical#346",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_na_actions_categorical(self)",
        "snippet": "    def test_na_actions_categorical(self):\n\n        cat = Categorical([1, 2, 3, np.nan], categories=[1, 2, 3])\n        vals = [\"a\", \"b\", np.nan, \"d\"]\n        df = DataFrame({\"cats\": cat, \"vals\": vals})\n        cat2 = Categorical([1, 2, 3, 3], categories=[1, 2, 3])\n        vals2 = [\"a\", \"b\", \"b\", \"d\"]\n        df_exp_fill = DataFrame({\"cats\": cat2, \"vals\": vals2})\n        cat3 = Categorical([1, 2, 3], categories=[1, 2, 3])\n        vals3 = [\"a\", \"b\", np.nan]\n        df_exp_drop_cats = DataFrame({\"cats\": cat3, \"vals\": vals3})\n        cat4 = Categorical([1, 2], categories=[1, 2, 3])\n        vals4 = [\"a\", \"b\"]\n        df_exp_drop_all = DataFrame({\"cats\": cat4, \"vals\": vals4})\n\n        # fillna\n        res = df.fillna(value={\"cats\": 3, \"vals\": \"b\"})\n        tm.assert_frame_equal(res, df_exp_fill)\n\n        with pytest.raises(ValueError, match=(\"fill value must be in categories\")):\n            df.fillna(value={\"cats\": 4, \"vals\": \"c\"})\n\n        res = df.fillna(method=\"pad\")\n        tm.assert_frame_equal(res, df_exp_fill)\n\n        # dropna\n        res = df.dropna(subset=[\"cats\"])\n        tm.assert_frame_equal(res, df_exp_drop_cats)\n\n        res = df.dropna()\n        tm.assert_frame_equal(res, df_exp_drop_all)\n\n        # make sure that fillna takes missing values into account\n        c = Categorical([np.nan, \"b\", np.nan], categories=[\"a\", \"b\"])\n        df = pd.DataFrame({\"cats\": c, \"vals\": [1, 2, 3]})\n\n        cat_exp = Categorical([\"a\", \"b\", \"a\"], categories=[\"a\", \"b\"])\n        df_exp = DataFrame({\"cats\": cat_exp, \"vals\": [1, 2, 3]})\n\n        res = df.fillna(\"a\")\n        tm.assert_frame_equal(res, df_exp)",
        "begin_line": 346,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_categorical_nan#388",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_categorical_nan(self)",
        "snippet": "    def test_fillna_categorical_nan(self):\n        # GH 14021\n        # np.nan should always be a valid filler\n        cat = Categorical([np.nan, 2, np.nan])\n        val = Categorical([np.nan, np.nan, np.nan])\n        df = DataFrame({\"cats\": cat, \"vals\": val})\n        with tm.assert_produces_warning(RuntimeWarning):\n            res = df.fillna(df.median())\n        v_exp = [np.nan, np.nan, np.nan]\n        df_exp = DataFrame({\"cats\": [2, 2, 2], \"vals\": v_exp}, dtype=\"category\")\n        tm.assert_frame_equal(res, df_exp)\n\n        result = df.cats.fillna(np.nan)\n        tm.assert_series_equal(result, df.cats)\n\n        result = df.vals.fillna(np.nan)\n        tm.assert_series_equal(result, df.vals)\n\n        idx = pd.DatetimeIndex(\n            [\"2011-01-01 09:00\", \"2016-01-01 23:45\", \"2011-01-01 09:00\", pd.NaT, pd.NaT]\n        )\n        df = DataFrame({\"a\": Categorical(idx)})\n        tm.assert_frame_equal(df.fillna(value=pd.NaT), df)\n\n        idx = pd.PeriodIndex(\n            [\"2011-01\", \"2011-01\", \"2011-01\", pd.NaT, pd.NaT], freq=\"M\"\n        )\n        df = DataFrame({\"a\": Categorical(idx)})\n        tm.assert_frame_equal(df.fillna(value=pd.NaT), df)\n\n        idx = pd.TimedeltaIndex([\"1 days\", \"2 days\", \"1 days\", pd.NaT, pd.NaT])\n        df = DataFrame({\"a\": Categorical(idx)})\n        tm.assert_frame_equal(df.fillna(value=pd.NaT), df)",
        "begin_line": 388,
        "end_line": 420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_downcast#422",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_downcast(self)",
        "snippet": "    def test_fillna_downcast(self):\n        # GH 15277\n        # infer int64 from float64\n        df = pd.DataFrame({\"a\": [1.0, np.nan]})\n        result = df.fillna(0, downcast=\"infer\")\n        expected = pd.DataFrame({\"a\": [1, 0]})\n        assert_frame_equal(result, expected)\n\n        # infer int64 from float64 when fillna value is a dict\n        df = pd.DataFrame({\"a\": [1.0, np.nan]})\n        result = df.fillna({\"a\": 0}, downcast=\"infer\")\n        expected = pd.DataFrame({\"a\": [1, 0]})\n        assert_frame_equal(result, expected)",
        "begin_line": 422,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dtype_conversion#436",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dtype_conversion(self)",
        "snippet": "    def test_fillna_dtype_conversion(self):\n        # make sure that fillna on an empty frame works\n        df = DataFrame(index=[\"A\", \"B\", \"C\"], columns=[1, 2, 3, 4, 5])\n        result = df.dtypes\n        expected = Series([np.dtype(\"object\")] * 5, index=[1, 2, 3, 4, 5])\n        assert_series_equal(result, expected)\n\n        result = df.fillna(1)\n        expected = DataFrame(1, index=[\"A\", \"B\", \"C\"], columns=[1, 2, 3, 4, 5])\n        assert_frame_equal(result, expected)\n\n        # empty block\n        df = DataFrame(index=range(3), columns=[\"A\", \"B\"], dtype=\"float64\")\n        result = df.fillna(\"nan\")\n        expected = DataFrame(\"nan\", index=range(3), columns=[\"A\", \"B\"])\n        assert_frame_equal(result, expected)\n\n        # equiv of replace\n        df = DataFrame(dict(A=[1, np.nan], B=[1.0, 2.0]))\n        for v in [\"\", 1, np.nan, 1.0]:\n            expected = df.replace(np.nan, v)\n            result = df.fillna(v)\n            assert_frame_equal(result, expected)",
        "begin_line": 436,
        "end_line": 458,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime_columns#460",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime_columns(self)",
        "snippet": "    def test_fillna_datetime_columns(self):\n        # GH 7095\n        df = pd.DataFrame(\n            {\n                \"A\": [-1, -2, np.nan],\n                \"B\": date_range(\"20130101\", periods=3),\n                \"C\": [\"foo\", \"bar\", None],\n                \"D\": [\"foo2\", \"bar2\", None],\n            },\n            index=date_range(\"20130110\", periods=3),\n        )\n        result = df.fillna(\"?\")\n        expected = pd.DataFrame(\n            {\n                \"A\": [-1, -2, \"?\"],\n                \"B\": date_range(\"20130101\", periods=3),\n                \"C\": [\"foo\", \"bar\", \"?\"],\n                \"D\": [\"foo2\", \"bar2\", \"?\"],\n            },\n            index=date_range(\"20130110\", periods=3),\n        )\n        tm.assert_frame_equal(result, expected)\n\n        df = pd.DataFrame(\n            {\n                \"A\": [-1, -2, np.nan],\n                \"B\": [pd.Timestamp(\"2013-01-01\"), pd.Timestamp(\"2013-01-02\"), pd.NaT],\n                \"C\": [\"foo\", \"bar\", None],\n                \"D\": [\"foo2\", \"bar2\", None],\n            },\n            index=date_range(\"20130110\", periods=3),\n        )\n        result = df.fillna(\"?\")\n        expected = pd.DataFrame(\n            {\n                \"A\": [-1, -2, \"?\"],\n                \"B\": [pd.Timestamp(\"2013-01-01\"), pd.Timestamp(\"2013-01-02\"), \"?\"],\n                \"C\": [\"foo\", \"bar\", \"?\"],\n                \"D\": [\"foo2\", \"bar2\", \"?\"],\n            },\n            index=pd.date_range(\"20130110\", periods=3),\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 460,
        "end_line": 502,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_ffill#504",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_ffill(self, datetime_frame)",
        "snippet": "    def test_ffill(self, datetime_frame):\n        datetime_frame[\"A\"][:5] = np.nan\n        datetime_frame[\"A\"][-5:] = np.nan\n\n        assert_frame_equal(\n            datetime_frame.ffill(), datetime_frame.fillna(method=\"ffill\")\n        )",
        "begin_line": 504,
        "end_line": 510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_bfill#512",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_bfill(self, datetime_frame)",
        "snippet": "    def test_bfill(self, datetime_frame):\n        datetime_frame[\"A\"][:5] = np.nan\n        datetime_frame[\"A\"][-5:] = np.nan\n\n        assert_frame_equal(\n            datetime_frame.bfill(), datetime_frame.fillna(method=\"bfill\")\n        )",
        "begin_line": 512,
        "end_line": 518,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_pad_backfill_limit#520",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_pad_backfill_limit(self)",
        "snippet": "    def test_frame_pad_backfill_limit(self):\n        index = np.arange(10)\n        df = DataFrame(np.random.randn(10, 4), index=index)\n\n        result = df[:2].reindex(index, method=\"pad\", limit=5)\n\n        expected = df[:2].reindex(index).fillna(method=\"pad\")\n        expected.values[-3:] = np.nan\n        tm.assert_frame_equal(result, expected)\n\n        result = df[-2:].reindex(index, method=\"backfill\", limit=5)\n\n        expected = df[-2:].reindex(index).fillna(method=\"backfill\")\n        expected.values[:3] = np.nan\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 520,
        "end_line": 534,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_fillna_limit#536",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_fillna_limit(self)",
        "snippet": "    def test_frame_fillna_limit(self):\n        index = np.arange(10)\n        df = DataFrame(np.random.randn(10, 4), index=index)\n\n        result = df[:2].reindex(index)\n        result = result.fillna(method=\"pad\", limit=5)\n\n        expected = df[:2].reindex(index).fillna(method=\"pad\")\n        expected.values[-3:] = np.nan\n        tm.assert_frame_equal(result, expected)\n\n        result = df[-2:].reindex(index)\n        result = result.fillna(method=\"backfill\", limit=5)\n\n        expected = df[-2:].reindex(index).fillna(method=\"backfill\")\n        expected.values[:3] = np.nan\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 536,
        "end_line": 552,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_skip_certain_blocks#554",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_skip_certain_blocks(self)",
        "snippet": "    def test_fillna_skip_certain_blocks(self):\n        # don't try to fill boolean, int blocks\n\n        df = DataFrame(np.random.randn(10, 4).astype(int))\n\n        # it works!\n        df.fillna(np.nan)",
        "begin_line": 554,
        "end_line": 560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_positive_limit#563",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_positive_limit(self, type)",
        "snippet": "    def test_fillna_positive_limit(self, type):\n        df = DataFrame(np.random.randn(10, 4)).astype(type)\n\n        msg = \"Limit must be greater than 0\"\n        with pytest.raises(ValueError, match=msg):\n            df.fillna(0, limit=-5)",
        "begin_line": 563,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_integer_limit#571",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_integer_limit(self, type)",
        "snippet": "    def test_fillna_integer_limit(self, type):\n        df = DataFrame(np.random.randn(10, 4)).astype(type)\n\n        msg = \"Limit must be an integer\"\n        with pytest.raises(ValueError, match=msg):\n            df.fillna(0, limit=0.5)",
        "begin_line": 571,
        "end_line": 576,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_inplace#578",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_inplace(self)",
        "snippet": "    def test_fillna_inplace(self):\n        df = DataFrame(np.random.randn(10, 4))\n        df[1][:4] = np.nan\n        df[3][-4:] = np.nan\n\n        expected = df.fillna(value=0)\n        assert expected is not df\n\n        df.fillna(value=0, inplace=True)\n        tm.assert_frame_equal(df, expected)\n\n        expected = df.fillna(value={0: 0}, inplace=True)\n        assert expected is None\n\n        df[1][:4] = np.nan\n        df[3][-4:] = np.nan\n        expected = df.fillna(method=\"ffill\")\n        assert expected is not df\n\n        df.fillna(method=\"ffill\", inplace=True)\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 578,
        "end_line": 598,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dict_series#600",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dict_series(self)",
        "snippet": "    def test_fillna_dict_series(self):\n        df = DataFrame(\n            {\n                \"a\": [np.nan, 1, 2, np.nan, np.nan],\n                \"b\": [1, 2, 3, np.nan, np.nan],\n                \"c\": [np.nan, 1, 2, 3, 4],\n            }\n        )\n\n        result = df.fillna({\"a\": 0, \"b\": 5})\n\n        expected = df.copy()\n        expected[\"a\"] = expected[\"a\"].fillna(0)\n        expected[\"b\"] = expected[\"b\"].fillna(5)\n        assert_frame_equal(result, expected)\n\n        # it works\n        result = df.fillna({\"a\": 0, \"b\": 5, \"d\": 7})\n\n        # Series treated same as dict\n        result = df.fillna(df.max())\n        expected = df.fillna(df.max().to_dict())\n        assert_frame_equal(result, expected)\n\n        # disable this for now\n        with pytest.raises(NotImplementedError, match=\"column by column\"):\n            df.fillna(df.max(1), axis=1)",
        "begin_line": 600,
        "end_line": 626,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dataframe#628",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dataframe(self)",
        "snippet": "    def test_fillna_dataframe(self):\n        # GH 8377\n        df = DataFrame(\n            {\n                \"a\": [np.nan, 1, 2, np.nan, np.nan],\n                \"b\": [1, 2, 3, np.nan, np.nan],\n                \"c\": [np.nan, 1, 2, 3, 4],\n            },\n            index=list(\"VWXYZ\"),\n        )\n\n        # df2 may have different index and columns\n        df2 = DataFrame(\n            {\n                \"a\": [np.nan, 10, 20, 30, 40],\n                \"b\": [50, 60, 70, 80, 90],\n                \"foo\": [\"bar\"] * 5,\n            },\n            index=list(\"VWXuZ\"),\n        )\n\n        result = df.fillna(df2)\n\n        # only those columns and indices which are shared get filled\n        expected = DataFrame(\n            {\n                \"a\": [np.nan, 1, 2, np.nan, 40],\n                \"b\": [1, 2, 3, np.nan, 90],\n                \"c\": [np.nan, 1, 2, 3, 4],\n            },\n            index=list(\"VWXYZ\"),\n        )\n\n        assert_frame_equal(result, expected)",
        "begin_line": 628,
        "end_line": 661,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_columns#663",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_columns(self)",
        "snippet": "    def test_fillna_columns(self):\n        df = DataFrame(np.random.randn(10, 10))\n        df.values[:, ::2] = np.nan\n\n        result = df.fillna(method=\"ffill\", axis=1)\n        expected = df.T.fillna(method=\"pad\").T\n        assert_frame_equal(result, expected)\n\n        df.insert(6, \"foo\", 5)\n        result = df.fillna(method=\"ffill\", axis=1)\n        expected = df.astype(float).fillna(method=\"ffill\", axis=1)\n        assert_frame_equal(result, expected)",
        "begin_line": 663,
        "end_line": 674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_method#676",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_method(self, float_frame)",
        "snippet": "    def test_fillna_invalid_method(self, float_frame):\n        with pytest.raises(ValueError, match=\"ffil\"):\n            float_frame.fillna(method=\"ffil\")",
        "begin_line": 676,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_value#680",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_value(self, float_frame)",
        "snippet": "    def test_fillna_invalid_value(self, float_frame):\n        # list\n        msg = '\"value\" parameter must be a scalar or dict, but you passed' ' a \"{}\"'\n        with pytest.raises(TypeError, match=msg.format(\"list\")):\n            float_frame.fillna([1, 2])\n        # tuple\n        with pytest.raises(TypeError, match=msg.format(\"tuple\")):\n            float_frame.fillna((1, 2))\n        # frame with series\n        msg = (\n            '\"value\" parameter must be a scalar, dict or Series, but you'\n            ' passed a \"DataFrame\"'\n        )\n        with pytest.raises(TypeError, match=msg):\n            float_frame.iloc[:, 0].fillna(float_frame)",
        "begin_line": 680,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_col_reordering#696",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_col_reordering(self)",
        "snippet": "    def test_fillna_col_reordering(self):\n        cols = [\"COL.\" + str(i) for i in range(5, 0, -1)]\n        data = np.random.rand(20, 5)\n        df = DataFrame(index=range(20), columns=cols, data=data)\n        filled = df.fillna(method=\"ffill\")\n        assert df.columns.tolist() == filled.columns.tolist()",
        "begin_line": 696,
        "end_line": 701,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_corner#703",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_corner(self, float_frame, float_string_frame)",
        "snippet": "    def test_fill_corner(self, float_frame, float_string_frame):\n        mf = float_string_frame\n        mf.loc[mf.index[5:20], \"foo\"] = np.nan\n        mf.loc[mf.index[-10:], \"A\"] = np.nan\n\n        filled = float_string_frame.fillna(value=0)\n        assert (filled.loc[filled.index[5:20], \"foo\"] == 0).all()\n        del float_string_frame[\"foo\"]\n\n        empty_float = float_frame.reindex(columns=[])\n\n        # TODO(wesm): unused?\n        result = empty_float.fillna(value=0)  # noqa",
        "begin_line": 703,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_value_when_combine_const#717",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameMissingData",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_value_when_combine_const(self)",
        "snippet": "    def test_fill_value_when_combine_const(self):\n        # GH12723\n        dat = np.array([0, 1, np.nan, 3, 4, 5], dtype=\"float\")\n        df = DataFrame({\"foo\": dat}, index=range(6))\n\n        exp = df.fillna(0).add(2)\n        res = df.add(2, fill_value=0)\n        assert_frame_equal(res, exp)",
        "begin_line": 717,
        "end_line": 724,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_basic#728",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_basic(self)",
        "snippet": "    def test_interp_basic(self):\n        df = DataFrame(\n            {\n                \"A\": [1, 2, np.nan, 4],\n                \"B\": [1, 4, 9, np.nan],\n                \"C\": [1, 2, 3, 5],\n                \"D\": list(\"abcd\"),\n            }\n        )\n        expected = DataFrame(\n            {\n                \"A\": [1.0, 2.0, 3.0, 4.0],\n                \"B\": [1.0, 4.0, 9.0, 9.0],\n                \"C\": [1, 2, 3, 5],\n                \"D\": list(\"abcd\"),\n            }\n        )\n        result = df.interpolate()\n        assert_frame_equal(result, expected)\n\n        result = df.set_index(\"C\").interpolate()\n        expected = df.set_index(\"C\")\n        expected.loc[3, \"A\"] = 3\n        expected.loc[5, \"B\"] = 9\n        assert_frame_equal(result, expected)",
        "begin_line": 728,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_bad_method#754",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_bad_method(self)",
        "snippet": "    def test_interp_bad_method(self):\n        df = DataFrame(\n            {\n                \"A\": [1, 2, np.nan, 4],\n                \"B\": [1, 4, 9, np.nan],\n                \"C\": [1, 2, 3, 5],\n                \"D\": list(\"abcd\"),\n            }\n        )\n        with pytest.raises(ValueError):\n            df.interpolate(method=\"not_a_method\")",
        "begin_line": 754,
        "end_line": 764,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_combo#766",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_combo(self)",
        "snippet": "    def test_interp_combo(self):\n        df = DataFrame(\n            {\n                \"A\": [1.0, 2.0, np.nan, 4.0],\n                \"B\": [1, 4, 9, np.nan],\n                \"C\": [1, 2, 3, 5],\n                \"D\": list(\"abcd\"),\n            }\n        )\n\n        result = df[\"A\"].interpolate()\n        expected = Series([1.0, 2.0, 3.0, 4.0], name=\"A\")\n        assert_series_equal(result, expected)\n\n        result = df[\"A\"].interpolate(downcast=\"infer\")\n        expected = Series([1, 2, 3, 4], name=\"A\")\n        assert_series_equal(result, expected)",
        "begin_line": 766,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_nan_idx#784",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_nan_idx(self)",
        "snippet": "    def test_interp_nan_idx(self):\n        df = DataFrame({\"A\": [1, 2, np.nan, 4], \"B\": [np.nan, 2, 3, 4]})\n        df = df.set_index(\"A\")\n        with pytest.raises(NotImplementedError):\n            df.interpolate(method=\"values\")",
        "begin_line": 784,
        "end_line": 788,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_various#791",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_various(self)",
        "snippet": "    def test_interp_various(self):\n        df = DataFrame(\n            {\"A\": [1, 2, np.nan, 4, 5, np.nan, 7], \"C\": [1, 2, 3, 5, 8, 13, 21]}\n        )\n        df = df.set_index(\"C\")\n        expected = df.copy()\n        result = df.interpolate(method=\"polynomial\", order=1)\n\n        expected.A.loc[3] = 2.66666667\n        expected.A.loc[13] = 5.76923076\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(method=\"cubic\")\n        # GH #15662.\n        expected.A.loc[3] = 2.81547781\n        expected.A.loc[13] = 5.52964175\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(method=\"nearest\")\n        expected.A.loc[3] = 2\n        expected.A.loc[13] = 5\n        assert_frame_equal(result, expected, check_dtype=False)\n\n        result = df.interpolate(method=\"quadratic\")\n        expected.A.loc[3] = 2.82150771\n        expected.A.loc[13] = 6.12648668\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(method=\"slinear\")\n        expected.A.loc[3] = 2.66666667\n        expected.A.loc[13] = 5.76923077\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(method=\"zero\")\n        expected.A.loc[3] = 2.0\n        expected.A.loc[13] = 5\n        assert_frame_equal(result, expected, check_dtype=False)",
        "begin_line": 791,
        "end_line": 827,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_alt_scipy#830",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_alt_scipy(self)",
        "snippet": "    def test_interp_alt_scipy(self):\n        df = DataFrame(\n            {\"A\": [1, 2, np.nan, 4, 5, np.nan, 7], \"C\": [1, 2, 3, 5, 8, 13, 21]}\n        )\n        result = df.interpolate(method=\"barycentric\")\n        expected = df.copy()\n        expected.loc[2, \"A\"] = 3\n        expected.loc[5, \"A\"] = 6\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(method=\"barycentric\", downcast=\"infer\")\n        assert_frame_equal(result, expected.astype(np.int64))\n\n        result = df.interpolate(method=\"krogh\")\n        expectedk = df.copy()\n        expectedk[\"A\"] = expected[\"A\"]\n        assert_frame_equal(result, expectedk)\n\n        _skip_if_no_pchip()\n\n        result = df.interpolate(method=\"pchip\")\n        expected.loc[2, \"A\"] = 3\n        expected.loc[5, \"A\"] = 6.0\n\n        assert_frame_equal(result, expected)",
        "begin_line": 830,
        "end_line": 854,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_rowwise#856",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_rowwise(self)",
        "snippet": "    def test_interp_rowwise(self):\n        df = DataFrame(\n            {\n                0: [1, 2, np.nan, 4],\n                1: [2, 3, 4, np.nan],\n                2: [np.nan, 4, 5, 6],\n                3: [4, np.nan, 6, 7],\n                4: [1, 2, 3, 4],\n            }\n        )\n        result = df.interpolate(axis=1)\n        expected = df.copy()\n        expected.loc[3, 1] = 5\n        expected.loc[0, 2] = 3\n        expected.loc[1, 3] = 3\n        expected[4] = expected[4].astype(np.float64)\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(axis=1, method=\"values\")\n        assert_frame_equal(result, expected)\n\n        result = df.interpolate(axis=0)\n        expected = df.interpolate()\n        assert_frame_equal(result, expected)",
        "begin_line": 856,
        "end_line": 879,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_axis_names#889",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_axis_names(self, axis_name, axis_number)",
        "snippet": "    def test_interp_axis_names(self, axis_name, axis_number):\n        # GH 29132: test axis names\n        data = {0: [0, np.nan, 6], 1: [1, np.nan, 7], 2: [2, 5, 8]}\n\n        df = DataFrame(data, dtype=np.float64)\n        result = df.interpolate(axis=axis_name, method=\"linear\")\n        expected = df.interpolate(axis=axis_number, method=\"linear\")\n        assert_frame_equal(result, expected)",
        "begin_line": 889,
        "end_line": 896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_rowwise_alt#898",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_rowwise_alt(self)",
        "snippet": "    def test_rowwise_alt(self):\n        df = DataFrame(\n            {\n                0: [0, 0.5, 1.0, np.nan, 4, 8, np.nan, np.nan, 64],\n                1: [1, 2, 3, 4, 3, 2, 1, 0, -1],\n            }\n        )\n        df.interpolate(axis=0)",
        "begin_line": 898,
        "end_line": 905,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_leading_nans#910",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_leading_nans(self, check_scipy)",
        "snippet": "    def test_interp_leading_nans(self, check_scipy):\n        df = DataFrame(\n            {\"A\": [np.nan, np.nan, 0.5, 0.25, 0], \"B\": [np.nan, -3, -3.5, np.nan, -4]}\n        )\n        result = df.interpolate()\n        expected = df.copy()\n        expected[\"B\"].loc[3] = -3.75\n        assert_frame_equal(result, expected)\n\n        if check_scipy:\n            result = df.interpolate(method=\"polynomial\", order=1)\n            assert_frame_equal(result, expected)",
        "begin_line": 910,
        "end_line": 921,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_only_mixed#923",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_only_mixed(self)",
        "snippet": "    def test_interp_raise_on_only_mixed(self):\n        df = DataFrame(\n            {\n                \"A\": [1, 2, np.nan, 4],\n                \"B\": [\"a\", \"b\", \"c\", \"d\"],\n                \"C\": [np.nan, 2, 5, 7],\n                \"D\": [np.nan, np.nan, 9, 9],\n                \"E\": [1, 2, 3, 4],\n            }\n        )\n        with pytest.raises(TypeError):\n            df.interpolate(axis=1)",
        "begin_line": 923,
        "end_line": 934,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_all_object_dtype#936",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_all_object_dtype(self)",
        "snippet": "    def test_interp_raise_on_all_object_dtype(self):\n        # GH 22985\n        df = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, dtype=\"object\")\n        msg = (\n            \"Cannot interpolate with all object-dtype columns \"\n            \"in the DataFrame. Try setting at least one \"\n            \"column to a numeric dtype.\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            df.interpolate()",
        "begin_line": 936,
        "end_line": 945,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace#947",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace(self)",
        "snippet": "    def test_interp_inplace(self):\n        df = DataFrame({\"a\": [1.0, 2.0, np.nan, 4.0]})\n        expected = DataFrame({\"a\": [1.0, 2.0, 3.0, 4.0]})\n        result = df.copy()\n        result[\"a\"].interpolate(inplace=True)\n        assert_frame_equal(result, expected)\n\n        result = df.copy()\n        result[\"a\"].interpolate(inplace=True, downcast=\"infer\")\n        assert_frame_equal(result, expected.astype(\"int64\"))",
        "begin_line": 947,
        "end_line": 956,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace_row#958",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace_row(self)",
        "snippet": "    def test_interp_inplace_row(self):\n        # GH 10395\n        result = DataFrame(\n            {\"a\": [1.0, 2.0, 3.0, 4.0], \"b\": [np.nan, 2.0, 3.0, 4.0], \"c\": [3, 2, 2, 2]}\n        )\n        expected = result.interpolate(method=\"linear\", axis=1, inplace=False)\n        result.interpolate(method=\"linear\", axis=1, inplace=True)\n        assert_frame_equal(result, expected)",
        "begin_line": 958,
        "end_line": 965,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_ignore_all_good#967",
        "src_path": "pandas/tests/frame/test_missing.py",
        "class_name": "pandas.tests.frame.test_missing.TestDataFrameInterpolate",
        "signature": "pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_ignore_all_good(self)",
        "snippet": "    def test_interp_ignore_all_good(self):\n        # GH\n        df = DataFrame(\n            {\n                \"A\": [1, 2, np.nan, 4],\n                \"B\": [1, 2, 3, 4],\n                \"C\": [1.0, 2.0, np.nan, 4.0],\n                \"D\": [1.0, 2.0, 3.0, 4.0],\n            }\n        )\n        expected = DataFrame(\n            {\n                \"A\": np.array([1, 2, 3, 4], dtype=\"float64\"),\n                \"B\": np.array([1, 2, 3, 4], dtype=\"int64\"),\n                \"C\": np.array([1.0, 2.0, 3, 4.0], dtype=\"float64\"),\n                \"D\": np.array([1.0, 2.0, 3.0, 4.0], dtype=\"float64\"),\n            }\n        )\n\n        result = df.interpolate(downcast=None)\n        assert_frame_equal(result, expected)\n\n        # all good\n        result = df[[\"B\", \"D\"]].interpolate(downcast=None)\n        assert_frame_equal(result, df[[\"B\", \"D\"]])",
        "begin_line": 967,
        "end_line": 991,
        "comment": "",
        "is_bug": false
    }
]