[
    {
        "name": "pandas.tests.arrays.test_integer.make_data#25",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.make_data()",
        "snippet": "def make_data():\n    return list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100]",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.dtype#41",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.data#46",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(make_data(), dtype=dtype)",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.data_missing#51",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.all_data#56",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_dtypes#64",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_dtypes(dtype)",
        "snippet": "def test_dtypes(dtype):\n    # smoke tests on auto dtype construction\n\n    if dtype.is_signed_integer:\n        assert np.dtype(dtype.type).kind == \"i\"\n    else:\n        assert np.dtype(dtype.type).kind == \"u\"\n    assert dtype.name is not None",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_repr_dtype#87",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_repr_dtype(dtype, expected)",
        "snippet": "def test_repr_dtype(dtype, expected):\n    assert repr(dtype) == expected",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_repr_array#91",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_repr_array()",
        "snippet": "def test_repr_array():\n    result = repr(integer_array([1, None, 3]))\n    expected = \"<IntegerArray>\\n[1, <NA>, 3]\\nLength: 3, dtype: Int64\"\n    assert result == expected",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_repr_array_long#97",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_repr_array_long()",
        "snippet": "def test_repr_array_long():\n    data = integer_array([1, 2, None] * 1000)\n    expected = (\n        \"<IntegerArray>\\n\"\n        \"[   1,    2, <NA>,    1,    2, <NA>,    1,    2, <NA>,    1,\\n\"\n        \" ...\\n\"\n        \" <NA>,    1,    2, <NA>,    1,    2, <NA>,    1,    2, <NA>]\\n\"\n        \"Length: 3000, dtype: Int64\"\n    )\n    result = repr(data)\n    assert result == expected",
        "begin_line": 97,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestConstructors.test_uses_pandas_na#111",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestConstructors",
        "signature": "pandas.tests.arrays.test_integer.TestConstructors.test_uses_pandas_na(self)",
        "snippet": "    def test_uses_pandas_na(self):\n        a = pd.array([1, None], dtype=pd.Int64Dtype())\n        assert a[1] is pd.NA",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestConstructors.test_from_dtype_from_float#115",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestConstructors",
        "signature": "pandas.tests.arrays.test_integer.TestConstructors.test_from_dtype_from_float(self, data)",
        "snippet": "    def test_from_dtype_from_float(self, data):\n        # construct from our dtype & string dtype\n        dtype = data.dtype\n\n        # from float\n        expected = pd.Series(data)\n        result = pd.Series(\n            data.to_numpy(na_value=np.nan, dtype=\"float\"), dtype=str(dtype)\n        )\n        tm.assert_series_equal(result, expected)\n\n        # from int / list\n        expected = pd.Series(data)\n        result = pd.Series(np.array(data).tolist(), dtype=str(dtype))\n        tm.assert_series_equal(result, expected)\n\n        # from int / array\n        expected = pd.Series(data).dropna().reset_index(drop=True)\n        dropped = np.array(data.dropna()).astype(np.dtype((dtype.type)))\n        result = pd.Series(dropped, dtype=str(dtype))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 115,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_divmod_op#139",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_divmod_op(self, s, op, other, exc=None)",
        "snippet": "    def _check_divmod_op(self, s, op, other, exc=None):\n        super()._check_divmod_op(s, op, other, None)",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op#142",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op(self, s, op_name, other, exc=None)",
        "snippet": "    def _check_op(self, s, op_name, other, exc=None):\n        op = self.get_op_from_name(op_name)\n        result = op(s, other)\n\n        # compute expected\n        mask = s.isna()\n\n        # if s is a DataFrame, squeeze to a Series\n        # for comparison\n        if isinstance(s, pd.DataFrame):\n            result = result.squeeze()\n            s = s.squeeze()\n            mask = mask.squeeze()\n\n        # other array is an Integer\n        if isinstance(other, IntegerArray):\n            omask = getattr(other, \"mask\", None)\n            mask = getattr(other, \"data\", other)\n            if omask is not None:\n                mask |= omask\n\n        # 1 ** na is na, so need to unmask those\n        if op_name == \"__pow__\":\n            mask = np.where(~s.isna() & (s == 1), False, mask)\n\n        elif op_name == \"__rpow__\":\n            other_is_one = other == 1\n            if isinstance(other_is_one, pd.Series):\n                other_is_one = other_is_one.fillna(False)\n            mask = np.where(other_is_one, False, mask)\n\n        # float result type or float op\n        if (\n            is_float_dtype(other)\n            or is_float(other)\n            or op_name in [\"__rtruediv__\", \"__truediv__\", \"__rdiv__\", \"__div__\"]\n        ):\n            rs = s.astype(\"float\")\n            expected = op(rs, other)\n            self._check_op_float(result, expected, mask, s, op_name, other)\n\n        # integer result type\n        else:\n            rs = pd.Series(s.values._data, name=s.name)\n            expected = op(rs, other)\n            self._check_op_integer(result, expected, mask, s, op_name, other)",
        "begin_line": 142,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_float#189",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_float(self, result, expected, mask, s, op_name, other)",
        "snippet": "    def _check_op_float(self, result, expected, mask, s, op_name, other):\n        # check comparisons that are resulting in float dtypes\n\n        expected[mask] = np.nan\n        if \"floordiv\" in op_name:\n            # Series op sets 1//0 to np.inf, which IntegerArray does not do (yet)\n            mask2 = np.isinf(expected) & np.isnan(result)\n            expected[mask2] = np.nan\n        tm.assert_series_equal(result, expected)",
        "begin_line": 189,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_integer#199",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps._check_op_integer(self, result, expected, mask, s, op_name, other)",
        "snippet": "    def _check_op_integer(self, result, expected, mask, s, op_name, other):\n        # check comparisons that are resulting in integer dtypes\n\n        # to compare properly, we convert the expected\n        # to float, mask to nans and convert infs\n        # if we have uints then we process as uints\n        # then convert to float\n        # and we ultimately want to create a IntArray\n        # for comparisons\n\n        fill_value = 0\n\n        # mod/rmod turn floating 0 into NaN while\n        # integer works as expected (no nan)\n        if op_name in [\"__mod__\", \"__rmod__\"]:\n            if is_scalar(other):\n                if other == 0:\n                    expected[s.values == 0] = 0\n                else:\n                    expected = expected.fillna(0)\n            else:\n                expected[\n                    (s.values == 0).fillna(False)\n                    & ((expected == 0).fillna(False) | expected.isna())\n                ] = 0\n        try:\n            expected[\n                ((expected == np.inf) | (expected == -np.inf)).fillna(False)\n            ] = fill_value\n            original = expected\n            expected = expected.astype(s.dtype)\n\n        except ValueError:\n\n            expected = expected.astype(float)\n            expected[\n                ((expected == np.inf) | (expected == -np.inf)).fillna(False)\n            ] = fill_value\n            original = expected\n            expected = expected.astype(s.dtype)\n\n        expected[mask] = pd.NA\n\n        # assert that the expected astype is ok\n        # (skip for unsigned as they have wrap around)\n        if not s.dtype.is_unsigned_integer:\n            original = pd.Series(original)\n\n            # we need to fill with 0's to emulate what an astype('int') does\n            # (truncation) for certain ops\n            if op_name in [\"__rtruediv__\", \"__rdiv__\"]:\n                mask |= original.isna()\n                original = original.fillna(0).astype(\"int\")\n\n            original = original.astype(\"float\")\n            original[mask] = np.nan\n            tm.assert_series_equal(original, expected.astype(\"float\"))\n\n        # assert our expected result\n        tm.assert_series_equal(result, expected)",
        "begin_line": 199,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_integer_array#260",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_integer_array(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_integer_array(self, data, all_arithmetic_operators):\n        # we operate with a rhs of an integer array\n\n        op = all_arithmetic_operators\n\n        s = pd.Series(data)\n        rhs = pd.Series([1] * len(data), dtype=data.dtype)\n        rhs.iloc[-1] = np.nan\n\n        self._check_op(s, op, rhs)",
        "begin_line": 260,
        "end_line": 269,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_scalar#271",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_scalar(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_series_with_scalar(self, data, all_arithmetic_operators):\n        # scalar\n        op = all_arithmetic_operators\n        s = pd.Series(data)\n        self._check_op(s, op, 1, exc=TypeError)",
        "begin_line": 271,
        "end_line": 275,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_frame_with_scalar#277",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_frame_with_scalar(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_frame_with_scalar(self, data, all_arithmetic_operators):\n        # frame & scalar\n        op = all_arithmetic_operators\n        df = pd.DataFrame({\"A\": data})\n        self._check_op(df, op, 1, exc=TypeError)",
        "begin_line": 277,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_array#283",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_series_with_array(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_series_with_array(self, data, all_arithmetic_operators):\n        # ndarray & other series\n        op = all_arithmetic_operators\n        s = pd.Series(data)\n        other = np.ones(len(s), dtype=s.dtype.type)\n        self._check_op(s, op, other, exc=TypeError)",
        "begin_line": 283,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_coerce_scalar#290",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_coerce_scalar(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_coerce_scalar(self, data, all_arithmetic_operators):\n\n        op = all_arithmetic_operators\n        s = pd.Series(data)\n\n        other = 0.01\n        self._check_op(s, op, other)",
        "begin_line": 290,
        "end_line": 296,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arithmetic_conversion#299",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arithmetic_conversion(self, all_arithmetic_operators, other)",
        "snippet": "    def test_arithmetic_conversion(self, all_arithmetic_operators, other):\n        # if we have a float operand we should have a float result\n        # if that is equal to an integer\n        op = self.get_op_from_name(all_arithmetic_operators)\n\n        s = pd.Series([1, 2, 3], dtype=\"Int64\")\n        result = op(s, other)\n        assert result.dtype is np.dtype(\"float\")",
        "begin_line": 299,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_len_mismatch#308",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_len_mismatch(self, all_arithmetic_operators)",
        "snippet": "    def test_arith_len_mismatch(self, all_arithmetic_operators):\n        # operating with a list-like with non-matching length raises\n        op = self.get_op_from_name(all_arithmetic_operators)\n        other = np.array([1.0])\n\n        s = pd.Series([1, 2, 3], dtype=\"Int64\")\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            op(s, other)",
        "begin_line": 308,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_zero_dim_ndarray#318",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_arith_zero_dim_ndarray(self, other)",
        "snippet": "    def test_arith_zero_dim_ndarray(self, other):\n        arr = integer_array([1, None, 2])\n        result = arr + np.array(other)\n        expected = arr + other\n        tm.assert_equal(result, expected)",
        "begin_line": 318,
        "end_line": 322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_error#324",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_error(self, data, all_arithmetic_operators)",
        "snippet": "    def test_error(self, data, all_arithmetic_operators):\n        # invalid ops\n\n        op = all_arithmetic_operators\n        s = pd.Series(data)\n        ops = getattr(s, op)\n        opa = getattr(data, op)\n\n        # invalid scalars\n        with pytest.raises(TypeError):\n            ops(\"foo\")\n        with pytest.raises(TypeError):\n            ops(pd.Timestamp(\"20180101\"))\n\n        # invalid array-likes\n        with pytest.raises(TypeError):\n            ops(pd.Series(\"foo\", index=s.index))\n\n        if op != \"__rpow__\":\n            # TODO(extension)\n            # rpow with a datetimelike coerces the integer array incorrectly\n            with pytest.raises(TypeError):\n                ops(pd.Series(pd.date_range(\"20180101\", periods=len(s))))\n\n        # 2d\n        result = opa(pd.DataFrame({\"A\": s}))\n        assert result is NotImplemented\n\n        with pytest.raises(NotImplementedError):\n            opa(np.arange(len(s)).reshape(-1, len(s)))",
        "begin_line": 324,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_divide_by_zero#356",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_divide_by_zero(self, zero, negative)",
        "snippet": "    def test_divide_by_zero(self, zero, negative):\n        # https://github.com/pandas-dev/pandas/issues/27398\n        a = pd.array([0, 1, -1, None], dtype=\"Int64\")\n        result = a / zero\n        expected = np.array([np.nan, np.inf, -np.inf, np.nan])\n        if negative:\n            expected *= -1\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 356,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_scalar#365",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_scalar(self)",
        "snippet": "    def test_pow_scalar(self):\n        a = pd.array([-1, 0, 1, None, 2], dtype=\"Int64\")\n        result = a ** 0\n        expected = pd.array([1, 1, 1, 1, 1], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = a ** 1\n        expected = pd.array([-1, 0, 1, None, 2], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = a ** pd.NA\n        expected = pd.array([None, None, 1, None, None], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = a ** np.nan\n        expected = np.array([np.nan, np.nan, 1, np.nan, np.nan], dtype=\"float64\")\n        tm.assert_numpy_array_equal(result, expected)\n\n        # reversed\n        a = a[1:]  # Can't raise integers to negative powers.\n\n        result = 0 ** a\n        expected = pd.array([1, 0, None, 0], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = 1 ** a\n        expected = pd.array([1, 1, 1, 1], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = pd.NA ** a\n        expected = pd.array([1, None, None, None], dtype=\"Int64\")\n        tm.assert_extension_array_equal(result, expected)\n\n        result = np.nan ** a\n        expected = np.array([1, np.nan, np.nan, np.nan], dtype=\"float64\")\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 365,
        "end_line": 400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_array#402",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_pow_array(self)",
        "snippet": "    def test_pow_array(self):\n        a = integer_array([0, 0, 0, 1, 1, 1, None, None, None])\n        b = integer_array([0, 1, None, 0, 1, None, 0, 1, None])\n        result = a ** b\n        expected = integer_array([1, 0, None, 1, 1, 1, 1, None, None])\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 402,
        "end_line": 407,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_rpow_one_to_na#409",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.arrays.test_integer.TestArithmeticOps.test_rpow_one_to_na(self)",
        "snippet": "    def test_rpow_one_to_na(self):\n        # https://github.com/pandas-dev/pandas/issues/22022\n        # https://github.com/pandas-dev/pandas/issues/29997\n        arr = integer_array([np.nan, np.nan])\n        result = np.array([1.0, 2.0]) ** arr\n        expected = np.array([1.0, np.nan])\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 409,
        "end_line": 415,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps._compare_other#419",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps._compare_other(self, data, op_name, other)",
        "snippet": "    def _compare_other(self, data, op_name, other):\n        op = self.get_op_from_name(op_name)\n\n        # array\n        result = pd.Series(op(data, other))\n        expected = pd.Series(op(data._data, other), dtype=\"boolean\")\n\n        # fill the nan locations\n        expected[data._mask] = pd.NA\n\n        tm.assert_series_equal(result, expected)\n\n        # series\n        s = pd.Series(data)\n        result = op(s, other)\n\n        expected = op(pd.Series(data._data), other)\n\n        # fill the nan locations\n        expected[data._mask] = pd.NA\n        expected = expected.astype(\"boolean\")\n\n        tm.assert_series_equal(result, expected)",
        "begin_line": 419,
        "end_line": 441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_scalar#444",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_scalar(self, other, all_compare_operators)",
        "snippet": "    def test_scalar(self, other, all_compare_operators):\n        op = self.get_op_from_name(all_compare_operators)\n        a = pd.array([1, 0, None], dtype=\"Int64\")\n\n        result = op(a, other)\n\n        if other is pd.NA:\n            expected = pd.array([None, None, None], dtype=\"boolean\")\n        else:\n            values = op(a._data, other)\n            expected = pd.arrays.BooleanArray(values, a._mask, copy=True)\n        tm.assert_extension_array_equal(result, expected)\n\n        # ensure we haven't mutated anything inplace\n        result[0] = pd.NA\n        tm.assert_extension_array_equal(a, pd.array([1, 0, None], dtype=\"Int64\"))",
        "begin_line": 444,
        "end_line": 459,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_array#461",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_array(self, all_compare_operators)",
        "snippet": "    def test_array(self, all_compare_operators):\n        op = self.get_op_from_name(all_compare_operators)\n        a = pd.array([0, 1, 2, None, None, None], dtype=\"Int64\")\n        b = pd.array([0, 1, None, 0, 1, None], dtype=\"Int64\")\n\n        result = op(a, b)\n        values = op(a._data, b._data)\n        mask = a._mask | b._mask\n\n        expected = pd.arrays.BooleanArray(values, mask)\n        tm.assert_extension_array_equal(result, expected)\n\n        # ensure we haven't mutated anything inplace\n        result[0] = pd.NA\n        tm.assert_extension_array_equal(\n            a, pd.array([0, 1, 2, None, None, None], dtype=\"Int64\")\n        )\n        tm.assert_extension_array_equal(\n            b, pd.array([0, 1, None, 0, 1, None], dtype=\"Int64\")\n        )",
        "begin_line": 461,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_with_booleanarray#482",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_with_booleanarray(self, all_compare_operators)",
        "snippet": "    def test_compare_with_booleanarray(self, all_compare_operators):\n        op = self.get_op_from_name(all_compare_operators)\n        a = pd.array([True, False, None] * 3, dtype=\"boolean\")\n        b = pd.array([0] * 3 + [1] * 3 + [None] * 3, dtype=\"Int64\")\n        other = pd.array([False] * 3 + [True] * 3 + [None] * 3, dtype=\"boolean\")\n        expected = op(a, other)\n        result = op(a, b)\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 482,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_no_shared_mask#491",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_no_shared_mask(self, data)",
        "snippet": "    def test_no_shared_mask(self, data):\n        result = data + 1\n        assert np.shares_memory(result._mask, data._mask) is False",
        "begin_line": 491,
        "end_line": 493,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_string#495",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_string(self, any_nullable_int_dtype)",
        "snippet": "    def test_compare_to_string(self, any_nullable_int_dtype):\n        # GH 28930\n        s = pd.Series([1, None], dtype=any_nullable_int_dtype)\n        result = s == \"a\"\n        expected = pd.Series([False, pd.NA], dtype=\"boolean\")\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 495,
        "end_line": 501,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_int#503",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestComparisonOps",
        "signature": "pandas.tests.arrays.test_integer.TestComparisonOps.test_compare_to_int(self, any_nullable_int_dtype, all_compare_operators)",
        "snippet": "    def test_compare_to_int(self, any_nullable_int_dtype, all_compare_operators):\n        # GH 28930\n        s1 = pd.Series([1, None, 3], dtype=any_nullable_int_dtype)\n        s2 = pd.Series([1, None, 3], dtype=\"float\")\n\n        method = getattr(s1, all_compare_operators)\n        result = method(2)\n\n        method = getattr(s2, all_compare_operators)\n        expected = method(2).astype(\"boolean\")\n        expected[s2.isna()] = pd.NA\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 503,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_construct_index#520",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_construct_index(self, all_data, dropna)",
        "snippet": "    def test_construct_index(self, all_data, dropna):\n        # ensure that we do not coerce to Float64Index, rather\n        # keep as Index\n\n        all_data = all_data[:10]\n        if dropna:\n            other = np.array(all_data[~all_data.isna()])\n        else:\n            other = all_data\n\n        result = pd.Index(integer_array(other, dtype=all_data.dtype))\n        expected = pd.Index(other, dtype=object)\n\n        tm.assert_index_equal(result, expected)",
        "begin_line": 520,
        "end_line": 533,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype_index#536",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype_index(self, all_data, dropna)",
        "snippet": "    def test_astype_index(self, all_data, dropna):\n        # as an int/uint index to Index\n\n        all_data = all_data[:10]\n        if dropna:\n            other = all_data[~all_data.isna()]\n        else:\n            other = all_data\n\n        dtype = all_data.dtype\n        idx = pd.Index(np.array(other))\n        assert isinstance(idx, ABCIndexClass)\n\n        result = idx.astype(dtype)\n        expected = idx.astype(object).astype(dtype)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 536,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype#553",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype(self, all_data)",
        "snippet": "    def test_astype(self, all_data):\n        all_data = all_data[:10]\n\n        ints = all_data[~all_data.isna()]\n        mixed = all_data\n        dtype = Int8Dtype()\n\n        # coerce to same type - ints\n        s = pd.Series(ints)\n        result = s.astype(all_data.dtype)\n        expected = pd.Series(ints)\n        tm.assert_series_equal(result, expected)\n\n        # coerce to same other - ints\n        s = pd.Series(ints)\n        result = s.astype(dtype)\n        expected = pd.Series(ints, dtype=dtype)\n        tm.assert_series_equal(result, expected)\n\n        # coerce to same numpy_dtype - ints\n        s = pd.Series(ints)\n        result = s.astype(all_data.dtype.numpy_dtype)\n        expected = pd.Series(ints._data.astype(all_data.dtype.numpy_dtype))\n        tm.assert_series_equal(result, expected)\n\n        # coerce to same type - mixed\n        s = pd.Series(mixed)\n        result = s.astype(all_data.dtype)\n        expected = pd.Series(mixed)\n        tm.assert_series_equal(result, expected)\n\n        # coerce to same other - mixed\n        s = pd.Series(mixed)\n        result = s.astype(dtype)\n        expected = pd.Series(mixed, dtype=dtype)\n        tm.assert_series_equal(result, expected)\n\n        # coerce to same numpy_dtype - mixed\n        s = pd.Series(mixed)\n        with pytest.raises(ValueError):\n            s.astype(all_data.dtype.numpy_dtype)\n\n        # coerce to object\n        s = pd.Series(mixed)\n        result = s.astype(\"object\")\n        expected = pd.Series(np.asarray(mixed))\n        tm.assert_series_equal(result, expected)",
        "begin_line": 553,
        "end_line": 599,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype_to_larger_numpy#601",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype_to_larger_numpy(self)",
        "snippet": "    def test_astype_to_larger_numpy(self):\n        a = pd.array([1, 2], dtype=\"Int32\")\n        result = a.astype(\"int64\")\n        expected = np.array([1, 2], dtype=\"int64\")\n        tm.assert_numpy_array_equal(result, expected)\n\n        a = pd.array([1, 2], dtype=\"UInt32\")\n        result = a.astype(\"uint64\")\n        expected = np.array([1, 2], dtype=\"uint64\")\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 601,
        "end_line": 610,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype_specific_casting#613",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype_specific_casting(self, dtype)",
        "snippet": "    def test_astype_specific_casting(self, dtype):\n        s = pd.Series([1, 2, 3], dtype=\"Int64\")\n        result = s.astype(dtype)\n        expected = pd.Series([1, 2, 3], dtype=dtype)\n        tm.assert_series_equal(result, expected)\n\n        s = pd.Series([1, 2, 3, None], dtype=\"Int64\")\n        result = s.astype(dtype)\n        expected = pd.Series([1, 2, 3, None], dtype=dtype)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 613,
        "end_line": 622,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_construct_cast_invalid#624",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_construct_cast_invalid(self, dtype)",
        "snippet": "    def test_construct_cast_invalid(self, dtype):\n\n        msg = \"cannot safely\"\n        arr = [1.2, 2.3, 3.7]\n        with pytest.raises(TypeError, match=msg):\n            integer_array(arr, dtype=dtype)\n\n        with pytest.raises(TypeError, match=msg):\n            pd.Series(arr).astype(dtype)\n\n        arr = [1.2, 2.3, 3.7, np.nan]\n        with pytest.raises(TypeError, match=msg):\n            integer_array(arr, dtype=dtype)\n\n        with pytest.raises(TypeError, match=msg):\n            pd.Series(arr).astype(dtype)",
        "begin_line": 624,
        "end_line": 639,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_nan#642",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_nan(self, in_series)",
        "snippet": "    def test_to_numpy_na_nan(self, in_series):\n        a = pd.array([0, 1, None], dtype=\"Int64\")\n        if in_series:\n            a = pd.Series(a)\n\n        result = a.to_numpy(dtype=\"float64\", na_value=np.nan)\n        expected = np.array([0.0, 1.0, np.nan], dtype=\"float64\")\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = a.to_numpy(dtype=\"int64\", na_value=-1)\n        expected = np.array([0, 1, -1], dtype=\"int64\")\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = a.to_numpy(dtype=\"bool\", na_value=False)\n        expected = np.array([False, True, False], dtype=\"bool\")\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 642,
        "end_line": 657,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_dtype#661",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_dtype(self, dtype, in_series)",
        "snippet": "    def test_to_numpy_dtype(self, dtype, in_series):\n        a = pd.array([0, 1], dtype=\"Int64\")\n        if in_series:\n            a = pd.Series(a)\n\n        result = a.to_numpy(dtype=dtype)\n        expected = np.array([0, 1], dtype=dtype)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 661,
        "end_line": 668,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_raises#671",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_to_numpy_na_raises(self, dtype)",
        "snippet": "    def test_to_numpy_na_raises(self, dtype):\n        a = pd.array([0, 1, None], dtype=\"Int64\")\n        with pytest.raises(ValueError, match=dtype):\n            a.to_numpy(dtype=dtype)",
        "begin_line": 671,
        "end_line": 674,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype_str#676",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype_str(self)",
        "snippet": "    def test_astype_str(self):\n        a = pd.array([1, 2, None], dtype=\"Int64\")\n        expected = np.array([\"1\", \"2\", \"<NA>\"], dtype=object)\n\n        tm.assert_numpy_array_equal(a.astype(str), expected)\n        tm.assert_numpy_array_equal(a.astype(\"str\"), expected)",
        "begin_line": 676,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.TestCasting.test_astype_boolean#683",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer.TestCasting",
        "signature": "pandas.tests.arrays.test_integer.TestCasting.test_astype_boolean(self)",
        "snippet": "    def test_astype_boolean(self):\n        # https://github.com/pandas-dev/pandas/issues/31102\n        a = pd.array([1, 0, -1, 2, None], dtype=\"Int64\")\n        result = a.astype(\"boolean\")\n        expected = pd.array([True, False, True, True, None], dtype=\"boolean\")\n        tm.assert_extension_array_equal(result, expected)",
        "begin_line": 683,
        "end_line": 688,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_frame_repr#691",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_frame_repr(data_missing)",
        "snippet": "def test_frame_repr(data_missing):\n\n    df = pd.DataFrame({\"A\": data_missing})\n    result = repr(df)\n    expected = \"      A\\n0  <NA>\\n1     1\"\n    assert result == expected",
        "begin_line": 691,
        "end_line": 696,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_conversions#699",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_conversions(data_missing)",
        "snippet": "def test_conversions(data_missing):\n\n    # astype to object series\n    df = pd.DataFrame({\"A\": data_missing})\n    result = df[\"A\"].astype(\"object\")\n    expected = pd.Series(np.array([np.nan, 1], dtype=object), name=\"A\")\n    tm.assert_series_equal(result, expected)\n\n    # convert to object ndarray\n    # we assert that we are exactly equal\n    # including type conversions of scalars\n    result = df[\"A\"].astype(\"object\").values\n    expected = np.array([pd.NA, 1], dtype=object)\n    tm.assert_numpy_array_equal(result, expected)\n\n    for r, e in zip(result, expected):\n        if pd.isnull(r):\n            assert pd.isnull(e)\n        elif is_integer(r):\n            assert r == e\n            assert is_integer(e)\n        else:\n            assert r == e\n            assert type(r) == type(e)",
        "begin_line": 699,
        "end_line": 722,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_integer_array_constructor#725",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_integer_array_constructor()",
        "snippet": "def test_integer_array_constructor():\n    values = np.array([1, 2, 3, 4], dtype=\"int64\")\n    mask = np.array([False, False, False, True], dtype=\"bool\")\n\n    result = IntegerArray(values, mask)\n    expected = integer_array([1, 2, 3, np.nan], dtype=\"int64\")\n    tm.assert_extension_array_equal(result, expected)\n\n    with pytest.raises(TypeError):\n        IntegerArray(values.tolist(), mask)\n\n    with pytest.raises(TypeError):\n        IntegerArray(values, mask.tolist())\n\n    with pytest.raises(TypeError):\n        IntegerArray(values.astype(float), mask)\n\n    with pytest.raises(TypeError):\n        IntegerArray(values)",
        "begin_line": 725,
        "end_line": 743,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_integer_array_constructor_none_is_nan#755",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_integer_array_constructor_none_is_nan(a, b)",
        "snippet": "def test_integer_array_constructor_none_is_nan(a, b):\n    result = integer_array(a)\n    expected = integer_array(b)\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 755,
        "end_line": 758,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_integer_array_constructor_copy#761",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_integer_array_constructor_copy()",
        "snippet": "def test_integer_array_constructor_copy():\n    values = np.array([1, 2, 3, 4], dtype=\"int64\")\n    mask = np.array([False, False, False, True], dtype=\"bool\")\n\n    result = IntegerArray(values, mask)\n    assert result._data is values\n    assert result._mask is mask\n\n    result = IntegerArray(values, mask, copy=True)\n    assert result._data is not values\n    assert result._mask is not mask",
        "begin_line": 761,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array_error#788",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array_error(values)",
        "snippet": "def test_to_integer_array_error(values):\n    # error in converting existing arrays to IntegerArrays\n    with pytest.raises(TypeError):\n        integer_array(values)",
        "begin_line": 788,
        "end_line": 791,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array_inferred_dtype#794",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array_inferred_dtype()",
        "snippet": "def test_to_integer_array_inferred_dtype():\n    # if values has dtype -> respect it\n    result = integer_array(np.array([1, 2], dtype=\"int8\"))\n    assert result.dtype == Int8Dtype()\n    result = integer_array(np.array([1, 2], dtype=\"int32\"))\n    assert result.dtype == Int32Dtype()\n\n    # if values have no dtype -> always int64\n    result = integer_array([1, 2])\n    assert result.dtype == Int64Dtype()",
        "begin_line": 794,
        "end_line": 803,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array_dtype_keyword#806",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array_dtype_keyword()",
        "snippet": "def test_to_integer_array_dtype_keyword():\n    result = integer_array([1, 2], dtype=\"int8\")\n    assert result.dtype == Int8Dtype()\n\n    # if values has dtype -> override it\n    result = integer_array(np.array([1, 2], dtype=\"int8\"), dtype=\"int32\")\n    assert result.dtype == Int32Dtype()",
        "begin_line": 806,
        "end_line": 812,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array_float#815",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array_float()",
        "snippet": "def test_to_integer_array_float():\n    result = integer_array([1.0, 2.0])\n    expected = integer_array([1, 2])\n    tm.assert_extension_array_equal(result, expected)\n\n    with pytest.raises(TypeError, match=\"cannot safely cast non-equivalent\"):\n        integer_array([1.5, 2.0])\n\n    # for float dtypes, the itemsize is not preserved\n    result = integer_array(np.array([1.0, 2.0], dtype=\"float32\"))\n    assert result.dtype == Int64Dtype()",
        "begin_line": 815,
        "end_line": 825,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array_bool#836",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array_bool(bool_values, int_values, target_dtype, expected_dtype)",
        "snippet": "def test_to_integer_array_bool(bool_values, int_values, target_dtype, expected_dtype):\n    result = integer_array(bool_values, dtype=target_dtype)\n    assert result.dtype == expected_dtype\n    expected = integer_array(int_values, dtype=target_dtype)\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 836,
        "end_line": 840,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_to_integer_array#851",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_to_integer_array(values, to_dtype, result_dtype)",
        "snippet": "def test_to_integer_array(values, to_dtype, result_dtype):\n    # convert existing arrays to IntegerArrays\n    result = integer_array(values, dtype=to_dtype)\n    assert result.dtype == result_dtype()\n    expected = integer_array(values, dtype=result_dtype())\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 851,
        "end_line": 856,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_cross_type_arithmetic#859",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_cross_type_arithmetic()",
        "snippet": "def test_cross_type_arithmetic():\n\n    df = pd.DataFrame(\n        {\n            \"A\": pd.Series([1, 2, np.nan], dtype=\"Int64\"),\n            \"B\": pd.Series([1, np.nan, 3], dtype=\"UInt8\"),\n            \"C\": [1, 2, 3],\n        }\n    )\n\n    result = df.A + df.C\n    expected = pd.Series([2, 4, np.nan], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)\n\n    result = (df.A + df.C) * 3 == 12\n    expected = pd.Series([False, True, None], dtype=\"boolean\")\n    tm.assert_series_equal(result, expected)\n\n    result = df.A + df.B\n    expected = pd.Series([2, np.nan, np.nan], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 859,
        "end_line": 879,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_preserve_dtypes#883",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_preserve_dtypes(op)",
        "snippet": "def test_preserve_dtypes(op):\n    # TODO(#22346): preserve Int64 dtype\n    # for ops that enable (mean would actually work here\n    # but generally it is a float return value)\n    df = pd.DataFrame(\n        {\n            \"A\": [\"a\", \"b\", \"b\"],\n            \"B\": [1, None, 3],\n            \"C\": integer_array([1, None, 3], dtype=\"Int64\"),\n        }\n    )\n\n    # op\n    result = getattr(df.C, op)()\n    assert isinstance(result, int)\n\n    # groupby\n    result = getattr(df.groupby(\"A\"), op)()\n\n    expected = pd.DataFrame(\n        {\"B\": np.array([1.0, 3.0]), \"C\": integer_array([1, 3], dtype=\"Int64\")},\n        index=pd.Index([\"a\", \"b\"], name=\"A\"),\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 883,
        "end_line": 906,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_reduce_to_float#910",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_reduce_to_float(op)",
        "snippet": "def test_reduce_to_float(op):\n    # some reduce ops always return float, even if the result\n    # is a rounded number\n    df = pd.DataFrame(\n        {\n            \"A\": [\"a\", \"b\", \"b\"],\n            \"B\": [1, None, 3],\n            \"C\": integer_array([1, None, 3], dtype=\"Int64\"),\n        }\n    )\n\n    # op\n    result = getattr(df.C, op)()\n    assert isinstance(result, float)\n\n    # groupby\n    result = getattr(df.groupby(\"A\"), op)()\n\n    expected = pd.DataFrame(\n        {\"B\": np.array([1.0, 3.0]), \"C\": integer_array([1, 3], dtype=\"Int64\")},\n        index=pd.Index([\"a\", \"b\"], name=\"A\"),\n    )\n    tm.assert_frame_equal(result, expected)",
        "begin_line": 910,
        "end_line": 932,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_astype_nansafe#935",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_astype_nansafe()",
        "snippet": "def test_astype_nansafe():\n    # see gh-22343\n    arr = integer_array([np.nan, 1, 2], dtype=\"Int8\")\n    msg = \"cannot convert to 'uint32'-dtype NumPy array with missing values.\"\n\n    with pytest.raises(ValueError, match=msg):\n        arr.astype(\"uint32\")",
        "begin_line": 935,
        "end_line": 941,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_ufuncs_single_int#947",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_ufuncs_single_int(ufunc)",
        "snippet": "def test_ufuncs_single_int(ufunc):\n    a = integer_array([1, 2, -3, np.nan])\n    result = ufunc(a)\n    expected = integer_array(ufunc(a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    s = pd.Series(a)\n    result = ufunc(s)\n    expected = pd.Series(integer_array(ufunc(a.astype(float))))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 947,
        "end_line": 956,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_ufuncs_single_float#960",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_ufuncs_single_float(ufunc)",
        "snippet": "def test_ufuncs_single_float(ufunc):\n    a = integer_array([1, 2, -3, np.nan])\n    with np.errstate(invalid=\"ignore\"):\n        result = ufunc(a)\n        expected = ufunc(a.astype(float))\n    tm.assert_numpy_array_equal(result, expected)\n\n    s = pd.Series(a)\n    with np.errstate(invalid=\"ignore\"):\n        result = ufunc(s)\n        expected = ufunc(s.astype(float))\n    tm.assert_series_equal(result, expected)",
        "begin_line": 960,
        "end_line": 971,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_ufuncs_binary_int#975",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_ufuncs_binary_int(ufunc)",
        "snippet": "def test_ufuncs_binary_int(ufunc):\n    # two IntegerArrays\n    a = integer_array([1, 2, -3, np.nan])\n    result = ufunc(a, a)\n    expected = integer_array(ufunc(a.astype(float), a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    # IntegerArray with numpy array\n    arr = np.array([1, 2, 3, 4])\n    result = ufunc(a, arr)\n    expected = integer_array(ufunc(a.astype(float), arr))\n    tm.assert_extension_array_equal(result, expected)\n\n    result = ufunc(arr, a)\n    expected = integer_array(ufunc(arr, a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)\n\n    # IntegerArray with scalar\n    result = ufunc(a, 1)\n    expected = integer_array(ufunc(a.astype(float), 1))\n    tm.assert_extension_array_equal(result, expected)\n\n    result = ufunc(1, a)\n    expected = integer_array(ufunc(1, a.astype(float)))\n    tm.assert_extension_array_equal(result, expected)",
        "begin_line": 975,
        "end_line": 999,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_ufunc_reduce_raises#1003",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_ufunc_reduce_raises(values)",
        "snippet": "def test_ufunc_reduce_raises(values):\n    a = integer_array(values)\n    with pytest.raises(NotImplementedError):\n        np.add.reduce(a)",
        "begin_line": 1003,
        "end_line": 1006,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_arrow_array#1010",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_arrow_array(data)",
        "snippet": "def test_arrow_array(data):\n    # protocol added in 0.15.0\n    import pyarrow as pa\n\n    arr = pa.array(data)\n    expected = np.array(data, dtype=object)\n    expected[data.isna()] = None\n    expected = pa.array(expected, type=data.dtype.name.lower(), from_pandas=True)\n    assert arr.equals(expected)",
        "begin_line": 1010,
        "end_line": 1018,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_arrow_roundtrip#1022",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_arrow_roundtrip(data)",
        "snippet": "def test_arrow_roundtrip(data):\n    # roundtrip possible from arrow 1.0.0\n    import pyarrow as pa\n\n    df = pd.DataFrame({\"a\": data})\n    table = pa.table(df)\n    assert table.field(\"a\").type == str(data.dtype.numpy_dtype)\n    result = table.to_pandas()\n    tm.assert_frame_equal(result, df)",
        "begin_line": 1022,
        "end_line": 1030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_stat_method#1043",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_stat_method(pandasmethname, kwargs)",
        "snippet": "def test_stat_method(pandasmethname, kwargs):\n    s = pd.Series(data=[1, 2, 3, 4, 5, 6, np.nan, np.nan], dtype=\"Int64\")\n    pandasmeth = getattr(s, pandasmethname)\n    result = pandasmeth(**kwargs)\n    s2 = pd.Series(data=[1, 2, 3, 4, 5, 6], dtype=\"Int64\")\n    pandasmeth = getattr(s2, pandasmethname)\n    expected = pandasmeth(**kwargs)\n    assert expected == result",
        "begin_line": 1043,
        "end_line": 1050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_value_counts_na#1053",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_value_counts_na()",
        "snippet": "def test_value_counts_na():\n    arr = pd.array([1, 2, 1, pd.NA], dtype=\"Int64\")\n    result = arr.value_counts(dropna=False)\n    expected = pd.Series([2, 1, 1], index=[1, 2, pd.NA], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)\n\n    result = arr.value_counts(dropna=True)\n    expected = pd.Series([2, 1], index=[1, 2], dtype=\"Int64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 1053,
        "end_line": 1061,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.test_integer.test_cut#1067",
        "src_path": "pandas/tests/arrays/test_integer.py",
        "class_name": "pandas.tests.arrays.test_integer",
        "signature": "pandas.tests.arrays.test_integer.test_cut(bins, right, include_lowest)",
        "snippet": "def test_cut(bins, right, include_lowest):\n    a = np.random.randint(0, 10, size=50).astype(object)\n    a[::2] = np.nan\n    result = pd.cut(\n        pd.array(a, dtype=\"Int64\"), bins, right=right, include_lowest=include_lowest\n    )\n    expected = pd.cut(a, bins, right=right, include_lowest=include_lowest)\n    tm.assert_categorical_equal(result, expected)",
        "begin_line": 1067,
        "end_line": 1074,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#29",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 29,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#40",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#54",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#70",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#74",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#114",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            if pd.api.types.is_list_like(item):\n                if not pd.api.types.is_array_like(item):\n                    item = pd.array(item)\n                dtype = item.dtype\n                if pd.api.types.is_bool_dtype(dtype):\n                    item = pd.api.indexers.check_bool_array_indexer(self, item)\n                elif pd.api.types.is_integer_dtype(dtype):\n                    item = np.asarray(item, dtype=\"int\")\n            return type(self)(self._data[item])",
        "begin_line": 114,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#142",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 142,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#156",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#166",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    }
]