coverage run -m pytest pandas/tests/arrays/test_integer.py::test_cut
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 8 items

pandas/tests/arrays/test_integer.py FFFFFFFF                             [100%]

=================================== FAILURES ===================================
____________________________ test_cut[True-True-3] _____________________________

bins = 3, right = True, include_lowest = True

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
__________________________ test_cut[True-True-bins1] ___________________________

bins = [0, 5, 15], right = True, include_lowest = True

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
____________________________ test_cut[True-False-3] ____________________________

bins = 3, right = False, include_lowest = True

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
__________________________ test_cut[True-False-bins1] __________________________

bins = [0, 5, 15], right = False, include_lowest = True

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
____________________________ test_cut[False-True-3] ____________________________

bins = 3, right = True, include_lowest = False

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
__________________________ test_cut[False-True-bins1] __________________________

bins = [0, 5, 15], right = True, include_lowest = False

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
___________________________ test_cut[False-False-3] ____________________________

bins = 3, right = False, include_lowest = False

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
_________________________ test_cut[False-False-bins1] __________________________

bins = [0, 5, 15], right = False, include_lowest = False

    @pytest.mark.parametrize("bins", [3, [0, 5, 15]])
    @pytest.mark.parametrize("right", [True, False])
    @pytest.mark.parametrize("include_lowest", [True, False])
    def test_cut(bins, right, include_lowest):
        a = np.random.randint(0, 10, size=50).astype(object)
        a[::2] = np.nan
>       result = pd.cut(
            pd.array(a, dtype="Int64"), bins, right=right, include_lowest=include_lowest
        )

pandas/tests/arrays/test_integer.py:1070: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/tile.py:256: in cut
    fac, bins = _bins_to_cuts(
pandas/core/reshape/tile.py:386: in _bins_to_cuts
    ids = ensure_int64(bins.searchsorted(x, side=side))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   raise TypeError("boolean value of NA is ambiguous")
E   TypeError: boolean value of NA is ambiguous

pandas/_libs/missing.pyx:360: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/test_integer.py::test_cut[True-True-3] - TypeError...
FAILED pandas/tests/arrays/test_integer.py::test_cut[True-True-bins1] - TypeE...
FAILED pandas/tests/arrays/test_integer.py::test_cut[True-False-3] - TypeErro...
FAILED pandas/tests/arrays/test_integer.py::test_cut[True-False-bins1] - Type...
FAILED pandas/tests/arrays/test_integer.py::test_cut[False-True-3] - TypeErro...
FAILED pandas/tests/arrays/test_integer.py::test_cut[False-True-bins1] - Type...
FAILED pandas/tests/arrays/test_integer.py::test_cut[False-False-3] - TypeErr...
FAILED pandas/tests/arrays/test_integer.py::test_cut[False-False-bins1] - Typ...
============================== 8 failed in 0.84s ===============================
