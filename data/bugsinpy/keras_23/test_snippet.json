[
    {
        "name": "tests.keras.test_sequential_model.in_tmpdir#27",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.in_tmpdir(tmpdir)",
        "snippet": "def in_tmpdir(tmpdir):\n    \"\"\"Runs a function in a temporary directory.\n\n    Checks that the directory is empty afterwards.\n    \"\"\"\n    with tmpdir.as_cwd():\n        yield None\n    assert not tmpdir.listdir()",
        "begin_line": 27,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential_pop#38",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential_pop()",
        "snippet": "def test_sequential_pop():\n    model = Sequential()\n    model.add(Dense(num_hidden, input_dim=input_dim))\n    model.add(Dense(num_classes))\n    model.compile(loss='mse', optimizer='sgd')\n    x = np.random.random((batch_size, input_dim))\n    y = np.random.random((batch_size, num_classes))\n    model.fit(x, y, epochs=1)\n    model.pop()\n    assert len(model.layers) == 1\n    assert model.output_shape == (None, num_hidden)\n    model.compile(loss='mse', optimizer='sgd')\n    y = np.random.random((batch_size, num_hidden))\n    model.fit(x, y, epochs=1)",
        "begin_line": 38,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model._get_test_data#54",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model._get_test_data()",
        "snippet": "def _get_test_data():\n    np.random.seed(1234)\n\n    train_samples = 100\n    test_samples = 50\n\n    (x_train, y_train), (x_test, y_test) = get_test_data(num_train=train_samples,\n                                                         num_test=test_samples,\n                                                         input_shape=(input_dim,),\n                                                         classification=True,\n                                                         num_classes=num_classes)\n    y_test = np_utils.to_categorical(y_test)\n    y_train = np_utils.to_categorical(y_train)\n    return (x_train, y_train), (x_test, y_test)",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential_fit_generator#71",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential_fit_generator()",
        "snippet": "def test_sequential_fit_generator():\n    (x_train, y_train), (x_test, y_test) = _get_test_data()\n\n    def data_generator(train):\n        if train:\n            max_batch_index = len(x_train) // batch_size\n        else:\n            max_batch_index = len(x_test) // batch_size\n        i = 0\n        while 1:\n            if train:\n                yield (x_train[i * batch_size: (i + 1) * batch_size], y_train[i * batch_size: (i + 1) * batch_size])\n            else:\n                yield (x_test[i * batch_size: (i + 1) * batch_size], y_test[i * batch_size: (i + 1) * batch_size])\n            i += 1\n            i = i % max_batch_index\n\n    model = Sequential()\n    model.add(Dense(num_hidden, input_shape=(input_dim,)))\n    model.add(Activation('relu'))\n    model.add(Dense(num_classes))\n    model.pop()\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n\n    model.fit_generator(data_generator(True), 5, epochs)\n    model.fit_generator(data_generator(True), 5, epochs,\n                        validation_data=(x_test, y_test))\n    model.fit_generator(data_generator(True), 5, epochs,\n                        validation_data=data_generator(False),\n                        validation_steps=3)\n    model.fit_generator(data_generator(True), 5, epochs, max_queue_size=2)\n    model.evaluate(x_train, y_train)",
        "begin_line": 71,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.data_generator#74",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.data_generator(train)",
        "snippet": "    def data_generator(train):\n        if train:\n            max_batch_index = len(x_train) // batch_size\n        else:\n            max_batch_index = len(x_test) // batch_size\n        i = 0\n        while 1:\n            if train:\n                yield (x_train[i * batch_size: (i + 1) * batch_size], y_train[i * batch_size: (i + 1) * batch_size])\n            else:\n                yield (x_test[i * batch_size: (i + 1) * batch_size], y_test[i * batch_size: (i + 1) * batch_size])\n            i += 1\n            i = i % max_batch_index",
        "begin_line": 74,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential#108",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential(in_tmpdir)",
        "snippet": "def test_sequential(in_tmpdir):\n    (x_train, y_train), (x_test, y_test) = _get_test_data()\n\n    # TODO: factor out\n    def data_generator(x, y, batch_size=50):\n        index_array = np.arange(len(x))\n        while 1:\n            batches = make_batches(len(x_test), batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                x_batch = x[batch_ids]\n                y_batch = y[batch_ids]\n                yield (x_batch, y_batch)\n\n    model = Sequential()\n    model.add(Dense(num_hidden, input_shape=(input_dim,)))\n    model.add(Activation('relu'))\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test))\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=2, validation_split=0.1)\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=0)\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, shuffle=False)\n\n    model.train_on_batch(x_train[:32], y_train[:32])\n\n    loss = model.evaluate(x_test, y_test)\n\n    prediction = model.predict_generator(data_generator(x_test, y_test), 1, max_queue_size=2, verbose=1)\n    gen_loss = model.evaluate_generator(data_generator(x_test, y_test, 50), 1, max_queue_size=2)\n    pred_loss = K.eval(K.mean(losses.get(model.loss)(K.variable(y_test), K.variable(prediction))))\n\n    assert(np.isclose(pred_loss, loss))\n    assert(np.isclose(gen_loss, loss))\n\n    model.predict(x_test, verbose=0)\n    model.predict_classes(x_test, verbose=0)\n    model.predict_proba(x_test, verbose=0)\n\n    fname = 'test_sequential_temp.h5'\n    model.save_weights(fname, overwrite=True)\n    model = Sequential()\n    model.add(Dense(num_hidden, input_shape=(input_dim,)))\n    model.add(Activation('relu'))\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n    model.load_weights(fname)\n    os.remove(fname)\n\n    nloss = model.evaluate(x_test, y_test, verbose=0)\n    assert(loss == nloss)\n\n    # test serialization\n    config = model.get_config()\n    Sequential.from_config(config)\n\n    model.summary()\n    json_str = model.to_json()\n    model_from_json(json_str)\n\n    yaml_str = model.to_yaml()\n    model_from_yaml(yaml_str)",
        "begin_line": 108,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.data_generator#112",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.data_generator(x, y, batch_size=50)",
        "snippet": "    def data_generator(x, y, batch_size=50):\n        index_array = np.arange(len(x))\n        while 1:\n            batches = make_batches(len(x_test), batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                x_batch = x[batch_ids]\n                y_batch = y[batch_ids]\n                yield (x_batch, y_batch)",
        "begin_line": 112,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_nested_sequential#176",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_nested_sequential(in_tmpdir)",
        "snippet": "def test_nested_sequential(in_tmpdir):\n    (x_train, y_train), (x_test, y_test) = _get_test_data()\n\n    inner = Sequential()\n    inner.add(Dense(num_hidden, input_shape=(input_dim,)))\n    inner.add(Activation('relu'))\n    inner.add(Dense(num_classes))\n\n    middle = Sequential()\n    middle.add(inner)\n\n    model = Sequential()\n    model.add(middle)\n    model.add(Activation('softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test))\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=2, validation_split=0.1)\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=0)\n    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, shuffle=False)\n\n    model.train_on_batch(x_train[:32], y_train[:32])\n\n    loss = model.evaluate(x_test, y_test, verbose=0)\n\n    model.predict(x_test, verbose=0)\n    model.predict_classes(x_test, verbose=0)\n    model.predict_proba(x_test, verbose=0)\n\n    fname = 'test_nested_sequential_temp.h5'\n    model.save_weights(fname, overwrite=True)\n\n    inner = Sequential()\n    inner.add(Dense(num_hidden, input_shape=(input_dim,)))\n    inner.add(Activation('relu'))\n    inner.add(Dense(num_classes))\n\n    middle = Sequential()\n    middle.add(inner)\n\n    model = Sequential()\n    model.add(middle)\n    model.add(Activation('softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n    model.load_weights(fname)\n    os.remove(fname)\n\n    nloss = model.evaluate(x_test, y_test, verbose=0)\n    assert(loss == nloss)\n\n    # test serialization\n    config = model.get_config()\n    Sequential.from_config(config)\n\n    model.summary()\n    json_str = model.to_json()\n    model_from_json(json_str)\n\n    yaml_str = model.to_yaml()\n    model_from_yaml(yaml_str)",
        "begin_line": 176,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential_count_params#239",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential_count_params()",
        "snippet": "def test_sequential_count_params():\n    input_dim = 20\n    num_units = 10\n    num_classes = 2\n\n    n = input_dim * num_units + num_units\n    n += num_units * num_units + num_units\n    n += num_units * num_classes + num_classes\n\n    model = Sequential()\n    model.add(Dense(num_units, input_shape=(input_dim,)))\n    model.add(Dense(num_units))\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n    model.build()\n\n    assert(n == model.count_params())\n\n    model.compile('sgd', 'binary_crossentropy')\n    assert(n == model.count_params())",
        "begin_line": 239,
        "end_line": 258,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_nested_sequential_trainability#262",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_nested_sequential_trainability()",
        "snippet": "def test_nested_sequential_trainability():\n    input_dim = 20\n    num_units = 10\n    num_classes = 2\n\n    inner_model = Sequential()\n    inner_model.add(Dense(num_units, input_shape=(input_dim,)))\n\n    model = Sequential()\n    model.add(inner_model)\n    model.add(Dense(num_classes))\n\n    assert len(model.trainable_weights) == 4\n    inner_model.trainable = False\n    assert len(model.trainable_weights) == 2\n    inner_model.trainable = True\n    assert len(model.trainable_weights) == 4",
        "begin_line": 262,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_rebuild_model#282",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_rebuild_model()",
        "snippet": "def test_rebuild_model():\n    model = Sequential()\n    model.add(Dense(128, input_shape=(784,)))\n    model.add(Dense(64))\n    assert(model.get_layer(index=-1).output_shape == (None, 64))\n\n    model.add(Dense(32))\n    assert(model.get_layer(index=-1).output_shape == (None, 32))",
        "begin_line": 282,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_clone_functional_model#293",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_clone_functional_model()",
        "snippet": "def test_clone_functional_model():\n    val_a = np.random.random((10, 4))\n    val_b = np.random.random((10, 4))\n    val_out = np.random.random((10, 4))\n\n    input_a = keras.Input(shape=(4,))\n    input_b = keras.Input(shape=(4,))\n    dense_1 = keras.layers.Dense(4)\n    dense_2 = keras.layers.Dense(4)\n\n    x_a = dense_1(input_a)\n    x_a = keras.layers.Dropout(0.5)(x_a)\n    x_a = keras.layers.BatchNormalization()(x_a)\n    x_b = dense_1(input_b)\n    x_a = dense_2(x_a)\n    outputs = keras.layers.add([x_a, x_b])\n    model = keras.models.Model([input_a, input_b], outputs)\n\n    if K.backend() == 'tensorflow':\n        # Everything should work in a new session.\n        K.clear_session()\n\n    # With placeholder creation\n    new_model = keras.models.clone_model(model)\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch([val_a, val_b], val_out)\n\n    # On top of new tensors\n    input_a = keras.Input(shape=(4,), name='a')\n    input_b = keras.Input(shape=(4,), name='b')\n    new_model = keras.models.clone_model(\n        model, input_tensors=[input_a, input_b])\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch([val_a, val_b], val_out)\n\n    # On top of new, non-Keras tensors\n    input_a = keras.backend.variable(val_a)\n    input_b = keras.backend.variable(val_b)\n    new_model = keras.models.clone_model(\n        model, input_tensors=[input_a, input_b])\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch(None, val_out)",
        "begin_line": 293,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_clone_sequential_model#338",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_clone_sequential_model()",
        "snippet": "def test_clone_sequential_model():\n    val_a = np.random.random((10, 4))\n    val_out = np.random.random((10, 4))\n\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(4, input_shape=(4,)))\n    model.add(keras.layers.BatchNormalization())\n    model.add(keras.layers.Dropout(0.5))\n    model.add(keras.layers.Dense(4))\n\n    if K.backend() == 'tensorflow':\n        # Everything should work in a new session.\n        K.clear_session()\n\n    # With placeholder creation\n    new_model = keras.models.clone_model(model)\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch(val_a, val_out)\n\n    # On top of new tensor\n    input_a = keras.Input(shape=(4,))\n    new_model = keras.models.clone_model(\n        model, input_tensors=input_a)\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch(val_a, val_out)\n\n    # On top of new, non-Keras tensor\n    input_a = keras.backend.variable(val_a)\n    new_model = keras.models.clone_model(\n        model, input_tensors=input_a)\n    new_model.compile('rmsprop', 'mse')\n    new_model.train_on_batch(None, val_out)",
        "begin_line": 338,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential_update_disabling#373",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential_update_disabling()",
        "snippet": "def test_sequential_update_disabling():\n    val_a = np.random.random((10, 4))\n    val_out = np.random.random((10, 4))\n\n    model = keras.models.Sequential()\n    model.add(keras.layers.BatchNormalization(input_shape=(4,)))\n\n    model.trainable = False\n    assert not model.updates\n\n    model.compile('sgd', 'mse')\n    assert not model.updates\n\n    x1 = model.predict(val_a)\n    model.train_on_batch(val_a, val_out)\n    x2 = model.predict(val_a)\n    assert_allclose(x1, x2, atol=1e-7)\n\n    model.trainable = True\n    model.compile('sgd', 'mse')\n    assert model.updates\n\n    model.train_on_batch(val_a, val_out)\n    x2 = model.predict(val_a)\n    assert np.abs(np.sum(x1 - x2)) > 1e-5",
        "begin_line": 373,
        "end_line": 397,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_sequential_deferred_build#401",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_sequential_deferred_build()",
        "snippet": "def test_sequential_deferred_build():\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(3))\n    model.add(keras.layers.Dense(3))\n    model.compile('sgd', 'mse')\n\n    assert model.built is False\n    assert len(model.layers) == 2\n    assert len(model.weights) == 0\n\n    model.train_on_batch(\n        np.random.random((2, 4)), np.random.random((2, 3)))\n\n    assert model.built is True\n    assert len(model.layers) == 2\n    assert len(model.weights) == 4\n\n    config = model.get_config()\n    new_model = keras.models.Sequential.from_config(config)\n    assert new_model.built is True\n    assert len(new_model.layers) == 2\n    assert len(new_model.weights) == 4",
        "begin_line": 401,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.test_sequential_model.test_nested_sequential_deferred_build#426",
        "src_path": "tests/keras/test_sequential_model.py",
        "class_name": "tests.keras.test_sequential_model",
        "signature": "tests.keras.test_sequential_model.test_nested_sequential_deferred_build()",
        "snippet": "def test_nested_sequential_deferred_build():\n    inner_model = keras.models.Sequential()\n    inner_model.add(keras.layers.Dense(3))\n    inner_model.add(keras.layers.Dense(3))\n\n    model = keras.models.Sequential()\n    model.add(inner_model)\n    model.add(keras.layers.Dense(5))\n    model.compile('sgd', 'mse')\n\n    assert inner_model.built is False\n    assert len(inner_model.layers) == 2\n    assert len(inner_model.weights) == 0\n    assert model.built is False\n    assert len(model.layers) == 2\n    assert len(model.weights) == 0\n\n    model.train_on_batch(\n        np.random.random((2, 4)), np.random.random((2, 5)))\n\n    assert inner_model.built is True\n    assert len(inner_model.layers) == 2\n    assert len(inner_model.weights) == 4\n    assert model.built is True\n    assert len(model.layers) == 2\n    assert len(model.weights) == 6\n\n    config = model.get_config()\n    new_model = keras.models.Sequential.from_config(config)\n    assert new_model.built is True\n    assert len(new_model.layers) == 2\n    assert len(new_model.weights) == 6\n\n    new_inner_model = new_model.layers[0]\n    assert new_inner_model.built is True\n    assert len(new_inner_model.layers) == 2\n    assert len(new_inner_model.weights) == 4",
        "begin_line": 426,
        "end_line": 462,
        "comment": "",
        "is_bug": false
    }
]