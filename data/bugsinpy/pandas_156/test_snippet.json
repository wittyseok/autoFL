[
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_dense#20",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_dense()",
        "snippet": "def float_frame_dense():\n    \"\"\"\n    Fixture for dense DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n    \"\"\"\n    return DataFrame(data, index=dates)",
        "begin_line": 20,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame#30",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame()",
        "snippet": "def float_frame():\n    \"\"\"\n    Fixture for sparse DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; some entries are missing\n    \"\"\"\n    # default_kind='block' is the default\n    return SparseDataFrame(data, index=dates, default_kind=\"block\")",
        "begin_line": 30,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_int_kind#41",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_int_kind()",
        "snippet": "def float_frame_int_kind():\n    \"\"\"\n    Fixture for sparse DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D'] and default_kind='integer'.\n    Some entries are missing.\n    \"\"\"\n    return SparseDataFrame(data, index=dates, default_kind=\"integer\")",
        "begin_line": 41,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_string_frame#52",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_string_frame()",
        "snippet": "def float_string_frame():\n    \"\"\"\n    Fixture for sparse DataFrame of floats and strings with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D', 'foo']; some entries are missing\n    \"\"\"\n    sdf = SparseDataFrame(data, index=dates)\n    sdf[\"foo\"] = SparseArray([\"bar\"] * len(dates))\n    return sdf",
        "begin_line": 52,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_fill0_dense#64",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_fill0_dense()",
        "snippet": "def float_frame_fill0_dense():\n    \"\"\"\n    Fixture for dense DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; missing entries have been filled with 0\n    \"\"\"\n    values = SparseDataFrame(data).values\n    values[np.isnan(values)] = 0\n    return DataFrame(values, columns=[\"A\", \"B\", \"C\", \"D\"], index=dates)",
        "begin_line": 64,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_fill0#76",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_fill0()",
        "snippet": "def float_frame_fill0():\n    \"\"\"\n    Fixture for sparse DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; missing entries have been filled with 0\n    \"\"\"\n    values = SparseDataFrame(data).values\n    values[np.isnan(values)] = 0\n    return SparseDataFrame(\n        values, columns=[\"A\", \"B\", \"C\", \"D\"], default_fill_value=0, index=dates\n    )",
        "begin_line": 76,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_fill2_dense#90",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_fill2_dense()",
        "snippet": "def float_frame_fill2_dense():\n    \"\"\"\n    Fixture for dense DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; missing entries have been filled with 2\n    \"\"\"\n    values = SparseDataFrame(data).values\n    values[np.isnan(values)] = 2\n    return DataFrame(values, columns=[\"A\", \"B\", \"C\", \"D\"], index=dates)",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.float_frame_fill2#102",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.float_frame_fill2()",
        "snippet": "def float_frame_fill2():\n    \"\"\"\n    Fixture for sparse DataFrame of floats with DatetimeIndex\n\n    Columns are ['A', 'B', 'C', 'D']; missing entries have been filled with 2\n    \"\"\"\n    values = SparseDataFrame(data).values\n    values[np.isnan(values)] = 2\n    return SparseDataFrame(\n        values, columns=[\"A\", \"B\", \"C\", \"D\"], default_fill_value=2, index=dates\n    )",
        "begin_line": 102,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.conftest.empty_frame#116",
        "src_path": "pandas/tests/sparse/frame/conftest.py",
        "class_name": "pandas.tests.sparse.frame.conftest",
        "signature": "pandas.tests.sparse.frame.conftest.empty_frame()",
        "snippet": "def empty_frame():\n    \"\"\"\n    Fixture for empty SparseDataFrame\n    \"\"\"\n    return SparseDataFrame()",
        "begin_line": 116,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.test_deprecated#28",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame",
        "signature": "pandas.tests.sparse.frame.test_frame.test_deprecated()",
        "snippet": "def test_deprecated():\n    with tm.assert_produces_warning(FutureWarning):\n        pd.SparseDataFrame({\"A\": [1, 2]})",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_iterrows#43",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_iterrows(self, float_frame, float_string_frame)",
        "snippet": "    def test_iterrows(self, float_frame, float_string_frame):\n        # Same as parent, but we don't ensure the sparse kind is the same.\n        for k, v in float_frame.iterrows():\n            exp = float_frame.loc[k]\n            tm.assert_sp_series_equal(v, exp, check_kind=False)\n\n        for k, v in float_string_frame.iterrows():\n            exp = float_string_frame.loc[k]\n            tm.assert_sp_series_equal(v, exp, check_kind=False)",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_itertuples#53",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_itertuples(self, float_frame)",
        "snippet": "    def test_itertuples(self, float_frame):\n        for i, tup in enumerate(float_frame.itertuples()):\n            s = self.klass._constructor_sliced(tup[1:])\n            s.name = tup[0]\n            expected = float_frame.iloc[i, :].reset_index(drop=True)\n            tm.assert_sp_series_equal(s, expected, check_kind=False)",
        "begin_line": 53,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fill_value_when_combine_const#60",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fill_value_when_combine_const(self)",
        "snippet": "    def test_fill_value_when_combine_const(self):\n        # GH12723\n        dat = np.array([0, 1, np.nan, 3, 4, 5], dtype=\"float\")\n        df = SparseDataFrame({\"foo\": dat}, index=range(6))\n\n        exp = df.fillna(0).add(2)\n        res = df.add(2, fill_value=0)\n        tm.assert_sp_frame_equal(res, exp)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_values#69",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_values(self, empty_frame, float_frame)",
        "snippet": "    def test_values(self, empty_frame, float_frame):\n        empty = empty_frame.values\n        assert empty.shape == (0, 0)\n\n        no_cols = SparseDataFrame(index=np.arange(10))\n        mat = no_cols.values\n        assert mat.shape == (10, 0)\n\n        no_index = SparseDataFrame(columns=np.arange(10))\n        mat = no_index.values\n        assert mat.shape == (0, 10)",
        "begin_line": 69,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_copy#81",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_copy(self, float_frame)",
        "snippet": "    def test_copy(self, float_frame):\n        cp = float_frame.copy()\n        assert isinstance(cp, SparseDataFrame)\n        tm.assert_sp_frame_equal(cp, float_frame)\n\n        # as of v0.15.0\n        # this is now identical (but not is_a )\n        assert cp.index.identical(float_frame.index)",
        "begin_line": 81,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor#90",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor(self, float_frame, float_frame_int_kind, float_frame_fill0)",
        "snippet": "    def test_constructor(self, float_frame, float_frame_int_kind, float_frame_fill0):\n        for col, series in float_frame.items():\n            assert isinstance(series, SparseSeries)\n\n        assert isinstance(float_frame_int_kind[\"A\"].sp_index, IntIndex)\n\n        # constructed zframe from matrix above\n        assert float_frame_fill0[\"A\"].fill_value == 0\n        # XXX: changed asarray\n        expected = pd.SparseArray(\n            [0, 0, 0, 0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0], fill_value=0, kind=\"block\"\n        )\n        tm.assert_sp_array_equal(expected, float_frame_fill0[\"A\"].values)\n        tm.assert_numpy_array_equal(\n            np.array([0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]),\n            float_frame_fill0[\"A\"].to_dense().values,\n        )\n\n        # construct no data\n        sdf = SparseDataFrame(columns=np.arange(10), index=np.arange(10))\n        for col, series in sdf.items():\n            assert isinstance(series, SparseSeries)\n\n        # construct from nested dict\n        data = {c: s.to_dict() for c, s in float_frame.items()}\n\n        sdf = SparseDataFrame(data)\n        tm.assert_sp_frame_equal(sdf, float_frame)\n\n        # TODO: test data is copied from inputs\n\n        # init dict with different index\n        idx = float_frame.index[:5]\n        cons = SparseDataFrame(\n            float_frame,\n            index=idx,\n            columns=float_frame.columns,\n            default_fill_value=float_frame.default_fill_value,\n            default_kind=float_frame.default_kind,\n            copy=True,\n        )\n        reindexed = float_frame.reindex(idx)\n\n        tm.assert_sp_frame_equal(cons, reindexed, exact_indices=False)\n\n        # assert level parameter breaks reindex\n        with pytest.raises(TypeError):\n            float_frame.reindex(idx, level=0)\n\n        repr(float_frame)",
        "begin_line": 90,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_fill_value_not_scalar_raises#141",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_fill_value_not_scalar_raises(self)",
        "snippet": "    def test_constructor_fill_value_not_scalar_raises(self):\n        d = {\"b\": [2, 3], \"a\": [0, 1]}\n        fill_value = np.array(np.nan)\n        with pytest.raises(ValueError, match=\"must be a scalar\"):\n            SparseDataFrame(data=d, default_fill_value=fill_value)",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_dict_order#147",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_dict_order(self)",
        "snippet": "    def test_constructor_dict_order(self):\n        # GH19018\n        # initialization ordering: by insertion order if python>= 3.6, else\n        # order by value\n        d = {\"b\": [2, 3], \"a\": [0, 1]}\n        frame = SparseDataFrame(data=d)\n        if compat.PY36:\n            expected = SparseDataFrame(data=d, columns=list(\"ba\"))\n        else:\n            expected = SparseDataFrame(data=d, columns=list(\"ab\"))\n        tm.assert_sp_frame_equal(frame, expected)",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_ndarray#159",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_ndarray(self, float_frame)",
        "snippet": "    def test_constructor_ndarray(self, float_frame):\n        # no index or columns\n        sp = SparseDataFrame(float_frame.values)\n\n        # 1d\n        sp = SparseDataFrame(\n            float_frame[\"A\"].values, index=float_frame.index, columns=[\"A\"]\n        )\n        tm.assert_sp_frame_equal(sp, float_frame.reindex(columns=[\"A\"]))\n\n        # raise on level argument\n        msg = \"Reindex by level not supported for sparse\"\n        with pytest.raises(TypeError, match=msg):\n            float_frame.reindex(columns=[\"A\"], level=1)\n\n        # wrong length index / columns\n        with pytest.raises(ValueError, match=\"^Index length\"):\n            SparseDataFrame(float_frame.values, index=float_frame.index[:-1])\n\n        with pytest.raises(ValueError, match=\"^Column length\"):\n            SparseDataFrame(float_frame.values, columns=float_frame.columns[:-1])",
        "begin_line": 159,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_empty#182",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_empty(self)",
        "snippet": "    def test_constructor_empty(self):\n        sp = SparseDataFrame()\n        assert len(sp.index) == 0\n        assert len(sp.columns) == 0",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_dataframe#187",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_dataframe(self, float_frame)",
        "snippet": "    def test_constructor_dataframe(self, float_frame):\n        dense = float_frame.to_dense()\n        sp = SparseDataFrame(dense)\n        tm.assert_sp_frame_equal(sp, float_frame)",
        "begin_line": 187,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_convert_index_once#192",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_convert_index_once(self)",
        "snippet": "    def test_constructor_convert_index_once(self):\n        arr = np.array([1.5, 2.5, 3.5])\n        sdf = SparseDataFrame(columns=range(4), index=arr)\n        assert sdf[0].index is sdf[1].index",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_series#197",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_series(self)",
        "snippet": "    def test_constructor_from_series(self):\n\n        # GH 2873\n        x = Series(np.random.randn(10000), name=\"a\")\n        x = x.to_sparse(fill_value=0)\n        assert isinstance(x, SparseSeries)\n        df = SparseDataFrame(x)\n        assert isinstance(df, SparseDataFrame)\n\n        x = Series(np.random.randn(10000), name=\"a\")\n        y = Series(np.random.randn(10000), name=\"b\")\n        x2 = x.astype(float)\n        x2.loc[:9998] = np.NaN\n        # TODO: x_sparse is unused...fix\n        x_sparse = x2.to_sparse(fill_value=np.NaN)  # noqa\n\n        # Currently fails too with weird ufunc error\n        # df1 = SparseDataFrame([x_sparse, y])\n\n        y.loc[:9998] = 0\n        # TODO: y_sparse is unsused...fix\n        y_sparse = y.to_sparse(fill_value=0)  # noqa",
        "begin_line": 197,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_dense_series#222",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_dense_series(self)",
        "snippet": "    def test_constructor_from_dense_series(self):\n        # GH 19393\n        # series with name\n        x = Series(np.random.randn(10000), name=\"a\")\n        result = SparseDataFrame(x)\n        expected = x.to_frame().to_sparse()\n        tm.assert_sp_frame_equal(result, expected)\n\n        # series with no name\n        x = Series(np.random.randn(10000))\n        result = SparseDataFrame(x)\n        expected = x.to_frame().to_sparse()\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 222,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_unknown_type#236",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_from_unknown_type(self)",
        "snippet": "    def test_constructor_from_unknown_type(self):\n        # GH 19393\n        class Unknown:\n            pass\n\n        with pytest.raises(\n            TypeError,\n            match=(\n                \"SparseDataFrame called with unknown type \"\n                '\"Unknown\" for data argument'\n            ),\n        ):\n            SparseDataFrame(Unknown())",
        "begin_line": 236,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.Unknown.test_constructor_from_unknown_type#236",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.Unknown",
        "signature": "pandas.tests.sparse.frame.test_frame.Unknown.test_constructor_from_unknown_type(self)",
        "snippet": "    def test_constructor_from_unknown_type(self):\n        # GH 19393\n        class Unknown:\n            pass\n\n        with pytest.raises(\n            TypeError,\n            match=(\n                \"SparseDataFrame called with unknown type \"\n                '\"Unknown\" for data argument'\n            ),\n        ):\n            SparseDataFrame(Unknown())",
        "begin_line": 236,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_preserve_attr#250",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_preserve_attr(self)",
        "snippet": "    def test_constructor_preserve_attr(self):\n        # GH 13866\n        arr = pd.SparseArray([1, 0, 3, 0], dtype=np.int64, fill_value=0)\n        assert arr.dtype == SparseDtype(np.int64)\n        assert arr.fill_value == 0\n\n        df = pd.SparseDataFrame({\"x\": arr})\n        assert df[\"x\"].dtype == SparseDtype(np.int64)\n        assert df[\"x\"].fill_value == 0\n\n        s = pd.SparseSeries(arr, name=\"x\")\n        assert s.dtype == SparseDtype(np.int64)\n        assert s.fill_value == 0\n\n        df = pd.SparseDataFrame(s)\n        assert df[\"x\"].dtype == SparseDtype(np.int64)\n        assert df[\"x\"].fill_value == 0\n\n        df = pd.SparseDataFrame({\"x\": s})\n        assert df[\"x\"].dtype == SparseDtype(np.int64)\n        assert df[\"x\"].fill_value == 0",
        "begin_line": 250,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_nan_dataframe#272",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_constructor_nan_dataframe(self)",
        "snippet": "    def test_constructor_nan_dataframe(self):\n        # GH 10079\n        trains = np.arange(100)\n        thresholds = [10, 20, 30, 40, 50, 60]\n        tuples = [(i, j) for i in trains for j in thresholds]\n        index = pd.MultiIndex.from_tuples(tuples, names=[\"trains\", \"thresholds\"])\n        matrix = np.empty((len(index), len(trains)))\n        matrix.fill(np.nan)\n        df = pd.DataFrame(matrix, index=index, columns=trains, dtype=float)\n        result = df.to_sparse()\n        expected = pd.SparseDataFrame(matrix, index=index, columns=trains, dtype=float)\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 272,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_type_coercion_at_construction#285",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_type_coercion_at_construction(self)",
        "snippet": "    def test_type_coercion_at_construction(self):\n        # GH 15682\n        result = pd.SparseDataFrame(\n            {\"a\": [1, 0, 0], \"b\": [0, 1, 0], \"c\": [0, 0, 1]},\n            dtype=\"uint8\",\n            default_fill_value=0,\n        )\n        expected = pd.SparseDataFrame(\n            {\n                \"a\": pd.SparseSeries([1, 0, 0], dtype=\"uint8\"),\n                \"b\": pd.SparseSeries([0, 1, 0], dtype=\"uint8\"),\n                \"c\": pd.SparseSeries([0, 0, 1], dtype=\"uint8\"),\n            },\n            default_fill_value=0,\n        )\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 285,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_default_dtype#302",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_default_dtype(self)",
        "snippet": "    def test_default_dtype(self):\n        result = pd.SparseDataFrame(columns=list(\"ab\"), index=range(2))\n        expected = pd.SparseDataFrame(\n            [[np.nan, np.nan], [np.nan, np.nan]], columns=list(\"ab\"), index=range(2)\n        )\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 302,
        "end_line": 307,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_nan_data_with_int_dtype_raises_error#309",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_nan_data_with_int_dtype_raises_error(self)",
        "snippet": "    def test_nan_data_with_int_dtype_raises_error(self):\n        sdf = pd.SparseDataFrame(\n            [[np.nan, np.nan], [np.nan, np.nan]], columns=list(\"ab\"), index=range(2)\n        )\n        msg = \"Cannot convert non-finite values\"\n        with pytest.raises(ValueError, match=msg):\n            pd.SparseDataFrame(sdf, dtype=np.int64)",
        "begin_line": 309,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_dtypes#317",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_dtypes(self)",
        "snippet": "    def test_dtypes(self):\n        df = DataFrame(np.random.randn(10000, 4))\n        df.loc[:9998] = np.nan\n        sdf = df.to_sparse()\n        result = sdf.dtypes\n        expected = Series([\"Sparse[float64, nan]\"] * 4)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 317,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_shape#325",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_shape(self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2)",
        "snippet": "    def test_shape(\n        self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2\n    ):\n        # see gh-10452\n        assert float_frame.shape == (10, 4)\n        assert float_frame_int_kind.shape == (10, 4)\n        assert float_frame_fill0.shape == (10, 4)\n        assert float_frame_fill2.shape == (10, 4)",
        "begin_line": 325,
        "end_line": 332,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_str#334",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_str(self)",
        "snippet": "    def test_str(self):\n        df = DataFrame(np.random.randn(10000, 4))\n        df.loc[:9998] = np.nan\n\n        sdf = df.to_sparse()\n        str(sdf)",
        "begin_line": 334,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_array_interface#341",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_array_interface(self, float_frame)",
        "snippet": "    def test_array_interface(self, float_frame):\n        res = np.sqrt(float_frame)\n        dres = np.sqrt(float_frame.to_dense())\n        tm.assert_frame_equal(res.to_dense(), dres)",
        "begin_line": 341,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_pickle#346",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_pickle(self, float_frame, float_frame_int_kind, float_frame_dense, float_frame_fill0, float_frame_fill0_dense, float_frame_fill2, float_frame_fill2_dense)",
        "snippet": "    def test_pickle(\n        self,\n        float_frame,\n        float_frame_int_kind,\n        float_frame_dense,\n        float_frame_fill0,\n        float_frame_fill0_dense,\n        float_frame_fill2,\n        float_frame_fill2_dense,\n    ):\n        def _test_roundtrip(frame, orig):\n            result = tm.round_trip_pickle(frame)\n            tm.assert_sp_frame_equal(frame, result)\n            tm.assert_frame_equal(result.to_dense(), orig, check_dtype=False)\n\n        _test_roundtrip(SparseDataFrame(), DataFrame())\n        _test_roundtrip(float_frame, float_frame_dense)\n        _test_roundtrip(float_frame_int_kind, float_frame_dense)\n        _test_roundtrip(float_frame_fill0, float_frame_fill0_dense)\n        _test_roundtrip(float_frame_fill2, float_frame_fill2_dense)",
        "begin_line": 346,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._test_roundtrip#356",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._test_roundtrip(frame, orig)",
        "snippet": "        def _test_roundtrip(frame, orig):\n            result = tm.round_trip_pickle(frame)\n            tm.assert_sp_frame_equal(frame, result)\n            tm.assert_frame_equal(result.to_dense(), orig, check_dtype=False)",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_dense_to_sparse#367",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_dense_to_sparse(self)",
        "snippet": "    def test_dense_to_sparse(self):\n        df = DataFrame({\"A\": [nan, nan, nan, 1, 2], \"B\": [1, 2, nan, nan, nan]})\n        sdf = df.to_sparse()\n        assert isinstance(sdf, SparseDataFrame)\n        assert np.isnan(sdf.default_fill_value)\n        assert isinstance(sdf[\"A\"].sp_index, BlockIndex)\n        tm.assert_frame_equal(sdf.to_dense(), df)\n\n        sdf = df.to_sparse(kind=\"integer\")\n        assert isinstance(sdf[\"A\"].sp_index, IntIndex)\n\n        df = DataFrame({\"A\": [0, 0, 0, 1, 2], \"B\": [1, 2, 0, 0, 0]}, dtype=float)\n        sdf = df.to_sparse(fill_value=0)\n        assert sdf.default_fill_value == 0\n        tm.assert_frame_equal(sdf.to_dense(), df)",
        "begin_line": 367,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_deprecated_dense_to_sparse#383",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_deprecated_dense_to_sparse(self)",
        "snippet": "    def test_deprecated_dense_to_sparse(self):\n        # GH 26557\n        # Deprecated 0.25.0\n\n        df = pd.DataFrame({\"A\": [1, np.nan, 3]})\n        sparse_df = pd.SparseDataFrame({\"A\": [1, np.nan, 3]})\n\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            result = df.to_sparse()\n        tm.assert_frame_equal(result, sparse_df)",
        "begin_line": 383,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_density#394",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_density(self)",
        "snippet": "    def test_density(self):\n        df = SparseSeries([nan, nan, nan, 0, 1, 2, 3, 4, 5, 6])\n        assert df.density == 0.7\n\n        df = SparseDataFrame(\n            {\n                \"A\": [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],\n                \"B\": [0, 1, 2, nan, nan, nan, 3, 4, 5, 6],\n                \"C\": np.arange(10),\n                \"D\": [0, 1, 2, 3, 4, 5, nan, nan, nan, nan],\n            }\n        )\n\n        assert df.density == 0.75",
        "begin_line": 394,
        "end_line": 407,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_to_dense#409",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_to_dense(self)",
        "snippet": "    def test_sparse_to_dense(self):\n        pass",
        "begin_line": 409,
        "end_line": 410,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops#412",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops(self, float_frame)",
        "snippet": "    def test_sparse_series_ops(self, float_frame):\n        self._check_frame_ops(float_frame)",
        "begin_line": 412,
        "end_line": 413,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_i#415",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_i(self, float_frame_int_kind)",
        "snippet": "    def test_sparse_series_ops_i(self, float_frame_int_kind):\n        self._check_frame_ops(float_frame_int_kind)",
        "begin_line": 415,
        "end_line": 416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_z#418",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_z(self, float_frame_fill0)",
        "snippet": "    def test_sparse_series_ops_z(self, float_frame_fill0):\n        self._check_frame_ops(float_frame_fill0)",
        "begin_line": 418,
        "end_line": 419,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_fill#421",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_series_ops_fill(self, float_frame_fill2)",
        "snippet": "    def test_sparse_series_ops_fill(self, float_frame_fill2):\n        self._check_frame_ops(float_frame_fill2)",
        "begin_line": 421,
        "end_line": 422,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame_ops#424",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame_ops(self, frame)",
        "snippet": "    def _check_frame_ops(self, frame):\n        def _compare_to_dense(a, b, da, db, op):\n            sparse_result = op(a, b)\n            dense_result = op(da, db)\n\n            # catch lambdas but not non-lambdas e.g. operator.add\n            if op in [operator.floordiv, ops.rfloordiv] or isinstance(op, LambdaType):\n                # GH#27231 Series sets 1//0 to np.inf, which SparseArray\n                #  does not do (yet)\n                mask = np.isinf(dense_result) & ~np.isinf(sparse_result.to_dense())\n                dense_result[mask] = np.nan\n\n            fill = sparse_result.default_fill_value\n            dense_result = dense_result.to_sparse(fill_value=fill)\n            tm.assert_sp_frame_equal(sparse_result, dense_result, exact_indices=False)\n\n            if isinstance(a, DataFrame) and isinstance(db, DataFrame):\n                mixed_result = op(a, db)\n                assert isinstance(mixed_result, SparseDataFrame)\n                tm.assert_sp_frame_equal(\n                    mixed_result, sparse_result, exact_indices=False\n                )\n\n        opnames = [\"add\", \"sub\", \"mul\", \"truediv\", \"floordiv\"]\n\n        fidx = frame.index\n\n        # time series operations\n\n        series = [\n            frame[\"A\"],\n            frame[\"B\"],\n            frame[\"C\"],\n            frame[\"D\"],\n            frame[\"A\"].reindex(fidx[:7]),\n            frame[\"A\"].reindex(fidx[::2]),\n            SparseSeries([], index=[]),\n        ]\n\n        for op in opnames:\n            _compare_to_dense(\n                frame,\n                frame[::2],\n                frame.to_dense(),\n                frame[::2].to_dense(),\n                getattr(operator, op),\n            )\n\n            # 2304, no auto-broadcasting\n            for i, s in enumerate(series):\n                f = lambda a, b: getattr(a, op)(b, axis=\"index\")\n                _compare_to_dense(frame, s, frame.to_dense(), s.to_dense(), f)\n\n                # FIXME: dont leave commented-out\n                # rops are not implemented\n                # _compare_to_dense(s, frame, s.to_dense(),\n                #                   frame.to_dense(), f)\n\n                # cross-sectional operations\n        series = [\n            frame.xs(fidx[0]),\n            frame.xs(fidx[3]),\n            frame.xs(fidx[5]),\n            frame.xs(fidx[7]),\n            frame.xs(fidx[5])[:2],\n        ]\n\n        for name in opnames:\n            op = getattr(operator, name)\n            for s in series:\n                _compare_to_dense(frame, s, frame.to_dense(), s, op)\n                _compare_to_dense(s, frame, s, frame.to_dense(), op)\n\n        # it works!\n        frame + frame.loc[:, [\"A\", \"B\"]]",
        "begin_line": 424,
        "end_line": 498,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._compare_to_dense#425",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._compare_to_dense(a, b, da, db, op)",
        "snippet": "        def _compare_to_dense(a, b, da, db, op):\n            sparse_result = op(a, b)\n            dense_result = op(da, db)\n\n            # catch lambdas but not non-lambdas e.g. operator.add\n            if op in [operator.floordiv, ops.rfloordiv] or isinstance(op, LambdaType):\n                # GH#27231 Series sets 1//0 to np.inf, which SparseArray\n                #  does not do (yet)\n                mask = np.isinf(dense_result) & ~np.isinf(sparse_result.to_dense())\n                dense_result[mask] = np.nan\n\n            fill = sparse_result.default_fill_value\n            dense_result = dense_result.to_sparse(fill_value=fill)\n            tm.assert_sp_frame_equal(sparse_result, dense_result, exact_indices=False)\n\n            if isinstance(a, DataFrame) and isinstance(db, DataFrame):\n                mixed_result = op(a, db)\n                assert isinstance(mixed_result, SparseDataFrame)\n                tm.assert_sp_frame_equal(\n                    mixed_result, sparse_result, exact_indices=False\n                )",
        "begin_line": 425,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_op_corners#500",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_op_corners(self, float_frame, empty_frame)",
        "snippet": "    def test_op_corners(self, float_frame, empty_frame):\n        empty = empty_frame + empty_frame\n        assert empty.empty\n\n        foo = float_frame + empty_frame\n        assert isinstance(foo.index, DatetimeIndex)\n        tm.assert_frame_equal(foo, float_frame * np.nan)\n\n        foo = empty_frame + float_frame\n        tm.assert_frame_equal(foo, float_frame * np.nan)",
        "begin_line": 500,
        "end_line": 509,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_scalar_ops#511",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_scalar_ops(self)",
        "snippet": "    def test_scalar_ops(self):\n        pass",
        "begin_line": 511,
        "end_line": 512,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_getitem#514",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_getitem(self)",
        "snippet": "    def test_getitem(self):\n        # 1585 select multiple columns\n        sdf = SparseDataFrame(index=[0, 1, 2], columns=[\"a\", \"b\", \"c\"])\n\n        result = sdf[[\"a\", \"b\"]]\n        exp = sdf.reindex(columns=[\"a\", \"b\"])\n        tm.assert_sp_frame_equal(result, exp)\n\n        with pytest.raises(KeyError, match=r\"\\['d'\\] not in index\"):\n            sdf[[\"a\", \"d\"]]",
        "begin_line": 514,
        "end_line": 523,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_iloc#525",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_iloc(self, float_frame)",
        "snippet": "    def test_iloc(self, float_frame):\n\n        # GH 2227\n        result = float_frame.iloc[:, 0]\n        assert isinstance(result, SparseSeries)\n        tm.assert_sp_series_equal(result, float_frame[\"A\"])\n\n        # preserve sparse index type. #2251\n        data = {\"A\": [0, 1]}\n        iframe = SparseDataFrame(data, default_kind=\"integer\")\n        tm.assert_class_equal(iframe[\"A\"].sp_index, iframe.iloc[:, 0].sp_index)",
        "begin_line": 525,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_value#537",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_value(self, float_frame)",
        "snippet": "    def test_set_value(self, float_frame):\n\n        # ok, as the index gets converted to object\n        frame = float_frame.copy()\n        res = frame._set_value(\"foobar\", \"B\", 1.5)\n        assert res.index.dtype == \"object\"\n\n        res = float_frame\n        res.index = res.index.astype(object)\n\n        res = float_frame._set_value(\"foobar\", \"B\", 1.5)\n        assert res is not float_frame\n        assert res.index[-1] == \"foobar\"\n        assert res._get_value(\"foobar\", \"B\") == 1.5\n\n        res2 = res._set_value(\"foobar\", \"qux\", 1.5)\n        assert res2 is not res\n        tm.assert_index_equal(\n            res2.columns, pd.Index(list(float_frame.columns) + [\"qux\"])\n        )\n        assert res2._get_value(\"foobar\", \"qux\") == 1.5",
        "begin_line": 537,
        "end_line": 557,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fancy_index_misc#559",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fancy_index_misc(self, float_frame)",
        "snippet": "    def test_fancy_index_misc(self, float_frame):\n        # axis = 0\n        sliced = float_frame.iloc[-2:, :]\n        expected = float_frame.reindex(index=float_frame.index[-2:])\n        tm.assert_sp_frame_equal(sliced, expected)\n\n        # axis = 1\n        sliced = float_frame.iloc[:, -2:]\n        expected = float_frame.reindex(columns=float_frame.columns[-2:])\n        tm.assert_sp_frame_equal(sliced, expected)",
        "begin_line": 559,
        "end_line": 568,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_getitem_overload#570",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_getitem_overload(self, float_frame)",
        "snippet": "    def test_getitem_overload(self, float_frame):\n        # slicing\n        sl = float_frame[:20]\n        tm.assert_sp_frame_equal(sl, float_frame.reindex(float_frame.index[:20]))\n\n        # boolean indexing\n        d = float_frame.index[5]\n        indexer = float_frame.index > d\n\n        subindex = float_frame.index[indexer]\n        subframe = float_frame[indexer]\n\n        tm.assert_index_equal(subindex, subframe.index)\n        msg = \"Item wrong length 9 instead of 10\"\n        with pytest.raises(ValueError, match=msg):\n            float_frame[indexer[:-1]]",
        "begin_line": 570,
        "end_line": 585,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem#587",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem(self, float_frame, float_frame_int_kind, float_frame_dense, float_frame_fill0, float_frame_fill0_dense, float_frame_fill2, float_frame_fill2_dense)",
        "snippet": "    def test_setitem(\n        self,\n        float_frame,\n        float_frame_int_kind,\n        float_frame_dense,\n        float_frame_fill0,\n        float_frame_fill0_dense,\n        float_frame_fill2,\n        float_frame_fill2_dense,\n    ):\n        def _check_frame(frame, orig):\n            N = len(frame)\n\n            # insert SparseSeries\n            frame[\"E\"] = frame[\"A\"]\n            assert isinstance(frame[\"E\"], SparseSeries)\n            tm.assert_sp_series_equal(frame[\"E\"], frame[\"A\"], check_names=False)\n\n            # insert SparseSeries differently-indexed\n            to_insert = frame[\"A\"][::2]\n            frame[\"E\"] = to_insert\n            expected = to_insert.to_dense().reindex(frame.index)\n            result = frame[\"E\"].to_dense()\n            tm.assert_series_equal(result, expected, check_names=False)\n            assert result.name == \"E\"\n\n            # insert Series\n            frame[\"F\"] = frame[\"A\"].to_dense()\n            assert isinstance(frame[\"F\"], SparseSeries)\n            tm.assert_sp_series_equal(frame[\"F\"], frame[\"A\"], check_names=False)\n\n            # insert Series differently-indexed\n            to_insert = frame[\"A\"].to_dense()[::2]\n            frame[\"G\"] = to_insert\n            expected = to_insert.reindex(frame.index)\n            expected.name = \"G\"\n            tm.assert_series_equal(frame[\"G\"].to_dense(), expected)\n\n            # insert ndarray\n            frame[\"H\"] = np.random.randn(N)\n            assert isinstance(frame[\"H\"], SparseSeries)\n\n            to_sparsify = np.random.randn(N)\n            to_sparsify[N // 2 :] = frame.default_fill_value\n            frame[\"I\"] = to_sparsify\n            assert len(frame[\"I\"].sp_values) == N // 2\n\n            # insert ndarray wrong size\n            # GH 25484\n            msg = \"Length of values does not match length of index\"\n            with pytest.raises(ValueError, match=msg):\n                frame[\"foo\"] = np.random.randn(N - 1)\n\n            # scalar value\n            frame[\"J\"] = 5\n            assert len(frame[\"J\"].sp_values) == N\n            assert (frame[\"J\"].sp_values == 5).all()\n\n            frame[\"K\"] = frame.default_fill_value\n            assert len(frame[\"K\"].sp_values) == 0\n\n        _check_frame(float_frame, float_frame_dense)\n        _check_frame(float_frame_int_kind, float_frame_dense)\n        _check_frame(float_frame_fill0, float_frame_fill0_dense)\n        _check_frame(float_frame_fill2, float_frame_fill2_dense)",
        "begin_line": 587,
        "end_line": 651,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame#597",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame(frame, orig)",
        "snippet": "        def _check_frame(frame, orig):\n            N = len(frame)\n\n            # insert SparseSeries\n            frame[\"E\"] = frame[\"A\"]\n            assert isinstance(frame[\"E\"], SparseSeries)\n            tm.assert_sp_series_equal(frame[\"E\"], frame[\"A\"], check_names=False)\n\n            # insert SparseSeries differently-indexed\n            to_insert = frame[\"A\"][::2]\n            frame[\"E\"] = to_insert\n            expected = to_insert.to_dense().reindex(frame.index)\n            result = frame[\"E\"].to_dense()\n            tm.assert_series_equal(result, expected, check_names=False)\n            assert result.name == \"E\"\n\n            # insert Series\n            frame[\"F\"] = frame[\"A\"].to_dense()\n            assert isinstance(frame[\"F\"], SparseSeries)\n            tm.assert_sp_series_equal(frame[\"F\"], frame[\"A\"], check_names=False)\n\n            # insert Series differently-indexed\n            to_insert = frame[\"A\"].to_dense()[::2]\n            frame[\"G\"] = to_insert\n            expected = to_insert.reindex(frame.index)\n            expected.name = \"G\"\n            tm.assert_series_equal(frame[\"G\"].to_dense(), expected)\n\n            # insert ndarray\n            frame[\"H\"] = np.random.randn(N)\n            assert isinstance(frame[\"H\"], SparseSeries)\n\n            to_sparsify = np.random.randn(N)\n            to_sparsify[N // 2 :] = frame.default_fill_value\n            frame[\"I\"] = to_sparsify\n            assert len(frame[\"I\"].sp_values) == N // 2\n\n            # insert ndarray wrong size\n            # GH 25484\n            msg = \"Length of values does not match length of index\"\n            with pytest.raises(ValueError, match=msg):\n                frame[\"foo\"] = np.random.randn(N - 1)\n\n            # scalar value\n            frame[\"J\"] = 5\n            assert len(frame[\"J\"].sp_values) == N\n            assert (frame[\"J\"].sp_values == 5).all()\n\n            frame[\"K\"] = frame.default_fill_value\n            assert len(frame[\"K\"].sp_values) == 0",
        "begin_line": 597,
        "end_line": 646,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_more#664",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_more(self, values)",
        "snippet": "    def test_setitem_more(self, values):\n        df = pd.DataFrame({\"A\": values})\n        df[\"A\"] = pd.SparseArray(values)\n        expected = pd.DataFrame({\"A\": pd.SparseArray(values)})\n        tm.assert_frame_equal(df, expected)",
        "begin_line": 664,
        "end_line": 668,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_corner#670",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_corner(self, float_frame)",
        "snippet": "    def test_setitem_corner(self, float_frame):\n        float_frame[\"a\"] = float_frame[\"B\"]\n        tm.assert_sp_series_equal(float_frame[\"a\"], float_frame[\"B\"], check_names=False)",
        "begin_line": 670,
        "end_line": 672,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_array#674",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_array(self, float_frame)",
        "snippet": "    def test_setitem_array(self, float_frame):\n        arr = float_frame[\"B\"]\n\n        float_frame[\"E\"] = arr\n        tm.assert_sp_series_equal(float_frame[\"E\"], float_frame[\"B\"], check_names=False)\n\n        float_frame[\"F\"] = arr[:-1]\n        index = float_frame.index[:-1]\n        tm.assert_sp_series_equal(\n            float_frame[\"E\"].reindex(index),\n            float_frame[\"F\"].reindex(index),\n            check_names=False,\n        )",
        "begin_line": 674,
        "end_line": 686,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_chained_no_consolidate#688",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_setitem_chained_no_consolidate(self)",
        "snippet": "    def test_setitem_chained_no_consolidate(self):\n        # https://github.com/pandas-dev/pandas/pull/19268\n        # issuecomment-361696418\n        # chained setitem used to cause consolidation\n        sdf = pd.SparseDataFrame([[np.nan, 1], [2, np.nan]])\n        with pd.option_context(\"mode.chained_assignment\", None):\n            sdf[0][1] = 2\n        assert len(sdf._data.blocks) == 2",
        "begin_line": 688,
        "end_line": 695,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_delitem#697",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_delitem(self, float_frame)",
        "snippet": "    def test_delitem(self, float_frame):\n        A = float_frame[\"A\"]\n        C = float_frame[\"C\"]\n\n        del float_frame[\"B\"]\n        assert \"B\" not in float_frame\n        tm.assert_sp_series_equal(float_frame[\"A\"], A)\n        tm.assert_sp_series_equal(float_frame[\"C\"], C)\n\n        del float_frame[\"D\"]\n        assert \"D\" not in float_frame\n\n        del float_frame[\"A\"]\n        assert \"A\" not in float_frame",
        "begin_line": 697,
        "end_line": 710,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_columns#712",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_columns(self, float_frame)",
        "snippet": "    def test_set_columns(self, float_frame):\n        float_frame.columns = float_frame.columns\n        msg = (\n            \"Length mismatch: Expected axis has 4 elements, new values have\"\n            \" 3 elements\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            float_frame.columns = float_frame.columns[:-1]",
        "begin_line": 712,
        "end_line": 719,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_index#721",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_set_index(self, float_frame)",
        "snippet": "    def test_set_index(self, float_frame):\n        float_frame.index = float_frame.index\n        msg = (\n            \"Length mismatch: Expected axis has 10 elements, new values\"\n            \" have 9 elements\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            float_frame.index = float_frame.index[:-1]",
        "begin_line": 721,
        "end_line": 728,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_ctor_reindex#730",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_ctor_reindex(self)",
        "snippet": "    def test_ctor_reindex(self):\n        idx = pd.Index([0, 1, 2, 3])\n        msg = \"Length of passed values is 2, index implies 4\"\n        with pytest.raises(ValueError, match=msg):\n            pd.SparseDataFrame({\"A\": [1, 2]}, index=idx)",
        "begin_line": 730,
        "end_line": 734,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_append#736",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_append(self, float_frame)",
        "snippet": "    def test_append(self, float_frame):\n        a = float_frame[:5]\n        b = float_frame[5:]\n\n        appended = a.append(b)\n        tm.assert_sp_frame_equal(appended, float_frame, exact_indices=False)\n\n        a = float_frame.iloc[:5, :3]\n        b = float_frame.iloc[5:]\n        with tm.assert_produces_warning(\n            FutureWarning, check_stacklevel=False, raise_on_extra_warnings=False\n        ):\n            # Stacklevel is set for pd.concat, not append\n            appended = a.append(b)\n        tm.assert_sp_frame_equal(\n            appended.iloc[:, :3], float_frame.iloc[:, :3], exact_indices=False\n        )\n\n        a = a[[\"B\", \"C\", \"A\"]].head(2)\n        b = b.head(2)\n\n        expected = pd.SparseDataFrame(\n            {\n                \"B\": [0.0, 1, None, 3],\n                \"C\": [0.0, 1, 5, 6],\n                \"A\": [None, None, 2, 3],\n                \"D\": [None, None, 5, None],\n            },\n            index=a.index | b.index,\n            columns=[\"B\", \"C\", \"A\", \"D\"],\n        )\n        with tm.assert_produces_warning(None, raise_on_extra_warnings=False):\n            appended = a.append(b, sort=False)\n\n        tm.assert_frame_equal(appended, expected)\n\n        with tm.assert_produces_warning(None, raise_on_extra_warnings=False):\n            appended = a.append(b, sort=True)\n\n        tm.assert_sp_frame_equal(\n            appended,\n            expected[[\"A\", \"B\", \"C\", \"D\"]],\n            consolidate_block_indices=True,\n            check_kind=False,\n        )",
        "begin_line": 736,
        "end_line": 780,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype#782",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype(self)",
        "snippet": "    def test_astype(self):\n        sparse = pd.SparseDataFrame(\n            {\n                \"A\": SparseArray([1, 2, 3, 4], dtype=np.int64),\n                \"B\": SparseArray([4, 5, 6, 7], dtype=np.int64),\n            }\n        )\n        assert sparse[\"A\"].dtype == SparseDtype(np.int64)\n        assert sparse[\"B\"].dtype == SparseDtype(np.int64)\n\n        # retain fill_value\n        res = sparse.astype(np.float64)\n        exp = pd.SparseDataFrame(\n            {\n                \"A\": SparseArray([1.0, 2.0, 3.0, 4.0], fill_value=0, kind=\"integer\"),\n                \"B\": SparseArray([4.0, 5.0, 6.0, 7.0], fill_value=0, kind=\"integer\"),\n            },\n            default_fill_value=np.nan,\n        )\n        tm.assert_sp_frame_equal(res, exp)\n        assert res[\"A\"].dtype == SparseDtype(np.float64, 0)\n        assert res[\"B\"].dtype == SparseDtype(np.float64, 0)\n\n        # update fill_value\n        res = sparse.astype(SparseDtype(np.float64, np.nan))\n        exp = pd.SparseDataFrame(\n            {\n                \"A\": SparseArray(\n                    [1.0, 2.0, 3.0, 4.0], fill_value=np.nan, kind=\"integer\"\n                ),\n                \"B\": SparseArray(\n                    [4.0, 5.0, 6.0, 7.0], fill_value=np.nan, kind=\"integer\"\n                ),\n            },\n            default_fill_value=np.nan,\n        )\n        tm.assert_sp_frame_equal(res, exp)\n        assert res[\"A\"].dtype == SparseDtype(np.float64, np.nan)\n        assert res[\"B\"].dtype == SparseDtype(np.float64, np.nan)",
        "begin_line": 782,
        "end_line": 820,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype_bool#822",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype_bool(self)",
        "snippet": "    def test_astype_bool(self):\n        sparse = pd.SparseDataFrame(\n            {\n                \"A\": SparseArray([0, 2, 0, 4], fill_value=0, dtype=np.int64),\n                \"B\": SparseArray([0, 5, 0, 7], fill_value=0, dtype=np.int64),\n            },\n            default_fill_value=0,\n        )\n        assert sparse[\"A\"].dtype == SparseDtype(np.int64)\n        assert sparse[\"B\"].dtype == SparseDtype(np.int64)\n\n        res = sparse.astype(SparseDtype(bool, False))\n        exp = pd.SparseDataFrame(\n            {\n                \"A\": SparseArray(\n                    [False, True, False, True],\n                    dtype=np.bool,\n                    fill_value=False,\n                    kind=\"integer\",\n                ),\n                \"B\": SparseArray(\n                    [False, True, False, True],\n                    dtype=np.bool,\n                    fill_value=False,\n                    kind=\"integer\",\n                ),\n            },\n            default_fill_value=False,\n        )\n        tm.assert_sp_frame_equal(res, exp)\n        assert res[\"A\"].dtype == SparseDtype(np.bool)\n        assert res[\"B\"].dtype == SparseDtype(np.bool)",
        "begin_line": 822,
        "end_line": 853,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype_object#855",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_astype_object(self)",
        "snippet": "    def test_astype_object(self):\n        # This may change in GH-23125\n        df = pd.DataFrame({\"A\": SparseArray([0, 1]), \"B\": SparseArray([0, 1])})\n        result = df.astype(object)\n        dtype = SparseDtype(object, 0)\n        expected = pd.DataFrame(\n            {\n                \"A\": SparseArray([0, 1], dtype=dtype),\n                \"B\": SparseArray([0, 1], dtype=dtype),\n            }\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 855,
        "end_line": 866,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fillna#868",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fillna(self, float_frame_fill0, float_frame_fill0_dense)",
        "snippet": "    def test_fillna(self, float_frame_fill0, float_frame_fill0_dense):\n        df = float_frame_fill0.reindex(list(range(5)))\n        dense = float_frame_fill0_dense.reindex(list(range(5)))\n\n        result = df.fillna(0)\n        expected = dense.fillna(0)\n        tm.assert_sp_frame_equal(\n            result, expected.to_sparse(fill_value=0), exact_indices=False\n        )\n        tm.assert_frame_equal(result.to_dense(), expected)\n\n        result = df.copy()\n        result.fillna(0, inplace=True)\n        expected = dense.fillna(0)\n\n        tm.assert_sp_frame_equal(\n            result, expected.to_sparse(fill_value=0), exact_indices=False\n        )\n        tm.assert_frame_equal(result.to_dense(), expected)\n\n        result = df.copy()\n        result = df[\"A\"]\n        result.fillna(0, inplace=True)\n\n        expected = dense[\"A\"].fillna(0)\n        # this changes internal SparseArray repr\n        # tm.assert_sp_series_equal(result, expected.to_sparse(fill_value=0))\n        tm.assert_series_equal(result.to_dense(), expected)",
        "begin_line": 868,
        "end_line": 895,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fillna_fill_value#897",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_fillna_fill_value(self)",
        "snippet": "    def test_fillna_fill_value(self):\n        df = pd.DataFrame({\"A\": [1, 0, 0], \"B\": [np.nan, np.nan, 4]})\n\n        sparse = pd.SparseDataFrame(df)\n        tm.assert_frame_equal(\n            sparse.fillna(-1).to_dense(), df.fillna(-1), check_dtype=False\n        )\n\n        sparse = pd.SparseDataFrame(df, default_fill_value=0)\n        tm.assert_frame_equal(\n            sparse.fillna(-1).to_dense(), df.fillna(-1), check_dtype=False\n        )",
        "begin_line": 897,
        "end_line": 908,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_frame_pad_backfill_limit#910",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_frame_pad_backfill_limit(self)",
        "snippet": "    def test_sparse_frame_pad_backfill_limit(self):\n        index = np.arange(10)\n        df = DataFrame(np.random.randn(10, 4), index=index)\n        sdf = df.to_sparse()\n\n        result = sdf[:2].reindex(index, method=\"pad\", limit=5)\n\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            expected = sdf[:2].reindex(index).fillna(method=\"pad\")\n        expected = expected.to_dense()\n        expected.values[-3:] = np.nan\n        expected = expected.to_sparse()\n        tm.assert_frame_equal(result, expected)\n\n        result = sdf[-2:].reindex(index, method=\"backfill\", limit=5)\n\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            expected = sdf[-2:].reindex(index).fillna(method=\"backfill\")\n        expected = expected.to_dense()\n        expected.values[:3] = np.nan\n        expected = expected.to_sparse()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 910,
        "end_line": 935,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_frame_fillna_limit#937",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_frame_fillna_limit(self)",
        "snippet": "    def test_sparse_frame_fillna_limit(self):\n        index = np.arange(10)\n        df = DataFrame(np.random.randn(10, 4), index=index)\n        sdf = df.to_sparse()\n\n        result = sdf[:2].reindex(index)\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            result = result.fillna(method=\"pad\", limit=5)\n\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            expected = sdf[:2].reindex(index).fillna(method=\"pad\")\n        expected = expected.to_dense()\n        expected.values[-3:] = np.nan\n        expected = expected.to_sparse()\n        tm.assert_frame_equal(result, expected)\n\n        result = sdf[-2:].reindex(index)\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            result = result.fillna(method=\"backfill\", limit=5)\n\n        with tm.assert_produces_warning(\n            PerformanceWarning, raise_on_extra_warnings=False\n        ):\n            expected = sdf[-2:].reindex(index).fillna(method=\"backfill\")\n        expected = expected.to_dense()\n        expected.values[:3] = np.nan\n        expected = expected.to_sparse()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 937,
        "end_line": 970,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_rename#972",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_rename(self, float_frame)",
        "snippet": "    def test_rename(self, float_frame):\n        result = float_frame.rename(index=str)\n        expected = SparseDataFrame(\n            float_frame.values,\n            index=float_frame.index.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            columns=list(\"ABCD\"),\n        )\n        tm.assert_sp_frame_equal(result, expected)\n\n        result = float_frame.rename(columns=\"{}1\".format)\n        data = {\n            \"A1\": [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],\n            \"B1\": [0, 1, 2, nan, nan, nan, 3, 4, 5, 6],\n            \"C1\": np.arange(10, dtype=np.float64),\n            \"D1\": [0, 1, 2, 3, 4, 5, nan, nan, nan, nan],\n        }\n        expected = SparseDataFrame(data, index=float_frame.index)\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 972,
        "end_line": 989,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_corr#991",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_corr(self, float_frame)",
        "snippet": "    def test_corr(self, float_frame):\n        res = float_frame.corr()\n        # XXX: this stays sparse\n        tm.assert_frame_equal(res, float_frame.to_dense().corr().to_sparse())",
        "begin_line": 991,
        "end_line": 994,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_describe#996",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_describe(self, float_frame)",
        "snippet": "    def test_describe(self, float_frame):\n        float_frame[\"foo\"] = np.nan\n        float_frame.dtypes.value_counts()\n        str(float_frame)\n        desc = float_frame.describe()  # noqa",
        "begin_line": 996,
        "end_line": 1000,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_join#1002",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_join(self, float_frame)",
        "snippet": "    def test_join(self, float_frame):\n        left = float_frame.loc[:, [\"A\", \"B\"]]\n        right = float_frame.loc[:, [\"C\", \"D\"]]\n        joined = left.join(right)\n        tm.assert_sp_frame_equal(joined, float_frame, exact_indices=False)\n\n        right = float_frame.loc[:, [\"B\", \"D\"]]\n        msg = (\n            r\"columns overlap but no suffix specified: Index\\(\\['B'\\],\"\n            r\" dtype='object'\\)\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            left.join(right)\n\n        with pytest.raises(ValueError, match=\"Other Series must have a name\"):\n            float_frame.join(\n                Series(np.random.randn(len(float_frame)), index=float_frame.index)\n            )",
        "begin_line": 1002,
        "end_line": 1019,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex#1021",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex(self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2)",
        "snippet": "    def test_reindex(\n        self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2\n    ):\n        def _check_frame(frame):\n            index = frame.index\n            sidx = index[::2]\n            sidx2 = index[:5]  # noqa\n\n            sparse_result = frame.reindex(sidx)\n            dense_result = frame.to_dense().reindex(sidx)\n            tm.assert_frame_equal(sparse_result.to_dense(), dense_result)\n\n            tm.assert_frame_equal(frame.reindex(list(sidx)).to_dense(), dense_result)\n\n            sparse_result2 = sparse_result.reindex(index)\n            dense_result2 = dense_result.reindex(index)\n            tm.assert_frame_equal(sparse_result2.to_dense(), dense_result2)\n\n            # propagate CORRECT fill value\n            tm.assert_almost_equal(\n                sparse_result.default_fill_value, frame.default_fill_value\n            )\n            tm.assert_almost_equal(sparse_result[\"A\"].fill_value, frame[\"A\"].fill_value)\n\n            # length zero\n            length_zero = frame.reindex([])\n            assert len(length_zero) == 0\n            assert len(length_zero.columns) == len(frame.columns)\n            assert len(length_zero[\"A\"]) == 0\n\n            # frame being reindexed has length zero\n            length_n = length_zero.reindex(index)\n            assert len(length_n) == len(frame)\n            assert len(length_n.columns) == len(frame.columns)\n            assert len(length_n[\"A\"]) == len(frame)\n\n            # reindex columns\n            reindexed = frame.reindex(columns=[\"A\", \"B\", \"Z\"])\n            assert len(reindexed.columns) == 3\n            tm.assert_almost_equal(reindexed[\"Z\"].fill_value, frame.default_fill_value)\n            assert np.isnan(reindexed[\"Z\"].sp_values).all()\n\n        _check_frame(float_frame)\n        _check_frame(float_frame_int_kind)\n        _check_frame(float_frame_fill0)\n        _check_frame(float_frame_fill2)\n\n        # with copy=False\n        reindexed = float_frame.reindex(float_frame.index, copy=False)\n        reindexed[\"F\"] = reindexed[\"A\"]\n        assert \"F\" in float_frame\n\n        reindexed = float_frame.reindex(float_frame.index)\n        reindexed[\"G\"] = reindexed[\"A\"]\n        assert \"G\" not in float_frame",
        "begin_line": 1021,
        "end_line": 1075,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame#1024",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check_frame(frame)",
        "snippet": "        def _check_frame(frame):\n            index = frame.index\n            sidx = index[::2]\n            sidx2 = index[:5]  # noqa\n\n            sparse_result = frame.reindex(sidx)\n            dense_result = frame.to_dense().reindex(sidx)\n            tm.assert_frame_equal(sparse_result.to_dense(), dense_result)\n\n            tm.assert_frame_equal(frame.reindex(list(sidx)).to_dense(), dense_result)\n\n            sparse_result2 = sparse_result.reindex(index)\n            dense_result2 = dense_result.reindex(index)\n            tm.assert_frame_equal(sparse_result2.to_dense(), dense_result2)\n\n            # propagate CORRECT fill value\n            tm.assert_almost_equal(\n                sparse_result.default_fill_value, frame.default_fill_value\n            )\n            tm.assert_almost_equal(sparse_result[\"A\"].fill_value, frame[\"A\"].fill_value)\n\n            # length zero\n            length_zero = frame.reindex([])\n            assert len(length_zero) == 0\n            assert len(length_zero.columns) == len(frame.columns)\n            assert len(length_zero[\"A\"]) == 0\n\n            # frame being reindexed has length zero\n            length_n = length_zero.reindex(index)\n            assert len(length_n) == len(frame)\n            assert len(length_n.columns) == len(frame.columns)\n            assert len(length_n[\"A\"]) == len(frame)\n\n            # reindex columns\n            reindexed = frame.reindex(columns=[\"A\", \"B\", \"Z\"])\n            assert len(reindexed.columns) == 3\n            tm.assert_almost_equal(reindexed[\"Z\"].fill_value, frame.default_fill_value)\n            assert np.isnan(reindexed[\"Z\"].sp_values).all()",
        "begin_line": 1024,
        "end_line": 1061,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex_fill_value#1077",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex_fill_value(self, float_frame_fill0, float_frame_fill0_dense)",
        "snippet": "    def test_reindex_fill_value(self, float_frame_fill0, float_frame_fill0_dense):\n        rng = bdate_range(\"20110110\", periods=20)\n\n        result = float_frame_fill0.reindex(rng, fill_value=0)\n        exp = float_frame_fill0_dense.reindex(rng, fill_value=0)\n        exp = exp.to_sparse(float_frame_fill0.default_fill_value)\n        tm.assert_sp_frame_equal(result, exp)",
        "begin_line": 1077,
        "end_line": 1083,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex_method#1085",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_reindex_method(self)",
        "snippet": "    def test_reindex_method(self):\n\n        sparse = SparseDataFrame(\n            data=[[11.0, 12.0, 14.0], [21.0, 22.0, 24.0], [41.0, 42.0, 44.0]],\n            index=[1, 2, 4],\n            columns=[1, 2, 4],\n            dtype=float,\n        )\n\n        # Over indices\n\n        # default method\n        result = sparse.reindex(index=range(6))\n        expected = SparseDataFrame(\n            data=[\n                [nan, nan, nan],\n                [11.0, 12.0, 14.0],\n                [21.0, 22.0, 24.0],\n                [nan, nan, nan],\n                [41.0, 42.0, 44.0],\n                [nan, nan, nan],\n            ],\n            index=range(6),\n            columns=[1, 2, 4],\n            dtype=float,\n        )\n        tm.assert_sp_frame_equal(result, expected)\n\n        # method='bfill'\n        result = sparse.reindex(index=range(6), method=\"bfill\")\n        expected = SparseDataFrame(\n            data=[\n                [11.0, 12.0, 14.0],\n                [11.0, 12.0, 14.0],\n                [21.0, 22.0, 24.0],\n                [41.0, 42.0, 44.0],\n                [41.0, 42.0, 44.0],\n                [nan, nan, nan],\n            ],\n            index=range(6),\n            columns=[1, 2, 4],\n            dtype=float,\n        )\n        tm.assert_sp_frame_equal(result, expected)\n\n        # method='ffill'\n        result = sparse.reindex(index=range(6), method=\"ffill\")\n        expected = SparseDataFrame(\n            data=[\n                [nan, nan, nan],\n                [11.0, 12.0, 14.0],\n                [21.0, 22.0, 24.0],\n                [21.0, 22.0, 24.0],\n                [41.0, 42.0, 44.0],\n                [41.0, 42.0, 44.0],\n            ],\n            index=range(6),\n            columns=[1, 2, 4],\n            dtype=float,\n        )\n        tm.assert_sp_frame_equal(result, expected)\n\n        # Over columns\n\n        # default method\n        result = sparse.reindex(columns=range(6))\n        expected = SparseDataFrame(\n            data=[\n                [nan, 11.0, 12.0, nan, 14.0, nan],\n                [nan, 21.0, 22.0, nan, 24.0, nan],\n                [nan, 41.0, 42.0, nan, 44.0, nan],\n            ],\n            index=[1, 2, 4],\n            columns=range(6),\n            dtype=float,\n        )\n        tm.assert_sp_frame_equal(result, expected)\n\n        # method='bfill'\n        with pytest.raises(NotImplementedError):\n            sparse.reindex(columns=range(6), method=\"bfill\")\n\n        # method='ffill'\n        with pytest.raises(NotImplementedError):\n            sparse.reindex(columns=range(6), method=\"ffill\")",
        "begin_line": 1085,
        "end_line": 1169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_take#1171",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_take(self, float_frame)",
        "snippet": "    def test_take(self, float_frame):\n        result = float_frame.take([1, 0, 2], axis=1)\n        expected = float_frame.reindex(columns=[\"B\", \"A\", \"C\"])\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 1171,
        "end_line": 1174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_to_dense#1176",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_to_dense(self, float_frame, float_frame_int_kind, float_frame_dense, float_frame_fill0, float_frame_fill0_dense, float_frame_fill2, float_frame_fill2_dense)",
        "snippet": "    def test_to_dense(\n        self,\n        float_frame,\n        float_frame_int_kind,\n        float_frame_dense,\n        float_frame_fill0,\n        float_frame_fill0_dense,\n        float_frame_fill2,\n        float_frame_fill2_dense,\n    ):\n        def _check(frame, orig):\n            dense_dm = frame.to_dense()\n            # Sparse[float] != float\n            tm.assert_frame_equal(frame, dense_dm, check_dtype=False)\n            tm.assert_frame_equal(dense_dm, orig, check_dtype=False)\n\n        _check(float_frame, float_frame_dense)\n        _check(float_frame_int_kind, float_frame_dense)\n        _check(float_frame_fill0, float_frame_fill0_dense)\n        _check(float_frame_fill2, float_frame_fill2_dense)",
        "begin_line": 1176,
        "end_line": 1195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check#1186",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check(frame, orig)",
        "snippet": "        def _check(frame, orig):\n            dense_dm = frame.to_dense()\n            # Sparse[float] != float\n            tm.assert_frame_equal(frame, dense_dm, check_dtype=False)\n            tm.assert_frame_equal(dense_dm, orig, check_dtype=False)",
        "begin_line": 1186,
        "end_line": 1190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_stack_sparse_frame#1197",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_stack_sparse_frame(self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2)",
        "snippet": "    def test_stack_sparse_frame(\n        self, float_frame, float_frame_int_kind, float_frame_fill0, float_frame_fill2\n    ):\n        def _check(frame):\n            dense_frame = frame.to_dense()  # noqa\n\n            from_dense_lp = frame.stack().to_frame()\n\n            from_sparse_lp = spf.stack_sparse_frame(frame)\n\n            tm.assert_numpy_array_equal(from_dense_lp.values, from_sparse_lp.values)\n\n        _check(float_frame)\n        _check(float_frame_int_kind)\n\n        # for now\n        msg = \"This routine assumes NaN fill value\"\n        with pytest.raises(TypeError, match=msg):\n            _check(float_frame_fill0)\n        with pytest.raises(TypeError, match=msg):\n            _check(float_frame_fill2)",
        "begin_line": 1197,
        "end_line": 1217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check#1200",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check(frame)",
        "snippet": "        def _check(frame):\n            dense_frame = frame.to_dense()  # noqa\n\n            from_dense_lp = frame.stack().to_frame()\n\n            from_sparse_lp = spf.stack_sparse_frame(frame)\n\n            tm.assert_numpy_array_equal(from_dense_lp.values, from_sparse_lp.values)",
        "begin_line": 1200,
        "end_line": 1207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_transpose#1219",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_transpose(self, float_frame, float_frame_int_kind, float_frame_dense, float_frame_fill0, float_frame_fill0_dense, float_frame_fill2, float_frame_fill2_dense)",
        "snippet": "    def test_transpose(\n        self,\n        float_frame,\n        float_frame_int_kind,\n        float_frame_dense,\n        float_frame_fill0,\n        float_frame_fill0_dense,\n        float_frame_fill2,\n        float_frame_fill2_dense,\n    ):\n        def _check(frame, orig):\n            transposed = frame.T\n            untransposed = transposed.T\n            tm.assert_sp_frame_equal(frame, untransposed)\n\n            tm.assert_frame_equal(frame.T.to_dense(), orig.T)\n            tm.assert_frame_equal(frame.T.T.to_dense(), orig.T.T)\n            tm.assert_sp_frame_equal(frame, frame.T.T, exact_indices=False)\n\n        _check(float_frame, float_frame_dense)\n        _check(float_frame_int_kind, float_frame_dense)\n        _check(float_frame_fill0, float_frame_fill0_dense)\n        _check(float_frame_fill2, float_frame_fill2_dense)",
        "begin_line": 1219,
        "end_line": 1241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check#1229",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check(frame, orig)",
        "snippet": "        def _check(frame, orig):\n            transposed = frame.T\n            untransposed = transposed.T\n            tm.assert_sp_frame_equal(frame, untransposed)\n\n            tm.assert_frame_equal(frame.T.to_dense(), orig.T)\n            tm.assert_frame_equal(frame.T.T.to_dense(), orig.T.T)\n            tm.assert_sp_frame_equal(frame, frame.T.T, exact_indices=False)",
        "begin_line": 1229,
        "end_line": 1236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_shift#1243",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_shift(self, float_frame, float_frame_int_kind, float_frame_dense, float_frame_fill0, float_frame_fill0_dense, float_frame_fill2, float_frame_fill2_dense)",
        "snippet": "    def test_shift(\n        self,\n        float_frame,\n        float_frame_int_kind,\n        float_frame_dense,\n        float_frame_fill0,\n        float_frame_fill0_dense,\n        float_frame_fill2,\n        float_frame_fill2_dense,\n    ):\n        def _check(frame, orig):\n            shifted = frame.shift(0)\n            exp = orig.shift(0)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(1)\n            exp = orig.shift(1)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(-2)\n            exp = orig.shift(-2)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(2, freq=\"B\")\n            exp = orig.shift(2, freq=\"B\")\n            exp = exp.to_sparse(frame.default_fill_value, kind=frame.default_kind)\n            tm.assert_frame_equal(shifted, exp)\n\n            shifted = frame.shift(2, freq=BDay())\n            exp = orig.shift(2, freq=BDay())\n            exp = exp.to_sparse(frame.default_fill_value, kind=frame.default_kind)\n            tm.assert_frame_equal(shifted, exp)\n\n        _check(float_frame, float_frame_dense)\n        _check(float_frame_int_kind, float_frame_dense)\n        _check(float_frame_fill0, float_frame_fill0_dense)\n        _check(float_frame_fill2, float_frame_fill2_dense)",
        "begin_line": 1243,
        "end_line": 1279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check#1253",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame._check(frame, orig)",
        "snippet": "        def _check(frame, orig):\n            shifted = frame.shift(0)\n            exp = orig.shift(0)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(1)\n            exp = orig.shift(1)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(-2)\n            exp = orig.shift(-2)\n            tm.assert_frame_equal(shifted.to_dense(), exp)\n\n            shifted = frame.shift(2, freq=\"B\")\n            exp = orig.shift(2, freq=\"B\")\n            exp = exp.to_sparse(frame.default_fill_value, kind=frame.default_kind)\n            tm.assert_frame_equal(shifted, exp)\n\n            shifted = frame.shift(2, freq=BDay())\n            exp = orig.shift(2, freq=BDay())\n            exp = exp.to_sparse(frame.default_fill_value, kind=frame.default_kind)\n            tm.assert_frame_equal(shifted, exp)",
        "begin_line": 1253,
        "end_line": 1274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_count#1281",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_count(self, float_frame)",
        "snippet": "    def test_count(self, float_frame):\n        dense_result = float_frame.to_dense().count()\n\n        result = float_frame.count()\n        tm.assert_series_equal(result.to_dense(), dense_result)\n\n        result = float_frame.count(axis=None)\n        tm.assert_series_equal(result.to_dense(), dense_result)\n\n        result = float_frame.count(axis=0)\n        tm.assert_series_equal(result.to_dense(), dense_result)\n\n        result = float_frame.count(axis=1)\n        dense_result = float_frame.to_dense().count(axis=1)\n\n        # win32 don't check dtype\n        tm.assert_series_equal(result, dense_result, check_dtype=False)",
        "begin_line": 1281,
        "end_line": 1297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_numpy_transpose#1299",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_numpy_transpose(self)",
        "snippet": "    def test_numpy_transpose(self):\n        sdf = SparseDataFrame([1, 2, 3], index=[1, 2, 3], columns=[\"a\"])\n        result = np.transpose(np.transpose(sdf))\n        tm.assert_sp_frame_equal(result, sdf)\n\n        msg = \"the 'axes' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.transpose(sdf, axes=1)",
        "begin_line": 1299,
        "end_line": 1306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_first#1308",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_first(self, float_frame)",
        "snippet": "    def test_combine_first(self, float_frame):\n        df = float_frame\n\n        result = df[::2].combine_first(df)\n\n        expected = df[::2].to_dense().combine_first(df.to_dense())\n        expected = expected.to_sparse(fill_value=df.default_fill_value)\n\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 1308,
        "end_line": 1316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_first_with_dense#1319",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_first_with_dense(self)",
        "snippet": "    def test_combine_first_with_dense(self):\n        # We could support this if we allow\n        # pd.core.dtypes.cast.find_common_type to special case SparseDtype\n        # but I don't think that's worth it.\n        df = self.frame\n\n        result = df[::2].combine_first(df.to_dense())\n        expected = df[::2].to_dense().combine_first(df.to_dense())\n        expected = expected.to_sparse(fill_value=df.default_fill_value)\n\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 1319,
        "end_line": 1329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_add#1331",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_combine_add(self, float_frame)",
        "snippet": "    def test_combine_add(self, float_frame):\n        df = float_frame.to_dense()\n        df2 = df.copy()\n        df2[\"C\"][:3] = np.nan\n        df[\"A\"][:3] = 5.7\n\n        result = df.to_sparse().add(df2.to_sparse(), fill_value=0)\n        expected = df.add(df2, fill_value=0).to_sparse()\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 1331,
        "end_line": 1339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_isin#1341",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_isin(self)",
        "snippet": "    def test_isin(self):\n        sparse_df = DataFrame({\"flag\": [1.0, 0.0, 1.0]}).to_sparse(fill_value=0.0)\n        xp = sparse_df[sparse_df.flag == 1.0]\n        rs = sparse_df[sparse_df.flag.isin([1.0])]\n        tm.assert_frame_equal(xp, rs)",
        "begin_line": 1341,
        "end_line": 1345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_pow_issue#1347",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_sparse_pow_issue(self)",
        "snippet": "    def test_sparse_pow_issue(self):\n        # 2220\n        df = SparseDataFrame({\"A\": [1.1, 3.3], \"B\": [2.5, -3.9]})\n\n        # note : no error without nan\n        df = SparseDataFrame({\"A\": [nan, 0, 1]})\n\n        # note that 2 ** df works fine, also df ** 1\n        result = 1 ** df\n\n        r1 = result.take([0], 1)[\"A\"]\n        r2 = result[\"A\"]\n\n        assert len(r2.sp_values) == len(r1.sp_values)",
        "begin_line": 1347,
        "end_line": 1360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_as_blocks#1362",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_as_blocks(self)",
        "snippet": "    def test_as_blocks(self):\n        df = SparseDataFrame({\"A\": [1.1, 3.3], \"B\": [nan, -3.9]}, dtype=\"float64\")\n\n        # deprecated 0.21.0\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            df_blocks = df.blocks\n        assert list(df_blocks.keys()) == [\"Sparse[float64, nan]\"]\n        tm.assert_frame_equal(df_blocks[\"Sparse[float64, nan]\"], df)",
        "begin_line": 1362,
        "end_line": 1369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_nan_columnname#1372",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_nan_columnname(self)",
        "snippet": "    def test_nan_columnname(self):\n        # GH 8822\n        nan_colname = DataFrame(Series(1.0, index=[0]), columns=[nan])\n        nan_colname_sparse = nan_colname.to_sparse()\n        assert np.isnan(nan_colname_sparse.columns[0])",
        "begin_line": 1372,
        "end_line": 1376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_isna#1378",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_isna(self)",
        "snippet": "    def test_isna(self):\n        # GH 8276\n        df = pd.SparseDataFrame(\n            {\"A\": [np.nan, np.nan, 1, 2, np.nan], \"B\": [0, np.nan, np.nan, 2, np.nan]}\n        )\n\n        res = df.isna()\n        exp = pd.SparseDataFrame(\n            {\n                \"A\": [True, True, False, False, True],\n                \"B\": [False, True, True, False, True],\n            },\n            default_fill_value=True,\n        )\n        exp._default_fill_value = np.nan\n        tm.assert_sp_frame_equal(res, exp)\n\n        # if fill_value is not nan, True can be included in sp_values\n        df = pd.SparseDataFrame(\n            {\"A\": [0, 0, 1, 2, np.nan], \"B\": [0, np.nan, 0, 2, np.nan]},\n            default_fill_value=0.0,\n        )\n        res = df.isna()\n        assert isinstance(res, pd.SparseDataFrame)\n        exp = pd.DataFrame(\n            {\n                \"A\": [False, False, False, False, True],\n                \"B\": [False, True, False, False, True],\n            }\n        )\n        tm.assert_frame_equal(res.to_dense(), exp)",
        "begin_line": 1378,
        "end_line": 1408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_notna#1410",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_notna(self)",
        "snippet": "    def test_notna(self):\n        # GH 8276\n        df = pd.SparseDataFrame(\n            {\"A\": [np.nan, np.nan, 1, 2, np.nan], \"B\": [0, np.nan, np.nan, 2, np.nan]}\n        )\n\n        res = df.notna()\n        exp = pd.SparseDataFrame(\n            {\n                \"A\": [False, False, True, True, False],\n                \"B\": [True, False, False, True, False],\n            },\n            default_fill_value=False,\n        )\n        exp._default_fill_value = np.nan\n        tm.assert_sp_frame_equal(res, exp)\n\n        # if fill_value is not nan, True can be included in sp_values\n        df = pd.SparseDataFrame(\n            {\"A\": [0, 0, 1, 2, np.nan], \"B\": [0, np.nan, 0, 2, np.nan]},\n            default_fill_value=0.0,\n        )\n        res = df.notna()\n        assert isinstance(res, pd.SparseDataFrame)\n        exp = pd.DataFrame(\n            {\n                \"A\": [True, True, True, True, False],\n                \"B\": [True, False, True, True, False],\n            }\n        )\n        tm.assert_frame_equal(res.to_dense(), exp)",
        "begin_line": 1410,
        "end_line": 1440,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_default_fill_value_with_no_data#1442",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrame.test_default_fill_value_with_no_data(self)",
        "snippet": "    def test_default_fill_value_with_no_data(self):\n        # GH 16807\n        expected = pd.SparseDataFrame(\n            [[1.0, 1.0], [1.0, 1.0]], columns=list(\"ab\"), index=range(2)\n        )\n        result = pd.SparseDataFrame(\n            columns=list(\"ab\"), index=range(2), default_fill_value=1.0\n        )\n        tm.assert_frame_equal(expected, result)",
        "begin_line": 1442,
        "end_line": 1450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_numeric_op_scalar#1456",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_numeric_op_scalar(self)",
        "snippet": "    def test_numeric_op_scalar(self):\n        df = pd.DataFrame(\n            {\n                \"A\": [nan, nan, 0, 1],\n                \"B\": [0, 1, 2, nan],\n                \"C\": [1.0, 2.0, 3.0, 4.0],\n                \"D\": [nan, nan, nan, nan],\n            }\n        )\n        sparse = df.to_sparse()\n\n        tm.assert_sp_frame_equal(sparse + 1, (df + 1).to_sparse())",
        "begin_line": 1456,
        "end_line": 1467,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_comparison_op_scalar#1469",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_comparison_op_scalar(self)",
        "snippet": "    def test_comparison_op_scalar(self):\n        # GH 13001\n        df = pd.DataFrame(\n            {\n                \"A\": [nan, nan, 0, 1],\n                \"B\": [0, 1, 2, nan],\n                \"C\": [1.0, 2.0, 3.0, 4.0],\n                \"D\": [nan, nan, nan, nan],\n            }\n        )\n        sparse = df.to_sparse()\n\n        # comparison changes internal repr, compare with dense\n        res = sparse > 1\n        assert isinstance(res, pd.SparseDataFrame)\n        tm.assert_frame_equal(res.to_dense(), df > 1)\n\n        res = sparse != 0\n        assert isinstance(res, pd.SparseDataFrame)\n        tm.assert_frame_equal(res.to_dense(), df != 0)",
        "begin_line": 1469,
        "end_line": 1488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_add_series_retains_dtype#1490",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameArithmetic.test_add_series_retains_dtype(self)",
        "snippet": "    def test_add_series_retains_dtype(self):\n        # SparseDataFrame._combine_match_columns used to incorrectly cast\n        #  to float\n        d = {0: [2j, 3j], 1: [0, 1]}\n        sdf = SparseDataFrame(data=d, default_fill_value=1)\n        result = sdf + sdf[0]\n\n        df = sdf.to_dense()\n        expected = df + df[0]\n        tm.assert_frame_equal(result.to_dense(), expected)\n\n        # Make it explicit to be on the safe side\n        edata = {0: [4j, 5j], 1: [3j, 1 + 3j]}\n        expected = DataFrame(edata)\n        tm.assert_frame_equal(result.to_dense(), expected)",
        "begin_line": 1490,
        "end_line": 1504,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_cumsum#1510",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_cumsum(self, float_frame)",
        "snippet": "    def test_cumsum(self, float_frame):\n        expected = SparseDataFrame(float_frame.to_dense().cumsum())\n\n        result = float_frame.cumsum()\n        tm.assert_sp_frame_equal(result, expected)\n\n        result = float_frame.cumsum(axis=None)\n        tm.assert_sp_frame_equal(result, expected)\n\n        result = float_frame.cumsum(axis=0)\n        tm.assert_sp_frame_equal(result, expected)",
        "begin_line": 1510,
        "end_line": 1520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_numpy_cumsum#1522",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_numpy_cumsum(self, float_frame)",
        "snippet": "    def test_numpy_cumsum(self, float_frame):\n        result = np.cumsum(float_frame)\n        expected = SparseDataFrame(float_frame.to_dense().cumsum())\n        tm.assert_sp_frame_equal(result, expected)\n\n        msg = \"the 'dtype' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.cumsum(float_frame, dtype=np.int64)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.cumsum(float_frame, out=result)",
        "begin_line": 1522,
        "end_line": 1533,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_numpy_func_call#1535",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_numpy_func_call(self, float_frame)",
        "snippet": "    def test_numpy_func_call(self, float_frame):\n        # no exception should be raised even though\n        # numpy passes in 'axis=None' or `axis=-1'\n        funcs = [\"sum\", \"cumsum\", \"var\", \"mean\", \"prod\", \"cumprod\", \"std\", \"min\", \"max\"]\n        for func in funcs:\n            getattr(np, func)(float_frame)",
        "begin_line": 1535,
        "end_line": 1540,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_quantile#1543",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_quantile(self)",
        "snippet": "    def test_quantile(self):\n        # GH 17386\n        data = [[1, 1], [2, 10], [3, 100], [nan, nan]]\n        q = 0.1\n\n        sparse_df = SparseDataFrame(data)\n        result = sparse_df.quantile(q)\n\n        dense_df = DataFrame(data)\n        dense_expected = dense_df.quantile(q)\n        sparse_expected = SparseSeries(dense_expected)\n\n        tm.assert_series_equal(result, dense_expected)\n        tm.assert_sp_series_equal(result, sparse_expected)",
        "begin_line": 1543,
        "end_line": 1556,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_quantile_multi#1559",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_quantile_multi(self)",
        "snippet": "    def test_quantile_multi(self):\n        # GH 17386\n        data = [[1, 1], [2, 10], [3, 100], [nan, nan]]\n        q = [0.1, 0.5]\n\n        sparse_df = SparseDataFrame(data)\n        result = sparse_df.quantile(q)\n\n        dense_df = DataFrame(data)\n        dense_expected = dense_df.quantile(q)\n        sparse_expected = SparseDataFrame(dense_expected)\n\n        tm.assert_frame_equal(result, dense_expected)\n        tm.assert_sp_frame_equal(result, sparse_expected)",
        "begin_line": 1559,
        "end_line": 1572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_assign_with_sparse_frame#1574",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_assign_with_sparse_frame(self)",
        "snippet": "    def test_assign_with_sparse_frame(self):\n        # GH 19163\n        df = pd.DataFrame({\"a\": [1, 2, 3]})\n        res = df.to_sparse(fill_value=False).assign(newcol=False)\n        exp = df.assign(newcol=False).to_sparse(fill_value=False)\n\n        tm.assert_sp_frame_equal(res, exp)\n\n        for column in res.columns:\n            assert type(res[column]) is SparseSeries",
        "begin_line": 1574,
        "end_line": 1583,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_dropna#1587",
        "src_path": "pandas/tests/sparse/frame/test_frame.py",
        "class_name": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics",
        "signature": "pandas.tests.sparse.frame.test_frame.TestSparseDataFrameAnalytics.test_dropna(self, inplace, how)",
        "snippet": "    def test_dropna(self, inplace, how):\n        # Tests regression #21172.\n        expected = pd.SparseDataFrame({\"F2\": [0, 1]})\n        input_df = pd.SparseDataFrame(\n            {\"F1\": [float(\"nan\"), float(\"nan\")], \"F2\": [0, 1]}\n        )\n        result_df = input_df.dropna(axis=1, inplace=inplace, how=how)\n        if inplace:\n            result_df = input_df\n        tm.assert_sp_frame_equal(expected, result_df)",
        "begin_line": 1587,
        "end_line": 1596,
        "comment": "",
        "is_bug": false
    }
]