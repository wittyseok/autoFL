coverage run -m pytest tests/keras/metrics_test.py::test_stateful_metrics[dict]
============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 -- /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/bin/python
cachedir: .pytest_cache
rootdir: /home/user/BugsInPy/temp/projects/keras, inifile: pytest.ini
plugins: forked-1.1.3, xdist-1.32.0
gw0 I / gw1 I

[gw0] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw1] linux Python 3.7.3 cwd: /home/user/BugsInPy/temp/projects/keras

[gw0] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]

[gw1] Python 3.7.3 (default, Mar 27 2019, 22:11:17)  -- [GCC 7.3.0]
gw0 [1] / gw1 [1]

scheduling tests via LoadScheduling

tests/keras/metrics_test.py::test_stateful_metrics[dict] 
[gw0] [100%] FAILED tests/keras/metrics_test.py::test_stateful_metrics[dict] 

=================================== FAILURES ===================================
_________________________ test_stateful_metrics[dict] __________________________
[gw0] linux -- Python 3.7.3 /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/bin/python

metrics_mode = 'dict'

    @keras_test
    @pytest.mark.parametrize('metrics_mode', ['list', 'dict'])
    def test_stateful_metrics(metrics_mode):
        np.random.seed(1334)
    
        class BinaryTruePositives(keras.layers.Layer):
            """Stateful Metric to count the total true positives over all batches.
    
            Assumes predictions and targets of shape `(samples, 1)`.
    
            # Arguments
                name: String, name for the metric.
            """
    
            def __init__(self, name='true_positives', **kwargs):
                super(BinaryTruePositives, self).__init__(name=name, **kwargs)
                self.stateful = True
                self.true_positives = K.variable(value=0, dtype='int32')
    
            def reset_states(self):
                K.set_value(self.true_positives, 0)
    
            def __call__(self, y_true, y_pred):
                """Computes the number of true positives in a batch.
    
                # Arguments
                    y_true: Tensor, batch_wise labels
                    y_pred: Tensor, batch_wise predictions
    
                # Returns
                    The total number of true positives seen this epoch at the
                        completion of the batch.
                """
                y_true = K.cast(y_true, 'int32')
                y_pred = K.cast(K.round(y_pred), 'int32')
                correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')
                true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')
                current_true_pos = self.true_positives * 1
                self.add_update(K.update_add(self.true_positives,
                                             true_pos),
                                inputs=[y_true, y_pred])
                return current_true_pos + true_pos
    
        metric_fn = BinaryTruePositives()
        config = metrics.serialize(metric_fn)
        metric_fn = metrics.deserialize(
            config, custom_objects={'BinaryTruePositives': BinaryTruePositives})
    
        # Test on simple model
        inputs = keras.Input(shape=(2,))
        outputs = keras.layers.Dense(1, activation='sigmoid', name='out')(inputs)
        model = keras.Model(inputs, outputs)
    
        if metrics_mode == 'list':
            model.compile(optimizer='sgd',
                          loss='binary_crossentropy',
                          metrics=['acc', metric_fn])
        elif metrics_mode == 'dict':
            model.compile(optimizer='sgd',
                          loss='binary_crossentropy',
                          metrics={'out': ['acc', metric_fn]})
    
        samples = 1000
        x = np.random.random((samples, 2))
        y = np.random.randint(2, size=(samples, 1))
    
        val_samples = 10
        val_x = np.random.random((val_samples, 2))
        val_y = np.random.randint(2, size=(val_samples, 1))
    
        # Test fit and evaluate
        history = model.fit(x, y, validation_data=(val_x, val_y), epochs=1, batch_size=10)
        outs = model.evaluate(x, y, batch_size=10)
        preds = model.predict(x)
    
        def ref_true_pos(y_true, y_pred):
            return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))
    
        # Test correctness (e.g. updates should have been run)
>       np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=1e-05
E       
E       Mismatched elements: 1 / 1 (100%)
E       Max absolute difference: 491
E       Max relative difference: 1.0293501
E        x: array(968, dtype=int32)
E        y: array(477)

tests/keras/metrics_test.py:188: AssertionError
----------------------------- Captured stdout call -----------------------------
Train on 1000 samples, validate on 10 samples
Epoch 1/1

  10/1000 [..............................] - ETA: 12s - loss: 1.0951 - acc: 0.3000 - true_positives: 3.0000
 770/1000 [======================>.......] - ETA: 0s - loss: 0.8179 - acc: 0.4831 - true_positives: 369.0000
1000/1000 [==============================] - 0s 203us/step - loss: 0.8034 - acc: 0.4900 - true_positives: 484.0000 - val_loss: 0.6407 - val_acc: 0.7000 - val_true_positives: 491.0000

  10/1000 [..............................] - ETA: 0s
1000/1000 [==============================] - 0s 45us/step
----------------------------- Captured stderr call -----------------------------
WARNING:tensorflow:From /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
WARNING:tensorflow:From /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
2023-09-01 19:03:32.195531: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2023-09-01 19:03:32.216943: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 3399905000 Hz
2023-09-01 19:03:32.217662: I tensorflow/compiler/xla/service/service.cc:150] XLA service 0x55d1ee95bd90 executing computations on platform Host. Devices:
2023-09-01 19:03:32.217682: I tensorflow/compiler/xla/service/service.cc:158]   StreamExecutor device (0): <undefined>, <undefined>
------------------------------ Captured log call -------------------------------
WARNING  tensorflow:deprecation.py:323 From /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.
Instructions for updating:
Colocations handled automatically by placer.
WARNING  tensorflow:deprecation.py:323 From /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
=============================== warnings summary ===============================
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/pywrap_tensorflow_internal.py:15
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/pywrap_tensorflow_internal.py:15
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/pywrap_tensorflow_internal.py:15: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:526
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:526
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:526: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    _np_qint8 = np.dtype([("qint8", np.int8, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:527
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:527
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:527: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    _np_quint8 = np.dtype([("quint8", np.uint8, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:528
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:528
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:528: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    _np_qint16 = np.dtype([("qint16", np.int16, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:529
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:529
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:529: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    _np_quint16 = np.dtype([("quint16", np.uint16, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:530
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:530
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:530: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    _np_qint32 = np.dtype([("qint32", np.int32, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:535
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:535
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/framework/dtypes.py:535: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
    np_resource = np.dtype([("resource", np.ubyte, 1)])

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:823
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:823
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:823: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    _pywrap_tensorflow.RegisterType("Mapping", _collections.Mapping)

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:824
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:824
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/util/nest.py:824: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    _pywrap_tensorflow.RegisterType("Sequence", _collections.Sequence)

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:312
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:312
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:312: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    class _ListWrapper(List, collections.MutableSequence,

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:546
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:546
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/data_structures.py:546: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    class _DictWrapper(Mapping, collections.MutableMapping):

/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/util.py:448
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/util.py:448
  /opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/tensorflow/python/training/checkpointable/util.py:448: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    class _ObjectIdentitySet(collections.MutableSet):

keras/callbacks.py:18
keras/callbacks.py:18
  /home/user/BugsInPy/temp/projects/keras/keras/callbacks.py:18: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    from collections import Iterable

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== slowest 10 test durations ===========================
0.43s call     tests/keras/metrics_test.py::test_stateful_metrics[dict]

(0.00 durations hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/keras/metrics_test.py::test_stateful_metrics[dict] - AssertionEr...
======================== 1 failed, 26 warnings in 2.01s ========================
/opt/conda/envs/6653c8d2bfe512b8ea59642a1bdc72a4/lib/python3.7/site-packages/coverage/control.py:793: CoverageWarning: No data was collected. (no-data-collected)
  self._warn("No data was collected.", slug="no-data-collected")
