[
    {
        "name": "tests.test_pipeline_images._mocked_download_func#27",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images",
        "signature": "tests.test_pipeline_images._mocked_download_func(request, info)",
        "snippet": "def _mocked_download_func(request, info):\n    response = request.meta.get('response')\n    return response() if callable(response) else response",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCase.setUp#36",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.tempdir = mkdtemp()\n        self.pipeline = ImagesPipeline(self.tempdir, download_func=_mocked_download_func)",
        "begin_line": 36,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCase.tearDown#40",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        rmtree(self.tempdir)",
        "begin_line": 40,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCase.test_file_path#43",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCase.test_file_path(self)",
        "snippet": "    def test_file_path(self):\n        file_path = self.pipeline.file_path\n        self.assertEqual(file_path(Request(\"https://dev.mydeco.com/mydeco.gif\")),\n                         'full/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')\n        self.assertEqual(file_path(Request(\"http://www.maddiebrown.co.uk///catalogue-items//image_54642_12175_95307.jpg\")),\n                         'full/0ffcd85d563bca45e2f90becd0ca737bc58a00b2.jpg')\n        self.assertEqual(file_path(Request(\"https://dev.mydeco.com/two/dirs/with%20spaces%2Bsigns.gif\")),\n                         'full/b250e3a74fff2e4703e310048a5b13eba79379d2.jpg')\n        self.assertEqual(file_path(Request(\"http://www.dfsonline.co.uk/get_prod_image.php?img=status_0907_mdm.jpg\")),\n                         'full/4507be485f38b0da8a0be9eb2e1dfab8a19223f2.jpg')\n        self.assertEqual(file_path(Request(\"http://www.dorma.co.uk/images/product_details/2532/\")),\n                         'full/97ee6f8a46cbbb418ea91502fd24176865cf39b2.jpg')\n        self.assertEqual(file_path(Request(\"http://www.dorma.co.uk/images/product_details/2532\")),\n                         'full/244e0dd7d96a3b7b01f54eded250c9e272577aa1.jpg')\n        self.assertEqual(file_path(Request(\"http://www.dorma.co.uk/images/product_details/2532\"),\n                                   response=Response(\"http://www.dorma.co.uk/images/product_details/2532\"),\n                                   info=object()),\n                         'full/244e0dd7d96a3b7b01f54eded250c9e272577aa1.jpg')",
        "begin_line": 43,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCase.test_thumbnail_name#62",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCase.test_thumbnail_name(self)",
        "snippet": "    def test_thumbnail_name(self):\n        thumb_path = self.pipeline.thumb_path\n        name = '50'\n        self.assertEqual(thumb_path(Request(\"file:///tmp/foo.jpg\"), name),\n                         'thumbs/50/38a86208c36e59d4404db9e37ce04be863ef0335.jpg')\n        self.assertEqual(thumb_path(Request(\"file://foo.png\"), name),\n                         'thumbs/50/e55b765eba0ec7348e50a1df496040449071b96a.jpg')\n        self.assertEqual(thumb_path(Request(\"file:///tmp/foo\"), name),\n                         'thumbs/50/0329ad83ebb8e93ea7c7906d46e9ed55f7349a50.jpg')\n        self.assertEqual(thumb_path(Request(\"file:///tmp/some.name/foo\"), name),\n                         'thumbs/50/850233df65a5b83361798f532f1fc549cd13cbe9.jpg')\n        self.assertEqual(thumb_path(Request(\"file:///tmp/some.name/foo\"), name,\n                                    response=Response(\"file:///tmp/some.name/foo\"),\n                                    info=object()),\n                         'thumbs/50/850233df65a5b83361798f532f1fc549cd13cbe9.jpg')",
        "begin_line": 62,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCase.test_convert_image#78",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCase.test_convert_image(self)",
        "snippet": "    def test_convert_image(self):\n        SIZE = (100, 100)\n        # straigh forward case: RGB and JPEG\n        COLOUR = (0, 127, 255)\n        im = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, COLOUR)])\n\n        # check that thumbnail keep image ratio\n        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n        self.assertEquals(thumbnail.mode, 'RGB')\n        self.assertEquals(thumbnail.size, (10, 10))\n\n        # transparency case: RGBA and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])",
        "begin_line": 78,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipeline.file_key#101",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipeline",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipeline.file_key(self, url)",
        "snippet": "    def file_key(self, url):\n        return self.image_key(url)",
        "begin_line": 101,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipeline.image_key#104",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipeline",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipeline.image_key(self, url)",
        "snippet": "    def image_key(self, url):\n        image_guid = hashlib.sha1(to_bytes(url)).hexdigest()\n        return 'empty/%s.jpg' % (image_guid)",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipeline.thumb_key#108",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipeline",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipeline.thumb_key(self, url, thumb_id)",
        "snippet": "    def thumb_key(self, url, thumb_id):\n        thumb_guid = hashlib.sha1(to_bytes(url)).hexdigest()\n        return 'thumbsup/%s/%s.jpg' % (thumb_id, thumb_guid)",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.setUp#114",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.tempdir = mkdtemp()",
        "begin_line": 114,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.init_pipeline#117",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.init_pipeline(self, pipeline_class)",
        "snippet": "    def init_pipeline(self, pipeline_class):\n        self.pipeline = pipeline_class(self.tempdir, download_func=_mocked_download_func)\n        self.pipeline.open_spider(None)",
        "begin_line": 117,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_file_key_method#121",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_file_key_method(self)",
        "snippet": "    def test_default_file_key_method(self):\n        self.init_pipeline(ImagesPipeline)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            self.assertEqual(self.pipeline.file_key(\"https://dev.mydeco.com/mydeco.gif\"),\n                             'full/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')\n            self.assertEqual(len(w), 1)\n            self.assertTrue('image_key(url) and file_key(url) methods are deprecated' in str(w[-1].message))",
        "begin_line": 121,
        "end_line": 128,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_image_key_method#130",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_image_key_method(self)",
        "snippet": "    def test_default_image_key_method(self):\n        self.init_pipeline(ImagesPipeline)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            self.assertEqual(self.pipeline.image_key(\"https://dev.mydeco.com/mydeco.gif\"),\n                             'full/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')\n            self.assertEqual(len(w), 1)\n            self.assertTrue('image_key(url) and file_key(url) methods are deprecated' in str(w[-1].message))",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_overridden_file_key_method#139",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_overridden_file_key_method(self)",
        "snippet": "    def test_overridden_file_key_method(self):\n        self.init_pipeline(DeprecatedImagesPipeline)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            self.assertEqual(self.pipeline.file_path(Request(\"https://dev.mydeco.com/mydeco.gif\")),\n                             'empty/3fd165099d8e71b8a48b2683946e64dbfad8b52d.jpg')\n            self.assertEqual(len(w), 1)\n            self.assertTrue('image_key(url) and file_key(url) methods are deprecated' in str(w[-1].message))",
        "begin_line": 139,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_thumb_key_method#148",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_default_thumb_key_method(self)",
        "snippet": "    def test_default_thumb_key_method(self):\n        self.init_pipeline(ImagesPipeline)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            self.assertEqual(self.pipeline.thumb_key(\"file:///tmp/foo.jpg\", 50),\n                             'thumbs/50/38a86208c36e59d4404db9e37ce04be863ef0335.jpg')\n            self.assertEqual(len(w), 1)\n            self.assertTrue('thumb_key(url) method is deprecated' in str(w[-1].message))",
        "begin_line": 148,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_overridden_thumb_key_method#157",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.test_overridden_thumb_key_method(self)",
        "snippet": "    def test_overridden_thumb_key_method(self):\n        self.init_pipeline(DeprecatedImagesPipeline)\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter('always')\n            self.assertEqual(self.pipeline.thumb_path(Request(\"file:///tmp/foo.jpg\"), 50),\n                             'thumbsup/50/38a86208c36e59d4404db9e37ce04be863ef0335.jpg')\n            self.assertEqual(len(w), 1)\n            self.assertTrue('thumb_key(url) method is deprecated' in str(w[-1].message))",
        "begin_line": 157,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.tearDown#166",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase",
        "signature": "tests.test_pipeline_images.DeprecatedImagesPipelineTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        rmtree(self.tempdir)",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseFields.test_item_fields_default#172",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseFields",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseFields.test_item_fields_default(self)",
        "snippet": "    def test_item_fields_default(self):\n        class TestItem(Item):\n            name = Field()\n            image_urls = Field()\n            images = Field()\n\n        for cls in TestItem, dict:\n            url = 'http://www.example.com/images/1.jpg'\n            item = cls({'name': 'item1', 'image_urls': [url]})\n            pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': 's3://example/images/'}))\n            requests = list(pipeline.get_media_requests(item, None))\n            self.assertEqual(requests[0].url, url)\n            results = [(True, {'url': url})]\n            pipeline.item_completed(results, item, None)\n            self.assertEqual(item['images'], [results[0][1]])",
        "begin_line": 172,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.TestItem.test_item_fields_default#172",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.TestItem",
        "signature": "tests.test_pipeline_images.TestItem.test_item_fields_default(self)",
        "snippet": "    def test_item_fields_default(self):\n        class TestItem(Item):\n            name = Field()\n            image_urls = Field()\n            images = Field()\n\n        for cls in TestItem, dict:\n            url = 'http://www.example.com/images/1.jpg'\n            item = cls({'name': 'item1', 'image_urls': [url]})\n            pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': 's3://example/images/'}))\n            requests = list(pipeline.get_media_requests(item, None))\n            self.assertEqual(requests[0].url, url)\n            results = [(True, {'url': url})]\n            pipeline.item_completed(results, item, None)\n            self.assertEqual(item['images'], [results[0][1]])",
        "begin_line": 172,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseFields.test_item_fields_override_settings#188",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseFields",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseFields.test_item_fields_override_settings(self)",
        "snippet": "    def test_item_fields_override_settings(self):\n        class TestItem(Item):\n            name = Field()\n            image = Field()\n            stored_image = Field()\n\n        for cls in TestItem, dict:\n            url = 'http://www.example.com/images/1.jpg'\n            item = cls({'name': 'item1', 'image': [url]})\n            pipeline = ImagesPipeline.from_settings(Settings({\n                'IMAGES_STORE': 's3://example/images/',\n                'IMAGES_URLS_FIELD': 'image',\n                'IMAGES_RESULT_FIELD': 'stored_image'\n            }))\n            requests = list(pipeline.get_media_requests(item, None))\n            self.assertEqual(requests[0].url, url)\n            results = [(True, {'url': url})]\n            pipeline.item_completed(results, item, None)\n            self.assertEqual(item['stored_image'], [results[0][1]])",
        "begin_line": 188,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.TestItem.test_item_fields_override_settings#188",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.TestItem",
        "signature": "tests.test_pipeline_images.TestItem.test_item_fields_override_settings(self)",
        "snippet": "    def test_item_fields_override_settings(self):\n        class TestItem(Item):\n            name = Field()\n            image = Field()\n            stored_image = Field()\n\n        for cls in TestItem, dict:\n            url = 'http://www.example.com/images/1.jpg'\n            item = cls({'name': 'item1', 'image': [url]})\n            pipeline = ImagesPipeline.from_settings(Settings({\n                'IMAGES_STORE': 's3://example/images/',\n                'IMAGES_URLS_FIELD': 'image',\n                'IMAGES_RESULT_FIELD': 'stored_image'\n            }))\n            requests = list(pipeline.get_media_requests(item, None))\n            self.assertEqual(requests[0].url, url)\n            results = [(True, {'url': url})]\n            pipeline.item_completed(results, item, None)\n            self.assertEqual(item['stored_image'], [results[0][1]])",
        "begin_line": 188,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.setUp#231",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.setUp(self)",
        "snippet": "    def setUp(self):\n        self.tempdir = mkdtemp()",
        "begin_line": 231,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.tearDown#234",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.tearDown(self)",
        "snippet": "    def tearDown(self):\n        rmtree(self.tempdir)",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings._generate_fake_settings#237",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings._generate_fake_settings(self, prefix=None)",
        "snippet": "    def _generate_fake_settings(self, prefix=None):\n        \"\"\"\n        :param prefix: string for setting keys\n        :return: dictionary of image pipeline settings\n        \"\"\"\n\n        def random_string():\n            return \"\".join([chr(random.randint(97, 123)) for _ in range(10)])\n\n        settings = {\n            \"IMAGES_EXPIRES\": random.randint(1, 1000),\n            \"IMAGES_STORE\": self.tempdir,\n            \"IMAGES_RESULT_FIELD\": random_string(),\n            \"IMAGES_URLS_FIELD\": random_string(),\n            \"IMAGES_MIN_WIDTH\": random.randint(1, 1000),\n            \"IMAGES_MIN_HEIGHT\": random.randint(1, 1000),\n            \"IMAGES_THUMBS\": {\n                'small': (random.randint(1, 1000), random.randint(1, 1000)),\n                'big': (random.randint(1, 1000), random.randint(1, 1000))\n            }\n        }\n        if not prefix:\n            return settings\n\n        return {prefix.upper() + \"_\" + k if k != \"IMAGES_STORE\" else k: v for k, v in settings.items()}",
        "begin_line": 237,
        "end_line": 261,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.random_string#243",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.random_string()",
        "snippet": "        def random_string():\n            return \"\".join([chr(random.randint(97, 123)) for _ in range(10)])",
        "begin_line": 243,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings._generate_fake_pipeline_subclass#263",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings._generate_fake_pipeline_subclass(self)",
        "snippet": "    def _generate_fake_pipeline_subclass(self):\n        \"\"\"\n        :return: ImagePipeline class will all uppercase attributes set.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            # Values should be in different range than fake_settings.\n            MIN_WIDTH = random.randint(1000, 2000)\n            MIN_HEIGHT = random.randint(1000, 2000)\n            THUMBS = {\n                'small': (random.randint(1000, 2000), random.randint(1000, 2000)),\n                'big': (random.randint(1000, 2000), random.randint(1000, 2000))\n            }\n            EXPIRES = random.randint(1000, 2000)\n            IMAGES_URLS_FIELD = \"field_one\"\n            IMAGES_RESULT_FIELD = \"field_two\"\n\n        return UserDefinedImagePipeline",
        "begin_line": 263,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.UserDefinedImagePipeline._generate_fake_pipeline_subclass#263",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.UserDefinedImagePipeline",
        "signature": "tests.test_pipeline_images.UserDefinedImagePipeline._generate_fake_pipeline_subclass(self)",
        "snippet": "    def _generate_fake_pipeline_subclass(self):\n        \"\"\"\n        :return: ImagePipeline class will all uppercase attributes set.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            # Values should be in different range than fake_settings.\n            MIN_WIDTH = random.randint(1000, 2000)\n            MIN_HEIGHT = random.randint(1000, 2000)\n            THUMBS = {\n                'small': (random.randint(1000, 2000), random.randint(1000, 2000)),\n                'big': (random.randint(1000, 2000), random.randint(1000, 2000))\n            }\n            EXPIRES = random.randint(1000, 2000)\n            IMAGES_URLS_FIELD = \"field_one\"\n            IMAGES_RESULT_FIELD = \"field_two\"\n\n        return UserDefinedImagePipeline",
        "begin_line": 263,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_different_settings_for_different_instances#281",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_different_settings_for_different_instances(self)",
        "snippet": "    def test_different_settings_for_different_instances(self):\n        \"\"\"\n        If there are two instances of ImagesPipeline class with different settings, they should\n        have different settings.\n        \"\"\"\n        custom_settings = self._generate_fake_settings()\n        default_settings = Settings()\n        default_sts_pipe = ImagesPipeline(self.tempdir, settings=default_settings)\n        user_sts_pipe = ImagesPipeline.from_settings(Settings(custom_settings))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            expected_default_value = self.default_pipeline_settings.get(pipe_attr)\n            custom_value = custom_settings.get(settings_attr)\n            self.assertNotEqual(expected_default_value, custom_value)\n            self.assertEqual(getattr(default_sts_pipe, pipe_attr.lower()), expected_default_value)\n            self.assertEqual(getattr(user_sts_pipe, pipe_attr.lower()), custom_value)",
        "begin_line": 281,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_subclass_attrs_preserved_default_settings#297",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_subclass_attrs_preserved_default_settings(self)",
        "snippet": "    def test_subclass_attrs_preserved_default_settings(self):\n        \"\"\"\n        If image settings are not defined at all subclass of ImagePipeline takes values\n        from class attributes.\n        \"\"\"\n        pipeline_cls = self._generate_fake_pipeline_subclass()\n        pipeline = pipeline_cls.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n            attr_value = getattr(pipeline, pipe_attr.lower())\n            self.assertNotEqual(attr_value, self.default_pipeline_settings[pipe_attr])\n            self.assertEqual(attr_value, getattr(pipeline, pipe_attr))",
        "begin_line": 297,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_subclass_attrs_preserved_custom_settings#310",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_subclass_attrs_preserved_custom_settings(self)",
        "snippet": "    def test_subclass_attrs_preserved_custom_settings(self):\n        \"\"\"\n        If image settings are defined but they are not defined for subclass class attributes\n        should be preserved.\n        \"\"\"\n        pipeline_cls = self._generate_fake_pipeline_subclass()\n        settings = self._generate_fake_settings()\n        pipeline = pipeline_cls.from_settings(Settings(settings))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n            value = getattr(pipeline, pipe_attr.lower())\n            self.assertNotEqual(value, self.default_pipeline_settings[pipe_attr])\n            self.assertEqual(value, getattr(pipeline, pipe_attr))",
        "begin_line": 310,
        "end_line": 322,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_no_custom_settings_for_subclasses#324",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_no_custom_settings_for_subclasses(self)",
        "snippet": "    def test_no_custom_settings_for_subclasses(self):\n        \"\"\"\n        If there are no settings for subclass and no subclass attributes, pipeline should use\n        attributes of base class.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            pass\n\n        user_pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Values from settings for custom pipeline should be set on pipeline instance.\n            custom_value = self.default_pipeline_settings.get(pipe_attr.upper())\n            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)",
        "begin_line": 324,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.UserDefinedImagePipeline.test_no_custom_settings_for_subclasses#324",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.UserDefinedImagePipeline",
        "signature": "tests.test_pipeline_images.UserDefinedImagePipeline.test_no_custom_settings_for_subclasses(self)",
        "snippet": "    def test_no_custom_settings_for_subclasses(self):\n        \"\"\"\n        If there are no settings for subclass and no subclass attributes, pipeline should use\n        attributes of base class.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            pass\n\n        user_pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Values from settings for custom pipeline should be set on pipeline instance.\n            custom_value = self.default_pipeline_settings.get(pipe_attr.upper())\n            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)",
        "begin_line": 324,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_custom_settings_for_subclasses#338",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_custom_settings_for_subclasses(self)",
        "snippet": "    def test_custom_settings_for_subclasses(self):\n        \"\"\"\n        If there are custom settings for subclass and NO class attributes, pipeline should use custom\n        settings.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            pass\n\n        prefix = UserDefinedImagePipeline.__name__.upper()\n        settings = self._generate_fake_settings(prefix=prefix)\n        user_pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Values from settings for custom pipeline should be set on pipeline instance.\n            custom_value = settings.get(prefix + \"_\" + settings_attr)\n            self.assertNotEqual(custom_value, self.default_pipeline_settings[pipe_attr])\n            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)",
        "begin_line": 338,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.UserDefinedImagePipeline.test_custom_settings_for_subclasses#338",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.UserDefinedImagePipeline",
        "signature": "tests.test_pipeline_images.UserDefinedImagePipeline.test_custom_settings_for_subclasses(self)",
        "snippet": "    def test_custom_settings_for_subclasses(self):\n        \"\"\"\n        If there are custom settings for subclass and NO class attributes, pipeline should use custom\n        settings.\n        \"\"\"\n        class UserDefinedImagePipeline(ImagesPipeline):\n            pass\n\n        prefix = UserDefinedImagePipeline.__name__.upper()\n        settings = self._generate_fake_settings(prefix=prefix)\n        user_pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            # Values from settings for custom pipeline should be set on pipeline instance.\n            custom_value = settings.get(prefix + \"_\" + settings_attr)\n            self.assertNotEqual(custom_value, self.default_pipeline_settings[pipe_attr])\n            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)",
        "begin_line": 338,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_custom_settings_and_class_attrs_for_subclasses#355",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_custom_settings_and_class_attrs_for_subclasses(self)",
        "snippet": "    def test_custom_settings_and_class_attrs_for_subclasses(self):\n        \"\"\"\n        If there are custom settings for subclass AND class attributes\n        setting keys are preferred and override attributes.\n        \"\"\"\n        pipeline_cls = self._generate_fake_pipeline_subclass()\n        prefix = pipeline_cls.__name__.upper()\n        settings = self._generate_fake_settings(prefix=prefix)\n        user_pipeline = pipeline_cls.from_settings(Settings(settings))\n        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n            custom_value = settings.get(prefix + \"_\" + settings_attr)\n            self.assertNotEqual(custom_value, self.default_pipeline_settings[pipe_attr])\n            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)",
        "begin_line": 355,
        "end_line": 367,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_cls_attrs_with_DEFAULT_prefix#369",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings",
        "signature": "tests.test_pipeline_images.ImagesPipelineTestCaseCustomSettings.test_cls_attrs_with_DEFAULT_prefix(self)",
        "snippet": "    def test_cls_attrs_with_DEFAULT_prefix(self):\n        class UserDefinedImagePipeline(ImagesPipeline):\n            DEFAULT_IMAGES_URLS_FIELD = \"something\"\n            DEFAULT_IMAGES_RESULT_FIELD = \"something_else\"\n\n        pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n        self.assertEqual(pipeline.images_result_field, \"something_else\")\n        self.assertEqual(pipeline.images_urls_field, \"something\")",
        "begin_line": 369,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images.UserDefinedImagePipeline.test_cls_attrs_with_DEFAULT_prefix#369",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images.UserDefinedImagePipeline",
        "signature": "tests.test_pipeline_images.UserDefinedImagePipeline.test_cls_attrs_with_DEFAULT_prefix(self)",
        "snippet": "    def test_cls_attrs_with_DEFAULT_prefix(self):\n        class UserDefinedImagePipeline(ImagesPipeline):\n            DEFAULT_IMAGES_URLS_FIELD = \"something\"\n            DEFAULT_IMAGES_RESULT_FIELD = \"something_else\"\n\n        pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n        self.assertEqual(pipeline.images_result_field, \"something_else\")\n        self.assertEqual(pipeline.images_urls_field, \"something\")",
        "begin_line": 369,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pipeline_images._create_image#379",
        "src_path": "tests/test_pipeline_images.py",
        "class_name": "tests.test_pipeline_images",
        "signature": "tests.test_pipeline_images._create_image(format, *a, **kw)",
        "snippet": "def _create_image(format, *a, **kw):\n    buf = TemporaryFile()\n    Image.new(*a, **kw).save(buf, format)\n    buf.seek(0)\n    return Image.open(buf)",
        "begin_line": 379,
        "end_line": 383,
        "comment": "",
        "is_bug": false
    }
]