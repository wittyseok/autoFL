coverage run -m pytest pandas/tests/reshape/merge/test_merge_asof.py::TestAsOfMerge::test_merge_index_column_tz
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 1 item

pandas/tests/reshape/merge/test_merge_asof.py F                          [100%]

=================================== FAILURES ===================================
___________________ TestAsOfMerge.test_merge_index_column_tz ___________________

self = <pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge object at 0x7f1cf6537b50>

    def test_merge_index_column_tz(self):
        # GH 29864
        index = pd.date_range("2019-10-01", freq="30min", periods=5, tz="UTC")
        left = pd.DataFrame([0.9, 0.8, 0.7, 0.6], columns=["xyz"], index=index[1:])
        right = pd.DataFrame({"from_date": index, "abc": [2.46] * 4 + [2.19]})
>       result = pd.merge_asof(
            left=left, right=right, left_index=True, right_on=["from_date"]
        )

pandas/tests/reshape/merge/test_merge_asof.py:1312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/reshape/merge.py:519: in merge_asof
    op = _AsOfMerge(
pandas/core/reshape/merge.py:1552: in __init__
    _OrderedMerge.__init__(
pandas/core/reshape/merge.py:1442: in __init__
    _MergeOperation.__init__(
pandas/core/reshape/merge.py:622: in __init__
    ) = self._get_merge_keys()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.reshape.merge._AsOfMerge object at 0x7f1cf645b100>

    def _get_merge_keys(self):
    
        # note this function has side effects
        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()
    
        # validate index types are the same
        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):
            if not is_dtype_equal(lk.dtype, rk.dtype):
                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):
                    # The generic error message is confusing for categoricals.
                    #
                    # In this function, the join keys include both the original
                    # ones of the merge_asof() call, and also the keys passed
                    # to its by= argument. Unordered but equal categories
                    # are not supported for the former, but will fail
                    # later with a ValueError, so we don't *need* to check
                    # for them here.
                    msg = (
                        "incompatible merge keys [{i}] {lkdtype} and "
                        "{rkdtype}, both sides category, but not equal ones".format(
                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)
                        )
                    )
                else:
                    msg = (
                        "incompatible merge keys [{i}] {lkdtype} and "
                        "{rkdtype}, must be the same type".format(
                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)
                        )
                    )
>               raise MergeError(msg)
E               pandas.errors.MergeError: incompatible merge keys [0] dtype('<M8[ns]') and datetime64[ns, UTC], must be the same type

pandas/core/reshape/merge.py:1648: MergeError
=========================== short test summary info ============================
FAILED pandas/tests/reshape/merge/test_merge_asof.py::TestAsOfMerge::test_merge_index_column_tz
============================== 1 failed in 0.61s ===============================
