[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#42",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None)",
        "snippet": "    def __call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None):\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 42,
        "end_line": 61,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00040966816878328555,
            "pseudo_dstar_susp": 0.00040966816878328555,
            "pseudo_tarantula_susp": 0.0004257130693912303,
            "pseudo_op2_susp": 0.00040966816878328555,
            "pseudo_barinel_susp": 0.0004257130693912303
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argsort_with_ascending#133",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argsort_with_ascending(ascending, args, kwargs)",
        "snippet": "def validate_argsort_with_ascending(ascending, args, kwargs):\n    \"\"\"\n    If 'Categorical.argsort' is called via the 'numpy' library, the\n    first parameter in its signature is 'axis', which takes either\n    an integer or 'None', so check if the 'ascending' parameter has\n    either integer type or is None, since 'ascending' itself should\n    be a boolean\n    \"\"\"\n\n    if is_integer(ascending) or ascending is None:\n        args = (ascending,) + args\n        ascending = True\n\n    validate_argsort_kind(args, kwargs, max_fname_arg_count=3)\n    return ascending",
        "begin_line": 133,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.094544277157196e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_groupby_func#355",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_groupby_func(name, args, kwargs, allowed=None)",
        "snippet": "def validate_groupby_func(name, args, kwargs, allowed=None):\n    \"\"\"\n    'args' and 'kwargs' should be empty, except for allowed\n    kwargs because all of\n    their necessary parameters are explicitly listed in\n    the function signature\n    \"\"\"\n    if allowed is None:\n        allowed = []\n\n    kwargs = set(kwargs) - set(allowed)\n\n    if len(args) + len(kwargs) > 0:\n        raise UnsupportedFunctionCall(\n            f\"numpy operations are not valid with \"\n            f\"groupby. Use .groupby(...).{name}() \"\n            f\"instead\"\n        )",
        "begin_line": 355,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_resampler_func#378",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_resampler_func(method, args, kwargs)",
        "snippet": "def validate_resampler_func(method, args, kwargs):\n    \"\"\"\n    'args' and 'kwargs' should be empty because all of\n    their necessary parameters are explicitly listed in\n    the function signature\n    \"\"\"\n    if len(args) + len(kwargs) > 0:\n        if method in RESAMPLER_NUMPY_OPS:\n            raise UnsupportedFunctionCall(\n                f\"numpy operations are not \"\n                f\"valid with resample. Use \"\n                f\".resample(...).{method}() instead\"\n            )\n        else:\n            raise TypeError(\"too many arguments passed in\")",
        "begin_line": 378,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_minmax_axis#395",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_minmax_axis(axis)",
        "snippet": "def validate_minmax_axis(axis):\n    \"\"\"\n    Ensure that the axis argument passed to min, max, argmin, or argmax is\n    zero or None, as otherwise it will be incorrectly ignored.\n\n    Parameters\n    ----------\n    axis : int or None\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    ndim = 1  # hard-coded for Index\n    if axis is None:\n        return\n    if axis >= ndim or (axis < 0 and ndim + axis < 0):\n        raise ValueError(f\"`axis` must be fewer than the number of dimensions ({ndim})\")",
        "begin_line": 395,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__init__#361",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
        "snippet": "    def __init__(\n        self,\n        obj: NDFrame,\n        keys: Optional[_KeysArgType] = None,\n        axis: int = 0,\n        level=None,\n        grouper: \"Optional[ops.BaseGrouper]\" = None,\n        exclusions=None,\n        selection=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n        mutated: bool = False,\n    ):\n\n        self._selection = selection\n\n        assert isinstance(obj, NDFrame), type(obj)\n        obj._consolidate_inplace()\n\n        self.level = level\n\n        if not as_index:\n            if not isinstance(obj, DataFrame):\n                raise TypeError(\"as_index=False only valid with DataFrame\")\n            if axis != 0:\n                raise ValueError(\"as_index=False only valid for axis=0\")\n\n        self.as_index = as_index\n        self.keys = keys\n        self.sort = sort\n        self.group_keys = group_keys\n        self.squeeze = squeeze\n        self.observed = observed\n        self.mutated = mutated\n\n        if grouper is None:\n            from pandas.core.groupby.grouper import get_grouper\n\n            grouper, exclusions, obj = get_grouper(\n                obj,\n                keys,\n                axis=axis,\n                level=level,\n                sort=sort,\n                observed=observed,\n                mutated=self.mutated,\n            )\n\n        self.obj = obj\n        self.axis = obj._get_axis_number(axis)\n        self.grouper = grouper\n        self.exclusions = set(exclusions) if exclusions else set()",
        "begin_line": 361,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.035812284528248e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._assure_grouper#424",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._assure_grouper(self)",
        "snippet": "    def _assure_grouper(self):\n        \"\"\"\n        We create the grouper on instantiation sub-classes may have a\n        different policy.\n        \"\"\"\n        pass",
        "begin_line": 424,
        "end_line": 429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.indices#445",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.indices(self)",
        "snippet": "    def indices(self):\n        \"\"\"\n        Dict {group name -> group indices}.\n        \"\"\"\n        self._assure_grouper()\n        return self.grouper.indices",
        "begin_line": 445,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._get_indices#452",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._get_indices(self, names)",
        "snippet": "    def _get_indices(self, names):\n        \"\"\"\n        Safe get multiple indices, translate keys for\n        datelike to underlying repr.\n        \"\"\"\n\n        def get_converter(s):\n            # possibly convert to the actual key types\n            # in the indices, could be a Timestamp or a np.datetime64\n            if isinstance(s, datetime.datetime):\n                return lambda key: Timestamp(key)\n            elif isinstance(s, np.datetime64):\n                return lambda key: Timestamp(key).asm8\n            else:\n                return lambda key: key\n\n        if len(names) == 0:\n            return []\n\n        if len(self.indices) > 0:\n            index_sample = next(iter(self.indices))\n        else:\n            index_sample = None  # Dummy sample\n\n        name_sample = names[0]\n        if isinstance(index_sample, tuple):\n            if not isinstance(name_sample, tuple):\n                msg = \"must supply a tuple to get_group with multiple grouping keys\"\n                raise ValueError(msg)\n            if not len(name_sample) == len(index_sample):\n                try:\n                    # If the original grouper was a tuple\n                    return [self.indices[name] for name in names]\n                except KeyError:\n                    # turns out it wasn't a tuple\n                    msg = (\n                        \"must supply a same-length tuple to get_group\"\n                        \" with multiple grouping keys\"\n                    )\n                    raise ValueError(msg)\n\n            converters = [get_converter(s) for s in index_sample]\n            names = (tuple(f(n) for f, n in zip(converters, name)) for name in names)\n\n        else:\n            converter = get_converter(index_sample)\n            names = (converter(name) for name in names)\n\n        return [self.indices.get(name, []) for name in names]",
        "begin_line": 452,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.get_converter#458",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.get_converter(s)",
        "snippet": "        def get_converter(s):\n            # possibly convert to the actual key types\n            # in the indices, could be a Timestamp or a np.datetime64\n            if isinstance(s, datetime.datetime):\n                return lambda key: Timestamp(key)\n            elif isinstance(s, np.datetime64):\n                return lambda key: Timestamp(key).asm8\n            else:\n                return lambda key: key",
        "begin_line": 458,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._get_index#502",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._get_index(self, name)",
        "snippet": "    def _get_index(self, name):\n        \"\"\"\n        Safe get index, translate keys for datelike to underlying repr.\n        \"\"\"\n        return self._get_indices([name])[0]",
        "begin_line": 502,
        "end_line": 506,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._selected_obj#509",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._selected_obj(self)",
        "snippet": "    def _selected_obj(self):\n        # Note: _selected_obj is always just `self.obj` for SeriesGroupBy\n\n        if self._selection is None or isinstance(self.obj, Series):\n            if self._group_selection is not None:\n                return self.obj[self._group_selection]\n            return self.obj\n        else:\n            return self.obj[self._selection]",
        "begin_line": 509,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.374707040404987e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._set_group_selection#531",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._set_group_selection(self)",
        "snippet": "    def _set_group_selection(self):\n        \"\"\"\n        Create group based selection.\n\n        Used when selection is not passed directly but instead via a grouper.\n\n        NOTE: this should be paired with a call to _reset_group_selection\n        \"\"\"\n        grp = self.grouper\n        if not (\n            self.as_index\n            and getattr(grp, \"groupings\", None) is not None\n            and self.obj.ndim > 1\n            and self._group_selection is None\n        ):\n            return\n\n        ax = self.obj._info_axis\n        groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n        if len(groupers):\n            # GH12839 clear selected obj cache when group selection changes\n            self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n            self._reset_cache(\"_selected_obj\")",
        "begin_line": 531,
        "end_line": 554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__getattr__#573",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__getattr__(self, attr)",
        "snippet": "    def __getattr__(self, attr):\n        if attr in self._internal_names_set:\n            return object.__getattribute__(self, attr)\n        if attr in self.obj:\n            return self[attr]\n\n        raise AttributeError(\n            f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n        )",
        "begin_line": 573,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.get_group#664",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.get_group(self, name, obj=None)",
        "snippet": "    def get_group(self, name, obj=None):\n        \"\"\"\n        Construct DataFrame from group with provided name.\n\n        Parameters\n        ----------\n        name : object\n            The name of the group to get as a DataFrame.\n        obj : DataFrame, default None\n            The DataFrame to take the DataFrame out of.  If\n            it is None, the object groupby was called on will\n            be used.\n\n        Returns\n        -------\n        group : same type as obj\n        \"\"\"\n        if obj is None:\n            obj = self._selected_obj\n\n        inds = self._get_index(name)\n        if not len(inds):\n            raise KeyError(name)\n\n        return obj.take(inds, axis=self.axis)",
        "begin_line": 664,
        "end_line": 688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__iter__#690",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Groupby iterator.\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group\n        \"\"\"\n        return self.grouper.get_iterator(self.obj, axis=self.axis)",
        "begin_line": 690,
        "end_line": 699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.apply#706",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.apply(self, func, *args, **kwargs)",
        "snippet": "    def apply(self, func, *args, **kwargs):\n\n        func = self._is_builtin_func(func)\n\n        # this is needed so we don't try and wrap strings. If we could\n        # resolve functions to their callable functions prior, this\n        # wouldn't be needed\n        if args or kwargs:\n            if callable(func):\n\n                @wraps(func)\n                def f(g):\n                    with np.errstate(all=\"ignore\"):\n                        return func(g, *args, **kwargs)\n\n            elif hasattr(nanops, \"nan\" + func):\n                # TODO: should we wrap this in to e.g. _is_builtin_func?\n                f = getattr(nanops, \"nan\" + func)\n\n            else:\n                raise ValueError(\n                    \"func must be a callable if args or kwargs are supplied\"\n                )\n        else:\n            f = func\n\n        # ignore SettingWithCopy here in case the user mutates\n        with option_context(\"mode.chained_assignment\", None):\n            try:\n                result = self._python_apply_general(f)\n            except TypeError:\n                # gh-20949\n                # try again, with .apply acting as a filtering\n                # operation, by excluding the grouping column\n                # This would normally not be triggered\n                # except if the udf is trying an operation that\n                # fails on *some* columns, e.g. a numeric operation\n                # on a string grouper column\n\n                with _group_selection_context(self):\n                    return self._python_apply_general(f)\n\n        return result",
        "begin_line": 706,
        "end_line": 748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._python_apply_general#750",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._python_apply_general(self, f)",
        "snippet": "    def _python_apply_general(self, f):\n        keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n\n        return self._wrap_applied_output(\n            keys, values, not_indexed_same=mutated or self.mutated\n        )",
        "begin_line": 750,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._try_cast#795",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._try_cast(self, result, obj, numeric_only: bool=False)",
        "snippet": "    def _try_cast(self, result, obj, numeric_only: bool = False):\n        \"\"\"\n        Try to cast the result to our obj original type,\n        we may have roundtripped through object in the mean-time.\n\n        If numeric_only is True, then only try to cast numerics\n        and not datetimelikes.\n\n        \"\"\"\n        if obj.ndim > 1:\n            dtype = obj._values.dtype\n        else:\n            dtype = obj.dtype\n\n        if not is_scalar(result):\n            if is_extension_array_dtype(dtype) and dtype.kind != \"M\":\n                # The function can return something of any type, so check\n                #  if the type is compatible with the calling EA.\n                # datetime64tz is handled correctly in agg_series,\n                #  so is excluded here.\n\n                # return the same type (Series) as our caller\n                cls = dtype.construct_array_type()\n                result = try_cast_to_ea(cls, result, dtype=dtype)\n            elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n                result = maybe_downcast_to_dtype(result, dtype)\n\n        return result",
        "begin_line": 795,
        "end_line": 822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._cython_agg_general#873",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_general(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ):\n        output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n        # Ideally we would be able to enumerate self._iterate_slices and use\n        # the index from enumeration as the key of output, but ohlc in particular\n        # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n        # need to slice that up into 1D arrays\n        idx = 0\n        for obj in self._iterate_slices():\n            name = obj.name\n            is_numeric = is_numeric_dtype(obj.dtype)\n            if numeric_only and not is_numeric:\n                continue\n\n            result, agg_names = self.grouper.aggregate(\n                obj._values, how, min_count=min_count\n            )\n\n            if agg_names:\n                # e.g. ohlc\n                assert len(agg_names) == result.shape[1]\n                for result_column, result_name in zip(result.T, agg_names):\n                    key = base.OutputKey(label=result_name, position=idx)\n                    output[key] = self._try_cast(result_column, obj)\n                    idx += 1\n            else:\n                assert result.ndim == 1\n                key = base.OutputKey(label=name, position=idx)\n                output[key] = self._try_cast(result, obj)\n                idx += 1\n\n        if len(output) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        return self._wrap_aggregated_output(output)",
        "begin_line": 873,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._python_agg_general#910",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._python_agg_general(self, func, *args, **kwargs)",
        "snippet": "    def _python_agg_general(self, func, *args, **kwargs):\n        func = self._is_builtin_func(func)\n        f = lambda x: func(x, *args, **kwargs)\n\n        # iterate through \"columns\" ex exclusions to populate output dict\n        output: Dict[base.OutputKey, np.ndarray] = {}\n\n        for idx, obj in enumerate(self._iterate_slices()):\n            name = obj.name\n            if self.grouper.ngroups == 0:\n                # agg_series below assumes ngroups > 0\n                continue\n\n            try:\n                # if this function is invalid for this dtype, we will ignore it.\n                func(obj[:0])\n            except TypeError:\n                continue\n            except AssertionError:\n                raise\n            except Exception:\n                # Our function depends on having a non-empty argument\n                #  See test_groupby_agg_err_catching\n                pass\n\n            result, counts = self.grouper.agg_series(obj, f)\n            assert result is not None\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = self._try_cast(result, obj, numeric_only=True)\n\n        if len(output) == 0:\n            return self._python_apply_general(f)\n\n        if self.grouper._filter_empty_groups:\n\n            mask = counts.ravel() > 0\n            for key, result in output.items():\n\n                # since we are masking, make sure that we have a float object\n                values = result\n                if is_numeric_dtype(values.dtype):\n                    values = ensure_float(values)\n\n                output[key] = self._try_cast(values[mask], result)\n\n        return self._wrap_aggregated_output(output)",
        "begin_line": 910,
        "end_line": 955,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.mean#1187",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.mean(self, *args, **kwargs)",
        "snippet": "    def mean(self, *args, **kwargs):\n        \"\"\"\n        Compute mean of groups, excluding missing values.\n\n        Returns\n        -------\n        pandas.Series or pandas.DataFrame\n        %(see_also)s\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n        ...                    'B': [np.nan, 2, 3, 4, 5],\n        ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n        Groupby one column and return the mean of the remaining columns in\n        each group.\n\n        >>> df.groupby('A').mean()\n             B         C\n        A\n        1  3.0  1.333333\n        2  4.0  1.500000\n\n        Groupby two columns and return the mean of the remaining column.\n\n        >>> df.groupby(['A', 'B']).mean()\n               C\n        A B\n        1 2.0  2\n          4.0  1\n        2 3.0  1\n          5.0  2\n\n        Groupby one column and return the mean of only particular column in\n        the group.\n\n        >>> df.groupby('A')['B'].mean()\n        A\n        1    3.0\n        2    4.0\n        Name: B, dtype: float64\n        \"\"\"\n        nv.validate_groupby_func(\"mean\", args, kwargs, [\"numeric_only\"])\n        return self._cython_agg_general(\n            \"mean\", alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs\n        )",
        "begin_line": 1187,
        "end_line": 1232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.067118425298483e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.std#1255",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.std(self, ddof: int=1, *args, **kwargs)",
        "snippet": "    def std(self, ddof: int = 1, *args, **kwargs):\n        \"\"\"\n        Compute standard deviation of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        Series or DataFrame\n            Standard deviation of values within each group.\n        \"\"\"\n\n        # TODO: implement at Cython level?\n        nv.validate_groupby_func(\"std\", args, kwargs)\n        return np.sqrt(self.var(ddof=ddof, **kwargs))",
        "begin_line": 1255,
        "end_line": 1274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.var#1278",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.var(self, ddof: int=1, *args, **kwargs)",
        "snippet": "    def var(self, ddof: int = 1, *args, **kwargs):\n        \"\"\"\n        Compute variance of groups, excluding missing values.\n\n        For multiple groupings, the result index will be a MultiIndex.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        Series or DataFrame\n            Variance of values within each group.\n        \"\"\"\n        nv.validate_groupby_func(\"var\", args, kwargs)\n        if ddof == 1:\n            return self._cython_agg_general(\n                \"var\", alt=lambda x, axis: Series(x).var(ddof=ddof, **kwargs), **kwargs\n            )\n        else:\n            f = lambda x: x.var(ddof=ddof, **kwargs)\n            with _group_selection_context(self):\n                return self._python_agg_general(f)",
        "begin_line": 1278,
        "end_line": 1302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.size#1326",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Compute group sizes.\n\n        Returns\n        -------\n        Series\n            Number of rows in each group.\n        \"\"\"\n        result = self.grouper.size()\n\n        if isinstance(self.obj, Series):\n            result.name = self.obj.name\n        return self._reindex_output(result, fill_value=0)",
        "begin_line": 1326,
        "end_line": 1339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.groupby_function#1347",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "        def groupby_function(\n            name: str,\n            alias: str,\n            npfunc,\n            numeric_only: bool = True,\n            min_count: int = -1,\n        ):\n\n            _local_template = \"\"\"\n            Compute %(f)s of group values.\n\n            Returns\n            -------\n            Series or DataFrame\n                Computed %(f)s of values within each group.\n            \"\"\"\n\n            @Substitution(name=\"groupby\", f=name)\n            @Appender(_common_see_also)\n            @Appender(_local_template)\n            def f(self, **kwargs):\n                if \"numeric_only\" not in kwargs:\n                    kwargs[\"numeric_only\"] = numeric_only\n                if \"min_count\" not in kwargs:\n                    kwargs[\"min_count\"] = min_count\n\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n                return result\n\n            set_function_name(f, name, cls)\n\n            return f",
        "begin_line": 1347,
        "end_line": 1394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.f#1367",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.f(self, **kwargs)",
        "snippet": "            def f(self, **kwargs):\n                if \"numeric_only\" not in kwargs:\n                    kwargs[\"numeric_only\"] = numeric_only\n                if \"min_count\" not in kwargs:\n                    kwargs[\"min_count\"] = min_count\n\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n                return result",
        "begin_line": 1367,
        "end_line": 1390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._reindex_output#2425",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._reindex_output(self, output: FrameOrSeries, fill_value: Scalar=np.NaN)",
        "snippet": "    def _reindex_output(\n        self, output: FrameOrSeries, fill_value: Scalar = np.NaN\n    ) -> FrameOrSeries:\n        \"\"\"\n        If we have categorical groupers, then we might want to make sure that\n        we have a fully re-indexed output to the levels. This means expanding\n        the output space to accommodate all values in the cartesian product of\n        our groups, regardless of whether they were observed in the data or\n        not. This will expand the output space if there are missing groups.\n\n        The method returns early without modifying the input if the number of\n        groupings is less than 2, self.observed == True or none of the groupers\n        are categorical.\n\n        Parameters\n        ----------\n        output : Series or DataFrame\n            Object resulting from grouping and applying an operation.\n        fill_value : scalar, default np.NaN\n            Value to use for unobserved categories if self.observed is False.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object (potentially) re-indexed to include all possible groups.\n        \"\"\"\n        groupings = self.grouper.groupings\n        if groupings is None:\n            return output\n        elif len(groupings) == 1:\n            return output\n\n        # if we only care about the observed values\n        # we are done\n        elif self.observed:\n            return output\n\n        # reindexing only applies to a Categorical grouper\n        elif not any(\n            isinstance(ping.grouper, (Categorical, CategoricalIndex))\n            for ping in groupings\n        ):\n            return output\n\n        levels_list = [ping.group_index for ping in groupings]\n        index, _ = MultiIndex.from_product(\n            levels_list, names=self.grouper.names\n        ).sortlevel()\n\n        if self.as_index:\n            d = {\n                self.obj._get_axis_name(self.axis): index,\n                \"copy\": False,\n                \"fill_value\": fill_value,\n            }\n            return output.reindex(**d)\n\n        # GH 13204\n        # Here, the categorical in-axis groupers, which need to be fully\n        # expanded, are columns in `output`. An idea is to do:\n        # output = output.set_index(self.grouper.names)\n        #                .reindex(index).reset_index()\n        # but special care has to be taken because of possible not-in-axis\n        # groupers.\n        # So, we manually select and drop the in-axis grouper columns,\n        # reindex `output`, and then reset the in-axis grouper columns.\n\n        # Select in-axis groupers\n        in_axis_grps = (\n            (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n        )\n        g_nums, g_names = zip(*in_axis_grps)\n\n        output = output.drop(labels=list(g_names), axis=1)\n\n        # Set a temp index and reindex (possibly expanding)\n        output = output.set_index(self.grouper.result_index).reindex(\n            index, copy=False, fill_value=fill_value\n        )\n\n        # Reset in-axis grouper columns\n        # (using level numbers `g_nums` because level names may not be unique)\n        output = output.reset_index(level=g_nums)\n\n        return output.reset_index(drop=True)",
        "begin_line": 2425,
        "end_line": 2509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.groupby.get_groupby#2516",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby",
        "signature": "pandas.core.groupby.groupby.get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
        "snippet": "def get_groupby(\n    obj: NDFrame,\n    by: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n):\n\n    klass: Union[Type[\"SeriesGroupBy\"], Type[\"DataFrameGroupBy\"]]\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(f\"invalid type: {obj}\")\n\n    return klass(\n        obj=obj,\n        keys=by,\n        axis=axis,\n        level=level,\n        grouper=grouper,\n        exclusions=exclusions,\n        selection=selection,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n        mutated=mutated,\n    )",
        "begin_line": 2516,
        "end_line": 2558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__init__#265",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__init__(self, data, sparse_index=None, index=None, fill_value=None, kind='integer', dtype=None, copy=False)",
        "snippet": "    def __init__(\n        self,\n        data,\n        sparse_index=None,\n        index=None,\n        fill_value=None,\n        kind=\"integer\",\n        dtype=None,\n        copy=False,\n    ):\n\n        if fill_value is None and isinstance(dtype, SparseDtype):\n            fill_value = dtype.fill_value\n\n        if isinstance(data, type(self)):\n            # disable normal inference on dtype, sparse_index, & fill_value\n            if sparse_index is None:\n                sparse_index = data.sp_index\n            if fill_value is None:\n                fill_value = data.fill_value\n            if dtype is None:\n                dtype = data.dtype\n            # TODO: make kind=None, and use data.kind?\n            data = data.sp_values\n\n        # Handle use-provided dtype\n        if isinstance(dtype, str):\n            # Two options: dtype='int', regular numpy dtype\n            # or dtype='Sparse[int]', a sparse dtype\n            try:\n                dtype = SparseDtype.construct_from_string(dtype)\n            except TypeError:\n                dtype = pandas_dtype(dtype)\n\n        if isinstance(dtype, SparseDtype):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        if index is not None and not is_scalar(data):\n            raise Exception(\"must only pass scalars with an index \")\n\n        if is_scalar(data):\n            if index is not None:\n                if data is None:\n                    data = np.nan\n\n            if index is not None:\n                npoints = len(index)\n            elif sparse_index is None:\n                npoints = 1\n            else:\n                npoints = sparse_index.length\n\n            dtype = infer_dtype_from_scalar(data)[0]\n            data = construct_1d_arraylike_from_scalar(data, npoints, dtype)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        # TODO: disentangle the fill_value dtype inference from\n        # dtype inference\n        if data is None:\n            # XXX: What should the empty dtype be? Object or float?\n            data = np.array([], dtype=dtype)\n\n        if not is_array_like(data):\n            try:\n                # probably shared code in sanitize_series\n\n                data = sanitize_array(data, index=None)\n            except ValueError:\n                # NumPy may raise a ValueError on data like [1, []]\n                # we retry with object dtype here.\n                if dtype is None:\n                    dtype = object\n                    data = np.atleast_1d(np.asarray(data, dtype=dtype))\n                else:\n                    raise\n\n        if copy:\n            # TODO: avoid double copy when dtype forces cast.\n            data = data.copy()\n\n        if fill_value is None:\n            fill_value_dtype = data.dtype if dtype is None else dtype\n            if fill_value_dtype is None:\n                fill_value = np.nan\n            else:\n                fill_value = na_value_for_dtype(fill_value_dtype)\n\n        if isinstance(data, type(self)) and sparse_index is None:\n            sparse_index = data._sparse_index\n            sparse_values = np.asarray(data.sp_values, dtype=dtype)\n        elif sparse_index is None:\n            sparse_values, sparse_index, fill_value = make_sparse(\n                data, kind=kind, fill_value=fill_value, dtype=dtype\n            )\n        else:\n            sparse_values = np.asarray(data, dtype=dtype)\n            if len(sparse_values) != sparse_index.npoints:\n                raise AssertionError(\n                    \"Non array-like type {type} must \"\n                    \"have the same length as the index\".format(type=type(sparse_values))\n                )\n        self._sparse_index = sparse_index\n        self._sparse_values = sparse_values\n        self._dtype = SparseDtype(sparse_values.dtype, fill_value)",
        "begin_line": 265,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._simple_new#375",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._simple_new(cls, sparse_array: np.ndarray, sparse_index: SparseIndex, dtype: SparseDtype)",
        "snippet": "    def _simple_new(\n        cls, sparse_array: np.ndarray, sparse_index: SparseIndex, dtype: SparseDtype,\n    ) -> \"SparseArray\":\n        new = cls([])\n        new._sparse_index = sparse_index\n        new._sparse_values = sparse_array\n        new._dtype = dtype\n        return new",
        "begin_line": 375,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__array__#431",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__array__(self, dtype=None, copy=True)",
        "snippet": "    def __array__(self, dtype=None, copy=True):\n        fill_value = self.fill_value\n\n        if self.sp_index.ngaps == 0:\n            # Compat for na dtype and int values.\n            return self.sp_values\n        if dtype is None:\n            # Can NumPy represent this type?\n            # If not, `np.result_type` will raise. We catch that\n            # and return object.\n            if is_datetime64_any_dtype(self.sp_values.dtype):\n                # However, we *do* special-case the common case of\n                # a datetime64 with pandas NaT.\n                if fill_value is NaT:\n                    # Can't put pd.NaT in a datetime64[ns]\n                    fill_value = np.datetime64(\"NaT\")\n            try:\n                dtype = np.result_type(self.sp_values.dtype, type(fill_value))\n            except TypeError:\n                dtype = object\n\n        out = np.full(self.shape, fill_value, dtype=dtype)\n        out[self.sp_index.to_int_index().indices] = self.sp_values\n        return out",
        "begin_line": 431,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._from_sequence#464",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars, dtype=dtype)",
        "begin_line": 464,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_index#475",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_index(self)",
        "snippet": "    def sp_index(self):\n        \"\"\"\n        The SparseIndex containing the location of non- ``fill_value`` points.\n        \"\"\"\n        return self._sparse_index",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_values#482",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_values(self)",
        "snippet": "    def sp_values(self):\n        \"\"\"\n        An ndarray containing the non- ``fill_value`` values.\n\n        Examples\n        --------\n        >>> s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n        >>> s.sp_values\n        array([1, 2])\n        \"\"\"\n        return self._sparse_values",
        "begin_line": 482,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.dtype#495",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 495,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.fill_value#499",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        Elements in `data` that are `fill_value` are not stored.\n\n        For memory savings, this should be the most common value in the array.\n        \"\"\"\n        return self.dtype.fill_value",
        "begin_line": 499,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.kind#512",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.kind(self)",
        "snippet": "    def kind(self) -> str:\n        \"\"\"\n        The kind of sparse index for this array. One of {'integer', 'block'}.\n        \"\"\"\n        if isinstance(self.sp_index, IntIndex):\n            return \"integer\"\n        else:\n            return \"block\"",
        "begin_line": 512,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__len__#527",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.sp_index.length",
        "begin_line": 527,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._null_fill_value#531",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._null_fill_value(self)",
        "snippet": "    def _null_fill_value(self):\n        return self._dtype._is_na_fill_value",
        "begin_line": 531,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.isna#588",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.isna(self)",
        "snippet": "    def isna(self):\n        # If null fill value, we want SparseDtype[bool, true]\n        # to preserve the same memory usage.\n        dtype = SparseDtype(bool, self._null_fill_value)\n        return type(self)._simple_new(isna(self.sp_values), self.sp_index, dtype)",
        "begin_line": 588,
        "end_line": 592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__getitem__#757",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if isinstance(key, tuple):\n            if len(key) > 1:\n                raise IndexError(\"too many indices for array.\")\n            key = key[0]\n\n        if is_integer(key):\n            return self._get_val_at(key)\n        elif isinstance(key, tuple):\n            data_slice = self.to_dense()[key]\n        elif isinstance(key, slice):\n            # special case to preserve dtypes\n            if key == slice(None):\n                return self.copy()\n            # TODO: this logic is surely elsewhere\n            # TODO: this could be more efficient\n            indices = np.arange(len(self), dtype=np.int32)[key]\n            return self.take(indices)\n        else:\n            # TODO: I think we can avoid densifying when masking a\n            # boolean SparseArray with another. Need to look at the\n            # key's fill_value for True / False, and then do an intersection\n            # on the indicies of the sp_values.\n            if isinstance(key, SparseArray):\n                if is_bool_dtype(key):\n                    key = key.to_dense()\n                else:\n                    key = np.asarray(key)\n\n            if com.is_bool_indexer(key) and len(self) == len(key):\n                return self.take(np.arange(len(key), dtype=np.int32)[key])\n            elif hasattr(key, \"__len__\"):\n                return self.take(key)\n            else:\n                raise ValueError(\"Cannot slice with '{}'\".format(key))\n\n        return type(self)(data_slice, kind=self.kind)",
        "begin_line": 757,
        "end_line": 793,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.take#809",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.take(self, indices, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None):\n        if is_scalar(indices):\n            raise ValueError(\n                \"'indices' must be an array, not a scalar '{}'.\".format(indices)\n            )\n        indices = np.asarray(indices, dtype=np.int32)\n\n        if indices.size == 0:\n            result = []\n            kwargs = {\"dtype\": self.dtype}\n        elif allow_fill:\n            result = self._take_with_fill(indices, fill_value=fill_value)\n            kwargs = {}\n        else:\n            result = self._take_without_fill(indices)\n            kwargs = {\"dtype\": self.dtype}\n\n        return type(self)(result, fill_value=self.fill_value, kind=self.kind, **kwargs)",
        "begin_line": 809,
        "end_line": 826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._take_without_fill#891",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._take_without_fill(self, indices)",
        "snippet": "    def _take_without_fill(self, indices):\n        to_shift = indices < 0\n        indices = indices.copy()\n\n        n = len(self)\n\n        if (indices.max() >= n) or (indices.min() < -n):\n            if n == 0:\n                raise IndexError(\"cannot do a non-empty take from an empty axes.\")\n            else:\n                raise IndexError(\"out of bounds value in 'indices'.\")\n\n        if to_shift.any():\n            indices[to_shift] += n\n\n        if self.sp_index.npoints == 0:\n            # edge case in take...\n            # I think just return\n            out = np.full(\n                indices.shape,\n                self.fill_value,\n                dtype=np.result_type(type(self.fill_value)),\n            )\n            arr, sp_index, fill_value = make_sparse(out, fill_value=self.fill_value)\n            return type(self)(arr, sparse_index=sp_index, fill_value=fill_value)\n\n        sp_indexer = self.sp_index.lookup_array(indices)\n        taken = self.sp_values.take(sp_indexer)\n        fillable = sp_indexer < 0\n\n        if fillable.any():\n            # TODO: may need to coerce array to fill value\n            result_type = np.result_type(taken, type(self.fill_value))\n            taken = taken.astype(result_type)\n            taken[fillable] = self.fill_value\n\n        return taken",
        "begin_line": 891,
        "end_line": 927,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.copy#937",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.copy(self)",
        "snippet": "    def copy(self):\n        values = self.sp_values.copy()\n        return self._simple_new(values, self.sp_index, self.dtype)",
        "begin_line": 937,
        "end_line": 939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.astype#1013",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.astype(self, dtype=None, copy=True)",
        "snippet": "    def astype(self, dtype=None, copy=True):\n        \"\"\"\n        Change the dtype of a SparseArray.\n\n        The output will always be a SparseArray. To convert to a dense\n        ndarray with a certain dtype, use :meth:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : np.dtype or ExtensionDtype\n            For SparseDtype, this changes the dtype of\n            ``self.sp_values`` and the ``self.fill_value``.\n\n            For other dtypes, this only changes the dtype of\n            ``self.sp_values``.\n\n        copy : bool, default True\n            Whether to ensure a copy is made, even if not necessary.\n\n        Returns\n        -------\n        SparseArray\n\n        Examples\n        --------\n        >>> arr = SparseArray([0, 0, 1, 2])\n        >>> arr\n        [0, 0, 1, 2]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        >>> arr.astype(np.dtype('int32'))\n        [0, 0, 1, 2]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        Using a NumPy dtype with a different kind (e.g. float) will coerce\n        just ``self.sp_values``.\n\n        >>> arr.astype(np.dtype('float64'))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [0, 0, 1.0, 2.0]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        Use a SparseDtype if you wish to be change the fill value as well.\n\n        >>> arr.astype(SparseDtype(\"float64\", fill_value=np.nan))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [nan, nan, 1.0, 2.0]\n        Fill: nan\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n        \"\"\"\n        dtype = self.dtype.update_dtype(dtype)\n        subtype = dtype._subtype_with_str\n        sp_values = astype_nansafe(self.sp_values, subtype, copy=copy)\n        if sp_values is self.sp_values and copy:\n            sp_values = sp_values.copy()\n\n        return self._simple_new(sp_values, self.sp_index, dtype)",
        "begin_line": 1013,
        "end_line": 1076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.make_sparse#1526",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array.make_sparse(arr, kind='block', fill_value=None, dtype=None, copy=False)",
        "snippet": "def make_sparse(arr, kind=\"block\", fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)\n    \"\"\"\n\n    arr = com.values_from_object(arr)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value",
        "begin_line": 1526,
        "end_line": 1578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array._make_index#1581",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array._make_index(length, indices, kind)",
        "snippet": "def _make_index(length, indices, kind):\n\n    if kind == \"block\" or isinstance(kind, BlockIndex):\n        locs, lens = splib.get_blocks(indices)\n        index = BlockIndex(length, locs, lens)\n    elif kind == \"integer\" or isinstance(kind, IntIndex):\n        index = IntIndex(length, indices)\n    else:  # pragma: no cover\n        raise ValueError(\"must be block or integer type\")\n    return index",
        "begin_line": 1581,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#82",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 82,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005162622612287042,
            "pseudo_dstar_susp": 0.0013123359580052493,
            "pseudo_tarantula_susp": 0.0005878894767783657,
            "pseudo_op2_susp": 0.0013123359580052493,
            "pseudo_barinel_susp": 0.0005878894767783657
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__#138",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        \"\"\"\n        Return a string representation for a particular Object\n        \"\"\"\n        return self.name",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.979828296223913e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__repr__#144",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PandasExtensionDtype",
        "signature": "pandas.core.dtypes.dtypes.PandasExtensionDtype.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_type:\n        \"\"\"\n        Return a string representation for a particular object.\n        \"\"\"\n        return str(self)",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 1.0,
            "pseudo_dstar_susp": 0.0012300123001230013,
            "pseudo_tarantula_susp": 1.0,
            "pseudo_op2_susp": 0.0012300123001230013,
            "pseudo_barinel_susp": 1.0
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#224",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Union[Ordered, object]=ordered_sentinel)",
        "snippet": "    def __init__(\n        self, categories=None, ordered: Union[Ordered, object] = ordered_sentinel\n    ):\n        # TODO(GH26403): Set type of ordered to Ordered\n        ordered = cast(Ordered, ordered)\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 224,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.142506142506142e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype#240",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(cls, dtype: 'CategoricalDtype', categories=None, ordered: Ordered=None)",
        "snippet": "    def _from_categorical_dtype(\n        cls, dtype: \"CategoricalDtype\", categories=None, ordered: Ordered = None\n    ) -> \"CategoricalDtype\":\n        if categories is ordered is None:\n            return dtype\n        if categories is None:\n            categories = dtype.categories\n        if ordered is None:\n            ordered = dtype.ordered\n        return cls(categories, ordered)",
        "begin_line": 240,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#252",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> CategoricalDtype._from_values_or_dtype(categories=['a', 'b'],\n        ...                                        ordered=True)\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> CategoricalDtype._from_values_or_dtype(c, ['x', 'y'], ordered=True,\n        ...                                        dtype=dtype2)\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(['x', 'y'], ordered=False)\n        \"\"\"\n        from pandas.core.dtypes.common import is_categorical\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    msg = \"Unknown dtype {dtype!r}\"\n                    raise ValueError(msg.format(dtype=dtype))\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 252,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#342",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None and ordered is not ordered_sentinel:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered if ordered is not ordered_sentinel else None\n        self._ordered_from_sentinel = ordered is ordered_sentinel",
        "begin_line": 342,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.152331733727083e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__#362",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # _hash_categories returns a uint64, so use the negative\n        # space for when we have unknown categories to avoid a conflict\n        if self.categories is None:\n            if self._ordered:\n                return -1\n            else:\n                return -2\n        # We *do* want to include the real self.ordered here\n        return int(self._hash_categories(self.categories, self._ordered))",
        "begin_line": 362,
        "end_line": 371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.285443683520327e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#373",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"_ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self._ordered or other._ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self._ordered == other._ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 373,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__#418",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_type:\n        tpl = \"CategoricalDtype(categories={data}ordered={ordered})\"\n        if self.categories is None:\n            data = \"None, \"\n        else:\n            data = self.categories._format_data(name=type(self).__name__)\n        return tpl.format(data=data, ordered=self._ordered)",
        "begin_line": 418,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories#427",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories, ordered: Ordered=True)",
        "snippet": "    def _hash_categories(categories, ordered: Ordered = True) -> int:\n        from pandas.core.util.hashing import (\n            hash_array,\n            _combine_hash_arrays,\n            hash_tuples,\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):\n            # assumes if any individual category is a tuple, then all our. ATM\n            # I don't really want to support just some of the categories being\n            # tuples.\n            categories = list(categories)  # breaks if a np.array of categories\n            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == \"O\":\n                if len({type(x) for x in categories}) != 1:\n                    # TODO: hash_array doesn't handle mixed types. It casts\n                    # everything to a str first, which means we treat\n                    # {'1', '2'} the same as {'1', 2}\n                    # find a better solution\n                    hashed = hash((tuple(categories), ordered))\n                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(_NS_DTYPE)\n\n            cat_array = hash_array(np.asarray(categories), categorize=False)\n        if ordered:\n            cat_array = np.vstack(\n                [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n            )\n        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n        return np.bitwise_xor.reduce(hashed)",
        "begin_line": 427,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type#466",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas import Categorical\n\n        return Categorical",
        "begin_line": 466,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#479",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 479,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.152331733727083e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#498",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            msg = \"Parameter 'categories' must be list-like, was {!r}\"\n            raise TypeError(msg.format(categories))\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorial categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 498,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.308750236578134e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#533",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            msg = (\n                \"a CategoricalDtype must be passed to perform an update, \"\n                \"got {dtype!r}\"\n            ).format(dtype=dtype)\n            raise ValueError(msg)\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # dtype is CDT: keep current categories/ordered if None\n        new_categories = dtype.categories\n        if new_categories is None:\n            new_categories = self.categories\n\n        new_ordered = dtype._ordered\n        new_ordered_from_sentinel = dtype._ordered_from_sentinel\n        if new_ordered is None:\n            # maintain existing ordered if new dtype has ordered=None\n            new_ordered = self._ordered\n            if self._ordered and new_ordered_from_sentinel:\n                # only warn if we'd actually change the existing behavior\n                msg = (\n                    \"Constructing a CategoricalDtype without specifying \"\n                    \"`ordered` will default to `ordered=False` in a future \"\n                    \"version, which will cause the resulting categorical's \"\n                    \"`ordered` attribute to change to False; `ordered=True`\"\n                    \" must be explicitly passed in order to be retained\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=3)\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 533,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#585",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 585,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.152331733727083e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._is_boolean#609",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        from pandas.core.dtypes.common import is_bool_dtype\n\n        return is_bool_dtype(self.categories)",
        "begin_line": 609,
        "end_line": 612,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#663",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    \"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is deprecated. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 663,
        "end_line": 692,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013089005235602095,
            "pseudo_dstar_susp": 0.0007052186177715092,
            "pseudo_tarantula_susp": 0.0016339869281045752,
            "pseudo_op2_susp": 0.0007052186177715092,
            "pseudo_barinel_susp": 0.0016339869281045752
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#695",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self):\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 695,
        "end_line": 699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012919896640826874,
            "pseudo_dstar_susp": 0.0007002801120448179,
            "pseudo_tarantula_susp": 0.001607717041800643,
            "pseudo_op2_susp": 0.0007002801120448179,
            "pseudo_barinel_susp": 0.001607717041800643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#702",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 702,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012919896640826874,
            "pseudo_dstar_susp": 0.0007002801120448179,
            "pseudo_tarantula_susp": 0.001607717041800643,
            "pseudo_op2_susp": 0.0007002801120448179,
            "pseudo_barinel_susp": 0.001607717041800643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type#709",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import DatetimeArray\n\n        return DatetimeArray",
        "begin_line": 709,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#722",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if isinstance(string, str):\n            msg = \"Could not construct DatetimeTZDtype from '{string}'\"\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                try:\n                    return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n                except (KeyError, TypeError, ValueError) as err:\n                    # KeyError if maybe_get_tz tries and fails to get a\n                    #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                    # TypeError if we pass a nonsense tz;\n                    # ValueError if we pass a unit other than \"ns\"\n                    raise TypeError(msg.format(string=string)) from err\n            raise TypeError(msg.format(string=string))\n\n        raise TypeError(\"Could not construct DatetimeTZDtype\")",
        "begin_line": 722,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005984440454817474,
            "pseudo_dstar_susp": 0.0017793594306049821,
            "pseudo_tarantula_susp": 0.0005807200929152149,
            "pseudo_op2_susp": 0.0017793594306049821,
            "pseudo_barinel_susp": 0.0005807200929152149
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#755",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return \"datetime64[{unit}, {tz}]\".format(unit=self.unit, tz=self.tz)",
        "begin_line": 755,
        "end_line": 756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012919896640826874,
            "pseudo_dstar_susp": 0.0007002801120448179,
            "pseudo_tarantula_susp": 0.001607717041800643,
            "pseudo_op2_susp": 0.0007002801120448179,
            "pseudo_barinel_susp": 0.001607717041800643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#759",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 759,
        "end_line": 761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.737098344693281e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__#763",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        # TODO: update this.\n        return hash(str(self))",
        "begin_line": 763,
        "end_line": 766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#768",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 768,
        "end_line": 776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012919896640826874,
            "pseudo_dstar_susp": 0.0007002801120448179,
            "pseudo_tarantula_susp": 0.001607717041800643,
            "pseudo_op2_susp": 0.0007002801120448179,
            "pseudo_barinel_susp": 0.001607717041800643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#824",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 824,
        "end_line": 849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#852",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 852,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict#859",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict(cls, freq)",
        "snippet": "    def _parse_dtype_strict(cls, freq):\n        if isinstance(freq, str):\n            if freq.startswith(\"period[\") or freq.startswith(\"Period[\"):\n                m = cls._match.search(freq)\n                if m is not None:\n                    freq = m.group(\"freq\")\n            from pandas.tseries.frequencies import to_offset\n\n            freq = to_offset(freq)\n            if freq is not None:\n                return freq\n\n        raise ValueError(\"could not construct PeriodDtype\")",
        "begin_line": 859,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#874",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        raise TypeError(\"could not construct PeriodDtype\")",
        "begin_line": 874,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005780346820809249,
            "pseudo_dstar_susp": 0.0016891891891891893,
            "pseudo_tarantula_susp": 0.0005807200929152149,
            "pseudo_op2_susp": 0.0016891891891891893,
            "pseudo_barinel_susp": 0.0005807200929152149
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__str__#892",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        return self.name",
        "begin_line": 892,
        "end_line": 893,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.name#896",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.name(self)",
        "snippet": "    def name(self) -> str_type:\n        return \"period[{freq}]\".format(freq=self.freq.freqstr)",
        "begin_line": 896,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.na_value#900",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.na_value(self)",
        "snippet": "    def na_value(self):\n        return NaT",
        "begin_line": 900,
        "end_line": 901,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__#903",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # make myself hashable\n        return hash(str(self))",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__#907",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        if isinstance(other, str):\n            return other == self.name or other == self.name.title()\n\n        return isinstance(other, PeriodDtype) and self.freq == other.freq",
        "begin_line": 907,
        "end_line": 911,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#920",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 920,
        "end_line": 939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005128205128205128,
            "pseudo_dstar_susp": 0.0012903225806451613,
            "pseudo_tarantula_susp": 0.0004144218814753419,
            "pseudo_op2_susp": 0.0012903225806451613,
            "pseudo_barinel_susp": 0.0004144218814753419
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type#942",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        from pandas.core.arrays import PeriodArray\n\n        return PeriodArray",
        "begin_line": 942,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__new__#983",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls, subtype=None)",
        "snippet": "    def __new__(cls, subtype=None):\n        from pandas.core.dtypes.common import (\n            is_categorical_dtype,\n            is_string_dtype,\n            pandas_dtype,\n        )\n\n        if isinstance(subtype, IntervalDtype):\n            return subtype\n        elif subtype is None:\n            # we are called as an empty constructor\n            # generally for pickle compat\n            u = object.__new__(cls)\n            u._subtype = None\n            return u\n        elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n            subtype = None\n        else:\n            if isinstance(subtype, str):\n                m = cls._match.search(subtype)\n                if m is not None:\n                    subtype = m.group(\"subtype\")\n\n            try:\n                subtype = pandas_dtype(subtype)\n            except TypeError:\n                raise TypeError(\"could not construct IntervalDtype\")\n\n        if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalDtype\"\n            )\n            raise TypeError(msg)\n\n        try:\n            return cls._cache[str(subtype)]\n        except KeyError:\n            u = object.__new__(cls)\n            u._subtype = subtype\n            cls._cache[str(subtype)] = u\n            return u",
        "begin_line": 983,
        "end_line": 1025,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.subtype#1028",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        \"\"\"\n        The dtype of the Interval bounds.\n        \"\"\"\n        return self._subtype",
        "begin_line": 1028,
        "end_line": 1032,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.387706855791962e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type#1035",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import IntervalArray\n\n        return IntervalArray",
        "begin_line": 1035,
        "end_line": 1045,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1048",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            msg = \"a string needs to be passed, got type {typ}\"\n            raise TypeError(msg.format(typ=type(string)))\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1048,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005991611743559018,
            "pseudo_dstar_susp": 0.0017857142857142857,
            "pseudo_tarantula_susp": 0.0005844535359438924,
            "pseudo_op2_susp": 0.0017857142857142857,
            "pseudo_barinel_susp": 0.0005844535359438924
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.type#1068",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.type(self)",
        "snippet": "    def type(self):\n        return Interval",
        "begin_line": 1068,
        "end_line": 1069,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.28775070445881e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__str__#1071",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        if self.subtype is None:\n            return \"interval\"\n        return \"interval[{subtype}]\".format(subtype=self.subtype)",
        "begin_line": 1071,
        "end_line": 1074,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__#1080",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        if isinstance(other, str):\n            return other.lower() in (self.name.lower(), str(self).lower())\n        elif not isinstance(other, IntervalDtype):\n            return False\n        elif self.subtype is None or other.subtype is None:\n            # None should match any subtype\n            return True\n        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n\n            return is_dtype_equal(self.subtype, other.subtype)",
        "begin_line": 1080,
        "end_line": 1091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1100",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1100,
        "end_line": 1117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005219206680584551,
            "pseudo_dstar_susp": 0.001349527665317139,
            "pseudo_tarantula_susp": 0.00042069835927639884,
            "pseudo_op2_susp": 0.001349527665317139,
            "pseudo_barinel_susp": 0.00042069835927639884
        }
    },
    {
        "name": "pandas.core.arrays.base.try_cast_to_ea#35",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base",
        "signature": "pandas.core.arrays.base.try_cast_to_ea(cls_or_instance, obj, dtype=None)",
        "snippet": "def try_cast_to_ea(cls_or_instance, obj, dtype=None):\n    \"\"\"\n    Call to `_from_sequence` that returns the object unchanged on Exception.\n\n    Parameters\n    ----------\n    cls_or_instance : ExtensionArray subclass or instance\n    obj : arraylike\n        Values to pass to cls._from_sequence\n    dtype : ExtensionDtype, optional\n\n    Returns\n    -------\n    ExtensionArray or obj\n    \"\"\"\n    try:\n        result = cls_or_instance._from_sequence(obj, dtype=dtype)\n    except Exception:\n        # We can't predict what downstream EA constructors may raise\n        result = obj\n    return result",
        "begin_line": 35,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.__iter__#347",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Iterate over elements of the array.\n        \"\"\"\n        # This needs to be implemented so that pandas recognizes extension\n        # arrays as list-like. The default implementation makes successive\n        # calls to ``__getitem__``, which may be slower than necessary.\n        for i in range(len(self)):\n            yield self[i]",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#369",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 369,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.601967386281111e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.ndim#376",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Extension Arrays are only allowed to be 1-dimensional.\n        \"\"\"\n        return 1",
        "begin_line": 376,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009057971014492754,
            "pseudo_dstar_susp": 0.0005773672055427252,
            "pseudo_tarantula_susp": 0.000925925925925926,
            "pseudo_op2_susp": 0.0005773672055427252,
            "pseudo_barinel_susp": 0.000925925925925926
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_argsort#437",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self) -> np.ndarray:\n        \"\"\"\n        Return values for sorting.\n\n        Returns\n        -------\n        ndarray\n            The transformed values should maintain the ordering between values\n            within the array.\n\n        See Also\n        --------\n        ExtensionArray.argsort\n        \"\"\"\n        # Note: this is used in `ExtensionArray.argsort`.\n        return np.array(self)",
        "begin_line": 437,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.argsort#454",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.argsort(self, ascending=True, kind='quicksort', *args, **kwargs)",
        "snippet": "    def argsort(self, ascending=True, kind=\"quicksort\", *args, **kwargs):\n        \"\"\"\n        Return the indices that would sort this array.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending\n            or descending sort.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        *args, **kwargs:\n            passed through to :func:`numpy.argsort`.\n\n        Returns\n        -------\n        index_array : ndarray\n            Array of indices that sort ``self``. If NaN values are contained,\n            NaN values are placed at the end.\n\n        See Also\n        --------\n        numpy.argsort : Sorting implementation used internally.\n        \"\"\"\n        # Implementor note: You have two places to override the behavior of\n        # argsort.\n        # 1. _values_for_argsort : construct the values passed to np.argsort\n        # 2. argsort : total control over sorting.\n        ascending = nv.validate_argsort_with_ascending(ascending, args, kwargs)\n\n        result = nargsort(self, kind=kind, ascending=ascending, na_position=\"last\")\n        return result",
        "begin_line": 454,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.094544277157196e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._values_for_factorize#662",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self) -> Tuple[np.ndarray, Any]:\n        \"\"\"\n        Return an array and missing value suitable for factorization.\n\n        Returns\n        -------\n        values : ndarray\n\n            An array suitable for factorization. This should maintain order\n            and be a supported dtype (Float64, Int64, UInt64, String, Object).\n            By default, the extension array is cast to object dtype.\n        na_value : object\n            The value in `values` to consider missing. This will be treated\n            as NA in the factorization routines, so it will be coded as\n            `na_sentinal` and not included in `uniques`. By default,\n            ``np.nan`` is used.\n\n        Notes\n        -----\n        The values returned by this method are also used in\n        :func:`pandas.util.hash_pandas_object`.\n        \"\"\"\n        return self.astype(object), np.nan",
        "begin_line": 662,
        "end_line": 684,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.304268393954493e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.factorize#686",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.factorize(self, na_sentinel: int=-1)",
        "snippet": "    def factorize(self, na_sentinel: int = -1) -> Tuple[np.ndarray, ABCExtensionArray]:\n        \"\"\"\n        Encode the extension array as an enumerated type.\n\n        Parameters\n        ----------\n        na_sentinel : int, default -1\n            Value to use in the `codes` array to indicate missing values.\n\n        Returns\n        -------\n        codes : ndarray\n            An integer NumPy array that's an indexer into the original\n            ExtensionArray.\n        uniques : ExtensionArray\n            An ExtensionArray containing the unique values of `self`.\n\n            .. note::\n\n               uniques will *not* contain an entry for the NA value of\n               the ExtensionArray if there are any missing values present\n               in `self`.\n\n        See Also\n        --------\n        factorize : Top-level factorize method that dispatches here.\n\n        Notes\n        -----\n        :meth:`pandas.factorize` offers a `sort` keyword as well.\n        \"\"\"\n        # Implementer note: There are two ways to override the behavior of\n        # pandas.factorize\n        # 1. _values_for_factorize and _from_factorize.\n        #    Specify the values passed to pandas' internal factorization\n        #    routines, and how to convert from those values back to the\n        #    original ExtensionArray.\n        # 2. ExtensionArray.factorize.\n        #    Complete control over factorization.\n        arr, na_value = self._values_for_factorize()\n\n        codes, uniques = _factorize_array(\n            arr, na_sentinel=na_sentinel, na_value=na_value\n        )\n\n        uniques = self._from_factorized(uniques, self)\n        return codes, uniques",
        "begin_line": 686,
        "end_line": 732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.method#56",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.method(self, *args, **kwargs)",
        "snippet": "    def method(self, *args, **kwargs):\n        return array_method(self._data, *args, **kwargs)",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq#100",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._data.freq",
        "begin_line": 100,
        "end_line": 104,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.142346975216056e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freqstr#107",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if it is set, otherwise None.\n        \"\"\"\n        return self._data.freqstr",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.unique#113",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.unique(self, level=None)",
        "snippet": "    def unique(self, level=None):\n        if level is not None:\n            self._validate_index_level(level)\n\n        result = self._data.unique()\n\n        # Note: if `self` is already unique, then self.unique() should share\n        #  a `freq` with self.  If not already unique, then self.freq must be\n        #  None, so again sharing freq is correct.\n        return self._shallow_copy(result._data)",
        "begin_line": 113,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper#130",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper(self, other)",
        "snippet": "        def wrapper(self, other):\n            if isinstance(other, ABCSeries):\n                # the arrays defer to Series for comparison ops but the indexes\n                #  don't, so we have to unwrap here.\n                other = other._values\n\n            result = op(self._data, maybe_unwrap_index(other))\n            return result",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.900990099009902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values#144",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        return self._data._ndarray_values",
        "begin_line": 144,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.259001161440186e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#151",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 151,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014814814814814814,
            "pseudo_dstar_susp": 0.0007246376811594203,
            "pseudo_tarantula_susp": 0.0017421602787456446,
            "pseudo_op2_susp": 0.0007246376811594203,
            "pseudo_barinel_susp": 0.0017421602787456446
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8#157",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8(self)",
        "snippet": "    def asi8(self):\n        return self._data.asi8",
        "begin_line": 157,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.15307582260372e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#176",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        elif is_period_dtype(self):\n            if not is_period_dtype(other):\n                return False\n            if self.freq != other.freq:\n                return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 176,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._join_i8_wrapper#208",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._join_i8_wrapper(joinf, dtype, with_indexers=True)",
        "snippet": "    def _join_i8_wrapper(joinf, dtype, with_indexers=True):\n        \"\"\"\n        Create the join wrapper methods.\n        \"\"\"\n        from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin\n\n        @staticmethod\n        def wrapper(left, right):\n            if isinstance(\n                left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)\n            ):\n                left = left.view(\"i8\")\n            if isinstance(\n                right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)\n            ):\n                right = right.view(\"i8\")\n            results = joinf(left, right)\n            if with_indexers:\n                join_index, left_indexer, right_indexer = results\n                join_index = join_index.view(dtype)\n                return join_index, left_indexer, right_indexer\n            return results\n\n        return wrapper",
        "begin_line": 208,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper#215",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.wrapper(left, right)",
        "snippet": "        def wrapper(left, right):\n            if isinstance(\n                left, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)\n            ):\n                left = left.view(\"i8\")\n            if isinstance(\n                right, (np.ndarray, ABCIndex, ABCSeries, DatetimeLikeArrayMixin)\n            ):\n                right = right.view(\"i8\")\n            results = joinf(left, right)\n            if with_indexers:\n                join_index, left_indexer, right_indexer = results\n                join_index = join_index.view(dtype)\n                return join_index, left_indexer, right_indexer\n            return results",
        "begin_line": 215,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ensure_localized#233",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ensure_localized(self, arg, ambiguous='raise', nonexistent='raise', from_utc=False)",
        "snippet": "    def _ensure_localized(\n        self, arg, ambiguous=\"raise\", nonexistent=\"raise\", from_utc=False\n    ):\n        # See DatetimeLikeArrayMixin._ensure_localized.__doc__\n        if getattr(self, \"tz\", None):\n            # ensure_localized is only relevant for tz-aware DTI\n            result = self._data._ensure_localized(\n                arg, ambiguous=ambiguous, nonexistent=nonexistent, from_utc=from_utc\n            )\n            return type(self)._simple_new(result, name=self.name)\n        return arg",
        "begin_line": 233,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__#249",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__(self, key)",
        "snippet": "    def __contains__(self, key):\n        try:\n            res = self.get_loc(key)\n            return (\n                is_scalar(res)\n                or isinstance(res, slice)\n                or (is_list_like(res) and len(res))\n            )\n        except (KeyError, TypeError, ValueError):\n            return False",
        "begin_line": 249,
        "end_line": 258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.map#262",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        try:\n            result = mapper(self)\n\n            # Try to use this result if we can\n            if isinstance(result, np.ndarray):\n                result = Index(result)\n\n            if not isinstance(result, Index):\n                raise TypeError(\"The map function must return an Index object\")\n            return result\n        except Exception:\n            return self.astype(object).map(mapper)",
        "begin_line": 262,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#307",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        taken = self._assert_take_fillable(\n            self.asi8,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=iNaT,\n        )\n\n        # keep freq in PeriodArray/Index, reset otherwise\n        freq = self.freq if is_period_dtype(self) else None\n        return self._shallow_copy(taken, freq=freq)",
        "begin_line": 307,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist#339",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the underlying data.\n        \"\"\"\n        return list(self.astype(object))",
        "begin_line": 339,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min#345",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Index or minimum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.min\n        Series.min : Return the minimum value in a Series.\n        \"\"\"\n        nv.validate_min(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[0] != iNaT:\n                    return self._box_func(i8[0])\n\n            if self.hasnans:\n                if skipna:\n                    min_stamp = self[~self._isnan].asi8.min()\n                else:\n                    return self._na_value\n            else:\n                min_stamp = i8.min()\n            return self._box_func(min_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 345,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max#402",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[-1] != iNaT:\n                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()\n                else:\n                    return self._na_value\n            else:\n                max_stamp = i8.max()\n            return self._box_func(max_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 402,
        "end_line": 434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer#484",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        \"\"\"\n        We don't allow integer or float indexing on datetime-like when using\n        loc.\n\n        Parameters\n        ----------\n        key : label of the slice bound\n        kind : {'ix', 'loc', 'getitem', 'iloc'} or None\n        \"\"\"\n\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # we don't allow integer/float indexing for loc\n        # we don't allow float indexing for ix/getitem\n        if is_scalar(key):\n            is_int = is_integer(key)\n            is_flt = is_float(key)\n            if kind in [\"loc\"] and (is_int or is_flt):\n                self._invalid_indexer(\"index\", key)\n            elif kind in [\"ix\", \"getitem\"] and is_flt:\n                self._invalid_indexer(\"index\", key)\n\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 484,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__add__#516",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__add__(self, other)",
        "snippet": "        def __add__(self, other):\n            # dispatch to ExtensionArray implementation\n            result = self._data.__add__(maybe_unwrap_index(other))\n            return wrap_arithmetic_op(self, other, result)",
        "begin_line": 516,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__sub__#529",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__sub__(self, other)",
        "snippet": "        def __sub__(self, other):\n            # dispatch to ExtensionArray implementation\n            result = self._data.__sub__(maybe_unwrap_index(other))\n            return wrap_arithmetic_op(self, other, result)",
        "begin_line": 529,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.where#649",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.where(self, cond, other=None)",
        "snippet": "    def where(self, cond, other=None):\n        other = _ensure_datetimelike_to_i8(other, to_utc=True)\n        values = _ensure_datetimelike_to_i8(self, to_utc=True)\n        result = np.where(cond, values, other).astype(\"i8\")\n\n        result = self._ensure_localized(result, from_utc=True)\n        return self._shallow_copy(result)",
        "begin_line": 649,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._concat_same_dtype#686",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class.\n        \"\"\"\n        attribs = self._get_attributes_dict()\n        attribs[\"name\"] = name\n        # do not pass tz to set because tzlocal cannot be hashed\n        if len({str(x.dtype) for x in to_concat}) != 1:\n            raise ValueError(\"to_concat must have the same tz\")\n\n        new_data = type(self._values)._concat_same_type(to_concat).asi8\n\n        # GH 3232: If the concat result is evenly spaced, we can retain the\n        # original frequency\n        is_diff_evenly_spaced = len(unique_deltas(new_data)) == 1\n        if not is_period_dtype(self) and not is_diff_evenly_spaced:\n            # reset freq\n            attribs[\"freq\"] = None\n\n        return self._simple_new(new_data, **attribs)",
        "begin_line": 686,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype#708",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype) and copy is False:\n            # Ensure that self.astype(self.dtype) is self\n            return self\n\n        new_values = self._data.astype(dtype, copy=copy)\n\n        # pass copy=False because any copying will be done in the\n        #  _data.astype call above\n        return Index(new_values, dtype=new_values.dtype, name=self.name, copy=False)",
        "begin_line": 708,
        "end_line": 717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.wrap_arithmetic_op#753",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.wrap_arithmetic_op(self, other, result)",
        "snippet": "def wrap_arithmetic_op(self, other, result):\n    if result is NotImplemented:\n        return NotImplemented\n\n    if isinstance(result, tuple):\n        # divmod, rdivmod\n        assert len(result) == 2\n        return (\n            wrap_arithmetic_op(self, other, result[0]),\n            wrap_arithmetic_op(self, other, result[1]),\n        )\n\n    if not isinstance(result, Index):\n        # Index.__new__ will choose appropriate subclass for dtype\n        result = Index(result)\n\n    res_name = ops.get_op_result_name(self, other)\n    result.name = res_name\n    return result",
        "begin_line": 753,
        "end_line": 771,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.maybe_unwrap_index#774",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.maybe_unwrap_index(obj)",
        "snippet": "def maybe_unwrap_index(obj):\n    \"\"\"\n    If operating against another Index object, we need to unwrap the underlying\n    data before deferring to the DatetimeArray/TimedeltaArray/PeriodArray\n    implementation, otherwise we will incorrectly return NotImplemented.\n\n    Parameters\n    ----------\n    obj : object\n\n    Returns\n    -------\n    unwrapped object\n    \"\"\"\n    if isinstance(obj, ABCIndexClass):\n        return obj._data\n    return obj",
        "begin_line": 774,
        "end_line": 790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get#823",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_property_get(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_property_get(self, name, *args, **kwargs):\n        result = getattr(self._data, name)\n        if name not in self._raw_properties:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 823,
        "end_line": 827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method#832",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 832,
        "end_line": 836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot.pivot_table#27",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
        "snippet": "def pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n):\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table.fillna(value=fill_value, downcast=\"infer\")\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table",
        "begin_line": 27,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._add_margins#187",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None)",
        "snippet": "def _add_margins(\n    table: Union[\"Series\", \"DataFrame\"],\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed=None,\n    margins_name: str = \"All\",\n    fill_value=None,\n):\n    if not isinstance(margins_name, str):\n        raise ValueError(\"margins_name argument must be a string\")\n\n    msg = 'Conflicting name \"{name}\" in margins'.format(name=margins_name)\n    for level in table.index.names:\n        if margins_name in table.index.get_level_values(level):\n            raise ValueError(msg)\n\n    grand_margin = _compute_grand_margin(data, values, aggfunc, margins_name)\n\n    if table.ndim == 2:\n        # i.e. DataFramae\n        for level in table.columns.names[1:]:\n            if margins_name in table.columns.get_level_values(level):\n                raise ValueError(msg)\n\n    key: Union[str, Tuple[str, ...]]\n    if len(rows) > 1:\n        key = (margins_name,) + (\"\",) * (len(rows) - 1)\n    else:\n        key = margins_name\n\n    if not values and isinstance(table, ABCSeries):\n        # If there are no values and the table is a series, then there is only\n        # one column in the data. Compute grand margin and return it.\n        return table.append(Series({key: grand_margin[margins_name]}))\n\n    elif values:\n        marginal_result_set = _generate_marginal_results(\n            table,\n            data,\n            values,\n            rows,\n            cols,\n            aggfunc,\n            observed,\n            grand_margin,\n            margins_name,\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n    else:\n        # no values, and table is a DataFrame\n        assert isinstance(table, ABCDataFrame)\n        marginal_result_set = _generate_marginal_results_without_values(\n            table, data, rows, cols, aggfunc, observed, margins_name\n        )\n        if not isinstance(marginal_result_set, tuple):\n            return marginal_result_set\n        result, margin_keys, row_margin = marginal_result_set\n\n    row_margin = row_margin.reindex(result.columns, fill_value=fill_value)\n    # populate grand margin\n    for k in margin_keys:\n        if isinstance(k, str):\n            row_margin[k] = grand_margin[k]\n        else:\n            row_margin[k] = grand_margin[k[0]]\n\n    from pandas import DataFrame\n\n    margin_dummy = DataFrame(row_margin, columns=[key]).T\n\n    row_names = result.index.names\n    try:\n        # check the result column and leave floats\n        for dtype in set(result.dtypes):\n            cols = result.select_dtypes([dtype]).columns\n            margin_dummy[cols] = margin_dummy[cols].apply(\n                maybe_downcast_to_dtype, args=(dtype,)\n            )\n        result = result.append(margin_dummy)\n    except TypeError:\n\n        # we cannot reshape, so coerce the axis\n        result.index = result.index._to_safe_for_reshape()\n        result = result.append(margin_dummy)\n    result.index.names = row_names\n\n    return result",
        "begin_line": 187,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._compute_grand_margin#281",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._compute_grand_margin(data, values, aggfunc, margins_name: str='All')",
        "snippet": "def _compute_grand_margin(data, values, aggfunc, margins_name: str = \"All\"):\n\n    if values:\n        grand_margin = {}\n        for k, v in data[values].items():\n            try:\n                if isinstance(aggfunc, str):\n                    grand_margin[k] = getattr(v, aggfunc)()\n                elif isinstance(aggfunc, dict):\n                    if isinstance(aggfunc[k], str):\n                        grand_margin[k] = getattr(v, aggfunc[k])()\n                    else:\n                        grand_margin[k] = aggfunc[k](v)\n                else:\n                    grand_margin[k] = aggfunc(v)\n            except TypeError:\n                pass\n        return grand_margin\n    else:\n        return {margins_name: aggfunc(data.index)}",
        "begin_line": 281,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._generate_marginal_results#303",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name: str='All')",
        "snippet": "def _generate_marginal_results(\n    table,\n    data,\n    values,\n    rows,\n    cols,\n    aggfunc,\n    observed,\n    grand_margin,\n    margins_name: str = \"All\",\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        table_pieces = []\n        margin_keys = []\n\n        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows + values].groupby(rows, observed=observed).agg(aggfunc)\n            cat_axis = 1\n\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n\n                # we are going to mutate this, so need to copy!\n                piece = piece.copy()\n                try:\n                    piece[all_key] = margin[key]\n                except TypeError:\n\n                    # we cannot reshape, so coerce the axis\n                    piece.set_axis(\n                        piece._get_axis(cat_axis)._to_safe_for_reshape(),\n                        axis=cat_axis,\n                        inplace=True,\n                    )\n                    piece[all_key] = margin[key]\n\n                table_pieces.append(piece)\n                margin_keys.append(all_key)\n        else:\n            margin = grand_margin\n            cat_axis = 0\n            for key, piece in table.groupby(level=0, axis=cat_axis, observed=observed):\n                all_key = _all_key(key)\n                table_pieces.append(piece)\n                table_pieces.append(Series(margin[key], index=[all_key]))\n                margin_keys.append(all_key)\n\n        result = concat(table_pieces, axis=cat_axis)\n\n        if len(rows) == 0:\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols) > 0:\n        row_margin = data[cols + values].groupby(cols, observed=observed).agg(aggfunc)\n        row_margin = row_margin.stack()\n\n        # slight hack\n        new_order = [len(cols)] + list(range(len(cols)))\n        row_margin.index = row_margin.index.reorder_levels(new_order)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
        "begin_line": 303,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._all_key#319",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._all_key(key)",
        "snippet": "        def _all_key(key):\n            return (key, margins_name) + (\"\",) * (len(cols) - 1)",
        "begin_line": 319,
        "end_line": 320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._generate_marginal_results_without_values#375",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._generate_marginal_results_without_values(table: 'DataFrame', data, rows, cols, aggfunc, observed, margins_name: str='All')",
        "snippet": "def _generate_marginal_results_without_values(\n    table: \"DataFrame\", data, rows, cols, aggfunc, observed, margins_name: str = \"All\"\n):\n    if len(cols) > 0:\n        # need to \"interleave\" the margins\n        margin_keys = []\n\n        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)\n\n        if len(rows) > 0:\n            margin = data[rows].groupby(rows, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n\n        else:\n            margin = data.groupby(level=0, axis=0, observed=observed).apply(aggfunc)\n            all_key = _all_key()\n            table[all_key] = margin\n            result = table\n            margin_keys.append(all_key)\n            return result\n    else:\n        result = table\n        margin_keys = table.columns\n\n    if len(cols):\n        row_margin = data[cols].groupby(cols, observed=observed).apply(aggfunc)\n    else:\n        row_margin = Series(np.nan, index=result.columns)\n\n    return result, margin_keys, row_margin",
        "begin_line": 375,
        "end_line": 410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._all_key#382",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._all_key()",
        "snippet": "        def _all_key():\n            if len(cols) == 1:\n                return margins_name\n            return (margins_name,) + (\"\",) * (len(cols) - 1)",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._convert_by#413",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._convert_by(by)",
        "snippet": "def _convert_by(by):\n    if by is None:\n        by = []\n    elif (\n        is_scalar(by)\n        or isinstance(by, (np.ndarray, Index, ABCSeries, Grouper))\n        or hasattr(by, \"__call__\")\n    ):\n        by = [by]\n    else:\n        by = list(by)\n    return by",
        "begin_line": 413,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.155832265152902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot.pivot#429",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot.pivot(data: 'DataFrame', index=None, columns=None, values=None)",
        "snippet": "def pivot(data: \"DataFrame\", index=None, columns=None, values=None):\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = MultiIndex.from_arrays([index, data[columns]])\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(\n                data[values].values, index=index, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)\n    return indexed.unstack(columns)",
        "begin_line": 429,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot.crosstab#451",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot.crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str='All', dropna: bool=True, normalize=False)",
        "snippet": "def crosstab(\n    index,\n    columns,\n    values=None,\n    rownames=None,\n    colnames=None,\n    aggfunc=None,\n    margins=False,\n    margins_name: str = \"All\",\n    dropna: bool = True,\n    normalize=False,\n):\n    \"\"\"\n    Compute a simple cross tabulation of two (or more) factors. By default\n    computes a frequency table of the factors unless an array of values and an\n    aggregation function are passed.\n\n    Parameters\n    ----------\n    index : array-like, Series, or list of arrays/Series\n        Values to group by in the rows.\n    columns : array-like, Series, or list of arrays/Series\n        Values to group by in the columns.\n    values : array-like, optional\n        Array of values to aggregate according to the factors.\n        Requires `aggfunc` be specified.\n    rownames : sequence, default None\n        If passed, must match number of row arrays passed.\n    colnames : sequence, default None\n        If passed, must match number of column arrays passed.\n    aggfunc : function, optional\n        If specified, requires `values` be specified as well.\n    margins : bool, default False\n        Add row/column margins (subtotals).\n    margins_name : str, default 'All'\n        Name of the row/column that will contain the totals\n        when margins is True.\n\n        .. versionadded:: 0.21.0\n\n    dropna : bool, default True\n        Do not include columns whose entries are all NaN.\n    normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False\n        Normalize by dividing all values by the sum of values.\n\n        - If passed 'all' or `True`, will normalize over all values.\n        - If passed 'index' will normalize over each row.\n        - If passed 'columns' will normalize over each column.\n        - If margins is `True`, will also normalize margin values.\n\n    Returns\n    -------\n    DataFrame\n        Cross tabulation of the data.\n\n    See Also\n    --------\n    DataFrame.pivot : Reshape data based on column values.\n    pivot_table : Create a pivot table as a DataFrame.\n\n    Notes\n    -----\n    Any Series passed will have their name attributes used unless row or column\n    names for the cross-tabulation are specified.\n\n    Any input passed containing Categorical data will have **all** of its\n    categories included in the cross-tabulation, even if the actual data does\n    not contain any instances of a particular category.\n\n    In the event that there aren't overlapping indexes an empty DataFrame will\n    be returned.\n\n    Examples\n    --------\n    >>> a = np.array([\"foo\", \"foo\", \"foo\", \"foo\", \"bar\", \"bar\",\n    ...               \"bar\", \"bar\", \"foo\", \"foo\", \"foo\"], dtype=object)\n    >>> b = np.array([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\",\n    ...               \"one\", \"two\", \"two\", \"two\", \"one\"], dtype=object)\n    >>> c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\",\n    ...               \"shiny\", \"dull\", \"shiny\", \"shiny\", \"shiny\"],\n    ...              dtype=object)\n    >>> pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])\n    b   one        two\n    c   dull shiny dull shiny\n    a\n    bar    1     2    1     0\n    foo    2     2    1     2\n\n    Here 'c' and 'f' are not represented in the data and will not be\n    shown in the output because dropna is True by default. Set\n    dropna=False to preserve categories with no data.\n\n    >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])\n    >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])\n    >>> pd.crosstab(foo, bar)\n    col_0  d  e\n    row_0\n    a      1  0\n    b      0  1\n    >>> pd.crosstab(foo, bar, dropna=False)\n    col_0  d  e  f\n    row_0\n    a      1  0  0\n    b      0  1  0\n    c      0  0  0\n    \"\"\"\n\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n\n    rownames = _get_names(index, rownames, prefix=\"row\")\n    colnames = _get_names(columns, colnames, prefix=\"col\")\n\n    common_idx = None\n    pass_objs = [x for x in index + columns if isinstance(x, (ABCSeries, ABCDataFrame))]\n    if pass_objs:\n        common_idx = get_objs_combined_axis(pass_objs, intersect=True, sort=False)\n\n    data: Dict = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n\n    if values is None and aggfunc is not None:\n        raise ValueError(\"aggfunc cannot be used without values.\")\n\n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n\n    from pandas import DataFrame\n\n    df = DataFrame(data, index=common_idx)\n    if values is None:\n        df[\"__dummy__\"] = 0\n        kwargs = {\"aggfunc\": len, \"fill_value\": 0}\n    else:\n        df[\"__dummy__\"] = values\n        kwargs = {\"aggfunc\": aggfunc}\n\n    table = df.pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        margins=margins,\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs,\n    )\n\n    # Post-process\n    if normalize is not False:\n        table = _normalize(\n            table, normalize=normalize, margins=margins, margins_name=margins_name\n        )\n\n    return table",
        "begin_line": 451,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._normalize#608",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._normalize(table, normalize, margins: bool, margins_name='All')",
        "snippet": "def _normalize(table, normalize, margins: bool, margins_name=\"All\"):\n\n    if not isinstance(normalize, (bool, str)):\n        axis_subs = {0: \"index\", 1: \"columns\"}\n        try:\n            normalize = axis_subs[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    if margins is False:\n\n        # Actual Normalizations\n        normalizers: Dict[Union[bool, str], Callable] = {\n            \"all\": lambda x: x / x.sum(axis=1).sum(axis=0),\n            \"columns\": lambda x: x / x.sum(),\n            \"index\": lambda x: x.div(x.sum(axis=1), axis=0),\n        }\n\n        normalizers[True] = normalizers[\"all\"]\n\n        try:\n            f = normalizers[normalize]\n        except KeyError:\n            raise ValueError(\"Not a valid normalize argument\")\n\n        table = f(table)\n        table = table.fillna(0)\n\n    elif margins is True:\n        # keep index and column of pivoted table\n        table_index = table.index\n        table_columns = table.columns\n\n        # check if margin name is in (for MI cases) or equal to last\n        # index/column and save the column and index margin\n        if (margins_name not in table.iloc[-1, :].name) | (\n            margins_name != table.iloc[:, -1].name\n        ):\n            raise ValueError(\n                \"{mname} not in pivoted DataFrame\".format(mname=margins_name)\n            )\n        column_margin = table.iloc[:-1, -1]\n        index_margin = table.iloc[-1, :-1]\n\n        # keep the core table\n        table = table.iloc[:-1, :-1]\n\n        # Normalize core\n        table = _normalize(table, normalize=normalize, margins=False)\n\n        # Fix Margins\n        if normalize == \"columns\":\n            column_margin = column_margin / column_margin.sum()\n            table = concat([table, column_margin], axis=1)\n            table = table.fillna(0)\n            table.columns = table_columns\n\n        elif normalize == \"index\":\n            index_margin = index_margin / index_margin.sum()\n            table = table.append(index_margin)\n            table = table.fillna(0)\n            table.index = table_index\n\n        elif normalize == \"all\" or normalize is True:\n            column_margin = column_margin / column_margin.sum()\n            index_margin = index_margin / index_margin.sum()\n            index_margin.loc[margins_name] = 1\n            table = concat([table, column_margin], axis=1)\n            table = table.append(index_margin)\n\n            table = table.fillna(0)\n            table.index = table_index\n            table.columns = table_columns\n\n        else:\n            raise ValueError(\"Not a valid normalize argument\")\n\n    else:\n        raise ValueError(\"Not a valid margins argument\")\n\n    return table",
        "begin_line": 608,
        "end_line": 688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.pivot._get_names#691",
        "src_path": "pandas/core/reshape/pivot.py",
        "class_name": "pandas.core.reshape.pivot",
        "signature": "pandas.core.reshape.pivot._get_names(arrs, names, prefix: str='row')",
        "snippet": "def _get_names(arrs, names, prefix: str = \"row\"):\n    if names is None:\n        names = []\n        for i, arr in enumerate(arrs):\n            if isinstance(arr, ABCSeries) and arr.name is not None:\n                names.append(arr.name)\n            else:\n                names.append(\"{prefix}_{i}\".format(prefix=prefix, i=i))\n    else:\n        if len(names) != len(arrs):\n            raise AssertionError(\"arrays and names must have the same length\")\n        if not isinstance(names, list):\n            names = list(names)\n\n    return names",
        "begin_line": 691,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine_type#151",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine_type(self)",
        "snippet": "    def _engine_type(self):\n        # self.codes can have dtype int8, int16, int32 or int64, so we need\n        # to return the corresponding engine type (libindex.Int8Engine, etc.).\n        return {\n            np.int8: libindex.Int8Engine,\n            np.int16: libindex.Int16Engine,\n            np.int32: libindex.Int32Engine,\n            np.int64: libindex.Int64Engine,\n        }[self.codes.dtype.type]",
        "begin_line": 151,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__new__#166",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        categories=None,\n        ordered=None,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if not is_categorical_dtype(data):\n            # don't allow scalars\n            # if data is None, then categories must be provided\n            if is_scalar(data):\n                if data is not None or categories is None:\n                    raise cls._scalar_data_error(data)\n                data = []\n\n        data = cls._create_categorical(data, dtype=dtype)\n\n        data = data.copy() if copy else data\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 166,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._create_from_codes#195",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._create_from_codes(self, codes, dtype=None, name=None)",
        "snippet": "    def _create_from_codes(self, codes, dtype=None, name=None):\n        \"\"\"\n        *this is an internal non-public method*\n\n        create the correct categorical from codes\n\n        Parameters\n        ----------\n        codes : new codes\n        dtype: CategoricalDtype, defaults to existing\n        name : optional name attribute, defaults to existing\n\n        Returns\n        -------\n        CategoricalIndex\n        \"\"\"\n\n        if dtype is None:\n            dtype = self.dtype\n        if name is None:\n            name = self.name\n        cat = Categorical.from_codes(codes, dtype=dtype)\n        return CategoricalIndex(cat, name=name)",
        "begin_line": 195,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.444519506840061e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._create_categorical#220",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._create_categorical(cls, data, dtype=None)",
        "snippet": "    def _create_categorical(cls, data, dtype=None):\n        \"\"\"\n        *this is an internal non-public method*\n\n        create the correct categorical from data and the properties\n\n        Parameters\n        ----------\n        data : data for new Categorical\n        dtype : CategoricalDtype, defaults to existing\n\n        Returns\n        -------\n        Categorical\n        \"\"\"\n        if isinstance(data, (cls, ABCSeries)) and is_categorical_dtype(data):\n            data = data.values\n\n        if not isinstance(data, ABCCategorical):\n            return Categorical(data, dtype=dtype)\n\n        if isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n            # we want to silently ignore dtype='category'\n            data = data._set_dtype(dtype)\n        return data",
        "begin_line": 220,
        "end_line": 244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._simple_new#247",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        result = object.__new__(cls)\n\n        values = cls._create_categorical(values, dtype=dtype)\n        result._data = values\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n\n        result._reset_identity()\n        return result",
        "begin_line": 247,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._shallow_copy#262",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._shallow_copy(self, values=None, dtype=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, dtype=None, **kwargs):\n        if dtype is None:\n            dtype = self.dtype\n        return super()._shallow_copy(values=values, dtype=dtype, **kwargs)",
        "begin_line": 262,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.409721638213776e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._is_dtype_compat#267",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._is_dtype_compat(self, other)",
        "snippet": "    def _is_dtype_compat(self, other) -> bool:\n        \"\"\"\n        *this is an internal non-public method*\n\n        provide a comparison between the dtype of self and other (coercing if\n        needed)\n\n        Raises\n        ------\n        TypeError if the dtypes are not compatible\n        \"\"\"\n        if is_categorical_dtype(other):\n            if isinstance(other, CategoricalIndex):\n                other = other._values\n            if not other.is_dtype_equal(self):\n                raise TypeError(\n                    \"categories must match existing categories when appending\"\n                )\n        else:\n            values = other\n            if not is_list_like(values):\n                values = [values]\n            other = CategoricalIndex(self._create_categorical(other, dtype=self.dtype))\n            if not other.isin(values).all():\n                raise TypeError(\n                    \"cannot append a non-category item to a CategoricalIndex\"\n                )\n\n        return other",
        "begin_line": 267,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.equals#297",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determine if two CategoricalIndex objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            If two CategoricalIndex objects have equal elements True,\n            otherwise False.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        try:\n            other = self._is_dtype_compat(other)\n            if isinstance(other, type(self)):\n                other = other._data\n            return self._data.equals(other)\n        except (TypeError, ValueError):\n            pass\n\n        return False",
        "begin_line": 297,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.inferred_type#357",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"categorical\"",
        "begin_line": 357,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.250144377526606e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.values#361",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.values(self)",
        "snippet": "    def values(self):\n        \"\"\" return the underlying data, which is a Categorical \"\"\"\n        return self._data",
        "begin_line": 361,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.927070947284978e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._wrap_setop_result#370",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._wrap_setop_result(self, other, result)",
        "snippet": "    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        return self._shallow_copy(result, name=name)",
        "begin_line": 370,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._internal_get_values#374",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        # override base Index version to get the numpy array representation of\n        # the underlying Categorical\n        return self._data._internal_get_values()",
        "begin_line": 374,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.tolist#379",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.tolist(self)",
        "snippet": "    def tolist(self):\n        return self._data.tolist()",
        "begin_line": 379,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.codes#383",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._data.codes",
        "begin_line": 383,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.250144377526606e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.categories#387",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.categories(self)",
        "snippet": "    def categories(self):\n        return self._data.categories",
        "begin_line": 387,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__contains__#398",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        # if key is a NaN, check if any NaN is in self.\n        if is_scalar(key) and isna(key):\n            return self.hasnans\n\n        return contains(self, key, container=self._engine)",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__array__#405",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\" the array interface, return my values \"\"\"\n        return np.array(self._data, dtype=dtype)",
        "begin_line": 405,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.astype#410",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_interval_dtype(dtype):\n            from pandas import IntervalIndex\n\n            return IntervalIndex(np.array(self))\n        elif is_categorical_dtype(dtype):\n            # GH 18630\n            dtype = self.dtype.update_dtype(dtype)\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n        return super().astype(dtype=dtype, copy=copy)",
        "begin_line": 410,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._engine#437",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # we are going to look things up with the codes themselves.\n        # To avoid a reference cycle, bind `codes` to a local variable, so\n        # `self` is not passed into the lambda.\n        codes = self.codes\n        return self._engine_type(lambda: codes, len(self))",
        "begin_line": 437,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.is_unique#446",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return self._engine.is_unique",
        "begin_line": 446,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.is_monotonic_increasing#450",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self):\n        return self._engine.is_monotonic_increasing",
        "begin_line": 450,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._to_safe_for_reshape#471",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._to_safe_for_reshape(self)",
        "snippet": "    def _to_safe_for_reshape(self):\n        \"\"\" convert to object if we are a categorical \"\"\"\n        return self.astype(\"object\")",
        "begin_line": 471,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.get_loc#475",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.get_loc(self, key, method=None)",
        "snippet": "    def get_loc(self, key, method=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None}\n            * default: exact matches only.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Raises\n        ------\n        KeyError : if the key is not in the index\n\n        Examples\n        --------\n        >>> unique_index = pd.CategoricalIndex(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.CategoricalIndex(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.CategoricalIndex(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True], dtype=bool)\n        \"\"\"\n        code = self.categories.get_loc(key)\n        code = self.codes.dtype.type(code)\n        try:\n            return self._engine.get_loc(code)\n        except KeyError:\n            raise KeyError(key)",
        "begin_line": 475,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.where#549",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.where(self, cond, other=None)",
        "snippet": "    def where(self, cond, other=None):\n        # TODO: Investigate an alternative implementation with\n        # 1. copy the underlying Categorical\n        # 2. setitem with `cond` and `other`\n        # 3. Rebuild CategoricalIndex.\n        if other is None:\n            other = self._na_value\n        values = np.where(cond, self.values, other)\n        cat = Categorical(values, dtype=self.dtype)\n        return self._shallow_copy(cat, **self._get_attributes_dict())",
        "begin_line": 549,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.reindex#560",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index\n\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"argument method is not implemented for CategoricalIndex.reindex\"\n            )\n        if level is not None:\n            raise NotImplementedError(\n                \"argument level is not implemented for CategoricalIndex.reindex\"\n            )\n        if limit is not None:\n            raise NotImplementedError(\n                \"argument limit is not implemented for CategoricalIndex.reindex\"\n            )\n\n        target = ibase.ensure_index(target)\n\n        if self.equals(target):\n            indexer = None\n            missing = []\n        else:\n            indexer, missing = self.get_indexer_non_unique(np.array(target))\n\n        if len(self.codes) and indexer is not None:\n            new_target = self.take(indexer)\n        else:\n            new_target = target\n\n        # filling in missing if needed\n        if len(missing):\n            cats = self.categories.get_indexer(target)\n\n            if (cats == -1).any():\n                # coerce to a regular index here!\n                result = Index(np.array(self), name=self.name)\n                new_target, indexer, _ = result._reindex_non_unique(np.array(target))\n            else:\n\n                codes = new_target.codes.copy()\n                codes[indexer == -1] = cats[missing]\n                new_target = self._create_from_codes(codes)\n\n        # we always want to return an Index type here\n        # to be consistent with .reindex for other index types (e.g. they don't\n        # coerce based on the actual values, only on the dtype)\n        # unless we had an initial Categorical to begin with\n        # in which case we are going to conform to the passed Categorical\n        new_target = np.asarray(new_target)\n        if is_categorical_dtype(target):\n            new_target = target._shallow_copy(new_target, name=self.name)\n        else:\n            new_target = Index(new_target, name=self.name)\n\n        return new_target, indexer",
        "begin_line": 560,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.get_indexer#646",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ibase.ensure_index(target)\n\n        if self.is_unique and self.equals(target):\n            return np.arange(len(self), dtype=\"intp\")\n\n        if method == \"pad\" or method == \"backfill\":\n            raise NotImplementedError(\n                \"method='pad' and method='backfill' not \"\n                \"implemented yet for CategoricalIndex\"\n            )\n        elif method == \"nearest\":\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet for CategoricalIndex\"\n            )\n\n        if isinstance(target, CategoricalIndex) and self.values.is_dtype_equal(target):\n            if self.values.equals(target.values):\n                # we have the same codes\n                codes = target.codes\n            else:\n                codes = _recode_for_categories(\n                    target.codes, target.categories, self.values.categories\n                )\n        else:\n            if isinstance(target, CategoricalIndex):\n                code_indexer = self.categories.get_indexer(target.categories)\n                codes = take_1d(code_indexer, target.codes, fill_value=-1)\n            else:\n                codes = self.categories.get_indexer(target)\n\n        indexer, _ = self._engine.get_indexer_non_unique(codes)\n        return ensure_platform_int(indexer)",
        "begin_line": 646,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique#682",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique(self, target)",
        "snippet": "    def get_indexer_non_unique(self, target):\n        target = ibase.ensure_index(target)\n\n        if isinstance(target, CategoricalIndex):\n            # Indexing on codes is more efficient if categories are the same:\n            if target.categories is self.categories:\n                target = target.codes\n                indexer, missing = self._engine.get_indexer_non_unique(target)\n                return ensure_platform_int(indexer), missing\n            target = target.values\n\n        codes = self.categories.get_indexer(target)\n        indexer, missing = self._engine.get_indexer_non_unique(codes)\n        return ensure_platform_int(indexer), missing",
        "begin_line": 682,
        "end_line": 695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.take#737",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(\n            self.codes,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=-1,\n        )\n        return self._create_from_codes(taken)",
        "begin_line": 737,
        "end_line": 747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.460952703274389e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._concat#863",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n        # if calling index is category, don't check dtype of others\n        return CategoricalIndex._concat_same_dtype(self, to_concat, name)",
        "begin_line": 863,
        "end_line": 865,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._concat_same_dtype#867",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class\n        ValueError if other is not in the categories\n        \"\"\"\n        codes = np.concatenate([self._is_dtype_compat(c).codes for c in to_concat])\n        result = self._create_from_codes(codes, name=name)\n        # if name is None, _create_from_codes sets self.name\n        result.name = name\n        return result",
        "begin_line": 867,
        "end_line": 876,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._delegate_method#907",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        \"\"\" method delegation to the ._values \"\"\"\n        method = getattr(self._values, name)\n        if \"inplace\" in kwargs:\n            raise ValueError(\"cannot use inplace with CategoricalIndex\")\n        res = method(*args, **kwargs)\n        if is_scalar(res):\n            return res\n        return CategoricalIndex(res, name=self.name)",
        "begin_line": 907,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#123",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    \"Number of Block dimensions ({block}) must equal \"\n                    \"number of axes ({self})\".format(block=block.ndim, self=self.ndim)\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        self._consolidate_check()\n\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 123,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000949667616334283,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0004854368932038835,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0004854368932038835
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.make_empty#146",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.make_empty(self, axes=None)",
        "snippet": "    def make_empty(self, axes=None):\n        \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n        if axes is None:\n            axes = [ensure_index([])] + [ensure_index(a) for a in self.axes[1:]]\n\n        # preserve dtype if possible\n        if self.ndim == 1:\n            blocks = np.array([], dtype=self.array_dtype)\n        else:\n            blocks = []\n        return type(self)(blocks, axes)",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#165",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self):\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000949667616334283,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0004791566842357451,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0004791566842357451
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#169",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 169,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006242197253433209,
            "pseudo_dstar_susp": 0.001937984496124031,
            "pseudo_tarantula_susp": 0.0004828585224529213,
            "pseudo_op2_susp": 0.001937984496124031,
            "pseudo_barinel_susp": 0.0004828585224529213
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set_axis#172",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set_axis(self, axis, new_labels)",
        "snippet": "    def set_axis(self, axis, new_labels):\n        new_labels = ensure_index(new_labels)\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)\n\n        if new_len != old_len:\n            raise ValueError(\n                \"Length mismatch: Expected axis has {old} elements, new \"\n                \"values have {new} elements\".format(old=old_len, new=new_len)\n            )\n\n        self.axes[axis] = new_labels",
        "begin_line": 172,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00047192071731949034,
            "pseudo_dstar_susp": 0.000471253534401508,
            "pseudo_tarantula_susp": 0.0006605019815059445,
            "pseudo_op2_susp": 0.000471253534401508,
            "pseudo_barinel_susp": 0.0006605019815059445
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.rename_axis#185",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.rename_axis(self, mapper, axis, copy=True, level=None)",
        "snippet": "    def rename_axis(self, mapper, axis, copy=True, level=None):\n        \"\"\"\n        Rename one of axes.\n\n        Parameters\n        ----------\n        mapper : unary callable\n        axis : int\n        copy : boolean, default True\n        level : int, default None\n        \"\"\"\n        obj = self.copy(deep=copy)\n        obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n        return obj",
        "begin_line": 185,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#201",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self):\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 201,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.942515967786726e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#213",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self):\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 213,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000628140703517588,
            "pseudo_dstar_susp": 0.001976284584980237,
            "pseudo_tarantula_susp": 0.0004854368932038835,
            "pseudo_op2_susp": 0.001976284584980237,
            "pseudo_barinel_susp": 0.0004854368932038835
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#234",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self):\n        return self.axes[0]",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005803830528148578,
            "pseudo_dstar_susp": 0.0017035775127768314,
            "pseudo_tarantula_susp": 0.00046061722708429296,
            "pseudo_op2_susp": 0.0017035775127768314,
            "pseudo_barinel_susp": 0.00046061722708429296
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_dtypes#249",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_dtypes(self)",
        "snippet": "    def get_dtypes(self):\n        dtypes = np.array([blk.dtype for blk in self.blocks])\n        return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.696129637069774e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#315",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035486160397445,
            "pseudo_dstar_susp": 0.00035486160397445,
            "pseudo_tarantula_susp": 0.0003549875754348598,
            "pseudo_op2_susp": 0.00035486160397445,
            "pseudo_barinel_susp": 0.0003549875754348598
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#330",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self):\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                \"block items\\n# manager items: {0}, # \"\n                \"tot_items: {1}\".format(len(self.items), tot_items)\n            )",
        "begin_line": 330,
        "end_line": 341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009514747859181732,
            "pseudo_dstar_susp": 0.125,
            "pseudo_tarantula_susp": 0.0004868549172346641,
            "pseudo_op2_susp": 0.125,
            "pseudo_barinel_susp": 0.0004868549172346641
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#343",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
        "snippet": "    def apply(\n        self,\n        f,\n        axes=None,\n        filter=None,\n        do_integrity_check=False,\n        consolidate=True,\n        **kwargs,\n    ):\n        \"\"\"\n        iterate over the blocks, collect and create a new block manager\n\n        Parameters\n        ----------\n        f : the callable or function name to operate on at the block level\n        axes : optional (if not supplied, use self.axes)\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n        do_integrity_check : boolean, default False. Do the block manager\n            integrity check\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n\n        Returns\n        -------\n        Block Manager (new object)\n\n        \"\"\"\n\n        result_blocks = []\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        if consolidate:\n            self._consolidate_inplace()\n\n        if f == \"where\":\n            align_copy = True\n            if kwargs.get(\"align\", True):\n                align_keys = [\"other\", \"cond\"]\n            else:\n                align_keys = [\"cond\"]\n        elif f == \"putmask\":\n            align_copy = False\n            if kwargs.get(\"align\", True):\n                align_keys = [\"new\", \"mask\"]\n            else:\n                align_keys = [\"mask\"]\n        elif f == \"fillna\":\n            # fillna internally does putmask, maybe it's better to do this\n            # at mgr, not block level?\n            align_copy = False\n            align_keys = [\"value\"]\n        else:\n            align_keys = []\n\n        # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n        # with a .values attribute.\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if not isinstance(kwargs[k], ABCExtensionArray)\n            and hasattr(kwargs[k], \"values\")\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = obj._info_axis_number\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(axes or self.axes)\n        bm = type(self)(\n            result_blocks, axes or self.axes, do_integrity_check=do_integrity_check\n        )\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 343,
        "end_line": 437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000505050505050505,
            "pseudo_dstar_susp": 0.0012422360248447205,
            "pseudo_tarantula_susp": 0.0004063388866314506,
            "pseudo_op2_susp": 0.0012422360248447205,
            "pseudo_barinel_susp": 0.0004063388866314506
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.isna#543",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.isna(self, func, **kwargs)",
        "snippet": "    def isna(self, func, **kwargs):\n        return self.apply(\"apply\", func=func, **kwargs)",
        "begin_line": 543,
        "end_line": 544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.439369141496801e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#549",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, **kwargs)",
        "snippet": "    def setitem(self, **kwargs):\n        return self.apply(\"setitem\", **kwargs)",
        "begin_line": 549,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.225037012666557e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fillna#564",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fillna(self, **kwargs)",
        "snippet": "    def fillna(self, **kwargs):\n        return self.apply(\"fillna\", **kwargs)",
        "begin_line": 564,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#570",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, **kwargs)",
        "snippet": "    def astype(self, dtype, **kwargs):\n        return self.apply(\"astype\", dtype=dtype, **kwargs)",
        "begin_line": 570,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.53893938403191e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.convert#573",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.convert(self, **kwargs)",
        "snippet": "    def convert(self, **kwargs):\n        return self.apply(\"convert\", **kwargs)",
        "begin_line": 573,
        "end_line": 574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.846501437765302e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.replace#576",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.replace(self, value, **kwargs)",
        "snippet": "    def replace(self, value, **kwargs):\n        assert np.ndim(value) == 0, value\n        return self.apply(\"replace\", value=value, **kwargs)",
        "begin_line": 576,
        "end_line": 578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#636",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 636,
        "end_line": 642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006321112515802782,
            "pseudo_dstar_susp": 0.0020161290322580645,
            "pseudo_tarantula_susp": 0.00048828125,
            "pseudo_op2_susp": 0.0020161290322580645,
            "pseudo_barinel_susp": 0.00048828125
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#644",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self):\n        ftypes = [blk.ftype for blk in self.blocks]\n        self._is_consolidated = len(ftypes) == len(set(ftypes))\n        self._known_consolidated = True",
        "begin_line": 644,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000949667616334283,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.0004791566842357451,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.0004791566842357451
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#650",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self):\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 650,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.any_extension_types#668",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.any_extension_types(self)",
        "snippet": "    def any_extension_types(self):\n        \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n        return any(block.is_extension for block in self.blocks)",
        "begin_line": 668,
        "end_line": 670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.734006734006734e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#673",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 673,
        "end_line": 685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_numeric_data#697",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_numeric_data(self, copy=False)",
        "snippet": "    def get_numeric_data(self, copy=False):\n        \"\"\"\n        Parameters\n        ----------\n        copy : boolean, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self.combine([b for b in self.blocks if b.is_numeric], copy)",
        "begin_line": 697,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.692899453804139e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.combine#707",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.combine(self, blocks, copy=True)",
        "snippet": "    def combine(self, blocks, copy=True):\n        \"\"\" return a new manager with the blocks \"\"\"\n        if len(blocks) == 0:\n            return self.make_empty()\n\n        # FIXME: optimization potential\n        indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n        inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n        new_blocks = []\n        for b in blocks:\n            b = b.copy(deep=copy)\n            b.mgr_locs = algos.take_1d(\n                inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False\n            )\n            new_blocks.append(b)\n\n        axes = list(self.axes)\n        axes[0] = self.items.take(indexer)\n\n        return type(self)(new_blocks, axes, do_integrity_check=False)",
        "begin_line": 707,
        "end_line": 727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.692899453804139e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_slice#729",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_slice(self, slobj, axis=0)",
        "snippet": "    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(slobj)\n        else:\n            slicer = [slice(None)] * (axis + 1)\n            slicer[axis] = slobj\n            slicer = tuple(slicer)\n            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axes[axis][slobj]\n\n        bm = type(self)(new_blocks, new_axes, do_integrity_check=False)\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 729,
        "end_line": 746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.nblocks#752",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.nblocks(self)",
        "snippet": "    def nblocks(self):\n        return len(self.blocks)",
        "begin_line": 752,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.960879855213699e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#755",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : boolean o rstring, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        copy : BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            if deep == \"all\":\n                copy = lambda ax: ax.copy(deep=True)\n            else:\n                copy = lambda ax: ax.view()\n            new_axes = [copy(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n        return self.apply(\"copy\", axes=new_axes, deep=deep, do_integrity_check=False)",
        "begin_line": 755,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006939625260235947,
            "pseudo_dstar_susp": 0.0027100271002710027,
            "pseudo_tarantula_susp": 0.0005482456140350877,
            "pseudo_op2_susp": 0.0027100271002710027,
            "pseudo_barinel_susp": 0.0005482456140350877
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.as_array#780",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.as_array(self, transpose=False, items=None)",
        "snippet": "    def as_array(self, transpose=False, items=None):\n        \"\"\"Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : boolean, default False\n            If True, transpose the return array\n        items : list of strings or None\n            Names of block items that will be included in the returned\n            array. ``None`` means that all block items will be used\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n\n        if items is not None:\n            mgr = self.reindex_axis(items, axis=0)\n        else:\n            mgr = self\n\n        if self._is_single_block and mgr.blocks[0].is_datetimetz:\n            # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n            # always be object dtype. Some callers seem to want the\n            # DatetimeArray (previously DTI)\n            arr = mgr.blocks[0].get_values(dtype=object)\n        elif self._is_single_block or not self.is_mixed_type:\n            arr = np.asarray(mgr.blocks[0].get_values())\n        else:\n            arr = mgr._interleave()\n\n        return arr.transpose() if transpose else arr",
        "begin_line": 780,
        "end_line": 814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._interleave#816",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._interleave(self)",
        "snippet": "    def _interleave(self):\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n\n        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\"\n\n        result = np.empty(self.shape, dtype=dtype)\n\n        itemmask = np.zeros(self.shape[0])\n\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n\n        if not itemmask.all():\n            raise AssertionError(\"Some items were not contained in blocks\")\n\n        return result",
        "begin_line": 816,
        "end_line": 842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.678668215253581e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.fast_xs#868",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.fast_xs(self, loc)",
        "snippet": "    def fast_xs(self, loc):\n        \"\"\"\n        get a cross sectional for a given location in the\n        items ; handle dups\n\n        return the result, is *could* be a view in the case of a\n        single block\n        \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].iget((slice(None), loc))\n\n        items = self.items\n\n        # non-unique (GH4726)\n        if not items.is_unique:\n            result = self._interleave()\n            if self.ndim == 2:\n                result = result.T\n            return result[loc]\n\n        # unique\n        dtype = _interleaved_dtype(self.blocks)\n\n        n = len(items)\n        if is_extension_array_dtype(dtype):\n            # we'll eventually construct an ExtensionArray.\n            result = np.empty(n, dtype=object)\n        else:\n            result = np.empty(n, dtype=dtype)\n\n        for blk in self.blocks:\n            # Such assignment may incorrectly coerce NaT to None\n            # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n            for i, rl in enumerate(blk.mgr_locs):\n                result[rl] = blk.iget((i, loc))\n\n        if is_extension_array_dtype(dtype):\n            result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n\n        return result",
        "begin_line": 868,
        "end_line": 907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#909",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self):\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 909,
        "end_line": 923,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00036927621861152144,
            "pseudo_dstar_susp": 0.00036927621861152144,
            "pseudo_tarantula_susp": 0.0003695491500369549,
            "pseudo_op2_susp": 0.00036927621861152144,
            "pseudo_barinel_susp": 0.0003695491500369549
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#925",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 925,
        "end_line": 930,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006333122229259025,
            "pseudo_dstar_susp": 0.002028397565922921,
            "pseudo_tarantula_susp": 0.0004894762604013706,
            "pseudo_op2_susp": 0.002028397565922921,
            "pseudo_barinel_susp": 0.0004894762604013706
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get#932",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get(self, item)",
        "snippet": "    def get(self, item):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n\n                # allow a single nan location indexer\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError(\"cannot label index with a null key\")\n\n            return self.iget(loc)\n        else:\n\n            if isna(item):\n                raise TypeError(\"cannot label index with a null key\")\n\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(\n                new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n            )",
        "begin_line": 932,
        "end_line": 959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000856898029134533,
            "pseudo_dstar_susp": 0.004830917874396135,
            "pseudo_tarantula_susp": 0.0006693440428380187,
            "pseudo_op2_susp": 0.004830917874396135,
            "pseudo_barinel_susp": 0.0006693440428380187
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#961",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i)",
        "snippet": "    def iget(self, i):\n        \"\"\"\n        Return the data as a SingleBlockManager if possible\n\n        Otherwise return as a ndarray\n        \"\"\"\n        block = self.blocks[self._blknos[i]]\n        values = block.iget(self._blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            [\n                block.make_block_same_class(\n                    values, placement=slice(0, len(values)), ndim=1\n                )\n            ],\n            self.axes[1],\n        )",
        "begin_line": 961,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008019246190858059,
            "pseudo_dstar_susp": 0.003952569169960474,
            "pseudo_tarantula_susp": 0.0006172839506172839,
            "pseudo_op2_susp": 0.003952569169960474,
            "pseudo_barinel_susp": 0.0006172839506172839
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.delete#980",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.delete(self, item)",
        "snippet": "    def delete(self, item):\n        \"\"\"\n        Delete selected item (items if non-unique) in-place.\n        \"\"\"\n        indexer = self.items.get_loc(item)\n\n        is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n        is_deleted[indexer] = True\n        ref_loc_offset = -is_deleted.cumsum()\n\n        is_blk_deleted = [False] * len(self.blocks)\n\n        if isinstance(indexer, int):\n            affected_start = indexer\n        else:\n            affected_start = is_deleted.nonzero()[0][0]\n\n        for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n            blk = self.blocks[blkno]\n            bml = blk.mgr_locs\n            blk_del = is_deleted[bml.indexer].nonzero()[0]\n\n            if len(blk_del) == len(bml):\n                is_blk_deleted[blkno] = True\n                continue\n            elif len(blk_del) != 0:\n                blk.delete(blk_del)\n                bml = blk.mgr_locs\n\n            blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n\n        # FIXME: use Index.delete as soon as it uses fastpath=True\n        self.axes[0] = self.items[~is_deleted]\n        self.blocks = tuple(\n            b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]\n        )\n        self._shape = None\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 980,
        "end_line": 1017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.858710562414266e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set#1019",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set(self, item, value)",
        "snippet": "    def set(self, item, value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self.insert(len(self.items), item, value)\n            return\n\n        if isinstance(loc, int):\n            loc = [loc]\n\n        blknos = self._blknos[loc]\n        blklocs = self._blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = algos.take_1d(\n                new_blknos, self._blknos, axis=0, allow_fill=False\n            )\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only\n                # one item.\n                new_blocks.extend(\n                    make_block(\n                        values=value.copy(),\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1019,
        "end_line": 1138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009569377990430622,
            "pseudo_dstar_susp": 0.0005931198102016608,
            "pseudo_tarantula_susp": 0.0009689922480620155,
            "pseudo_op2_susp": 0.0005931198102016608,
            "pseudo_barinel_susp": 0.0009689922480620155
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1032",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "            def value_getitem(placement):\n                return value",
        "begin_line": 1032,
        "end_line": 1033,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009910802775024777,
            "pseudo_dstar_susp": 0.005681818181818182,
            "pseudo_tarantula_susp": 0.0008488964346349745,
            "pseudo_op2_susp": 0.005681818181818182,
            "pseudo_barinel_susp": 0.0008488964346349745
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1044",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1044,
        "end_line": 1045,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009910802775024777,
            "pseudo_dstar_susp": 0.005681818181818182,
            "pseudo_tarantula_susp": 0.0008488964346349745,
            "pseudo_op2_susp": 0.005681818181818182,
            "pseudo_barinel_susp": 0.0008488964346349745
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1140",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(\"cannot insert {}, already exists\".format(item))\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        if loc == self._blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n        self._shape = None\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1140,
        "end_line": 1189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1206",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
        "snippet": "    def reindex_indexer(\n        self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object\n        allow_dups : bool\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_tuple=(\n                        fill_value if fill_value is not None else blk.fill_value,\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n        return type(self)(new_blocks, new_axes)",
        "begin_line": 1206,
        "end_line": 1254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009000900090009,
            "pseudo_dstar_susp": 0.005376344086021506,
            "pseudo_tarantula_susp": 0.0007336757153338225,
            "pseudo_op2_susp": 0.005376344086021506,
            "pseudo_barinel_susp": 0.0007336757153338225
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0#1256",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
        "snippet": "    def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Returns\n        -------\n        new_blocks : list of Block\n        \"\"\"\n\n        allow_fill = fill_tuple is not None\n\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n            slice_or_indexer, self.shape[0], allow_fill=allow_fill\n        )\n\n        if self._is_single_block:\n            blk = self.blocks[0]\n\n            if sl_type in (\"slice\", \"mask\"):\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_tuple[0] is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n                    fill_tuple = (fill_value,)\n\n                return [\n                    blk.take_nd(\n                        slobj,\n                        axis=0,\n                        new_mgr_locs=slice(0, sllen),\n                        fill_tuple=fill_tuple,\n                    )\n                ]\n\n        if sl_type in (\"slice\", \"mask\"):\n            blknos = self._blknos[slobj]\n            blklocs = self._blklocs[slobj]\n        else:\n            blknos = algos.take_1d(\n                self._blknos, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n            blklocs = algos.take_1d(\n                self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n            )\n\n        # When filling blknos, make sure blknos is updated before appending to\n        # blocks list, that way new blkno is exactly len(blocks).\n        #\n        # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,\n        # pytables serialization will break otherwise.\n        blocks = []\n        for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n            if blkno == -1:\n                # If we've got here, fill_tuple was not None.\n                fill_value = fill_tuple[0]\n\n                blocks.append(\n                    self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n                )\n            else:\n                blk = self.blocks[blkno]\n\n                # Otherwise, slicing along items axis is necessary.\n                if not blk._can_consolidate:\n                    # A non-consolidatable block, it's easy, because there's\n                    # only one item and each mgr loc is a copy of that single\n                    # item.\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=True)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n\n                else:\n                    blocks.append(\n                        blk.take_nd(\n                            blklocs[mgr_locs.indexer],\n                            axis=0,\n                            new_mgr_locs=mgr_locs,\n                            fill_tuple=None,\n                        )\n                    )\n\n        return blocks",
        "begin_line": 1256,
        "end_line": 1340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._make_na_block#1342",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._make_na_block(self, placement, fill_value=None)",
        "snippet": "    def _make_na_block(self, placement, fill_value=None):\n        # TODO: infer dtypes other than float64 from fill_value\n\n        if fill_value is None:\n            fill_value = np.nan\n        block_shape = list(self.shape)\n        block_shape[0] = len(placement)\n\n        dtype, fill_value = infer_dtype_from_scalar(fill_value)\n        block_values = np.empty(block_shape, dtype=dtype)\n        block_values.fill(fill_value)\n        return make_block(block_values, placement=placement)",
        "begin_line": 1342,
        "end_line": 1353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.take#1355",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.take(self, indexer, axis=1, verify=True, convert=True)",
        "snippet": "    def take(self, indexer, axis=1, verify=True, convert=True):\n        \"\"\"\n        Take items along any axis.\n        \"\"\"\n        self._consolidate_inplace()\n        indexer = (\n            np.arange(indexer.start, indexer.stop, indexer.step, dtype=\"int64\")\n            if isinstance(indexer, slice)\n            else np.asanyarray(indexer, dtype=\"int64\")\n        )\n\n        n = self.shape[axis]\n        if convert:\n            indexer = maybe_convert_indices(indexer, n)\n\n        if verify:\n            if ((indexer == -1) | (indexer >= n)).any():\n                raise Exception(\"Indices must be nonzero and less than the axis length\")\n\n        new_labels = self.axes[axis].take(indexer)\n        return self.reindex_indexer(\n            new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True\n        )",
        "begin_line": 1355,
        "end_line": 1377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004789272030651341,
            "pseudo_dstar_susp": 0.0004775549188156638,
            "pseudo_tarantula_susp": 0.0006844626967830253,
            "pseudo_op2_susp": 0.0004775549188156638,
            "pseudo_barinel_susp": 0.0006844626967830253
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.unstack#1403",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.unstack(self, unstacker_func, fill_value)",
        "snippet": "    def unstack(self, unstacker_func, fill_value):\n        \"\"\"Return a blockmanager with all blocks unstacked.\n\n        Parameters\n        ----------\n        unstacker_func : callable\n            A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n        fill_value : Any\n            fill_value for newly introduced missing values.\n\n        Returns\n        -------\n        unstacked : BlockManager\n        \"\"\"\n        n_rows = self.shape[-1]\n        dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n        new_columns = dummy.get_new_columns()\n        new_index = dummy.get_new_index()\n        new_blocks = []\n        columns_mask = []\n\n        for blk in self.blocks:\n            blocks, mask = blk._unstack(\n                partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]),\n                new_columns,\n                n_rows,\n                fill_value,\n            )\n\n            new_blocks.extend(blocks)\n            columns_mask.extend(mask)\n\n        new_columns = new_columns[columns_mask]\n\n        bm = BlockManager(new_blocks, [new_columns, new_index])\n        return bm",
        "begin_line": 1403,
        "end_line": 1438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1449",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n            if isinstance(block, list):\n\n                # empty block\n                if len(block) == 0:\n                    block = [np.array([])]\n                elif len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n        else:\n            self.axes = [ensure_index(axis)]\n\n            # create the block here\n            if isinstance(block, list):\n\n                # provide consolidation to the interleaved_dtype\n                if len(block) > 1:\n                    dtype = _interleaved_dtype(block)\n                    block = [b.astype(dtype) for b in block]\n                    block = _consolidate(block)\n\n                if len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n\n        if not isinstance(block, Block):\n            block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n        self.blocks = tuple([block])",
        "begin_line": 1449,
        "end_line": 1497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000758150113722517,
            "pseudo_dstar_susp": 0.0033333333333333335,
            "pseudo_tarantula_susp": 0.000591715976331361,
            "pseudo_op2_susp": 0.0033333333333333335,
            "pseudo_barinel_susp": 0.000591715976331361
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1503",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self):\n        return self.blocks[0]",
        "begin_line": 1503,
        "end_line": 1504,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000691085003455425,
            "pseudo_dstar_susp": 0.00267379679144385,
            "pseudo_tarantula_susp": 0.0005452562704471102,
            "pseudo_op2_susp": 0.00267379679144385,
            "pseudo_barinel_susp": 0.0005452562704471102
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1520",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj, axis=0)",
        "snippet": "    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        return type(self)(self._block._slice(slobj), self.index[slobj], fastpath=True)",
        "begin_line": 1520,
        "end_line": 1524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.58718134510243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1527",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self):\n        return self.axes[0]",
        "begin_line": 1527,
        "end_line": 1528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.17093489663684e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.convert#1530",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.convert(self, **kwargs)",
        "snippet": "    def convert(self, **kwargs):\n        \"\"\" convert the whole block as one \"\"\"\n        return self.apply(\"convert\", **kwargs)",
        "begin_line": 1530,
        "end_line": 1532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1535",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._block.dtype",
        "begin_line": 1535,
        "end_line": 1536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035536602700781805,
            "pseudo_dstar_susp": 0.00035536602700781805,
            "pseudo_tarantula_susp": 0.00035549235691432633,
            "pseudo_op2_susp": 0.00035536602700781805,
            "pseudo_barinel_susp": 0.00035549235691432633
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.external_values#1548",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.external_values(self)",
        "snippet": "    def external_values(self):\n        return self._block.external_values()",
        "begin_line": 1548,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045248868778280545,
            "pseudo_dstar_susp": 0.0004522840343735866,
            "pseudo_tarantula_susp": 0.0006016847172081829,
            "pseudo_op2_susp": 0.0004522840343735866,
            "pseudo_barinel_susp": 0.0006016847172081829
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1551",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        return self._block.internal_values()",
        "begin_line": 1551,
        "end_line": 1552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007616146230007616,
            "pseudo_dstar_susp": 0.003401360544217687,
            "pseudo_tarantula_susp": 0.0005938242280285036,
            "pseudo_op2_susp": 0.003401360544217687,
            "pseudo_barinel_susp": 0.0005938242280285036
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_values#1554",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_values(self)",
        "snippet": "    def get_values(self):\n        \"\"\" return a dense type view \"\"\"\n        return np.array(self._block.to_dense(), copy=False)",
        "begin_line": 1554,
        "end_line": 1556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038819875776397513,
            "pseudo_dstar_susp": 0.00038819875776397513,
            "pseudo_tarantula_susp": 0.0003891050583657588,
            "pseudo_op2_susp": 0.00038819875776397513,
            "pseudo_barinel_susp": 0.0003891050583657588
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._can_hold_na#1559",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return self._block._can_hold_na",
        "begin_line": 1559,
        "end_line": 1560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1562",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        return True",
        "begin_line": 1562,
        "end_line": 1563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00046992481203007516,
            "pseudo_dstar_susp": 0.0004692632566870014,
            "pseudo_tarantula_susp": 0.0006544502617801048,
            "pseudo_op2_susp": 0.0004692632566870014,
            "pseudo_barinel_susp": 0.0006544502617801048
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1568",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1568,
        "end_line": 1569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.290890790135883e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.fast_xs#1581",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.fast_xs(self, loc)",
        "snippet": "    def fast_xs(self, loc):\n        \"\"\"\n        fast path for getting a cross-section\n        return a view of the data\n        \"\"\"\n        return self._block.values[loc]",
        "begin_line": 1581,
        "end_line": 1586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.concat#1588",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.concat(self, to_concat, new_axis)",
        "snippet": "    def concat(self, to_concat, new_axis):\n        \"\"\"\n        Concatenate a list of SingleBlockManagers into a single\n        SingleBlockManager.\n\n        Used for pd.concat of Series objects with axis=0.\n\n        Parameters\n        ----------\n        to_concat : list of SingleBlockManagers\n        new_axis : Index of the result\n\n        Returns\n        -------\n        SingleBlockManager\n\n        \"\"\"\n        non_empties = [x for x in to_concat if len(x) > 0]\n\n        # check if all series are of the same block type:\n        if len(non_empties) > 0:\n            blocks = [obj.blocks[0] for obj in non_empties]\n            if len({b.dtype for b in blocks}) == 1:\n                new_block = blocks[0].concat_same_type(blocks)\n            else:\n                values = [x.values for x in blocks]\n                values = concat_compat(values)\n                new_block = make_block(values, placement=slice(0, len(values), 1))\n        else:\n            values = [x._block.values for x in to_concat]\n            values = concat_compat(values)\n            new_block = make_block(values, placement=slice(0, len(values), 1))\n\n        mgr = SingleBlockManager(new_block, new_axis)\n        return mgr",
        "begin_line": 1588,
        "end_line": 1622,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_blocks#1629",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_blocks(blocks, axes)",
        "snippet": "def create_block_manager_from_blocks(blocks, axes):\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        construction_error(tot_items, blocks[0].shape[1:], axes, e)",
        "begin_line": 1629,
        "end_line": 1650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007855459544383347,
            "pseudo_dstar_susp": 0.0005512679162072767,
            "pseudo_tarantula_susp": 0.000859106529209622,
            "pseudo_op2_susp": 0.0005512679162072767,
            "pseudo_barinel_susp": 0.000859106529209622
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1653",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names, axes)",
        "snippet": "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1653,
        "end_line": 1661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007158196134574087,
            "pseudo_dstar_susp": 0.002881844380403458,
            "pseudo_tarantula_susp": 0.0005611672278338945,
            "pseudo_op2_susp": 0.002881844380403458,
            "pseudo_barinel_susp": 0.0005611672278338945
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1688",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names, axes)",
        "snippet": "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1688,
        "end_line": 1782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.04,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.010869565217391304,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.010869565217391304
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1785",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype):\n    \"\"\" return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1785,
        "end_line": 1796,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00041017227235438887,
            "pseudo_dstar_susp": 0.00041017227235438887,
            "pseudo_tarantula_susp": 0.00042625745950554135,
            "pseudo_op2_susp": 0.00041017227235438887,
            "pseudo_barinel_susp": 0.00042625745950554135
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1799",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1799,
        "end_line": 1813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001076426264800861,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.0006234413965087282,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.0006234413965087282
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1816",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1816,
        "end_line": 1840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007369196757553427,
            "pseudo_dstar_susp": 0.0031847133757961785,
            "pseudo_tarantula_susp": 0.0005730659025787965,
            "pseudo_op2_susp": 0.0031847133757961785,
            "pseudo_barinel_susp": 0.0005730659025787965
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1819",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1819,
        "end_line": 1823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010256410256410256,
            "pseudo_dstar_susp": 0.3333333333333333,
            "pseudo_tarantula_susp": 0.0006309148264984228,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.0006309148264984228
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1825",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1825,
        "end_line": 1829,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010256410256410256,
            "pseudo_dstar_susp": 0.3333333333333333,
            "pseudo_tarantula_susp": 0.0006309148264984228,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.0006309148264984228
        }
    },
    {
        "name": "pandas.core.internals.managers._interleaved_dtype#1843",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._interleaved_dtype(blocks: List[Block])",
        "snippet": "def _interleaved_dtype(\n    blocks: List[Block],\n) -> Optional[Union[np.dtype, ExtensionDtype]]:\n    \"\"\"Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : Optional[Union[np.dtype, ExtensionDtype]]\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
        "begin_line": 1843,
        "end_line": 1860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.637625289128758e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers._consolidate#1863",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._consolidate(blocks)",
        "snippet": "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
        "begin_line": 1863,
        "end_line": 1878,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.49434991557345e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers._transform_index#1931",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._transform_index(index, func, level=None)",
        "snippet": "def _transform_index(index, func, level=None):\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n\n    \"\"\"\n    if isinstance(index, MultiIndex):\n        if level is not None:\n            items = [\n                tuple(func(y) if i == level else y for i, y in enumerate(x))\n                for x in index\n            ]\n        else:\n            items = [tuple(func(y) for y in x) for x in index]\n        return MultiIndex.from_tuples(items, names=index.names)\n    else:\n        items = [func(x) for x in index]\n        return Index(items, name=index.name, tupleize_cols=False)",
        "begin_line": 1931,
        "end_line": 1950,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1953",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr)",
        "snippet": "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1953,
        "end_line": 1957,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.43707756678468e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers._preprocess_slice_or_indexer#1960",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill)",
        "snippet": "def _preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
        "begin_line": 1960,
        "end_line": 1975,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.managers.concatenate_block_managers#1978",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy)",
        "snippet": "def concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy):\n    \"\"\"\n    Concatenate block managers into one.\n\n    Parameters\n    ----------\n    mgrs_indexers : list of (BlockManager, {axis: indexer,...}) tuples\n    axes : list of Index\n    concat_axis : int\n    copy : bool\n\n    \"\"\"\n    concat_plans = [\n        get_mgr_concatenation_plan(mgr, indexers) for mgr, indexers in mgrs_indexers\n    ]\n    concat_plan = combine_concat_plans(concat_plans, concat_axis)\n    blocks = []\n\n    for placement, join_units in concat_plan:\n\n        if len(join_units) == 1 and not join_units[0].indexers:\n            b = join_units[0].block\n            values = b.values\n            if copy:\n                values = values.copy()\n            else:\n                values = values.view()\n            b = b.make_block_same_class(values, placement=placement)\n        elif is_uniform_join_units(join_units):\n            b = join_units[0].block.concat_same_type(\n                [ju.block for ju in join_units], placement=placement\n            )\n        else:\n            b = make_block(\n                concatenate_join_units(join_units, concat_axis, copy=copy),\n                placement=placement,\n            )\n        blocks.append(b)\n\n    return BlockManager(blocks, axes)",
        "begin_line": 1978,
        "end_line": 2017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat.concat#30",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat.concat(objs, axis=0, join: str='outer', join_axes=None, ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True)",
        "snippet": "def concat(\n    objs,\n    axis=0,\n    join: str = \"outer\",\n    join_axes=None,\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n):\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a dict is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    join_axes : list of Index objects\n        .. deprecated:: 0.25.0\n\n        Specific indexes to use for the other n - 1 axes instead of performing\n        inner/outer set logic. Use .reindex() before or after concatenation\n        as a replacement.\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'.\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n           Changed to not sort by default.\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        join_axes=join_axes,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
        "begin_line": 30,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.382028208564682e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.__init__#263",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.__init__(self, objs, axis=0, join: str='outer', join_axes=None, keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
        "snippet": "    def __init__(\n        self,\n        objs,\n        axis=0,\n        join: str = \"outer\",\n        join_axes=None,\n        keys=None,\n        levels=None,\n        names=None,\n        ignore_index: bool = False,\n        verify_integrity: bool = False,\n        copy: bool = True,\n        sort=False,\n    ):\n        if isinstance(objs, (NDFrame, str)):\n            raise TypeError(\n                \"first argument must be an iterable of pandas \"\n                \"objects, you passed an object of type \"\n                '\"{name}\"'.format(name=type(objs).__name__)\n            )\n\n        if join == \"outer\":\n            self.intersect = False\n        elif join == \"inner\":\n            self.intersect = True\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Only can inner (intersect) or outer (union) join the other axis\"\n            )\n\n        if isinstance(objs, dict):\n            if keys is None:\n                keys = list(objs.keys())\n            objs = [objs[k] for k in keys]\n        else:\n            objs = list(objs)\n\n        if len(objs) == 0:\n            raise ValueError(\"No objects to concatenate\")\n\n        if keys is None:\n            objs = list(com.not_none(*objs))\n        else:\n            # #1649\n            clean_keys = []\n            clean_objs = []\n            for k, v in zip(keys, objs):\n                if v is None:\n                    continue\n                clean_keys.append(k)\n                clean_objs.append(v)\n            objs = clean_objs\n            name = getattr(keys, \"name\", None)\n            keys = Index(clean_keys, name=name)\n\n        if len(objs) == 0:\n            raise ValueError(\"All objects passed were None\")\n\n        # consolidate data & figure out what our result ndim is going to be\n        ndims = set()\n        for obj in objs:\n            if not isinstance(obj, (Series, DataFrame)):\n                msg = (\n                    \"cannot concatenate object of type '{typ}';\"\n                    \" only Series and DataFrame objs are valid\".format(typ=type(obj))\n                )\n                raise TypeError(msg)\n\n            # consolidate\n            obj._consolidate(inplace=True)\n            ndims.add(obj.ndim)\n\n        # get the sample\n        # want the highest ndim that we have, and must be non-empty\n        # unless all objs are empty\n        sample = None\n        if len(ndims) > 1:\n            max_ndim = max(ndims)\n            for obj in objs:\n                if obj.ndim == max_ndim and np.sum(obj.shape):\n                    sample = obj\n                    break\n\n        else:\n            # filter out the empties if we have not multi-index possibilities\n            # note to keep empty Series as it affect to result columns / name\n            non_empties = [\n                obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n            ]\n\n            if len(non_empties) and (\n                keys is None and names is None and levels is None and not self.intersect\n            ):\n                objs = non_empties\n                sample = objs[0]\n\n        if sample is None:\n            sample = objs[0]\n        self.objs = objs\n\n        # Standardize axis parameter to int\n        if isinstance(sample, Series):\n            axis = DataFrame._get_axis_number(axis)\n        else:\n            axis = sample._get_axis_number(axis)\n\n        # Need to flip BlockManager axis in the DataFrame special case\n        self._is_frame = isinstance(sample, DataFrame)\n        if self._is_frame:\n            axis = 1 if axis == 0 else 0\n\n        self._is_series = isinstance(sample, Series)\n        if not 0 <= axis <= sample.ndim:\n            raise AssertionError(\n                \"axis must be between 0 and {ndim}, input was\"\n                \" {axis}\".format(ndim=sample.ndim, axis=axis)\n            )\n\n        # if we have mixed ndims, then convert to highest ndim\n        # creating column numbers as needed\n        if len(ndims) > 1:\n            current_column = 0\n            max_ndim = sample.ndim\n            self.objs, objs = [], self.objs\n            for obj in objs:\n\n                ndim = obj.ndim\n                if ndim == max_ndim:\n                    pass\n\n                elif ndim != max_ndim - 1:\n                    raise ValueError(\n                        \"cannot concatenate unaligned mixed \"\n                        \"dimensional NDFrame objects\"\n                    )\n\n                else:\n                    name = getattr(obj, \"name\", None)\n                    if ignore_index or name is None:\n                        name = current_column\n                        current_column += 1\n\n                    # doing a row-wise concatenation so need everything\n                    # to line up\n                    if self._is_frame and axis == 1:\n                        name = 0\n                    obj = sample._constructor({name: obj})\n\n                self.objs.append(obj)\n\n        # note: this is the BlockManager axis (since DataFrame is transposed)\n        self.axis = axis\n        self.join_axes = join_axes\n        self.keys = keys\n        self.names = names or getattr(keys, \"names\", None)\n        self.levels = levels\n        self.sort = sort\n\n        self.ignore_index = ignore_index\n        self.verify_integrity = verify_integrity\n        self.copy = copy\n\n        self.new_axes = self._get_new_axes()",
        "begin_line": 263,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator.get_result#427",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator.get_result(self)",
        "snippet": "    def get_result(self):\n\n        # series only\n        if self._is_series:\n\n            # stack blocks\n            if self.axis == 0:\n                name = com.consensus_name_attr(self.objs)\n\n                mgr = self.objs[0]._data.concat(\n                    [x._data for x in self.objs], self.new_axes\n                )\n                cons = self.objs[0]._constructor\n                return cons(mgr, name=name).__finalize__(self, method=\"concat\")\n\n            # combine as columns in a frame\n            else:\n                data = dict(zip(range(len(self.objs)), self.objs))\n                cons = DataFrame\n\n                index, columns = self.new_axes\n                df = cons(data, index=index)\n                df.columns = columns\n                return df.__finalize__(self, method=\"concat\")\n\n        # combine block managers\n        else:\n            mgrs_indexers = []\n            for obj in self.objs:\n                mgr = obj._data\n                indexers = {}\n                for ax, new_labels in enumerate(self.new_axes):\n                    if ax == self.axis:\n                        # Suppress reindexing on concat axis\n                        continue\n\n                    obj_labels = mgr.axes[ax]\n                    if not new_labels.equals(obj_labels):\n                        indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n                mgrs_indexers.append((obj._data, indexers))\n\n            new_data = concatenate_block_managers(\n                mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy\n            )\n            if not self.copy:\n                new_data._consolidate_inplace()\n\n            cons = self.objs[0]._constructor\n            return cons._from_axes(new_data, self.new_axes).__finalize__(\n                self, method=\"concat\"\n            )",
        "begin_line": 427,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_result_dim#480",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_result_dim(self)",
        "snippet": "    def _get_result_dim(self) -> int:\n        if self._is_series and self.axis == 1:\n            return 2\n        else:\n            return self.objs[0].ndim",
        "begin_line": 480,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.153946510110893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_new_axes#486",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_new_axes(self)",
        "snippet": "    def _get_new_axes(self):\n        ndim = self._get_result_dim()\n        new_axes = [None] * ndim\n\n        if self.join_axes is None:\n            for i in range(ndim):\n                if i == self.axis:\n                    continue\n                new_axes[i] = self._get_comb_axis(i)\n\n        else:\n            # GH 21951\n            warnings.warn(\n                \"The join_axes-keyword is deprecated. Use .reindex or \"\n                \".reindex_like on the result to achieve the same \"\n                \"functionality.\",\n                FutureWarning,\n                stacklevel=4,\n            )\n\n            if len(self.join_axes) != ndim - 1:\n                raise AssertionError(\n                    \"length of join_axes must be equal \"\n                    \"to {length}\".format(length=ndim - 1)\n                )\n\n            # ufff...\n            indices = list(range(ndim))\n            indices.remove(self.axis)\n\n            for i, ax in zip(indices, self.join_axes):\n                new_axes[i] = ax\n\n        new_axes[self.axis] = self._get_concat_axis()\n        return new_axes",
        "begin_line": 486,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_comb_axis#522",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_comb_axis(self, i: int)",
        "snippet": "    def _get_comb_axis(self, i: int) -> Index:\n        data_axis = self.objs[0]._get_block_manager_axis(i)\n        return get_objs_combined_axis(\n            self.objs, axis=data_axis, intersect=self.intersect, sort=self.sort\n        )",
        "begin_line": 522,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.489292667099286e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._get_concat_axis#528",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._get_concat_axis(self)",
        "snippet": "    def _get_concat_axis(self) -> Index:\n        \"\"\"\n        Return index to be used along concatenation axis.\n        \"\"\"\n        if self._is_series:\n            if self.axis == 0:\n                indexes = [x.index for x in self.objs]\n            elif self.ignore_index:\n                idx = ibase.default_index(len(self.objs))\n                return idx\n            elif self.keys is None:\n                names: List = [None] * len(self.objs)\n                num = 0\n                has_names = False\n                for i, x in enumerate(self.objs):\n                    if not isinstance(x, Series):\n                        raise TypeError(\n                            \"Cannot concatenate type 'Series' \"\n                            \"with object of type {type!r}\".format(type=type(x).__name__)\n                        )\n                    if x.name is not None:\n                        names[i] = x.name\n                        has_names = True\n                    else:\n                        names[i] = num\n                        num += 1\n                if has_names:\n                    return Index(names)\n                else:\n                    return ibase.default_index(len(self.objs))\n            else:\n                return ensure_index(self.keys).set_names(self.names)\n        else:\n            indexes = [x._data.axes[self.axis] for x in self.objs]\n\n        if self.ignore_index:\n            idx = ibase.default_index(sum(len(i) for i in indexes))\n            return idx\n\n        if self.keys is None:\n            concat_axis = _concat_indexes(indexes)\n        else:\n            concat_axis = _make_concat_multiindex(\n                indexes, self.keys, self.levels, self.names\n            )\n\n        self._maybe_check_integrity(concat_axis)\n\n        return concat_axis",
        "begin_line": 528,
        "end_line": 576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity#578",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat._Concatenator",
        "signature": "pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self, concat_index: Index)",
        "snippet": "    def _maybe_check_integrity(self, concat_index: Index):\n        if self.verify_integrity:\n            if not concat_index.is_unique:\n                overlap = concat_index[concat_index.duplicated()].unique()\n                raise ValueError(\n                    \"Indexes have overlapping values: \"\n                    \"{overlap!s}\".format(overlap=overlap)\n                )",
        "begin_line": 578,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._concat_indexes#588",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._concat_indexes(indexes)",
        "snippet": "def _concat_indexes(indexes) -> Index:\n    return indexes[0].append(indexes[1:])",
        "begin_line": 588,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.541077969649399e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.concat._make_concat_multiindex#592",
        "src_path": "pandas/core/reshape/concat.py",
        "class_name": "pandas.core.reshape.concat",
        "signature": "pandas.core.reshape.concat._make_concat_multiindex(indexes, keys, levels=None, names=None)",
        "snippet": "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n\n    if (levels is None and isinstance(keys[0], tuple)) or (\n        levels is not None and len(levels) > 1\n    ):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n\n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n\n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n\n        # things are potentially different sizes, so compute the exact codes\n        # for each level and pass those to MultiIndex.from_arrays\n\n        for hlevel, level in zip(zipped, levels):\n            to_concat = []\n            for key, index in zip(hlevel, indexes):\n                try:\n                    i = level.get_loc(key)\n                except KeyError:\n                    raise ValueError(\n                        \"Key {key!s} not in level {level!s}\".format(\n                            key=key, level=level\n                        )\n                    )\n\n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n\n        concat_index = _concat_indexes(indexes)\n\n        # these go at the end\n        if isinstance(concat_index, MultiIndex):\n            levels.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            levels.append(categories)\n            codes_list.append(codes)\n\n        if len(names) == len(levels):\n            names = list(names)\n        else:\n            # make sure that all of the passed indices have the same nlevels\n            if not len({idx.nlevels for idx in indexes}) == 1:\n                raise AssertionError(\n                    \"Cannot concat indices that do\"\n                    \" not have the same number of levels\"\n                )\n\n            # also copies\n            names = names + get_consensus_names(indexes)\n\n        return MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n\n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n\n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n\n    # construct codes\n    new_codes = []\n\n    # do something a bit more speedy\n\n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n\n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(\n                \"Values not found in passed level: {hlevel!s}\".format(\n                    hlevel=hlevel[mask]\n                )\n            )\n\n        new_codes.append(np.repeat(mapped, n))\n\n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(n), kpieces))\n\n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
        "begin_line": 592,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.missing.mask_zero_div_zero#73",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.mask_zero_div_zero(x, y, result)",
        "snippet": "def mask_zero_div_zero(x, y, result):\n    \"\"\"\n    Set results of 0 / 0 or 0 // 0 to np.nan, regardless of the dtypes\n    of the numerator or the denominator.\n\n    Parameters\n    ----------\n    x : ndarray\n    y : ndarray\n    result : ndarray\n\n    Returns\n    -------\n    filled_result : ndarray\n\n    Examples\n    --------\n    >>> x = np.array([1, 0, -1], dtype=np.int64)\n    >>> y = 0       # int 0; numpy behavior is different with float\n    >>> result = x / y\n    >>> result      # raw numpy result does not fill division by zero\n    array([0, 0, 0])\n    >>> mask_zero_div_zero(x, y, result)\n    array([ inf,  nan, -inf])\n    \"\"\"\n    if not isinstance(result, np.ndarray):\n        # FIXME: SparseArray would raise TypeError with np.putmask\n        return result\n\n    if is_scalar(y):\n        y = np.array(y)\n\n    zmask = y == 0\n\n    if isinstance(zmask, bool):\n        # FIXME: numpy did not evaluate pointwise, seen in docs build\n        return result\n\n    if zmask.any():\n        shape = result.shape\n\n        # Flip sign if necessary for -0.0\n        zneg_mask = zmask & np.signbit(y)\n        zpos_mask = zmask & ~zneg_mask\n\n        nan_mask = (zmask & (x == 0)).ravel()\n        with np.errstate(invalid=\"ignore\"):\n            neginf_mask = ((zpos_mask & (x < 0)) | (zneg_mask & (x > 0))).ravel()\n            posinf_mask = ((zpos_mask & (x > 0)) | (zneg_mask & (x < 0))).ravel()\n\n        if nan_mask.any() or neginf_mask.any() or posinf_mask.any():\n            # Fill negative/0 with -inf, positive/0 with +inf, 0/0 with NaN\n            result = result.astype(\"float64\", copy=False).ravel()\n\n            np.putmask(result, nan_mask, np.nan)\n            np.putmask(result, posinf_mask, np.inf)\n            np.putmask(result, neginf_mask, -np.inf)\n\n            result = result.reshape(shape)\n\n    return result",
        "begin_line": 73,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.util.hashing._combine_hash_arrays#29",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._combine_hash_arrays(arrays, num_items: int)",
        "snippet": "def _combine_hash_arrays(arrays, num_items: int):\n    \"\"\"\n    Parameters\n    ----------\n    arrays : generator\n    num_items : int\n\n    Should be the same as CPython's tupleobject.c\n    \"\"\"\n    try:\n        first = next(arrays)\n    except StopIteration:\n        return np.array([], dtype=np.uint64)\n\n    arrays = itertools.chain([first], arrays)\n\n    mult = np.uint64(1000003)\n    out = np.zeros_like(first) + np.uint64(0x345678)\n    for i, a in enumerate(arrays):\n        inverse_i = num_items - i\n        out ^= a\n        out *= mult\n        mult += np.uint64(82520 + inverse_i + inverse_i)\n    assert i + 1 == num_items, \"Fed in wrong num_items\"\n    out += np.uint64(97531)\n    return out",
        "begin_line": 29,
        "end_line": 54,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.285443683520327e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_array#243",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_array(vals, encoding: str='utf8', hash_key: str=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_array(\n    vals,\n    encoding: str = \"utf8\",\n    hash_key: str = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Given a 1d array, return an array of deterministic integers.\n\n    Parameters\n    ----------\n    vals : ndarray, Categorical\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    1d uint64 numpy array of hash values, same length as the vals\n    \"\"\"\n\n    if not hasattr(vals, \"dtype\"):\n        raise TypeError(\"must pass a ndarray-like\")\n    dtype = vals.dtype\n\n    # For categoricals, we hash the categories, then remap the codes to the\n    # hash values. (This check is above the complex check so that we don't ask\n    # numpy if categorical is a subdtype of complex, as it will choke).\n    if is_categorical_dtype(dtype):\n        return _hash_categorical(vals, encoding, hash_key)\n    elif is_extension_array_dtype(dtype):\n        vals, _ = vals._values_for_factorize()\n        dtype = vals.dtype\n\n    # we'll be working with everything as 64-bit values, so handle this\n    # 128-bit value early\n    if np.issubdtype(dtype, np.complex128):\n        return hash_array(np.real(vals)) + 23 * hash_array(np.imag(vals))\n\n    # First, turn whatever array this is into unsigned 64-bit ints, if we can\n    # manage it.\n    elif isinstance(dtype, np.bool):\n        vals = vals.astype(\"u8\")\n    elif issubclass(dtype.type, (np.datetime64, np.timedelta64)):\n        vals = vals.view(\"i8\").astype(\"u8\", copy=False)\n    elif issubclass(dtype.type, np.number) and dtype.itemsize <= 8:\n        vals = vals.view(\"u{}\".format(vals.dtype.itemsize)).astype(\"u8\")\n    else:\n        # With repeated values, its MUCH faster to categorize object dtypes,\n        # then hash and rename categories. We allow skipping the categorization\n        # when the values are known/likely to be unique.\n        if categorize:\n            from pandas import factorize, Categorical, Index\n\n            codes, categories = factorize(vals, sort=False)\n            cat = Categorical(codes, Index(categories), ordered=False, fastpath=True)\n            return _hash_categorical(cat, encoding, hash_key)\n\n        try:\n            vals = hashing.hash_object_array(vals, hash_key, encoding)\n        except TypeError:\n            # we have mixed types\n            vals = hashing.hash_object_array(\n                vals.astype(str).astype(object), hash_key, encoding\n            )\n\n    # Then, redistribute these 64-bit ints within the space of 64-bit ints\n    vals ^= vals >> 30\n    vals *= np.uint64(0xBF58476D1CE4E5B9)\n    vals ^= vals >> 27\n    vals *= np.uint64(0x94D049BB133111EB)\n    vals ^= vals >> 31\n    return vals",
        "begin_line": 243,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.flatten#38",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.flatten(l)",
        "snippet": "def flatten(l):\n    \"\"\"\n    Flatten an arbitrarily nested sequence.\n\n    Parameters\n    ----------\n    l : sequence\n        The non string sequence to flatten\n\n    Notes\n    -----\n    This doesn't consider strings sequences.\n\n    Returns\n    -------\n    flattened : generator\n    \"\"\"\n    for el in l:\n        if _iterable_not_string(el):\n            for s in flatten(el):\n                yield s\n        else:\n            yield el",
        "begin_line": 38,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.consensus_name_attr#63",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.consensus_name_attr(objs)",
        "snippet": "def consensus_name_attr(objs):\n    name = objs[0].name\n    for obj in objs[1:]:\n        try:\n            if obj.name != name:\n                name = None\n        except ValueError:\n            name = None\n    return name",
        "begin_line": 63,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#84",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value)",
        "snippet": "def maybe_box_datetimelike(value):\n    # turn a datetime like into a Timestamp/timedelta as needed\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#98",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n    \"\"\"\n    na_msg = \"cannot index with vector containing NA / NaN values\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(values_from_object(key))\n\n            if not lib.is_bool_array(key):\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            # an ndarray with bool-dtype by definition has no missing values.\n            # So we only need to check for NAs in ExtensionArrays\n            if is_extension_array_dtype(key.dtype):\n                if np.any(key.isna()):\n                    raise ValueError(na_msg)\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 98,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007656967840735069,
            "pseudo_dstar_susp": 0.003484320557491289,
            "pseudo_tarantula_susp": 0.0005963029218843172,
            "pseudo_op2_susp": 0.003484320557491289,
            "pseudo_barinel_susp": 0.0005963029218843172
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#149",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val == int(val):\n        return int(val)\n    return val",
        "begin_line": 149,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0017699115044247787,
            "pseudo_tarantula_susp": 0.0004692632566870014,
            "pseudo_op2_susp": 0.0017699115044247787,
            "pseudo_barinel_susp": 0.0004692632566870014
        }
    },
    {
        "name": "pandas.core.common.not_none#167",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.395497569710924e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.any_none#174",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.all_none#181",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args):\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 181,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000980392156862745,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.0005296610169491525,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.0005296610169491525
        }
    },
    {
        "name": "pandas.core.common.any_not_none#188",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_not_none(*args)",
        "snippet": "def any_not_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is not None.\n    \"\"\"\n    return any(arg is not None for arg in args)",
        "begin_line": 188,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008285004142502071,
            "pseudo_dstar_susp": 0.004464285714285714,
            "pseudo_tarantula_susp": 0.0006369426751592356,
            "pseudo_op2_susp": 0.004464285714285714,
            "pseudo_barinel_susp": 0.0006369426751592356
        }
    },
    {
        "name": "pandas.core.common.count_not_none#202",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args):\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 202,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007751937984496124,
            "pseudo_dstar_susp": 0.0036363636363636364,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.0036363636363636364,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#217",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 217,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000649772579597141,
            "pseudo_dstar_susp": 0.0021929824561403508,
            "pseudo_tarantula_susp": 0.0005078720162519045,
            "pseudo_op2_susp": 0.0021929824561403508,
            "pseudo_barinel_susp": 0.0005078720162519045
        }
    },
    {
        "name": "pandas.core.common.index_labels_to_array#240",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.index_labels_to_array(labels, dtype=None)",
        "snippet": "def index_labels_to_array(labels, dtype=None):\n    \"\"\"\n    Transform label or iterable of labels to array, for use in Index.\n\n    Parameters\n    ----------\n    dtype : dtype\n        If specified, use as dtype of the resulting array, otherwise infer.\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(labels, (str, tuple)):\n        labels = [labels]\n\n    if not isinstance(labels, (list, np.ndarray)):\n        try:\n            labels = list(labels)\n        except TypeError:  # non-iterable\n            labels = [labels]\n\n    labels = asarray_tuplesafe(labels, dtype=dtype)\n\n    return labels",
        "begin_line": 240,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.maybe_make_list#267",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_make_list(obj)",
        "snippet": "def maybe_make_list(obj):\n    if obj is not None and not isinstance(obj, (tuple, list)):\n        return [obj]\n    return obj",
        "begin_line": 267,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004803073967339097,
            "pseudo_dstar_susp": 0.0004789272030651341,
            "pseudo_tarantula_susp": 0.0006872852233676976,
            "pseudo_op2_susp": 0.0004789272030651341,
            "pseudo_barinel_susp": 0.0006872852233676976
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#273",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable, Any])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable, Any]) -> Union[list, Any]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 273,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006752194463200541,
            "pseudo_dstar_susp": 0.0024509803921568627,
            "pseudo_tarantula_susp": 0.0005336179295624333,
            "pseudo_op2_susp": 0.0024509803921568627,
            "pseudo_barinel_susp": 0.0005336179295624333
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#282",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj):\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 282,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.056568348373811e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.is_true_slices#294",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_true_slices(l)",
        "snippet": "def is_true_slices(l):\n    \"\"\"\n    Find non-trivial slices in \"l\": return a list of booleans with same length.\n    \"\"\"\n    return [isinstance(k, slice) and not is_null_slice(k) for k in l]",
        "begin_line": 294,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.is_full_slice#302",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_full_slice(obj, l)",
        "snippet": "def is_full_slice(obj, l):\n    \"\"\"\n    We have a full length slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice) and obj.start == 0 and obj.stop == l and obj.step is None\n    )",
        "begin_line": 302,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.get_callable_name#311",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.get_callable_name(obj)",
        "snippet": "def get_callable_name(obj):\n    # typical case has name\n    if hasattr(obj, \"__name__\"):\n        return getattr(obj, \"__name__\")\n    # some objects don't; could recurse\n    if isinstance(obj, partial):\n        return get_callable_name(obj.func)\n    # fall back to class name\n    if hasattr(obj, \"__call__\"):\n        return type(obj).__name__\n    # everything failed (probably because the argument\n    # wasn't actually callable); we return None\n    # instead of the empty string in this case to allow\n    # distinguishing between no name and a name of ''\n    return None",
        "begin_line": 311,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#328",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 328,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007739938080495357,
            "pseudo_dstar_susp": 0.0036101083032490976,
            "pseudo_tarantula_susp": 0.0005998800239952009,
            "pseudo_op2_susp": 0.0036101083032490976,
            "pseudo_barinel_susp": 0.0005998800239952009
        }
    },
    {
        "name": "pandas.core.common.get_rename_function#462",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.get_rename_function(mapper)",
        "snippet": "def get_rename_function(mapper):\n    \"\"\"\n    Returns a function that will map names/labels, dependent if mapper\n    is a dict, Series or just a function.\n    \"\"\"\n    if isinstance(mapper, (abc.Mapping, ABCSeries)):\n\n        def f(x):\n            if x in mapper:\n                return mapper[x]\n            else:\n                return x\n\n    else:\n        f = mapper\n\n    return f",
        "begin_line": 462,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.common.f#469",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.f(x)",
        "snippet": "        def f(x):\n            if x in mapper:\n                return mapper[x]\n            else:\n                return x",
        "begin_line": 469,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#71",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = unique(arg[:check_count])\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 71,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001059322033898305,
            "pseudo_dstar_susp": 0.0006277463904582549,
            "pseudo_tarantula_susp": 0.001152073732718894,
            "pseudo_op2_susp": 0.0006277463904582549,
            "pseudo_barinel_susp": 0.001152073732718894
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#127",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series()\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, True, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 127,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001059322033898305,
            "pseudo_dstar_susp": 0.0006277463904582549,
            "pseudo_tarantula_susp": 0.001152073732718894,
            "pseudo_op2_susp": 0.0006277463904582549,
            "pseudo_barinel_susp": 0.001152073732718894
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#161",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        array of datetimes to be boxed\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 161,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010964912280701754,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0013123359580052493,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0013123359580052493
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#265",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, box, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n\n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            return arg.tz_localize(tz)\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            # GH 23758: We may still need to localize the result with tz\n            # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n            # result will be naive but in UTC\n            try:\n                result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            except AttributeError:\n                # Regular Index from 'ignore' path\n                return result\n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                    raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, box, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                return DatetimeIndex._simple_new(values, name=name, tz=tz)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        if box:\n            # We can take a shortcut since the datetime64 numpy array\n            # is in UTC\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        else:\n            # Convert the datetime64 numpy array to an numpy array\n            # of datetime objects\n            result = [Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n\n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    return result",
        "begin_line": 265,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010964912280701754,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0013123359580052493,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0013123359580052493
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#561",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, box=True, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    box=True,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series DataFrame/dict-like\n        The object to convert to a datetime.\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    box : bool, default True\n        - If True returns a DatetimeIndex or Index-like object\n        - If False returns ndarray of values.\n\n        .. deprecated:: 0.25.0\n            Use :meth:`Series.to_numpy` or :meth:`Timestamp.to_datetime64`\n            instead to get an ndarray of values or numpy.datetime64,\n            respectively.\n\n    format : str, default None\n        The strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior.\n    exact : bool, True by default\n        Behaves as:\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        The unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings, and if it can be inferred, switch to a faster\n        method of parsing them. In some cases this can increase the parsing\n        speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True.\n\n    Returns\n    -------\n    datetime\n        If parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s, infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, True, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, box, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, box, format)\n    elif is_list_like(arg):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box)\n        else:\n            result = convert_listlike(arg, box, format)\n    else:\n        result = convert_listlike(np.array([arg]), box, format)[0]\n\n    return result",
        "begin_line": 561,
        "end_line": 786,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013850415512465374,
            "pseudo_dstar_susp": 0.0007158196134574087,
            "pseudo_tarantula_susp": 0.001692047377326565,
            "pseudo_op2_susp": 0.0007158196134574087,
            "pseudo_barinel_susp": 0.001692047377326565
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate._getter#76",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate._getter(self)",
        "snippet": "            def _getter(self):\n                return self._delegate_property_get(name)",
        "begin_line": 76,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.536524890329964e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#90",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.accessor.CachedAccessor.__get__#169",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.CachedAccessor",
        "signature": "pandas.core.accessor.CachedAccessor.__get__(self, obj, cls)",
        "snippet": "    def __get__(self, obj, cls):\n        if obj is None:\n            # we're accessing the attribute of the class, i.e., Dataset.geo\n            return self._accessor\n        accessor_obj = self._accessor(obj)\n        # Replace the property with the accessor object. Inspired by:\n        # http://www.pydanny.com/cached-property.html\n        # We need to use object.__setattr__ because we overwrite __setattr__ on\n        # NDFrame\n        object.__setattr__(obj, self._name, accessor_obj)\n        return accessor_obj",
        "begin_line": 169,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#29",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 29,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.015399422521656e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference._iterable_not_string#70",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference._iterable_not_string(obj)",
        "snippet": "def _iterable_not_string(obj) -> bool:\n    \"\"\"\n    Check if the object is an iterable but not a string.\n\n    Parameters\n    ----------\n    obj : The object to check.\n\n    Returns\n    -------\n    is_iter_not_string : bool\n        Whether `obj` is a non-string iterable.\n\n    Examples\n    --------\n    >>> _iterable_not_string([1, 2, 3])\n    True\n    >>> _iterable_not_string(\"foo\")\n    False\n    >>> _iterable_not_string(1)\n    False\n    \"\"\"\n\n    return isinstance(obj, abc.Iterable) and not isinstance(obj, str)",
        "begin_line": 70,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.737098344693281e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_iterator#96",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_iterator(obj)",
        "snippet": "def is_iterator(obj) -> bool:\n    \"\"\"\n    Check if the object is an iterator.\n\n    For example, lists are considered iterators\n    but not strings or datetime objects.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_iter : bool\n        Whether `obj` is an iterator.\n\n    Examples\n    --------\n    >>> is_iterator([1, 2, 3])\n    True\n    >>> is_iterator(datetime(2017, 1, 1))\n    False\n    >>> is_iterator(\"foo\")\n    False\n    >>> is_iterator(1)\n    False\n    \"\"\"\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return hasattr(obj, \"__next__\")",
        "begin_line": 96,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005605381165919282,
            "pseudo_dstar_susp": 0.0015625,
            "pseudo_tarantula_susp": 0.00044483985765124553,
            "pseudo_op2_susp": 0.0015625,
            "pseudo_barinel_susp": 0.00044483985765124553
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_file_like#130",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_file_like(obj)",
        "snippet": "def is_file_like(obj) -> bool:\n    \"\"\"\n    Check if the object is a file-like object.\n\n    For objects to be considered file-like, they must\n    be an iterator AND have either a `read` and/or `write`\n    method as an attribute.\n\n    Note: file-like objects must be iterable, but\n    iterable objects need not be file-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_file_like : bool\n        Whether `obj` has file-like properties.\n\n    Examples\n    --------\n    >>> buffer(StringIO(\"data\"))\n    >>> is_file_like(buffer)\n    True\n    >>> is_file_like([1, 2, 3])\n    False\n    \"\"\"\n\n    if not (hasattr(obj, \"read\") or hasattr(obj, \"write\")):\n        return False\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return True",
        "begin_line": 130,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_re#168",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_re(obj)",
        "snippet": "def is_re(obj) -> bool:\n    \"\"\"\n    Check if the object is a regex pattern instance.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_regex : bool\n        Whether `obj` is a regex pattern.\n\n    Examples\n    --------\n    >>> is_re(re.compile(\".*\"))\n    True\n    >>> is_re(\"foo\")\n    False\n    \"\"\"\n    return isinstance(obj, Pattern)",
        "begin_line": 168,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#220",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 220,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008163265306122449,
            "pseudo_dstar_susp": 0.004329004329004329,
            "pseudo_tarantula_susp": 0.0006317119393556538,
            "pseudo_op2_susp": 0.004329004329004329,
            "pseudo_barinel_susp": 0.0006317119393556538
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#299",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 299,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_named_tuple#331",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_named_tuple(obj)",
        "snippet": "def is_named_tuple(obj) -> bool:\n    \"\"\"\n    Check if the object is a named tuple.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_named_tuple : bool\n        Whether `obj` is a named tuple.\n\n    Examples\n    --------\n    >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n    >>> p = Point(1, 2)\n    >>>\n    >>> is_named_tuple(p)\n    True\n    >>> is_named_tuple((1, 2))\n    False\n    \"\"\"\n\n    return isinstance(obj, tuple) and hasattr(obj, \"_fields\")",
        "begin_line": 331,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.68002672010688e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#358",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 358,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006430868167202572,
            "pseudo_dstar_susp": 0.0021321961620469083,
            "pseudo_tarantula_susp": 0.0006648936170212766,
            "pseudo_op2_susp": 0.0021321961620469083,
            "pseudo_barinel_susp": 0.0006648936170212766
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#395",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 395,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.259001161440186e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#83",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            name = start.name if name is None else name\n            start = start._range\n            return cls._simple_new(start, dtype=dtype, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, dtype=dtype, name=name)",
        "begin_line": 83,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006706908115358819,
            "pseudo_dstar_susp": 0.0023923444976076554,
            "pseudo_tarantula_susp": 0.0005296610169491525,
            "pseudo_op2_susp": 0.0023923444976076554,
            "pseudo_barinel_susp": 0.0005296610169491525
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.from_range#114",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.from_range(cls, data, name=None, dtype=None)",
        "snippet": "    def from_range(cls, data, name=None, dtype=None):\n        \"\"\"\n        Create RangeIndex from a range object.\n\n        Returns\n        -------\n        RangeIndex\n        \"\"\"\n        if not isinstance(data, range):\n            raise TypeError(\n                \"{0}(...) must be called with object coercible to a \"\n                \"range, {1} was passed\".format(cls.__name__, repr(data))\n            )\n\n        cls._validate_dtype(dtype)\n        return cls._simple_new(data, dtype=dtype, name=name)",
        "begin_line": 114,
        "end_line": 129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#132",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values, name=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None):\n        result = object.__new__(cls)\n\n        # handle passed None, non-integers\n        if values is None:\n            # empty\n            values = range(0, 0, 1)\n        elif not isinstance(values, range):\n            return Index(values, dtype=dtype, name=name)\n\n        result._range = values\n        result.name = name\n\n        result._reset_identity()\n        return result",
        "begin_line": 132,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006353240152477764,
            "pseudo_dstar_susp": 0.0020491803278688526,
            "pseudo_tarantula_susp": 0.0004906771344455348,
            "pseudo_op2_susp": 0.0020491803278688526,
            "pseudo_barinel_susp": 0.0004906771344455348
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004091653027823241,
            "pseudo_dstar_susp": 0.0004091653027823241,
            "pseudo_tarantula_susp": 0.00042517006802721087,
            "pseudo_op2_susp": 0.0004091653027823241,
            "pseudo_barinel_susp": 0.00042517006802721087
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._int64index#171",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._int64index(self)",
        "snippet": "    def _int64index(self):\n        return Int64Index._simple_new(self._data, name=self.name)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005564830272676684,
            "pseudo_dstar_susp": 0.0005099439061703213,
            "pseudo_tarantula_susp": 0.0007604562737642585,
            "pseudo_op2_susp": 0.0005099439061703213,
            "pseudo_barinel_susp": 0.0007604562737642585
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_with_header#200",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_with_header(self, header, na_rep='NaN', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n        return header + list(map(pprint_thing, self._range))",
        "begin_line": 200,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004084967320261438,
            "pseudo_dstar_susp": 0.0004084967320261438,
            "pseudo_tarantula_susp": 0.000423908435777872,
            "pseudo_op2_susp": 0.0004084967320261438,
            "pseudo_barinel_susp": 0.000423908435777872
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004091653027823241,
            "pseudo_dstar_susp": 0.0004091653027823241,
            "pseudo_tarantula_susp": 0.00042517006802721087,
            "pseudo_op2_susp": 0.0004091653027823241,
            "pseudo_barinel_susp": 0.00042517006802721087
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004084967320261438,
            "pseudo_dstar_susp": 0.0004084967320261438,
            "pseudo_tarantula_susp": 0.000423908435777872,
            "pseudo_op2_susp": 0.0004084967320261438,
            "pseudo_barinel_susp": 0.000423908435777872
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.162568558575214e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_unique#321",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\" return if the index has unique values \"\"\"\n        return True",
        "begin_line": 321,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.165931732810714e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.is_monotonic_increasing#326",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        return self._range.step > 0 or len(self) <= 1",
        "begin_line": 326,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__contains__#337",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__contains__(self, key: Union[int, np.integer])",
        "snippet": "    def __contains__(self, key: Union[int, np.integer]) -> bool:\n        hash(key)\n        try:\n            key = ensure_python_int(key)\n        except TypeError:\n            return False\n        return key in self._range",
        "begin_line": 337,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_loc#346",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if is_integer(key) and method is None and tolerance is None:\n            new_key = int(key)\n            try:\n                return self._range.index(new_key)\n            except ValueError:\n                raise KeyError(key)\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 346,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_indexer#356",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n\n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # GH 28678: work on reversed range for simplicity\n            reverse = self._range[::-1]\n            start, stop, step = reverse.start, reverse.stop, reverse.step\n\n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n\n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n\n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)",
        "begin_line": 356,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.tolist#384",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.tolist(self)",
        "snippet": "    def tolist(self):\n        return list(self._range)",
        "begin_line": 384,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._shallow_copy#388",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            name = kwargs.get(\"name\", self.name)\n            return self._simple_new(self._range, name=name)\n        else:\n            kwargs.setdefault(\"name\", self.name)\n            return self._int64index._shallow_copy(values, **kwargs)",
        "begin_line": 388,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000574052812858783,
            "pseudo_dstar_susp": 0.0005122950819672131,
            "pseudo_tarantula_susp": 0.0007656967840735069,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0007656967840735069
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.copy#397",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.copy(self, name=None, deep=False, dtype=None, **kwargs)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, **kwargs):\n        self._validate_dtype(dtype)\n        if name is None:\n            name = self.name\n        return self.from_range(self._range, name=name)",
        "begin_line": 397,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.argsort#424",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.argsort(self, *args, **kwargs)",
        "snippet": "    def argsort(self, *args, **kwargs):\n        \"\"\"\n        Returns the indices that would sort the index and its\n        underlying data.\n\n        Returns\n        -------\n        argsorted : numpy array\n\n        See Also\n        --------\n        numpy.ndarray.argsort\n        \"\"\"\n        nv.validate_argsort(args, kwargs)\n\n        if self._range.step > 0:\n            return np.arange(len(self))\n        else:\n            return np.arange(len(self) - 1, -1, -1)",
        "begin_line": 424,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#444",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 444,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004280821917808219,
            "pseudo_dstar_susp": 0.0004280821917808219,
            "pseudo_tarantula_susp": 0.0005058168942842691,
            "pseudo_op2_susp": 0.0004280821917808219,
            "pseudo_barinel_susp": 0.0005058168942842691
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.intersection#452",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        \"\"\"\n        Form the intersection of two Index objects.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Sort the resulting index if possible\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default to ``False`` to match the behaviour\n               from before 0.24.0.\n\n        Returns\n        -------\n        intersection : Index\n        \"\"\"\n        self._validate_sort_keyword(sort)\n\n        if self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not isinstance(other, RangeIndex):\n            return super().intersection(other, sort=sort)\n\n        if not len(self) or not len(other):\n            return self._simple_new(None)\n\n        first = self._range[::-1] if self.step < 0 else self._range\n        second = other._range[::-1] if other.step < 0 else other._range\n\n        # check whether intervals intersect\n        # deals with in- and decreasing ranges\n        int_low = max(first.start, second.start)\n        int_high = min(first.stop, second.stop)\n        if int_high <= int_low:\n            return self._simple_new(None)\n\n        # Method hint: linear Diophantine equation\n        # solve intersection problem\n        # performance hint: for identical step sizes, could use\n        # cheaper alternative\n        gcd, s, t = self._extended_gcd(first.step, second.step)\n\n        # check whether element sets intersect\n        if (first.start - second.start) % gcd:\n            return self._simple_new(None)\n\n        # calculate parameters for the RangeIndex describing the\n        # intersection disregarding the lower bounds\n        tmp_start = first.start + (second.start - first.start) * first.step // gcd * s\n        new_step = first.step * second.step // gcd\n        new_range = range(tmp_start, int_high, new_step)\n        new_index = self._simple_new(new_range)\n\n        # adjust index to limiting interval\n        new_start = new_index._min_fitting_element(int_low)\n        new_range = range(new_start, new_index.stop, new_index.step)\n        new_index = self._simple_new(new_range)\n\n        if (self.step < 0 and other.step < 0) is not (new_index.step < 0):\n            new_index = new_index[::-1]\n        if sort is None:\n            new_index = new_index.sort_values()\n        return new_index",
        "begin_line": 452,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._min_fitting_element#522",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._min_fitting_element(self, lower_limit)",
        "snippet": "    def _min_fitting_element(self, lower_limit):\n        \"\"\"Returns the smallest element greater than or equal to the limit\"\"\"\n        no_steps = -(-(lower_limit - self.start) // abs(self.step))\n        return self.start + abs(self.step) * no_steps",
        "begin_line": 522,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._extended_gcd#532",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._extended_gcd(self, a, b)",
        "snippet": "    def _extended_gcd(self, a, b):\n        \"\"\"\n        Extended Euclidean algorithms to solve Bezout's identity:\n           a*x + b*y = gcd(x, y)\n        Finds one particular solution for x, y: s, t\n        Returns: gcd, s, t\n        \"\"\"\n        s, old_s = 0, 1\n        t, old_t = 1, 0\n        r, old_r = b, a\n        while r:\n            quotient = old_r // r\n            old_r, r = r, old_r - quotient * r\n            old_s, s = s, old_s - quotient * s\n            old_t, t = t, old_t - quotient * t\n        return old_r, old_s, old_t",
        "begin_line": 532,
        "end_line": 547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._union#549",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Form the union of two Index objects and sorts if possible\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        sort : False or None, default None\n            Whether to sort resulting index. ``sort=None`` returns a\n            monotonically increasing ``RangeIndex`` if possible or a sorted\n            ``Int64Index`` if not. ``sort=False`` always returns an\n            unsorted ``Int64Index``\n\n            .. versionadded:: 0.25.0\n\n        Returns\n        -------\n        union : Index\n        \"\"\"\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        if isinstance(other, RangeIndex) and sort is None:\n            start_s, step_s = self.start, self.step\n            end_s = self.start + self.step * (len(self) - 1)\n            start_o, step_o = other.start, other.step\n            end_o = other.start + other.step * (len(other) - 1)\n            if self.step < 0:\n                start_s, step_s, end_s = end_s, -step_s, start_s\n            if other.step < 0:\n                start_o, step_o, end_o = end_o, -step_o, start_o\n            if len(self) == 1 and len(other) == 1:\n                step_s = step_o = abs(self.start - other.start)\n            elif len(self) == 1:\n                step_s = step_o\n            elif len(other) == 1:\n                step_o = step_s\n            start_r = min(start_s, start_o)\n            end_r = max(end_s, end_o)\n            if step_o == step_s:\n                if (\n                    (start_s - start_o) % step_s == 0\n                    and (start_s - end_o) <= step_s\n                    and (start_o - end_s) <= step_s\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n                if (\n                    (step_s % 2 == 0)\n                    and (abs(start_s - start_o) <= step_s / 2)\n                    and (abs(end_s - end_o) <= step_s / 2)\n                ):\n                    return type(self)(start_r, end_r + step_s / 2, step_s / 2)\n            elif step_o % step_s == 0:\n                if (\n                    (start_o - start_s) % step_s == 0\n                    and (start_o + step_s >= start_s)\n                    and (end_o - step_s <= end_s)\n                ):\n                    return type(self)(start_r, end_r + step_s, step_s)\n            elif step_s % step_o == 0:\n                if (\n                    (start_s - start_o) % step_o == 0\n                    and (start_s + step_o >= start_o)\n                    and (end_s - step_o <= end_o)\n                ):\n                    return type(self)(start_r, end_r + step_o, step_o)\n        return self._int64index._union(other, sort=sort)",
        "begin_line": 549,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.join#619",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        if how == \"outer\" and self is not other:\n            # note: could return RangeIndex in more circumstances\n            return self._int64index.join(other, how, level, return_indexers, sort)\n\n        return super().join(other, how, level, return_indexers, sort)",
        "begin_line": 619,
        "end_line": 624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._concat_same_dtype#626",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._concat_same_dtype(self, indexes, name)",
        "snippet": "    def _concat_same_dtype(self, indexes, name):\n        \"\"\"\n        Concatenates multiple RangeIndex instances. All members of \"indexes\" must\n        be of type RangeIndex; result will be RangeIndex if possible, Int64Index\n        otherwise. E.g.:\n        indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)\n        indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])\n        \"\"\"\n        start = step = next_ = None\n\n        # Filter the empty indexes\n        non_empty_indexes = [obj for obj in indexes if len(obj)]\n\n        for obj in non_empty_indexes:\n            rng: range = obj._range\n\n            if start is None:\n                # This is set by the first non-empty index\n                start = rng.start\n                if step is None and len(rng) > 1:\n                    step = rng.step\n            elif step is None:\n                # First non-empty index had only one element\n                if rng.start == start:\n                    result = Int64Index(np.concatenate([x._values for x in indexes]))\n                    return result.rename(name)\n\n                step = rng.start - start\n\n            non_consecutive = (step != rng.step and len(rng) > 1) or (\n                next_ is not None and rng.start != next_\n            )\n            if non_consecutive:\n                result = Int64Index(np.concatenate([x._values for x in indexes]))\n                return result.rename(name)\n\n            if step is not None:\n                next_ = rng[-1] + step\n\n        if non_empty_indexes:\n            # Get the stop value from \"next\" or alternatively\n            # from the last non-empty index\n            stop = non_empty_indexes[-1].stop if next_ is None else next_\n            return RangeIndex(start, stop, step).rename(name)\n\n        # Here all \"indexes\" had 0 length, i.e. were empty.\n        # In this case return an empty range index.\n        return RangeIndex(0, 0).rename(name)",
        "begin_line": 626,
        "end_line": 673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#675",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 675,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006075334143377885,
            "pseudo_dstar_susp": 0.0017953321364452424,
            "pseudo_tarantula_susp": 0.00047214353163361664,
            "pseudo_op2_susp": 0.0017953321364452424,
            "pseudo_barinel_susp": 0.00047214353163361664
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.size#682",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.size(self)",
        "snippet": "    def size(self) -> int:\n        return len(self)",
        "begin_line": 682,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#685",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError:\n                raise IndexError(\n                    \"index {key} is out of bounds for axis 0 \"\n                    \"with size {size}\".format(key=key, size=len(self))\n                )\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 685,
        "end_line": 709,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__floordiv__#712",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__floordiv__(self, other)",
        "snippet": "    def __floordiv__(self, other):\n\n        if is_integer(other) and other != 0:\n            if len(self) == 0 or self.start % other == 0 and self.step % other == 0:\n                start = self.start // other\n                step = self.step // other\n                stop = start + len(self) * step\n                new_range = range(start, stop, step or 1)\n                return self._simple_new(new_range, name=self.name)\n            if len(self) == 1:\n                start = self.start // other\n                new_range = range(start, start + 1, 1)\n                return self._simple_new(new_range, name=self.name)\n        return self._int64index // other",
        "begin_line": 712,
        "end_line": 725,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._decorators._deprecate_kwarg#177",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators._deprecate_kwarg(func: F)",
        "snippet": "    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)",
        "begin_line": 177,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009832841691248771,
            "pseudo_dstar_susp": 0.0006016847172081829,
            "pseudo_tarantula_susp": 0.0010131712259371835,
            "pseudo_op2_susp": 0.0006016847172081829,
            "pseudo_barinel_susp": 0.0010131712259371835
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#179",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)",
        "begin_line": 179,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009832841691248771,
            "pseudo_dstar_susp": 0.0006016847172081829,
            "pseudo_tarantula_susp": 0.0010131712259371835,
            "pseudo_op2_susp": 0.0006016847172081829,
            "pseudo_barinel_susp": 0.0010131712259371835
        }
    },
    {
        "name": "pandas.util._decorators.decorate#232",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorate(func: F)",
        "snippet": "    def decorate(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)\n\n        kind = inspect.Parameter.POSITIONAL_OR_KEYWORD\n        params = [\n            inspect.Parameter(\"self\", kind),\n            inspect.Parameter(name, kind, default=None),\n            inspect.Parameter(\"index\", kind, default=None),\n            inspect.Parameter(\"columns\", kind, default=None),\n            inspect.Parameter(\"axis\", kind, default=None),\n        ]\n\n        for pname, default in extra_params:\n            params.append(inspect.Parameter(pname, kind, default=default))\n\n        sig = inspect.Signature(params)\n\n        # https://github.com/python/typing/issues/598\n        func.__signature__ = sig  # type: ignore\n        return cast(F, wrapper)",
        "begin_line": 232,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.216199415677255e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#234",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)",
        "begin_line": 234,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009832841691248771,
            "pseudo_dstar_susp": 0.0006016847172081829,
            "pseudo_tarantula_susp": 0.0010131712259371835,
            "pseudo_op2_susp": 0.0006016847172081829,
            "pseudo_barinel_susp": 0.0010131712259371835
        }
    },
    {
        "name": "pandas.util._decorators.Substitution.__init__#291",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Substitution",
        "signature": "pandas.util._decorators.Substitution.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        if args and kwargs:\n            raise AssertionError(\"Only positional or keyword args are allowed\")\n\n        self.params = args or kwargs",
        "begin_line": 291,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._decorators.Substitution.__call__#297",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Substitution",
        "signature": "pandas.util._decorators.Substitution.__call__(self, func: F)",
        "snippet": "    def __call__(self, func: F) -> F:\n        func.__doc__ = func.__doc__ and func.__doc__ % self.params\n        return func",
        "begin_line": 297,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._decorators.Appender.__init__#332",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Appender",
        "signature": "pandas.util._decorators.Appender.__init__(self, addendum: Optional[str], join: str='', indents: int=0)",
        "snippet": "    def __init__(self, addendum: Optional[str], join: str = \"\", indents: int = 0):\n        if indents > 0:\n            self.addendum = indent(addendum, indents=indents)\n        else:\n            self.addendum = addendum\n        self.join = join",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._decorators.Appender.__call__#339",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators.Appender",
        "signature": "pandas.util._decorators.Appender.__call__(self, func: F)",
        "snippet": "    def __call__(self, func: F) -> F:\n        func.__doc__ = func.__doc__ if func.__doc__ else \"\"\n        self.addendum = self.addendum if self.addendum else \"\"\n        docitems = [func.__doc__, self.addendum]\n        func.__doc__ = dedent(self.join.join(docitems))\n        return func",
        "begin_line": 339,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.get_mgr_concatenation_plan#28",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat.get_mgr_concatenation_plan(mgr, indexers)",
        "snippet": "def get_mgr_concatenation_plan(mgr, indexers):\n    \"\"\"\n    Construct concatenation plan for given block manager and indexers.\n\n    Parameters\n    ----------\n    mgr : BlockManager\n    indexers : dict of {axis: indexer}\n\n    Returns\n    -------\n    plan : list of (BlockPlacement, JoinUnit) tuples\n\n    \"\"\"\n    # Calculate post-reindex shape , save for item axis which will be separate\n    # for each block anyway.\n    mgr_shape = list(mgr.shape)\n    for ax, indexer in indexers.items():\n        mgr_shape[ax] = len(indexer)\n    mgr_shape = tuple(mgr_shape)\n\n    if 0 in indexers:\n        ax0_indexer = indexers.pop(0)\n        blknos = algos.take_1d(mgr._blknos, ax0_indexer, fill_value=-1)\n        blklocs = algos.take_1d(mgr._blklocs, ax0_indexer, fill_value=-1)\n    else:\n\n        if mgr._is_single_block:\n            blk = mgr.blocks[0]\n            return [(blk.mgr_locs, JoinUnit(blk, mgr_shape, indexers))]\n\n        ax0_indexer = None\n        blknos = mgr._blknos\n        blklocs = mgr._blklocs\n\n    plan = []\n    for blkno, placements in libinternals.get_blkno_placements(blknos, group=False):\n\n        assert placements.is_slice_like\n\n        join_unit_indexers = indexers.copy()\n\n        shape = list(mgr_shape)\n        shape[0] = len(placements)\n        shape = tuple(shape)\n\n        if blkno == -1:\n            unit = JoinUnit(None, shape)\n        else:\n            blk = mgr.blocks[blkno]\n            ax0_blk_indexer = blklocs[placements.indexer]\n\n            unit_no_ax0_reindexing = (\n                len(placements) == len(blk.mgr_locs)\n                and\n                # Fastpath detection of join unit not\n                # needing to reindex its block: no ax0\n                # reindexing took place and block\n                # placement was sequential before.\n                (\n                    (\n                        ax0_indexer is None\n                        and blk.mgr_locs.is_slice_like\n                        and blk.mgr_locs.as_slice.step == 1\n                    )\n                    or\n                    # Slow-ish detection: all indexer locs\n                    # are sequential (and length match is\n                    # checked above).\n                    (np.diff(ax0_blk_indexer) == 1).all()\n                )\n            )\n\n            # Omit indexer if no item reindexing is required.\n            if unit_no_ax0_reindexing:\n                join_unit_indexers.pop(0, None)\n            else:\n                join_unit_indexers[0] = ax0_blk_indexer\n\n            unit = JoinUnit(blk, shape, join_unit_indexers)\n\n        plan.append((placements, unit))\n\n    return plan",
        "begin_line": 28,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.__init__#115",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.__init__(self, block, shape, indexers=None)",
        "snippet": "    def __init__(self, block, shape, indexers=None):\n        # Passing shape explicitly is required for cases when block is None.\n        if indexers is None:\n            indexers = {}\n        self.block = block\n        self.indexers = indexers\n        self.shape = shape",
        "begin_line": 115,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.needs_filling#129",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.needs_filling(self)",
        "snippet": "    def needs_filling(self):\n        for indexer in self.indexers.values():\n            # FIXME: cache results of indexer == -1 checks.\n            if (indexer == -1).any():\n                return True\n\n        return False",
        "begin_line": 129,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.656017039403621e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.dtype#138",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.dtype(self)",
        "snippet": "    def dtype(self):\n        if self.block is None:\n            raise AssertionError(\"Block is None, no dtype\")\n\n        if not self.needs_filling:\n            return self.block.dtype\n        else:\n            return _get_dtype(maybe_promote(self.block.dtype, self.block.fill_value)[0])",
        "begin_line": 138,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.656017039403621e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.is_na#148",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.is_na(self)",
        "snippet": "    def is_na(self):\n        if self.block is None:\n            return True\n\n        if not self.block._can_hold_na:\n            return False\n\n        # Usually it's enough to check but a small fraction of values to see if\n        # a block is NOT null, chunks should help in such cases.  1000 value\n        # was chosen rather arbitrarily.\n        values = self.block.values\n        if self.block.is_categorical:\n            values_flat = values.categories\n        elif is_sparse(self.block.values.dtype):\n            return False\n        elif self.block.is_extension:\n            values_flat = values\n        else:\n            values_flat = values.ravel(order=\"K\")\n        total_len = values_flat.shape[0]\n        chunk_len = max(total_len // 40, 1000)\n        for i in range(0, total_len, chunk_len):\n            if not isna(values_flat[i : i + chunk_len]).all():\n                return False\n\n        return True",
        "begin_line": 148,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.JoinUnit.get_reindexed_values#175",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat.JoinUnit",
        "signature": "pandas.core.internals.concat.JoinUnit.get_reindexed_values(self, empty_dtype, upcasted_na)",
        "snippet": "    def get_reindexed_values(self, empty_dtype, upcasted_na):\n        if upcasted_na is None:\n            # No upcasting is necessary\n            fill_value = self.block.fill_value\n            values = self.block.get_values()\n        else:\n            fill_value = upcasted_na\n\n            if self.is_na:\n                if getattr(self.block, \"is_object\", False):\n                    # we want to avoid filling with np.nan if we are\n                    # using None; we already know that we are all\n                    # nulls\n                    values = self.block.values.ravel(order=\"K\")\n                    if len(values) and values[0] is None:\n                        fill_value = None\n\n                if getattr(self.block, \"is_datetimetz\", False) or is_datetime64tz_dtype(\n                    empty_dtype\n                ):\n                    if self.block is None:\n                        array = empty_dtype.construct_array_type()\n                        return array(\n                            np.full(self.shape[1], fill_value.value), dtype=empty_dtype\n                        )\n                    pass\n                elif getattr(self.block, \"is_categorical\", False):\n                    pass\n                elif getattr(self.block, \"is_extension\", False):\n                    pass\n                else:\n                    missing_arr = np.empty(self.shape, dtype=empty_dtype)\n                    missing_arr.fill(fill_value)\n                    return missing_arr\n\n            if not self.indexers:\n                if not self.block._can_consolidate:\n                    # preserve these for validation in concat_compat\n                    return self.block.values\n\n            if self.block.is_bool and not self.block.is_categorical:\n                # External code requested filling/upcasting, bool values must\n                # be upcasted to object to avoid being upcasted to numeric.\n                values = self.block.astype(np.object_).values\n            elif self.block.is_extension:\n                values = self.block.values\n            else:\n                # No dtype upcasting is done here, it will be performed during\n                # concatenation itself.\n                values = self.block.get_values()\n\n        if not self.indexers:\n            # If there's no indexing to be done, we want to signal outside\n            # code that this array must be copied explicitly.  This is done\n            # by returning a view and checking `retval.base`.\n            values = values.view()\n\n        else:\n            for ax, indexer in self.indexers.items():\n                values = algos.take_nd(values, indexer, axis=ax, fill_value=fill_value)\n\n        return values",
        "begin_line": 175,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.concatenate_join_units#239",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat.concatenate_join_units(join_units, concat_axis, copy)",
        "snippet": "def concatenate_join_units(join_units, concat_axis, copy):\n    \"\"\"\n    Concatenate values from several join units along selected axis.\n    \"\"\"\n    if concat_axis == 0 and len(join_units) > 1:\n        # Concatenating join units along ax0 is handled in _merge_blocks.\n        raise AssertionError(\"Concatenating join units along axis0\")\n\n    empty_dtype, upcasted_na = _get_empty_dtype_and_na(join_units)\n\n    to_concat = [\n        ju.get_reindexed_values(empty_dtype=empty_dtype, upcasted_na=upcasted_na)\n        for ju in join_units\n    ]\n\n    if len(to_concat) == 1:\n        # Only one block, nothing to concatenate.\n        concat_values = to_concat[0]\n        if copy:\n            if isinstance(concat_values, np.ndarray):\n                # non-reindexed (=not yet copied) arrays are made into a view\n                # in JoinUnit.get_reindexed_values\n                if concat_values.base is not None:\n                    concat_values = concat_values.copy()\n            else:\n                concat_values = concat_values.copy()\n    else:\n        concat_values = concat_compat(to_concat, axis=concat_axis)\n\n    return concat_values",
        "begin_line": 239,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.250144377526606e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat._get_empty_dtype_and_na#271",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._get_empty_dtype_and_na(join_units)",
        "snippet": "def _get_empty_dtype_and_na(join_units):\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n\n    Returned N/A value may be None which means there was no casting involved.\n\n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n\n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n\n        if is_categorical_dtype(dtype):\n            upcast_cls = \"category\"\n        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n        elif issubclass(dtype.type, np.bool_):\n            upcast_cls = \"bool\"\n        elif issubclass(dtype.type, np.object_):\n            upcast_cls = \"object\"\n        elif is_datetime64_dtype(dtype):\n            upcast_cls = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            upcast_cls = \"timedelta\"\n        elif is_sparse(dtype):\n            upcast_cls = dtype.subtype.name\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"object\"\n        elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n\n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], tslibs.NaT\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"M8[ns]\"), tslibs.iNaT\n    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_float_dtype(g):\n                return g, g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.float64, np.nan\n                else:\n                    return g, None\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)",
        "begin_line": 271,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.is_uniform_join_units#378",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat.is_uniform_join_units(join_units)",
        "snippet": "def is_uniform_join_units(join_units):\n    \"\"\"\n    Check if the join units consist of blocks of uniform type that can\n    be concatenated using Block.concat_same_type instead of the generic\n    concatenate_join_units (which uses `concat_compat`).\n\n    \"\"\"\n    return (\n        # all blocks need to have the same type\n        all(type(ju.block) is type(join_units[0].block) for ju in join_units)\n        and  # noqa\n        # no blocks that would get missing values (can lead to type upcasts)\n        # unless we're an extension dtype.\n        all(not ju.is_na or ju.block.is_extension for ju in join_units)\n        and\n        # no blocks with indexers (as then the dimensions do not fit)\n        all(not ju.indexers for ju in join_units)\n        and\n        # only use this path when there is something to concatenate\n        len(join_units) > 1\n    )",
        "begin_line": 378,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat._is_uniform_reindex#401",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._is_uniform_reindex(join_units)",
        "snippet": "def _is_uniform_reindex(join_units) -> bool:\n    return (\n        # TODO: should this be ju.block._can_hold_na?\n        all(ju.block and ju.block.is_extension for ju in join_units)\n        and len({ju.block.dtype.name for ju in join_units}) == 1\n    )",
        "begin_line": 401,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.992518005733865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat._trim_join_unit#409",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._trim_join_unit(join_unit, length)",
        "snippet": "def _trim_join_unit(join_unit, length):\n    \"\"\"\n    Reduce join_unit's shape along item axis to length.\n\n    Extra items that didn't fit are returned as a separate block.\n    \"\"\"\n\n    if 0 not in join_unit.indexers:\n        extra_indexers = join_unit.indexers\n\n        if join_unit.block is None:\n            extra_block = None\n        else:\n            extra_block = join_unit.block.getitem_block(slice(length, None))\n            join_unit.block = join_unit.block.getitem_block(slice(length))\n    else:\n        extra_block = join_unit.block\n\n        extra_indexers = copy.copy(join_unit.indexers)\n        extra_indexers[0] = extra_indexers[0][length:]\n        join_unit.indexers[0] = join_unit.indexers[0][:length]\n\n    extra_shape = (join_unit.shape[0] - length,) + join_unit.shape[1:]\n    join_unit.shape = (length,) + join_unit.shape[1:]\n\n    return JoinUnit(block=extra_block, indexers=extra_indexers, shape=extra_shape)",
        "begin_line": 409,
        "end_line": 434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat.combine_concat_plans#437",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat.combine_concat_plans(plans, concat_axis)",
        "snippet": "def combine_concat_plans(plans, concat_axis):\n    \"\"\"\n    Combine multiple concatenation plans into one.\n\n    existing_plan is updated in-place.\n    \"\"\"\n    if len(plans) == 1:\n        for p in plans[0]:\n            yield p[0], [p[1]]\n\n    elif concat_axis == 0:\n        offset = 0\n        for plan in plans:\n            last_plc = None\n\n            for plc, unit in plan:\n                yield plc.add(offset), [unit]\n                last_plc = plc\n\n            if last_plc is not None:\n                offset += last_plc.as_slice.stop\n\n    else:\n        num_ended = [0]\n\n        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval\n\n        plans = list(map(iter, plans))\n        next_items = list(map(_next_or_none, plans))\n\n        while num_ended[0] != len(next_items):\n            if num_ended[0] > 0:\n                raise ValueError(\"Plan shapes are not aligned\")\n\n            placements, units = zip(*next_items)\n\n            lengths = list(map(len, placements))\n            min_len, max_len = min(lengths), max(lengths)\n\n            if min_len == max_len:\n                yield placements[0], units\n                next_items[:] = map(_next_or_none, plans)\n            else:\n                yielded_placement = None\n                yielded_units = [None] * len(next_items)\n                for i, (plc, unit) in enumerate(next_items):\n                    yielded_units[i] = unit\n                    if len(plc) > min_len:\n                        # _trim_join_unit updates unit in place, so only\n                        # placement needs to be sliced to skip min_len.\n                        next_items[i] = (plc[min_len:], _trim_join_unit(unit, min_len))\n                    else:\n                        yielded_placement = plc\n                        next_items[i] = _next_or_none(plans[i])\n\n                yield yielded_placement, yielded_units",
        "begin_line": 437,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.concat._next_or_none#462",
        "src_path": "pandas/core/internals/concat.py",
        "class_name": "pandas.core.internals.concat",
        "signature": "pandas.core.internals.concat._next_or_none(seq)",
        "snippet": "        def _next_or_none(seq):\n            retval = next(seq, None)\n            if retval is None:\n                num_ended[0] += 1\n            return retval",
        "begin_line": 462,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.786102062975027e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#111",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                \"Wrong number of items passed {val}, placement implies \"\n                \"{mgr}\".format(val=len(self.values), mgr=len(self.mgr_locs))\n            )",
        "begin_line": 111,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005675368898978433,
            "pseudo_dstar_susp": 0.0016129032258064516,
            "pseudo_tarantula_susp": 0.00045024763619990995,
            "pseudo_op2_susp": 0.0016129032258064516,
            "pseudo_barinel_susp": 0.00045024763619990995
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#122",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            msg = \"Wrong number of dimensions. values.ndim != ndim [{} != {}]\"\n            raise ValueError(msg.format(values.ndim, ndim))\n\n        return ndim",
        "begin_line": 122,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006116207951070336,
            "pseudo_dstar_susp": 0.0018248175182481751,
            "pseudo_tarantula_susp": 0.0004748338081671415,
            "pseudo_op2_susp": 0.0018248175182481751,
            "pseudo_barinel_susp": 0.0004748338081671415
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._consolidate_key#162",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._consolidate_key(self)",
        "snippet": "    def _consolidate_key(self):\n        return (self._can_consolidate, self.dtype.name)",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.49434991557345e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._is_single_block#166",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._is_single_block(self)",
        "snippet": "    def _is_single_block(self):\n        return self.ndim == 1",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#170",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_categorical_astype#179",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_categorical_astype(self, dtype)",
        "snippet": "    def is_categorical_astype(self, dtype):\n        \"\"\"\n        validate that we have a astypeable to categorical,\n        returns a boolean if we are a categorical\n        \"\"\"\n        if dtype is Categorical or dtype is CategoricalDtype:\n            # this is a pd.Categorical, but is not\n            # a valid type for astypeing\n            raise TypeError(\"invalid type {0} for astype\".format(dtype))\n\n        elif is_categorical_dtype(dtype):\n            return True\n\n        return False",
        "begin_line": 179,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.external_values#194",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        \"\"\" return an outside world format, currently just the ndarray \"\"\"\n        return self.values",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045372050816696913,
            "pseudo_dstar_susp": 0.00045351473922902497,
            "pseudo_tarantula_susp": 0.0006053268765133172,
            "pseudo_op2_susp": 0.00045351473922902497,
            "pseudo_barinel_susp": 0.0006053268765133172
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#198",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self, dtype=None)",
        "snippet": "    def internal_values(self, dtype=None):\n        \"\"\" return an internal format, currently just the ndarray\n        this should be the pure internal API format\n        \"\"\"\n        return self.values",
        "begin_line": 198,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007616146230007616,
            "pseudo_dstar_susp": 0.003401360544217687,
            "pseudo_tarantula_susp": 0.0005938242280285036,
            "pseudo_op2_susp": 0.003401360544217687,
            "pseudo_barinel_susp": 0.0005938242280285036
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#204",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 204,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.536524890329964e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.to_dense#219",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.to_dense(self)",
        "snippet": "    def to_dense(self):\n        return self.values.view()",
        "begin_line": 219,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000390625,
            "pseudo_dstar_susp": 0.000390625,
            "pseudo_tarantula_susp": 0.00039154267815191856,
            "pseudo_op2_susp": 0.000390625,
            "pseudo_barinel_susp": 0.00039154267815191856
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fill_value#223",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.nan",
        "begin_line": 223,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00039032006245121,
            "pseudo_dstar_susp": 0.00039032006245121,
            "pseudo_tarantula_susp": 0.0003912363067292645,
            "pseudo_op2_susp": 0.00039032006245121,
            "pseudo_barinel_susp": 0.0003912363067292645
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#227",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 227,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0017211703958691911,
            "pseudo_tarantula_susp": 0.0004621072088724584,
            "pseudo_op2_susp": 0.0017211703958691911,
            "pseudo_barinel_susp": 0.0004621072088724584
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#231",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005861664712778429,
            "pseudo_dstar_susp": 0.0017241379310344827,
            "pseudo_tarantula_susp": 0.0004623208506703652,
            "pseudo_op2_susp": 0.0017241379310344827,
            "pseudo_barinel_susp": 0.0004623208506703652
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#244",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None):\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 244,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.569438969911969e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#254",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 254,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007547169811320754,
            "pseudo_dstar_susp": 0.0032679738562091504,
            "pseudo_tarantula_susp": 0.0005844535359438924,
            "pseudo_op2_susp": 0.0032679738562091504,
            "pseudo_barinel_susp": 0.0005844535359438924
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__len__#283",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.values)",
        "begin_line": 283,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00044365572315882877,
            "pseudo_dstar_susp": 0.0004434589800443459,
            "pseudo_tarantula_susp": 0.0005681818181818182,
            "pseudo_op2_susp": 0.0004434589800443459,
            "pseudo_barinel_susp": 0.0005681818181818182
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#294",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 294,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.460365656696169e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.getitem_block#298",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.getitem_block(self, slicer, new_mgr_locs=None)",
        "snippet": "    def getitem_block(self, slicer, new_mgr_locs=None):\n        \"\"\"\n        Perform __getitem__-like, return result as block.\n\n        As of now, only supports slices that preserve dimensionality.\n        \"\"\"\n        if new_mgr_locs is None:\n            if isinstance(slicer, tuple):\n                axis0_slicer = slicer[0]\n            else:\n                axis0_slicer = slicer\n            new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n        new_values = self._slice(slicer)\n\n        if self._validate_ndim and new_values.ndim != self.ndim:\n            raise ValueError(\"Only same dim slicing is allowed\")\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 298,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.32570144034635e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#319",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 319,
        "end_line": 320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006377551020408163,
            "pseudo_dstar_susp": 0.002074688796680498,
            "pseudo_tarantula_susp": 0.0004921259842519685,
            "pseudo_op2_susp": 0.002074688796680498,
            "pseudo_barinel_susp": 0.0004921259842519685
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#323",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 323,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005717552887364208,
            "pseudo_dstar_susp": 0.001644736842105263,
            "pseudo_tarantula_susp": 0.00045578851412944393,
            "pseudo_op2_susp": 0.001644736842105263,
            "pseudo_barinel_susp": 0.00045578851412944393
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.ftype#327",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.ftype(self)",
        "snippet": "    def ftype(self):\n        if getattr(self.values, \"_pandas_ftype\", False):\n            dtype = self.dtype.subtype\n        else:\n            dtype = self.dtype\n        return \"{dtype}:{ftype}\".format(dtype=dtype, ftype=self._ftype)",
        "begin_line": 327,
        "end_line": 332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000628140703517588,
            "pseudo_dstar_susp": 0.001976284584980237,
            "pseudo_tarantula_susp": 0.0004854368932038835,
            "pseudo_op2_susp": 0.001976284584980237,
            "pseudo_barinel_susp": 0.0004854368932038835
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.concat_same_type#337",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.concat_same_type(self, to_concat, placement=None)",
        "snippet": "    def concat_same_type(self, to_concat, placement=None):\n        \"\"\"\n        Concatenate list of single blocks of the same type.\n        \"\"\"\n        values = self._concatenator(\n            [blk.values for blk in to_concat], axis=self.ndim - 1\n        )\n        return self.make_block_same_class(\n            values, placement=placement or slice(0, len(values), 1)\n        )",
        "begin_line": 337,
        "end_line": 346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.19010641357492e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#348",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 348,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003650967506389193,
            "pseudo_dstar_susp": 0.0003650967506389193,
            "pseudo_tarantula_susp": 0.0003652300949598247,
            "pseudo_op2_susp": 0.0003650967506389193,
            "pseudo_barinel_susp": 0.0003652300949598247
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.set#351",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        Modify Block in-place with new item value\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.values[locs] = values",
        "begin_line": 351,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.497938067031566e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.delete#361",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.delete(self, loc)",
        "snippet": "    def delete(self, loc):\n        \"\"\"\n        Delete given loc(-s) from block in-place.\n        \"\"\"\n        self.values = np.delete(self.values, loc, 0)\n        self.mgr_locs = self.mgr_locs.delete(loc)",
        "begin_line": 361,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007407407407407407,
            "pseudo_dstar_susp": 0.0005393743257820927,
            "pseudo_tarantula_susp": 0.0008305647840531562,
            "pseudo_op2_susp": 0.0005393743257820927,
            "pseudo_barinel_susp": 0.0008305647840531562
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#368",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs):\n        \"\"\" apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n        if not isinstance(result, Block):\n            result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n        return result",
        "begin_line": 368,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.439369141496801e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fillna#379",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fillna(self, value, limit=None, inplace=False, downcast=None)",
        "snippet": "    def fillna(self, value, limit=None, inplace=False, downcast=None):\n        \"\"\" fillna on the block with the value. If we fail, then convert to\n        ObjectBlock and try again\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        mask = isna(self.values)\n        if limit is not None:\n            limit = libalgos._validate_limit(None, limit=limit)\n            mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n        if not self._can_hold_na:\n            if inplace:\n                return self\n            else:\n                return self.copy()\n\n        if self._can_hold_element(value):\n            # equivalent: _try_coerce_args(value) would not raise\n            blocks = self.putmask(mask, value, inplace=inplace)\n            return self._maybe_downcast(blocks, downcast)\n\n        # we can't process the value, but nothing to do\n        if not mask.any():\n            return self if inplace else self.copy()\n\n        # operate column-by-column\n        def f(mask, val, idx):\n            block = self.coerce_to_target_dtype(value)\n\n            # slice out our block\n            if idx is not None:\n                # i.e. self.ndim == 2\n                block = block.getitem_block(slice(idx, idx + 1))\n            return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n        return self.split_and_operate(None, f, inplace)",
        "begin_line": 379,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.split_and_operate#417",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.split_and_operate(self, mask, f, inplace: bool)",
        "snippet": "    def split_and_operate(self, mask, f, inplace: bool):\n        \"\"\"\n        split the block per-column, and apply the callable f\n        per-column, return a new block for each. Handle\n        masking which will not change a block unless needed.\n\n        Parameters\n        ----------\n        mask : 2-d boolean mask\n        f : callable accepting (1d-mask, 1d values, indexer)\n        inplace : boolean\n\n        Returns\n        -------\n        list of blocks\n        \"\"\"\n\n        if mask is None:\n            mask = np.broadcast_to(True, shape=self.shape)\n\n        new_values = self.values\n\n        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block\n\n        # ndim == 1\n        if self.ndim == 1:\n            if mask.any():\n                nv = f(mask, new_values, None)\n            else:\n                nv = new_values if inplace else new_values.copy()\n            block = make_a_block(nv, self.mgr_locs)\n            return [block]\n\n        # ndim > 1\n        new_blocks = []\n        for i, ref_loc in enumerate(self.mgr_locs):\n            m = mask[i]\n            v = new_values[i]\n\n            # need a new block\n            if m.any():\n                nv = f(m, v, i)\n            else:\n                nv = v if inplace else v.copy()\n\n            block = make_a_block(nv, [ref_loc])\n            new_blocks.append(block)\n\n        return new_blocks",
        "begin_line": 417,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_a_block#439",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_a_block(nv, ref_loc)",
        "snippet": "        def make_a_block(nv, ref_loc):\n            if isinstance(nv, list):\n                assert len(nv) == 1, nv\n                assert isinstance(nv[0], Block)\n                block = nv[0]\n            else:\n                # Put back the dimension that was taken from it and make\n                # a block out of the result.\n                nv = _block_shape(nv, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=ref_loc)\n            return block",
        "begin_line": 439,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._maybe_downcast#477",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._maybe_downcast(self, blocks: List['Block'], downcast=None)",
        "snippet": "    def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n        # no need to downcast our float\n        # unless indicated\n        if downcast is None and (\n            self.is_float or self.is_timedelta or self.is_datetime\n        ):\n            return blocks\n\n        return _extend_blocks([b.downcast(downcast) for b in blocks])",
        "begin_line": 477,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.downcast#488",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.downcast(self, dtypes=None)",
        "snippet": "    def downcast(self, dtypes=None):\n        \"\"\" try to downcast each item to the dict of dtypes if present \"\"\"\n\n        # turn it off completely\n        if dtypes is False:\n            return self\n\n        values = self.values\n\n        # single block handling\n        if self._is_single_block:\n\n            # try to cast all non-floats here\n            if dtypes is None:\n                dtypes = \"infer\"\n\n            nv = maybe_downcast_to_dtype(values, dtypes)\n            return self.make_block(nv)\n\n        # ndim > 1\n        if dtypes is None:\n            return self\n\n        if not (dtypes == \"infer\" or isinstance(dtypes, dict)):\n            raise ValueError(\n                \"downcast must have a dictionary or 'infer' as its argument\"\n            )\n        elif dtypes != \"infer\":\n            raise AssertionError(\"dtypes as dict is not supported yet\")\n\n        # operate column-by-column\n        # this is expensive as it splits the blocks items-by-item\n        def f(mask, val, idx):\n            val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n            return val\n\n        return self.split_and_operate(None, f, False)",
        "begin_line": 488,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.f#520",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.f(mask, val, idx)",
        "snippet": "        def f(mask, val, idx):\n            val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n            return val",
        "begin_line": 520,
        "end_line": 522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#526",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy=False, errors='raise', **kwargs)",
        "snippet": "    def astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n        return self._astype(dtype, copy=copy, errors=errors, **kwargs)",
        "begin_line": 526,
        "end_line": 527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.51890482398957e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._astype#529",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._astype(self, dtype, copy=False, errors='raise', **kwargs)",
        "snippet": "    def _astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n        \"\"\"Coerce to the new type\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : boolean, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of {}. \"\n                \"Supplied value is '{}'\".format(list(errors_legal_values), errors)\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                \"Expected an instance of {}, but got the class instead. \"\n                \"Try instantiating 'dtype'.\".format(dtype.__name__)\n            )\n            raise TypeError(msg)\n\n        # may need to convert to categorical\n        if self.is_categorical_astype(dtype):\n\n            if is_categorical_dtype(self.values):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    values = self.get_values()\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(extension)\n        # should we make this attribute?\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    \"cannot set astype for copy = [{copy}] for dtype \"\n                    \"({dtype} [{shape}]) to different shape \"\n                    \"({newb_dtype} [{newb_shape}])\".format(\n                        copy=copy,\n                        dtype=self.dtype.name,\n                        shape=self.shape,\n                        newb_dtype=newb.dtype.name,\n                        newb_shape=newb.shape,\n                    )\n                )\n        return newb",
        "begin_line": 529,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.convert#630",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\" attempt to coerce any object types to better types return a copy\n        of the block (if copy = True) by definition we are not an ObjectBlock\n        here!\n        \"\"\"\n\n        return self.copy() if copy else self",
        "begin_line": 630,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.831067695880866e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#671",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 671,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00041911148365465214,
            "pseudo_dstar_susp": 0.00041911148365465214,
            "pseudo_tarantula_susp": 0.0004666355576294914,
            "pseudo_op2_susp": 0.00041911148365465214,
            "pseudo_barinel_susp": 0.0004666355576294914
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.replace#678",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
        "snippet": "    def replace(\n        self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n    ):\n        \"\"\"replace the to_replace value with value, possible to create new\n        blocks here this is just a call to putmask. regex is not used here.\n        It is used in ObjectBlocks.  It is here for API compatibility.\n        \"\"\"\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        original_to_replace = to_replace\n\n        # If we cannot replace with own dtype, convert to ObjectBlock and\n        # retry\n        if not self._can_hold_element(to_replace):\n            if not isinstance(to_replace, list):\n                if inplace:\n                    return [self]\n                return [self.copy()]\n\n            to_replace = [x for x in to_replace if self._can_hold_element(x)]\n            if not len(to_replace):\n                # GH#28084 avoid costly checks since we can infer\n                #  that there is nothing to replace in this block\n                if inplace:\n                    return [self]\n                return [self.copy()]\n\n            if len(to_replace) == 1:\n                # _can_hold_element checks have reduced this back to the\n                #  scalar case and we can avoid a costly object cast\n                return self.replace(\n                    to_replace[0],\n                    value,\n                    inplace=inplace,\n                    filter=filter,\n                    regex=regex,\n                    convert=convert,\n                )\n\n            # GH 22083, TypeError or ValueError occurred within error handling\n            # causes infinite loop. Cast and retry only if not objectblock.\n            if is_object_dtype(self):\n                raise AssertionError\n\n            # try again with a compatible block\n            block = self.astype(object)\n            return block.replace(\n                to_replace=to_replace,\n                value=value,\n                inplace=inplace,\n                filter=filter,\n                regex=regex,\n                convert=convert,\n            )\n\n        values = self.values\n        if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n            # The only non-DatetimeLike class that also has a non-trivial\n            #  try_coerce_args is ObjectBlock, but that overrides replace,\n            #  so does not get here.\n            to_replace = convert_scalar(values, to_replace)\n\n        mask = missing.mask_missing(values, to_replace)\n        if filter is not None:\n            filtered_out = ~self.mgr_locs.isin(filter)\n            mask[filtered_out.nonzero()[0]] = False\n\n        if not mask.any():\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        try:\n            blocks = self.putmask(mask, value, inplace=inplace)\n            # Note: it is _not_ the case that self._can_hold_element(value)\n            #  is always true at this point.  In particular, that can fail\n            #  for:\n            #   \"2u\" with bool-dtype, float-dtype\n            #   0.5 with int64-dtype\n            #   np.nan with int64-dtype\n        except (TypeError, ValueError):\n            # GH 22083, TypeError or ValueError occurred within error handling\n            # causes infinite loop. Cast and retry only if not objectblock.\n            if is_object_dtype(self):\n                raise\n\n            assert not self._can_hold_element(value), value\n\n            # try again with a compatible block\n            block = self.astype(object)\n            return block.replace(\n                to_replace=original_to_replace,\n                value=value,\n                inplace=inplace,\n                filter=filter,\n                regex=regex,\n                convert=convert,\n            )\n        if convert:\n            blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n        return blocks",
        "begin_line": 678,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#784",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar(values, value)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n\n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n\n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        ):\n            values[indexer] = value\n            try:\n                values = values.astype(arr_value.dtype)\n            except ValueError:\n                pass\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 784,
        "end_line": 885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.putmask#887",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
        "snippet": "    def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n        \"\"\" putmask the data to the block; it is possible that we may create a\n        new dtype of block\n\n        return the resulting block(s)\n\n        Parameters\n        ----------\n        mask  : the condition to respect\n        new : a ndarray/object\n        align : boolean, perform alignment on other/cond, default is True\n        inplace : perform inplace modification, default is False\n        axis : int\n        transpose : boolean\n            Set to True if self is stored with axes reversed\n\n        Returns\n        -------\n        a list of new blocks, the result of the putmask\n        \"\"\"\n\n        new_values = self.values if inplace else self.values.copy()\n\n        new = getattr(new, \"values\", new)\n        mask = getattr(mask, \"values\", mask)\n\n        # if we are passed a scalar None, convert it here\n        if not is_list_like(new) and isna(new) and not self.is_object:\n            # FIXME: make sure we have compatible NA\n            new = self.fill_value\n\n        if self._can_hold_element(new):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(new):\n                new = convert_scalar(new_values, new)\n\n            if transpose:\n                new_values = new_values.T\n\n            # If the default repeat behavior in np.putmask would go in the\n            # wrong direction, then explicitly repeat and reshape new instead\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim and axis == 1:\n                    new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n                new = new.astype(new_values.dtype)\n\n            # we require exact matches between the len of the\n            # values we are setting (or is compat). np.putmask\n            # doesn't check this and will simply truncate / pad\n            # the output, but we want sane error messages\n            #\n            # TODO: this prob needs some better checking\n            # for 2D cases\n            if (\n                is_list_like(new)\n                and np.any(mask[mask])\n                and getattr(new, \"ndim\", 1) == 1\n            ):\n\n                if not (\n                    mask.shape[-1] == len(new)\n                    or mask[mask].shape[-1] == len(new)\n                    or len(new) == 1\n                ):\n                    raise ValueError(\"cannot assign mismatch length to masked array\")\n\n            np.putmask(new_values, mask, new)\n\n        # maybe upcast me\n        elif mask.any():\n            if transpose:\n                mask = mask.T\n                if isinstance(new, np.ndarray):\n                    new = new.T\n                axis = new_values.ndim - axis - 1\n\n            # Pseudo-broadcast\n            if getattr(new, \"ndim\", 0) >= 1:\n                if self.ndim - 1 == new.ndim:\n                    new_shape = list(new.shape)\n                    new_shape.insert(axis, 1)\n                    new = new.reshape(tuple(new_shape))\n\n            # operate column-by-column\n            def f(mask, val, idx):\n\n                if idx is None:\n                    # ndim==1 case.\n                    n = new\n                else:\n\n                    if isinstance(new, np.ndarray):\n                        n = np.squeeze(new[idx % new.shape[0]])\n                    else:\n                        n = np.array(new)\n\n                    # type of the new block\n                    dtype, _ = maybe_promote(n.dtype)\n\n                    # we need to explicitly astype here to make a copy\n                    n = n.astype(dtype)\n\n                nv = _putmask_smart(val, mask, n)\n                return nv\n\n            new_blocks = self.split_and_operate(mask, f, inplace)\n            return new_blocks\n\n        if inplace:\n            return [self]\n\n        if transpose:\n            new_values = new_values.T\n\n        return [self.make_block(new_values)]",
        "begin_line": 887,
        "end_line": 1002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1235",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_tuple is None:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            fill_value = fill_tuple[0]\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1235,
        "end_line": 1267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005017561465127947,
            "pseudo_dstar_susp": 0.0005002501250625312,
            "pseudo_tarantula_susp": 0.0007358351729212656,
            "pseudo_op2_susp": 0.0005002501250625312,
            "pseudo_barinel_susp": 0.0007358351729212656
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._unstack#1419",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
        "snippet": "    def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n        \"\"\"Return a list of unstacked blocks of self\n\n        Parameters\n        ----------\n        unstacker_func : callable\n            Partially applied unstacker.\n        new_columns : Index\n            All columns of the unstacked BlockManager.\n        n_rows : int\n            Only used in ExtensionBlock._unstack\n        fill_value : int\n            Only used in ExtensionBlock._unstack\n\n        Returns\n        -------\n        blocks : list of Block\n            New blocks of unstacked values.\n        mask : array_like of bool\n            The mask of columns of `blocks` we should keep.\n        \"\"\"\n        unstacker = unstacker_func(self.values.T)\n        new_items = unstacker.get_new_columns()\n        new_placement = new_columns.get_indexer(new_items)\n        new_values, mask = unstacker.get_new_values()\n\n        mask = mask.any(0)\n        new_values = new_values.T[mask]\n        new_placement = new_placement[mask]\n\n        blocks = [make_block(new_values, placement=new_placement)]\n        return blocks, mask",
        "begin_line": 1419,
        "end_line": 1450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__#1558",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)",
        "begin_line": 1558,
        "end_line": 1577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009532888465204957,
            "pseudo_dstar_susp": 0.000591715976331361,
            "pseudo_tarantula_susp": 0.0009652509652509653,
            "pseudo_op2_susp": 0.000591715976331361,
            "pseudo_barinel_susp": 0.0009652509652509653
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.shape#1580",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.shape(self)",
        "snippet": "    def shape(self):\n        if self.ndim == 1:\n            return ((len(self.values)),)\n        return (len(self.mgr_locs), len(self.values))",
        "begin_line": 1580,
        "end_line": 1583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget#1585",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(\"{0} only contains one item\".format(self))\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(\"{0} only contains one item\".format(self))\n            return self.values",
        "begin_line": 1585,
        "end_line": 1599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009099181073703367,
            "pseudo_dstar_susp": 0.0005787037037037037,
            "pseudo_tarantula_susp": 0.0009293680297397769,
            "pseudo_op2_susp": 0.0005787037037037037,
            "pseudo_barinel_susp": 0.0009293680297397769
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.should_store#1601",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return isinstance(value, self._holder)",
        "begin_line": 1601,
        "end_line": 1602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.set#1604",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.set(self, locs, values, check=False)",
        "snippet": "    def set(self, locs, values, check=False):\n        assert locs.tolist() == [0]\n        self.values = values",
        "begin_line": 1604,
        "end_line": 1606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1686",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement, ndim)",
        "begin_line": 1686,
        "end_line": 1688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006968641114982578,
            "pseudo_dstar_susp": 0.0005319148936170213,
            "pseudo_tarantula_susp": 0.0008123476848090983,
            "pseudo_op2_susp": 0.0005319148936170213,
            "pseudo_barinel_susp": 0.0008123476848090983
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1690",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1690,
        "end_line": 1705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.548788474132285e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._holder#1708",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._holder(self)",
        "snippet": "    def _holder(self):\n        # For extension blocks, the holder is values-dependent.\n        return type(self.values)",
        "begin_line": 1708,
        "end_line": 1710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.900990099009902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.fill_value#1713",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.fill_value(self)",
        "snippet": "    def fill_value(self):\n        # Used in reindex_indexer\n        return self.values.dtype.na_value",
        "begin_line": 1713,
        "end_line": 1715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._can_hold_na#1718",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        # The default ExtensionArray._can_hold_na is True\n        return self._holder._can_hold_na",
        "begin_line": 1718,
        "end_line": 1720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.32570144034635e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.is_numeric#1728",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.is_numeric(self)",
        "snippet": "    def is_numeric(self):\n        return self.values.dtype._is_numeric",
        "begin_line": 1728,
        "end_line": 1729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.get_values#1761",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        # ExtensionArrays must be iterable, so this works.\n        values = np.asarray(self.values)\n        if values.ndim == self.ndim - 1:\n            values = values.reshape((1,) + values.shape)\n        return values",
        "begin_line": 1761,
        "end_line": 1766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.take_nd#1788",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.\n        \"\"\"\n        if fill_tuple is None:\n            fill_value = None\n        else:\n            fill_value = fill_tuple[0]\n\n        # axis doesn't matter; we are really a single-dim object\n        # but are passed the axis depending on the calling routing\n        # if its REALLY axis 0, then this will be a reindex and not a take\n        new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (self.ndim == 1 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1788,
        "end_line": 1808,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._slice#1815",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n\n        # slice the category\n        # return same dims as we currently have\n\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            if not com.is_null_slice(slicer[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n            slicer = slicer[1]\n\n        return self.values[slicer]",
        "begin_line": 1815,
        "end_line": 1826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.concat_same_type#1828",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.concat_same_type(self, to_concat, placement=None)",
        "snippet": "    def concat_same_type(self, to_concat, placement=None):\n        \"\"\"\n        Concatenate list of single blocks of the same type.\n        \"\"\"\n        values = self._holder._concat_same_type([blk.values for blk in to_concat])\n        placement = placement or slice(0, len(values), 1)\n        return self.make_block_same_class(values, ndim=self.ndim, placement=placement)",
        "begin_line": 1828,
        "end_line": 1834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._ftype#1931",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._ftype(self)",
        "snippet": "    def _ftype(self):\n        return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
        "begin_line": 1931,
        "end_line": 1932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009017132551848512,
            "pseudo_dstar_susp": 0.000576036866359447,
            "pseudo_tarantula_susp": 0.0009225092250922509,
            "pseudo_op2_susp": 0.000576036866359447,
            "pseudo_barinel_susp": 0.0009225092250922509
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock._can_hold_element#1991",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n                tipo.type, (np.datetime64, np.timedelta64)\n            )\n        return isinstance(\n            element, (float, int, np.floating, np.int_)\n        ) and not isinstance(\n            element,\n            (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n        )",
        "begin_line": 1991,
        "end_line": 2002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.271298593879239e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock.should_store#2045",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        # when inserting a column should not coerce integers to floats\n        # unnecessarily\n        return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype",
        "begin_line": 2045,
        "end_line": 2048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.001330252748022e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.IntBlock._can_hold_element#2072",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.IntBlock",
        "signature": "pandas.core.internals.blocks.IntBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return (\n                issubclass(tipo.type, np.integer)\n                and not issubclass(tipo.type, (np.datetime64, np.timedelta64))\n                and self.dtype.itemsize >= tipo.itemsize\n            )\n        return is_integer(element)",
        "begin_line": 2072,
        "end_line": 2080,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.IntBlock.should_store#2082",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.IntBlock",
        "signature": "pandas.core.internals.blocks.IntBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return is_integer_dtype(value) and value.dtype == self.dtype",
        "begin_line": 2082,
        "end_line": 2083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder#2090",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2090,
        "end_line": 2091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value#2094",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.datetime64(\"NaT\", \"ns\")",
        "begin_line": 2094,
        "end_line": 2095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values#2097",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return object dtype as boxed values, such as Timestamps/Timedelta\n        \"\"\"\n        if is_object_dtype(dtype):\n            values = self.values.ravel()\n            result = self._holder(values).astype(object)\n            return result.reshape(self.values.shape)\n        return self.values",
        "begin_line": 2097,
        "end_line": 2105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2112",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2112,
        "end_line": 2114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00546448087431694,
            "pseudo_dstar_susp": 0.011235955056179775,
            "pseudo_tarantula_susp": 0.0011876484560570072,
            "pseudo_op2_susp": 0.011235955056179775,
            "pseudo_barinel_susp": 0.0011876484560570072
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_na#2117",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return True",
        "begin_line": 2117,
        "end_line": 2118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.17594636579184e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2120",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2120,
        "end_line": 2143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011198208286674132,
            "pseudo_dstar_susp": 0.0006472491909385113,
            "pseudo_tarantula_susp": 0.0013440860215053765,
            "pseudo_op2_susp": 0.0006472491909385113,
            "pseudo_barinel_susp": 0.0013440860215053765
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._astype#2145",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._astype(self, dtype, **kwargs)",
        "snippet": "    def _astype(self, dtype, **kwargs):\n        \"\"\"\n        these automatically copy, so copy=True has no effect\n        raise on an except if raise == True\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        # if we are passed a datetime64[ns, tz]\n        if is_datetime64tz_dtype(dtype):\n            values = self.values\n            if getattr(values, \"tz\", None) is None:\n                values = DatetimeArray(values).tz_localize(\"UTC\")\n            values = values.tz_convert(dtype.tz)\n            return self.make_block(values)\n\n        # delegate\n        return super()._astype(dtype=dtype, **kwargs)",
        "begin_line": 2145,
        "end_line": 2161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element#2163",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            if self.is_datetimetz:\n                # require exact match, since non-nano does not exist\n                return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                    element, self.dtype\n                )\n\n            # GH#27419 if we get a non-nano datetime64 object\n            return is_datetime64_dtype(tipo)\n        elif element is NaT:\n            return True\n        elif isinstance(element, datetime):\n            if self.is_datetimetz:\n                return tz_compare(element.tzinfo, self.dtype.tz)\n            return element.tzinfo is None\n\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2163,
        "end_line": 2181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.should_store#2207",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return (\n            issubclass(value.dtype.type, np.datetime64)\n            and not is_datetime64tz_dtype(value)\n            and not is_extension_array_dtype(value)\n        )",
        "begin_line": 2207,
        "end_line": 2212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.set#2214",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.set(self, locs, values)",
        "snippet": "    def set(self, locs, values):\n        \"\"\"\n        Modify Block in-place with new item value\n\n        Returns\n        -------\n        None\n        \"\"\"\n        values = conversion.ensure_datetime64ns(values, copy=False)\n\n        self.values[locs] = values",
        "begin_line": 2214,
        "end_line": 2224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.external_values#2226",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
        "begin_line": 2226,
        "end_line": 2227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2242",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2242,
        "end_line": 2243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013297872340425532,
            "pseudo_dstar_susp": 0.0007102272727272727,
            "pseudo_tarantula_susp": 0.0016611295681063123,
            "pseudo_op2_susp": 0.0007102272727272727,
            "pseudo_barinel_susp": 0.0016611295681063123
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2245",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2245,
        "end_line": 2264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013297872340425532,
            "pseudo_dstar_susp": 0.0007102272727272727,
            "pseudo_tarantula_susp": 0.0016611295681063123,
            "pseudo_op2_susp": 0.0007102272727272727,
            "pseudo_barinel_susp": 0.0016611295681063123
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.get_values#2272",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        Returns an ndarray of values.\n\n        Parameters\n        ----------\n        dtype : np.dtype\n            Only `object`-like dtypes are respected here (not sure\n            why).\n\n        Returns\n        -------\n        values : ndarray\n            When ``dtype=object``, then and object-dtype ndarray of\n            boxed values is returned. Otherwise, an M8[ns] ndarray\n            is returned.\n\n            DatetimeArray is always 1-d. ``get_values`` will reshape\n            the return value to be the same dimensionality as the\n            block.\n        \"\"\"\n        values = self.values\n        if is_object_dtype(dtype):\n            values = values.astype(object)\n\n        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when\n            # the analogous NumPy-backed column would be a 2-D ndarray.\n            values = values.reshape(1, -1)\n        return values",
        "begin_line": 2272,
        "end_line": 2304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._slice#2312",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        if isinstance(slicer, tuple):\n            col, loc = slicer\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(\"{0} only contains one item\".format(self))\n            return self.values[loc]\n        return self.values[slicer]",
        "begin_line": 2312,
        "end_line": 2319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.concat_same_type#2352",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.concat_same_type(self, to_concat, placement=None)",
        "snippet": "    def concat_same_type(self, to_concat, placement=None):\n        # need to handle concat([tz1, tz2]) here, since DatetimeArray\n        # only handles cases where all the tzs are the same.\n        # Instead of placing the condition here, it could also go into the\n        # is_uniform_join_units check, but I'm not sure what is better.\n        if len({x.dtype for x in to_concat}) > 1:\n            values = concat_datetime([x.values for x in to_concat])\n            placement = placement or slice(0, len(values), 1)\n\n            if self.ndim > 1:\n                values = np.atleast_2d(values)\n            return ObjectBlock(values, ndim=self.ndim, placement=placement)\n        return super().concat_same_type(to_concat, placement)",
        "begin_line": 2352,
        "end_line": 2364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2419",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != _TD_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2419,
        "end_line": 2425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._holder#2428",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return TimedeltaArray",
        "begin_line": 2428,
        "end_line": 2429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element#2431",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, np.timedelta64)\n        elif element is NaT:\n            return True\n        elif isinstance(element, (timedelta, np.timedelta64)):\n            return True\n        return is_valid_nat_for_dtype(element, self.dtype)",
        "begin_line": 2431,
        "end_line": 2439,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.should_store#2458",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return issubclass(\n            value.dtype.type, np.timedelta64\n        ) and not is_extension_array_dtype(value)",
        "begin_line": 2458,
        "end_line": 2461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.external_values#2487",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
        "begin_line": 2487,
        "end_line": 2488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.BoolBlock.should_store#2502",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.BoolBlock",
        "signature": "pandas.core.internals.blocks.BoolBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return issubclass(value.dtype.type, np.bool_) and not is_extension_array_dtype(\n            value\n        )",
        "begin_line": 2502,
        "end_line": 2505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2529",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2529,
        "end_line": 2533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00037650602409638556,
            "pseudo_dstar_susp": 0.00037650602409638556,
            "pseudo_tarantula_susp": 0.0003769317753486619,
            "pseudo_op2_susp": 0.00037650602409638556,
            "pseudo_barinel_susp": 0.0003769317753486619
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.is_bool#2536",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.is_bool(self)",
        "snippet": "    def is_bool(self):\n        \"\"\" we can be a bool if we have only bool values but are of type\n        object\n        \"\"\"\n        return lib.is_bool_array(self.values.ravel())",
        "begin_line": 2536,
        "end_line": 2540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.692992436918547e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.convert#2542",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\" attempt to coerce any object types to better types return a copy of\n        the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n        can return multiple blocks!\n        \"\"\"\n\n        # operate column-by-column\n        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO: allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            values = _block_shape(values, ndim=self.ndim)\n            return values\n\n        if self.ndim == 2:\n            blocks = self.split_and_operate(None, f, False)\n        else:\n            values = f(None, self.values.ravel(), None)\n            blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n        return blocks",
        "begin_line": 2542,
        "end_line": 2580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.f#2557",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.f(mask, val, idx)",
        "snippet": "        def f(mask, val, idx):\n            shape = val.shape\n            values = soft_convert_objects(\n                val.ravel(),\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n            if isinstance(values, np.ndarray):\n                # TODO: allow EA once reshape is supported\n                values = values.reshape(shape)\n\n            values = _block_shape(values, ndim=self.ndim)\n            return values",
        "begin_line": 2557,
        "end_line": 2572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._maybe_downcast#2582",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._maybe_downcast(self, blocks: List['Block'], downcast=None)",
        "snippet": "    def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n        if downcast is not None:\n            return blocks\n\n        # split and convert the blocks\n        return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])",
        "begin_line": 2582,
        "end_line": 2588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._can_hold_element#2590",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        return True",
        "begin_line": 2590,
        "end_line": 2591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.225092250922509e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.should_store#2593",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value):\n        return not (\n            issubclass(\n                value.dtype.type,\n                (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),\n            )\n            or is_extension_array_dtype(value)\n        )",
        "begin_line": 2593,
        "end_line": 2600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010718113612004287,
            "pseudo_dstar_susp": 0.0006321112515802782,
            "pseudo_tarantula_susp": 0.0011723329425556857,
            "pseudo_op2_susp": 0.0006321112515802782,
            "pseudo_barinel_susp": 0.0011723329425556857
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.replace#2602",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
        "snippet": "    def replace(\n        self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n    ):\n        to_rep_is_list = is_list_like(to_replace)\n        value_is_list = is_list_like(value)\n        both_lists = to_rep_is_list and value_is_list\n        either_list = to_rep_is_list or value_is_list\n\n        result_blocks = []\n        blocks = [self]\n\n        if not either_list and is_re(to_replace):\n            return self._replace_single(\n                to_replace,\n                value,\n                inplace=inplace,\n                filter=filter,\n                regex=True,\n                convert=convert,\n            )\n        elif not (either_list or regex):\n            return super().replace(\n                to_replace,\n                value,\n                inplace=inplace,\n                filter=filter,\n                regex=regex,\n                convert=convert,\n            )\n        elif both_lists:\n            for to_rep, v in zip(to_replace, value):\n                result_blocks = []\n                for b in blocks:\n                    result = b._replace_single(\n                        to_rep,\n                        v,\n                        inplace=inplace,\n                        filter=filter,\n                        regex=regex,\n                        convert=convert,\n                    )\n                    result_blocks = _extend_blocks(result, result_blocks)\n                blocks = result_blocks\n            return result_blocks\n\n        elif to_rep_is_list and regex:\n            for to_rep in to_replace:\n                result_blocks = []\n                for b in blocks:\n                    result = b._replace_single(\n                        to_rep,\n                        value,\n                        inplace=inplace,\n                        filter=filter,\n                        regex=regex,\n                        convert=convert,\n                    )\n                    result_blocks = _extend_blocks(result, result_blocks)\n                blocks = result_blocks\n            return result_blocks\n\n        return self._replace_single(\n            to_replace,\n            value,\n            inplace=inplace,\n            filter=filter,\n            convert=convert,\n            regex=regex,\n        )",
        "begin_line": 2602,
        "end_line": 2670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2832",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2832,
        "end_line": 2836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.656017039403621e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock._holder#2839",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return Categorical",
        "begin_line": 2839,
        "end_line": 2840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.637625289128758e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.to_dense#2849",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.to_dense(self)",
        "snippet": "    def to_dense(self):\n        # Categorical.get_values returns a DatetimeIndex for datetime\n        # categories, so we can't simply use `np.asarray(self.values)` like\n        # other types.\n        return self.values._internal_get_values()",
        "begin_line": 2849,
        "end_line": 2853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.304268393954493e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.concat_same_type#2869",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.concat_same_type(self, to_concat, placement=None)",
        "snippet": "    def concat_same_type(self, to_concat, placement=None):\n        \"\"\"\n        Concatenate list of single blocks of the same type.\n\n        Note that this CategoricalBlock._concat_same_type *may* not\n        return a CategoricalBlock. When the categories in `to_concat`\n        differ, this will return an object ndarray.\n\n        If / when we decide we don't like that behavior:\n\n        1. Change Categorical._concat_same_type to use union_categoricals\n        2. Delete this method.\n        \"\"\"\n        values = self._concatenator(\n            [blk.values for blk in to_concat], axis=self.ndim - 1\n        )\n        # not using self.make_block_same_class as values can be object dtype\n        return make_block(\n            values, placement=placement or slice(0, len(values), 1), ndim=self.ndim\n        )",
        "begin_line": 2869,
        "end_line": 2888,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2919",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2919,
        "end_line": 2962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013297872340425532,
            "pseudo_dstar_susp": 0.004484304932735426,
            "pseudo_tarantula_susp": 0.0016611295681063123,
            "pseudo_op2_susp": 0.004484304932735426,
            "pseudo_barinel_susp": 0.0016611295681063123
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2965",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2965,
        "end_line": 2985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007396449704142012,
            "pseudo_dstar_susp": 0.003236245954692557,
            "pseudo_tarantula_susp": 0.0005750431282346176,
            "pseudo_op2_susp": 0.003236245954692557,
            "pseudo_barinel_susp": 0.0005750431282346176
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#2991",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, givin the result \"\"\"\n    from pandas.core.internals import BlockManager\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    elif isinstance(result, BlockManager):\n        blocks.extend(result.blocks)\n    else:\n        blocks.append(result)\n    return blocks",
        "begin_line": 2991,
        "end_line": 3007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003977724741447892,
            "pseudo_dstar_susp": 0.0003977724741447892,
            "pseudo_tarantula_susp": 0.00039872408293460925,
            "pseudo_op2_susp": 0.0003977724741447892,
            "pseudo_barinel_susp": 0.00039872408293460925
        }
    },
    {
        "name": "pandas.core.internals.blocks._block_shape#3010",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._block_shape(values, ndim=1, shape=None)",
        "snippet": "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
        "begin_line": 3010,
        "end_line": 3020,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.blocks._merge_blocks#3023",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._merge_blocks(blocks, dtype=None, _can_consolidate=True)",
        "snippet": "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n            dtype = blocks[0].dtype\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
        "begin_line": 3023,
        "end_line": 3047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    # deprecated.\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\" check if we're running in an interactive shell\n\n    returns True if running under python/ipython interactive shell\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#60",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#24",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 24,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_series_dispatch#51",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_series_dispatch(left, right, op)",
        "snippet": "def should_series_dispatch(left, right, op):\n    \"\"\"\n    Identify cases where a DataFrame operation should dispatch to its\n    Series counterpart.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame or Series\n    op : binary operator\n\n    Returns\n    -------\n    override : bool\n    \"\"\"\n    if left._is_mixed_type or right._is_mixed_type:\n        return True\n\n    if op.__name__.strip(\"_\") in [\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"]:\n        # TODO: GH references for what this fixes\n        # Note: this check must come before the check for nonempty columns.\n        return True\n\n    if right.ndim == 1:\n        # operating with Series, short-circuit checks that would fail\n        #  with AttributeError.\n        return False\n\n    if not len(left.columns) or not len(right.columns):\n        # ensure obj.dtypes[0] exists for each obj\n        return False\n\n    ldtype = left.dtypes.iloc[0]\n    rdtype = right.dtypes.iloc[0]\n\n    if (is_timedelta64_dtype(ldtype) and is_integer_dtype(rdtype)) or (\n        is_timedelta64_dtype(rdtype) and is_integer_dtype(ldtype)\n    ):\n        # numpy integer dtypes as timedelta64 dtypes in this scenario\n        return True\n\n    if is_datetime64_dtype(ldtype) and is_object_dtype(rdtype):\n        # in particular case where right is an array of DateOffsets\n        return True\n\n    return False",
        "begin_line": 51,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.dispatch.dispatch_to_extension_op#99",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.dispatch_to_extension_op(op, left: Union[ABCExtensionArray, np.ndarray], right: Any, keep_null_freq: bool=False)",
        "snippet": "def dispatch_to_extension_op(\n    op,\n    left: Union[ABCExtensionArray, np.ndarray],\n    right: Any,\n    keep_null_freq: bool = False,\n):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n\n    Parameters\n    ----------\n    op : binary operator\n    left : ExtensionArray or np.ndarray\n    right : object\n    keep_null_freq : bool, default False\n        Whether to re-raise a NullFrequencyError unchanged, as opposed to\n        catching and raising TypeError.\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n        2-tuple of these if op is divmod or rdivmod\n    \"\"\"\n    # NB: left and right should already be unboxed, so neither should be\n    #  a Series or Index.\n\n    if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n        # We need to cast datetime64 and timedelta64 ndarrays to\n        #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n        #  PandasArray as that behaves poorly with e.g. IntegerArray.\n        left = array(left)\n\n    # The op calls will raise TypeError if the op is not defined\n    # on the ExtensionArray\n\n    try:\n        res_values = op(left, right)\n    except NullFrequencyError:\n        # DatetimeIndex and TimedeltaIndex with freq == None raise ValueError\n        # on add/sub of integers (or int-like).  We re-raise as a TypeError.\n        if keep_null_freq:\n            # TODO: remove keep_null_freq after Timestamp+int deprecation\n            #  GH#22535 is enforced\n            raise\n        raise TypeError(\n            \"incompatible type for a datetime/timedelta \"\n            \"operation [{name}]\".format(name=op.__name__)\n        )\n    return res_values",
        "begin_line": 99,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.dispatch.maybe_dispatch_ufunc_to_dunder_op#151",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.maybe_dispatch_ufunc_to_dunder_op(self: ArrayLike, ufunc: Callable, method: str, *inputs: ArrayLike, **kwargs: Any)",
        "snippet": "def maybe_dispatch_ufunc_to_dunder_op(\n    self: ArrayLike, ufunc: Callable, method: str, *inputs: ArrayLike, **kwargs: Any\n):\n    \"\"\"\n    Dispatch a ufunc to the equivalent dunder method.\n\n    Parameters\n    ----------\n    self : ArrayLike\n        The array whose dunder method we dispatch to\n    ufunc : Callable\n        A NumPy ufunc\n    method : {'reduce', 'accumulate', 'reduceat', 'outer', 'at', '__call__'}\n    inputs : ArrayLike\n        The input arrays.\n    kwargs : Any\n        The additional keyword arguments, e.g. ``out``.\n\n    Returns\n    -------\n    result : Any\n        The result of applying the ufunc\n    \"\"\"\n    # special has the ufuncs we dispatch to the dunder op on\n    special = {\n        \"add\",\n        \"sub\",\n        \"mul\",\n        \"pow\",\n        \"mod\",\n        \"floordiv\",\n        \"truediv\",\n        \"divmod\",\n        \"eq\",\n        \"ne\",\n        \"lt\",\n        \"gt\",\n        \"le\",\n        \"ge\",\n        \"remainder\",\n        \"matmul\",\n    }\n    aliases = {\n        \"subtract\": \"sub\",\n        \"multiply\": \"mul\",\n        \"floor_divide\": \"floordiv\",\n        \"true_divide\": \"truediv\",\n        \"power\": \"pow\",\n        \"remainder\": \"mod\",\n        \"divide\": \"div\",\n        \"equal\": \"eq\",\n        \"not_equal\": \"ne\",\n        \"less\": \"lt\",\n        \"less_equal\": \"le\",\n        \"greater\": \"gt\",\n        \"greater_equal\": \"ge\",\n    }\n\n    # For op(., Array) -> Array.__r{op}__\n    flipped = {\n        \"lt\": \"__gt__\",\n        \"le\": \"__ge__\",\n        \"gt\": \"__lt__\",\n        \"ge\": \"__le__\",\n        \"eq\": \"__eq__\",\n        \"ne\": \"__ne__\",\n    }\n\n    op_name = ufunc.__name__\n    op_name = aliases.get(op_name, op_name)\n\n    def not_implemented(*args, **kwargs):\n        return NotImplemented\n\n    if method == \"__call__\" and op_name in special and kwargs.get(\"out\") is None:\n        if isinstance(inputs[0], type(self)):\n            name = \"__{}__\".format(op_name)\n            return getattr(self, name, not_implemented)(inputs[1])\n        else:\n            name = flipped.get(op_name, \"__r{}__\".format(op_name))\n            return getattr(self, name, not_implemented)(inputs[0])\n    else:\n        return NotImplemented",
        "begin_line": 151,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.dispatch.not_implemented#222",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.not_implemented(*args, **kwargs)",
        "snippet": "    def not_implemented(*args, **kwargs):\n        return NotImplemented",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.018518518518518517,
            "pseudo_dstar_susp": 0.0011574074074074073,
            "pseudo_tarantula_susp": 0.019230769230769232,
            "pseudo_op2_susp": 0.0011574074074074073,
            "pseudo_barinel_susp": 0.019230769230769232
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = (\n        \"Cannot generate range with {side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError:\n            raise OutOfBoundsDatetime(msg)\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.018518518518518517,
            "pseudo_dstar_susp": 0.0011574074074074073,
            "pseudo_tarantula_susp": 0.019230769230769232,
            "pseudo_op2_susp": 0.0011574074074074073,
            "pseudo_barinel_susp": 0.019230769230769232
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#156",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            assert endpoint >= 0\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        \"Cannot generate range with \"\n        \"{side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )",
        "begin_line": 156,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.018518518518518517,
            "pseudo_dstar_susp": 0.0011574074074074073,
            "pseudo_tarantula_susp": 0.019230769230769232,
            "pseudo_op2_susp": 0.0011574074074074073,
            "pseudo_barinel_susp": 0.019230769230769232
        }
    },
    {
        "name": "pandas.tseries.offsets.as_timestamp#82",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.as_timestamp(obj)",
        "snippet": "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.019889325527307e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.apply_wraps#92",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.apply_wraps(func)",
        "snippet": "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
        "begin_line": 92,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.019889325527307e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.wrapper#94",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result",
        "begin_line": 94,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.019889325527307e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset._repr_attrs#374",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset._repr_attrs(self)",
        "snippet": "    def _repr_attrs(self):\n        exclude = {\"n\", \"inc\", \"normalize\"}\n        attrs = []\n        for attr in sorted(self.__dict__):\n            if attr.startswith(\"_\") or attr == \"kwds\":\n                continue\n            elif attr not in exclude:\n                value = getattr(self, attr)\n                attrs.append(\"{attr}={value}\".format(attr=attr, value=value))\n\n        out = \"\"\n        if attrs:\n            out += \": \" + \", \".join(attrs)\n        return out",
        "begin_line": 374,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollback#393",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollback(self, dt)",
        "snippet": "    def rollback(self, dt):\n        \"\"\"\n        Roll provided date backward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.onOffset(dt):\n            dt = dt - type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 393,
        "end_line": 405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollforward#407",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.onOffset(dt):\n            dt = dt + type(self)(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 407,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#441",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        return self._prefix",
        "begin_line": 441,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#445",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self):\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = \"{n}{code}\".format(n=self.n, code=code)\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 445,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#475",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(\"Bad freq suffix {suffix}\".format(suffix=suffix))\n        return cls()",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.1111111111111111,
            "pseudo_dstar_susp": 0.001218026796589525,
            "pseudo_tarantula_susp": 0.1111111111111111,
            "pseudo_op2_susp": 0.001218026796589525,
            "pseudo_barinel_susp": 0.1111111111111111
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin.offset#507",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin.offset(self)",
        "snippet": "    def offset(self):\n        \"\"\"\n        Alias for self._offset.\n        \"\"\"\n        # Alias for backward compat\n        return self._offset",
        "begin_line": 507,
        "end_line": 512,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.127438231469441e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#534",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 534,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.127438231469441e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#570",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 570,
        "end_line": 607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.onOffset#634",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 634,
        "end_line": 637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.127438231469441e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.onOffset#1118",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.day == self._get_offset_day(dt)",
        "begin_line": 1118,
        "end_line": 1121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.MonthOffset.apply#1124",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.MonthOffset",
        "signature": "pandas.tseries.offsets.MonthOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        compare_day = self._get_offset_day(other)\n        n = liboffsets.roll_convention(other.day, self.n, compare_day)\n        return shift_month(other, n, self._day_opt)",
        "begin_line": 1124,
        "end_line": 1127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.__init__#1827",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.__init__(self, n=1, normalize=False, startingMonth=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, startingMonth=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        if startingMonth is None:\n            startingMonth = self._default_startingMonth\n        object.__setattr__(self, \"startingMonth\", startingMonth)",
        "begin_line": 1827,
        "end_line": 1832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset._from_name#1838",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        kwargs = {}\n        if suffix:\n            kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n        else:\n            if cls._from_name_startingMonth is not None:\n                kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n        return cls(**kwargs)",
        "begin_line": 1838,
        "end_line": 1845,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.QuarterOffset.rule_code#1848",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.QuarterOffset",
        "signature": "pandas.tseries.offsets.QuarterOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.startingMonth]\n        return \"{prefix}-{month}\".format(prefix=self._prefix, month=month)",
        "begin_line": 1848,
        "end_line": 1850,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset._get_offset_day#1945",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset._get_offset_day(self, other)",
        "snippet": "    def _get_offset_day(self, other):\n        # override BaseOffset method to use self.month instead of other.month\n        # TODO: there may be a more performant way to do this\n        return liboffsets.get_day_of_month(\n            other.replace(month=self.month), self._day_opt\n        )",
        "begin_line": 1945,
        "end_line": 1950,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.apply#1953",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.apply(self, other)",
        "snippet": "    def apply(self, other):\n        years = roll_yearday(other, self.n, self.month, self._day_opt)\n        months = years * 12 + (self.month - other.month)\n        return shift_month(other, months, self._day_opt)",
        "begin_line": 1953,
        "end_line": 1956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.onOffset#1969",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.month == self.month and dt.day == self._get_offset_day(dt)",
        "begin_line": 1969,
        "end_line": 1972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.__init__#1974",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.__init__(self, n=1, normalize=False, month=None)",
        "snippet": "    def __init__(self, n=1, normalize=False, month=None):\n        BaseOffset.__init__(self, n, normalize)\n\n        month = month if month is not None else self._default_month\n        object.__setattr__(self, \"month\", month)\n\n        if self.month < 1 or self.month > 12:\n            raise ValueError(\"Month must go from 1 to 12\")",
        "begin_line": 1974,
        "end_line": 1981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.YearOffset.rule_code#1991",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.YearOffset",
        "signature": "pandas.tseries.offsets.YearOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        month = ccalendar.MONTH_ALIASES[self.month]\n        return \"{prefix}-{month}\".format(prefix=self._prefix, month=month)",
        "begin_line": 1991,
        "end_line": 1993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2549",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2549,
        "end_line": 2554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00980392156862745,
            "pseudo_dstar_susp": 0.0011013215859030838,
            "pseudo_tarantula_susp": 0.01020408163265306,
            "pseudo_op2_susp": 0.0011013215859030838,
            "pseudo_barinel_susp": 0.01020408163265306
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2579",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2579,
        "end_line": 2594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011904761904761904,
            "pseudo_dstar_susp": 0.0011185682326621924,
            "pseudo_tarantula_susp": 0.012048192771084338,
            "pseudo_op2_susp": 0.0011185682326621924,
            "pseudo_barinel_susp": 0.012048192771084338
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2601",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2601,
        "end_line": 2616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2619",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self):\n        return self.n * self._inc",
        "begin_line": 2619,
        "end_line": 2620,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009523809523809525,
            "pseudo_dstar_susp": 0.0010976948408342481,
            "pseudo_tarantula_susp": 0.009900990099009901,
            "pseudo_op2_susp": 0.0010976948408342481,
            "pseudo_barinel_susp": 0.009900990099009901
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2623",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2623,
        "end_line": 2624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011111111111111112,
            "pseudo_dstar_susp": 0.0011111111111111111,
            "pseudo_tarantula_susp": 0.011235955056179775,
            "pseudo_op2_susp": 0.0011111111111111111,
            "pseudo_barinel_susp": 0.011235955056179775
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2724",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = Timestamp(start)\n    start = start if start is not NaT else None\n    end = Timestamp(end)\n    end = end if end is not NaT else None\n\n    if start and not offset.onOffset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.onOffset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(\n                    \"Offset {offset} did not increment date\".format(offset=offset)\n                )\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(\n                    \"Offset {offset} did not decrement date\".format(offset=offset)\n                )\n            cur = next_date",
        "begin_line": 2724,
        "end_line": 2805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__str__#86",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        return self.name",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.848335631278314e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__eq__#89",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        \"\"\"\n        Check whether 'other' is equal to self.\n\n        By default, 'other' is considered equal if either\n\n        * it's a string matching 'self.name'.\n        * it's an instance of this type and all of the\n          the attributes in ``self._metadata`` are equal between\n          `self` and `other`.\n\n        Parameters\n        ----------\n        other : Any\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n        if isinstance(other, type(self)):\n            return all(\n                getattr(self, attr) == getattr(other, attr) for attr in self._metadata\n            )\n        return False",
        "begin_line": 89,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__hash__#119",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        return hash(tuple(getattr(self, attr) for attr in self._metadata))",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__ne__#122",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__ne__(self, other)",
        "snippet": "    def __ne__(self, other) -> bool:\n        return not self.__eq__(other)",
        "begin_line": 122,
        "end_line": 123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.na_value#126",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.na_value(self)",
        "snippet": "    def na_value(self):\n        \"\"\"\n        Default NA value to use for this type.\n\n        This is used in e.g. ExtensionArray.take. This should be the\n        user-facing \"boxed\" version of the NA value, not the physical NA value\n        for storage.  e.g. for JSONArray, this is an empty dictionary.\n        \"\"\"\n        return np.nan",
        "begin_line": 126,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.names#174",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.names(self)",
        "snippet": "    def names(self) -> Optional[List[str]]:\n        \"\"\"\n        Ordered list of field names, or None if there are no fields.\n\n        This is for compatibility with NumPy arrays, and may be removed in the\n        future.\n        \"\"\"\n        return None",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#195",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\"Cannot construct a '{}' from \"\n        ...                         \"'{}'\".format(cls.__name__, string))\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\"Expects a string, got {typ}\".format(typ=type(string)))\n        if string != cls.name:\n            raise TypeError(\n                \"Cannot construct a '{cls}' from '{string}'\".format(\n                    cls=cls.__name__, string=string\n                )\n            )\n        return cls()",
        "begin_line": 195,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000574052812858783,
            "pseudo_dstar_susp": 0.0016611295681063123,
            "pseudo_tarantula_susp": 0.0005807200929152149,
            "pseudo_op2_susp": 0.0016611295681063123,
            "pseudo_barinel_susp": 0.0005807200929152149
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#248",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        is_dtype : bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        try:\n            return cls.construct_from_string(dtype) is not None\n        except TypeError:\n            return False",
        "begin_line": 248,
        "end_line": 286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000555247084952804,
            "pseudo_dstar_susp": 0.0015360983102918587,
            "pseudo_tarantula_susp": 0.0005154639175257732,
            "pseudo_op2_susp": 0.0015360983102918587,
            "pseudo_barinel_susp": 0.0005154639175257732
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_numeric#289",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        \"\"\"\n        Whether columns with this dtype should be considered numeric.\n\n        By default ExtensionDtypes are assumed to be non-numeric.\n        They'll be excluded from operations that exclude non-numeric\n        columns, like (groupby) reductions, plotting, etc.\n        \"\"\"\n        return False",
        "begin_line": 289,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_boolean#300",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        \"\"\"\n        Whether this dtype should be considered boolean.\n\n        By default, ExtensionDtypes are assumed to be non-numeric.\n        Setting this to True will affect the behavior of several places,\n        e.g.\n\n        * is_bool\n        * boolean indexing\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return False",
        "begin_line": 300,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#62",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 62,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003575259206292456,
            "pseudo_dstar_susp": 0.0003575259206292456,
            "pseudo_tarantula_susp": 0.000357653791130186,
            "pseudo_op2_susp": 0.0003575259206292456,
            "pseudo_barinel_susp": 0.000357653791130186
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_to_dtype#92",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_to_dtype(result, dtype)",
        "snippet": "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\" try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result.ravel()), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
        "begin_line": 92,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_numeric#159",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_numeric(result, dtype, do_round: bool=False)",
        "snippet": "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupoby.agg _ohlc; really this should be handled\n        #  earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
        "begin_line": 159,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.trans#182",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.trans(x)",
        "snippet": "    def trans(x):\n        if do_round:\n            return x.round()\n        return x",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast_putmask#233",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other)",
        "snippet": "def maybe_upcast_putmask(result: np.ndarray, mask: np.ndarray, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : scalar\n        The source value\n\n    Returns\n    -------\n    result : ndarray\n    changed : boolean\n        Set to true if the result array was upcasted\n\n    Examples\n    --------\n    >>> result, _ = maybe_upcast_putmask(np.arange(1,6),\n    np.array([False, True, False, True, True]), np.arange(21,23))\n    >>> result\n    array([1, 21, 3, 22, 21])\n    \"\"\"\n\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n    if not is_scalar(other):\n        # We _could_ support non-scalar other, but until we have a compelling\n        #  use case, we assume away the possibility.\n        raise ValueError(\"other must be a scalar\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if result.dtype.kind in [\"m\", \"M\"]:\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if is_scalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1):\n                if isna(other):\n                    return changeit()\n\n            # we have an ndarray and the masking has nans in it\n            else:\n\n                if isna(other).any():\n                    return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
        "begin_line": 233,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.changeit#284",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.changeit()",
        "snippet": "        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True",
        "begin_line": 284,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#339",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 339,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004805382027871216,
            "pseudo_dstar_susp": 0.0004791566842357451,
            "pseudo_tarantula_susp": 0.000687757909215956,
            "pseudo_op2_susp": 0.0004791566842357451,
            "pseudo_barinel_susp": 0.000687757909215956
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#472",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 472,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00047192071731949034,
            "pseudo_dstar_susp": 0.000471253534401508,
            "pseudo_tarantula_susp": 0.0006605019815059445,
            "pseudo_op2_susp": 0.000471253534401508,
            "pseudo_barinel_susp": 0.0006605019815059445
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#518",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n\n    return dtype, val",
        "begin_line": 518,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_array#593",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_array(arr, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_array(arr, pandas_dtype: bool = False):\n    \"\"\"\n    Infer the dtype from a scalar or array.\n\n    Parameters\n    ----------\n    arr : scalar or array\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, array belongs to pandas extension types\n        is inferred as object\n\n    Returns\n    -------\n    tuple (numpy-compat/pandas-compat dtype, array)\n\n    Notes\n    -----\n    if pandas_dtype=False. these infer to numpy dtypes\n    exactly with the exception that mixed / object dtypes\n    are not coerced by stringifying or conversion\n\n    if pandas_dtype=True. datetime64tz-aware/categorical\n    types will retain there character.\n\n    Examples\n    --------\n    >>> np.asarray([1, '1'])\n    array(['1', '1'], dtype='<U21')\n\n    >>> infer_dtype_from_array([1, '1'])\n    (numpy.object_, [1, '1'])\n\n    \"\"\"\n\n    if isinstance(arr, np.ndarray):\n        return arr.dtype, arr\n\n    if not is_list_like(arr):\n        arr = [arr]\n\n    if pandas_dtype and is_extension_array_dtype(arr):\n        return arr.dtype, arr\n\n    elif isinstance(arr, ABCSeries):\n        return arr.dtype, np.asarray(arr)\n\n    # don't force numpy coerce with nan's\n    inferred = lib.infer_dtype(arr, skipna=False)\n    if inferred in [\"string\", \"bytes\", \"unicode\", \"mixed\", \"mixed-integer\"]:\n        return (np.object_, arr)\n\n    arr = np.asarray(arr)\n    return arr.dtype, arr",
        "begin_line": 593,
        "end_line": 646,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#649",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"\n    Try to infer an object's dtype, for use in arithmetic ops.\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    numpy.int64\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 649,
        "end_line": 680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.invalidate_string_dtypes#713",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.invalidate_string_dtypes(dtype_set)",
        "snippet": "def invalidate_string_dtypes(dtype_set):\n    \"\"\"Change string like dtypes to object for\n    ``DataFrame.select_dtypes()``.\n    \"\"\"\n    non_string_dtypes = dtype_set - {np.dtype(\"S\").type, np.dtype(\"<U\").type}\n    if non_string_dtypes != dtype_set:\n        raise TypeError(\"string dtypes are not allowed, use 'object' instead\")",
        "begin_line": 713,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#722",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 722,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#764",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(\n            \"cannot astype a datetimelike from [{from_dtype}] \"\n            \"to [{to_dtype}]\".format(from_dtype=arr.dtype, to_dtype=dtype)\n        )\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(\n            \"cannot astype a timedelta from [{from_dtype}] \"\n            \"to [{to_dtype}]\".format(from_dtype=arr.dtype, to_dtype=dtype)\n        )\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = \"The '{dtype}' dtype has no unit. Please pass in '{dtype}[ns]' instead.\"\n        raise ValueError(msg.format(dtype=dtype.name))\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 764,
        "end_line": 863,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.soft_convert_objects#915",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.soft_convert_objects(values: np.ndarray, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False, copy: bool=True)",
        "snippet": "def soft_convert_objects(\n    values: np.ndarray,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n    copy: bool = True,\n):\n    \"\"\" if we have an object dtype, try to coerce dates and/or numbers \"\"\"\n\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n\n    conversion_count = sum((datetime, numeric, timedelta))\n    if conversion_count == 0:\n        raise ValueError(\"At least one of datetime, numeric or timedelta must be True.\")\n    elif conversion_count > 1 and coerce:\n        raise ValueError(\n            \"Only one of 'datetime', 'numeric' or \"\n            \"'timedelta' can be True when when coerce=True.\"\n        )\n\n    if not is_object_dtype(values.dtype):\n        # If not object, do not attempt conversion\n        values = values.copy() if copy else values\n        return values\n\n    # If 1 flag is coerce, ensure 2 others are False\n    if coerce:\n        # Immediate return if coerce\n        if datetime:\n            from pandas import to_datetime\n\n            return to_datetime(values, errors=\"coerce\").to_numpy()\n        elif timedelta:\n            from pandas import to_timedelta\n\n            return to_timedelta(values, errors=\"coerce\").to_numpy()\n        elif numeric:\n            from pandas import to_numeric\n\n            return to_numeric(values, errors=\"coerce\")\n\n    # Soft conversions\n    if datetime:\n        # GH 20380, when datetime is beyond year 2262, hence outside\n        # bound of nanosecond-resolution 64-bit integers.\n        try:\n            values = lib.maybe_convert_objects(values, convert_datetime=True)\n        except OutOfBoundsDatetime:\n            pass\n\n    if timedelta and is_object_dtype(values.dtype):\n        # Object check to ensure only run if previous did not convert\n        values = lib.maybe_convert_objects(values, convert_timedelta=True)\n\n    if numeric and is_object_dtype(values.dtype):\n        try:\n            converted = lib.maybe_convert_numeric(values, set(), coerce_numeric=True)\n        except (ValueError, TypeError):\n            pass\n        else:\n            # If all NaNs, then do not-alter\n            values = converted if not isna(converted).all() else values\n            values = values.copy() if copy else values\n\n    return values",
        "begin_line": 915,
        "end_line": 984,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#987",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 987,
        "end_line": 998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003636363636363636,
            "pseudo_dstar_susp": 0.0003636363636363636,
            "pseudo_tarantula_susp": 0.0003637686431429611,
            "pseudo_op2_susp": 0.0003636363636363636,
            "pseudo_barinel_susp": 0.0003637686431429611
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1001",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1001,
        "end_line": 1105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038255547054322876,
            "pseudo_dstar_susp": 0.00038255547054322876,
            "pseudo_tarantula_susp": 0.00038299502106472615,
            "pseudo_op2_susp": 0.00038255547054322876,
            "pseudo_barinel_susp": 0.00038299502106472615
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1045",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1045,
        "end_line": 1068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003762227238525207,
            "pseudo_dstar_susp": 0.0003762227238525207,
            "pseudo_tarantula_susp": 0.0003766478342749529,
            "pseudo_op2_susp": 0.0003762227238525207,
            "pseudo_barinel_susp": 0.0003766478342749529
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1070",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)",
        "begin_line": 1070,
        "end_line": 1079,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038095238095238096,
            "pseudo_dstar_susp": 0.00038095238095238096,
            "pseudo_tarantula_susp": 0.00038138825324180017,
            "pseudo_op2_susp": 0.00038095238095238096,
            "pseudo_barinel_susp": 0.00038138825324180017
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1108",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\" try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                \"The '{dtype}' dtype has no unit. \"\n                \"Please pass in '{dtype}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert datetimelike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert timedeltalike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(\"Cannot cast datetime64 to {dtype}\".format(dtype=dtype))\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1108,
        "end_line": 1244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006770480704129993,
            "pseudo_dstar_susp": 0.0024752475247524753,
            "pseudo_tarantula_susp": 0.0006622516556291391,
            "pseudo_op2_susp": 0.0024752475247524753,
            "pseudo_barinel_susp": 0.0006622516556291391
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1247",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types)",
        "snippet": "def find_common_type(types):\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1247,
        "end_line": 1292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.cast_scalar_to_array#1295",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.cast_scalar_to_array(shape, value, dtype=None)",
        "snippet": "def cast_scalar_to_array(shape, value, dtype=None):\n    \"\"\"\n    Create np.ndarray of specified shape and dtype, filled with values.\n\n    Parameters\n    ----------\n    shape : tuple\n    value : scalar value\n    dtype : np.dtype, optional\n        dtype to coerce\n\n    Returns\n    -------\n    ndarray of shape, filled with value, of specified / inferred dtype\n\n    \"\"\"\n\n    if dtype is None:\n        dtype, fill_value = infer_dtype_from_scalar(value)\n    else:\n        fill_value = value\n\n    values = np.empty(shape, dtype=dtype)\n    values.fill(fill_value)\n\n    return values",
        "begin_line": 1295,
        "end_line": 1320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.28775070445881e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1323",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype)",
        "snippet": "def construct_1d_arraylike_from_scalar(value, length: int, dtype):\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype / np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n        if not isinstance(dtype, (np.dtype, type(np.dtype))):\n            dtype = dtype.dtype\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1323,
        "end_line": 1360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1363",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1363,
        "end_line": 1385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005417118093174431,
            "pseudo_dstar_susp": 0.0014814814814814814,
            "pseudo_tarantula_susp": 0.00043591979075850045,
            "pseudo_op2_susp": 0.0014814814814814814,
            "pseudo_barinel_susp": 0.00043591979075850045
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1388",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool = False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1388,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00040749796251018743,
            "pseudo_dstar_susp": 0.00040749796251018743,
            "pseudo_tarantula_susp": 0.0004088307440719542,
            "pseudo_op2_susp": 0.00040749796251018743,
            "pseudo_barinel_susp": 0.0004088307440719542
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1429",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    int_arr : ndarray\n        An array of integer or unsigned integer dtype\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            \"casted to the dtype {dtype}\".format(dtype=dtype)\n        )\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1429,
        "end_line": 1497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011511453896627144,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge.merge#57",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge.merge(left, right, how: str='inner', on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, sort: bool=False, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)",
        "snippet": "def merge(\n    left,\n    right,\n    how: str = \"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    sort: bool = False,\n    suffixes=(\"_x\", \"_y\"),\n    copy: bool = True,\n    indicator: bool = False,\n    validate=None,\n):\n    op = _MergeOperation(\n        left,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )\n    return op.get_result()",
        "begin_line": 57,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.335931065070012e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._groupby_and_merge#94",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._groupby_and_merge(by, on, left, right: 'DataFrame', _merge_pieces, check_duplicates: bool=True)",
        "snippet": "def _groupby_and_merge(\n    by, on, left, right: \"DataFrame\", _merge_pieces, check_duplicates: bool = True\n):\n    \"\"\"\n    groupby & merge; we are always performing a left-by type operation\n\n    Parameters\n    ----------\n    by: field to group\n    on: duplicates field\n    left: left frame\n    right: right frame\n    _merge_pieces: function for merging\n    check_duplicates: bool, default True\n        should we check & clean duplicates\n    \"\"\"\n\n    pieces = []\n    if not isinstance(by, (list, tuple)):\n        by = [by]\n\n    lby = left.groupby(by, sort=False)\n\n    # if we can groupby the rhs\n    # then we can get vastly better perf\n    try:\n\n        # we will check & remove duplicates if indicated\n        if check_duplicates:\n            if on is None:\n                on = []\n            elif not isinstance(on, (list, tuple)):\n                on = [on]\n\n            if right.duplicated(by + on).any():\n                right = right.drop_duplicates(by + on, keep=\"last\")\n        rby = right.groupby(by, sort=False)\n    except KeyError:\n        rby = None\n\n    for key, lhs in lby:\n\n        if rby is None:\n            rhs = right\n        else:\n            try:\n                rhs = right.take(rby.indices[key])\n            except KeyError:\n                # key doesn't exist in left\n                lcols = lhs.columns.tolist()\n                cols = lcols + [r for r in right.columns if r not in set(lcols)]\n                merged = lhs.reindex(columns=cols)\n                merged.index = range(len(merged))\n                pieces.append(merged)\n                continue\n\n        merged = _merge_pieces(lhs, rhs)\n\n        # make sure join keys are in the merged\n        # TODO, should _merge_pieces do this?\n        for k in by:\n            try:\n                if k in merged:\n                    merged[k] = key\n            except KeyError:\n                pass\n\n        pieces.append(merged)\n\n    # preserve the original order\n    # if we have a missing piece this can be reset\n    from pandas.core.reshape.concat import concat\n\n    result = concat(pieces, ignore_index=True)\n    result = result.reindex(columns=pieces[0].columns, copy=False)\n    return result, lby",
        "begin_line": 94,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge.merge_ordered#172",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge.merge_ordered(left, right, on=None, left_on=None, right_on=None, left_by=None, right_by=None, fill_method=None, suffixes=('_x', '_y'), how: str='outer')",
        "snippet": "def merge_ordered(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_by=None,\n    right_by=None,\n    fill_method=None,\n    suffixes=(\"_x\", \"_y\"),\n    how: str = \"outer\",\n):\n    \"\"\"\n    Perform merge with optional filling/interpolation.\n\n    Designed for ordered data like time series data. Optionally\n    perform group-wise merge (see examples).\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label or list\n        Field names to join on. Must be found in both DataFrames.\n    left_on : label or list, or array-like\n        Field names to join on in left DataFrame. Can be a vector or list of\n        vectors of the length of the DataFrame to use a particular vector as\n        the join key instead of columns.\n    right_on : label or list, or array-like\n        Field names to join on in right DataFrame or vector/list of vectors per\n        left_on docs.\n    left_by : column name or list of column names\n        Group left DataFrame by group columns and merge piece by piece with\n        right DataFrame.\n    right_by : column name or list of column names\n        Group right DataFrame by group columns and merge piece by piece with\n        left DataFrame.\n    fill_method : {'ffill', None}, default None\n        Interpolation method for data.\n    suffixes : Sequence, default is (\"_x\", \"_y\")\n        A length-2 sequence where each element is optionally a string\n        indicating the suffix to add to overlapping column names in\n        `left` and `right` respectively. Pass a value of `None` instead\n        of a string to indicate that the column name from `left` or\n        `right` should be left as-is, with no suffix. At least one of the\n        values must not be None.\n\n        .. versionchanged:: 0.25.0\n    how : {'left', 'right', 'outer', 'inner'}, default 'outer'\n        * left: use only keys from left frame (SQL: left outer join)\n        * right: use only keys from right frame (SQL: right outer join)\n        * outer: use union of keys from both frames (SQL: full outer join)\n        * inner: use intersection of keys from both frames (SQL: inner join).\n\n    Returns\n    -------\n    DataFrame\n        The merged DataFrame output type will the be same as\n        'left', if it is a subclass of DataFrame.\n\n    See Also\n    --------\n    merge\n    merge_asof\n\n    Examples\n    --------\n    >>> A\n          key  lvalue group\n    0   a       1     a\n    1   c       2     a\n    2   e       3     a\n    3   a       1     b\n    4   c       2     b\n    5   e       3     b\n\n    >>> B\n        Key  rvalue\n    0     b       1\n    1     c       2\n    2     d       3\n\n    >>> merge_ordered(A, B, fill_method='ffill', left_by='group')\n      group key  lvalue  rvalue\n    0     a   a       1     NaN\n    1     a   b       1     1.0\n    2     a   c       2     2.0\n    3     a   d       2     3.0\n    4     a   e       3     3.0\n    5     b   a       1     NaN\n    6     b   b       1     1.0\n    7     b   c       2     2.0\n    8     b   d       2     3.0\n    9     b   e       3     3.0\n    \"\"\"\n\n    def _merger(x, y):\n        # perform the ordered merge operation\n        op = _OrderedMerge(\n            x,\n            y,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            suffixes=suffixes,\n            fill_method=fill_method,\n            how=how,\n        )\n        return op.get_result()\n\n    if left_by is not None and right_by is not None:\n        raise ValueError(\"Can only group either left or right frames\")\n    elif left_by is not None:\n        result, _ = _groupby_and_merge(\n            left_by, on, left, right, lambda x, y: _merger(x, y), check_duplicates=False\n        )\n    elif right_by is not None:\n        result, _ = _groupby_and_merge(\n            right_by,\n            on,\n            right,\n            left,\n            lambda x, y: _merger(y, x),\n            check_duplicates=False,\n        )\n    else:\n        result = _merger(left, right)\n    return result",
        "begin_line": 172,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._merger#268",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._merger(x, y)",
        "snippet": "    def _merger(x, y):\n        # perform the ordered merge operation\n        op = _OrderedMerge(\n            x,\n            y,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            suffixes=suffixes,\n            fill_method=fill_method,\n            how=how,\n        )\n        return op.get_result()",
        "begin_line": 268,
        "end_line": 280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge.merge_asof#302",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge.merge_asof(left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, by=None, left_by=None, right_by=None, suffixes=('_x', '_y'), tolerance=None, allow_exact_matches: bool=True, direction: str='backward')",
        "snippet": "def merge_asof(\n    left,\n    right,\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index: bool = False,\n    right_index: bool = False,\n    by=None,\n    left_by=None,\n    right_by=None,\n    suffixes=(\"_x\", \"_y\"),\n    tolerance=None,\n    allow_exact_matches: bool = True,\n    direction: str = \"backward\",\n):\n    \"\"\"\n    Perform an asof merge. This is similar to a left-join except that we\n    match on nearest key rather than equal keys.\n\n    Both DataFrames must be sorted by the key.\n\n    For each row in the left DataFrame:\n\n      - A \"backward\" search selects the last row in the right DataFrame whose\n        'on' key is less than or equal to the left's key.\n\n      - A \"forward\" search selects the first row in the right DataFrame whose\n        'on' key is greater than or equal to the left's key.\n\n      - A \"nearest\" search selects the row in the right DataFrame whose 'on'\n        key is closest in absolute distance to the left's key.\n\n    The default is \"backward\" and is compatible in versions below 0.20.0.\n    The direction parameter was added in version 0.20.0 and introduces\n    \"forward\" and \"nearest\".\n\n    Optionally match on equivalent keys with 'by' before searching with 'on'.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : DataFrame\n    on : label\n        Field name to join on. Must be found in both DataFrames.\n        The data MUST be ordered. Furthermore this must be a numeric column,\n        such as datetimelike, integer, or float. On or left_on/right_on\n        must be given.\n    left_on : label\n        Field name to join on in left DataFrame.\n    right_on : label\n        Field name to join on in right DataFrame.\n    left_index : bool\n        Use the index of the left DataFrame as the join key.\n    right_index : bool\n        Use the index of the right DataFrame as the join key.\n    by : column name or list of column names\n        Match on these columns before performing merge operation.\n    left_by : column name\n        Field names to match on in the left DataFrame.\n    right_by : column name\n        Field names to match on in the right DataFrame.\n    suffixes : 2-length sequence (tuple, list, ...)\n        Suffix to apply to overlapping column names in the left and right\n        side, respectively.\n    tolerance : int or Timedelta, optional, default None\n        Select asof tolerance within this range; must be compatible\n        with the merge index.\n    allow_exact_matches : bool, default True\n\n        - If True, allow matching with the same 'on' value\n          (i.e. less-than-or-equal-to / greater-than-or-equal-to)\n        - If False, don't match the same 'on' value\n          (i.e., strictly less-than / strictly greater-than).\n\n    direction : 'backward' (default), 'forward', or 'nearest'\n        Whether to search for prior, subsequent, or closest matches.\n\n    Returns\n    -------\n    merged : DataFrame\n\n    See Also\n    --------\n    merge\n    merge_ordered\n\n    Examples\n    --------\n    >>> left = pd.DataFrame({'a': [1, 5, 10], 'left_val': ['a', 'b', 'c']})\n    >>> left\n        a left_val\n    0   1        a\n    1   5        b\n    2  10        c\n\n    >>> right = pd.DataFrame({'a': [1, 2, 3, 6, 7],\n    ...                       'right_val': [1, 2, 3, 6, 7]})\n    >>> right\n       a  right_val\n    0  1          1\n    1  2          2\n    2  3          3\n    3  6          6\n    4  7          7\n\n    >>> pd.merge_asof(left, right, on='a')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          3\n    2  10        c          7\n\n    >>> pd.merge_asof(left, right, on='a', allow_exact_matches=False)\n        a left_val  right_val\n    0   1        a        NaN\n    1   5        b        3.0\n    2  10        c        7.0\n\n    >>> pd.merge_asof(left, right, on='a', direction='forward')\n        a left_val  right_val\n    0   1        a        1.0\n    1   5        b        6.0\n    2  10        c        NaN\n\n    >>> pd.merge_asof(left, right, on='a', direction='nearest')\n        a left_val  right_val\n    0   1        a          1\n    1   5        b          6\n    2  10        c          7\n\n    We can use indexed DataFrames as well.\n\n    >>> left = pd.DataFrame({'left_val': ['a', 'b', 'c']}, index=[1, 5, 10])\n    >>> left\n       left_val\n    1         a\n    5         b\n    10        c\n\n    >>> right = pd.DataFrame({'right_val': [1, 2, 3, 6, 7]},\n    ...                      index=[1, 2, 3, 6, 7])\n    >>> right\n       right_val\n    1          1\n    2          2\n    3          3\n    6          6\n    7          7\n\n    >>> pd.merge_asof(left, right, left_index=True, right_index=True)\n       left_val  right_val\n    1         a          1\n    5         b          3\n    10        c          7\n\n    Here is a real-world times-series example\n\n    >>> quotes\n                         time ticker     bid     ask\n    0 2016-05-25 13:30:00.023   GOOG  720.50  720.93\n    1 2016-05-25 13:30:00.023   MSFT   51.95   51.96\n    2 2016-05-25 13:30:00.030   MSFT   51.97   51.98\n    3 2016-05-25 13:30:00.041   MSFT   51.99   52.00\n    4 2016-05-25 13:30:00.048   GOOG  720.50  720.93\n    5 2016-05-25 13:30:00.049   AAPL   97.99   98.01\n    6 2016-05-25 13:30:00.072   GOOG  720.50  720.88\n    7 2016-05-25 13:30:00.075   MSFT   52.01   52.03\n\n    >>> trades\n                         time ticker   price  quantity\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100\n\n    By default we are taking the asof of the quotes\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker')\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 2ms between the quote time and the trade time\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('2ms'))\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75   51.95   51.96\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155     NaN     NaN\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100  720.50  720.93\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100  720.50  720.93\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n\n    We only asof within 10ms between the quote time and the trade time\n    and we exclude exact matches on time. However *prior* data will\n    propagate forward\n\n    >>> pd.merge_asof(trades, quotes,\n    ...                       on='time',\n    ...                       by='ticker',\n    ...                       tolerance=pd.Timedelta('10ms'),\n    ...                       allow_exact_matches=False)\n                         time ticker   price  quantity     bid     ask\n    0 2016-05-25 13:30:00.023   MSFT   51.95        75     NaN     NaN\n    1 2016-05-25 13:30:00.038   MSFT   51.95       155   51.97   51.98\n    2 2016-05-25 13:30:00.048   GOOG  720.77       100     NaN     NaN\n    3 2016-05-25 13:30:00.048   GOOG  720.92       100     NaN     NaN\n    4 2016-05-25 13:30:00.048   AAPL   98.00       100     NaN     NaN\n    \"\"\"\n    op = _AsOfMerge(\n        left,\n        right,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        by=by,\n        left_by=left_by,\n        right_by=right_by,\n        suffixes=suffixes,\n        how=\"asof\",\n        tolerance=tolerance,\n        allow_exact_matches=allow_exact_matches,\n        direction=direction,\n    )\n    return op.get_result()",
        "begin_line": 302,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0043859649122807015,
            "pseudo_dstar_susp": 0.001049317943336831,
            "pseudo_tarantula_susp": 0.006993006993006993,
            "pseudo_op2_susp": 0.001049317943336831,
            "pseudo_barinel_susp": 0.006993006993006993
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation.__init__#549",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation.__init__(self, left: Union['Series', 'DataFrame'], right: Union['Series', 'DataFrame'], how: str='inner', on=None, left_on=None, right_on=None, axis=1, left_index: bool=False, right_index: bool=False, sort: bool=True, suffixes=('_x', '_y'), copy: bool=True, indicator: bool=False, validate=None)",
        "snippet": "    def __init__(\n        self,\n        left: Union[\"Series\", \"DataFrame\"],\n        right: Union[\"Series\", \"DataFrame\"],\n        how: str = \"inner\",\n        on=None,\n        left_on=None,\n        right_on=None,\n        axis=1,\n        left_index: bool = False,\n        right_index: bool = False,\n        sort: bool = True,\n        suffixes=(\"_x\", \"_y\"),\n        copy: bool = True,\n        indicator: bool = False,\n        validate=None,\n    ):\n        _left = _validate_operand(left)\n        _right = _validate_operand(right)\n        self.left = self.orig_left = _left\n        self.right = self.orig_right = _right\n        self.how = how\n        self.axis = axis\n\n        self.on = com.maybe_make_list(on)\n        self.left_on = com.maybe_make_list(left_on)\n        self.right_on = com.maybe_make_list(right_on)\n\n        self.copy = copy\n        self.suffixes = suffixes\n        self.sort = sort\n\n        self.left_index = left_index\n        self.right_index = right_index\n\n        self.indicator = indicator\n\n        self.indicator_name: Optional[str]\n        if isinstance(self.indicator, str):\n            self.indicator_name = self.indicator\n        elif isinstance(self.indicator, bool):\n            self.indicator_name = \"_merge\" if self.indicator else None\n        else:\n            raise ValueError(\n                \"indicator option can only accept boolean or string arguments\"\n            )\n\n        if not is_bool(left_index):\n            raise ValueError(\n                \"left_index parameter must be of type bool, not \"\n                \"{left_index}\".format(left_index=type(left_index))\n            )\n        if not is_bool(right_index):\n            raise ValueError(\n                \"right_index parameter must be of type bool, not \"\n                \"{right_index}\".format(right_index=type(right_index))\n            )\n\n        # warn user when merging between different levels\n        if _left.columns.nlevels != _right.columns.nlevels:\n            msg = (\n                \"merging between different levels can give an unintended \"\n                \"result ({left} levels on the left, {right} on the right)\"\n            ).format(left=_left.columns.nlevels, right=_right.columns.nlevels)\n            warnings.warn(msg, UserWarning)\n\n        self._validate_specification()\n\n        # note this function has side effects\n        (\n            self.left_join_keys,\n            self.right_join_keys,\n            self.join_names,\n        ) = self._get_merge_keys()\n\n        # validate the merge keys dtypes. We may need to coerce\n        # to avoid incompat dtypes\n        self._maybe_coerce_merge_keys()\n\n        # If argument passed to validate,\n        # check if columns specified as unique\n        # are in fact unique.\n        if validate is not None:\n            self._validate(validate)",
        "begin_line": 549,
        "end_line": 632,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004965243296921549,
            "pseudo_dstar_susp": 0.0004950495049504951,
            "pseudo_tarantula_susp": 0.000722543352601156,
            "pseudo_op2_susp": 0.0004950495049504951,
            "pseudo_barinel_susp": 0.000722543352601156
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation.get_result#634",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation.get_result(self)",
        "snippet": "    def get_result(self):\n        if self.indicator:\n            self.left, self.right = self._indicator_pre_merge(self.left, self.right)\n\n        join_index, left_indexer, right_indexer = self._get_join_info()\n\n        ldata, rdata = self.left._data, self.right._data\n        lsuf, rsuf = self.suffixes\n\n        llabels, rlabels = _items_overlap_with_suffix(\n            ldata.items, lsuf, rdata.items, rsuf\n        )\n\n        lindexers = {1: left_indexer} if left_indexer is not None else {}\n        rindexers = {1: right_indexer} if right_indexer is not None else {}\n\n        result_data = concatenate_block_managers(\n            [(ldata, lindexers), (rdata, rindexers)],\n            axes=[llabels.append(rlabels), join_index],\n            concat_axis=0,\n            copy=self.copy,\n        )\n\n        typ = self.left._constructor\n        result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n        if self.indicator:\n            result = self._indicator_post_merge(result)\n\n        self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n        self._maybe_restore_index_levels(result)\n\n        return result",
        "begin_line": 634,
        "end_line": 667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._indicator_pre_merge#669",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._indicator_pre_merge(self, left: 'DataFrame', right: 'DataFrame')",
        "snippet": "    def _indicator_pre_merge(\n        self, left: \"DataFrame\", right: \"DataFrame\"\n    ) -> Tuple[\"DataFrame\", \"DataFrame\"]:\n\n        columns = left.columns.union(right.columns)\n\n        for i in [\"_left_indicator\", \"_right_indicator\"]:\n            if i in columns:\n                raise ValueError(\n                    \"Cannot use `indicator=True` option when \"\n                    \"data contains a column named {name}\".format(name=i)\n                )\n        if self.indicator_name in columns:\n            raise ValueError(\n                \"Cannot use name of an existing column for indicator column\"\n            )\n\n        left = left.copy()\n        right = right.copy()\n\n        left[\"_left_indicator\"] = 1\n        left[\"_left_indicator\"] = left[\"_left_indicator\"].astype(\"int8\")\n\n        right[\"_right_indicator\"] = 2\n        right[\"_right_indicator\"] = right[\"_right_indicator\"].astype(\"int8\")\n\n        return left, right",
        "begin_line": 669,
        "end_line": 695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._indicator_post_merge#697",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._indicator_post_merge(self, result)",
        "snippet": "    def _indicator_post_merge(self, result):\n\n        result[\"_left_indicator\"] = result[\"_left_indicator\"].fillna(0)\n        result[\"_right_indicator\"] = result[\"_right_indicator\"].fillna(0)\n\n        result[self.indicator_name] = Categorical(\n            (result[\"_left_indicator\"] + result[\"_right_indicator\"]),\n            categories=[1, 2, 3],\n        )\n        result[self.indicator_name] = result[self.indicator_name].cat.rename_categories(\n            [\"left_only\", \"right_only\", \"both\"]\n        )\n\n        result = result.drop(labels=[\"_left_indicator\", \"_right_indicator\"], axis=1)\n        return result",
        "begin_line": 697,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._maybe_restore_index_levels#713",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._maybe_restore_index_levels(self, result)",
        "snippet": "    def _maybe_restore_index_levels(self, result):\n        \"\"\"\n        Restore index levels specified as `on` parameters\n\n        Here we check for cases where `self.left_on` and `self.right_on` pairs\n        each reference an index level in their respective DataFrames. The\n        joined columns corresponding to these pairs are then restored to the\n        index of `result`.\n\n        **Note:** This method has side effects. It modifies `result` in-place\n\n        Parameters\n        ----------\n        result: DataFrame\n            merge result\n\n        Returns\n        -------\n        None\n        \"\"\"\n        names_to_restore = []\n        for name, left_key, right_key in zip(\n            self.join_names, self.left_on, self.right_on\n        ):\n            if (\n                self.orig_left._is_level_reference(left_key)\n                and self.orig_right._is_level_reference(right_key)\n                and name not in result.index.names\n            ):\n\n                names_to_restore.append(name)\n\n        if names_to_restore:\n            result.set_index(names_to_restore, inplace=True)",
        "begin_line": 713,
        "end_line": 746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.637625289128758e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._maybe_add_join_keys#748",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._maybe_add_join_keys(self, result, left_indexer, right_indexer)",
        "snippet": "    def _maybe_add_join_keys(self, result, left_indexer, right_indexer):\n\n        left_has_missing = None\n        right_has_missing = None\n\n        keys = zip(self.join_names, self.left_on, self.right_on)\n        for i, (name, lname, rname) in enumerate(keys):\n            if not _should_fill(lname, rname):\n                continue\n\n            take_left, take_right = None, None\n\n            if name in result:\n\n                if left_indexer is not None and right_indexer is not None:\n                    if name in self.left:\n\n                        if left_has_missing is None:\n                            left_has_missing = (left_indexer == -1).any()\n\n                        if left_has_missing:\n                            take_right = self.right_join_keys[i]\n\n                            if not is_dtype_equal(\n                                result[name].dtype, self.left[name].dtype\n                            ):\n                                take_left = self.left[name]._values\n\n                    elif name in self.right:\n\n                        if right_has_missing is None:\n                            right_has_missing = (right_indexer == -1).any()\n\n                        if right_has_missing:\n                            take_left = self.left_join_keys[i]\n\n                            if not is_dtype_equal(\n                                result[name].dtype, self.right[name].dtype\n                            ):\n                                take_right = self.right[name]._values\n\n            elif left_indexer is not None and is_array_like(self.left_join_keys[i]):\n                take_left = self.left_join_keys[i]\n                take_right = self.right_join_keys[i]\n\n            if take_left is not None or take_right is not None:\n\n                if take_left is None:\n                    lvals = result[name]._values\n                else:\n                    lfill = na_value_for_dtype(take_left.dtype)\n                    lvals = algos.take_1d(take_left, left_indexer, fill_value=lfill)\n\n                if take_right is None:\n                    rvals = result[name]._values\n                else:\n                    rfill = na_value_for_dtype(take_right.dtype)\n                    rvals = algos.take_1d(take_right, right_indexer, fill_value=rfill)\n\n                # if we have an all missing left_indexer\n                # make sure to just use the right values\n                mask = left_indexer == -1\n                if mask.all():\n                    key_col = rvals\n                else:\n                    key_col = Index(lvals).where(~mask, rvals)\n\n                if result._is_label_reference(name):\n                    result[name] = key_col\n                elif result._is_level_reference(name):\n                    if isinstance(result.index, MultiIndex):\n                        key_col.name = name\n                        idx_list = [\n                            result.index.get_level_values(level_name)\n                            if level_name != name\n                            else key_col\n                            for level_name in result.index.names\n                        ]\n\n                        result.set_index(idx_list, inplace=True)\n                    else:\n                        result.index = Index(key_col, name=name)\n                else:\n                    result.insert(i, name or \"key_{i}\".format(i=i), key_col)",
        "begin_line": 748,
        "end_line": 831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._get_join_indexers#833",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._get_join_indexers(self)",
        "snippet": "    def _get_join_indexers(self):\n        \"\"\" return the join indexers \"\"\"\n        return _get_join_indexers(\n            self.left_join_keys, self.right_join_keys, sort=self.sort, how=self.how\n        )",
        "begin_line": 833,
        "end_line": 837,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.508721687060662e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._get_join_info#839",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._get_join_info(self)",
        "snippet": "    def _get_join_info(self):\n        left_ax = self.left._data.axes[self.axis]\n        right_ax = self.right._data.axes[self.axis]\n\n        if self.left_index and self.right_index and self.how != \"asof\":\n            join_index, left_indexer, right_indexer = left_ax.join(\n                right_ax, how=self.how, return_indexers=True, sort=self.sort\n            )\n        elif self.right_index and self.how == \"left\":\n            join_index, left_indexer, right_indexer = _left_join_on_index(\n                left_ax, right_ax, self.left_join_keys, sort=self.sort\n            )\n\n        elif self.left_index and self.how == \"right\":\n            join_index, right_indexer, left_indexer = _left_join_on_index(\n                right_ax, left_ax, self.right_join_keys, sort=self.sort\n            )\n        else:\n            (left_indexer, right_indexer) = self._get_join_indexers()\n\n            if self.right_index:\n                if len(self.left) > 0:\n                    join_index = self._create_join_index(\n                        self.left.index,\n                        self.right.index,\n                        left_indexer,\n                        right_indexer,\n                        how=\"right\",\n                    )\n                else:\n                    join_index = self.right.index.take(right_indexer)\n                    left_indexer = np.array([-1] * len(join_index))\n            elif self.left_index:\n                if len(self.right) > 0:\n                    join_index = self._create_join_index(\n                        self.right.index,\n                        self.left.index,\n                        right_indexer,\n                        left_indexer,\n                        how=\"left\",\n                    )\n                else:\n                    join_index = self.left.index.take(left_indexer)\n                    right_indexer = np.array([-1] * len(join_index))\n            else:\n                join_index = Index(np.arange(len(left_indexer)))\n\n        if len(join_index) == 0:\n            join_index = join_index.astype(object)\n        return join_index, left_indexer, right_indexer",
        "begin_line": 839,
        "end_line": 888,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._create_join_index#890",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._create_join_index(self, index: Index, other_index: Index, indexer, other_indexer, how: str='left')",
        "snippet": "    def _create_join_index(\n        self,\n        index: Index,\n        other_index: Index,\n        indexer,\n        other_indexer,\n        how: str = \"left\",\n    ):\n        \"\"\"\n        Create a join index by rearranging one index to match another\n\n        Parameters\n        ----------\n        index: Index being rearranged\n        other_index: Index used to supply values not found in index\n        indexer: how to rearrange index\n        how: replacement is only necessary if indexer based on other_index\n\n        Returns\n        -------\n        join_index\n        \"\"\"\n        if self.how in (how, \"outer\") and not isinstance(other_index, MultiIndex):\n            # if final index requires values in other_index but not target\n            # index, indexer may hold missing (-1) values, causing Index.take\n            # to take the final value in target index. So, we set the last\n            # element to be the desired fill value. We do not use allow_fill\n            # and fill_value because it throws a ValueError on integer indices\n            mask = indexer == -1\n            if np.any(mask):\n                fill_value = na_value_for_dtype(index.dtype, compat=False)\n                index = index.append(Index([fill_value]))\n        return index.take(indexer)",
        "begin_line": 890,
        "end_line": 922,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._get_merge_keys#924",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._get_merge_keys(self)",
        "snippet": "    def _get_merge_keys(self):\n        \"\"\"\n        Note: has side effects (copy/delete key columns)\n\n        Parameters\n        ----------\n        left\n        right\n        on\n\n        Returns\n        -------\n        left_keys, right_keys\n        \"\"\"\n        left_keys = []\n        right_keys = []\n        join_names = []\n        right_drop = []\n        left_drop = []\n\n        left, right = self.left, self.right\n\n        is_lkey = lambda x: is_array_like(x) and len(x) == len(left)\n        is_rkey = lambda x: is_array_like(x) and len(x) == len(right)\n\n        # Note that pd.merge_asof() has separate 'on' and 'by' parameters. A\n        # user could, for example, request 'left_index' and 'left_by'. In a\n        # regular pd.merge(), users cannot specify both 'left_index' and\n        # 'left_on'. (Instead, users have a MultiIndex). That means the\n        # self.left_on in this function is always empty in a pd.merge(), but\n        # a pd.merge_asof(left_index=True, left_by=...) will result in a\n        # self.left_on array with a None in the middle of it. This requires\n        # a work-around as designated in the code below.\n        # See _validate_specification() for where this happens.\n\n        # ugh, spaghetti re #733\n        if _any(self.left_on) and _any(self.right_on):\n            for lk, rk in zip(self.left_on, self.right_on):\n                if is_lkey(lk):\n                    left_keys.append(lk)\n                    if is_rkey(rk):\n                        right_keys.append(rk)\n                        join_names.append(None)  # what to do?\n                    else:\n                        if rk is not None:\n                            right_keys.append(right._get_label_or_level_values(rk))\n                            join_names.append(rk)\n                        else:\n                            # work-around for merge_asof(right_index=True)\n                            right_keys.append(right.index)\n                            join_names.append(right.index.name)\n                else:\n                    if not is_rkey(rk):\n                        if rk is not None:\n                            right_keys.append(right._get_label_or_level_values(rk))\n                        else:\n                            # work-around for merge_asof(right_index=True)\n                            right_keys.append(right.index)\n                        if lk is not None and lk == rk:\n                            # avoid key upcast in corner case (length-0)\n                            if len(left) > 0:\n                                right_drop.append(rk)\n                            else:\n                                left_drop.append(lk)\n                    else:\n                        right_keys.append(rk)\n                    if lk is not None:\n                        left_keys.append(left._get_label_or_level_values(lk))\n                        join_names.append(lk)\n                    else:\n                        # work-around for merge_asof(left_index=True)\n                        left_keys.append(left.index)\n                        join_names.append(left.index.name)\n        elif _any(self.left_on):\n            for k in self.left_on:\n                if is_lkey(k):\n                    left_keys.append(k)\n                    join_names.append(None)\n                else:\n                    left_keys.append(left._get_label_or_level_values(k))\n                    join_names.append(k)\n            if isinstance(self.right.index, MultiIndex):\n                right_keys = [\n                    lev._values.take(lev_codes)\n                    for lev, lev_codes in zip(\n                        self.right.index.levels, self.right.index.codes\n                    )\n                ]\n            else:\n                right_keys = [self.right.index._values]\n        elif _any(self.right_on):\n            for k in self.right_on:\n                if is_rkey(k):\n                    right_keys.append(k)\n                    join_names.append(None)\n                else:\n                    right_keys.append(right._get_label_or_level_values(k))\n                    join_names.append(k)\n            if isinstance(self.left.index, MultiIndex):\n                left_keys = [\n                    lev._values.take(lev_codes)\n                    for lev, lev_codes in zip(\n                        self.left.index.levels, self.left.index.codes\n                    )\n                ]\n            else:\n                left_keys = [self.left.index.values]\n\n        if left_drop:\n            self.left = self.left._drop_labels_or_levels(left_drop)\n\n        if right_drop:\n            self.right = self.right._drop_labels_or_levels(right_drop)\n\n        return left_keys, right_keys, join_names",
        "begin_line": 924,
        "end_line": 1038,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.07692307692307693,
            "pseudo_dstar_susp": 0.005555555555555556,
            "pseudo_tarantula_susp": 0.07692307692307693,
            "pseudo_op2_susp": 0.005555555555555556,
            "pseudo_barinel_susp": 0.07692307692307693
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._maybe_coerce_merge_keys#1040",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._maybe_coerce_merge_keys(self)",
        "snippet": "    def _maybe_coerce_merge_keys(self):\n        # we have valid mergees but we may have to further\n        # coerce these if they are originally incompatible types\n        #\n        # for example if these are categorical, but are not dtype_equal\n        # or if we have object and integer dtypes\n\n        for lk, rk, name in zip(\n            self.left_join_keys, self.right_join_keys, self.join_names\n        ):\n            if (len(lk) and not len(rk)) or (not len(lk) and len(rk)):\n                continue\n\n            lk_is_cat = is_categorical_dtype(lk)\n            rk_is_cat = is_categorical_dtype(rk)\n            lk_is_object = is_object_dtype(lk)\n            rk_is_object = is_object_dtype(rk)\n\n            # if either left or right is a categorical\n            # then the must match exactly in categories & ordered\n            if lk_is_cat and rk_is_cat:\n                if lk.is_dtype_equal(rk):\n                    continue\n\n            elif lk_is_cat or rk_is_cat:\n                pass\n\n            elif is_dtype_equal(lk.dtype, rk.dtype):\n                continue\n\n            msg = (\n                \"You are trying to merge on {lk_dtype} and \"\n                \"{rk_dtype} columns. If you wish to proceed \"\n                \"you should use pd.concat\".format(lk_dtype=lk.dtype, rk_dtype=rk.dtype)\n            )\n\n            # if we are numeric, then allow differing\n            # kinds to proceed, eg. int64 and int8, int and float\n            # further if we are object, but we infer to\n            # the same, then proceed\n            if is_numeric_dtype(lk) and is_numeric_dtype(rk):\n                if lk.dtype.kind == rk.dtype.kind:\n                    continue\n\n                # check whether ints and floats\n                elif is_integer_dtype(rk) and is_float_dtype(lk):\n                    if not (lk == lk.astype(rk.dtype))[~np.isnan(lk)].all():\n                        warnings.warn(\n                            \"You are merging on int and float \"\n                            \"columns where the float values \"\n                            \"are not equal to their int \"\n                            \"representation\",\n                            UserWarning,\n                        )\n                    continue\n\n                elif is_float_dtype(rk) and is_integer_dtype(lk):\n                    if not (rk == rk.astype(lk.dtype))[~np.isnan(rk)].all():\n                        warnings.warn(\n                            \"You are merging on int and float \"\n                            \"columns where the float values \"\n                            \"are not equal to their int \"\n                            \"representation\",\n                            UserWarning,\n                        )\n                    continue\n\n                # let's infer and see if we are ok\n                elif lib.infer_dtype(lk, skipna=False) == lib.infer_dtype(\n                    rk, skipna=False\n                ):\n                    continue\n\n            # Check if we are trying to merge on obviously\n            # incompatible dtypes GH 9780, GH 15800\n\n            # bool values are coerced to object\n            elif (lk_is_object and is_bool_dtype(rk)) or (\n                is_bool_dtype(lk) and rk_is_object\n            ):\n                pass\n\n            # object values are allowed to be merged\n            elif (lk_is_object and is_numeric_dtype(rk)) or (\n                is_numeric_dtype(lk) and rk_is_object\n            ):\n                inferred_left = lib.infer_dtype(lk, skipna=False)\n                inferred_right = lib.infer_dtype(rk, skipna=False)\n                bool_types = [\"integer\", \"mixed-integer\", \"boolean\", \"empty\"]\n                string_types = [\"string\", \"unicode\", \"mixed\", \"bytes\", \"empty\"]\n\n                # inferred bool\n                if inferred_left in bool_types and inferred_right in bool_types:\n                    pass\n\n                # unless we are merging non-string-like with string-like\n                elif (\n                    inferred_left in string_types and inferred_right not in string_types\n                ) or (\n                    inferred_right in string_types and inferred_left not in string_types\n                ):\n                    raise ValueError(msg)\n\n            # datetimelikes must match exactly\n            elif needs_i8_conversion(lk) and not needs_i8_conversion(rk):\n                raise ValueError(msg)\n            elif not needs_i8_conversion(lk) and needs_i8_conversion(rk):\n                raise ValueError(msg)\n            elif is_datetime64tz_dtype(lk) and not is_datetime64tz_dtype(rk):\n                raise ValueError(msg)\n            elif not is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n                raise ValueError(msg)\n\n            elif lk_is_object and rk_is_object:\n                continue\n\n            # Houston, we have a problem!\n            # let's coerce to object if the dtypes aren't\n            # categorical, otherwise coerce to the category\n            # dtype. If we coerced categories to object,\n            # then we would lose type information on some\n            # columns, and end up trying to merge\n            # incompatible dtypes. See GH 16900.\n            if name in self.left.columns:\n                typ = lk.categories.dtype if lk_is_cat else object\n                self.left = self.left.assign(**{name: self.left[name].astype(typ)})\n            if name in self.right.columns:\n                typ = rk.categories.dtype if rk_is_cat else object\n                self.right = self.right.assign(**{name: self.right[name].astype(typ)})",
        "begin_line": 1040,
        "end_line": 1168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._validate_specification#1170",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._validate_specification(self)",
        "snippet": "    def _validate_specification(self):\n        # Hm, any way to make this logic less complicated??\n        if self.on is None and self.left_on is None and self.right_on is None:\n\n            if self.left_index and self.right_index:\n                self.left_on, self.right_on = (), ()\n            elif self.left_index:\n                if self.right_on is None:\n                    raise MergeError(\"Must pass right_on or right_index=True\")\n            elif self.right_index:\n                if self.left_on is None:\n                    raise MergeError(\"Must pass left_on or left_index=True\")\n            else:\n                # use the common columns\n                common_cols = self.left.columns.intersection(self.right.columns)\n                if len(common_cols) == 0:\n                    raise MergeError(\n                        \"No common columns to perform merge on. \"\n                        \"Merge options: left_on={lon}, right_on={ron}, \"\n                        \"left_index={lidx}, right_index={ridx}\".format(\n                            lon=self.left_on,\n                            ron=self.right_on,\n                            lidx=self.left_index,\n                            ridx=self.right_index,\n                        )\n                    )\n                if not common_cols.is_unique:\n                    raise MergeError(\n                        \"Data columns not unique: {common!r}\".format(common=common_cols)\n                    )\n                self.left_on = self.right_on = common_cols\n        elif self.on is not None:\n            if self.left_on is not None or self.right_on is not None:\n                raise MergeError(\n                    'Can only pass argument \"on\" OR \"left_on\" '\n                    'and \"right_on\", not a combination of both.'\n                )\n            self.left_on = self.right_on = self.on\n        elif self.left_on is not None:\n            n = len(self.left_on)\n            if self.right_index:\n                if len(self.left_on) != self.right.index.nlevels:\n                    raise ValueError(\n                        \"len(left_on) must equal the number \"\n                        'of levels in the index of \"right\"'\n                    )\n                self.right_on = [None] * n\n        elif self.right_on is not None:\n            n = len(self.right_on)\n            if self.left_index:\n                if len(self.right_on) != self.left.index.nlevels:\n                    raise ValueError(\n                        \"len(right_on) must equal the number \"\n                        'of levels in the index of \"left\"'\n                    )\n                self.left_on = [None] * n\n        if len(self.right_on) != len(self.left_on):\n            raise ValueError(\"len(right_on) must equal len(left_on)\")",
        "begin_line": 1170,
        "end_line": 1227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.05263157894736842,
            "pseudo_dstar_susp": 0.0012033694344163659,
            "pseudo_tarantula_susp": 0.05263157894736842,
            "pseudo_op2_susp": 0.0012033694344163659,
            "pseudo_barinel_susp": 0.05263157894736842
        }
    },
    {
        "name": "pandas.core.reshape.merge._MergeOperation._validate#1229",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._MergeOperation",
        "signature": "pandas.core.reshape.merge._MergeOperation._validate(self, validate: str)",
        "snippet": "    def _validate(self, validate: str):\n\n        # Check uniqueness of each\n        if self.left_index:\n            left_unique = self.orig_left.index.is_unique\n        else:\n            left_unique = MultiIndex.from_arrays(self.left_join_keys).is_unique\n\n        if self.right_index:\n            right_unique = self.orig_right.index.is_unique\n        else:\n            right_unique = MultiIndex.from_arrays(self.right_join_keys).is_unique\n\n        # Check data integrity\n        if validate in [\"one_to_one\", \"1:1\"]:\n            if not left_unique and not right_unique:\n                raise MergeError(\n                    \"Merge keys are not unique in either left\"\n                    \" or right dataset; not a one-to-one merge\"\n                )\n            elif not left_unique:\n                raise MergeError(\n                    \"Merge keys are not unique in left dataset;\"\n                    \" not a one-to-one merge\"\n                )\n            elif not right_unique:\n                raise MergeError(\n                    \"Merge keys are not unique in right dataset;\"\n                    \" not a one-to-one merge\"\n                )\n\n        elif validate in [\"one_to_many\", \"1:m\"]:\n            if not left_unique:\n                raise MergeError(\n                    \"Merge keys are not unique in left dataset;\"\n                    \" not a one-to-many merge\"\n                )\n\n        elif validate in [\"many_to_one\", \"m:1\"]:\n            if not right_unique:\n                raise MergeError(\n                    \"Merge keys are not unique in right dataset;\"\n                    \" not a many-to-one merge\"\n                )\n\n        elif validate in [\"many_to_many\", \"m:m\"]:\n            pass\n\n        else:\n            raise ValueError(\"Not a valid argument for validate\")",
        "begin_line": 1229,
        "end_line": 1278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_join_indexers#1281",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_join_indexers(left_keys, right_keys, sort: bool=False, how: str='inner', **kwargs)",
        "snippet": "def _get_join_indexers(\n    left_keys, right_keys, sort: bool = False, how: str = \"inner\", **kwargs\n):\n    \"\"\"\n\n    Parameters\n    ----------\n    left_keys: ndarray, Index, Series\n    right_keys: ndarray, Index, Series\n    sort: bool, default False\n    how: string {'inner', 'outer', 'left', 'right'}, default 'inner'\n\n    Returns\n    -------\n    tuple of (left_indexer, right_indexer)\n        indexers into the left_keys, right_keys\n\n    \"\"\"\n    assert len(left_keys) == len(\n        right_keys\n    ), \"left_key and right_keys must be the same length\"\n\n    # get left & right join labels and num. of levels at each location\n    mapped = (\n        _factorize_keys(left_keys[n], right_keys[n], sort=sort)\n        for n in range(len(left_keys))\n    )\n    zipped = zip(*mapped)\n    llab, rlab, shape = [list(x) for x in zipped]\n\n    # get flat i8 keys from label lists\n    lkey, rkey = _get_join_keys(llab, rlab, shape, sort)\n\n    # factorize keys to a dense i8 space\n    # `count` is the num. of unique keys\n    # set(lkey) | set(rkey) == range(count)\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    # preserve left frame order if how == 'left' and sort == False\n    kwargs = copy.copy(kwargs)\n    if how == \"left\":\n        kwargs[\"sort\"] = sort\n    join_func = _join_functions[how]\n\n    return join_func(lkey, rkey, count, **kwargs)",
        "begin_line": 1281,
        "end_line": 1325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.333582228859437e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._restore_dropped_levels_multijoin#1328",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._restore_dropped_levels_multijoin(left: MultiIndex, right: MultiIndex, dropped_level_names, join_index, lindexer, rindexer)",
        "snippet": "def _restore_dropped_levels_multijoin(\n    left: MultiIndex,\n    right: MultiIndex,\n    dropped_level_names,\n    join_index,\n    lindexer,\n    rindexer,\n):\n    \"\"\"\n    *this is an internal non-public method*\n\n    Returns the levels, labels and names of a multi-index to multi-index join.\n    Depending on the type of join, this method restores the appropriate\n    dropped levels of the joined multi-index.\n    The method relies on lidx, rindexer which hold the index positions of\n    left and right, where a join was feasible\n\n    Parameters\n    ----------\n    left : MultiIndex\n        left index\n    right : MultiIndex\n        right index\n    dropped_level_names : str array\n        list of non-common level names\n    join_index : MultiIndex\n        the index of the join between the\n        common levels of left and right\n    lindexer : intp array\n        left indexer\n    rindexer : intp array\n        right indexer\n\n    Returns\n    -------\n    levels : list of Index\n        levels of combined multiindexes\n    labels : intp array\n        labels of combined multiindexes\n    names : str array\n        names of combined multiindexes\n\n    \"\"\"\n\n    def _convert_to_mulitindex(index) -> MultiIndex:\n        if isinstance(index, MultiIndex):\n            return index\n        else:\n            return MultiIndex.from_arrays([index.values], names=[index.name])\n\n    # For multi-multi joins with one overlapping level,\n    # the returned index if of type Index\n    # Assure that join_index is of type MultiIndex\n    # so that dropped levels can be appended\n    join_index = _convert_to_mulitindex(join_index)\n\n    join_levels = join_index.levels\n    join_codes = join_index.codes\n    join_names = join_index.names\n\n    # lindexer and rindexer hold the indexes where the join occurred\n    # for left and right respectively. If left/right is None then\n    # the join occurred on all indices of left/right\n    if lindexer is None:\n        lindexer = range(left.size)\n\n    if rindexer is None:\n        rindexer = range(right.size)\n\n    # Iterate through the levels that must be restored\n    for dropped_level_name in dropped_level_names:\n        if dropped_level_name in left.names:\n            idx = left\n            indexer = lindexer\n        else:\n            idx = right\n            indexer = rindexer\n\n        # The index of the level name to be restored\n        name_idx = idx.names.index(dropped_level_name)\n\n        restore_levels = idx.levels[name_idx]\n        # Inject -1 in the codes list where a join was not possible\n        # IOW indexer[i]=-1\n        codes = idx.codes[name_idx]\n        restore_codes = algos.take_nd(codes, indexer, fill_value=-1)\n\n        join_levels = join_levels + [restore_levels]\n        join_codes = join_codes + [restore_codes]\n        join_names = join_names + [dropped_level_name]\n\n    return join_levels, join_codes, join_names",
        "begin_line": 1328,
        "end_line": 1419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._convert_to_mulitindex#1372",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._convert_to_mulitindex(index)",
        "snippet": "    def _convert_to_mulitindex(index) -> MultiIndex:\n        if isinstance(index, MultiIndex):\n            return index\n        else:\n            return MultiIndex.from_arrays([index.values], names=[index.name])",
        "begin_line": 1372,
        "end_line": 1376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._OrderedMerge.__init__#1425",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._OrderedMerge",
        "signature": "pandas.core.reshape.merge._OrderedMerge.__init__(self, left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, axis=1, suffixes=('_x', '_y'), copy: bool=True, fill_method=None, how: str='outer')",
        "snippet": "    def __init__(\n        self,\n        left,\n        right,\n        on=None,\n        left_on=None,\n        right_on=None,\n        left_index: bool = False,\n        right_index: bool = False,\n        axis=1,\n        suffixes=(\"_x\", \"_y\"),\n        copy: bool = True,\n        fill_method=None,\n        how: str = \"outer\",\n    ):\n\n        self.fill_method = fill_method\n        _MergeOperation.__init__(\n            self,\n            left,\n            right,\n            on=on,\n            left_on=left_on,\n            left_index=left_index,\n            right_index=right_index,\n            right_on=right_on,\n            axis=axis,\n            how=how,\n            suffixes=suffixes,\n            sort=True,  # factorize sorts\n        )",
        "begin_line": 1425,
        "end_line": 1455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014814814814814814,
            "pseudo_dstar_susp": 0.0007246376811594203,
            "pseudo_tarantula_susp": 0.0017421602787456446,
            "pseudo_op2_susp": 0.0007246376811594203,
            "pseudo_barinel_susp": 0.0017421602787456446
        }
    },
    {
        "name": "pandas.core.reshape.merge._OrderedMerge.get_result#1457",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._OrderedMerge",
        "signature": "pandas.core.reshape.merge._OrderedMerge.get_result(self)",
        "snippet": "    def get_result(self):\n        join_index, left_indexer, right_indexer = self._get_join_info()\n\n        # this is a bit kludgy\n        ldata, rdata = self.left._data, self.right._data\n        lsuf, rsuf = self.suffixes\n\n        llabels, rlabels = _items_overlap_with_suffix(\n            ldata.items, lsuf, rdata.items, rsuf\n        )\n\n        if self.fill_method == \"ffill\":\n            left_join_indexer = libjoin.ffill_indexer(left_indexer)\n            right_join_indexer = libjoin.ffill_indexer(right_indexer)\n        else:\n            left_join_indexer = left_indexer\n            right_join_indexer = right_indexer\n\n        lindexers = {1: left_join_indexer} if left_join_indexer is not None else {}\n        rindexers = {1: right_join_indexer} if right_join_indexer is not None else {}\n\n        result_data = concatenate_block_managers(\n            [(ldata, lindexers), (rdata, rindexers)],\n            axes=[llabels.append(rlabels), join_index],\n            concat_axis=0,\n            copy=self.copy,\n        )\n\n        typ = self.left._constructor\n        result = typ(result_data).__finalize__(self, method=self._merge_type)\n\n        self._maybe_add_join_keys(result, left_indexer, right_indexer)\n\n        return result",
        "begin_line": 1457,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._asof_function#1493",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._asof_function(direction: str)",
        "snippet": "def _asof_function(direction: str):\n    name = \"asof_join_{dir}\".format(dir=direction)\n    return getattr(libjoin, name, None)",
        "begin_line": 1493,
        "end_line": 1495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._asof_by_function#1498",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._asof_by_function(direction: str)",
        "snippet": "def _asof_by_function(direction: str):\n    name = \"asof_join_{dir}_on_X_by_Y\".format(dir=direction)\n    return getattr(libjoin, name, None)",
        "begin_line": 1498,
        "end_line": 1500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_cython_type_upcast#1510",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_cython_type_upcast(dtype)",
        "snippet": "def _get_cython_type_upcast(dtype):\n    \"\"\" Upcast a dtype to 'int64_t', 'double', or 'object' \"\"\"\n    if is_integer_dtype(dtype):\n        return \"int64_t\"\n    elif is_float_dtype(dtype):\n        return \"double\"\n    else:\n        return \"object\"",
        "begin_line": 1510,
        "end_line": 1517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._AsOfMerge.__init__#1523",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._AsOfMerge",
        "signature": "pandas.core.reshape.merge._AsOfMerge.__init__(self, left, right, on=None, left_on=None, right_on=None, left_index: bool=False, right_index: bool=False, by=None, left_by=None, right_by=None, axis=1, suffixes=('_x', '_y'), copy: bool=True, fill_method=None, how: str='asof', tolerance=None, allow_exact_matches: bool=True, direction: str='backward')",
        "snippet": "    def __init__(\n        self,\n        left,\n        right,\n        on=None,\n        left_on=None,\n        right_on=None,\n        left_index: bool = False,\n        right_index: bool = False,\n        by=None,\n        left_by=None,\n        right_by=None,\n        axis=1,\n        suffixes=(\"_x\", \"_y\"),\n        copy: bool = True,\n        fill_method=None,\n        how: str = \"asof\",\n        tolerance=None,\n        allow_exact_matches: bool = True,\n        direction: str = \"backward\",\n    ):\n\n        self.by = by\n        self.left_by = left_by\n        self.right_by = right_by\n        self.tolerance = tolerance\n        self.allow_exact_matches = allow_exact_matches\n        self.direction = direction\n\n        _OrderedMerge.__init__(\n            self,\n            left,\n            right,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            left_index=left_index,\n            right_index=right_index,\n            axis=axis,\n            how=how,\n            suffixes=suffixes,\n            fill_method=fill_method,\n        )",
        "begin_line": 1523,
        "end_line": 1565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0043859649122807015,
            "pseudo_dstar_susp": 0.001049317943336831,
            "pseudo_tarantula_susp": 0.006993006993006993,
            "pseudo_op2_susp": 0.001049317943336831,
            "pseudo_barinel_susp": 0.006993006993006993
        }
    },
    {
        "name": "pandas.core.reshape.merge._AsOfMerge._validate_specification#1567",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._AsOfMerge",
        "signature": "pandas.core.reshape.merge._AsOfMerge._validate_specification(self)",
        "snippet": "    def _validate_specification(self):\n        super()._validate_specification()\n\n        # we only allow on to be a single item for on\n        if len(self.left_on) != 1 and not self.left_index:\n            raise MergeError(\"can only asof on a key for left\")\n\n        if len(self.right_on) != 1 and not self.right_index:\n            raise MergeError(\"can only asof on a key for right\")\n\n        if self.left_index and isinstance(self.left.index, MultiIndex):\n            raise MergeError(\"left can only have one index\")\n\n        if self.right_index and isinstance(self.right.index, MultiIndex):\n            raise MergeError(\"right can only have one index\")\n\n        # set 'by' columns\n        if self.by is not None:\n            if self.left_by is not None or self.right_by is not None:\n                raise MergeError(\"Can only pass by OR left_by and right_by\")\n            self.left_by = self.right_by = self.by\n        if self.left_by is None and self.right_by is not None:\n            raise MergeError(\"missing left_by\")\n        if self.left_by is not None and self.right_by is None:\n            raise MergeError(\"missing right_by\")\n\n        # add 'by' to our key-list so we can have it in the\n        # output as a key\n        if self.left_by is not None:\n            if not is_list_like(self.left_by):\n                self.left_by = [self.left_by]\n            if not is_list_like(self.right_by):\n                self.right_by = [self.right_by]\n\n            if len(self.left_by) != len(self.right_by):\n                raise MergeError(\"left_by and right_by must be same length\")\n\n            self.left_on = self.left_by + list(self.left_on)\n            self.right_on = self.right_by + list(self.right_on)\n\n        # check 'direction' is valid\n        if self.direction not in [\"backward\", \"forward\", \"nearest\"]:\n            raise MergeError(\n                \"direction invalid: {direction}\".format(direction=self.direction)\n            )",
        "begin_line": 1567,
        "end_line": 1611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0049504950495049506,
            "pseudo_dstar_susp": 0.0010787486515641855,
            "pseudo_tarantula_susp": 0.008547008547008548,
            "pseudo_op2_susp": 0.0010787486515641855,
            "pseudo_barinel_susp": 0.008547008547008548
        }
    },
    {
        "name": "pandas.core.reshape.merge._AsOfMerge._get_merge_keys#1618",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._AsOfMerge",
        "signature": "pandas.core.reshape.merge._AsOfMerge._get_merge_keys(self)",
        "snippet": "    def _get_merge_keys(self):\n\n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                raise MergeError(msg)\n\n        # validate tolerance; datetime.timedelta or Timedelta if we have a DTI\n        if self.tolerance is not None:\n\n            if self.left_index:\n                lt = self.left.index\n            else:\n                lt = left_join_keys[-1]\n\n            msg = (\n                \"incompatible tolerance {tolerance}, must be compat \"\n                \"with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                )\n            )\n\n            if needs_i8_conversion(lt):\n                if not isinstance(self.tolerance, datetime.timedelta):\n                    raise MergeError(msg)\n                if self.tolerance < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n\n            elif is_integer_dtype(lt):\n                if not is_integer(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n\n            elif is_float_dtype(lt):\n                if not is_number(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n\n            else:\n                raise MergeError(\"key must be integer, timestamp or float\")\n\n        # validate allow_exact_matches\n        if not is_bool(self.allow_exact_matches):\n            msg = \"allow_exact_matches must be boolean, passed {passed}\"\n            raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n        return left_join_keys, right_join_keys, join_names",
        "begin_line": 1618,
        "end_line": 1691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.0012254901960784314,
            "pseudo_tarantula_susp": 0.25,
            "pseudo_op2_susp": 0.0012254901960784314,
            "pseudo_barinel_susp": 0.25
        }
    },
    {
        "name": "pandas.core.reshape.merge._AsOfMerge._get_join_indexers#1693",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._AsOfMerge",
        "signature": "pandas.core.reshape.merge._AsOfMerge._get_join_indexers(self)",
        "snippet": "    def _get_join_indexers(self):\n        \"\"\" return the join indexers \"\"\"\n\n        def flip(xs):\n            \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n            xs = [\n                x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs\n            ]\n            labels = list(string.ascii_lowercase[: len(xs)])\n            dtypes = [x.dtype for x in xs]\n            labeled_dtypes = list(zip(labels, dtypes))\n            return np.array(list(zip(*xs)), labeled_dtypes)\n\n        # values to compare\n        left_values = (\n            self.left.index.values if self.left_index else self.left_join_keys[-1]\n        )\n        right_values = (\n            self.right.index.values if self.right_index else self.right_join_keys[-1]\n        )\n        tolerance = self.tolerance\n\n        # we require sortedness and non-null values in the join keys\n        msg_sorted = \"{side} keys must be sorted\"\n        msg_missings = \"Merge keys contain null values on {side} side\"\n\n        if not Index(left_values).is_monotonic:\n            if isna(left_values).any():\n                raise ValueError(msg_missings.format(side=\"left\"))\n            else:\n                raise ValueError(msg_sorted.format(side=\"left\"))\n\n        if not Index(right_values).is_monotonic:\n            if isna(right_values).any():\n                raise ValueError(msg_missings.format(side=\"right\"))\n            else:\n                raise ValueError(msg_sorted.format(side=\"right\"))\n\n        # initial type conversion as needed\n        if needs_i8_conversion(left_values):\n            left_values = left_values.view(\"i8\")\n            right_values = right_values.view(\"i8\")\n            if tolerance is not None:\n                tolerance = Timedelta(tolerance)\n                tolerance = tolerance.value\n\n        # a \"by\" parameter requires special handling\n        if self.left_by is not None:\n            # remove 'on' parameter from values if one existed\n            if self.left_index and self.right_index:\n                left_by_values = self.left_join_keys\n                right_by_values = self.right_join_keys\n            else:\n                left_by_values = self.left_join_keys[0:-1]\n                right_by_values = self.right_join_keys[0:-1]\n\n            # get tuple representation of values if more than one\n            if len(left_by_values) == 1:\n                left_by_values = left_by_values[0]\n                right_by_values = right_by_values[0]\n            else:\n                left_by_values = flip(left_by_values)\n                right_by_values = flip(right_by_values)\n\n            # upcast 'by' parameter because HashTable is limited\n            by_type = _get_cython_type_upcast(left_by_values.dtype)\n            by_type_caster = _type_casters[by_type]\n            left_by_values = by_type_caster(left_by_values)\n            right_by_values = by_type_caster(right_by_values)\n\n            # choose appropriate function by type\n            func = _asof_by_function(self.direction)\n            return func(\n                left_values,\n                right_values,\n                left_by_values,\n                right_by_values,\n                self.allow_exact_matches,\n                tolerance,\n            )\n        else:\n            # choose appropriate function by type\n            func = _asof_function(self.direction)\n            return func(left_values, right_values, self.allow_exact_matches, tolerance)",
        "begin_line": 1693,
        "end_line": 1776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._AsOfMerge.flip#1696",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge._AsOfMerge",
        "signature": "pandas.core.reshape.merge._AsOfMerge.flip(xs)",
        "snippet": "        def flip(xs):\n            \"\"\" unlike np.transpose, this returns an array of tuples \"\"\"\n            xs = [\n                x if not is_extension_array_dtype(x) else x._ndarray_values for x in xs\n            ]\n            labels = list(string.ascii_lowercase[: len(xs)])\n            dtypes = [x.dtype for x in xs]\n            labeled_dtypes = list(zip(labels, dtypes))\n            return np.array(list(zip(*xs)), labeled_dtypes)",
        "begin_line": 1696,
        "end_line": 1704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_multiindex_indexer#1779",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_multiindex_indexer(join_keys, index: MultiIndex, sort: bool)",
        "snippet": "def _get_multiindex_indexer(join_keys, index: MultiIndex, sort: bool):\n\n    # left & right join labels and num. of levels at each location\n    mapped = (\n        _factorize_keys(index.levels[n], join_keys[n], sort=sort)\n        for n in range(index.nlevels)\n    )\n    zipped = zip(*mapped)\n    rcodes, lcodes, shape = [list(x) for x in zipped]\n    if sort:\n        rcodes = list(map(np.take, rcodes, index.codes))\n    else:\n        i8copy = lambda a: a.astype(\"i8\", subok=False, copy=True)\n        rcodes = list(map(i8copy, index.codes))\n\n    # fix right labels if there were any nulls\n    for i in range(len(join_keys)):\n        mask = index.codes[i] == -1\n        if mask.any():\n            # check if there already was any nulls at this location\n            # if there was, it is factorized to `shape[i] - 1`\n            a = join_keys[i][lcodes[i] == shape[i] - 1]\n            if a.size == 0 or not a[0] != a[0]:\n                shape[i] += 1\n\n            rcodes[i][mask] = shape[i] - 1\n\n    # get flat i8 join keys\n    lkey, rkey = _get_join_keys(lcodes, rcodes, shape, sort)\n\n    # factorize keys to a dense i8 space\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    return libjoin.left_outer_join(lkey, rkey, count, sort=sort)",
        "begin_line": 1779,
        "end_line": 1812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_single_indexer#1815",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_single_indexer(join_key, index, sort: bool=False)",
        "snippet": "def _get_single_indexer(join_key, index, sort: bool = False):\n    left_key, right_key, count = _factorize_keys(join_key, index, sort=sort)\n\n    left_indexer, right_indexer = libjoin.left_outer_join(\n        ensure_int64(left_key), ensure_int64(right_key), count, sort=sort\n    )\n\n    return left_indexer, right_indexer",
        "begin_line": 1815,
        "end_line": 1822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._left_join_on_index#1825",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._left_join_on_index(left_ax: Index, right_ax: Index, join_keys, sort: bool=False)",
        "snippet": "def _left_join_on_index(left_ax: Index, right_ax: Index, join_keys, sort: bool = False):\n    if len(join_keys) > 1:\n        if not (\n            (isinstance(right_ax, MultiIndex) and len(join_keys) == right_ax.nlevels)\n        ):\n            raise AssertionError(\n                \"If more than one join key is given then \"\n                \"'right_ax' must be a MultiIndex and the \"\n                \"number of join keys must be the number of \"\n                \"levels in right_ax\"\n            )\n\n        left_indexer, right_indexer = _get_multiindex_indexer(\n            join_keys, right_ax, sort=sort\n        )\n    else:\n        jkey = join_keys[0]\n\n        left_indexer, right_indexer = _get_single_indexer(jkey, right_ax, sort=sort)\n\n    if sort or len(left_ax) != len(left_indexer):\n        # if asked to sort or there are 1-to-many matches\n        join_index = left_ax.take(left_indexer)\n        return join_index, left_indexer, right_indexer\n\n    # left frame preserves order & length of its index\n    return left_ax, None, right_indexer",
        "begin_line": 1825,
        "end_line": 1851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._right_outer_join#1854",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._right_outer_join(x, y, max_groups)",
        "snippet": "def _right_outer_join(x, y, max_groups):\n    right_indexer, left_indexer = libjoin.left_outer_join(y, x, max_groups)\n    return left_indexer, right_indexer",
        "begin_line": 1854,
        "end_line": 1856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.225092250922509e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._factorize_keys#1867",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._factorize_keys(lk, rk, sort=True)",
        "snippet": "def _factorize_keys(lk, rk, sort=True):\n    # Some pre-processing for non-ndarray lk / rk\n    if is_datetime64tz_dtype(lk) and is_datetime64tz_dtype(rk):\n        lk = getattr(lk, \"_values\", lk)._data\n        rk = getattr(rk, \"_values\", rk)._data\n\n    elif (\n        is_categorical_dtype(lk) and is_categorical_dtype(rk) and lk.is_dtype_equal(rk)\n    ):\n        if lk.categories.equals(rk.categories):\n            # if we exactly match in categories, allow us to factorize on codes\n            rk = rk.codes\n        else:\n            # Same categories in different orders -> recode\n            rk = _recode_for_categories(rk.codes, rk.categories, lk.categories)\n\n        lk = ensure_int64(lk.codes)\n        rk = ensure_int64(rk)\n\n    elif (\n        is_extension_array_dtype(lk.dtype)\n        and is_extension_array_dtype(rk.dtype)\n        and lk.dtype == rk.dtype\n    ):\n        lk, _ = lk._values_for_factorize()\n        rk, _ = rk._values_for_factorize()\n\n    if is_integer_dtype(lk) and is_integer_dtype(rk):\n        # GH#23917 TODO: needs tests for case where lk is integer-dtype\n        #  and rk is datetime-dtype\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    elif issubclass(lk.dtype.type, (np.timedelta64, np.datetime64)) and issubclass(\n        rk.dtype.type, (np.timedelta64, np.datetime64)\n    ):\n        # GH#23917 TODO: Needs tests for non-matching dtypes\n        klass = libhashtable.Int64Factorizer\n        lk = ensure_int64(com.values_from_object(lk))\n        rk = ensure_int64(com.values_from_object(rk))\n    else:\n        klass = libhashtable.Factorizer\n        lk = ensure_object(lk)\n        rk = ensure_object(rk)\n\n    rizer = klass(max(len(lk), len(rk)))\n\n    llab = rizer.factorize(lk)\n    rlab = rizer.factorize(rk)\n\n    count = rizer.get_count()\n\n    if sort:\n        uniques = rizer.uniques.to_array()\n        llab, rlab = _sort_labels(uniques, llab, rlab)\n\n    # NA group\n    lmask = llab == -1\n    lany = lmask.any()\n    rmask = rlab == -1\n    rany = rmask.any()\n\n    if lany or rany:\n        if lany:\n            np.putmask(llab, lmask, count)\n        if rany:\n            np.putmask(rlab, rmask, count)\n        count += 1\n\n    return llab, rlab, count",
        "begin_line": 1867,
        "end_line": 1936,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._sort_labels#1939",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._sort_labels(uniques: np.ndarray, left, right)",
        "snippet": "def _sort_labels(uniques: np.ndarray, left, right):\n    if not isinstance(uniques, np.ndarray):\n        # tuplesafe\n        uniques = Index(uniques).values\n\n    llength = len(left)\n    labels = np.concatenate([left, right])\n\n    _, new_labels = algos.safe_sort(uniques, labels, na_sentinel=-1)\n    new_labels = ensure_int64(new_labels)\n    new_left, new_right = new_labels[:llength], new_labels[llength:]\n\n    return new_left, new_right",
        "begin_line": 1939,
        "end_line": 1951,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._get_join_keys#1954",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._get_join_keys(llab, rlab, shape, sort: bool)",
        "snippet": "def _get_join_keys(llab, rlab, shape, sort: bool):\n\n    # how many levels can be done without overflow\n    pred = lambda i: not is_int64_overflow_possible(shape[:i])\n    nlev = next(filter(pred, range(len(shape), 0, -1)))\n\n    # get keys for the first `nlev` levels\n    stride = np.prod(shape[1:nlev], dtype=\"i8\")\n    lkey = stride * llab[0].astype(\"i8\", subok=False, copy=False)\n    rkey = stride * rlab[0].astype(\"i8\", subok=False, copy=False)\n\n    for i in range(1, nlev):\n        with np.errstate(divide=\"ignore\"):\n            stride //= shape[i]\n        lkey += llab[i] * stride\n        rkey += rlab[i] * stride\n\n    if nlev == len(shape):  # all done!\n        return lkey, rkey\n\n    # densify current keys to avoid overflow\n    lkey, rkey, count = _factorize_keys(lkey, rkey, sort=sort)\n\n    llab = [lkey] + llab[nlev:]\n    rlab = [rkey] + rlab[nlev:]\n    shape = [count] + shape[nlev:]\n\n    return _get_join_keys(llab, rlab, shape, sort)",
        "begin_line": 1954,
        "end_line": 1981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.217610970768675e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._should_fill#1984",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._should_fill(lname, rname)",
        "snippet": "def _should_fill(lname, rname) -> bool:\n    if not isinstance(lname, str) or not isinstance(rname, str):\n        return True\n    return lname == rname",
        "begin_line": 1984,
        "end_line": 1987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.387706855791962e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge._any#1990",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._any(x)",
        "snippet": "def _any(x) -> bool:\n    return x is not None and com.any_not_none(*x)",
        "begin_line": 1990,
        "end_line": 1991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004965243296921549,
            "pseudo_dstar_susp": 0.0004950495049504951,
            "pseudo_tarantula_susp": 0.000722543352601156,
            "pseudo_op2_susp": 0.0004950495049504951,
            "pseudo_barinel_susp": 0.000722543352601156
        }
    },
    {
        "name": "pandas.core.reshape.merge._validate_operand#1994",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._validate_operand(obj: FrameOrSeries)",
        "snippet": "def _validate_operand(obj: FrameOrSeries) -> \"DataFrame\":\n    if isinstance(obj, ABCDataFrame):\n        return obj\n    elif isinstance(obj, ABCSeries):\n        if obj.name is None:\n            raise ValueError(\"Cannot merge a Series without a name\")\n        else:\n            return obj.to_frame()\n    else:\n        raise TypeError(\n            \"Can only merge Series or DataFrame objects, \"\n            \"a {obj} was passed\".format(obj=type(obj))\n        )",
        "begin_line": 1994,
        "end_line": 2006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00048146364949446316,
            "pseudo_dstar_susp": 0.00048007681228996637,
            "pseudo_tarantula_susp": 0.000689655172413793,
            "pseudo_op2_susp": 0.00048007681228996637,
            "pseudo_barinel_susp": 0.000689655172413793
        }
    },
    {
        "name": "pandas.core.reshape.merge._items_overlap_with_suffix#2009",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge._items_overlap_with_suffix(left: Index, lsuffix, right: Index, rsuffix)",
        "snippet": "def _items_overlap_with_suffix(left: Index, lsuffix, right: Index, rsuffix):\n    \"\"\"\n    If two indices overlap, add suffixes to overlapping entries.\n\n    If corresponding suffix is empty, the entry is simply converted to string.\n\n    \"\"\"\n    to_rename = left.intersection(right)\n    if len(to_rename) == 0:\n        return left, right\n\n    if not lsuffix and not rsuffix:\n        raise ValueError(\n            \"columns overlap but no suffix specified: \"\n            \"{rename}\".format(rename=to_rename)\n        )\n\n    def renamer(x, suffix):\n        \"\"\"\n        Rename the left and right indices.\n\n        If there is overlap, and suffix is not None, add\n        suffix, otherwise, leave it as-is.\n\n        Parameters\n        ----------\n        x : original column name\n        suffix : str or None\n\n        Returns\n        -------\n        x : renamed column name\n        \"\"\"\n        if x in to_rename and suffix is not None:\n            return \"{x}{suffix}\".format(x=x, suffix=suffix)\n        return x\n\n    lrenamer = partial(renamer, suffix=lsuffix)\n    rrenamer = partial(renamer, suffix=rsuffix)\n\n    return (_transform_index(left, lrenamer), _transform_index(right, rrenamer))",
        "begin_line": 2009,
        "end_line": 2049,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.merge.renamer#2026",
        "src_path": "pandas/core/reshape/merge.py",
        "class_name": "pandas.core.reshape.merge",
        "signature": "pandas.core.reshape.merge.renamer(x, suffix)",
        "snippet": "    def renamer(x, suffix):\n        \"\"\"\n        Rename the left and right indices.\n\n        If there is overlap, and suffix is not None, add\n        suffix, otherwise, leave it as-is.\n\n        Parameters\n        ----------\n        x : original column name\n        suffix : str or None\n\n        Returns\n        -------\n        x : renamed column name\n        \"\"\"\n        if x in to_rename and suffix is not None:\n            return \"{x}{suffix}\".format(x=x, suffix=suffix)\n        return x",
        "begin_line": 2026,
        "end_line": 2044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.15922107674685e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#262",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, start=None, end=None, periods=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            dtarr = DatetimeArray._generate_range(\n                start,\n                end,\n                periods,\n                freq=freq,\n                tz=tz,\n                normalize=normalize,\n                closed=closed,\n                ambiguous=ambiguous,\n            )\n            warnings.warn(\n                \"Creating a DatetimeIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.date_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            return cls._simple_new(dtarr._data, freq=dtarr.freq, tz=dtarr.tz, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=True,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name, freq=dtarr.freq, tz=dtarr.tz)\n        return subarr",
        "begin_line": 262,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007874015748031496,
            "pseudo_dstar_susp": 0.030303030303030304,
            "pseudo_tarantula_susp": 0.0012738853503184713,
            "pseudo_op2_susp": 0.030303030303030304,
            "pseudo_barinel_susp": 0.0012738853503184713
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#340",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values, name=None, freq=None, tz=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, tz=None, dtype=None):\n        \"\"\"\n        we require the we have a dtype compat for the values\n        if we are passed a non-dtype compat, then coerce using the constructor\n        \"\"\"\n        if isinstance(values, DatetimeArray):\n            if tz:\n                tz = validate_tz_from_dtype(dtype, tz)\n                dtype = DatetimeTZDtype(tz=tz)\n            elif dtype is None:\n                dtype = _NS_DTYPE\n\n            values = DatetimeArray(values, freq=freq, dtype=dtype)\n            tz = values.tz\n            freq = values.freq\n            values = values._data\n\n        # DatetimeArray._simple_new will accept either i8 or M8[ns] dtypes\n        if isinstance(values, DatetimeIndex):\n            values = values._data\n\n        dtype = tz_to_dtype(tz)\n        dtarr = DatetimeArray._simple_new(values, freq=freq, dtype=dtype)\n        assert isinstance(dtarr, DatetimeArray)\n\n        result = object.__new__(cls)\n        result._data = dtarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = dtarr._data\n        result._reset_identity()\n        return result",
        "begin_line": 340,
        "end_line": 371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00510204081632653,
            "pseudo_dstar_susp": 0.009523809523809525,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.009523809523809525,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__array__#375",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if (\n            dtype is None\n            and isinstance(self._data, DatetimeArray)\n            and getattr(self.dtype, \"tz\", None)\n        ):\n            msg = (\n                \"Converting timezone-aware DatetimeArray to timezone-naive \"\n                \"ndarray with 'datetime64[ns]' dtype. In the future, this \"\n                \"will return an ndarray with 'object' dtype where each \"\n                \"element is a 'pandas.Timestamp' with the correct 'tz'.\\n\\t\"\n                \"To accept the future behavior, pass 'dtype=object'.\\n\\t\"\n                \"To keep the old behavior, pass 'dtype=\\\"datetime64[ns]\\\"'.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n            dtype = \"M8[ns]\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 375,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.dtype#394",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._data.dtype",
        "begin_line": 394,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.935293709688605e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.tz#398",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.tz(self)",
        "snippet": "    def tz(self):\n        # GH 18595\n        return self._data.tz",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.873797085510036e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.difference#468",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.difference(self, other, sort=None)",
        "snippet": "    def difference(self, other, sort=None):\n        new_idx = super().difference(other, sort=sort)\n        new_idx._data._freq = None\n        return new_idx",
        "begin_line": 468,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._union#499",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        if len(other) == 0 or self.equals(other) or len(self) == 0:\n            return super().union(other, sort=sort)\n\n        if not isinstance(other, DatetimeIndex):\n            try:\n                other = DatetimeIndex(other)\n            except TypeError:\n                pass\n\n        this, other = self._maybe_utc_convert(other)\n\n        if this._can_fast_union(other):\n            return this._fast_union(other, sort=sort)\n        else:\n            result = Index._union(this, other, sort=sort)\n            if isinstance(result, DatetimeIndex):\n                # TODO: we shouldn't be setting attributes like this;\n                #  in all the tests this equality already holds\n                result._data._dtype = this.dtype\n                if result.freq is None and (\n                    this.freq is not None or other.freq is not None\n                ):\n                    result._data._freq = to_offset(result.inferred_freq)\n            return result",
        "begin_line": 499,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.union_many#528",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.union_many(self, others)",
        "snippet": "    def union_many(self, others):\n        \"\"\"\n        A bit of a hack to accelerate unioning a collection of indexes\n        \"\"\"\n        this = self\n\n        for other in others:\n            if not isinstance(this, DatetimeIndex):\n                this = Index.union(this, other)\n                continue\n\n            if not isinstance(other, DatetimeIndex):\n                try:\n                    other = DatetimeIndex(other)\n                except TypeError:\n                    pass\n\n            this, other = this._maybe_utc_convert(other)\n\n            if this._can_fast_union(other):\n                this = this._fast_union(other)\n            else:\n                dtype = this.dtype\n                this = Index.union(this, other)\n                if isinstance(this, DatetimeIndex):\n                    # TODO: we shouldn't be setting attributes like this;\n                    #  in all the tests this equality already holds\n                    this._data._dtype = dtype\n        return this",
        "begin_line": 528,
        "end_line": 556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._can_fast_union#558",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._can_fast_union(self, other)",
        "snippet": "    def _can_fast_union(self, other):\n        if not isinstance(other, DatetimeIndex):\n            return False\n\n        freq = self.freq\n\n        if freq is None or freq != other.freq:\n            return False\n\n        if not self.is_monotonic or not other.is_monotonic:\n            return False\n\n        if len(self) == 0 or len(other) == 0:\n            return True\n\n        # to make our life easier, \"sort\" the two ranges\n        if self[0] <= other[0]:\n            left, right = self, other\n        else:\n            left, right = other, self\n\n        right_start = right[0]\n        left_end = left[-1]\n\n        # Only need to \"adjoin\", not overlap\n        try:\n            return (right_start == left_end + freq) or right_start in left\n        except (ValueError):\n\n            # if we are comparing a freq that does not propagate timezones\n            # this will raise\n            return False",
        "begin_line": 558,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._fast_union#591",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._fast_union(self, other, sort=None)",
        "snippet": "    def _fast_union(self, other, sort=None):\n        if len(other) == 0:\n            return self.view(type(self))\n\n        if len(self) == 0:\n            return other.view(type(self))\n\n        # Both DTIs are monotonic. Check if they are already\n        # in the \"correct\" order\n        if self[0] <= other[0]:\n            left, right = self, other\n        # DTIs are not in the \"correct\" order and we don't want\n        # to sort but want to remove overlaps\n        elif sort is False:\n            left, right = self, other\n            left_start = left[0]\n            loc = right.searchsorted(left_start, side=\"left\")\n            right_chunk = right.values[:loc]\n            dates = concat_compat((left.values, right_chunk))\n            return self._shallow_copy(dates)\n        # DTIs are not in the \"correct\" order and we want\n        # to sort\n        else:\n            left, right = other, self\n\n        left_end = left[-1]\n        right_end = right[-1]\n\n        # TODO: consider re-implementing freq._should_cache for fastpath\n\n        # concatenate dates\n        if left_end < right_end:\n            loc = right.searchsorted(left_end, side=\"right\")\n            right_chunk = right.values[loc:]\n            dates = concat_compat((left.values, right_chunk))\n            return self._shallow_copy(dates)\n        else:\n            return left",
        "begin_line": 591,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_setop_result#654",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_setop_result(self, other, result)",
        "snippet": "    def _wrap_setop_result(self, other, result):\n        name = get_op_result_name(self, other)\n        return self._shallow_copy(result, name=name, freq=None, tz=self.tz)",
        "begin_line": 654,
        "end_line": 656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.join#768",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        \"\"\"\n        See Index.join\n        \"\"\"\n        if (\n            not isinstance(other, DatetimeIndex)\n            and len(other) > 0\n            and other.inferred_type\n            not in (\n                \"floating\",\n                \"integer\",\n                \"integer-na\",\n                \"mixed-integer\",\n                \"mixed-integer-float\",\n                \"mixed\",\n            )\n        ):\n            try:\n                other = DatetimeIndex(other)\n            except (TypeError, ValueError):\n                pass\n\n        this, other = self._maybe_utc_convert(other)\n        return Index.join(\n            this,\n            other,\n            how=how,\n            level=level,\n            return_indexers=return_indexers,\n            sort=sort,\n        )",
        "begin_line": 768,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_utc_convert#800",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_utc_convert(self, other)",
        "snippet": "    def _maybe_utc_convert(self, other):\n        this = self\n        if isinstance(other, DatetimeIndex):\n            if self.tz is not None:\n                if other.tz is None:\n                    raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n            elif other.tz is not None:\n                raise TypeError(\"Cannot join tz-naive with tz-aware DatetimeIndex\")\n\n            if not timezones.tz_compare(self.tz, other.tz):\n                this = self.tz_convert(\"UTC\")\n                other = other.tz_convert(\"UTC\")\n        return this, other",
        "begin_line": 800,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_joined_index#814",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        if (\n            isinstance(other, DatetimeIndex)\n            and self.freq == other.freq\n            and self._can_fast_union(other)\n        ):\n            joined = self._shallow_copy(joined)\n            joined.name = name\n            return joined\n        else:\n            tz = getattr(other, \"tz\", None)\n            return self._simple_new(joined, name, tz=tz)",
        "begin_line": 814,
        "end_line": 826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote#962",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        if other.inferred_type == \"date\":\n            other = DatetimeIndex(other)\n        return self, other",
        "begin_line": 962,
        "end_line": 965,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_value#967",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray. Only use this if you\n        know what you're doing\n        \"\"\"\n\n        if isinstance(key, datetime):\n\n            # needed to localize naive datetimes\n            if self.tz is not None:\n                if key.tzinfo is not None:\n                    key = Timestamp(key).tz_convert(self.tz)\n                else:\n                    key = Timestamp(key).tz_localize(self.tz)\n\n            return self.get_value_maybe_box(series, key)\n\n        if isinstance(key, time):\n            locs = self.indexer_at_time(key)\n            return series.take(locs)\n\n        try:\n            return com.maybe_box(self, Index.get_value(self, series, key), series, key)\n        except KeyError:\n            try:\n                loc = self._get_string_slice(key)\n                return series[loc]\n            except (TypeError, ValueError, KeyError):\n                pass\n\n            try:\n                return self.get_value_maybe_box(series, key)\n            except (TypeError, ValueError, KeyError):\n                raise KeyError(key)",
        "begin_line": 967,
        "end_line": 1000,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc#1015",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n\n        if tolerance is not None:\n            # try converting tolerance now, so errors don't get swallowed by\n            # the try/except clauses below\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        if isinstance(key, datetime):\n            # needed to localize naive datetimes\n            if key.tzinfo is None:\n                key = Timestamp(key, tz=self.tz)\n            else:\n                key = Timestamp(key).tz_convert(self.tz)\n            return Index.get_loc(self, key, method, tolerance)\n\n        elif isinstance(key, timedelta):\n            # GH#20464\n            raise TypeError(\n                \"Cannot index {cls} with {other}\".format(\n                    cls=type(self).__name__, other=type(key).__name__\n                )\n            )\n\n        if isinstance(key, time):\n            if method is not None:\n                raise NotImplementedError(\n                    \"cannot yet lookup inexact labels when key is a time object\"\n                )\n            return self.indexer_at_time(key)\n\n        try:\n            return Index.get_loc(self, key, method, tolerance)\n        except (KeyError, ValueError, TypeError):\n            try:\n                return self._get_string_slice(key)\n            except (TypeError, KeyError, ValueError, OverflowError):\n                pass\n\n            try:\n                stamp = Timestamp(key)\n                if stamp.tzinfo is not None and self.tz is not None:\n                    stamp = stamp.tz_convert(self.tz)\n                else:\n                    stamp = stamp.tz_localize(self.tz)\n                return Index.get_loc(self, stamp, method, tolerance)\n            except KeyError:\n                raise KeyError(key)\n            except ValueError as e:\n                # list-like tolerance size must match target index size\n                if \"list-like\" in str(e):\n                    raise e\n                raise KeyError(key)",
        "begin_line": 1015,
        "end_line": 1073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice#1114",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
        "snippet": "    def _get_string_slice(self, key: str, use_lhs: bool = True, use_rhs: bool = True):\n        freq = getattr(self, \"freqstr\", getattr(self, \"inferred_freq\", None))\n        _, parsed, reso = parsing.parse_time_string(key, freq)\n        loc = self._partial_date_slice(reso, parsed, use_lhs=use_lhs, use_rhs=use_rhs)\n        return loc",
        "begin_line": 1114,
        "end_line": 1118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__#1213",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            assert isinstance(result, np.ndarray), result\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 1213,
        "end_line": 1222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008849557522123894,
            "pseudo_dstar_susp": 0.0010940919037199124,
            "pseudo_tarantula_susp": 0.009615384615384616,
            "pseudo_op2_susp": 0.0010940919037199124,
            "pseudo_barinel_susp": 0.009615384615384616
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._box_func#1225",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, tz=self.tz)",
        "begin_line": 1225,
        "end_line": 1226,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.searchsorted#1232",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.searchsorted(self, value, side='left', sorter=None)",
        "snippet": "    def searchsorted(self, value, side=\"left\", sorter=None):\n        if isinstance(value, (np.ndarray, Index)):\n            value = np.array(value, dtype=_NS_DTYPE, copy=False)\n        else:\n            value = _to_M8(value, tz=self.tz)\n\n        return self.values.searchsorted(value, side=side)",
        "begin_line": 1232,
        "end_line": 1238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#1244",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 1244,
        "end_line": 1247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.514277126540426e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates#1250",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 1250,
        "end_line": 1251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.insert#1253",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n            if not either a Python datetime or a numpy integer-like, returned\n            Index dtype will be object rather than datetime.\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        if is_scalar(item) and isna(item):\n            # GH 18295\n            item = self._na_value\n\n        freq = None\n\n        if isinstance(item, (datetime, np.datetime64)):\n            self._assert_can_do_op(item)\n            if not self._has_same_tz(item) and not isna(item):\n                raise ValueError(\"Passed item and index have different timezone\")\n            # check freq can be preserved on edge cases\n            if self.size and self.freq is not None:\n                if item is NaT:\n                    pass\n                elif (loc == 0 or loc == -len(self)) and item + self.freq == self[0]:\n                    freq = self.freq\n                elif (loc == len(self)) and item - self.freq == self[-1]:\n                    freq = self.freq\n            item = _to_M8(item, tz=self.tz)\n\n        try:\n            new_dates = np.concatenate(\n                (self[:loc].asi8, [item.view(np.int64)], self[loc:].asi8)\n            )\n            return self._shallow_copy(new_dates, freq=freq)\n        except (AttributeError, TypeError):\n\n            # fall back to object index\n            if isinstance(item, str):\n                return self.astype(object).insert(loc, item)\n            raise TypeError(\"cannot insert DatetimeIndex with incompatible label\")",
        "begin_line": 1253,
        "end_line": 1298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#1422",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n):\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, tz=dtarr.tz, freq=dtarr.freq, name=name)",
        "begin_line": 1422,
        "end_line": 1583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011961722488038277,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.001455604075691412,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.001455604075691412
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.bdate_range#1586",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, closed=None, **kwargs)",
        "snippet": "def bdate_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=\"B\",\n    tz=None,\n    normalize=True,\n    name=None,\n    weekmask=None,\n    holidays=None,\n    closed=None,\n    **kwargs,\n):\n    \"\"\"\n    Return a fixed frequency DatetimeIndex, with business day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or datetime-like, default None\n        Left bound for generating dates.\n    end : str or datetime-like, default None\n        Right bound for generating dates.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'B' (business daily)\n        Frequency strings can have multiples, e.g. '5H'.\n    tz : str or None\n        Time zone name for returning localized DatetimeIndex, for example\n        Asia/Beijing.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    weekmask : str or None, default None\n        Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n        only used when custom frequency strings are passed.  The default\n        value None is equivalent to 'Mon Tue Wed Thu Fri'.\n\n        .. versionadded:: 0.21.0\n\n    holidays : list-like or None, default None\n        Dates to exclude from the set of valid business days, passed to\n        ``numpy.busdaycalendar``, only used when custom frequency strings\n        are passed.\n\n        .. versionadded:: 0.21.0\n\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    DatetimeIndex\n\n    Notes\n    -----\n    Of the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified.  Specifying ``freq`` is a requirement\n    for ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\n    desired.\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Note how the two weekend days are skipped in the result.\n\n    >>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-08'],\n              dtype='datetime64[ns]', freq='B')\n    \"\"\"\n    if freq is None:\n        msg = \"freq must be specified for bdate_range; use date_range instead\"\n        raise TypeError(msg)\n\n    if isinstance(freq, str) and freq.startswith(\"C\"):\n        try:\n            weekmask = weekmask or \"Mon Tue Wed Thu Fri\"\n            freq = prefix_mapping[freq](holidays=holidays, weekmask=weekmask)\n        except (KeyError, TypeError):\n            msg = \"invalid custom frequency string: {freq}\".format(freq=freq)\n            raise ValueError(msg)\n    elif holidays or weekmask:\n        msg = (\n            \"a custom frequency string is required when holidays or \"\n            \"weekmask are passed, got frequency {freq}\"\n        ).format(freq=freq)\n        raise ValueError(msg)\n\n    return date_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        name=name,\n        closed=closed,\n        **kwargs,\n    )",
        "begin_line": 1586,
        "end_line": 1691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.127438231469441e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#65",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 65,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045558086560364467,
            "pseudo_dstar_susp": 0.0004553734061930783,
            "pseudo_tarantula_susp": 0.0006119951040391676,
            "pseudo_op2_susp": 0.0004553734061930783,
            "pseudo_barinel_susp": 0.0006119951040391676
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#88",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 88,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045641259698767686,
            "pseudo_dstar_susp": 0.0004562043795620438,
            "pseudo_tarantula_susp": 0.0006138735420503376,
            "pseudo_op2_susp": 0.0004562043795620438,
            "pseudo_barinel_susp": 0.0006138735420503376
        }
    },
    {
        "name": "pandas.core.ops.__init__.maybe_upcast_for_op#123",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is datetime.timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and is_timedelta64_dtype(obj.dtype):\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 123,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.dispatch_to_series#319",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.dispatch_to_series(left, right, func, str_rep=None, axis=None)",
        "snippet": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n\n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via _combine_frame_series,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        if right.dtype == \"timedelta64[ns]\":\n            # ensure we treat NaT values as the correct dtype\n            # Note: we do not do this unconditionally as it may be lossy or\n            #  expensive for EA dtypes.\n            right = np.asarray(right)\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\n\n        else:\n\n            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data",
        "begin_line": 319,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.column_op#343",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.column_op(a, b)",
        "snippet": "        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.column_op#368",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.column_op(a, b)",
        "snippet": "            def column_op(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}",
        "begin_line": 368,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#389",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 389,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._construct_result#410",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._construct_result(left: ABCSeries, result: Union[np.ndarray, ABCExtensionArray], index: ABCIndexClass, name)",
        "snippet": "def _construct_result(\n    left: ABCSeries,\n    result: Union[np.ndarray, ABCExtensionArray],\n    index: ABCIndexClass,\n    name,\n):\n    \"\"\"\n    Construct an appropriately-labelled Series from the result of an op.\n\n    Parameters\n    ----------\n    left : Series\n    result : ndarray or ExtensionArray\n    index : Index\n    name : object\n\n    Returns\n    -------\n    Series\n        In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n    \"\"\"\n    if isinstance(result, tuple):\n        # produced by divmod or rdivmod\n        return (\n            _construct_result(left, result[0], index=index, name=name),\n            _construct_result(left, result[1], index=index, name=name),\n        )\n\n    # We do not pass dtype to ensure that the Series constructor\n    #  does inference in the case where `result` has object-dtype.\n    out = left._constructor(result, index=index)\n    out = out.__finalize__(left)\n\n    # Set the result's name after __finalize__ is called because __finalize__\n    #  would set it back to self.name\n    out.name = name\n    return out",
        "begin_line": 410,
        "end_line": 446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.392227051904884e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_SERIES#449",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_SERIES(cls, op, special)",
        "snippet": "def _arith_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        result = arithmetic_op(lvalues, right, op, str_rep)\n\n        return _construct_result(left, result, index=left.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 449,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#458",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        result = arithmetic_op(lvalues, right, op, str_rep)\n\n        return _construct_result(left, result, index=left.index, name=res_name)",
        "begin_line": 458,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_SERIES#472",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_SERIES(cls, op, special)",
        "snippet": "def _comp_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 472,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.411078343377356e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#480",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)",
        "begin_line": 480,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._bool_method_SERIES#498",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._bool_method_SERIES(cls, op, special)",
        "snippet": "def _bool_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n        self, other = _align_method_SERIES(self, other, align_asobject=True)\n        res_name = get_op_result_name(self, other)\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = logical_op(lvalues, rvalues, op)\n        return _construct_result(self, res_values, index=self.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 498,
        "end_line": 517,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#506",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        self, other = _align_method_SERIES(self, other, align_asobject=True)\n        res_name = get_op_result_name(self, other)\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = logical_op(lvalues, rvalues, op)\n        return _construct_result(self, res_values, index=self.index, name=res_name)",
        "begin_line": 506,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._combine_series_frame#551",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._combine_series_frame(self, other, func, fill_value=None, axis=None, level=None)",
        "snippet": "def _combine_series_frame(self, other, func, fill_value=None, axis=None, level=None):\n    \"\"\"\n    Apply binary operator `func` to self, other using alignment and fill\n    conventions determined by the fill_value, axis, and level kwargs.\n\n    Parameters\n    ----------\n    self : DataFrame\n    other : Series\n    func : binary operator\n    fill_value : object, default None\n    axis : {0, 1, 'columns', 'index', None}, default None\n    level : int or None, default None\n\n    Returns\n    -------\n    result : DataFrame\n    \"\"\"\n    if fill_value is not None:\n        raise NotImplementedError(\n            \"fill_value {fill} not supported.\".format(fill=fill_value)\n        )\n\n    if axis is None:\n        # default axis is columns\n        axis = 1\n\n    axis = self._get_axis_number(axis)\n    left, right = self.align(other, join=\"outer\", axis=axis, level=level, copy=False)\n    if axis == 0:\n        new_data = left._combine_match_index(right, func)\n    else:\n        new_data = dispatch_to_series(left, right, func, axis=\"columns\")\n\n    return left._construct_result(new_data)",
        "begin_line": 551,
        "end_line": 585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_FRAME#588",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_FRAME(left, right, axis)",
        "snippet": "def _align_method_FRAME(left, right, axis):\n    \"\"\" convert rhs to meet lhs dims if input is list, tuple or np.ndarray \"\"\"\n\n    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right\n\n    if isinstance(right, np.ndarray):\n\n        if right.ndim == 1:\n            right = to_series(right)\n\n        elif right.ndim == 2:\n            if right.shape == left.shape:\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[0] == left.shape[0] and right.shape[1] == 1:\n                # Broadcast across columns\n                right = np.broadcast_to(right, left.shape)\n                right = left._constructor(right, index=left.index, columns=left.columns)\n\n            elif right.shape[1] == left.shape[1] and right.shape[0] == 1:\n                # Broadcast along rows\n                right = to_series(right[0, :])\n\n            else:\n                raise ValueError(\n                    \"Unable to coerce to DataFrame, shape \"\n                    \"must be {req_shape}: given {given_shape}\".format(\n                        req_shape=left.shape, given_shape=right.shape\n                    )\n                )\n\n        elif right.ndim > 2:\n            raise ValueError(\n                \"Unable to coerce to Series/DataFrame, dim \"\n                \"must be <= 2: {dim}\".format(dim=right.shape)\n            )\n\n    elif is_list_like(right) and not isinstance(right, (ABCSeries, ABCDataFrame)):\n        # GH17901\n        right = to_series(right)\n\n    return right",
        "begin_line": 588,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.to_series#591",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.to_series(right)",
        "snippet": "    def to_series(right):\n        msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n        if axis is not None and left._get_axis_name(axis) == \"index\":\n            if len(left.index) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.index), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.index)\n        else:\n            if len(left.columns) != len(right):\n                raise ValueError(\n                    msg.format(req_len=len(left.columns), given_len=len(right))\n                )\n            right = left._constructor_sliced(right, index=left.columns)\n        return right",
        "begin_line": 591,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__._arith_method_FRAME#646",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._arith_method_FRAME(cls, op, special)",
        "snippet": "def _arith_method_FRAME(cls, op, special):\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n    default_axis = _get_frame_op_default_axis(op_name)\n\n    na_op = define_na_arithmetic_op(op, str_rep)\n    is_logical = str_rep in [\"&\", \"|\", \"^\"]\n\n    if op_name in _op_descriptions:\n        # i.e. include \"add\" but not \"__add__\"\n        doc = _make_flex_doc(op_name, \"dataframe\")\n    else:\n        doc = _arith_doc_FRAME % op_name\n\n    @Appender(doc)\n    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        other = _align_method_FRAME(self, other, axis)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n            return self._combine_frame(other, pass_op, fill_value, level)\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n            return _combine_series_frame(\n                self, other, pass_op, fill_value=fill_value, axis=axis, level=level\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op)\n            return self._construct_result(new_data)\n\n    f.__name__ = op_name\n\n    return f",
        "begin_line": 646,
        "end_line": 688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.__init__.f#661",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.f(self, other, axis=default_axis, level=None, fill_value=None)",
        "snippet": "    def f(self, other, axis=default_axis, level=None, fill_value=None):\n\n        other = _align_method_FRAME(self, other, axis)\n\n        if isinstance(other, ABCDataFrame):\n            # Another DataFrame\n            pass_op = op if should_series_dispatch(self, other, op) else na_op\n            pass_op = pass_op if not is_logical else op\n            return self._combine_frame(other, pass_op, fill_value, level)\n        elif isinstance(other, ABCSeries):\n            # For these values of `axis`, we end up dispatching to Series op,\n            # so do not want the masked op.\n            pass_op = op if axis in [0, \"columns\", None] else na_op\n            pass_op = pass_op if not is_logical else op\n            return _combine_series_frame(\n                self, other, pass_op, fill_value=fill_value, axis=axis, level=level\n            )\n        else:\n            # in this case we always have `np.ndim(other) == 0`\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            new_data = dispatch_to_series(self, other, op)\n            return self._construct_result(new_data)",
        "begin_line": 661,
        "end_line": 684,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#52",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype=None)",
        "snippet": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 52,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007158196134574087,
            "pseudo_dstar_susp": 0.002881844380403458,
            "pseudo_tarantula_susp": 0.0005611672278338945,
            "pseudo_op2_susp": 0.002881844380403458,
            "pseudo_barinel_susp": 0.0005611672278338945
        }
    },
    {
        "name": "pandas.core.internals.construction.init_ndarray#119",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype=None, copy=False)",
        "snippet": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values):\n        # GH#19157\n        if columns is None:\n            columns = [0]\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                # e.g. ValueError when trying to cast object dtype to float64\n                raise ValueError(\n                    \"failed to cast to '{dtype}' (Exception \"\n                    \"was: {orig})\".format(dtype=dtype, orig=orig)\n                ) from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
        "begin_line": 119,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008216926869350862,
            "pseudo_dstar_susp": 0.0005558643690939411,
            "pseudo_tarantula_susp": 0.0008703220191470844,
            "pseudo_op2_susp": 0.0005558643690939411,
            "pseudo_barinel_susp": 0.0008703220191470844
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#202",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data, index, columns, dtype=None)",
        "snippet": "def init_dict(data, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if columns is not None:\n        from pandas.core.series import Series\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = object\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = (com.maybe_iterable_to_list(data[k]) for k in keys)\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 202,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011273957158962795,
            "pseudo_dstar_susp": 0.003401360544217687,
            "pseudo_tarantula_susp": 0.0013550135501355014,
            "pseudo_op2_susp": 0.003401360544217687,
            "pseudo_barinel_susp": 0.0013550135501355014
        }
    },
    {
        "name": "pandas.core.internals.construction.prep_ndarray#249",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.prep_ndarray(values, copy=True)",
        "snippet": "def prep_ndarray(values, copy=True):\n    if not isinstance(values, (np.ndarray, ABCSeries, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], \"len\"):\n                values = np.array([convert(v) for v in values])\n            elif isinstance(values[0], np.ndarray) and values[0].ndim == 0:\n                # GH#21861\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except (ValueError, TypeError):\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError(\"Must pass 2-d input\")\n\n    return values",
        "begin_line": 249,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014084507042253521,
            "pseudo_dstar_susp": 0.0011350737797956867,
            "pseudo_tarantula_susp": 0.014492753623188406,
            "pseudo_op2_susp": 0.0011350737797956867,
            "pseudo_barinel_susp": 0.014492753623188406
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#254",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(v)",
        "snippet": "        def convert(v):\n            return maybe_convert_platform(v)",
        "begin_line": 254,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.05,
            "pseudo_dstar_susp": 0.07142857142857142,
            "pseudo_tarantula_susp": 0.014492753623188406,
            "pseudo_op2_susp": 0.07142857142857142,
            "pseudo_barinel_susp": 0.014492753623188406
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#286",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype=None)",
        "snippet": "def _homogenize(data, index, dtype=None):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 286,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008084074373484236,
            "pseudo_dstar_susp": 0.00411522633744856,
            "pseudo_tarantula_susp": 0.0006211180124223603,
            "pseudo_op2_susp": 0.00411522633744856,
            "pseudo_barinel_susp": 0.0006211180124223603
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#317",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data):\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = (\n                        \"array length {length} does not match index \"\n                        \"length {idx_len}\".format(length=lengths[0], idx_len=len(index))\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 317,
        "end_line": 368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003979307600477517,
            "pseudo_dstar_susp": 0.0003979307600477517,
            "pseudo_tarantula_susp": 0.00039888312724371757,
            "pseudo_op2_susp": 0.0003979307600477517,
            "pseudo_barinel_susp": 0.00039888312724371757
        }
    },
    {
        "name": "pandas.core.internals.construction.get_names_from_index#385",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.get_names_from_index(data)",
        "snippet": "def get_names_from_index(data):\n    has_some_name = any(getattr(s, \"name\", None) is not None for s in data)\n    if not has_some_name:\n        return ibase.default_index(len(data))\n\n    index = list(range(len(data)))\n    count = 0\n    for i, s in enumerate(data):\n        n = getattr(s, \"name\", None)\n        if n is not None:\n            index[i] = n\n        else:\n            index[i] = \"Unnamed {count}\".format(count=count)\n            count += 1\n\n    return index",
        "begin_line": 385,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction._get_axes#403",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._get_axes(N, K, index, columns)",
        "snippet": "def _get_axes(N, K, index, columns):\n    # helper to create the axes as indexes\n    # return axes or defaults\n\n    if index is None:\n        index = ibase.default_index(N)\n    else:\n        index = ensure_index(index)\n\n    if columns is None:\n        columns = ibase.default_index(K)\n    else:\n        columns = ensure_index(columns)\n    return index, columns",
        "begin_line": 403,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008319467554076539,
            "pseudo_dstar_susp": 0.0005580357142857143,
            "pseudo_tarantula_susp": 0.0008756567425569177,
            "pseudo_op2_susp": 0.0005580357142857143,
            "pseudo_barinel_susp": 0.0008756567425569177
        }
    },
    {
        "name": "pandas.core.internals.construction.to_arrays#423",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"\n    Return list of arrays, columns.\n    \"\"\"\n    if isinstance(data, ABCDataFrame):\n        if columns is not None:\n            arrays = [\n                data._ixs(i, axis=1).values\n                for i, col in enumerate(data.columns)\n                if col in columns\n            ]\n        else:\n            columns = data.columns\n            arrays = [data._ixs(i, axis=1).values for i in range(len(columns))]\n\n        return arrays, columns\n\n    if not len(data):\n        if isinstance(data, np.ndarray):\n            columns = data.dtype.names\n            if columns is not None:\n                return [[]] * len(columns), columns\n        return [], []  # columns if columns is not None else []\n    if isinstance(data[0], (list, tuple)):\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)\n    elif isinstance(data[0], abc.Mapping):\n        return _list_of_dict_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], ABCSeries):\n        return _list_of_series_to_arrays(\n            data, columns, coerce_float=coerce_float, dtype=dtype\n        )\n    elif isinstance(data[0], Categorical):\n        if columns is None:\n            columns = ibase.default_index(len(data))\n        return data, columns\n    elif (\n        isinstance(data, (np.ndarray, ABCSeries, Index))\n        and data.dtype.names is not None\n    ):\n\n        columns = list(data.dtype.names)\n        arrays = [data[k] for k in columns]\n        return arrays, columns\n    else:\n        # last ditch effort\n        data = [tuple(x) for x in data]\n        return _list_to_arrays(data, columns, coerce_float=coerce_float, dtype=dtype)",
        "begin_line": 423,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction._list_to_arrays#474",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def _list_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if len(data) > 0 and isinstance(data[0], tuple):\n        content = list(lib.to_object_array_tuples(data).T)\n    else:\n        # list of lists\n        content = list(lib.to_object_array(data).T)\n    # gh-26429 do not raise user-facing AssertionError\n    try:\n        result = _convert_object_array(\n            content, columns, dtype=dtype, coerce_float=coerce_float\n        )\n    except AssertionError as e:\n        raise ValueError(e) from e\n    return result",
        "begin_line": 474,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction._list_of_series_to_arrays#490",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_of_series_to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def _list_of_series_to_arrays(data, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        # We know pass_data is non-empty because data[0] is a Series\n        pass_data = [x for x in data if isinstance(x, (ABCSeries, ABCDataFrame))]\n        columns = get_objs_combined_axis(pass_data, sort=False)\n\n    indexer_cache = {}\n\n    aligned_values = []\n    for s in data:\n        index = getattr(s, \"index\", None)\n        if index is None:\n            index = ibase.default_index(len(s))\n\n        if id(index) in indexer_cache:\n            indexer = indexer_cache[id(index)]\n        else:\n            indexer = indexer_cache[id(index)] = index.get_indexer(columns)\n\n        values = com.values_from_object(s)\n        aligned_values.append(algorithms.take_1d(values, indexer))\n\n    values = np.vstack(aligned_values)\n\n    if values.dtype == np.object_:\n        content = list(values.T)\n        return _convert_object_array(\n            content, columns, dtype=dtype, coerce_float=coerce_float\n        )\n    else:\n        return values.T, columns",
        "begin_line": 490,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction._list_of_dict_to_arrays#523",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._list_of_dict_to_arrays(data, columns, coerce_float=False, dtype=None)",
        "snippet": "def _list_of_dict_to_arrays(data, columns, coerce_float=False, dtype=None):\n    \"\"\"Convert list of dicts to numpy arrays\n\n    if `columns` is not passed, column names are inferred from the records\n    - for OrderedDict and dicts, the column names match\n      the key insertion-order from the first record to the last.\n    - For other kinds of dict-likes, the keys are lexically sorted.\n\n    Parameters\n    ----------\n    data : iterable\n        collection of records (OrderedDict, dict)\n    columns: iterables or None\n    coerce_float : bool\n    dtype : np.dtype\n\n    Returns\n    -------\n    tuple\n        arrays, columns\n    \"\"\"\n\n    if columns is None:\n        gen = (list(x.keys()) for x in data)\n        sort = not any(isinstance(d, dict) for d in data)\n        columns = lib.fast_unique_multiple_list_gen(gen, sort=sort)\n\n    # assure that they are of the base dict class and not of derived\n    # classes\n    data = [(type(d) is dict) and d or dict(d) for d in data]\n\n    content = list(lib.dicts_to_array(data, list(columns)).T)\n    return _convert_object_array(\n        content, columns, dtype=dtype, coerce_float=coerce_float\n    )",
        "begin_line": 523,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction._convert_object_array#560",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._convert_object_array(content, columns, coerce_float=False, dtype=None)",
        "snippet": "def _convert_object_array(content, columns, coerce_float=False, dtype=None):\n    if columns is None:\n        columns = ibase.default_index(len(content))\n    else:\n        if len(columns) != len(content):  # pragma: no cover\n            # caller's responsibility to check for this...\n            raise AssertionError(\n                \"{col:d} columns passed, passed data had \"\n                \"{con} columns\".format(col=len(columns), con=len(content))\n            )\n\n    # provide soft conversion of object dtypes\n    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr\n\n    arrays = [convert(arr) for arr in content]\n\n    return arrays, columns",
        "begin_line": 560,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction.convert#572",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.convert(arr)",
        "snippet": "    def convert(arr):\n        if dtype != object and dtype != np.object:\n            arr = lib.maybe_convert_objects(arr, try_float=coerce_float)\n            arr = maybe_cast_to_datetime(arr, dtype)\n        return arr",
        "begin_line": 572,
        "end_line": 576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.771397616468039e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.internals.construction.sanitize_index#587",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.sanitize_index(data, index, copy=False)",
        "snippet": "def sanitize_index(data, index, copy=False):\n    \"\"\"\n    Sanitize an index type to return an ndarray of the underlying, pass\n    through a non-Index.\n    \"\"\"\n\n    if index is None:\n        return data\n\n    if len(data) != len(index):\n        raise ValueError(\"Length of values does not match length of index\")\n\n    if isinstance(data, ABCIndexClass) and not copy:\n        pass\n    elif isinstance(data, (ABCPeriodIndex, ABCDatetimeIndex)):\n        data = data._values\n        if copy:\n            data = data.copy()\n\n    elif isinstance(data, np.ndarray):\n\n        # coerce datetimelike types\n        if data.dtype.kind in [\"M\", \"m\"]:\n            data = sanitize_array(data, index, copy=copy)\n\n    return data",
        "begin_line": 587,
        "end_line": 612,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.15307582260372e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#13",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 13,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.054734802615645e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#29",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, arr_value)",
        "snippet": "def is_scalar_indexer(indexer, arr_value) -> bool:\n    # return True if we are all scalar indexers\n\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n            return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.225037012666557e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#39",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 39,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.225037012666557e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#65",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        The key for the setitem\n    value : array-like\n        The value for the setitem\n    values : array-like\n        The values being set into\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't\n        match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 65,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.validate_indices#115",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.validate_indices(indices: np.ndarray, n: int)",
        "snippet": "def validate_indices(indices: np.ndarray, n: int) -> None:\n    \"\"\"\n    Perform bounds-checking for an indexer.\n\n    -1 is allowed for indicating missing values.\n\n    Parameters\n    ----------\n    indices : ndarray\n    n : int\n        length of the array being indexed\n\n    Raises\n    ------\n    ValueError\n\n    Examples\n    --------\n    >>> validate_indices([1, 2], 3)\n    # OK\n    >>> validate_indices([1, -2], 3)\n    ValueError\n    >>> validate_indices([1, 2, 3], 3)\n    IndexError\n    >>> validate_indices([-1, -1], 0)\n    # OK\n    >>> validate_indices([0, 1], 0)\n    IndexError\n    \"\"\"\n    if len(indices):\n        min_idx = indices.min()\n        if min_idx < -1:\n            msg = \"'indices' contains values less than allowed ({} < {})\".format(\n                min_idx, -1\n            )\n            raise ValueError(msg)\n\n        max_idx = indices.max()\n        if max_idx >= n:\n            raise IndexError(\"indices are out-of-bounds\")",
        "begin_line": 115,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.779201410073893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexers.maybe_convert_indices#161",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.maybe_convert_indices(indices, n: int)",
        "snippet": "def maybe_convert_indices(indices, n: int):\n    \"\"\"\n    Attempt to convert indices into valid, positive indices.\n\n    If we have negative indices, translate to positive here.\n    If we have indices that are out-of-bounds, raise an IndexError.\n\n    Parameters\n    ----------\n    indices : array-like\n        The array of indices that we are to convert.\n    n : int\n        The number of elements in the array that we are indexing.\n\n    Returns\n    -------\n    valid_indices : array-like\n        An array-like of positive indices that correspond to the ones\n        that were passed in initially to this function.\n\n    Raises\n    ------\n    IndexError : one of the converted indices either exceeded the number\n        of elements (specified by `n`) OR was still negative.\n    \"\"\"\n\n    if isinstance(indices, list):\n        indices = np.array(indices)\n        if len(indices) == 0:\n            # If list is empty, np.array will return float and cause indexing\n            # errors.\n            return np.empty(0, dtype=np.intp)\n\n    mask = indices < 0\n    if mask.any():\n        indices = indices.copy()\n        indices[mask] += n\n\n    mask = (indices >= n) | (indices < 0)\n    if mask.any():\n        raise IndexError(\"indices are out-of-bounds\")\n    return indices",
        "begin_line": 161,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00046382189239332097,
            "pseudo_dstar_susp": 0.0004633920296570899,
            "pseudo_tarantula_susp": 0.0006430868167202572,
            "pseudo_op2_susp": 0.0004633920296570899,
            "pseudo_barinel_susp": 0.0006430868167202572
        }
    },
    {
        "name": "pandas.core.indexers.length_of_indexer#209",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.length_of_indexer(indexer, target=None)",
        "snippet": "def length_of_indexer(indexer, target=None) -> int:\n    \"\"\"\n    return the length of a single non-tuple indexer which could be a slice\n    \"\"\"\n    if target is not None and isinstance(indexer, slice):\n        target_len = len(target)\n        start = indexer.start\n        stop = indexer.stop\n        step = indexer.step\n        if start is None:\n            start = 0\n        elif start < 0:\n            start += target_len\n        if stop is None or stop > target_len:\n            stop = target_len\n        elif stop < 0:\n            stop += target_len\n        if step is None:\n            step = 1\n        elif step < 0:\n            start, stop = stop + 1, start + 1\n            step = -step\n        return (stop - start + step - 1) // step\n    elif isinstance(indexer, (ABCSeries, ABCIndexClass, np.ndarray, list)):\n        return len(indexer)\n    elif not is_list_like_indexer(indexer):\n        return 1\n    raise AssertionError(\"cannot find the length of the indexer\")",
        "begin_line": 209,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.adjoin#25",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.adjoin(space: int, *lists: List[str], **kwargs)",
        "snippet": "def adjoin(space: int, *lists: List[str], **kwargs) -> str:\n    \"\"\"\n    Glues together two sets of strings using the amount of space requested.\n    The idea is to prettify.\n\n    ----------\n    space : int\n        number of spaces for padding\n    lists : str\n        list of str which being joined\n    strlen : callable\n        function used to calculate the length of each str. Needed for unicode\n        handling.\n    justfunc : callable\n        function used to justify str. Needed for unicode handling.\n    \"\"\"\n    strlen = kwargs.pop(\"strlen\", len)\n    justfunc = kwargs.pop(\"justfunc\", justify)\n\n    out_lines = []\n    newLists = []\n    lengths = [max(map(strlen, x)) + space for x in lists[:-1]]\n    # not the last one\n    lengths.append(max(map(len, lists[-1])))\n    maxLen = max(map(len, lists))\n    for i, lst in enumerate(lists):\n        nl = justfunc(lst, lengths[i], mode=\"left\")\n        nl.extend([\" \" * lengths[i]] * (maxLen - len(lst)))\n        newLists.append(nl)\n    toJoin = zip(*newLists)\n    for lines in toJoin:\n        out_lines.append(\"\".join(lines))\n    return \"\\n\".join(out_lines)",
        "begin_line": 25,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.justify#60",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.justify(texts: Iterable[str], max_len: int, mode: str='right')",
        "snippet": "def justify(texts: Iterable[str], max_len: int, mode: str = \"right\") -> List[str]:\n    \"\"\"\n    Perform ljust, center, rjust against string or list-like\n    \"\"\"\n    if mode == \"left\":\n        return [x.ljust(max_len) for x in texts]\n    elif mode == \"center\":\n        return [x.center(max_len) for x in texts]\n    else:\n        return [x.rjust(max_len) for x in texts]",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#162",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : False, int, default None\n        Pass thru to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = \"'{thing}'\".format(thing=as_escaped_string(thing))\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 162,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#194",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 194,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#281",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = type(obj).__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = \"\\n%s\" % (\" \" * (name_len + 1))\n        space2 = \"\\n%s\" % (\" \" * (name_len + 2))\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(s, line, value, display_width, next_line_prefix):\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values):\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = \"[]{}\".format(close)\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = \"[{}]{}\".format(first, close)\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = \"[{}, {}]{}\".format(first, last, close)\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 281,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#349",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s, line, value, display_width, next_line_prefix)",
        "snippet": "    def _extend_line(s, line, value, display_width, next_line_prefix):\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#357",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values)",
        "snippet": "    def best_len(values):\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#497",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs: List[Tuple[str, Union[str, int]]] = []\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", \"'{}'\".format(obj.dtype)))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 497,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#381",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 381,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035587188612099647,
            "pseudo_dstar_susp": 0.00035587188612099647,
            "pseudo_tarantula_susp": 0.000355998576005696,
            "pseudo_op2_susp": 0.00035587188612099647,
            "pseudo_barinel_susp": 0.000355998576005696
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#395",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, abc.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    \"incompatible data and dtype: {e}\".format(e=e)\n                )\n                raise exc from e\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr, fastpath=True)",
        "begin_line": 395,
        "end_line": 492,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014084507042253521,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.014492753623188406,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.014492753623188406
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#497",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 497,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004108463434675431,
            "pseudo_dstar_susp": 0.0004108463434675431,
            "pseudo_tarantula_susp": 0.00043535045711797995,
            "pseudo_op2_susp": 0.0004108463434675431,
            "pseudo_barinel_susp": 0.00043535045711797995
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shape#514",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)",
        "begin_line": 514,
        "end_line": 533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.046314771146986e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._is_homogeneous_type#536",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._is_homogeneous_type(self)",
        "snippet": "    def _is_homogeneous_type(self) -> bool:\n        \"\"\"\n        Whether all the columns in a DataFrame have the same type.\n\n        Returns\n        -------\n        bool\n\n        See Also\n        --------\n        Index._is_homogeneous_type : Whether the object has a single\n            dtype.\n        MultiIndex._is_homogeneous_type : Whether all the levels of a\n            MultiIndex have the same dtype.\n\n        Examples\n        --------\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n        True\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n        False\n\n        Items with the same type but different sizes are considered\n        different types.\n\n        >>> DataFrame({\n        ...    \"A\": np.array([1, 2], dtype=np.int32),\n        ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n        False\n        \"\"\"\n        if self._data.any_extension_types:\n            return len({block.dtype for block in self._data.blocks}) == 1\n        else:\n            return not self._data.is_mixed_type",
        "begin_line": 536,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.items#873",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.items(self)",
        "snippet": "    def items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n        if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)",
        "begin_line": 873,
        "end_line": 879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000931098696461825,
            "pseudo_dstar_susp": 0.0005868544600938967,
            "pseudo_tarantula_susp": 0.0009505703422053232,
            "pseudo_op2_susp": 0.0005868544600938967,
            "pseudo_barinel_susp": 0.0009505703422053232
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.iterrows#885",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.iterrows(self)",
        "snippet": "    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Yields\n        ------\n        index : label or tuple of label\n            The index of the row. A tuple for a `MultiIndex`.\n        data : Series\n            The data of the row as a Series.\n\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See Also\n        --------\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        DataFrame.items : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s",
        "begin_line": 885,
        "end_line": 935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1017",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1017,
        "end_line": 1021,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00043308791684711995,
            "pseudo_dstar_susp": 0.00043308791684711995,
            "pseudo_tarantula_susp": 0.0005165289256198347,
            "pseudo_op2_susp": 0.00043308791684711995,
            "pseudo_barinel_susp": 0.0005165289256198347
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.from_dict#1150",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.from_dict(cls, data, orient='columns', dtype=None, columns=None)",
        "snippet": "    def from_dict(cls, data, orient=\"columns\", dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame.\n        DataFrame : DataFrame object creation using constructor.\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == \"index\":\n            if len(data) > 0:\n                # TODO speed up Series case\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == \"columns\":\n            if columns is not None:\n                raise ValueError(\"cannot use columns parameter with orient='columns'\")\n        else:  # pragma: no cover\n            raise ValueError(\"only recognize index or columns for orient\")\n\n        return cls(data, index=index, columns=columns, dtype=dtype)",
        "begin_line": 1150,
        "end_line": 1228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.transpose#2504",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.transpose(self, *args, **kwargs)",
        "snippet": "    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        *args, **kwargs\n            Additional arguments and keywords have no effect but might be\n            accepted for compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super().transpose(1, 0, **kwargs)",
        "begin_line": 2504,
        "end_line": 2597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2604",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            label = self.index[i]\n            new_values = self._data.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            # if the values returned are not the same length\n            # as the index (iow a not found value), iget returns\n            # a 0-len ndarray. This is effectively catching\n            # a numpy error (as numpy should really raise)\n            values = self._data.iget(i)\n\n            if len(self.index) and not len(values):\n                values = np.array([np.nan] * len(self.index), dtype=object)\n            result = self._box_col_values(values, label)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2604,
        "end_line": 2648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2650",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self.take(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2650,
        "end_line": 2705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008756567425569177,
            "pseudo_dstar_susp": 0.005263157894736842,
            "pseudo_tarantula_susp": 0.0008673026886383347,
            "pseudo_op2_susp": 0.005263157894736842,
            "pseudo_barinel_susp": 0.0008673026886383347
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._getitem_bool_array#2707",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._getitem_bool_array(self, key)",
        "snippet": "    def _getitem_bool_array(self, key):\n        # also raises Exception if object array with NA values\n        # warning here just in case -- previously __setitem__ was\n        # reindexing but __getitem__ was not; it seems more reasonable to\n        # go with the __setitem__ behavior since that is more consistent\n        # with all other indexing behavior\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                \"Boolean Series key will be reindexed to match DataFrame index.\",\n                UserWarning,\n                stacklevel=3,\n            )\n        elif len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n            )\n\n        # check_bool_indexer will throw exception if Series key cannot\n        # be reindexed to match DataFrame rows\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self.take(indexer, axis=0)",
        "begin_line": 2707,
        "end_line": 2728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000819000819000819,
            "pseudo_dstar_susp": 0.0005546311702717693,
            "pseudo_tarantula_susp": 0.0008673026886383347,
            "pseudo_op2_susp": 0.0005546311702717693,
            "pseudo_barinel_susp": 0.0008673026886383347
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._getitem_multilevel#2730",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._getitem_multilevel(self, key)",
        "snippet": "    def _getitem_multilevel(self, key):\n        # self.columns is a MultiIndex\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(\n                    new_values, index=self.index, columns=result_columns\n                )\n                result = result.__finalize__(self)\n\n            # If there is only one column being returned, and its name is\n            # either an empty string, or a tuple with an empty string as its\n            # first element, then treat the empty string as a placeholder\n            # and return the column as if the user had provided that empty\n            # string in the key. If the result is a Series, exclude the\n            # implied empty string from its name.\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == \"\":\n                    result = result[\"\"]\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(\n                            result, index=self.index, name=key\n                        )\n\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)",
        "begin_line": 2730,
        "end_line": 2766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_value#2768",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_value(self, index, col, takeable: bool=False)",
        "snippet": "    def _get_value(self, index, col, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        scalar\n        \"\"\"\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n\n        try:\n            return engine.get_value(series._values, index)\n        except KeyError:\n            # GH 20629\n            if self.index.nlevels > 1:\n                # partial indexing forbidden\n                raise\n        except (TypeError, ValueError):\n            pass\n\n        # we cannot handle direct indexing\n        # use positional\n        col = self.columns.get_loc(col)\n        index = self.index.get_loc(index)\n        return self._get_value(index, col, takeable=True)",
        "begin_line": 2768,
        "end_line": 2803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2805",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2805,
        "end_line": 2821,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006035003017501509,
            "pseudo_dstar_susp": 0.0005232862375719519,
            "pseudo_tarantula_susp": 0.000791765637371338,
            "pseudo_op2_susp": 0.0005232862375719519,
            "pseudo_barinel_susp": 0.000791765637371338
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._setitem_array#2827",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._setitem_array(self, key, value)",
        "snippet": "    def _setitem_array(self, key, value):\n        # also raises Exception if object array with NA values\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError(\n                    f\"Item wrong length {len(key)} instead of {len(self.index)}!\"\n                )\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        else:\n            if isinstance(value, DataFrame):\n                if len(value.columns) != len(key):\n                    raise ValueError(\"Columns must be same length as key\")\n                for k1, k2 in zip(key, value.columns):\n                    self[k1] = value[k2]\n            else:\n                indexer = self.loc._get_listlike_indexer(\n                    key, axis=1, raise_missing=False\n                )[1]\n                self._check_setitem_copy()\n                self.loc._setitem_with_indexer((slice(None), indexer), value)",
        "begin_line": 2827,
        "end_line": 2849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#2868",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2868,
        "end_line": 2887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006105006105006105,
            "pseudo_dstar_susp": 0.0005263157894736842,
            "pseudo_tarantula_susp": 0.0007987220447284345,
            "pseudo_op2_susp": 0.0005263157894736842,
            "pseudo_barinel_susp": 0.0007987220447284345
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#2926",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError):\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a \"\n                    \"Series\"\n                )\n\n            self._data = self._data.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 2926,
        "end_line": 2944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000499001996007984,
            "pseudo_dstar_susp": 0.0004975124378109452,
            "pseudo_tarantula_susp": 0.00072992700729927,
            "pseudo_op2_susp": 0.0004975124378109452,
            "pseudo_barinel_susp": 0.00072992700729927
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_item_values#2946",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_item_values(self, key, values)",
        "snippet": "    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)",
        "begin_line": 2946,
        "end_line": 2951,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000856898029134533,
            "pseudo_dstar_susp": 0.004830917874396135,
            "pseudo_tarantula_susp": 0.0006693440428380187,
            "pseudo_op2_susp": 0.004830917874396135,
            "pseudo_barinel_susp": 0.0006693440428380187
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#2953",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, items)",
        "snippet": "    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)",
        "begin_line": 2953,
        "end_line": 2958,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008019246190858059,
            "pseudo_dstar_susp": 0.003952569169960474,
            "pseudo_tarantula_susp": 0.0006172839506172839,
            "pseudo_op2_susp": 0.003952569169960474,
            "pseudo_barinel_susp": 0.0006172839506172839
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.select_dtypes#3192",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.select_dtypes(self, include=None, exclude=None)",
        "snippet": "    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Returns\n        -------\n        DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n\n        selection = (frozenset(include), frozenset(exclude))\n\n        if not any(selection):\n            raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n        # convert the myriad valid dtypes object to a single representation\n        include = frozenset(infer_dtype_from_object(x) for x in include)\n        exclude = frozenset(infer_dtype_from_object(x) for x in exclude)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n\n        # can't both include AND exclude!\n        if not include.isdisjoint(exclude):\n            raise ValueError(\n                \"include and exclude overlap on {inc_ex}\".format(\n                    inc_ex=(include & exclude)\n                )\n            )\n\n        # We raise when both include and exclude are empty\n        # Hence, we can just shrink the columns we want to keep\n        keep_these = np.full(self.shape[1], True)\n\n        def extract_unique_dtypes_from_dtypes_set(\n            dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n        ) -> List[Dtype]:\n            extracted_dtypes = [\n                unique_dtype\n                for unique_dtype in unique_dtypes\n                if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n            ]\n            return extracted_dtypes\n\n        unique_dtypes = self.dtypes.unique()\n\n        if include:\n            included_dtypes = extract_unique_dtypes_from_dtypes_set(\n                include, unique_dtypes\n            )\n            keep_these &= self.dtypes.isin(included_dtypes)\n\n        if exclude:\n            excluded_dtypes = extract_unique_dtypes_from_dtypes_set(\n                exclude, unique_dtypes\n            )\n            keep_these &= ~self.dtypes.isin(excluded_dtypes)\n\n        return self.iloc[:, keep_these.values]",
        "begin_line": 3192,
        "end_line": 3324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.extract_unique_dtypes_from_dtypes_set#3300",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray)",
        "snippet": "        def extract_unique_dtypes_from_dtypes_set(\n            dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n        ) -> List[Dtype]:\n            extracted_dtypes = [\n                unique_dtype\n                for unique_dtype in unique_dtypes\n                if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n            ]\n            return extracted_dtypes",
        "begin_line": 3300,
        "end_line": 3308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.insert#3326",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.insert(self, loc, column, value, allow_duplicates=False)",
        "snippet": "    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns).\n        column : str, number, or hashable object\n            Label of the inserted column.\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
        "begin_line": 3326,
        "end_line": 3344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.142346975216056e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.assign#3346",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.assign(self, **kwargs)",
        "snippet": "    def assign(self, **kwargs):\n        r\"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        **kwargs : dict of {str: callable or Series}\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        Later items in '\\*\\*kwargs' may refer to newly created or modified\n        columns in 'df'; items are computed and assigned into 'df' in order.\n\n        .. versionchanged:: 0.23.0\n\n           Keyword argument order is maintained.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n        ...                   index=['Portland', 'Berkeley'])\n        >>> df\n                  temp_c\n        Portland    17.0\n        Berkeley    25.0\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        Alternatively, the same behavior can be achieved by directly\n        referencing an existing Series or sequence:\n\n        >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        You can create multiple columns within the same assign where one\n        of the columns depends on another one defined within the same assign:\n\n        >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n        ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n                  temp_c  temp_f  temp_k\n        Portland    17.0    62.6  290.15\n        Berkeley    25.0    77.0  298.15\n        \"\"\"\n        data = self.copy()\n\n        for k, v in kwargs.items():\n            data[k] = com.apply_if_callable(v, data)\n        return data",
        "begin_line": 3346,
        "end_line": 3416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3418",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index, copy=False)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3418,
        "end_line": 3520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008375209380234506,
            "pseudo_dstar_susp": 0.0005605381165919282,
            "pseudo_tarantula_susp": 0.0008818342151675485,
            "pseudo_op2_susp": 0.0005605381165919282,
            "pseudo_barinel_susp": 0.0008818342151675485
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3438",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value",
        "begin_line": 3438,
        "end_line": 3458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009587727708533077,
            "pseudo_dstar_susp": 0.005649717514124294,
            "pseudo_tarantula_susp": 0.0008818342151675485,
            "pseudo_op2_susp": 0.005649717514124294,
            "pseudo_barinel_susp": 0.0008818342151675485
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_axes#3580",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n        frame = self\n\n        columns = axes[\"columns\"]\n        if columns is not None:\n            frame = frame._reindex_columns(\n                columns, method, copy, level, fill_value, limit, tolerance\n            )\n\n        index = axes[\"index\"]\n        if index is not None:\n            frame = frame._reindex_index(\n                index, method, copy, level, fill_value, limit, tolerance\n            )\n\n        return frame",
        "begin_line": 3580,
        "end_line": 3595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_index#3597",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
        "snippet": "    def _reindex_index(\n        self,\n        new_index,\n        method,\n        copy,\n        level,\n        fill_value=np.nan,\n        limit=None,\n        tolerance=None,\n    ):\n        new_index, indexer = self.index.reindex(\n            new_index, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {0: [new_index, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )",
        "begin_line": 3597,
        "end_line": 3615,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_columns#3617",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
        "snippet": "    def _reindex_columns(\n        self,\n        new_columns,\n        method,\n        copy,\n        level,\n        fill_value=None,\n        limit=None,\n        tolerance=None,\n    ):\n        new_columns, indexer = self.columns.reindex(\n            new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n        )\n        return self._reindex_with_indexers(\n            {1: [new_columns, indexer]},\n            copy=copy,\n            fill_value=fill_value,\n            allow_dups=False,\n        )",
        "begin_line": 3617,
        "end_line": 3635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.241028521500344e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.align#3659",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        return super().align(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n            broadcast_axis=broadcast_axis,\n        )",
        "begin_line": 3659,
        "end_line": 3683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindex#3698",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)",
        "begin_line": 3698,
        "end_line": 3704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.219679064560268e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.drop#3706",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
        "snippet": "    def drop(\n        self,\n        labels=None,\n        axis=0,\n        index=None,\n        columns=None,\n        level=None,\n        inplace=False,\n        errors=\"raise\",\n    ):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index : single label or list-like\n            Alternative to specifying axis (``labels, axis=0``\n            is equivalent to ``index=labels``).\n\n            .. versionadded:: 0.21.0\n        columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame without the removed index or column labels.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis.\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns.\n        Series.drop : Return Series with specified index labels removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3, 0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super().drop(\n            labels=labels,\n            axis=axis,\n            index=index,\n            columns=columns,\n            level=level,\n            inplace=inplace,\n            errors=errors,\n        )",
        "begin_line": 3706,
        "end_line": 3846,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.299212598425197e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.rename#3852",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.rename(self, *args, **kwargs)",
        "snippet": "    def rename(self, *args, **kwargs):\n        \"\"\"\n        Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper : dict-like or function\n            Dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        index : dict-like or function\n            Alternative to specifying axis (``mapper, axis=0``\n            is equivalent to ``index=mapper``).\n        columns : dict-like or function\n            Alternative to specifying axis (``mapper, axis=1``\n            is equivalent to ``columns=mapper``).\n        axis : int or str\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index\n            being transformed.\n            If 'ignore', existing keys will be renamed and extra keys will be\n            ignored.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with the renamed axis labels.\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis and\n            \"errors='raise'\".\n\n        See Also\n        --------\n        DataFrame.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Rename columns using a mapping:\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Rename index using a mapping:\n\n        >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n           A  B\n        x  1  4\n        y  2  5\n        z  3  6\n\n        Cast index labels to a different type:\n\n        >>> df.index\n        RangeIndex(start=0, stop=3, step=1)\n        >>> df.rename(index=str).index\n        Index(['0', '1', '2'], dtype='object')\n\n        >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n        Traceback (most recent call last):\n        KeyError: ['C'] not found in axis\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, \"mapper\", \"rename\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"mapper\", None)\n        return super().rename(**kwargs)",
        "begin_line": 3852,
        "end_line": 3966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.fillna#3970",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n        **kwargs,\n    ):\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n            **kwargs,\n        )",
        "begin_line": 3970,
        "end_line": 3988,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.900990099009902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.replace#3991",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
        "snippet": "    def replace(\n        self,\n        to_replace=None,\n        value=None,\n        inplace=False,\n        limit=None,\n        regex=False,\n        method=\"pad\",\n    ):\n        return super().replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            limit=limit,\n            regex=regex,\n            method=method,\n        )",
        "begin_line": 3991,
        "end_line": 4007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.set_index#4015",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
        "snippet": "    def set_index(\n        self, keys, drop=True, append=False, inplace=False, verify_integrity=False\n    ):\n        \"\"\"\n        Set the DataFrame index using existing columns.\n\n        Set the DataFrame index (row labels) using one or more existing\n        columns or arrays (of the correct length). The index can replace the\n        existing index or expand on it.\n\n        Parameters\n        ----------\n        keys : label or array-like or list of labels/arrays\n            This parameter can be either a single column key, a single array of\n            the same length as the calling DataFrame, or a list containing an\n            arbitrary combination of column keys and arrays. Here, \"array\"\n            encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n            instances of :class:`~collections.abc.Iterator`.\n        drop : bool, default True\n            Delete columns to be used as the new index.\n        append : bool, default False\n            Whether to append columns to existing index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        verify_integrity : bool, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method.\n\n        Returns\n        -------\n        DataFrame\n            Changed row labels.\n\n        See Also\n        --------\n        DataFrame.reset_index : Opposite of set_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale': [55, 40, 84, 31]})\n        >>> df\n           month  year  sale\n        0      1  2012    55\n        1      4  2014    40\n        2      7  2013    84\n        3     10  2014    31\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               year  sale\n        month\n        1      2012    55\n        4      2014    40\n        7      2013    84\n        10     2014    31\n\n        Create a MultiIndex using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a MultiIndex using an Index and a column:\n\n        >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Create a MultiIndex using two Series:\n\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> df.set_index([s, s**2])\n              month  year  sale\n        1 1       1  2012    55\n        2 4       4  2014    40\n        3 9       7  2013    84\n        4 16     10  2014    31\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not isinstance(keys, list):\n            keys = [keys]\n\n        err_msg = (\n            'The parameter \"keys\" may be a column key, one-dimensional '\n            \"array, or a list containing only valid column keys and \"\n            \"one-dimensional arrays.\"\n        )\n\n        missing = []\n        for col in keys:\n            if isinstance(\n                col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)\n            ):\n                # arrays are fine as long as they are one-dimensional\n                # iterators get converted to list below\n                if getattr(col, \"ndim\", 1) != 1:\n                    raise ValueError(err_msg)\n            else:\n                # everything else gets tried as a key; see GH 24969\n                try:\n                    found = col in self.columns\n                except TypeError:\n                    raise TypeError(\n                        err_msg + \" Received column of type {}\".format(type(col))\n                    )\n                else:\n                    if not found:\n                        missing.append(col)\n\n        if missing:\n            raise KeyError(\"None of {} are in the columns\".format(missing))\n\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n\n        arrays = []\n        names = []\n        if append:\n            names = list(self.index.names)\n            if isinstance(self.index, ABCMultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n\n        to_remove = []\n        for col in keys:\n            if isinstance(col, ABCMultiIndex):\n                for n in range(col.nlevels):\n                    arrays.append(col._get_level_values(n))\n                names.extend(col.names)\n            elif isinstance(col, (ABCIndexClass, ABCSeries)):\n                # if Index then not MultiIndex (treated above)\n                arrays.append(col)\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray)):\n                arrays.append(col)\n                names.append(None)\n            elif isinstance(col, abc.Iterator):\n                arrays.append(list(col))\n                names.append(None)\n            # from here, col can only be a column label\n            else:\n                arrays.append(frame[col]._values)\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n\n            if len(arrays[-1]) != len(self):\n                # check newest element against length of calling frame, since\n                # ensure_index_from_sequences would not raise for append=False.\n                raise ValueError(\n                    \"Length mismatch: Expected {len_self} rows, \"\n                    \"received array of length {len_col}\".format(\n                        len_self=len(self), len_col=len(arrays[-1])\n                    )\n                )\n\n        index = ensure_index_from_sequences(arrays, names)\n\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError(\"Index has duplicate keys: {dup}\".format(dup=duplicates))\n\n        # use set to handle duplicate column names gracefully in case of drop\n        for c in set(to_remove):\n            del frame[c]\n\n        # clear up memory usage\n        index._cleanup()\n\n        frame.index = index\n\n        if not inplace:\n            return frame",
        "begin_line": 4015,
        "end_line": 4205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reset_index#4207",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reset_index(self, level=None, drop=False, inplace=False, col_level=0, col_fill='')",
        "snippet": "    def reset_index(\n        self, level=None, drop=False, inplace=False, col_level=0, col_fill=\"\"\n    ):\n        \"\"\"\n        Reset the index, or a level of it.\n\n        Reset the index of the DataFrame, and use the default one instead.\n        If the DataFrame has a MultiIndex, this method can remove one or more\n        levels.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default.\n        drop : bool, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with the new index.\n\n        See Also\n        --------\n        DataFrame.set_index : Opposite of reset_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 389.0),\n        ...                    ('bird', 24.0),\n        ...                    ('mammal', 80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n\n                    # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                    # Push this into maybe_upcast_putmask?\n                    # We can't pass EAs there right now. Looks a bit\n                    # complicated.\n                    # So we unbox the ndarray_values, op, re-box.\n                    values_type = type(values)\n                    values_dtype = values.dtype\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values._data\n\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask, np.nan)\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values_type(values, dtype=values_dtype)\n\n            return values\n\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n\n        if not drop:\n            if isinstance(self.index, ABCMultiIndex):\n                names = [\n                    (n if n is not None else f\"level_{i}\")\n                    for i, n in enumerate(self.index.names)\n                ]\n                to_insert = zip(self.index.levels, self.index.codes)\n            else:\n                default = \"index\" if \"index\" not in self else \"level_0\"\n                names = [default] if self.index.name is None else [self.index.name]\n                to_insert = ((self.index, None),)\n\n            multi_col = isinstance(self.columns, ABCMultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                \"col_fill=None is incompatible \"\n                                \"with incomplete column name \"\n                                \"{}\".format(name)\n                            )\n                        col_fill = col_name[0]\n\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                # to ndarray and maybe infer different dtype\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj",
        "begin_line": 4207,
        "end_line": 4441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009337068160597573,
            "pseudo_dstar_susp": 0.0005878894767783657,
            "pseudo_tarantula_susp": 0.0009532888465204957,
            "pseudo_op2_susp": 0.0005878894767783657,
            "pseudo_barinel_susp": 0.0009532888465204957
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._maybe_casted_values#4357",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._maybe_casted_values(index, labels=None)",
        "snippet": "        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n\n            # if we have the labels, extract the values with a mask\n            if labels is not None:\n                mask = labels == -1\n\n                # we can have situations where the whole mask is -1,\n                # meaning there is nothing found in labels, so make all nan's\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n\n                    # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                    # Push this into maybe_upcast_putmask?\n                    # We can't pass EAs there right now. Looks a bit\n                    # complicated.\n                    # So we unbox the ndarray_values, op, re-box.\n                    values_type = type(values)\n                    values_dtype = values.dtype\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values._data\n\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask, np.nan)\n\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values_type(values, dtype=values_dtype)\n\n            return values",
        "begin_line": 4357,
        "end_line": 4392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007686395080707148,
            "pseudo_dstar_susp": 0.000546448087431694,
            "pseudo_tarantula_susp": 0.000847457627118644,
            "pseudo_op2_susp": 0.000546448087431694,
            "pseudo_barinel_susp": 0.000847457627118644
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.notna#4455",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.notna(self)",
        "snippet": "    def notna(self):\n        return super().notna()",
        "begin_line": 4455,
        "end_line": 4456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.dropna#4462",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
        "snippet": "    def dropna(self, axis=0, how=\"any\", thresh=None, subset=None, inplace=False):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if isinstance(axis, (tuple, list)):\n            # GH20987\n            msg = (\n                \"supplying multiple axes to axis is deprecated and \"\n                \"will be removed in a future version.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n\n            count = agg_obj.count(axis=agg_axis)\n\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == \"any\":\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == \"all\":\n                mask = count > 0\n            else:\n                if how is not None:\n                    raise ValueError(\"invalid how option: {h}\".format(h=how))\n                else:\n                    raise TypeError(\"must specify how or thresh\")\n\n            result = self.loc(axis=axis)[mask]\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result",
        "begin_line": 4462,
        "end_line": 4609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.drop_duplicates#4611",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.drop_duplicates(self, subset=None, keep='first', inplace=False)",
        "snippet": "    def drop_duplicates(self, subset=None, keep=\"first\", inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed.\n\n        Considering certain columns is optional. Indexes, including time indexes\n        are ignored.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', False}, default 'first'\n            Determines which duplicates (if any) to keep.\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : bool, default False\n            Whether to drop duplicates in place or to return a copy.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        if self.empty:\n            return self.copy()\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        duplicated = self.duplicated(subset, keep=keep)\n\n        if inplace:\n            (inds,) = (-duplicated)._ndarray_values.nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]",
        "begin_line": 4611,
        "end_line": 4646,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007183908045977011,
            "pseudo_tarantula_susp": 0.0017064846416382253,
            "pseudo_op2_susp": 0.0007183908045977011,
            "pseudo_barinel_susp": 0.0017064846416382253
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.duplicated#4648",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.duplicated(self, subset=None, keep='first')",
        "snippet": "    def duplicated(self, subset=None, keep=\"first\"):\n        \"\"\"\n        Return boolean Series denoting duplicate rows.\n\n        Considering certain columns is optional.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns.\n        keep : {'first', 'last', False}, default 'first'\n            Determines which duplicates (if any) to mark.\n\n            - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        if self.empty:\n            return Series(dtype=bool)\n\n        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n            )\n            return labels.astype(\"i8\", copy=False), len(shape)\n\n        if subset is None:\n            subset = self.columns\n        elif (\n            not np.iterable(subset)\n            or isinstance(subset, str)\n            or isinstance(subset, tuple)\n            and subset in self.columns\n        ):\n            subset = (subset,)\n\n        # Verify all columns in subset exist in the queried dataframe\n        # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n        # key that doesn't exist.\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n\n        vals = (col.values for name, col in self.items() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)",
        "begin_line": 4648,
        "end_line": 4703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.005917159763313609,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.005917159763313609
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#4676",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(vals)",
        "snippet": "        def f(vals):\n            labels, shape = algorithms.factorize(\n                vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n            )\n            return labels.astype(\"i8\", copy=False), len(shape)",
        "begin_line": 4676,
        "end_line": 4680,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0015625,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0015625
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.sort_values#4710",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
        "snippet": "    def sort_values(\n        self,\n        by,\n        axis=0,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n    ):\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        axis = self._get_axis_number(axis)\n\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                f\"Length of ascending ({len(ascending)}) != length of by ({len(by)})\"\n            )\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n\n            keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis)\n\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n\n            indexer = nargsort(\n                k, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        new_data = self._data.take(\n            indexer, axis=self._get_block_manager_axis(axis), verify=False\n        )\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4710,
        "end_line": 4754,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.sort_index#4758",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n        sort_remaining=True,\n    ):\n\n        # TODO: this can be combined with Series.sort_index impl as\n        # almost identical\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n\n        # make sure that the axis is lexsorted to start\n        # if not we need to reconstruct to get the correct indexer\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n\n            new_axis, indexer = labels.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n\n        elif isinstance(labels, ABCMultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and labels.is_monotonic_increasing) or (\n                not ascending and labels.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                labels, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n\n        # reconstruct axis if needed\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4758,
        "end_line": 4820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._combine_match_index#5111",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._combine_match_index(self, other, func)",
        "snippet": "    def _combine_match_index(self, other, func):\n        # at this point we have `self.index.equals(other.index)`\n\n        if ops.should_series_dispatch(self, other, func):\n            # operate column-wise; avoid costly object-casting in `.values`\n            new_data = ops.dispatch_to_series(self, other, func)\n        else:\n            # fastpath --> operate directly on values\n            with np.errstate(all=\"ignore\"):\n                new_data = func(self.values.T, other.values).T\n        return new_data",
        "begin_line": 5111,
        "end_line": 5121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._construct_result#5123",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._construct_result(self, result)",
        "snippet": "    def _construct_result(self, result) -> \"DataFrame\":\n        \"\"\"\n        Wrap the result of an arithmetic, comparison, or logical operation.\n\n        Parameters\n        ----------\n        result : DataFrame\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        out = self._constructor(result, index=self.index, copy=False)\n        # Pin columns instead of passing to constructor for compat with\n        #  non-unique columns case\n        out.columns = self.columns\n        return out",
        "begin_line": 5123,
        "end_line": 5139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.pivot#5645",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.pivot(self, index=None, columns=None, values=None)",
        "snippet": "    def pivot(self, index=None, columns=None, values=None):\n        from pandas.core.reshape.pivot import pivot\n\n        return pivot(self, index=index, columns=columns, values=values)",
        "begin_line": 5645,
        "end_line": 5648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.pivot_table#5781",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
        "snippet": "    def pivot_table(\n        self,\n        values=None,\n        index=None,\n        columns=None,\n        aggfunc=\"mean\",\n        fill_value=None,\n        margins=False,\n        dropna=True,\n        margins_name=\"All\",\n        observed=False,\n    ):\n        from pandas.core.reshape.pivot import pivot_table\n\n        return pivot_table(\n            self,\n            values=values,\n            index=index,\n            columns=columns,\n            aggfunc=aggfunc,\n            fill_value=fill_value,\n            margins=margins,\n            dropna=dropna,\n            margins_name=margins_name,\n            observed=observed,\n        )",
        "begin_line": 5781,
        "end_line": 5806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.stack#5808",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.stack(self, level=-1, dropna=True)",
        "snippet": "    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being reorganized from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)",
        "begin_line": 5808,
        "end_line": 5976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.unstack#6048",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.unstack(self, level=-1, fill_value=None)",
        "snippet": "    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels.\n\n        Returns a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels.\n\n        If the index is not a MultiIndex, the output will be a Series\n        (the analogue of stack when the columns are not a MultiIndex).\n\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name.\n        fill_value : int, str or dict\n            Replace NaN with this value if the unstack produces missing values.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n\n        return unstack(self, level, fill_value)",
        "begin_line": 6048,
        "end_line": 6109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.406858751203614e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.melt#6213",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
        "snippet": "    def melt(\n        self,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n    ):\n        from pandas.core.reshape.melt import melt\n\n        return melt(\n            self,\n            id_vars=id_vars,\n            value_vars=value_vars,\n            var_name=var_name,\n            value_name=value_name,\n            col_level=col_level,\n        )",
        "begin_line": 6213,
        "end_line": 6230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.apply#6449",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
        "snippet": "    def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n\n        raw : bool, default False\n            Determines if row or column is passed as a Series or ndarray object:\n\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        Series or DataFrame\n            Result of applying ``func`` along the given axis of the\n            DataFrame.\n\n        See Also\n        --------\n        DataFrame.applymap: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Returning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n        \"\"\"\n        from pandas.core.apply import frame_apply\n\n        op = frame_apply(\n            self,\n            func=func,\n            axis=axis,\n            raw=raw,\n            result_type=result_type,\n            args=args,\n            kwds=kwds,\n        )\n        return op.get_result()",
        "begin_line": 6449,
        "end_line": 6596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.append#6667",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=None)",
        "snippet": "    def append(self, other, ignore_index=False, verify_integrity=False, sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n        verify_integrity : bool, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : bool, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    \"Can only append a Series if ignore_index=True\"\n                    \" or if the Series has a name\"\n                )\n\n            if other.name is None:\n                index = None\n            else:\n                # other must have the same index name as self, otherwise\n                # index name will be reset\n                index = Index([other.name], name=self.index.name)\n\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(\n                other.values.reshape((1, len(other))),\n                index=index,\n                columns=combined_columns,\n            )\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list):\n            if not other:\n                pass\n            elif not isinstance(other[0], DataFrame):\n                other = DataFrame(other)\n                if (self.columns.get_indexer(other.columns) >= 0).all():\n                    other = other.reindex(columns=self.columns)\n\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(\n            to_concat,\n            ignore_index=ignore_index,\n            verify_integrity=verify_integrity,\n            sort=sort,\n        )",
        "begin_line": 6667,
        "end_line": 6810,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.join#6812",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
        "snippet": "    def join(self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False):\n        \"\"\"\n        Join columns of another DataFrame.\n\n        Join columns with `other` DataFrame either on index or on a key\n        column. Efficiently join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame.\n        on : str, list of str, or array-like, optional\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation.\n        how : {'left', 'right', 'outer', 'inner'}, default 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use `other`'s index.\n            * outer: form union of calling frame's index (or column if on is\n              specified) with `other`'s index, and sort it.\n              lexicographically.\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with `other`'s index, preserving the order\n              of the calling's one.\n        lsuffix : str, default ''\n            Suffix to use from left frame's overlapping columns.\n        rsuffix : str, default ''\n            Suffix to use from right frame's overlapping columns.\n        sort : bool, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword).\n\n        Returns\n        -------\n        DataFrame\n            A dataframe containing columns from both the caller and `other`.\n\n        See Also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Notes\n        -----\n        Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n        passing a list of `DataFrame` objects.\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> df\n          key   A\n        0  K0  A0\n        1  K1  A1\n        2  K2  A2\n        3  K3  A3\n        4  K4  A4\n        5  K5  A5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n          key   B\n        0  K0  B0\n        1  K1  B1\n        2  K2  B2\n\n        Join DataFrames using their indexes.\n\n        >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n          key_caller   A key_other    B\n        0         K0  A0        K0   B0\n        1         K1  A1        K1   B1\n        2         K2  A2        K2   B2\n        3         K3  A3       NaN  NaN\n        4         K4  A4       NaN  NaN\n        5         K5  A5       NaN  NaN\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both `df` and `other`. The joined DataFrame will have\n        key as its index.\n\n        >>> df.set_index('key').join(other.set_index('key'))\n              A    B\n        key\n        K0   A0   B0\n        K1   A1   B1\n        K2   A2   B2\n        K3   A3  NaN\n        K4   A4  NaN\n        K5   A5  NaN\n\n        Another option to join using the key columns is to use the `on`\n        parameter. DataFrame.join always uses `other`'s index but we can use\n        any column in `df`. This method preserves the original DataFrame's\n        index in the result.\n\n        >>> df.join(other.set_index('key'), on='key')\n          key   A    B\n        0  K0  A0   B0\n        1  K1  A1   B1\n        2  K2  A2   B2\n        3  K3  A3  NaN\n        4  K4  A4  NaN\n        5  K5  A5  NaN\n        \"\"\"\n        return self._join_compat(\n            other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort\n        )",
        "begin_line": 6812,
        "end_line": 6932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.489514679448772e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._join_compat#6934",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
        "snippet": "    def _join_compat(\n        self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n    ):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError(\"Other Series must have a name\")\n            other = DataFrame({other.name: other})\n\n        if isinstance(other, DataFrame):\n            return merge(\n                self,\n                other,\n                left_on=on,\n                how=how,\n                left_index=on is None,\n                right_index=True,\n                suffixes=(lsuffix, rsuffix),\n                sort=sort,\n            )\n        else:\n            if on is not None:\n                raise ValueError(\n                    \"Joining multiple DataFrames only supported for joining on index\"\n                )\n\n            frames = [self] + list(other)\n\n            can_concat = all(df.index.is_unique for df in frames)\n\n            # join indexes only using concat\n            if can_concat:\n                if how == \"left\":\n                    res = concat(\n                        frames, axis=1, join=\"outer\", verify_integrity=True, sort=sort\n                    )\n                    return res.reindex(self.index, copy=False)\n                else:\n                    return concat(\n                        frames, axis=1, join=how, verify_integrity=True, sort=sort\n                    )\n\n            joined = frames[0]\n\n            for frame in frames[1:]:\n                joined = merge(\n                    joined, frame, how=how, left_index=True, right_index=True\n                )\n\n            return joined",
        "begin_line": 6934,
        "end_line": 6985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.merge#6989",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)",
        "snippet": "    def merge(\n        self,\n        right,\n        how=\"inner\",\n        on=None,\n        left_on=None,\n        right_on=None,\n        left_index=False,\n        right_index=False,\n        sort=False,\n        suffixes=(\"_x\", \"_y\"),\n        copy=True,\n        indicator=False,\n        validate=None,\n    ):\n        from pandas.core.reshape.merge import merge\n\n        return merge(\n            self,\n            right,\n            how=how,\n            on=on,\n            left_on=left_on,\n            right_on=right_on,\n            left_index=left_index,\n            right_index=right_index,\n            sort=sort,\n            suffixes=suffixes,\n            copy=copy,\n            indicator=indicator,\n            validate=validate,\n        )",
        "begin_line": 6989,
        "end_line": 7020,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.60763843002511e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.count#7430",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.count(self, axis=0, level=None, numeric_only=False)",
        "snippet": "    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : bool, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.shape: Number of DataFrame rows and columns (including NA\n            elements).\n        DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n            elements.\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Lewis     1\n        Myla      1\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=numeric_only)\n\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n\n        # GH #423\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        else:\n            if frame._is_mixed_type or frame._data.any_extension_types:\n                # the or any_extension_types is really only hit for single-\n                # column frames with an extension array\n                result = notna(frame).sum(axis=axis)\n            else:\n                # GH13407\n                series_counts = notna(frame).sum(axis=axis)\n                counts = series_counts.values\n                result = Series(counts, index=frame._get_agg_axis(axis))\n\n        return result.astype(\"int64\")",
        "begin_line": 7430,
        "end_line": 7529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reduce#7575",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        if axis is None and filter_type == \"bool\":\n            labels = None\n            constructor = None\n        else:\n            # TODO: Make other agg func handle axis=None properly\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        def _get_data(axis_matters):\n            if filter_type is None or filter_type == \"numeric\":\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    \"Generating numeric_only data with filter_type {f}\"\n                    \"not supported.\".format(f=filter_type)\n                )\n                raise NotImplementedError(msg)\n            return data\n\n        if numeric_only is None:\n            values = self.values\n            try:\n                result = f(values)\n\n                if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                    # work around https://github.com/numpy/numpy/issues/10489\n                    # TODO: combine with hasattr(result, 'dtype') further down\n                    # hard since we don't have `values` down there.\n                    result = np.bool_(result)\n            except TypeError:\n                # e.g. in nanops trying to convert strs to float\n\n                # try by-column first\n                if filter_type is None and axis == 0:\n                    # this can end up with a non-reduction\n                    # but not always. if the types are mixed\n                    # with datelike then need to make sure a series\n\n                    # we only end up here if we have not specified\n                    # numeric_only and yet we have tried a\n                    # column-by-column reduction, where we have mixed type.\n                    # So let's just do what we can\n                    from pandas.core.apply import frame_apply\n\n                    opa = frame_apply(\n                        self, func=f, result_type=\"expand\", ignore_failures=True\n                    )\n                    result = opa.get_result()\n                    if result.ndim == self.ndim:\n                        result = result.iloc[0]\n                    return result\n\n                # TODO: why doesnt axis matter here?\n                data = _get_data(axis_matters=False)\n                with np.errstate(all=\"ignore\"):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                data = _get_data(axis_matters=True)\n\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n\n        if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == \"numeric\":\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result",
        "begin_line": 7575,
        "end_line": 7669,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#7587",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(x)",
        "snippet": "        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)",
        "begin_line": 7587,
        "end_line": 7588,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_data#7590",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_data(axis_matters)",
        "snippet": "        def _get_data(axis_matters):\n            if filter_type is None or filter_type == \"numeric\":\n                data = self._get_numeric_data()\n            elif filter_type == \"bool\":\n                if axis_matters:\n                    # GH#25101, GH#24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:\n                    data = self._get_bool_data()\n            else:  # pragma: no cover\n                msg = (\n                    \"Generating numeric_only data with filter_type {f}\"\n                    \"not supported.\".format(f=filter_type)\n                )\n                raise NotImplementedError(msg)\n            return data",
        "begin_line": 7590,
        "end_line": 7605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_agg_axis#7787",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_agg_axis(self, axis_num)",
        "snippet": "    def _get_agg_axis(self, axis_num):\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError(\"Axis must be 0 or 1 (got %r)\" % axis_num)",
        "begin_line": 7787,
        "end_line": 7796,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api.get_objs_combined_axis#67",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.get_objs_combined_axis(objs, intersect: bool=False, axis=0, sort: bool=True)",
        "snippet": "def get_objs_combined_axis(\n    objs, intersect: bool = False, axis=0, sort: bool = True\n) -> Index:\n    \"\"\"\n    Extract combined index: return intersection or union (depending on the\n    value of \"intersect\") of indexes on given axis, or None if all objects\n    lack indexes (e.g. they are numpy arrays).\n\n    Parameters\n    ----------\n    objs : list\n        Series or DataFrame objects, may be mix of the two.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    axis : {0 or 'index', 1 or 'outer'}, default 0\n        The axis to extract indexes from.\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    obs_idxes = [obj._get_axis(axis) for obj in objs]\n    return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)",
        "begin_line": 67,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.474168069403081e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api._get_distinct_objs#95",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._get_distinct_objs(objs: List[Index])",
        "snippet": "def _get_distinct_objs(objs: List[Index]) -> List[Index]:\n    \"\"\"\n    Return a list with distinct elements of \"objs\" (different ids).\n    Preserves order.\n    \"\"\"\n    ids: Set[int] = set()\n    res = []\n    for obj in objs:\n        if id(obj) not in ids:\n            ids.add(id(obj))\n            res.append(obj)\n    return res",
        "begin_line": 95,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.474168069403081e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api._get_combined_index#109",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._get_combined_index(indexes: List[Index], intersect: bool=False, sort: bool=False)",
        "snippet": "def _get_combined_index(\n    indexes: List[Index], intersect: bool = False, sort: bool = False\n) -> Index:\n    \"\"\"\n    Return the union or intersection of indexes.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n        When intersect=True, do not accept list of lists.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    sort : bool, default False\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n\n    # TODO: handle index names!\n    indexes = _get_distinct_objs(indexes)\n    if len(indexes) == 0:\n        index = Index([])\n    elif len(indexes) == 1:\n        index = indexes[0]\n    elif intersect:\n        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = union_indexes(indexes, sort=sort)\n        index = ensure_index(index)\n\n    if sort:\n        try:\n            index = index.sort_values()\n        except TypeError:\n            pass\n    return index",
        "begin_line": 109,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api.union_indexes#152",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.union_indexes(indexes, sort=True)",
        "snippet": "def union_indexes(indexes, sort=True) -> Index:\n    \"\"\"\n    Return the union of indexes.\n\n    The behavior of sort and names is not consistent.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if len(indexes) == 0:\n        raise AssertionError(\"Must have at least 1 Index to union\")\n    if len(indexes) == 1:\n        result = indexes[0]\n        if isinstance(result, list):\n            result = Index(sorted(result))\n        return result\n\n    indexes, kind = _sanitize_and_check(indexes)\n\n    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))\n\n    if kind == \"special\":\n        result = indexes[0]\n\n        if hasattr(result, \"union_many\"):\n            return result.union_many(indexes[1:])\n        else:\n            for other in indexes[1:]:\n                result = result.union(other)\n            return result\n    elif kind == \"array\":\n        index = indexes[0]\n        for other in indexes[1:]:\n            if not index.equals(other):\n                return _unique_indices(indexes)\n\n        name = get_consensus_names(indexes)[0]\n        if name != index.name:\n            index = index._shallow_copy(name=name)\n        return index\n    else:  # kind='list'\n        return _unique_indices(indexes)",
        "begin_line": 152,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api._unique_indices#178",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._unique_indices(inds)",
        "snippet": "    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))",
        "begin_line": 178,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.522190461862494e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api.conv#193",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.conv(i)",
        "snippet": "        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api._sanitize_and_check#223",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api._sanitize_and_check(indexes)",
        "snippet": "def _sanitize_and_check(indexes):\n    \"\"\"\n    Verify the type of indexes and convert lists to Index.\n\n    Cases:\n\n    - [list, list, ...]: Return ([list, list, ...], 'list')\n    - [list, Index, ...]: Return _sanitize_and_check([Index, Index, ...])\n        Lists are sorted and converted to Index.\n    - [Index, Index, ...]: Return ([Index, Index, ...], TYPE)\n        TYPE = 'special' if at least one special type, 'array' otherwise.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n\n    Returns\n    -------\n    sanitized_indexes : list of Index or list objects\n    type : {'list', 'array', 'special'}\n    \"\"\"\n    kinds = list({type(index) for index in indexes})\n\n    if list in kinds:\n        if len(kinds) > 1:\n            indexes = [\n                Index(com.try_sort(x)) if not isinstance(x, Index) else x\n                for x in indexes\n            ]\n            kinds.remove(list)\n        else:\n            return indexes, \"list\"\n\n    if len(kinds) > 1 or Index not in kinds:\n        return indexes, \"special\"\n    else:\n        return indexes, \"array\"",
        "begin_line": 223,
        "end_line": 259,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api.get_consensus_names#262",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.get_consensus_names(indexes)",
        "snippet": "def get_consensus_names(indexes):\n    \"\"\"\n    Give a consensus 'names' to indexes.\n\n    If there's exactly one non-empty 'names', return this,\n    otherwise, return empty.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    list\n        A list representing the consensus 'names' found.\n    \"\"\"\n\n    # find the non-none names, need to tupleify to make\n    # the set hashable, then reverse on return\n    consensus_names = {tuple(i.names) for i in indexes if com.any_not_none(*i.names)}\n    if len(consensus_names) == 1:\n        return list(list(consensus_names)[0])\n    return [None] * indexes[0].nlevels",
        "begin_line": 262,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.api.all_indexes_same#287",
        "src_path": "pandas/core/indexes/api.py",
        "class_name": "pandas.core.indexes.api",
        "signature": "pandas.core.indexes.api.all_indexes_same(indexes)",
        "snippet": "def all_indexes_same(indexes):\n    \"\"\"\n    Determine if all indexes contain the same elements.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    bool\n        True if all indexes contain the same elements, False otherwise.\n    \"\"\"\n    first = indexes[0]\n    for index in indexes[1:]:\n        if not first.equals(index):\n            return False\n    return True",
        "begin_line": 287,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.wrapper#104",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series",
        "signature": "pandas.core.series.wrapper(self)",
        "snippet": "    def wrapper(self):\n        if len(self) == 1:\n            return converter(self.iloc[0])\n        raise TypeError(\"cannot convert the series to {0}\".format(str(converter)))",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#175",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                # GH 26336: explicitly handle 'category' to avoid warning\n                # TODO: Remove after CategoricalDtype defaults to ordered=False\n                if (\n                    isinstance(dtype, str)\n                    and dtype == \"category\"\n                    and is_categorical(data)\n                ):\n                    dtype = data.dtype\n\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n                if name is None:\n                    name = data.name\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, ABCSeries):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument.  `copy` must \"\n                        \"be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"{repr(type(data).__name__)} type is unordered\")\n            elif isinstance(data, ABCSparseArray):\n                # handle sparse passed here (and force conversion)\n                data = data.to_dense()\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            \"Length of passed values is {val}, \"\n                            \"index implies {ind}\".format(val=len(data), ind=len(index))\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 175,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009881422924901185,
            "pseudo_dstar_susp": 0.0038022813688212928,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0038022813688212928,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#298",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n        s = Series(values, index=keys, dtype=dtype)\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._data, s.index",
        "begin_line": 298,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009551098376313276,
            "pseudo_dstar_susp": 0.0005924170616113745,
            "pseudo_tarantula_susp": 0.0009671179883945841,
            "pseudo_op2_susp": 0.0005924170616113745,
            "pseudo_barinel_susp": 0.0009671179883945841
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#341",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self):\n        return Series",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003952569169960474,
            "pseudo_dstar_susp": 0.0003952569169960474,
            "pseudo_tarantula_susp": 0.0003961965134706815,
            "pseudo_op2_susp": 0.0003952569169960474,
            "pseudo_barinel_susp": 0.0003961965134706815
        }
    },
    {
        "name": "pandas.core.series.Series._constructor_expanddim#345",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor_expanddim(self)",
        "snippet": "    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n\n        return DataFrame",
        "begin_line": 345,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._can_hold_na#352",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return self._data._can_hold_na",
        "begin_line": 352,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#357",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis, labels, fastpath=False)",
        "snippet": "    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\"\n        Override generic, we want to set the _typ here.\n        \"\"\"\n\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)",
        "begin_line": 357,
        "end_line": 382,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006849315068493151,
            "pseudo_dstar_susp": 0.002583979328165375,
            "pseudo_tarantula_susp": 0.0005414185165132648,
            "pseudo_op2_susp": 0.002583979328165375,
            "pseudo_barinel_susp": 0.0005414185165132648
        }
    },
    {
        "name": "pandas.core.series.Series._set_subtyp#384",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_subtyp(self, is_all_dates)",
        "snippet": "    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, \"_subtyp\", \"time_series\")\n        else:\n            object.__setattr__(self, \"_subtyp\", \"series\")",
        "begin_line": 384,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006944444444444445,
            "pseudo_dstar_susp": 0.002717391304347826,
            "pseudo_tarantula_susp": 0.0005506607929515419,
            "pseudo_op2_susp": 0.002717391304347826,
            "pseudo_barinel_susp": 0.0005506607929515419
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#396",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 396,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035536602700781805,
            "pseudo_dstar_susp": 0.00035536602700781805,
            "pseudo_tarantula_susp": 0.00035549235691432633,
            "pseudo_op2_susp": 0.00035536602700781805,
            "pseudo_barinel_susp": 0.00035549235691432633
        }
    },
    {
        "name": "pandas.core.series.Series.name#410",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Optional[Hashable]:\n        return self.attrs.get(\"name\", None)",
        "begin_line": 410,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006849315068493151,
            "pseudo_dstar_susp": 0.002583979328165375,
            "pseudo_tarantula_susp": 0.0005414185165132648,
            "pseudo_op2_susp": 0.002583979328165375,
            "pseudo_barinel_susp": 0.0005414185165132648
        }
    },
    {
        "name": "pandas.core.series.Series.name#414",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Optional[Hashable])",
        "snippet": "    def name(self, value: Optional[Hashable]) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        self.attrs[\"name\"] = value",
        "begin_line": 414,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006849315068493151,
            "pseudo_dstar_susp": 0.002583979328165375,
            "pseudo_tarantula_susp": 0.0005414185165132648,
            "pseudo_op2_susp": 0.002583979328165375,
            "pseudo_barinel_susp": 0.0005414185165132648
        }
    },
    {
        "name": "pandas.core.series.Series.values#420",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._data.external_values()",
        "begin_line": 420,
        "end_line": 459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045248868778280545,
            "pseudo_dstar_susp": 0.0004522840343735866,
            "pseudo_tarantula_susp": 0.0006016847172081829,
            "pseudo_op2_susp": 0.0004522840343735866,
            "pseudo_barinel_susp": 0.0006016847172081829
        }
    },
    {
        "name": "pandas.core.series.Series._values#462",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data.\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 462,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007616146230007616,
            "pseudo_dstar_susp": 0.003401360544217687,
            "pseudo_tarantula_susp": 0.0005938242280285036,
            "pseudo_op2_susp": 0.003401360544217687,
            "pseudo_barinel_susp": 0.0005938242280285036
        }
    },
    {
        "name": "pandas.core.series.Series._internal_get_values#488",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        return self._data.get_values()",
        "begin_line": 488,
        "end_line": 489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038819875776397513,
            "pseudo_dstar_susp": 0.00038819875776397513,
            "pseudo_tarantula_susp": 0.0003891050583657588,
            "pseudo_op2_susp": 0.00038819875776397513,
            "pseudo_barinel_susp": 0.0003891050583657588
        }
    },
    {
        "name": "pandas.core.series.Series.ravel#492",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.ravel(self, order='C')",
        "snippet": "    def ravel(self, order=\"C\"):\n        \"\"\"\n        Return the flattened underlying data as an ndarray.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n            Flattened data of the Series.\n\n        See Also\n        --------\n        numpy.ndarray.ravel\n        \"\"\"\n        return self._values.ravel(order=order)",
        "begin_line": 492,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#597",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 597,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003575259206292456,
            "pseudo_dstar_susp": 0.0003575259206292456,
            "pseudo_tarantula_susp": 0.000357653791130186,
            "pseudo_op2_susp": 0.0003575259206292456,
            "pseudo_barinel_susp": 0.000357653791130186
        }
    },
    {
        "name": "pandas.core.series.Series.view#603",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        \"\"\"\n        Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8\n        \"\"\"\n        return self._constructor(\n            self._values.view(dtype), index=self.index\n        ).__finalize__(self)",
        "begin_line": 603,
        "end_line": 671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__array_ufunc__#677",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
        "snippet": "    def __array_ufunc__(\n        self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any\n    ):\n        # TODO: handle DataFrame\n        cls = type(self)\n\n        # for binary ops, use our custom dunder methods\n        result = ops.maybe_dispatch_ufunc_to_dunder_op(\n            self, ufunc, method, *inputs, **kwargs\n        )\n        if result is not NotImplemented:\n            return result\n\n        # Determine if we should defer.\n        no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n\n        for item in inputs:\n            higher_priority = (\n                hasattr(item, \"__array_priority__\")\n                and item.__array_priority__ > self.__array_priority__\n            )\n            has_array_ufunc = (\n                hasattr(item, \"__array_ufunc__\")\n                and type(item).__array_ufunc__ not in no_defer\n                and not isinstance(item, self._HANDLED_TYPES)\n            )\n            if higher_priority or has_array_ufunc:\n                return NotImplemented\n\n        # align all the inputs.\n        names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]\n        types = tuple(type(x) for x in inputs)\n        # TODO: dataframe\n        alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n        if len(alignable) > 1:\n            # This triggers alignment.\n            # At the moment, there aren't any ufuncs with more than two inputs\n            # so this ends up just being x1.index | x2.index, but we write\n            # it to handle *args.\n            index = alignable[0].index\n            for s in alignable[1:]:\n                index |= s.index\n            inputs = tuple(\n                x.reindex(index) if issubclass(t, Series) else x\n                for x, t in zip(inputs, types)\n            )\n        else:\n            index = self.index\n\n        inputs = tuple(extract_array(x, extract_numpy=True) for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n\n        name: Optional[Hashable]\n        if len(set(names)) == 1:\n            name = names[0]\n        else:\n            name = None\n\n        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    msg = (\n                        \"outer method for ufunc {} is not implemented on \"\n                        \"pandas objects. Returning an ndarray, but in the \"\n                        \"future this will raise a 'NotImplementedError'. \"\n                        \"Consider explicitly converting the Series \"\n                        \"to an array with '.array' first.\"\n                    )\n                    warnings.warn(msg.format(ufunc), FutureWarning, stacklevel=3)\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)\n\n        if type(result) is tuple:\n            # multiple return values\n            return tuple(construct_return(x) for x in result)\n        elif method == \"at\":\n            # no return value\n            return None\n        else:\n            return construct_return(result)",
        "begin_line": 677,
        "end_line": 760,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.construct_return#736",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.construct_return(result)",
        "snippet": "        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    msg = (\n                        \"outer method for ufunc {} is not implemented on \"\n                        \"pandas objects. Returning an ndarray, but in the \"\n                        \"future this will raise a 'NotImplementedError'. \"\n                        \"Consider explicitly converting the Series \"\n                        \"to an array with '.array' first.\"\n                    )\n                    warnings.warn(msg.format(ufunc), FutureWarning, stacklevel=3)\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)",
        "begin_line": 736,
        "end_line": 751,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#762",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarary`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discared with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if (\n            dtype is None\n            and isinstance(self.array, ABCDatetimeArray)\n            and getattr(self.dtype, \"tz\", None)\n        ):\n            msg = (\n                \"Converting timezone-aware DatetimeArray to timezone-naive \"\n                \"ndarray with 'datetime64[ns]' dtype. In the future, this \"\n                \"will return an ndarray with 'object' dtype where each \"\n                \"element is a 'pandas.Timestamp' with the correct 'tz'.\\n\\t\"\n                \"To accept the future behavior, pass 'dtype=object'.\\n\\t\"\n                \"To keep the old behavior, pass 'dtype=\\\"datetime64[ns]\\\"'.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n            dtype = \"M8[ns]\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 762,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004219409282700422,
            "pseudo_dstar_susp": 0.0004219409282700422,
            "pseudo_tarantula_susp": 0.00048828125,
            "pseudo_op2_susp": 0.0004219409282700422,
            "pseudo_barinel_susp": 0.00048828125
        }
    },
    {
        "name": "pandas.core.series.Series.axes#907",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.axes(self)",
        "snippet": "    def axes(self):\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]",
        "begin_line": 907,
        "end_line": 911,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.take#917",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.take(self, indices, axis=0, is_copy=False, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, is_copy=False, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n\n        indices = ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n\n        if is_categorical_dtype(self):\n            # https://github.com/pandas-dev/pandas/issues/20664\n            # TODO: remove when the default Categorical.take behavior changes\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n            kwargs = {\"allow_fill\": False}\n        else:\n            kwargs = {}\n        new_values = self._values.take(indices, **kwargs)\n\n        result = self._constructor(\n            new_values, index=new_index, fastpath=True\n        ).__finalize__(self)\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result",
        "begin_line": 917,
        "end_line": 941,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#943",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n\n        # dispatch to the values if we need\n        values = self._values\n        if isinstance(values, np.ndarray):\n            return libindex.get_value_at(values, i)\n        else:\n            return values[i]",
        "begin_line": 943,
        "end_line": 961,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._slice#963",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._slice(self, slobj: slice, axis: int=0, kind=None)",
        "snippet": "    def _slice(self, slobj: slice, axis: int = 0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj, kind=kind or \"getitem\")\n        return self._get_values(slobj)",
        "begin_line": 963,
        "end_line": 965,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#967",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if loc of the key isn't scalar here\n                    # otherwise have inline ndarray/lists\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(\n                                result, index=[key] * len(result), dtype=self.dtype\n                            ).__finalize__(self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key, kind=\"getitem\")\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)",
        "begin_line": 967,
        "end_line": 1009,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#1011",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            return self._slice(key)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            try:\n                return self._get_values_tuple(key)\n            except ValueError:\n                # if we don't have a MultiIndex, we may still be able to handle\n                #  a 1-tuple.  see test_1tuple_without_multiindex\n                if len(key) == 1:\n                    key = key[0]\n                    if isinstance(key, slice):\n                        return self._get_values(key)\n                raise\n\n        if not isinstance(key, (list, np.ndarray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            if self.index.is_integer() or self.index.is_floating():\n                return self.loc[key]\n            else:\n                return self._get_values(key)\n        elif key_type == \"boolean\":\n            return self._get_values(key)\n\n        if isinstance(key, (list, tuple)):\n            # TODO: de-dup with tuple case handled above?\n            # handle the dup indexing case GH#4246\n            if len(key) == 1 and isinstance(key[0], slice):\n                # [slice(0, 5, None)] will break if you convert to ndarray,\n                # e.g. as requested by np.median\n                # FIXME: hack\n                return self._get_values(key)\n\n            return self.loc[key]\n\n        return self.reindex(key)",
        "begin_line": 1011,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#1075",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(\n                self._data.get_slice(indexer), fastpath=True\n            ).__finalize__(self)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 1075,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.58718134510243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__setitem__#1102",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        try:\n            self._set_with_engine(key, value)\n        except com.SettingWithCopyError:\n            raise\n        except (KeyError, ValueError):\n            values = self._values\n            if is_integer(key) and not self.index.inferred_type == \"integer\":\n                values[key] = value\n            elif key is Ellipsis:\n                self[:] = value\n            else:\n                self.loc[key] = value\n\n        except TypeError as e:\n            if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n                raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n            # python 3 type errors should be raised\n            if _is_unorderable_exception(e):\n                raise IndexError(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n\n            self._set_with(key, value)\n\n        if cacher_needs_updating:\n            self._maybe_update_cacher()",
        "begin_line": 1102,
        "end_line": 1138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._set_with_engine#1140",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with_engine(self, key, value)",
        "snippet": "    def _set_with_engine(self, key, value):\n        values = self._values\n        if is_extension_array_dtype(values.dtype):\n            # The cython indexing engine does not support ExtensionArrays.\n            values[self.index.get_loc(key)] = value\n            return\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return",
        "begin_line": 1140,
        "end_line": 1151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._set_with#1153",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with(self, key, value)",
        "snippet": "    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._set_values(indexer, value)\n\n        elif is_scalar(key) and not is_integer(key) and key not in self.index:\n            # GH#12862 adding an new key to the Series\n            # Note: have to exclude integers because that is ambiguously\n            #  position-based\n            self.loc[key] = value\n            return\n\n        else:\n            if isinstance(key, tuple):\n                try:\n                    # TODO: no test cases that get here\n                    self._set_values(key, value)\n                except Exception:\n                    pass\n\n            if is_scalar(key):\n                key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n                key = key._values\n            else:\n                key_type = lib.infer_dtype(key, skipna=False)\n\n            if key_type == \"integer\":\n                if self.index.inferred_type == \"integer\":\n                    self._set_labels(key, value)\n                else:\n                    return self._set_values(key, value)\n            elif key_type == \"boolean\":\n                self._set_values(key.astype(np.bool_), value)\n            else:\n                self._set_labels(key, value)",
        "begin_line": 1153,
        "end_line": 1191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._set_values#1201",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_values(self, key, value)",
        "snippet": "    def _set_values(self, key, value):\n        if isinstance(key, Series):\n            key = key._values\n        self._data = self._data.setitem(indexer=key, value=value)\n        self._maybe_update_cacher()",
        "begin_line": 1201,
        "end_line": 1205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._is_mixed_type#1244",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        return False",
        "begin_line": 1244,
        "end_line": 1245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.reset_index#1304",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reset_index(self, level=None, drop=False, name=None, inplace=False)",
        "snippet": "    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Generate a new DataFrame or Series with the index reset.\n\n        This is useful when the index needs to be treated as a column, or\n        when the index is meaningless and needs to be reset to the default\n        before another operation.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default optional\n            For a Series with a MultiIndex, only remove the specified levels\n            from the index. Removes all levels by default.\n        drop : bool, default False\n            Just reset the index, without inserting it as a column in\n            the new DataFrame.\n        name : object, optional\n            The name to use for the column containing the original Series\n            values. Uses ``self.name`` by default. This argument is ignored\n            when `drop` is True.\n        inplace : bool, default False\n            Modify the Series in place (do not create a new object).\n\n        Returns\n        -------\n        Series or DataFrame\n            When `drop` is False (the default), a DataFrame is returned.\n            The newly created columns will come first in the DataFrame,\n            followed by the original Series values.\n            When `drop` is True, a `Series` is returned.\n            In either case, if ``inplace=True``, no value is returned.\n\n        See Also\n        --------\n        DataFrame.reset_index: Analogous function for DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4], name='foo',\n        ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n        Generate a DataFrame with default index.\n\n        >>> s.reset_index()\n          idx  foo\n        0   a    1\n        1   b    2\n        2   c    3\n        3   d    4\n\n        To specify the name of the new column use `name`.\n\n        >>> s.reset_index(name='values')\n          idx  values\n        0   a       1\n        1   b       2\n        2   c       3\n        3   d       4\n\n        To generate a new Series with the default set `drop` to True.\n\n        >>> s.reset_index(drop=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        To update the Series in place, without generating a new one\n        set `inplace` to True. Note that it also requires ``drop=True``.\n\n        >>> s.reset_index(inplace=True, drop=True)\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        The `level` parameter is interesting for Series with a multi-level\n        index.\n\n        >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n        ...           np.array(['one', 'two', 'one', 'two'])]\n        >>> s2 = pd.Series(\n        ...     range(4), name='foo',\n        ...     index=pd.MultiIndex.from_arrays(arrays,\n        ...                                     names=['a', 'b']))\n\n        To remove a specific level from the Index, use `level`.\n\n        >>> s2.reset_index(level='a')\n               a  foo\n        b\n        one  bar    0\n        two  bar    1\n        one  baz    2\n        two  baz    3\n\n        If `level` is not set, all levels are removed from the Index.\n\n        >>> s2.reset_index()\n             a    b  foo\n        0  bar  one    0\n        1  bar  two    1\n        2  baz  one    2\n        3  baz  two    3\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if drop:\n            new_index = ibase.default_index(len(self))\n            if level is not None:\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n\n            if inplace:\n                self.index = new_index\n                # set name if it was passed, otherwise, keep the previous name\n                self.name = name or self.name\n            else:\n                return self._constructor(\n                    self._values.copy(), index=new_index\n                ).__finalize__(self)\n        elif inplace:\n            raise TypeError(\n                \"Cannot reset_index inplace on a Series to create a DataFrame\"\n            )\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)",
        "begin_line": 1304,
        "end_line": 1436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.__repr__#1441",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        \"\"\"\n        Return a string representation for a particular Series.\n        \"\"\"\n        buf = StringIO(\"\")\n        width, height = get_terminal_size()\n        max_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.max_rows\")\n        )\n        min_rows = (\n            height\n            if get_option(\"display.max_rows\") == 0\n            else get_option(\"display.min_rows\")\n        )\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        self.to_string(\n            buf=buf,\n            name=self.name,\n            dtype=self.dtype,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            length=show_dimensions,\n        )\n        result = buf.getvalue()\n\n        return result",
        "begin_line": 1441,
        "end_line": 1469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.to_string#1471",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_string(self, buf=None, na_rep='NaN', float_format=None, header=True, index=True, length=False, dtype=False, name=False, max_rows=None, min_rows=None)",
        "snippet": "    def to_string(\n        self,\n        buf=None,\n        na_rep=\"NaN\",\n        float_format=None,\n        header=True,\n        index=True,\n        length=False,\n        dtype=False,\n        name=False,\n        max_rows=None,\n        min_rows=None,\n    ):\n        \"\"\"\n        Render a string representation of the Series.\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            Buffer to write to.\n        na_rep : str, optional\n            String representation of NaN to use, default 'NaN'.\n        float_format : one-parameter function, optional\n            Formatter function to apply to columns' elements if they are\n            floats, default None.\n        header : bool, default True\n            Add the Series header (index name).\n        index : bool, optional\n            Add index (row) labels, default True.\n        length : bool, default False\n            Add the Series length.\n        dtype : bool, default False\n            Add the Series dtype.\n        name : bool, default False\n            Add the Series name if not None.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        min_rows : int, optional\n            The number of rows to display in a truncated repr (when number\n            of rows is above `max_rows`).\n\n        Returns\n        -------\n        str or None\n            String representation of Series if ``buf=None``, otherwise None.\n        \"\"\"\n\n        formatter = fmt.SeriesFormatter(\n            self,\n            name=name,\n            length=length,\n            header=header,\n            index=index,\n            dtype=dtype,\n            na_rep=na_rep,\n            float_format=float_format,\n            min_rows=min_rows,\n            max_rows=max_rows,\n        )\n        result = formatter.to_string()\n\n        # catch contract violations\n        if not isinstance(result, str):\n            raise AssertionError(\n                \"result must be of type str, type\"\n                f\" of result is {repr(type(result).__name__)}\"\n            )\n\n        if buf is None:\n            return result\n        else:\n            try:\n                buf.write(result)\n            except AttributeError:\n                with open(buf, \"w\") as f:\n                    f.write(result)",
        "begin_line": 1471,
        "end_line": 1547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.keys#1587",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.keys(self)",
        "snippet": "    def keys(self):\n        \"\"\"\n        Return alias for index.\n\n        Returns\n        -------\n        Index\n            Index of the Series.\n        \"\"\"\n        return self.index",
        "begin_line": 1587,
        "end_line": 1596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.to_frame#1633",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_frame(self, name=None)",
        "snippet": "    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame.\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([\"a\", \"b\", \"c\"],\n        ...               name=\"vals\")\n        >>> s.to_frame()\n          vals\n        0    a\n        1    b\n        2    c\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df",
        "begin_line": 1633,
        "end_line": 1663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.count#1685",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.count(self, level=None)",
        "snippet": "    def count(self, level=None):\n        \"\"\"\n        Return number of non-NA/null observations in the Series.\n\n        Parameters\n        ----------\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a smaller Series.\n\n        Returns\n        -------\n        int or Series (if level specified)\n            Number of non-null values in the Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([0.0, 1.0, np.nan])\n        >>> s.count()\n        2\n        \"\"\"\n        if level is None:\n            return notna(self.array).sum()\n\n        if isinstance(level, str):\n            level = self.index._get_level_number(level)\n\n        lev = self.index.levels[level]\n        level_codes = np.array(self.index.codes[level], subok=False, copy=True)\n\n        mask = level_codes == -1\n        if mask.any():\n            level_codes[mask] = cnt = len(lev)\n            lev = lev.insert(cnt, lev._na_value)\n\n        obs = level_codes[notna(self.values)]\n        out = np.bincount(obs, minlength=len(lev) or None)\n        return self._constructor(out, index=lev, dtype=\"int64\").__finalize__(self)",
        "begin_line": 1685,
        "end_line": 1722,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.unique#1745",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.unique(self)",
        "snippet": "    def unique(self):\n        \"\"\"\n        Return unique values of Series object.\n\n        Uniques are returned in order of appearance. Hash table-based unique,\n        therefore does NOT sort.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            The unique values returned as a NumPy array. See Notes.\n\n        See Also\n        --------\n        unique : Top-level unique method for any 1-d array-like object.\n        Index.unique : Return Index with unique values from an Index object.\n\n        Notes\n        -----\n        Returns the unique values as a NumPy array. In case of an\n        extension-array backed Series, a new\n        :class:`~api.extensions.ExtensionArray` of that type with just\n        the unique values is returned. This includes\n\n            * Categorical\n            * Period\n            * Datetime with Timezone\n            * Interval\n            * Sparse\n            * IntegerNA\n\n        See Examples section.\n\n        Examples\n        --------\n        >>> pd.Series([2, 1, 3, 3], name='A').unique()\n        array([2, 1, 3])\n\n        >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n        array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n        >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n        ...            for _ in range(3)]).unique()\n        <DatetimeArray>\n        ['2016-01-01 00:00:00-05:00']\n        Length: 1, dtype: datetime64[ns, US/Eastern]\n\n        An unordered Categorical will return categories in the order of\n        appearance.\n\n        >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n        ...                          ordered=True)).unique()\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n        \"\"\"\n        result = super().unique()\n        return result",
        "begin_line": 1745,
        "end_line": 1807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.append#2519",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.append(self, to_append, ignore_index=False, verify_integrity=False)",
        "snippet": "    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n\n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n            Series to append with self.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n        verify_integrity : bool, default False\n            If True, raise Exception on creating index with duplicates.\n\n        Returns\n        -------\n        Series\n            Concatenated Series.\n\n        See Also\n        --------\n        concat : General function to concatenate DataFrame or Series objects.\n\n        Notes\n        -----\n        Iteratively appending to a Series can be more computationally intensive\n        than a single concatenate. A better solution is to append values to a\n        list and then concatenate the list with the original Series all at\n        once.\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `ignore_index` set to True:\n\n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `verify_integrity` set to True:\n\n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        if isinstance(to_append, (list, tuple)):\n            to_concat = [self]\n            to_concat.extend(to_append)\n        else:\n            to_concat = [self, to_append]\n        return concat(\n            to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity\n        )",
        "begin_line": 2519,
        "end_line": 2598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.sort_values#2831",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_values(self, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
        "snippet": "    def sort_values(\n        self,\n        axis=0,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n    ):\n        \"\"\"\n        Sort by the values.\n\n        Sort a Series in ascending or descending order by some\n        criterion.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            Axis to direct sorting. The value 'index' is accepted for\n            compatibility with DataFrame.sort_values.\n        ascending : bool, default True\n            If True, sort values in ascending order, otherwise descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information. 'mergesort' is the only stable  algorithm.\n        na_position : {'first' or 'last'}, default 'last'\n            Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n            the end.\n\n        Returns\n        -------\n        Series\n            Series ordered by values.\n\n        See Also\n        --------\n        Series.sort_index : Sort by the Series indices.\n        DataFrame.sort_values : Sort DataFrame by the values along either axis.\n        DataFrame.sort_index : Sort DataFrame by indices.\n\n        Examples\n        --------\n        >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n        >>> s\n        0     NaN\n        1     1.0\n        2     3.0\n        3     10.0\n        4     5.0\n        dtype: float64\n\n        Sort values ascending order (default behaviour)\n\n        >>> s.sort_values(ascending=True)\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        0     NaN\n        dtype: float64\n\n        Sort values descending order\n\n        >>> s.sort_values(ascending=False)\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values inplace\n\n        >>> s.sort_values(ascending=False, inplace=True)\n        >>> s\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values putting NAs first\n\n        >>> s.sort_values(na_position='first')\n        0     NaN\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        dtype: float64\n\n        Sort a series of strings\n\n        >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n        >>> s\n        0    z\n        1    b\n        2    d\n        3    a\n        4    c\n        dtype: object\n\n        >>> s.sort_values()\n        3    a\n        1    b\n        4    c\n        2    d\n        0    z\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n\n        # GH 5856/5853\n        if inplace and self._is_cached:\n            raise ValueError(\n                \"This Series is a view of some other array, to \"\n                \"sort in-place you must create a copy\"\n            )\n\n        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")\n\n        arr = self._values\n        sortedIdx = np.empty(len(self), dtype=np.int32)\n\n        bad = isna(arr)\n\n        good = ~bad\n        idx = ibase.default_index(len(self))\n\n        argsorted = _try_kind_sort(arr[good])\n\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError(\n                    f\"Length of ascending ({len(ascending)}) must be 1 for Series\"\n                )\n            ascending = ascending[0]\n\n        if not is_bool(ascending):\n            raise ValueError(\"ascending must be boolean\")\n\n        if not ascending:\n            argsorted = argsorted[::-1]\n\n        if na_position == \"last\":\n            n = good.sum()\n            sortedIdx[:n] = idx[good][argsorted]\n            sortedIdx[n:] = idx[bad]\n        elif na_position == \"first\":\n            n = bad.sum()\n            sortedIdx[n:] = idx[good][argsorted]\n            sortedIdx[:n] = idx[bad]\n        else:\n            raise ValueError(\"invalid na_position: {!r}\".format(na_position))\n\n        result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)",
        "begin_line": 2831,
        "end_line": 3003,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._try_kind_sort#2954",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._try_kind_sort(arr)",
        "snippet": "        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")",
        "begin_line": 2954,
        "end_line": 2962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.sort_index#3005",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
        "snippet": "    def sort_index(\n        self,\n        axis=0,\n        level=None,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n        sort_remaining=True,\n    ):\n        \"\"\"\n        Sort Series by index labels.\n\n        Returns a new Series sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original series and returns None.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            Axis to direct sorting. This can only be 0 for Series.\n        level : int, optional\n            If not None, sort on values in specified index level(s).\n        ascending : bool, default true\n            Sort ascending vs. descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information.  'mergesort' is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n\n        Returns\n        -------\n        Series\n            The original Series sorted by the labels.\n\n        See Also\n        --------\n        DataFrame.sort_index: Sort DataFrame by the index.\n        DataFrame.sort_values: Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n        >>> s.sort_index()\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        Sort Descending\n\n        >>> s.sort_index(ascending=False)\n        4    d\n        3    a\n        2    b\n        1    c\n        dtype: object\n\n        Sort Inplace\n\n        >>> s.sort_index(inplace=True)\n        >>> s\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        By default NaNs are put at the end, but use `na_position` to place\n        them at the beginning\n\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n        >>> s.sort_index(na_position='first')\n        NaN     d\n         1.0    c\n         2.0    b\n         3.0    a\n        dtype: object\n\n        Specify index level to sort\n\n        >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n        ...                     'baz', 'baz', 'bar', 'bar']),\n        ...           np.array(['two', 'one', 'two', 'one',\n        ...                     'two', 'one', 'two', 'one'])]\n        >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n        >>> s.sort_index(level=1)\n        bar  one    8\n        baz  one    6\n        foo  one    4\n        qux  one    2\n        bar  two    7\n        baz  two    5\n        foo  two    3\n        qux  two    1\n        dtype: int64\n\n        Does not sort by remaining levels when sorting by levels\n\n        >>> s.sort_index(level=1, sort_remaining=False)\n        qux  one    2\n        foo  one    4\n        baz  one    6\n        bar  one    8\n        qux  two    1\n        foo  two    3\n        baz  two    5\n        bar  two    7\n        dtype: int64\n        \"\"\"\n        # TODO: this can be combined with DataFrame.sort_index impl as\n        # almost identical\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n        index = self.index\n\n        if level is not None:\n            new_index, indexer = index.sortlevel(\n                level, ascending=ascending, sort_remaining=sort_remaining\n            )\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n\n            labels = index._sort_levels_monotonic()\n            indexer = lexsort_indexer(\n                labels._get_codes_for_sorting(),\n                orders=ascending,\n                na_position=na_position,\n            )\n        else:\n            from pandas.core.sorting import nargsort\n\n            # Check monotonic-ness before sort an index\n            # GH11080\n            if (ascending and index.is_monotonic_increasing) or (\n                not ascending and index.is_monotonic_decreasing\n            ):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n\n            indexer = nargsort(\n                index, kind=kind, ascending=ascending, na_position=na_position\n            )\n\n        indexer = ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)",
        "begin_line": 3005,
        "end_line": 3172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.unstack#3508",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.unstack(self, level=-1, fill_value=None)",
        "snippet": "    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default last level\n            Level(s) to unstack, can pass level name.\n        fill_value : scalar value, default None\n            Value to use when replacing NaN values.\n\n        Returns\n        -------\n        DataFrame\n            Unstacked Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4],\n        ...               index=pd.MultiIndex.from_product([['one', 'two'],\n        ...                                                 ['a', 'b']]))\n        >>> s\n        one  a    1\n             b    2\n        two  a    3\n             b    4\n        dtype: int64\n\n        >>> s.unstack(level=-1)\n             a  b\n        one  1  2\n        two  3  4\n\n        >>> s.unstack(level=0)\n           one  two\n        a    1    3\n        b    2    4\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n\n        return unstack(self, level, fill_value)",
        "begin_line": 3508,
        "end_line": 3549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.map#3554",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.map(self, arg, na_action=None)",
        "snippet": "    def map(self, arg, na_action=None):\n        \"\"\"\n        Map values of Series according to input correspondence.\n\n        Used for substituting each value in a Series with another value,\n        that may be derived from a function, a ``dict`` or\n        a :class:`Series`.\n\n        Parameters\n        ----------\n        arg : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}, default None\n            If 'ignore', propagate NaN values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        Series\n            Same index as caller.\n\n        See Also\n        --------\n        Series.apply : For applying more complex functions on a Series.\n        DataFrame.apply : Apply a function row-/column-wise.\n        DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n        Notes\n        -----\n        When ``arg`` is a dictionary, values in Series that are not in the\n        dictionary (as keys) are converted to ``NaN``. However, if the\n        dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n        provides a method for default values), then this default is used\n        rather than ``NaN``.\n\n        Examples\n        --------\n        >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n        >>> s\n        0      cat\n        1      dog\n        2      NaN\n        3   rabbit\n        dtype: object\n\n        ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n        in the ``dict`` are converted to ``NaN``, unless the dict has a default\n        value (e.g. ``defaultdict``):\n\n        >>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n        0   kitten\n        1    puppy\n        2      NaN\n        3      NaN\n        dtype: object\n\n        It also accepts a function:\n\n        >>> s.map('I am a {}'.format)\n        0       I am a cat\n        1       I am a dog\n        2       I am a nan\n        3    I am a rabbit\n        dtype: object\n\n        To avoid applying the function to missing values (and keep them as\n        ``NaN``) ``na_action='ignore'`` can be used:\n\n        >>> s.map('I am a {}'.format, na_action='ignore')\n        0     I am a cat\n        1     I am a dog\n        2            NaN\n        3  I am a rabbit\n        dtype: object\n        \"\"\"\n        new_values = super()._map_values(arg, na_action=na_action)\n        return self._constructor(new_values, index=self.index).__finalize__(self)",
        "begin_line": 3554,
        "end_line": 3630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.apply#3718",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.apply(self, func, convert_dtype=True, args=(), **kwds)",
        "snippet": "    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series.\n\n        Can be ufunc (a NumPy function that applies to the entire Series)\n        or a Python function that only works on single values.\n\n        Parameters\n        ----------\n        func : function\n            Python function or NumPy ufunc to apply.\n        convert_dtype : bool, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object.\n        args : tuple\n            Positional arguments passed to func after the series value.\n        **kwds\n            Additional keyword arguments passed to func.\n\n        Returns\n        -------\n        Series or DataFrame\n            If func returns a Series object the result will be a DataFrame.\n\n        See Also\n        --------\n        Series.map: For element-wise operations.\n        Series.agg: Only perform aggregating type operations.\n        Series.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n        Create a series with typical summer temperatures for each city.\n\n        >>> s = pd.Series([20, 21, 12],\n        ...               index=['London', 'New York', 'Helsinki'])\n        >>> s\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x ** 2\n        >>> s.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> s.apply(lambda x: x ** 2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x - custom_value\n\n        >>> s.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x += kwargs[month]\n        ...     return x\n\n        >>> s.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> s.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype, index=self.index).__finalize__(\n                self\n            )\n\n        # dispatch to agg\n        if isinstance(func, (list, dict)):\n            return self.aggregate(func, *args, **kwds)\n\n        # if we are a string, try to dispatch\n        if isinstance(func, str):\n            return self._try_aggregate_string_function(func, *args, **kwds)\n\n        # handle ufuncs and lambdas\n        if kwds or args and not isinstance(func, np.ufunc):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        with np.errstate(all=\"ignore\"):\n            if isinstance(f, np.ufunc):\n                return f(self)\n\n            # row-wise access\n            if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n                # GH#23179 some EAs do not have `map`\n                mapped = self._values.map(f)\n            else:\n                values = self.astype(object).values\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n\n        if len(mapped) and isinstance(mapped[0], Series):\n            # GH 25959 use pd.array instead of tolist\n            # so extension arrays can be used\n            return self._constructor_expanddim(pd.array(mapped), index=self.index)\n        else:\n            return self._constructor(mapped, index=self.index).__finalize__(self)",
        "begin_line": 3718,
        "end_line": 3854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.389261744966443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#3856",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, Categorical):\n            # TODO deprecate numeric_only argument for Categorical and use\n            # skipna as well, see GH25303\n            return delegate._reduce(name, numeric_only=numeric_only, **kwds)\n        elif isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif is_datetime64_dtype(delegate):\n            # use DatetimeIndex implementation to handle skipna correctly\n            delegate = DatetimeIndex(delegate)\n        elif is_timedelta64_dtype(delegate) and hasattr(TimedeltaIndex, name):\n            # use TimedeltaIndex to handle skipna correctly\n            # TODO: remove hasattr check after TimedeltaIndex has `std` method\n            delegate = TimedeltaIndex(delegate)\n\n        # dispatch to numpy arrays\n        elif isinstance(delegate, np.ndarray):\n            if numeric_only:\n                raise NotImplementedError(\n                    \"Series.{0} does not implement numeric_only.\".format(name)\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)\n\n        # TODO(EA) dispatch to Index\n        # remove once all internals extension types are\n        # moved to ExtensionArrays\n        return delegate._reduce(\n            op=op,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            filter_type=filter_type,\n            **kwds,\n        )",
        "begin_line": 3856,
        "end_line": 3906,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005927682276229994,
            "pseudo_dstar_susp": 0.0005192107995846313,
            "pseudo_tarantula_susp": 0.000782472613458529,
            "pseudo_op2_susp": 0.0005192107995846313,
            "pseudo_barinel_susp": 0.000782472613458529
        }
    },
    {
        "name": "pandas.core.series.Series._needs_reindex_multi#3919",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False",
        "begin_line": 3919,
        "end_line": 3924,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.923769300006924e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#4019",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 4019,
        "end_line": 4020,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000594883997620464,
            "pseudo_dstar_susp": 0.0005202913631633715,
            "pseudo_tarantula_susp": 0.0007849293563579278,
            "pseudo_op2_susp": 0.0005202913631633715,
            "pseudo_barinel_susp": 0.0007849293563579278
        }
    },
    {
        "name": "pandas.core.series.Series.fillna#4134",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n        **kwargs,\n    ):\n        return super().fillna(\n            value=value,\n            method=method,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            downcast=downcast,\n            **kwargs,\n        )",
        "begin_line": 4134,
        "end_line": 4152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.isin#4233",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isin(self, values)",
        "snippet": "    def isin(self, values):\n        \"\"\"\n        Check whether `values` are contained in Series.\n\n        Return a boolean Series showing whether each element in the Series\n        matches an element in the passed sequence of `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n        Returns\n        -------\n        Series\n            Series of booleans indicating if each element is in values.\n\n        Raises\n        ------\n        TypeError\n          * If `values` is a string\n\n        See Also\n        --------\n        DataFrame.isin : Equivalent method on DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'], name='animal')\n        >>> s.isin(['cow', 'lama'])\n        0     True\n        1     True\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        0     True\n        1    False\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n        \"\"\"\n        result = algorithms.isin(self, values)\n        return self._constructor(result, index=self.index).__finalize__(self)",
        "begin_line": 4233,
        "end_line": 4287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.isna#4365",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isna(self)",
        "snippet": "    def isna(self):\n        return super().isna()",
        "begin_line": 4365,
        "end_line": 4366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00078064012490242,
            "pseudo_dstar_susp": 0.0005488474204171241,
            "pseudo_tarantula_susp": 0.0008532423208191126,
            "pseudo_op2_susp": 0.0005488474204171241,
            "pseudo_barinel_susp": 0.0008532423208191126
        }
    },
    {
        "name": "pandas.core.series.Series.notna#4373",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.notna(self)",
        "snippet": "    def notna(self):\n        return super().notna()",
        "begin_line": 4373,
        "end_line": 4374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.series.Series.dropna#4380",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dropna(self, axis=0, inplace=False, how=None)",
        "snippet": "    def dropna(self, axis=0, inplace=False, how=None):\n        \"\"\"\n        Return a new Series with missing values removed.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            There is only one axis to drop values from.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        how : str, optional\n            Not in use. Kept for compatibility.\n\n        Returns\n        -------\n        Series\n            Series with NA entries dropped from it.\n\n        See Also\n        --------\n        Series.isna: Indicate missing values.\n        Series.notna : Indicate existing (non-missing) values.\n        Series.fillna : Replace missing values.\n        DataFrame.dropna : Drop rows or columns which contain NA values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1., 2., np.nan])\n        >>> ser\n        0    1.0\n        1    2.0\n        2    NaN\n        dtype: float64\n\n        Drop NA values from a Series.\n\n        >>> ser.dropna()\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Keep the Series with valid entries in the same variable.\n\n        >>> ser.dropna(inplace=True)\n        >>> ser\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Empty strings are not considered NA values. ``None`` is considered an\n        NA value.\n\n        >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n        >>> ser\n        0       NaN\n        1         2\n        2       NaT\n        3\n        4      None\n        5    I stay\n        dtype: object\n        >>> ser.dropna()\n        1         2\n        3\n        5    I stay\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis or 0)\n\n        if self._can_hold_na:\n            result = remove_na_arraylike(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        else:\n            if inplace:\n                # do nothing\n                pass\n            else:\n                return self.copy()",
        "begin_line": 4380,
        "end_line": 4466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.frame_apply#24",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply",
        "signature": "pandas.core.apply.frame_apply(obj: 'DataFrame', func, axis=0, raw: bool=False, result_type=None, ignore_failures: bool=False, args=None, kwds=None)",
        "snippet": "def frame_apply(\n    obj: \"DataFrame\",\n    func,\n    axis=0,\n    raw: bool = False,\n    result_type=None,\n    ignore_failures: bool = False,\n    args=None,\n    kwds=None,\n):\n    \"\"\" construct and return a row or column based frame apply object \"\"\"\n\n    axis = obj._get_axis_number(axis)\n    klass: Type[FrameApply]\n    if axis == 0:\n        klass = FrameRowApply\n    elif axis == 1:\n        klass = FrameColumnApply\n\n    return klass(\n        obj,\n        func,\n        raw=raw,\n        result_type=result_type,\n        ignore_failures=ignore_failures,\n        args=args,\n        kwds=kwds,\n    )",
        "begin_line": 24,
        "end_line": 51,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_index#62",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        pass",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.result_columns#67",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        pass",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.series_generator#72",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.series_generator(self)",
        "snippet": "    def series_generator(self) -> Iterator[\"Series\"]:\n        pass",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results_for_axis#76",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        pass",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.__init__#83",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.__init__(self, obj: 'DataFrame', func, raw: bool, result_type, ignore_failures: bool, args, kwds)",
        "snippet": "    def __init__(\n        self,\n        obj: \"DataFrame\",\n        func,\n        raw: bool,\n        result_type,\n        ignore_failures: bool,\n        args,\n        kwds,\n    ):\n        self.obj = obj\n        self.raw = raw\n        self.ignore_failures = ignore_failures\n        self.args = args or ()\n        self.kwds = kwds or {}\n\n        if result_type not in [None, \"reduce\", \"broadcast\", \"expand\"]:\n            raise ValueError(\n                \"invalid value for result_type, must be one \"\n                \"of {None, 'reduce', 'broadcast', 'expand'}\"\n            )\n\n        self.result_type = result_type\n\n        # curry if needed\n        if (kwds or args) and not isinstance(func, (np.ufunc, str)):\n\n            def f(x):\n                return func(x, *args, **kwds)\n\n        else:\n            f = func\n\n        self.f = f",
        "begin_line": 83,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.f#110",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.f(x)",
        "snippet": "            def f(x):\n                return func(x, *args, **kwds)",
        "begin_line": 110,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.res_columns#119",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.res_columns(self)",
        "snippet": "    def res_columns(self) -> \"Index\":\n        return self.result_columns",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.columns#123",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.columns(self)",
        "snippet": "    def columns(self) -> \"Index\":\n        return self.obj.columns",
        "begin_line": 123,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.index#127",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.index(self)",
        "snippet": "    def index(self) -> \"Index\":\n        return self.obj.index",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.values#131",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.values(self)",
        "snippet": "    def values(self):\n        return self.obj.values",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.dtypes#135",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.dtypes(self)",
        "snippet": "    def dtypes(self) -> \"Series\":\n        return self.obj.dtypes",
        "begin_line": 135,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.agg_axis#139",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.agg_axis(self)",
        "snippet": "    def agg_axis(self) -> \"Index\":\n        return self.obj._get_agg_axis(self.axis)",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.get_result#142",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.get_result(self)",
        "snippet": "    def get_result(self):\n        \"\"\" compute the results \"\"\"\n\n        # dispatch to agg\n        if is_list_like(self.f) or is_dict_like(self.f):\n            return self.obj.aggregate(self.f, axis=self.axis, *self.args, **self.kwds)\n\n        # all empty\n        if len(self.columns) == 0 and len(self.index) == 0:\n            return self.apply_empty_result()\n\n        # string dispatch\n        if isinstance(self.f, str):\n            # Support for `frame.transform('method')`\n            # Some methods (shift, etc.) require the axis argument, others\n            # don't, so inspect and insert if necessary.\n            func = getattr(self.obj, self.f)\n            sig = inspect.getfullargspec(func)\n            if \"axis\" in sig.args:\n                self.kwds[\"axis\"] = self.axis\n            return func(*self.args, **self.kwds)\n\n        # ufunc\n        elif isinstance(self.f, np.ufunc):\n            with np.errstate(all=\"ignore\"):\n                results = self.obj._data.apply(\"apply\", func=self.f)\n            return self.obj._constructor(\n                data=results, index=self.index, columns=self.columns, copy=False\n            )\n\n        # broadcasting\n        if self.result_type == \"broadcast\":\n            return self.apply_broadcast(self.obj)\n\n        # one axis empty\n        elif not all(self.obj.shape):\n            return self.apply_empty_result()\n\n        # raw\n        elif self.raw and not self.obj._is_mixed_type:\n            return self.apply_raw()\n\n        return self.apply_standard()",
        "begin_line": 142,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_empty_result#186",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_empty_result(self)",
        "snippet": "    def apply_empty_result(self):\n        \"\"\"\n        we have an empty result; at least 1 axis is 0\n\n        we will try to apply the function to an empty\n        series in order to see if this is a reduction function\n        \"\"\"\n\n        # we are not asked to reduce or infer reduction\n        # so just return a copy of the existing object\n        if self.result_type not in [\"reduce\", None]:\n            return self.obj.copy()\n\n        # we may need to infer\n        should_reduce = self.result_type == \"reduce\"\n\n        from pandas import Series\n\n        if not should_reduce:\n            try:\n                r = self.f(Series([]))\n            except Exception:\n                pass\n            else:\n                should_reduce = not isinstance(r, Series)\n\n        if should_reduce:\n            if len(self.agg_axis):\n                r = self.f(Series([]))\n            else:\n                r = np.nan\n\n            return self.obj._constructor_sliced(r, index=self.agg_axis)\n        else:\n            return self.obj.copy()",
        "begin_line": 186,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_raw#222",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_raw(self)",
        "snippet": "    def apply_raw(self):\n        \"\"\" apply to the values as a numpy array \"\"\"\n        try:\n            result = libreduction.compute_reduction(self.values, self.f, axis=self.axis)\n        except ValueError as err:\n            if \"Function does not reduce\" not in str(err):\n                # catch only ValueError raised intentionally in libreduction\n                raise\n            # We expect np.apply_along_axis to give a two-dimensional result, or\n            #  also raise.\n            result = np.apply_along_axis(self.f, self.axis, self.values)\n\n        # TODO: mixed type case\n        if result.ndim == 2:\n            return self.obj._constructor(result, index=self.index, columns=self.columns)\n        else:\n            return self.obj._constructor_sliced(result, index=self.agg_axis)",
        "begin_line": 222,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_broadcast#240",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result_values = np.empty_like(target.values)\n\n        # axis which we want to compare compliance\n        result_compare = target.shape[0]\n\n        for i, col in enumerate(target.columns):\n            res = self.f(target[col])\n            ares = np.asarray(res).ndim\n\n            # must be a scalar or 1d\n            if ares > 1:\n                raise ValueError(\"too many dims to broadcast\")\n            elif ares == 1:\n\n                # must match return dim\n                if result_compare != len(res):\n                    raise ValueError(\"cannot broadcast result\")\n\n            result_values[:, i] = res\n\n        # we *always* preserve the original index / columns\n        result = self.obj._constructor(\n            result_values, index=target.index, columns=target.columns\n        )\n        return result",
        "begin_line": 240,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_standard#267",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_standard(self)",
        "snippet": "    def apply_standard(self):\n\n        # try to reduce first (by default)\n        # this only matters if the reduction in values is of different dtype\n        # e.g. if we want to apply to a SparseFrame, then can't directly reduce\n\n        # we cannot reduce using non-numpy dtypes,\n        # as demonstrated in gh-12244\n        if (\n            self.result_type in [\"reduce\", None]\n            and not self.dtypes.apply(is_extension_array_dtype).any()\n            # Disallow complex_internals since libreduction shortcut\n            #  cannot handle MultiIndex\n            and not isinstance(self.agg_axis, ABCMultiIndex)\n        ):\n\n            values = self.values\n            index = self.obj._get_axis(self.axis)\n            labels = self.agg_axis\n            empty_arr = np.empty(len(index), dtype=values.dtype)\n\n            # Preserve subclass for e.g. test_subclassed_apply\n            dummy = self.obj._constructor_sliced(\n                empty_arr, index=index, dtype=values.dtype\n            )\n\n            try:\n                result = libreduction.compute_reduction(\n                    values, self.f, axis=self.axis, dummy=dummy, labels=labels\n                )\n            except ValueError as err:\n                if \"Function does not reduce\" not in str(err):\n                    # catch only ValueError raised intentionally in libreduction\n                    raise\n            except TypeError:\n                # e.g. test_apply_ignore_failures we just ignore\n                if not self.ignore_failures:\n                    raise\n            except ZeroDivisionError:\n                # reached via numexpr; fall back to python implementation\n                pass\n            else:\n                return self.obj._constructor_sliced(result, index=labels)\n\n        # compute the result using the series generator\n        results, res_index = self.apply_series_generator()\n\n        # wrap results\n        return self.wrap_results(results, res_index)",
        "begin_line": 267,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.apply_series_generator#317",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.apply_series_generator(self)",
        "snippet": "    def apply_series_generator(self) -> Tuple[ResType, \"Index\"]:\n        series_gen = self.series_generator\n        res_index = self.result_index\n\n        i = None\n        keys = []\n        results = {}\n        if self.ignore_failures:\n            successes = []\n            for i, v in enumerate(series_gen):\n                try:\n                    results[i] = self.f(v)\n                except Exception:\n                    pass\n                else:\n                    keys.append(v.name)\n                    successes.append(i)\n\n            # so will work with MultiIndex\n            if len(successes) < len(res_index):\n                res_index = res_index.take(successes)\n\n        else:\n            for i, v in enumerate(series_gen):\n                results[i] = self.f(v)\n                keys.append(v.name)\n\n        return results, res_index",
        "begin_line": 317,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameApply.wrap_results#346",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameApply",
        "signature": "pandas.core.apply.FrameApply.wrap_results(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n\n        # see if we can infer the results\n        if len(results) > 0 and 0 in results and is_sequence(results[0]):\n\n            return self.wrap_results_for_axis(results, res_index)\n\n        # dict of scalars\n        result = self.obj._constructor_sliced(results)\n        result.index = res_index\n\n        return result",
        "begin_line": 346,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.apply_broadcast#365",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        return super().apply_broadcast(target)",
        "begin_line": 365,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.series_generator#369",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        return (self.obj._ixs(i, axis=1) for i in range(len(self.columns)))",
        "begin_line": 369,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_index#373",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.columns",
        "begin_line": 373,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.result_columns#377",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.index",
        "begin_line": 377,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameRowApply.wrap_results_for_axis#380",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameRowApply",
        "signature": "pandas.core.apply.FrameRowApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> \"DataFrame\":\n        \"\"\" return the results for the rows \"\"\"\n\n        result = self.obj._constructor(data=results)\n\n        if not isinstance(results[0], ABCSeries):\n            if len(result.index) == len(self.res_columns):\n                result.index = self.res_columns\n\n        if len(result.columns) == len(res_index):\n            result.columns = res_index\n\n        return result",
        "begin_line": 380,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.apply_broadcast#400",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.apply_broadcast(self, target: 'DataFrame')",
        "snippet": "    def apply_broadcast(self, target: \"DataFrame\") -> \"DataFrame\":\n        result = super().apply_broadcast(target.T)\n        return result.T",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.series_generator#405",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.series_generator(self)",
        "snippet": "    def series_generator(self):\n        constructor = self.obj._constructor_sliced\n        return (\n            constructor(arr, index=self.columns, name=name)\n            for i, (arr, name) in enumerate(zip(self.values, self.index))\n        )",
        "begin_line": 405,
        "end_line": 410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_index#413",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_index(self)",
        "snippet": "    def result_index(self) -> \"Index\":\n        return self.index",
        "begin_line": 413,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.result_columns#417",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.result_columns(self)",
        "snippet": "    def result_columns(self) -> \"Index\":\n        return self.columns",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis#420",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.wrap_results_for_axis(self, results: ResType, res_index: 'Index')",
        "snippet": "    def wrap_results_for_axis(\n        self, results: ResType, res_index: \"Index\"\n    ) -> Union[\"Series\", \"DataFrame\"]:\n        \"\"\" return the results for the columns \"\"\"\n        result: Union[\"Series\", \"DataFrame\"]\n\n        # we have requested to expand\n        if self.result_type == \"expand\":\n            result = self.infer_to_same_shape(results, res_index)\n\n        # we have a non-series and don't want inference\n        elif not isinstance(results[0], ABCSeries):\n            from pandas import Series\n\n            result = Series(results)\n            result.index = res_index\n\n        # we may want to infer results\n        else:\n            result = self.infer_to_same_shape(results, res_index)\n\n        return result",
        "begin_line": 420,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.apply.FrameColumnApply.infer_to_same_shape#443",
        "src_path": "pandas/core/apply.py",
        "class_name": "pandas.core.apply.FrameColumnApply",
        "signature": "pandas.core.apply.FrameColumnApply.infer_to_same_shape(self, results: ResType, res_index: 'Index')",
        "snippet": "    def infer_to_same_shape(self, results: ResType, res_index: \"Index\") -> \"DataFrame\":\n        \"\"\" infer the results to the same shape as the input object \"\"\"\n\n        result = self.obj._constructor(data=results)\n        result = result.T\n\n        # set the index\n        result.index = res_index\n\n        # infer dtypes\n        result = result.infer_objects()\n\n        return result",
        "begin_line": 443,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile.cut#30",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile.cut(x, bins, right: bool=True, labels=None, retbins: bool=False, precision: int=3, include_lowest: bool=False, duplicates: str='raise')",
        "snippet": "def cut(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    include_lowest: bool = False,\n    duplicates: str = \"raise\",\n):\n    \"\"\"\n    Bin values into discrete intervals.\n\n    Use `cut` when you need to segment and sort data values into bins. This\n    function is also useful for going from a continuous variable to a\n    categorical variable. For example, `cut` could convert ages to groups of\n    age ranges. Supports binning into an equal number of bins, or a\n    pre-specified array of bins.\n\n    Parameters\n    ----------\n    x : array-like\n        The input array to be binned. Must be 1-dimensional.\n    bins : int, sequence of scalars, or IntervalIndex\n        The criteria to bin by.\n\n        * int : Defines the number of equal-width bins in the range of `x`. The\n          range of `x` is extended by .1% on each side to include the minimum\n          and maximum values of `x`.\n        * sequence of scalars : Defines the bin edges allowing for non-uniform\n          width. No extension of the range of `x` is done.\n        * IntervalIndex : Defines the exact bins to be used. Note that\n          IntervalIndex for `bins` must be non-overlapping.\n\n    right : bool, default True\n        Indicates whether `bins` includes the rightmost edge or not. If\n        ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``\n        indicate (1,2], (2,3], (3,4]. This argument is ignored when\n        `bins` is an IntervalIndex.\n    labels : array or bool, optional\n        Specifies the labels for the returned bins. Must be the same length as\n        the resulting bins. If False, returns only integer indicators of the\n        bins. This affects the type of the output container (see below).\n        This argument is ignored when `bins` is an IntervalIndex.\n    retbins : bool, default False\n        Whether to return the bins or not. Useful when bins is provided\n        as a scalar.\n    precision : int, default 3\n        The precision at which to store and display the bins labels.\n    include_lowest : bool, default False\n        Whether the first interval should be left-inclusive or not.\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    out : Categorical, Series, or ndarray\n        An array-like object representing the respective bin for each value\n        of `x`. The type depends on the value of `labels`.\n\n        * True (default) : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are Interval dtype.\n\n        * sequence of scalars : returns a Series for Series `x` or a\n          Categorical for all other inputs. The values stored within\n          are whatever the type in the sequence is.\n\n        * False : returns an ndarray of integers.\n\n    bins : numpy.ndarray or IntervalIndex.\n        The computed or specified bins. Only returned when `retbins=True`.\n        For scalar or sequence `bins`, this is an ndarray with the computed\n        bins. If set `duplicates=drop`, `bins` will drop non-unique bin. For\n        an IntervalIndex `bins`, this is equal to `bins`.\n\n    See Also\n    --------\n    qcut : Discretize variable into equal-sized buckets based on rank\n        or based on sample quantiles.\n    Categorical : Array type for storing data that come from a\n        fixed set of values.\n    Series : One-dimensional array with axis labels (including time series).\n    IntervalIndex : Immutable Index implementing an ordered, sliceable set.\n\n    Notes\n    -----\n    Any NA values will be NA in the result. Out of bounds values will be NA in\n    the resulting Series or Categorical object.\n\n    Examples\n    --------\n    Discretize into three equal-sized bins.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)\n    ... # doctest: +ELLIPSIS\n    [(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)\n    ... # doctest: +ELLIPSIS\n    ([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...\n    Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...\n    array([0.994, 3.   , 5.   , 7.   ]))\n\n    Discovers the same bins, but assign them specific labels. Notice that\n    the returned Categorical's categories are `labels` and is ordered.\n\n    >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),\n    ...        3, labels=[\"bad\", \"medium\", \"good\"])\n    [bad, good, medium, medium, good, bad]\n    Categories (3, object): [bad < medium < good]\n\n    ``labels=False`` implies you just want the bins back.\n\n    >>> pd.cut([0, 1, 1, 2], bins=4, labels=False)\n    array([0, 1, 1, 3])\n\n    Passing a Series as an input returns a Series with categorical dtype:\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, 3)\n    ... # doctest: +ELLIPSIS\n    a    (1.992, 4.667]\n    b    (1.992, 4.667]\n    c    (4.667, 7.333]\n    d     (7.333, 10.0]\n    e     (7.333, 10.0]\n    dtype: category\n    Categories (3, interval[float64]): [(1.992, 4.667] < (4.667, ...\n\n    Passing a Series as an input returns a Series with mapping value.\n    It is used to map numerically to intervals based on bins.\n\n    >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),\n    ...               index=['a', 'b', 'c', 'd', 'e'])\n    >>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)\n    ... # doctest: +ELLIPSIS\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    4.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\n\n    Use `drop` optional when bins is not unique\n\n    >>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,\n    ...        right=False, duplicates='drop')\n    ... # doctest: +ELLIPSIS\n    (a    0.0\n     b    1.0\n     c    2.0\n     d    3.0\n     e    3.0\n     dtype: float64, array([0, 2, 4, 6, 8]))\n\n    Passing an IntervalIndex for `bins` results in those categories exactly.\n    Notice that values not covered by the IntervalIndex are set to NaN. 0\n    is to the left of the first bin (which is closed on the right), and 1.5\n    falls between two bins.\n\n    >>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])\n    >>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)\n    [NaN, (0, 1], NaN, (2, 3], (4, 5]]\n    Categories (3, interval[int64]): [(0, 1] < (2, 3] < (4, 5]]\n    \"\"\"\n    # NOTE: this binning code is changed a bit from histogram for var(x) == 0\n\n    # for handling the cut for datetime and timedelta objects\n    original = x\n    x = _preprocess_for_cut(x)\n    x, dtype = _coerce_to_type(x)\n\n    if not np.iterable(bins):\n        if is_scalar(bins) and bins < 1:\n            raise ValueError(\"`bins` should be a positive integer.\")\n\n        try:  # for array-like\n            sz = x.size\n        except AttributeError:\n            x = np.asarray(x)\n            sz = x.size\n\n        if sz == 0:\n            raise ValueError(\"Cannot cut empty array\")\n\n        rng = (nanops.nanmin(x), nanops.nanmax(x))\n        mn, mx = [mi + 0.0 for mi in rng]\n\n        if np.isinf(mn) or np.isinf(mx):\n            # GH 24314\n            raise ValueError(\n                \"cannot specify integer `bins` when input data contains infinity\"\n            )\n        elif mn == mx:  # adjust end points before binning\n            mn -= 0.001 * abs(mn) if mn != 0 else 0.001\n            mx += 0.001 * abs(mx) if mx != 0 else 0.001\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n        else:  # adjust end points after binning\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n            adj = (mx - mn) * 0.001  # 0.1% of the range\n            if right:\n                bins[0] -= adj\n            else:\n                bins[-1] += adj\n\n    elif isinstance(bins, IntervalIndex):\n        if bins.is_overlapping:\n            raise ValueError(\"Overlapping IntervalIndex is not accepted.\")\n\n    else:\n        if is_datetime64tz_dtype(bins):\n            bins = np.asarray(bins, dtype=_NS_DTYPE)\n        else:\n            bins = np.asarray(bins)\n        bins = _convert_bin_to_numeric_type(bins, dtype)\n\n        # GH 26045: cast to float64 to avoid an overflow\n        if (np.diff(bins.astype(\"float64\")) < 0).any():\n            raise ValueError(\"bins must increase monotonically.\")\n\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        right=right,\n        labels=labels,\n        precision=precision,\n        include_lowest=include_lowest,\n        dtype=dtype,\n        duplicates=duplicates,\n    )\n\n    return _postprocess_for_cut(fac, bins, retbins, dtype, original)",
        "begin_line": 30,
        "end_line": 266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile.qcut#269",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile.qcut(x, q, labels=None, retbins: bool=False, precision: int=3, duplicates: str='raise')",
        "snippet": "def qcut(\n    x,\n    q,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    duplicates: str = \"raise\",\n):\n    \"\"\"\n    Quantile-based discretization function.\n\n    Discretize variable into equal-sized buckets based on rank or based\n    on sample quantiles. For example 1000 values for 10 quantiles would\n    produce a Categorical object indicating quantile membership for each data point.\n\n    Parameters\n    ----------\n    x : 1d ndarray or Series\n    q : int or list-like of int\n        Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately\n        array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles.\n    labels : array or bool, default None\n        Used as labels for the resulting bins. Must be of the same length as\n        the resulting bins. If False, return only integer indicators of the\n        bins.\n    retbins : bool, optional\n        Whether to return the (bins, labels) or not. Can be useful if bins\n        is given as a scalar.\n    precision : int, optional\n        The precision at which to store and display the bins labels.\n    duplicates : {default 'raise', 'drop'}, optional\n        If bin edges are not unique, raise ValueError or drop non-uniques.\n\n    Returns\n    -------\n    out : Categorical or Series or array of integers if labels is False\n        The return type (Categorical or Series) depends on the input: a Series\n        of type category if input is a Series else Categorical. Bins are\n        represented as categories when categorical data is returned.\n    bins : ndarray of floats\n        Returned only if `retbins` is True.\n\n    Notes\n    -----\n    Out of bounds values will be NA in the resulting Categorical object\n\n    Examples\n    --------\n    >>> pd.qcut(range(5), 4)\n    ... # doctest: +ELLIPSIS\n    [(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]\n    Categories (4, interval[float64]): [(-0.001, 1.0] < (1.0, 2.0] ...\n\n    >>> pd.qcut(range(5), 3, labels=[\"good\", \"medium\", \"bad\"])\n    ... # doctest: +SKIP\n    [good, good, medium, bad, bad]\n    Categories (3, object): [good < medium < bad]\n\n    >>> pd.qcut(range(5), 4, labels=False)\n    array([0, 0, 1, 2, 3])\n    \"\"\"\n    original = x\n    x = _preprocess_for_cut(x)\n    x, dtype = _coerce_to_type(x)\n\n    if is_integer(q):\n        quantiles = np.linspace(0, 1, q + 1)\n    else:\n        quantiles = q\n    bins = algos.quantile(x, quantiles)\n    fac, bins = _bins_to_cuts(\n        x,\n        bins,\n        labels=labels,\n        precision=precision,\n        include_lowest=True,\n        dtype=dtype,\n        duplicates=duplicates,\n    )\n\n    return _postprocess_for_cut(fac, bins, retbins, dtype, original)",
        "begin_line": 269,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._bins_to_cuts#352",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._bins_to_cuts(x, bins, right: bool=True, labels=None, precision: int=3, include_lowest: bool=False, dtype=None, duplicates: str='raise')",
        "snippet": "def _bins_to_cuts(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    precision: int = 3,\n    include_lowest: bool = False,\n    dtype=None,\n    duplicates: str = \"raise\",\n):\n\n    if duplicates not in [\"raise\", \"drop\"]:\n        raise ValueError(\n            \"invalid value for 'duplicates' parameter, \"\n            \"valid options are: raise, drop\"\n        )\n\n    if isinstance(bins, IntervalIndex):\n        # we have a fast-path here\n        ids = bins.get_indexer(x)\n        result = Categorical.from_codes(ids, categories=bins, ordered=True)\n        return result, bins\n\n    unique_bins = algos.unique(bins)\n    if len(unique_bins) < len(bins) and len(bins) != 2:\n        if duplicates == \"raise\":\n            raise ValueError(\n                \"Bin edges must be unique: {bins!r}.\\nYou \"\n                \"can drop duplicate edges by setting \"\n                \"the 'duplicates' kwarg\".format(bins=bins)\n            )\n        else:\n            bins = unique_bins\n\n    side = \"left\" if right else \"right\"\n    ids = ensure_int64(bins.searchsorted(x, side=side))\n\n    if include_lowest:\n        ids[x == bins[0]] = 1\n\n    na_mask = isna(x) | (ids == len(bins)) | (ids == 0)\n    has_nas = na_mask.any()\n\n    if labels is not False:\n        if labels is None:\n            labels = _format_labels(\n                bins, precision, right=right, include_lowest=include_lowest, dtype=dtype\n            )\n        else:\n            if len(labels) != len(bins) - 1:\n                raise ValueError(\n                    \"Bin labels must be one fewer than the number of bin edges\"\n                )\n        if not is_categorical_dtype(labels):\n            labels = Categorical(labels, categories=labels, ordered=True)\n\n        np.putmask(ids, na_mask, 0)\n        result = algos.take_nd(labels, ids - 1)\n\n    else:\n        result = ids - 1\n        if has_nas:\n            result = result.astype(np.float64)\n            np.putmask(result, na_mask, np.nan)\n\n    return result, bins",
        "begin_line": 352,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._coerce_to_type#420",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._coerce_to_type(x)",
        "snippet": "def _coerce_to_type(x):\n    \"\"\"\n    if the passed data is of datetime/timedelta or bool type,\n    this method converts it to numeric so that cut or qcut method can\n    handle it\n    \"\"\"\n    dtype = None\n\n    if is_datetime64tz_dtype(x):\n        dtype = x.dtype\n    elif is_datetime64_dtype(x):\n        x = to_datetime(x)\n        dtype = np.dtype(\"datetime64[ns]\")\n    elif is_timedelta64_dtype(x):\n        x = to_timedelta(x)\n        dtype = np.dtype(\"timedelta64[ns]\")\n    elif is_bool_dtype(x):\n        # GH 20303\n        x = x.astype(np.int64)\n\n    if dtype is not None:\n        # GH 19768: force NaT to NaN during integer conversion\n        x = np.where(x.notna(), x.view(np.int64), np.nan)\n\n    return x, dtype",
        "begin_line": 420,
        "end_line": 444,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._convert_bin_to_numeric_type#447",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._convert_bin_to_numeric_type(bins, dtype)",
        "snippet": "def _convert_bin_to_numeric_type(bins, dtype):\n    \"\"\"\n    if the passed bin is of datetime/timedelta type,\n    this method converts it to integer\n\n    Parameters\n    ----------\n    bins : list-like of bins\n    dtype : dtype of data\n\n    Raises\n    ------\n    ValueError if bins are not of a compat dtype to dtype\n    \"\"\"\n    bins_dtype = infer_dtype(bins, skipna=False)\n    if is_timedelta64_dtype(dtype):\n        if bins_dtype in [\"timedelta\", \"timedelta64\"]:\n            bins = to_timedelta(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of timedelta64 dtype\")\n    elif is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if bins_dtype in [\"datetime\", \"datetime64\"]:\n            bins = to_datetime(bins).view(np.int64)\n        else:\n            raise ValueError(\"bins must be of datetime64 dtype\")\n\n    return bins",
        "begin_line": 447,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._convert_bin_to_datelike_type#476",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._convert_bin_to_datelike_type(bins, dtype)",
        "snippet": "def _convert_bin_to_datelike_type(bins, dtype):\n    \"\"\"\n    Convert bins to a DatetimeIndex or TimedeltaIndex if the original dtype is\n    datelike\n\n    Parameters\n    ----------\n    bins : list-like of bins\n    dtype : dtype of data\n\n    Returns\n    -------\n    bins : Array-like of bins, DatetimeIndex or TimedeltaIndex if dtype is\n           datelike\n    \"\"\"\n    if is_datetime64tz_dtype(dtype):\n        bins = to_datetime(bins.astype(np.int64), utc=True).tz_convert(dtype.tz)\n    elif is_datetime_or_timedelta_dtype(dtype):\n        bins = Index(bins.astype(np.int64), dtype=dtype)\n    return bins",
        "begin_line": 476,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._format_labels#498",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._format_labels(bins, precision: int, right: bool=True, include_lowest: bool=False, dtype=None)",
        "snippet": "def _format_labels(\n    bins, precision: int, right: bool = True, include_lowest: bool = False, dtype=None\n):\n    \"\"\" based on the dtype, return our labels \"\"\"\n\n    closed = \"right\" if right else \"left\"\n\n    if is_datetime64tz_dtype(dtype):\n        formatter = lambda x: Timestamp(x, tz=dtype.tz)\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_datetime64_dtype(dtype):\n        formatter = Timestamp\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    elif is_timedelta64_dtype(dtype):\n        formatter = Timedelta\n        adjust = lambda x: x - Timedelta(\"1ns\")\n    else:\n        precision = _infer_precision(precision, bins)\n        formatter = lambda x: _round_frac(x, precision)\n        adjust = lambda x: x - 10 ** (-precision)\n\n    breaks = [formatter(b) for b in bins]\n    labels = IntervalIndex.from_breaks(breaks, closed=closed)\n\n    if right and include_lowest:\n        # we will adjust the left hand side by precision to\n        # account that we are all right closed\n        v = adjust(labels[0].left)\n\n        i = IntervalIndex([Interval(v, labels[0].right, closed=\"right\")])\n        labels = i.append(labels[1:])\n\n    return labels",
        "begin_line": 498,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._preprocess_for_cut#533",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._preprocess_for_cut(x)",
        "snippet": "def _preprocess_for_cut(x):\n    \"\"\"\n    handles preprocessing for cut where we convert passed\n    input to array, strip the index information and store it\n    separately\n    \"\"\"\n\n    # Check that the passed array is a Pandas or Numpy object\n    # We don't want to strip away a Pandas data-type here (e.g. datetimetz)\n    ndim = getattr(x, \"ndim\", None)\n    if ndim is None:\n        x = np.asarray(x)\n    if x.ndim != 1:\n        raise ValueError(\"Input array must be 1 dimensional\")\n\n    return x",
        "begin_line": 533,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._postprocess_for_cut#551",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._postprocess_for_cut(fac, bins, retbins: bool, dtype, original)",
        "snippet": "def _postprocess_for_cut(fac, bins, retbins: bool, dtype, original):\n    \"\"\"\n    handles post processing for the cut method where\n    we combine the index information if the originally passed\n    datatype was a series\n    \"\"\"\n    if isinstance(original, ABCSeries):\n        fac = original._constructor(fac, index=original.index, name=original.name)\n\n    if not retbins:\n        return fac\n\n    bins = _convert_bin_to_datelike_type(bins, dtype)\n\n    return fac, bins",
        "begin_line": 551,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._round_frac#568",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._round_frac(x, precision: int)",
        "snippet": "def _round_frac(x, precision: int):\n    \"\"\"\n    Round the fractional part of the given number\n    \"\"\"\n    if not np.isfinite(x) or x == 0:\n        return x\n    else:\n        frac, whole = np.modf(x)\n        if whole == 0:\n            digits = -int(np.floor(np.log10(abs(frac)))) - 1 + precision\n        else:\n            digits = precision\n        return np.around(x, digits)",
        "begin_line": 568,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.tile._infer_precision#583",
        "src_path": "pandas/core/reshape/tile.py",
        "class_name": "pandas.core.reshape.tile",
        "signature": "pandas.core.reshape.tile._infer_precision(base_precision: int, bins)",
        "snippet": "def _infer_precision(base_precision: int, bins) -> int:\n    \"\"\"Infer an appropriate precision for _round_frac\n    \"\"\"\n    for precision in range(base_precision, 20):\n        levels = [_round_frac(b, precision) for b in bins]\n        if algos.unique(levels).size == bins.size:\n            return precision\n    return base_precision  # default",
        "begin_line": 583,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer.__call__#106",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer.__call__(self, axis=None)",
        "snippet": "    def __call__(self, axis=None):\n        # we need to return a copy of ourselves\n        new_self = type(self)(self.name, self.obj)\n\n        if axis is not None:\n            axis = self.obj._get_axis_number(axis)\n        new_self.axis = axis\n        return new_self",
        "begin_line": 106,
        "end_line": 113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.472166180975865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_label#150",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_label(self, label, axis: int)",
        "snippet": "    def _get_label(self, label, axis: int):\n        if self.ndim == 1:\n            # for perf reasons we want to try _xs first\n            # as its basically direct indexing\n            # but will fail when the index is not present\n            # see GH5667\n            return self.obj._xs(label, axis=axis)\n        elif isinstance(label, tuple) and isinstance(label[axis], slice):\n            raise IndexingError(\"no slices here, handle elsewhere\")\n\n        return self.obj._xs(label, axis=axis)",
        "begin_line": 150,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_loc#162",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_loc(self, key: int, axis: int)",
        "snippet": "    def _get_loc(self, key: int, axis: int):\n        return self.obj._ixs(key, axis=axis)",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0860568437709206e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._slice#165",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._slice(self, obj, axis: int, kind=None)",
        "snippet": "    def _slice(self, obj, axis: int, kind=None):\n        return self.obj._slice(obj, axis=axis, kind=kind)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_setitem_indexer#168",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        if self.axis is not None:\n            return self._convert_tuple(key)\n\n        ax = self.obj._get_axis(0)\n\n        if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n            try:\n                return ax.get_loc(key)\n            except (TypeError, KeyError):\n                # TypeError e.g. passed a bool\n                pass\n\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key)\n            except IndexingError:\n                pass\n\n        if isinstance(key, range):\n            return list(key)\n\n        axis = self.axis or 0\n        try:\n            return self._convert_to_indexer(key, axis=axis)\n        except TypeError as e:\n\n            # invalid indexer type vs 'other' indexing errors\n            if \"cannot do\" in str(e):\n                raise\n            raise IndexingError(key)",
        "begin_line": 168,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer.__setitem__#200",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._setitem_with_indexer(indexer, value)",
        "begin_line": 200,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._has_valid_tuple#230",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._has_valid_tuple(self, key: Tuple)",
        "snippet": "    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer.\n        \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            try:\n                self._validate_key(k, i)\n            except ValueError:\n                raise ValueError(\n                    \"Location based indexing can only have \"\n                    \"[{types}] types\".format(types=self._valid_types)\n                )",
        "begin_line": 230,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.059504332545598e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer#245",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer(self, tup: Tuple)",
        "snippet": "    def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n        if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False",
        "begin_line": 245,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.613319224918987e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_tuple#250",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_tuple(self, key)",
        "snippet": "    def _convert_tuple(self, key):\n        keyidx = []\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            for i in range(self.ndim):\n                if i == axis:\n                    keyidx.append(self._convert_to_indexer(key, axis=axis))\n                else:\n                    keyidx.append(slice(None))\n        else:\n            for i, k in enumerate(key):\n                if i >= self.ndim:\n                    raise IndexingError(\"Too many indexers\")\n                idx = self._convert_to_indexer(k, axis=i)\n                keyidx.append(idx)\n        return tuple(keyidx)",
        "begin_line": 250,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.333582228859437e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer#267",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer(self, key, axis: int)",
        "snippet": "    def _convert_scalar_indexer(self, key, axis: int):\n        # if we are accessing via lowered dim, use the last dim\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        # a scalar\n        return ax._convert_scalar_indexer(key, kind=self.name)",
        "begin_line": 267,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.127438231469441e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_slice_indexer#273",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_slice_indexer(self, key: slice, axis: int)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, axis: int):\n        # if we are accessing via lowered dim, use the last dim\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_slice_indexer(key, kind=self.name)",
        "begin_line": 273,
        "end_line": 276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.848335631278314e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer#278",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        return True",
        "begin_line": 278,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.17594636579184e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer#310",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer(self, indexer, value):\n        self._has_valid_setitem_indexer(indexer)\n\n        # also has the side effect of consolidating in-place\n        from pandas import Series\n\n        info_axis = self.obj._info_axis_number\n\n        # maybe partial set\n        take_split_path = self.obj._is_mixed_type\n\n        # if there is only one block/type, still have to take split path\n        # unless the block is one-dimensional or it can hold the value\n        if not take_split_path and self.obj._data.blocks:\n            (blk,) = self.obj._data.blocks\n            if 1 < blk.ndim:  # in case of dict, keys are indices\n                val = list(value.values()) if isinstance(value, dict) else value\n                take_split_path = not blk._can_hold_element(val)\n\n        # if we have any multi-indexes that have non-trivial slices\n        # (not null slices) then we must take the split path, xref\n        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, ABCMultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)\n                ):\n                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n\n                    # reindex the axis to the new value\n                    # and set inplace\n                    key, _ = convert_missing_indexer(idx)\n\n                    # if this is the items axes, then take the main missing\n                    # path first\n                    # this correctly sets the dtype and avoids cache issues\n                    # essentially this separates out the block that is needed\n                    # to possibly be modified\n                    if self.ndim > 1 and i == self.obj._info_axis_number:\n\n                        # add the new item, and set the value\n                        # must have all defined axes if we have a scalar\n                        # or a list-like on the non-info axes if we have a\n                        # list-like\n                        len_non_info_axes = (\n                            len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                        )\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    \"cannot set a frame with no \"\n                                    \"defined index and a scalar\"\n                                )\n                            self.obj[key] = value\n                            return self.obj\n\n                        # add a new item with the dtype setup\n                        self.obj[key] = _infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value)\n\n                        return self.obj\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._data = self.obj.reindex(labels, axis=i)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n\n                    nindexer.append(labels.get_loc(key))\n\n                else:\n                    nindexer.append(idx)\n\n            indexer = tuple(nindexer)\n        else:\n\n            indexer, missing = convert_missing_indexer(indexer)\n\n            if missing:\n                return self._setitem_with_indexer_missing(indexer, value)\n\n        # set\n        item_labels = self.obj._get_axis(info_axis)\n\n        # align and set the values\n        if take_split_path:\n            # Above we only set take_split_path to True for 2D cases\n            assert self.ndim == 2\n            assert info_axis == 1\n\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n\n            # if we have a partial multiindex, then need to adjust the plane\n            # indexer here\n            if len(labels) == 1 and isinstance(\n                self.obj[labels[0]].axes[0], ABCMultiIndex\n            ):\n                item = labels[0]\n                obj = self.obj[item]\n                index = obj.index\n                idx = indexer[:info_axis][0]\n\n                plane_indexer = tuple([idx]) + indexer[info_axis + 1 :]\n                lplane_indexer = length_of_indexer(plane_indexer[0], index)\n\n                # require that we are setting the right number of values that\n                # we are indexing\n                if (\n                    is_list_like_indexer(value)\n                    and np.iterable(value)\n                    and lplane_indexer != len(value)\n                ):\n\n                    if len(obj[idx]) != len(value):\n                        raise ValueError(\n                            \"cannot set using a multi-index \"\n                            \"selection indexer with a different \"\n                            \"length than the value\"\n                        )\n\n                    # make sure we have an ndarray\n                    value = getattr(value, \"values\", value).ravel()\n\n                    # we can directly set the series here\n                    # as we select a slice indexer on the mi\n                    idx = index._convert_slice_indexer(idx)\n                    obj._consolidate_inplace()\n                    obj = obj.copy()\n                    obj._data = obj._data.setitem(indexer=tuple([idx]), value=value)\n                    self.obj[item] = obj\n                    return\n\n            # non-mi\n            else:\n                plane_indexer = indexer[:info_axis] + indexer[info_axis + 1 :]\n                plane_axis = self.obj.axes[:info_axis][0]\n                lplane_indexer = length_of_indexer(plane_indexer[0], plane_axis)\n\n            def setter(item, v):\n                s = self.obj[item]\n                pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    s = v\n                else:\n                    # set the item, possibly having a dtype change\n                    s._consolidate_inplace()\n                    s = s.copy()\n                    s._data = s._data.setitem(indexer=pi, value=v)\n                    s._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj[item] = s\n\n            # we need an iterable, with a ndim of at least 1\n            # eg. don't pass through np.array(0)\n            if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n                # we have an equal len Frame\n                if isinstance(value, ABCDataFrame):\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, ABCMultiIndex)\n\n                    for item in labels:\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(\n                                tuple(sub_indexer), value[item], multiindex_indexer\n                            )\n                        else:\n                            v = np.nan\n\n                        setter(item, v)\n\n                # we have an equal len ndarray/convertible to our labels\n                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif np.ndim(value) == 2:\n\n                    # note that this coerces the dtype if we are mixed\n                    # GH 7551\n                    value = np.array(value, dtype=object)\n                    if len(labels) != value.shape[1]:\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an ndarray\"\n                        )\n\n                    for i, item in enumerate(labels):\n\n                        # setting with a list, recoerces\n                        setter(item, value[:, i].tolist())\n\n                # we have an equal len list/ndarray\n                elif _can_do_equal_len(\n                    labels, value, plane_indexer, lplane_indexer, self.obj\n                ):\n                    setter(labels[0], value)\n\n                # per label values\n                else:\n\n                    if len(labels) != len(value):\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an iterable\"\n                        )\n\n                    for item, v in zip(labels, value):\n                        setter(item, v)\n            else:\n\n                # scalar\n                for item in labels:\n                    setter(item, value)\n\n        else:\n            if isinstance(indexer, tuple):\n                indexer = maybe_convert_ix(*indexer)\n\n                # if we are setting on the info axis ONLY\n                # set using those methods to avoid block-splitting\n                # logic here\n                if (\n                    len(indexer) > info_axis\n                    and is_integer(indexer[info_axis])\n                    and all(\n                        com.is_null_slice(idx)\n                        for i, idx in enumerate(indexer)\n                        if i != info_axis\n                    )\n                    and item_labels.is_unique\n                ):\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n\n            if isinstance(value, (ABCSeries, dict)):\n                # TODO(EA): ExtensionBlock.setitem this causes issues with\n                # setting for extensionarrays that store dicts. Need to decide\n                # if it's worth supporting that.\n                value = self._align_series(indexer, Series(value))\n\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n\n            # check for chained assignment\n            self.obj._check_is_chained_assignment_possible()\n\n            # actually do the set\n            self.obj._consolidate_inplace()\n            self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)\n            self.obj._maybe_update_cacher(clear=True)",
        "begin_line": 310,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer.setter#471",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer.setter(item, v)",
        "snippet": "            def setter(item, v):\n                s = self.obj[item]\n                pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    s = v\n                else:\n                    # set the item, possibly having a dtype change\n                    s._consolidate_inplace()\n                    s = s.copy()\n                    s._data = s._data.setitem(indexer=pi, value=v)\n                    s._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj[item] = s",
        "begin_line": 471,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer_missing#595",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._setitem_with_indexer_missing(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer_missing(self, indexer, value):\n        \"\"\"\n        Insert new row(s) or column(s) into the Series or DataFrame.\n        \"\"\"\n        from pandas import Series\n\n        # reindex the axis to the new value\n        # and set inplace\n        if self.ndim == 1:\n            index = self.obj.index\n            new_index = index.insert(len(index), indexer)\n\n            # we have a coerced indexer, e.g. a float\n            # that matches in an Int64Index, so\n            # we will not create a duplicate index, rather\n            # index to that element\n            # e.g. 0.0 -> 0\n            # GH#12246\n            if index.is_unique:\n                new_indexer = index.get_indexer([new_index[-1]])\n                if (new_indexer != -1).any():\n                    return self._setitem_with_indexer(new_indexer, value)\n\n            # this preserves dtype of the value\n            new_values = Series([value])._values\n            if len(self.obj._values):\n                # GH#22717 handle casting compatibility that np.concatenate\n                #  does incorrectly\n                new_values = concat_compat([self.obj._values, new_values])\n            self.obj._data = self.obj._constructor(\n                new_values, index=new_index, name=self.obj.name\n            )._data\n            self.obj._maybe_update_cacher(clear=True)\n            return self.obj\n\n        elif self.ndim == 2:\n\n            if not len(self.obj.columns):\n                # no columns and scalar\n                raise ValueError(\"cannot set a frame with no defined columns\")\n\n            if isinstance(value, ABCSeries):\n                # append a Series\n                value = value.reindex(index=self.obj.columns, copy=True)\n                value.name = indexer\n\n            else:\n                # a list-list\n                if is_list_like_indexer(value):\n                    # must have conforming columns\n                    if len(value) != len(self.obj.columns):\n                        raise ValueError(\"cannot set a row with mismatched columns\")\n\n                value = Series(value, index=self.obj.columns, name=indexer)\n\n            self.obj._data = self.obj.append(value)._data\n            self.obj._maybe_update_cacher(clear=True)\n            return self.obj",
        "begin_line": 595,
        "end_line": 652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._getitem_tuple#798",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        # no multi-index, so validate all of the indexers\n        self._has_valid_tuple(tup)\n\n        # ugly hack for GH #836\n        if self._multi_take_opportunity(tup):\n            return self._multi_take(tup)\n\n        # no shortcut needed\n        retval = self.obj\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                continue\n\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n\n        return retval",
        "begin_line": 798,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._multi_take_opportunity#821",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._multi_take_opportunity(self, tup: Tuple)",
        "snippet": "    def _multi_take_opportunity(self, tup: Tuple):\n        \"\"\"\n        Check whether there is the possibility to use ``_multi_take``.\n        Currently the limit is that all axes being indexed must be indexed with\n        list-likes.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis\n\n        Returns\n        -------\n        boolean: Whether the current indexing can be passed through _multi_take\n        \"\"\"\n        if not all(is_list_like_indexer(x) for x in tup):\n            return False\n\n        # just too complicated\n        if any(com.is_bool_indexer(x) for x in tup):\n            return False\n\n        return True",
        "begin_line": 821,
        "end_line": 843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_for_reindex#868",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_for_reindex(self, key, axis: int)",
        "snippet": "    def _convert_for_reindex(self, key, axis: int):\n        return key",
        "begin_line": 868,
        "end_line": 869,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._handle_lowerdim_multi_index_axis0#871",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._handle_lowerdim_multi_index_axis0(self, tup: Tuple)",
        "snippet": "    def _handle_lowerdim_multi_index_axis0(self, tup: Tuple):\n        # we have an axis0 multi-index, handle or raise\n        axis = self.axis or 0\n        try:\n            # fast path for series or for tup devoid of slices\n            return self._get_label(tup, axis=axis)\n        except TypeError:\n            # slices are unhashable\n            pass\n        except KeyError as ek:\n            # raise KeyError if number of indexers match\n            # else IndexingError will be raised\n            if len(tup) <= self.obj.index.nlevels and len(tup) > self.ndim:\n                raise ek\n\n        return None",
        "begin_line": 871,
        "end_line": 886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._getitem_lowerdim#888",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._getitem_lowerdim(self, tup: Tuple)",
        "snippet": "    def _getitem_lowerdim(self, tup: Tuple):\n\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n        if len(tup) > self.ndim:\n            raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n        # to avoid wasted computation\n        # df.ix[d1:d2, 0] -> columns first (True)\n        # df.ix[0, ['C', 'B', A']] -> rows first (False)\n        for i, key in enumerate(tup):\n            if is_label_like(key) or isinstance(key, tuple):\n                section = self._getitem_axis(key, axis=i)\n\n                # we have yielded a scalar ?\n                if not is_list_like_indexer(section):\n                    return section\n\n                elif section.ndim == self.ndim:\n                    # we're in the middle of slicing through a MultiIndex\n                    # revise the key wrt to `section` by inserting an _NS\n                    new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n                else:\n                    new_key = tup[:i] + tup[i + 1 :]\n\n                    # unfortunately need an odious kludge here because of\n                    # DataFrame transposing convention\n                    if (\n                        isinstance(section, ABCDataFrame)\n                        and i > 0\n                        and len(new_key) == 2\n                    ):\n                        a, b = new_key\n                        new_key = b, a\n\n                    if len(new_key) == 1:\n                        new_key = new_key[0]\n\n                # Slices should return views, but calling iloc/loc with a null\n                # slice returns a new object.\n                if com.is_null_slice(new_key):\n                    return section\n                # This is an elided recursive call to iloc/loc/etc'\n                return getattr(section, self.name)[new_key]\n\n        raise IndexingError(\"not applicable\")",
        "begin_line": 888,
        "end_line": 950,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._getitem_nested_tuple#952",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._getitem_nested_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_nested_tuple(self, tup: Tuple):\n        # we have a nested tuple so have at least 1 multi-index level\n        # we should be able to match up the dimensionality here\n\n        # we have too many indexers for our dim, but have at least 1\n        # multi-index dimension, try to see if we have something like\n        # a tuple passed to a series with a multi-index\n        if len(tup) > self.ndim:\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n            # this is a series with a multi-index specified a tuple of\n            # selectors\n            axis = self.axis or 0\n            return self._getitem_axis(tup, axis=axis)\n\n        # handle the multi-axis by taking sections and reducing\n        # this is iterative\n        obj = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n\n            # if we have a scalar, we are done\n            if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n                break\n\n            # has the dim of the obj changed?\n            # GH 7199\n            if obj.ndim < current_ndim:\n                axis -= 1\n\n        return obj",
        "begin_line": 952,
        "end_line": 992,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_listlike_indexer#1029",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_listlike_indexer(self, key, axis: int, raise_missing: bool=False)",
        "snippet": "    def _get_listlike_indexer(self, key, axis: int, raise_missing: bool = False):\n        \"\"\"\n        Transform a list-like of keys into a new index and an indexer.\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n\n        Returns\n        -------\n        keyarr: Index\n            New index (coinciding with 'key' if the axis is unique)\n        values : array-like\n            An indexer for the return object; -1 denotes keys not found\n        \"\"\"\n        o = self.obj\n        ax = o._get_axis(axis)\n\n        # Have the index compute an indexer or return None\n        # if it cannot handle:\n        indexer, keyarr = ax._convert_listlike_indexer(key, kind=self.name)\n        # We only act on all found values:\n        if indexer is not None and (indexer != -1).all():\n            self._validate_read_indexer(key, indexer, axis, raise_missing=raise_missing)\n            return ax[indexer], indexer\n\n        if ax.is_unique and not getattr(ax, \"is_overlapping\", False):\n            # If we are trying to get actual keys from empty Series, we\n            # patiently wait for a KeyError later on - otherwise, convert\n            if len(ax) or not len(key):\n                key = self._convert_for_reindex(key, axis)\n            indexer = ax.get_indexer_for(key)\n            keyarr = ax.reindex(keyarr)[0]\n        else:\n            keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n\n        self._validate_read_indexer(\n            keyarr, indexer, o._get_axis_number(axis), raise_missing=raise_missing\n        )\n        return keyarr, indexer",
        "begin_line": 1029,
        "end_line": 1081,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._getitem_iterable#1083",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._getitem_iterable(self, key, axis: int)",
        "snippet": "    def _getitem_iterable(self, key, axis: int):\n        \"\"\"\n        Index current object with an an iterable key (which can be a boolean\n        indexer, or a collection of keys).\n\n        Parameters\n        ----------\n        key : iterable\n            Target labels, or boolean indexer\n        axis: int\n            Dimension on which the indexing is being made\n\n        Raises\n        ------\n        KeyError\n            If no key was found. Will change in the future to raise if not all\n            keys were found.\n        IndexingError\n            If the boolean indexer is unalignable with the object being\n            indexed.\n\n        Returns\n        -------\n        scalar, DataFrame, or Series: indexed value(s),\n        \"\"\"\n        # caller is responsible for ensuring non-None axis\n        self._validate_key(key, axis)\n\n        labels = self.obj._get_axis(axis)\n\n        if com.is_bool_indexer(key):\n            # A boolean indexer\n            key = check_bool_indexer(labels, key)\n            (inds,) = key.nonzero()\n            return self.obj.take(inds, axis=axis)\n        else:\n            # A collection of keys\n            keyarr, indexer = self._get_listlike_indexer(key, axis, raise_missing=False)\n            return self.obj._reindex_with_indexers(\n                {axis: [keyarr, indexer]}, copy=True, allow_dups=True\n            )",
        "begin_line": 1083,
        "end_line": 1123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.273856997125104e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._validate_read_indexer#1125",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._validate_read_indexer(self, key, indexer, axis: int, raise_missing: bool=False)",
        "snippet": "    def _validate_read_indexer(\n        self, key, indexer, axis: int, raise_missing: bool = False\n    ):\n        \"\"\"\n        Check that indexer can be used to return a result (e.g. at least one\n        element was found, unless the list of keys was actually empty).\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels (only used to show correct error message)\n        indexer: array-like of booleans\n            Indices corresponding to the key (with -1 indicating not found)\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n        \"\"\"\n\n        ax = self.obj._get_axis(axis)\n\n        if len(key) == 0:\n            return\n\n        # Count missing values:\n        missing = (indexer < 0).sum()\n\n        if missing:\n            if missing == len(indexer):\n                raise KeyError(\n                    \"None of [{key}] are in the [{axis}]\".format(\n                        key=key, axis=self.obj._get_axis_name(axis)\n                    )\n                )\n\n            # We (temporarily) allow for some missing keys with .loc, except in\n            # some cases (e.g. setting) in which \"raise_missing\" will be False\n            if not (self.name == \"loc\" and not raise_missing):\n                not_found = list(set(key) - set(ax))\n                raise KeyError(\"{} not in index\".format(not_found))\n\n            # we skip the warning on Categorical/Interval\n            # as this check is actually done (check for\n            # non-missing values), but a bit later in the\n            # code, so we want to avoid warning & then\n            # just raising\n            if not (ax.is_categorical() or ax.is_interval()):\n                raise KeyError(\n                    \"Passing list-likes to .loc or [] with any missing labels \"\n                    \"is no longer supported, see \"\n                    \"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike\"  # noqa:E501\n                )",
        "begin_line": 1125,
        "end_line": 1184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._convert_to_indexer#1186",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._convert_to_indexer(self, obj, axis: int, raise_missing: bool=False)",
        "snippet": "    def _convert_to_indexer(self, obj, axis: int, raise_missing: bool = False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on an ndarray\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        labels = self.obj._get_axis(axis)\n\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n\n        # try to find out correct indexer, if not type correct raise\n        try:\n            obj = self._convert_scalar_indexer(obj, axis)\n        except TypeError:\n            # but we will allow setting\n            pass\n\n        # see if we are positional in nature\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(obj) and not is_int_index\n\n        # if we are a label return me\n        try:\n            return labels.get_loc(obj)\n        except LookupError:\n            if isinstance(obj, tuple) and isinstance(labels, ABCMultiIndex):\n                if len(obj) == labels.nlevels:\n                    return {\"key\": obj}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n\n        # a positional\n        if is_int_positional:\n\n            # if we are setting and its not a valid location\n            # its an insert which fails by definition\n\n            if self.name == \"loc\":\n                # always valid\n                return {\"key\": obj}\n\n            if obj >= self.obj.shape[axis] and not isinstance(labels, ABCMultiIndex):\n                # a positional\n                raise ValueError(\"cannot set by positional indexing with enlargement\")\n\n            return obj\n\n        if is_nested_tuple(obj, labels):\n            return labels.get_locs(obj)\n\n        elif is_list_like_indexer(obj):\n\n            if com.is_bool_indexer(obj):\n                obj = check_bool_indexer(labels, obj)\n                (inds,) = obj.nonzero()\n                return inds\n            else:\n                # When setting, missing keys are not allowed, even with .loc:\n                return self._get_listlike_indexer(obj, axis, raise_missing=True)[1]\n        else:\n            try:\n                return labels.get_loc(obj)\n            except LookupError:\n                # allow a not found key only if we are a setter\n                if not is_list_like_indexer(obj):\n                    return {\"key\": obj}\n                raise",
        "begin_line": 1186,
        "end_line": 1266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_slice_axis#1268",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_slice_axis(self, slice_obj: slice, axis: int)",
        "snippet": "    def _get_slice_axis(self, slice_obj: slice, axis: int):\n        # caller is responsible for ensuring non-None axis\n        obj = self.obj\n\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n\n        indexer = self._convert_slice_indexer(slice_obj, axis)\n        return self._slice(indexer, axis=axis, kind=\"iloc\")",
        "begin_line": 1268,
        "end_line": 1276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#1375",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self._getitem_scalar(key)\n                except (KeyError, IndexError, AttributeError):\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 1375,
        "end_line": 1389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getbool_axis#1400",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getbool_axis(self, key, axis: int)",
        "snippet": "    def _getbool_axis(self, key, axis: int):\n        # caller is responsible for ensuring non-None axis\n        labels = self.obj._get_axis(axis)\n        key = check_bool_indexer(labels, key)\n        inds = key.nonzero()[0]\n        return self.obj.take(inds, axis=axis)",
        "begin_line": 1400,
        "end_line": 1405,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.840881105486387e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._validate_key#1672",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n\n        # valid for a collection of labels (we check their presence later)\n        # slice of labels (where start-end in labels)\n        # slice of integers (only if in the labels)\n        # boolean\n\n        if isinstance(key, slice):\n            return\n\n        if com.is_bool_indexer(key):\n            return\n\n        if not is_list_like_indexer(key):\n            self._convert_scalar_indexer(key, axis)",
        "begin_line": 1672,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._is_scalar_access#1688",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_scalar(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if isinstance(ax, ABCMultiIndex):\n                return False\n\n            if isinstance(k, str) and ax._supports_partial_string_indexing:\n                # partial string indexing, df.loc['2000', 'A']\n                # should not be considered scalar\n                return False\n\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 1688,
        "end_line": 1712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_scalar#1714",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_scalar(self, key)",
        "snippet": "    def _getitem_scalar(self, key):\n        # a fast-path to scalar access\n        # if not, raise\n        values = self.obj._get_value(*key)\n        return values",
        "begin_line": 1714,
        "end_line": 1718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._get_partial_string_timestamp_match_key#1720",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._get_partial_string_timestamp_match_key(self, key, labels)",
        "snippet": "    def _get_partial_string_timestamp_match_key(self, key, labels):\n        \"\"\"Translate any partial string timestamp matches in key, returning the\n        new key (GH 10331)\"\"\"\n        if isinstance(labels, ABCMultiIndex):\n            if (\n                isinstance(key, str)\n                and labels.levels[0]._supports_partial_string_indexing\n            ):\n                # Convert key '2016-01-01' to\n                # ('2016-01-01'[, slice(None, None, None)]+)\n                key = tuple([key] + [slice(None)] * (len(labels.levels) - 1))\n\n            if isinstance(key, tuple):\n                # Convert (..., '2016-01-01', ...) in tuple to\n                # (..., slice('2016-01-01', '2016-01-01', None), ...)\n                new_key = []\n                for i, component in enumerate(key):\n                    if (\n                        isinstance(component, str)\n                        and labels.levels[i]._supports_partial_string_indexing\n                    ):\n                        new_key.append(slice(component, component, None))\n                    else:\n                        new_key.append(component)\n                key = tuple(new_key)\n\n        return key",
        "begin_line": 1720,
        "end_line": 1746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._getitem_axis#1748",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        key = item_from_zerodim(key)\n        if is_iterator(key):\n            key = list(key)\n\n        labels = self.obj._get_axis(axis)\n        key = self._get_partial_string_timestamp_match_key(key, labels)\n\n        if isinstance(key, slice):\n            self._validate_key(key, axis)\n            return self._get_slice_axis(key, axis=axis)\n        elif com.is_bool_indexer(key):\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n\n            # convert various list-like indexers\n            # to a list of keys\n            # we will use the *values* of the object\n            # and NOT the index if its a PandasObject\n            if isinstance(labels, ABCMultiIndex):\n\n                if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:\n                    # Series, or 0,1 ndim ndarray\n                    # GH 14730\n                    key = list(key)\n                elif isinstance(key, ABCDataFrame):\n                    # GH 15438\n                    raise NotImplementedError(\n                        \"Indexing a MultiIndex with a \"\n                        \"DataFrame key is not \"\n                        \"implemented\"\n                    )\n                elif hasattr(key, \"ndim\") and key.ndim > 1:\n                    raise NotImplementedError(\n                        \"Indexing a MultiIndex with a \"\n                        \"multidimensional key is not \"\n                        \"implemented\"\n                    )\n\n                if (\n                    not isinstance(key, tuple)\n                    and len(key)\n                    and not isinstance(key[0], tuple)\n                ):\n                    key = tuple([key])\n\n            # an iterable multi-selection\n            if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n\n                if hasattr(key, \"ndim\") and key.ndim > 1:\n                    raise ValueError(\"Cannot index with multidimensional key\")\n\n                return self._getitem_iterable(key, axis=axis)\n\n            # nested tuple slicing\n            if is_nested_tuple(key, labels):\n                locs = labels.get_locs(key)\n                indexer = [slice(None)] * self.ndim\n                indexer[axis] = locs\n                return self.obj.iloc[tuple(indexer)]\n\n        # fall thru to straight lookup\n        self._validate_key(key, axis)\n        return self._get_label(key, axis=axis)",
        "begin_line": 1748,
        "end_line": 1811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_key#1956",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n        if com.is_bool_indexer(key):\n            if hasattr(key, \"index\") and isinstance(key.index, Index):\n                if key.index.inferred_type == \"integer\":\n                    raise NotImplementedError(\n                        \"iLocation based boolean \"\n                        \"indexing on an integer type \"\n                        \"is not available\"\n                    )\n                raise ValueError(\n                    \"iLocation based boolean indexing cannot use \"\n                    \"an indexable as a mask\"\n                )\n            return\n\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError(\"Too many indexers\")\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n\n            # check that the key has a numeric dtype\n            if not is_numeric_dtype(arr.dtype):\n                raise IndexError(\n                    \".iloc requires numeric indexers, got {arr}\".format(arr=arr)\n                )\n\n            # check that the key does not exceed the maximum size of the index\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(\n                \"Can only index by location with \"\n                \"a [{types}]\".format(types=self._valid_types)\n            )",
        "begin_line": 1956,
        "end_line": 1996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._is_scalar_access#2001",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n\n        return True",
        "begin_line": 2001,
        "end_line": 2017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#2025",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 2025,
        "end_line": 2048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0860568437709206e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_tuple#2050",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n\n            # if the dim was reduced, then pass a lower-dim the next time\n            if retval.ndim < self.ndim:\n                # TODO: this is never reached in tests; can we confirm that\n                #  it is impossible?\n                axis -= 1\n\n            # try to get for the next axis\n            axis += 1\n\n        return retval",
        "begin_line": 2050,
        "end_line": 2076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.094544277157196e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_list_axis#2078",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_list_axis(self, key, axis: int)",
        "snippet": "    def _get_list_axis(self, key, axis: int):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        try:\n            return self.obj.take(key, axis=axis)\n        except IndexError:\n            # re-raise with different error message\n            raise IndexError(\"positional indexers are out-of-bounds\")",
        "begin_line": 2078,
        "end_line": 2095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#2097",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self._get_loc(key, axis=axis)",
        "begin_line": 2097,
        "end_line": 2121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2328",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj, key)",
        "snippet": "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    if we are index sliceable, then return my slicer, otherwise return None\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2328,
        "end_line": 2350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007530120481927711,
            "pseudo_dstar_susp": 0.0005458515283842794,
            "pseudo_tarantula_susp": 0.0008460236886632825,
            "pseudo_op2_susp": 0.0005458515283842794,
            "pseudo_barinel_susp": 0.0008460236886632825
        }
    },
    {
        "name": "pandas.core.indexing.check_bool_indexer#2353",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.check_bool_indexer(index: Index, key)",
        "snippet": "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done\n    key : list-like\n        Boolean indexer to check\n\n    Returns\n    -------\n    result: np.array\n        Resulting key\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index\n\n    IndexingError\n        If the index of the key is unalignable to index\n\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    else:\n        if is_sparse(result):\n            result = result.to_dense()\n        result = np.asarray(result, dtype=bool)\n\n        # GH26658\n        if len(result) != len(index):\n            raise IndexError(\n                \"Item wrong length {} instead of {}.\".format(len(result), len(index))\n            )\n\n    return result",
        "begin_line": 2353,
        "end_line": 2403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00044464206313917296,
            "pseudo_dstar_susp": 0.00044444444444444447,
            "pseudo_tarantula_susp": 0.0005763688760806917,
            "pseudo_op2_susp": 0.00044444444444444447,
            "pseudo_barinel_susp": 0.0005763688760806917
        }
    },
    {
        "name": "pandas.core.indexing.convert_missing_indexer#2406",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_missing_indexer(indexer)",
        "snippet": "def convert_missing_indexer(indexer):\n    \"\"\"\n    reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
        "begin_line": 2406,
        "end_line": 2421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing.is_nested_tuple#2451",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_nested_tuple(tup, labels)",
        "snippet": "def is_nested_tuple(tup, labels) -> bool:\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for i, k in enumerate(tup):\n\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
        "begin_line": 2451,
        "end_line": 2461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing.is_label_like#2464",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_label_like(key)",
        "snippet": "def is_label_like(key) -> bool:\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
        "begin_line": 2464,
        "end_line": 2466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.113590511707526e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing.need_slice#2469",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.need_slice(obj)",
        "snippet": "def need_slice(obj) -> bool:\n    return (\n        obj.start is not None\n        or obj.stop is not None\n        or (obj.step is not None and obj.step != 1)\n    )",
        "begin_line": 2469,
        "end_line": 2474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexing._can_do_equal_len#2522",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing._can_do_equal_len(labels, value, plane_indexer, lplane_indexer, obj)",
        "snippet": "def _can_do_equal_len(labels, value, plane_indexer, lplane_indexer, obj) -> bool:\n    \"\"\" return True if we have an equal len settable \"\"\"\n    if not len(labels) == 1 or not np.iterable(value) or is_scalar(plane_indexer[0]):\n        return False\n\n    item = labels[0]\n    index = obj[item].index\n\n    values_len = len(value)\n    # equal len list/ndarray\n    if len(index) == values_len:\n        return True\n    elif lplane_indexer == values_len:\n        return True\n\n    return False",
        "begin_line": 2522,
        "end_line": 2537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.missing.mask_missing#24",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.mask_missing(arr, values_to_mask)",
        "snippet": "def mask_missing(arr, values_to_mask):\n    \"\"\"\n    Return a masking array of same size/shape as arr\n    with entries equaling any member of values_to_mask set to True\n    \"\"\"\n    dtype, values_to_mask = infer_dtype_from_array(values_to_mask)\n\n    try:\n        values_to_mask = np.array(values_to_mask, dtype=dtype)\n\n    except Exception:\n        values_to_mask = np.array(values_to_mask, dtype=object)\n\n    na_mask = isna(values_to_mask)\n    nonna = values_to_mask[~na_mask]\n\n    mask = None\n    for x in nonna:\n        if mask is None:\n            if is_numeric_v_string_like(arr, x):\n                # GH#29553 prevent numpy deprecation warnings\n                mask = False\n            else:\n                mask = arr == x\n\n            # if x is a string and arr is not, then we get False and we must\n            # expand the mask to size arr.shape\n            if is_scalar(mask):\n                mask = np.zeros(arr.shape, dtype=bool)\n        else:\n            if is_numeric_v_string_like(arr, x):\n                # GH#29553 prevent numpy deprecation warnings\n                mask |= False\n            else:\n                mask |= arr == x\n\n    if na_mask.any():\n        if mask is None:\n            mask = isna(arr)\n        else:\n            mask |= isna(arr)\n\n    # GH 21977\n    if mask is None:\n        mask = np.zeros(arr.shape, dtype=bool)\n\n    return mask",
        "begin_line": 24,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        msg = \"Invalid fill method. Expecting {expecting}. Got {method}\".format(\n            expecting=expecting, method=method\n        )\n        raise ValueError(msg)\n    return method",
        "begin_line": 73,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00041220115416323167,
            "pseudo_dstar_susp": 0.00041220115416323167,
            "pseudo_tarantula_susp": 0.0004418912947414936,
            "pseudo_op2_susp": 0.00041220115416323167,
            "pseudo_barinel_susp": 0.0004418912947414936
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#604",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 604,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00041220115416323167,
            "pseudo_dstar_susp": 0.00041220115416323167,
            "pseudo_tarantula_susp": 0.0004418912947414936,
            "pseudo_op2_susp": 0.00041220115416323167,
            "pseudo_barinel_susp": 0.0004418912947414936
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__new__#148",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True)",
        "snippet": "    def __new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True):\n\n        if isinstance(data, ABCSeries) and is_interval_dtype(data):\n            data = data.values\n\n        if isinstance(data, (cls, ABCIntervalIndex)):\n            left = data.left\n            right = data.right\n            closed = closed or data.closed\n        else:\n\n            # don't allow scalars\n            if is_scalar(data):\n                msg = (\n                    \"{}(...) must be called with a collection of some kind,\"\n                    \" {} was passed\"\n                )\n                raise TypeError(msg.format(cls.__name__, data))\n\n            # might need to convert empty or purely na data\n            data = maybe_convert_platform_interval(data)\n            left, right, infer_closed = intervals_to_interval_bounds(\n                data, validate_closed=closed is None\n            )\n            closed = closed or infer_closed\n\n        return cls._simple_new(\n            left,\n            right,\n            closed,\n            copy=copy,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )",
        "begin_line": 148,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._simple_new#184",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
        "snippet": "    def _simple_new(\n        cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n    ):\n        result = IntervalMixin.__new__(cls)\n\n        closed = closed or \"right\"\n        left = ensure_index(left, copy=copy)\n        right = ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)\n            if not is_interval_dtype(dtype):\n                msg = \"dtype must be an IntervalDtype, got {dtype}\"\n                raise TypeError(msg.format(dtype=dtype))\n            elif dtype.subtype is not None:\n                left = left.astype(dtype.subtype)\n                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)\n        elif is_float_dtype(right) and is_integer_dtype(left):\n            left = left.astype(right.dtype)\n\n        if type(left) != type(right):\n            msg = \"must not have differing left [{ltype}] and right [{rtype}] types\"\n            raise ValueError(\n                msg.format(ltype=type(left).__name__, rtype=type(right).__name__)\n            )\n        elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalArray\"\n            )\n            raise TypeError(msg)\n        elif isinstance(left, ABCPeriodIndex):\n            msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n            raise ValueError(msg)\n        elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n            msg = (\n                \"left and right must have the same time zone, got \"\n                \"'{left_tz}' and '{right_tz}'\"\n            )\n            raise ValueError(msg.format(left_tz=left.tz, right_tz=right.tz))\n\n        result._left = left\n        result._right = right\n        result._closed = closed\n        if verify_integrity:\n            result._validate()\n        return result",
        "begin_line": 184,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_sequence#239",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars, dtype=dtype, copy=copy)",
        "begin_line": 239,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_factorized#243",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        if len(values) == 0:\n            # An empty array returns object-dtype here. We can't create\n            # a new IA from an (empty) object-dtype array, so turn it into the\n            # correct dtype.\n            values = values.astype(original.dtype.subtype)\n        return cls(values, closed=original.closed)",
        "begin_line": 243,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_breaks#300",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n        breaks = maybe_convert_platform_interval(breaks)\n\n        return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
        "begin_line": 300,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_arrays#371",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n        left = maybe_convert_platform_interval(left)\n        right = maybe_convert_platform_interval(right)\n\n        return cls._simple_new(\n            left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n        )",
        "begin_line": 371,
        "end_line": 377,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.497938067031566e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_tuples#430",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_tuples(cls, data, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_tuples(cls, data, closed=\"right\", copy=False, dtype=None):\n        if len(data):\n            left, right = [], []\n        else:\n            # ensure that empty data keeps input dtype\n            left = right = data\n\n        for d in data:\n            if isna(d):\n                lhs = rhs = np.nan\n            else:\n                name = cls.__name__\n                try:\n                    # need list of length 2 tuples, e.g. [(0, 1), (1, 2), ...]\n                    lhs, rhs = d\n                except ValueError:\n                    msg = (\n                        \"{name}.from_tuples requires tuples of length 2, got {tpl}\"\n                    ).format(name=name, tpl=d)\n                    raise ValueError(msg)\n                except TypeError:\n                    msg = (\"{name}.from_tuples received an invalid item, {tpl}\").format(\n                        name=name, tpl=d\n                    )\n                    raise TypeError(msg)\n            left.append(lhs)\n            right.append(rhs)\n\n        return cls.from_arrays(left, right, closed, copy=False, dtype=dtype)",
        "begin_line": 430,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._validate#460",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"Verify that the IntervalArray is valid.\n\n        Checks that\n\n        * closed is valid\n        * left and right match lengths\n        * left and right have the same missing values\n        * left is always below right\n        \"\"\"\n        if self.closed not in _VALID_CLOSED:\n            raise ValueError(\n                \"invalid option for 'closed': {closed}\".format(closed=self.closed)\n            )\n        if len(self.left) != len(self.right):\n            raise ValueError(\"left and right must have the same length\")\n        left_mask = notna(self.left)\n        right_mask = notna(self.right)\n        if not (left_mask == right_mask).all():\n            raise ValueError(\n                \"missing values must be missing in the same \"\n                \"location both left and right sides\"\n            )\n        if not (self.left[left_mask] <= self.right[left_mask]).all():\n            raise ValueError(\"left side of interval must be <= right side\")",
        "begin_line": 460,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__iter__#489",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return iter(np.asarray(self))",
        "begin_line": 489,
        "end_line": 490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__len__#492",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 492,
        "end_line": 493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.460952703274389e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__getitem__#495",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        left = self.left[value]\n        right = self.right[value]\n\n        # scalar\n        if not isinstance(left, ABCIndexClass):\n            if isna(left):\n                return self._fill_value\n            return Interval(left, right, self.closed)\n\n        return self._shallow_copy(left, right)",
        "begin_line": 495,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.dtype#600",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return IntervalDtype(self.left.dtype)",
        "begin_line": 600,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.125552230297848e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.astype#603",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        array : ExtensionArray or ndarray\n            ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n        if is_interval_dtype(dtype):\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n            # need to cast to different subtype\n            try:\n                new_left = self.left.astype(dtype.subtype)\n                new_right = self.right.astype(dtype.subtype)\n            except TypeError:\n                msg = (\n                    \"Cannot convert {dtype} to {new_dtype}; subtypes are \"\n                    \"incompatible\"\n                )\n                raise TypeError(msg.format(dtype=self.dtype, new_dtype=dtype))\n            return self._shallow_copy(new_left, new_right)\n        elif is_categorical_dtype(dtype):\n            return Categorical(np.asarray(self))\n        # TODO: This try/except will be repeated.\n        try:\n            return np.asarray(self).astype(dtype, copy=copy)\n        except (TypeError, ValueError):\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))",
        "begin_line": 603,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._shallow_copy#669",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._shallow_copy(self, left=None, right=None, closed=None)",
        "snippet": "    def _shallow_copy(self, left=None, right=None, closed=None):\n        \"\"\"\n        Return a new IntervalArray with the replacement attributes\n\n        Parameters\n        ----------\n        left : array-like\n            Values to be used for the left-side of the the intervals.\n            If None, the existing left and right values will be used.\n\n        right : array-like\n            Values to be used for the right-side of the the intervals.\n            If None and left is IntervalArray-like, the left and right\n            of the IntervalArray-like will be used.\n\n        closed : {'left', 'right', 'both', 'neither'}, optional\n            Whether the intervals are closed on the left-side, right-side, both\n            or neither.  If None, the existing closed will be used.\n        \"\"\"\n        if left is None:\n\n            # no values passed\n            left, right = self.left, self.right\n\n        elif right is None:\n\n            # only single value passed, could be an IntervalArray\n            # or array of Intervals\n            if not isinstance(left, (type(self), ABCIntervalIndex)):\n                left = type(self)(left)\n\n            left, right = left.left, left.right\n        else:\n\n            # both left and right are values\n            pass\n\n        closed = closed or self.closed\n        return self._simple_new(left, right, closed=closed, verify_integrity=False)",
        "begin_line": 669,
        "end_line": 707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.842514811212309e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.copy#709",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.copy(self)",
        "snippet": "    def copy(self):\n        \"\"\"\n        Return a copy of the array.\n\n        Returns\n        -------\n        IntervalArray\n        \"\"\"\n        left = self.left.copy(deep=True)\n        right = self.right.copy(deep=True)\n        closed = self.closed\n        # TODO: Could skip verify_integrity here.\n        return type(self).from_arrays(left, right, closed=closed)",
        "begin_line": 709,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.isna#723",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self.left)",
        "begin_line": 723,
        "end_line": 724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.take#735",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None, axis=None, **kwargs):\n        \"\"\"\n        Take elements from the IntervalArray.\n\n        Parameters\n        ----------\n        indices : sequence of integers\n            Indices to be taken.\n\n        allow_fill : bool, default False\n            How to handle negative values in `indices`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right (the default). This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate\n              missing values. These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n        fill_value : Interval or NA, optional\n            Fill value to use for NA-indices when `allow_fill` is True.\n            This may be ``None``, in which case the default NA value for\n            the type, ``self.dtype.na_value``, is used.\n\n            For many ExtensionArrays, there will be two representations of\n            `fill_value`: a user-facing \"boxed\" scalar, and a low-level\n            physical NA value. `fill_value` should be the user-facing version,\n            and the implementation should handle translating that to the\n            physical version for processing the take if necessary.\n\n        axis : any, default None\n            Present for compat with IntervalIndex; does nothing.\n\n        Returns\n        -------\n        IntervalArray\n\n        Raises\n        ------\n        IndexError\n            When the indices are out of bounds for the array.\n        ValueError\n            When `indices` contains negative values other than ``-1``\n            and `allow_fill` is True.\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n\n        fill_left = fill_right = fill_value\n        if allow_fill:\n            if fill_value is None:\n                fill_left = fill_right = self.left._na_value\n            elif is_interval(fill_value):\n                self._check_closed_matches(fill_value, name=\"fill_value\")\n                fill_left, fill_right = fill_value.left, fill_value.right\n            elif not is_scalar(fill_value) and notna(fill_value):\n                msg = (\n                    \"'IntervalArray.fillna' only supports filling with a \"\n                    \"'scalar pandas.Interval or NA'. Got a '{}' instead.\".format(\n                        type(fill_value).__name__\n                    )\n                )\n                raise ValueError(msg)\n\n        left_take = take(\n            self.left, indices, allow_fill=allow_fill, fill_value=fill_left\n        )\n        right_take = take(\n            self.right, indices, allow_fill=allow_fill, fill_value=fill_right\n        )\n\n        return self._shallow_copy(left_take, right_take)",
        "begin_line": 735,
        "end_line": 806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.left#887",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._left",
        "begin_line": 887,
        "end_line": 892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.right#895",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._right",
        "begin_line": 895,
        "end_line": 900,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.closed#903",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._closed",
        "begin_line": 903,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__array__#1020",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the IntervalArray's data as a numpy array of Interval\n        objects (with dtype='object')\n        \"\"\"\n        left = self.left\n        right = self.right\n        mask = self.isna()\n        closed = self._closed\n\n        result = np.empty(len(left), dtype=object)\n        for i in range(len(left)):\n            if mask[i]:\n                result[i] = np.nan\n            else:\n                result[i] = Interval(left[i], right[i], closed)\n        return result",
        "begin_line": 1020,
        "end_line": 1036,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.repeat#1068",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.repeat(self, repeats, axis=None)",
        "snippet": "    def repeat(self, repeats, axis=None):\n        nv.validate_repeat(tuple(), dict(axis=axis))\n        left_repeat = self.left.repeat(repeats)\n        right_repeat = self.right.repeat(repeats)\n        return self._shallow_copy(left=left_repeat, right=right_repeat)",
        "begin_line": 1068,
        "end_line": 1072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.interval.maybe_convert_platform_interval#1204",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval",
        "signature": "pandas.core.arrays.interval.maybe_convert_platform_interval(values)",
        "snippet": "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
        "begin_line": 1204,
        "end_line": 1228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#184",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, start=None, end=None, periods=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            freq, freq_infer = dtl.maybe_infer_freq(freq)\n            warnings.warn(\n                \"Creating a TimedeltaIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.timedelta_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            result = TimedeltaArray._generate_range(\n                start, end, periods, freq, closed=closed\n            )\n            return cls._simple_new(result._data, freq=freq, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            warnings.warn(\n                \"M and Y units are deprecated and \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        if isinstance(data, TimedeltaArray):\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name, freq=freq)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 184,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#258",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present\n        if not isinstance(values, TimedeltaArray):\n            values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n        else:\n            if freq is None:\n                freq = values.freq\n        assert isinstance(values, TimedeltaArray), type(values)\n        assert dtype == _TD_DTYPE, dtype\n        assert values.dtype == \"m8[ns]\", values.dtype\n\n        tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n        result = object.__new__(cls)\n        result._data = tdarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = tdarr._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 258,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__#321",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 321,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype#330",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # Have to repeat the check for 'timedelta64' (not ns) dtype\n            #  so that we can return a numeric index, since pandas will return\n            #  a TimedeltaIndex when dtype='timedelta'\n            result = self._data.astype(dtype, copy=copy)\n            if self.hasnans:\n                return Index(result, name=self.name)\n            return Index(result.astype(\"i8\"), name=self.name)\n        return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)",
        "begin_line": 330,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.get_loc#516",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n        if is_list_like(key) or (isinstance(key, datetime) and key is not NaT):\n            # GH#20464 datetime check here is to ensure we don't allow\n            #   datetime objects to be incorrectly treated as timedelta\n            #   objects; NaT is a special case because it plays a double role\n            #   as Not-A-Timedelta\n            raise TypeError\n\n        if isna(key):\n            key = NaT\n\n        if tolerance is not None:\n            # try converting tolerance now, so errors don't get swallowed by\n            # the try/except clauses below\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        if _is_convertible_to_td(key) or key is NaT:\n            key = Timedelta(key)\n            return Index.get_loc(self, key, method, tolerance)\n\n        try:\n            return Index.get_loc(self, key, method, tolerance)\n        except (KeyError, ValueError, TypeError):\n            try:\n                return self._get_string_slice(key)\n            except (TypeError, KeyError, ValueError):\n                pass\n\n            try:\n                stamp = Timedelta(key)\n                return Index.get_loc(self, stamp, method, tolerance)\n            except (KeyError, ValueError):\n                raise KeyError(key)",
        "begin_line": 516,
        "end_line": 555,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type#613",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"timedelta64\"",
        "begin_line": 613,
        "end_line": 614,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.is_all_dates#617",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 617,
        "end_line": 618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.insert#620",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n            If not either a Python datetime or a numpy integer-like, returned\n            Index dtype will be object rather than datetime.\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # try to convert if possible\n        if _is_convertible_to_td(item):\n            try:\n                item = Timedelta(item)\n            except ValueError:\n                # e.g. str that can't be parsed to timedelta\n                pass\n        elif is_scalar(item) and isna(item):\n            # GH 18295\n            item = self._na_value\n\n        freq = None\n        if isinstance(item, Timedelta) or (is_scalar(item) and isna(item)):\n\n            # check freq can be preserved on edge cases\n            if self.freq is not None:\n                if (loc == 0 or loc == -len(self)) and item + self.freq == self[0]:\n                    freq = self.freq\n                elif (loc == len(self)) and item - self.freq == self[-1]:\n                    freq = self.freq\n            item = Timedelta(item).asm8.view(_TD_DTYPE)\n\n        try:\n            new_tds = np.concatenate(\n                (self[:loc].asi8, [item.view(np.int64)], self[loc:].asi8)\n            )\n            return self._shallow_copy(new_tds, freq=freq)\n\n        except (AttributeError, TypeError):\n\n            # fall back to object index\n            if isinstance(item, str):\n                return self.astype(object).insert(loc, item)\n            raise TypeError(\"cannot insert TimedeltaIndex with incompatible label\")",
        "begin_line": 620,
        "end_line": 668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.timedelta_range#722",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas",
        "signature": "pandas.core.indexes.timedeltas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None)",
        "snippet": "def timedelta_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=None\n) -> TimedeltaIndex:\n    \"\"\"\n    Return a fixed frequency TimedeltaIndex, with day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or timedelta-like, default None\n        Left bound for generating timedeltas.\n    end : str or timedelta-like, default None\n        Right bound for generating timedeltas.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'.\n    name : str, default None\n        Name of the resulting TimedeltaIndex.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n\n    Returns\n    -------\n    rng : TimedeltaIndex\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.timedelta_range(start='1 day', periods=4)\n    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``closed`` parameter specifies which endpoint is included.  The default\n    behavior is to include both endpoints.\n\n    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')\n    TimedeltaIndex(['2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.\n    Only fixed frequencies can be passed, non-fixed frequencies such as\n    'M' (month end) will raise.\n\n    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\n    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                    '1 days 18:00:00', '2 days 00:00:00'],\n                   dtype='timedelta64[ns]', freq='6H')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\n    TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    freq, freq_infer = dtl.maybe_infer_freq(freq)\n    tdarr = TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)\n    return TimedeltaIndex._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 722,
        "end_line": 795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.boolean.BooleanDtype.construct_from_string#88",
        "src_path": "pandas/core/arrays/boolean.py",
        "class_name": "pandas.core.arrays.boolean.BooleanDtype",
        "signature": "pandas.core.arrays.boolean.BooleanDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"boolean\":\n            return cls()\n        return super().construct_from_string(string)",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000449034575662326,
            "pseudo_dstar_susp": 0.0004488330341113106,
            "pseudo_tarantula_susp": 0.0005844535359438924,
            "pseudo_op2_susp": 0.0004488330341113106,
            "pseudo_barinel_susp": 0.0005844535359438924
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#65",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\" standard evaluation \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 65,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#160",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#169",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                \"evaluating in Python space because the {op!r} \"\n                \"operator is not supported by numexpr for \"\n                \"the bool dtype, use {alt_op!r} instead\".format(\n                    op=op_str, alt_op=unsupported[op_str]\n                )\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                \"operator {op!r} not implemented for bool dtypes\".format(op=op_str)\n            )\n    return True",
        "begin_line": 169,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#193",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 193,
        "end_line": 211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.__init__#89",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.__init__(self, values: np.ndarray, index, level=-1, value_columns=None, fill_value=None, constructor=None)",
        "snippet": "    def __init__(\n        self,\n        values: np.ndarray,\n        index,\n        level=-1,\n        value_columns=None,\n        fill_value=None,\n        constructor=None,\n    ):\n\n        if values.ndim == 1:\n            values = values[:, np.newaxis]\n        self.values = values\n        self.value_columns = value_columns\n        self.fill_value = fill_value\n\n        if constructor is None:\n            constructor = DataFrame\n        self.constructor = constructor\n\n        if value_columns is None and values.shape[1] != 1:  # pragma: no cover\n            raise ValueError(\"must pass column labels for multi-column data\")\n\n        self.index = index.remove_unused_levels()\n\n        self.level = self.index._get_level_number(level)\n\n        # when index includes `nan`, need to lift levels/strides by 1\n        self.lift = 1 if -1 in self.index.codes[self.level] else 0\n\n        self.new_index_levels = list(self.index.levels)\n        self.new_index_names = list(self.index.names)\n\n        self.removed_name = self.new_index_names.pop(self.level)\n        self.removed_level = self.new_index_levels.pop(self.level)\n        self.removed_level_full = index.levels[self.level]\n\n        # Bug fix GH 20601\n        # If the data frame is too big, the number of unique index combination\n        # will cause int32 overflow on windows environments.\n        # We want to check and raise an error before this happens\n        num_rows = np.max([index_level.size for index_level in self.new_index_levels])\n        num_columns = self.removed_level.size\n\n        # GH20601: This forces an overflow if the number of cells is too high.\n        num_cells = np.multiply(num_rows, num_columns, dtype=np.int32)\n\n        if num_rows > 0 and num_columns > 0 and num_cells <= 0:\n            raise ValueError(\"Unstacked DataFrame is too big, causing int32 overflow\")\n\n        self._make_sorted_values_labels()\n        self._make_selectors()",
        "begin_line": 89,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker._make_sorted_values_labels#142",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker._make_sorted_values_labels(self)",
        "snippet": "    def _make_sorted_values_labels(self):\n        v = self.level\n\n        codes = list(self.index.codes)\n        levs = list(self.index.levels)\n        to_sort = codes[:v] + codes[v + 1 :] + [codes[v]]\n        sizes = [len(x) for x in levs[:v] + levs[v + 1 :] + [levs[v]]]\n\n        comp_index, obs_ids = get_compressed_ids(to_sort, sizes)\n        ngroups = len(obs_ids)\n\n        indexer = libalgos.groupsort_indexer(comp_index, ngroups)[0]\n        indexer = ensure_platform_int(indexer)\n\n        self.sorted_values = algos.take_nd(self.values, indexer, axis=0)\n        self.sorted_labels = [l.take(indexer) for l in to_sort]",
        "begin_line": 142,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker._make_selectors#159",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker._make_selectors(self)",
        "snippet": "    def _make_selectors(self):\n        new_levels = self.new_index_levels\n\n        # make the mask\n        remaining_labels = self.sorted_labels[:-1]\n        level_sizes = [len(x) for x in new_levels]\n\n        comp_index, obs_ids = get_compressed_ids(remaining_labels, level_sizes)\n        ngroups = len(obs_ids)\n\n        comp_index = ensure_platform_int(comp_index)\n        stride = self.index.levshape[self.level] + self.lift\n        self.full_shape = ngroups, stride\n\n        selector = self.sorted_labels[-1] + stride * comp_index + self.lift\n        mask = np.zeros(np.prod(self.full_shape), dtype=bool)\n        mask.put(selector, True)\n\n        if mask.sum() < len(self.index):\n            raise ValueError(\"Index contains duplicate entries, cannot reshape\")\n\n        self.group_index = comp_index\n        self.mask = mask\n        self.unique_groups = obs_ids\n        self.compressor = comp_index.searchsorted(np.arange(ngroups))",
        "begin_line": 159,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_result#185",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_result(self)",
        "snippet": "    def get_result(self):\n        values, _ = self.get_new_values()\n        columns = self.get_new_columns()\n        index = self.get_new_index()\n\n        return self.constructor(values, index=index, columns=columns)",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.396449704142012e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_new_values#192",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_new_values(self)",
        "snippet": "    def get_new_values(self):\n        values = self.values\n\n        # place the values\n        length, width = self.full_shape\n        stride = values.shape[1]\n        result_width = width * stride\n        result_shape = (length, result_width)\n        mask = self.mask\n        mask_all = mask.all()\n\n        # we can simply reshape if we don't have a mask\n        if mask_all and len(values):\n            new_values = (\n                self.sorted_values.reshape(length, width, stride)\n                .swapaxes(1, 2)\n                .reshape(result_shape)\n            )\n            new_mask = np.ones(result_shape, dtype=bool)\n            return new_values, new_mask\n\n        # if our mask is all True, then we can use our existing dtype\n        if mask_all:\n            dtype = values.dtype\n            new_values = np.empty(result_shape, dtype=dtype)\n        else:\n            dtype, fill_value = maybe_promote(values.dtype, self.fill_value)\n            new_values = np.empty(result_shape, dtype=dtype)\n            new_values.fill(fill_value)\n\n        new_mask = np.zeros(result_shape, dtype=bool)\n\n        name = np.dtype(dtype).name\n        sorted_values = self.sorted_values\n\n        # we need to convert to a basic dtype\n        # and possibly coerce an input to our output dtype\n        # e.g. ints -> floats\n        if needs_i8_conversion(values):\n            sorted_values = sorted_values.view(\"i8\")\n            new_values = new_values.view(\"i8\")\n            name = \"int64\"\n        elif is_bool_dtype(values):\n            sorted_values = sorted_values.astype(\"object\")\n            new_values = new_values.astype(\"object\")\n            name = \"object\"\n        else:\n            sorted_values = sorted_values.astype(name, copy=False)\n\n        # fill in our values & mask\n        libreshape.unstack(\n            sorted_values,\n            mask.view(\"u1\"),\n            stride,\n            length,\n            width,\n            new_values,\n            new_mask.view(\"u1\"),\n        )\n\n        # reconstruct dtype if needed\n        if needs_i8_conversion(values):\n            new_values = new_values.view(values.dtype)\n\n        return new_values, new_mask",
        "begin_line": 192,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_new_columns#258",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_new_columns(self)",
        "snippet": "    def get_new_columns(self):\n        if self.value_columns is None:\n            if self.lift == 0:\n                return self.removed_level._shallow_copy(name=self.removed_name)\n\n            lev = self.removed_level.insert(0, item=self.removed_level._na_value)\n            return lev.rename(self.removed_name)\n\n        stride = len(self.removed_level) + self.lift\n        width = len(self.value_columns)\n        propagator = np.repeat(np.arange(width), stride)\n        if isinstance(self.value_columns, MultiIndex):\n            new_levels = self.value_columns.levels + (self.removed_level_full,)\n            new_names = self.value_columns.names + (self.removed_name,)\n\n            new_codes = [lab.take(propagator) for lab in self.value_columns.codes]\n        else:\n            new_levels = [self.value_columns, self.removed_level_full]\n            new_names = [self.value_columns.name, self.removed_name]\n            new_codes = [propagator]\n\n        # The two indices differ only if the unstacked level had unused items:\n        if len(self.removed_level_full) != len(self.removed_level):\n            # In this case, we remap the new codes to the original level:\n            repeater = self.removed_level_full.get_indexer(self.removed_level)\n            if self.lift:\n                repeater = np.insert(repeater, 0, -1)\n        else:\n            # Otherwise, we just use each level item exactly once:\n            repeater = np.arange(stride) - self.lift\n\n        # The entire level is then just a repetition of the single chunk:\n        new_codes.append(np.tile(repeater, width))\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )",
        "begin_line": 258,
        "end_line": 293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._Unstacker.get_new_index#295",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape._Unstacker",
        "signature": "pandas.core.reshape.reshape._Unstacker.get_new_index(self)",
        "snippet": "    def get_new_index(self):\n        result_codes = [lab.take(self.compressor) for lab in self.sorted_labels[:-1]]\n\n        # construct the new index\n        if len(self.new_index_levels) == 1:\n            level, level_codes = self.new_index_levels[0], result_codes[0]\n            if (level_codes == -1).any():\n                level = level.insert(len(level), level._na_value)\n            return level.take(level_codes).rename(self.new_index_names[0])\n\n        return MultiIndex(\n            levels=self.new_index_levels,\n            codes=result_codes,\n            names=self.new_index_names,\n            verify_integrity=False,\n        )",
        "begin_line": 295,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_multiple#313",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_multiple(data, clocs, fill_value=None)",
        "snippet": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked",
        "begin_line": 313,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.unstack#394",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.unstack(obj, level, fill_value=None)",
        "snippet": "def unstack(obj, level, fill_value=None):\n    if isinstance(level, (tuple, list)):\n        if len(level) != 1:\n            # _unstack_multiple only handles MultiIndexes,\n            # and isn't needed for a single level\n            return _unstack_multiple(obj, level, fill_value=fill_value)\n        else:\n            level = level[0]\n\n    # Prioritize integer interpretation (GH #21677):\n    if not is_integer(level) and not level == \"__placeholder__\":\n        level = obj.index._get_level_number(level)\n\n    if isinstance(obj, DataFrame):\n        if isinstance(obj.index, MultiIndex):\n            return _unstack_frame(obj, level, fill_value=fill_value)\n        else:\n            return obj.T.stack(dropna=False)\n    else:\n        if is_extension_array_dtype(obj.dtype):\n            return _unstack_extension_series(obj, level, fill_value)\n        unstacker = _Unstacker(\n            obj.values,\n            obj.index,\n            level=level,\n            fill_value=fill_value,\n            constructor=obj._constructor_expanddim,\n        )\n        return unstacker.get_result()",
        "begin_line": 394,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_frame#425",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_frame(obj, level, fill_value=None)",
        "snippet": "def _unstack_frame(obj, level, fill_value=None):\n    if obj._is_mixed_type:\n        unstacker = partial(\n            _Unstacker, index=obj.index, level=level, fill_value=fill_value\n        )\n        blocks = obj._data.unstack(unstacker, fill_value=fill_value)\n        return obj._constructor(blocks)\n    else:\n        unstacker = _Unstacker(\n            obj.values,\n            obj.index,\n            level=level,\n            value_columns=obj.columns,\n            fill_value=fill_value,\n            constructor=obj._constructor,\n        )\n        return unstacker.get_result()",
        "begin_line": 425,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._unstack_extension_series#444",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._unstack_extension_series(series, level, fill_value)",
        "snippet": "def _unstack_extension_series(series, level, fill_value):\n    \"\"\"\n    Unstack an ExtensionArray-backed Series.\n\n    The ExtensionDtype is preserved.\n\n    Parameters\n    ----------\n    series : Series\n        A Series with an ExtensionArray for values\n    level : Any\n        The level name or number.\n    fill_value : Any\n        The user-level (not physical storage) fill value to use for\n        missing values introduced by the reshape. Passed to\n        ``series.values.take``.\n\n    Returns\n    -------\n    DataFrame\n        Each column of the DataFrame will have the same dtype as\n        the input Series.\n    \"\"\"\n    # Implementation note: the basic idea is to\n    # 1. Do a regular unstack on a dummy array of integers\n    # 2. Followup with a columnwise take.\n    # We use the dummy take to discover newly-created missing values\n    # introduced by the reshape.\n    from pandas.core.reshape.concat import concat\n\n    dummy_arr = np.arange(len(series))\n    # fill_value=-1, since we will do a series.values.take later\n    result = _Unstacker(\n        dummy_arr, series.index, level=level, fill_value=-1\n    ).get_result()\n\n    out = []\n    values = extract_array(series, extract_numpy=False)\n\n    for col, indices in result.items():\n        out.append(\n            Series(\n                values.take(indices.values, allow_fill=True, fill_value=fill_value),\n                name=col,\n                index=result.index,\n            )\n        )\n    return concat(out, axis=\"columns\", copy=False, keys=result.columns)",
        "begin_line": 444,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.stack#494",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.stack(frame, level=-1, dropna=True)",
        "snippet": "def stack(frame, level=-1, dropna=True):\n    \"\"\"\n    Convert DataFrame to Series with multi-level Index. Columns become the\n    second level of the resulting hierarchical index\n\n    Returns\n    -------\n    stacked : Series\n    \"\"\"\n\n    def factorize(index):\n        if index.is_unique:\n            return index, np.arange(len(index))\n        codes, categories = factorize_from_iterable(index)\n        return categories, codes\n\n    N, K = frame.shape\n\n    # Will also convert negative level numbers and check if out of bounds.\n    level_num = frame.columns._get_level_number(level)\n\n    if isinstance(frame.columns, MultiIndex):\n        return _stack_multi_columns(frame, level_num=level_num, dropna=dropna)\n    elif isinstance(frame.index, MultiIndex):\n        new_levels = list(frame.index.levels)\n        new_codes = [lab.repeat(K) for lab in frame.index.codes]\n\n        clev, clab = factorize(frame.columns)\n        new_levels.append(clev)\n        new_codes.append(np.tile(clab, N).ravel())\n\n        new_names = list(frame.index.names)\n        new_names.append(frame.columns.name)\n        new_index = MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )\n    else:\n        levels, (ilab, clab) = zip(*map(factorize, (frame.index, frame.columns)))\n        codes = ilab.repeat(K), np.tile(clab, N).ravel()\n        new_index = MultiIndex(\n            levels=levels,\n            codes=codes,\n            names=[frame.index.name, frame.columns.name],\n            verify_integrity=False,\n        )\n\n    if frame._is_homogeneous_type:\n        # For homogeneous EAs, frame.values will coerce to object. So\n        # we concatenate instead.\n        dtypes = list(frame.dtypes.values)\n        dtype = dtypes[0]\n\n        if is_extension_array_dtype(dtype):\n            arr = dtype.construct_array_type()\n            new_values = arr._concat_same_type(\n                [col._values for _, col in frame.items()]\n            )\n            new_values = _reorder_for_extension_array_stack(new_values, N, K)\n        else:\n            # homogeneous, non-EA\n            new_values = frame.values.ravel()\n\n    else:\n        # non-homogeneous\n        new_values = frame.values.ravel()\n\n    if dropna:\n        mask = notna(new_values)\n        new_values = new_values[mask]\n        new_index = new_index[mask]\n\n    return frame._constructor_sliced(new_values, index=new_index)",
        "begin_line": 494,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.factorize#504",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.factorize(index)",
        "snippet": "    def factorize(index):\n        if index.is_unique:\n            return index, np.arange(len(index))\n        codes, categories = factorize_from_iterable(index)\n        return categories, codes",
        "begin_line": 504,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.get_dummies#751",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.get_dummies(data, prefix=None, prefix_sep='_', dummy_na=False, columns=None, sparse=False, drop_first=False, dtype=None)",
        "snippet": "def get_dummies(\n    data,\n    prefix=None,\n    prefix_sep=\"_\",\n    dummy_na=False,\n    columns=None,\n    sparse=False,\n    drop_first=False,\n    dtype=None,\n):\n    \"\"\"\n    Convert categorical variable into dummy/indicator variables.\n\n    Parameters\n    ----------\n    data : array-like, Series, or DataFrame\n        Data of which to get dummy indicators.\n    prefix : str, list of str, or dict of str, default None\n        String to append DataFrame column names.\n        Pass a list with length equal to the number of columns\n        when calling get_dummies on a DataFrame. Alternatively, `prefix`\n        can be a dictionary mapping column names to prefixes.\n    prefix_sep : str, default '_'\n        If appending prefix, separator/delimiter to use. Or pass a\n        list or dictionary as with `prefix`.\n    dummy_na : bool, default False\n        Add a column to indicate NaNs, if False NaNs are ignored.\n    columns : list-like, default None\n        Column names in the DataFrame to be encoded.\n        If `columns` is None then all the columns with\n        `object` or `category` dtype will be converted.\n    sparse : bool, default False\n        Whether the dummy-encoded columns should be backed by\n        a :class:`SparseArray` (True) or a regular NumPy array (False).\n    drop_first : bool, default False\n        Whether to get k-1 dummies out of k categorical levels by removing the\n        first level.\n    dtype : dtype, default np.uint8\n        Data type for new columns. Only a single dtype is allowed.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n        Dummy-coded data.\n\n    See Also\n    --------\n    Series.str.get_dummies : Convert Series to dummy codes.\n\n    Examples\n    --------\n    >>> s = pd.Series(list('abca'))\n\n    >>> pd.get_dummies(s)\n       a  b  c\n    0  1  0  0\n    1  0  1  0\n    2  0  0  1\n    3  1  0  0\n\n    >>> s1 = ['a', 'b', np.nan]\n\n    >>> pd.get_dummies(s1)\n       a  b\n    0  1  0\n    1  0  1\n    2  0  0\n\n    >>> pd.get_dummies(s1, dummy_na=True)\n       a  b  NaN\n    0  1  0    0\n    1  0  1    0\n    2  0  0    1\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'a'], 'B': ['b', 'a', 'c'],\n    ...                    'C': [1, 2, 3]})\n\n    >>> pd.get_dummies(df, prefix=['col1', 'col2'])\n       C  col1_a  col1_b  col2_a  col2_b  col2_c\n    0  1       1       0       0       1       0\n    1  2       0       1       1       0       0\n    2  3       1       0       0       0       1\n\n    >>> pd.get_dummies(pd.Series(list('abcaa')))\n       a  b  c\n    0  1  0  0\n    1  0  1  0\n    2  0  0  1\n    3  1  0  0\n    4  1  0  0\n\n    >>> pd.get_dummies(pd.Series(list('abcaa')), drop_first=True)\n       b  c\n    0  0  0\n    1  1  0\n    2  0  1\n    3  0  0\n    4  0  0\n\n    >>> pd.get_dummies(pd.Series(list('abc')), dtype=float)\n         a    b    c\n    0  1.0  0.0  0.0\n    1  0.0  1.0  0.0\n    2  0.0  0.0  1.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    dtypes_to_encode = [\"object\", \"category\"]\n\n    if isinstance(data, DataFrame):\n        # determine columns being encoded\n        if columns is None:\n            data_to_encode = data.select_dtypes(include=dtypes_to_encode)\n        elif not is_list_like(columns):\n            raise TypeError(\"Input must be a list-like for parameter `columns`\")\n        else:\n            data_to_encode = data[columns]\n\n        # validate prefixes and separator to avoid silently dropping cols\n        def check_len(item, name):\n            len_msg = (\n                \"Length of '{name}' ({len_item}) did not match the \"\n                \"length of the columns being encoded ({len_enc}).\"\n            )\n\n            if is_list_like(item):\n                if not len(item) == data_to_encode.shape[1]:\n                    len_msg = len_msg.format(\n                        name=name, len_item=len(item), len_enc=data_to_encode.shape[1]\n                    )\n                    raise ValueError(len_msg)\n\n        check_len(prefix, \"prefix\")\n        check_len(prefix_sep, \"prefix_sep\")\n\n        if isinstance(prefix, str):\n            prefix = itertools.cycle([prefix])\n        if isinstance(prefix, dict):\n            prefix = [prefix[col] for col in data_to_encode.columns]\n\n        if prefix is None:\n            prefix = data_to_encode.columns\n\n        # validate separators\n        if isinstance(prefix_sep, str):\n            prefix_sep = itertools.cycle([prefix_sep])\n        elif isinstance(prefix_sep, dict):\n            prefix_sep = [prefix_sep[col] for col in data_to_encode.columns]\n\n        if data_to_encode.shape == data.shape:\n            # Encoding the entire df, do not prepend any dropped columns\n            with_dummies = []\n        elif columns is not None:\n            # Encoding only cols specified in columns. Get all cols not in\n            # columns to prepend to result.\n            with_dummies = [data.drop(columns, axis=1)]\n        else:\n            # Encoding only object and category dtype columns. Get remaining\n            # columns to prepend to result.\n            with_dummies = [data.select_dtypes(exclude=dtypes_to_encode)]\n\n        for (col, pre, sep) in zip(data_to_encode.items(), prefix, prefix_sep):\n            # col is (column_name, column), use just column data here\n            dummy = _get_dummies_1d(\n                col[1],\n                prefix=pre,\n                prefix_sep=sep,\n                dummy_na=dummy_na,\n                sparse=sparse,\n                drop_first=drop_first,\n                dtype=dtype,\n            )\n            with_dummies.append(dummy)\n        result = concat(with_dummies, axis=1)\n    else:\n        result = _get_dummies_1d(\n            data,\n            prefix,\n            prefix_sep,\n            dummy_na,\n            sparse=sparse,\n            drop_first=drop_first,\n            dtype=dtype,\n        )\n    return result",
        "begin_line": 751,
        "end_line": 937,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.check_len#872",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.check_len(item, name)",
        "snippet": "        def check_len(item, name):\n            len_msg = (\n                \"Length of '{name}' ({len_item}) did not match the \"\n                \"length of the columns being encoded ({len_enc}).\"\n            )\n\n            if is_list_like(item):\n                if not len(item) == data_to_encode.shape[1]:\n                    len_msg = len_msg.format(\n                        name=name, len_item=len(item), len_enc=data_to_encode.shape[1]\n                    )\n                    raise ValueError(len_msg)",
        "begin_line": 872,
        "end_line": 883,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._get_dummies_1d#940",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._get_dummies_1d(data, prefix, prefix_sep='_', dummy_na=False, sparse=False, drop_first=False, dtype=None)",
        "snippet": "def _get_dummies_1d(\n    data,\n    prefix,\n    prefix_sep=\"_\",\n    dummy_na=False,\n    sparse=False,\n    drop_first=False,\n    dtype=None,\n):\n    from pandas.core.reshape.concat import concat\n\n    # Series avoids inconsistent NaN handling\n    codes, levels = factorize_from_iterable(Series(data))\n\n    if dtype is None:\n        dtype = np.uint8\n    dtype = np.dtype(dtype)\n\n    if is_object_dtype(dtype):\n        raise ValueError(\"dtype=object is not a valid dtype for get_dummies\")\n\n    def get_empty_frame(data) -> DataFrame:\n        if isinstance(data, Series):\n            index = data.index\n        else:\n            index = np.arange(len(data))\n        return DataFrame(index=index)\n\n    # if all NaN\n    if not dummy_na and len(levels) == 0:\n        return get_empty_frame(data)\n\n    codes = codes.copy()\n    if dummy_na:\n        codes[codes == -1] = len(levels)\n        levels = np.append(levels, np.nan)\n\n    # if dummy_na, we just fake a nan level. drop_first will drop it again\n    if drop_first and len(levels) == 1:\n        return get_empty_frame(data)\n\n    number_of_cols = len(levels)\n\n    if prefix is None:\n        dummy_cols = levels\n    else:\n\n        # PY2 embedded unicode, gh-22084\n        def _make_col_name(prefix, prefix_sep, level) -> str:\n            fstr = \"{prefix}{prefix_sep}{level}\"\n            return fstr.format(prefix=prefix, prefix_sep=prefix_sep, level=level)\n\n        dummy_cols = [_make_col_name(prefix, prefix_sep, level) for level in levels]\n\n    if isinstance(data, Series):\n        index = data.index\n    else:\n        index = None\n\n    if sparse:\n\n        if is_integer_dtype(dtype):\n            fill_value = 0\n        elif dtype == bool:\n            fill_value = False\n        else:\n            fill_value = 0.0\n\n        sparse_series = []\n        N = len(data)\n        sp_indices = [[] for _ in range(len(dummy_cols))]\n        mask = codes != -1\n        codes = codes[mask]\n        n_idx = np.arange(N)[mask]\n\n        for ndx, code in zip(n_idx, codes):\n            sp_indices[code].append(ndx)\n\n        if drop_first:\n            # remove first categorical level to avoid perfect collinearity\n            # GH12042\n            sp_indices = sp_indices[1:]\n            dummy_cols = dummy_cols[1:]\n        for col, ixs in zip(dummy_cols, sp_indices):\n            sarr = SparseArray(\n                np.ones(len(ixs), dtype=dtype),\n                sparse_index=IntIndex(N, ixs),\n                fill_value=fill_value,\n                dtype=dtype,\n            )\n            sparse_series.append(Series(data=sarr, index=index, name=col))\n\n        out = concat(sparse_series, axis=1, copy=False)\n        return out\n\n    else:\n        dummy_mat = np.eye(number_of_cols, dtype=dtype).take(codes, axis=0)\n\n        if not dummy_na:\n            # reset NaN GH4446\n            dummy_mat[codes == -1] = 0\n\n        if drop_first:\n            # remove first GH12042\n            dummy_mat = dummy_mat[:, 1:]\n            dummy_cols = dummy_cols[1:]\n        return DataFrame(dummy_mat, index=index, columns=dummy_cols)",
        "begin_line": 940,
        "end_line": 1046,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape.get_empty_frame#961",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape.get_empty_frame(data)",
        "snippet": "    def get_empty_frame(data) -> DataFrame:\n        if isinstance(data, Series):\n            index = data.index\n        else:\n            index = np.arange(len(data))\n        return DataFrame(index=index)",
        "begin_line": 961,
        "end_line": 966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.reshape._make_col_name#988",
        "src_path": "pandas/core/reshape/reshape.py",
        "class_name": "pandas.core.reshape.reshape",
        "signature": "pandas.core.reshape.reshape._make_col_name(prefix, prefix_sep, level)",
        "snippet": "        def _make_col_name(prefix, prefix_sep, level) -> str:\n            fstr = \"{prefix}{prefix_sep}{level}\"\n            return fstr.format(prefix=prefix, prefix_sep=prefix_sep, level=level)",
        "begin_line": 988,
        "end_line": 990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.843137254901961e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.melt.melt#25",
        "src_path": "pandas/core/reshape/melt.py",
        "class_name": "pandas.core.reshape.melt",
        "signature": "pandas.core.reshape.melt.melt(frame: DataFrame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
        "snippet": "def melt(\n    frame: DataFrame,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n) -> DataFrame:\n    # TODO: what about the existing index?\n    # If multiindex, gather names of columns on all level for checking presence\n    # of `id_vars` and `value_vars`\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n\n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n            raise ValueError(\n                \"id_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            # Check that `id_vars` are in frame\n            id_vars = list(id_vars)\n            missing = Index(com.flatten(id_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'id_vars' are not present\"\n                    \" in the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n    else:\n        id_vars = []\n\n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(\n            value_vars, list\n        ):\n            raise ValueError(\n                \"value_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            value_vars = list(value_vars)\n            # Check that `value_vars` are in frame\n            missing = Index(com.flatten(value_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'value_vars' are not present in\"\n                    \" the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()\n\n    if col_level is not None:  # allow list or other?\n        # frame is a copy\n        frame.columns = frame.columns.get_level_values(col_level)\n\n    if var_name is None:\n        if isinstance(frame.columns, ABCMultiIndex):\n            if len(frame.columns.names) == len(set(frame.columns.names)):\n                var_name = frame.columns.names\n            else:\n                var_name = [\n                    \"variable_{i}\".format(i=i) for i in range(len(frame.columns.names))\n                ]\n        else:\n            var_name = [\n                frame.columns.name if frame.columns.name is not None else \"variable\"\n            ]\n    if isinstance(var_name, str):\n        var_name = [var_name]\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {}\n    for col in id_vars:\n        id_data = frame.pop(col)\n        if is_extension_array_dtype(id_data):\n            id_data = concat([id_data] * K, ignore_index=True)\n        else:\n            id_data = np.tile(id_data.values, K)\n        mdata[col] = id_data\n\n    mcolumns = id_vars + var_name + [value_name]\n\n    mdata[value_name] = frame.values.ravel(\"F\")\n    for i, col in enumerate(var_name):\n        # asanyarray will keep the columns as an Index\n        mdata[col] = np.asanyarray(frame.columns._get_level_values(i)).repeat(N)\n\n    return frame._constructor(mdata, columns=mcolumns)",
        "begin_line": 25,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.melt.lreshape#125",
        "src_path": "pandas/core/reshape/melt.py",
        "class_name": "pandas.core.reshape.melt",
        "signature": "pandas.core.reshape.melt.lreshape(data: DataFrame, groups, dropna: bool=True, label=None)",
        "snippet": "def lreshape(data: DataFrame, groups, dropna: bool = True, label=None) -> DataFrame:\n    \"\"\"\n    Reshape long-format data to wide. Generalized inverse of DataFrame.pivot\n\n    Parameters\n    ----------\n    data : DataFrame\n    groups : dict\n        {new_name : list_of_columns}\n    dropna : boolean, default True\n    label : object, default None\n        Dummy kwarg, not used.\n\n    Examples\n    --------\n    >>> data = pd.DataFrame({'hr1': [514, 573], 'hr2': [545, 526],\n    ...                      'team': ['Red Sox', 'Yankees'],\n    ...                      'year1': [2007, 2007], 'year2': [2008, 2008]})\n    >>> data\n       hr1  hr2     team  year1  year2\n    0  514  545  Red Sox   2007   2008\n    1  573  526  Yankees   2007   2008\n\n    >>> pd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})\n          team  year   hr\n    0  Red Sox  2007  514\n    1  Yankees  2007  573\n    2  Red Sox  2008  545\n    3  Yankees  2008  526\n\n    Returns\n    -------\n    reshaped : DataFrame\n    \"\"\"\n    if isinstance(groups, dict):\n        keys = list(groups.keys())\n        values = list(groups.values())\n    else:\n        keys, values = zip(*groups)\n\n    all_cols = list(set.union(*[set(x) for x in values]))\n    id_cols = list(data.columns.difference(all_cols))\n\n    K = len(values[0])\n\n    for seq in values:\n        if len(seq) != K:\n            raise ValueError(\"All column lists must be same length\")\n\n    mdata = {}\n    pivot_cols = []\n\n    for target, names in zip(keys, values):\n        to_concat = [data[col].values for col in names]\n\n        mdata[target] = concat_compat(to_concat)\n        pivot_cols.append(target)\n\n    for col in id_cols:\n        mdata[col] = np.tile(data[col].values, K)\n\n    if dropna:\n        mask = np.ones(len(mdata[pivot_cols[0]]), dtype=bool)\n        for c in pivot_cols:\n            mask &= notna(mdata[c])\n        if not mask.all():\n            mdata = {k: v[mask] for k, v in mdata.items()}\n\n    return data._constructor(mdata, columns=id_cols + pivot_cols)",
        "begin_line": 125,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.melt.wide_to_long#196",
        "src_path": "pandas/core/reshape/melt.py",
        "class_name": "pandas.core.reshape.melt",
        "signature": "pandas.core.reshape.melt.wide_to_long(df: DataFrame, stubnames, i, j, sep: str='', suffix: str='\\\\d+')",
        "snippet": "def wide_to_long(df: DataFrame, stubnames, i, j, sep: str = \"\", suffix: str = r\"\\d+\"):\n    r\"\"\"\n    Wide panel to long format. Less flexible but more user-friendly than melt.\n\n    With stubnames ['A', 'B'], this function expects to find one or more\n    group of columns with format\n    A-suffix1, A-suffix2,..., B-suffix1, B-suffix2,...\n    You specify what you want to call this suffix in the resulting long format\n    with `j` (for example `j='year'`)\n\n    Each row of these wide variables are assumed to be uniquely identified by\n    `i` (can be a single column name or a list of column names)\n\n    All remaining variables in the data frame are left intact.\n\n    Parameters\n    ----------\n    df : DataFrame\n        The wide-format DataFrame.\n    stubnames : str or list-like\n        The stub name(s). The wide format variables are assumed to\n        start with the stub names.\n    i : str or list-like\n        Column(s) to use as id variable(s).\n    j : str\n        The name of the sub-observation variable. What you wish to name your\n        suffix in the long format.\n    sep : str, default \"\"\n        A character indicating the separation of the variable names\n        in the wide format, to be stripped from the names in the long format.\n        For example, if your column names are A-suffix1, A-suffix2, you\n        can strip the hyphen by specifying `sep='-'`.\n    suffix : str, default '\\\\d+'\n        A regular expression capturing the wanted suffixes. '\\\\d+' captures\n        numeric suffixes. Suffixes with no numbers could be specified with the\n        negated character class '\\\\D+'. You can also further disambiguate\n        suffixes, for example, if your wide variables are of the form\n        A-one, B-two,.., and you have an unrelated column A-rating, you can\n        ignore the last one by specifying `suffix='(!?one|two)'`.\n\n        .. versionchanged:: 0.23.0\n            When all suffixes are numeric, they are cast to int64/float64.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame that contains each stub name as a variable, with new index\n        (i, j).\n\n    Notes\n    -----\n    All extra variables are left untouched. This simply uses\n    `pandas.melt` under the hood, but is hard-coded to \"do the right thing\"\n    in a typical case.\n\n    Examples\n    --------\n    >>> np.random.seed(123)\n    >>> df = pd.DataFrame({\"A1970\" : {0 : \"a\", 1 : \"b\", 2 : \"c\"},\n    ...                    \"A1980\" : {0 : \"d\", 1 : \"e\", 2 : \"f\"},\n    ...                    \"B1970\" : {0 : 2.5, 1 : 1.2, 2 : .7},\n    ...                    \"B1980\" : {0 : 3.2, 1 : 1.3, 2 : .1},\n    ...                    \"X\"     : dict(zip(range(3), np.random.randn(3)))\n    ...                   })\n    >>> df[\"id\"] = df.index\n    >>> df\n      A1970 A1980  B1970  B1980         X  id\n    0     a     d    2.5    3.2 -1.085631   0\n    1     b     e    1.2    1.3  0.997345   1\n    2     c     f    0.7    0.1  0.282978   2\n    >>> pd.wide_to_long(df, [\"A\", \"B\"], i=\"id\", j=\"year\")\n    ... # doctest: +NORMALIZE_WHITESPACE\n                    X  A    B\n    id year\n    0  1970 -1.085631  a  2.5\n    1  1970  0.997345  b  1.2\n    2  1970  0.282978  c  0.7\n    0  1980 -1.085631  d  3.2\n    1  1980  0.997345  e  1.3\n    2  1980  0.282978  f  0.1\n\n    With multiple id columns\n\n    >>> df = pd.DataFrame({\n    ...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n    ...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n    ...     'ht1': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n    ...     'ht2': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n    ... })\n    >>> df\n       famid  birth  ht1  ht2\n    0      1      1  2.8  3.4\n    1      1      2  2.9  3.8\n    2      1      3  2.2  2.9\n    3      2      1  2.0  3.2\n    4      2      2  1.8  2.8\n    5      2      3  1.9  2.4\n    6      3      1  2.2  3.3\n    7      3      2  2.3  3.4\n    8      3      3  2.1  2.9\n    >>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age')\n    >>> l\n    ... # doctest: +NORMALIZE_WHITESPACE\n                      ht\n    famid birth age\n    1     1     1    2.8\n                2    3.4\n          2     1    2.9\n                2    3.8\n          3     1    2.2\n                2    2.9\n    2     1     1    2.0\n                2    3.2\n          2     1    1.8\n                2    2.8\n          3     1    1.9\n                2    2.4\n    3     1     1    2.2\n                2    3.3\n          2     1    2.3\n                2    3.4\n          3     1    2.1\n                2    2.9\n\n    Going from long back to wide just takes some creative use of `unstack`\n\n    >>> w = l.unstack()\n    >>> w.columns = w.columns.map('{0[0]}{0[1]}'.format)\n    >>> w.reset_index()\n       famid  birth  ht1  ht2\n    0      1      1  2.8  3.4\n    1      1      2  2.9  3.8\n    2      1      3  2.2  2.9\n    3      2      1  2.0  3.2\n    4      2      2  1.8  2.8\n    5      2      3  1.9  2.4\n    6      3      1  2.2  3.3\n    7      3      2  2.3  3.4\n    8      3      3  2.1  2.9\n\n    Less wieldy column names are also handled\n\n    >>> np.random.seed(0)\n    >>> df = pd.DataFrame({'A(weekly)-2010': np.random.rand(3),\n    ...                    'A(weekly)-2011': np.random.rand(3),\n    ...                    'B(weekly)-2010': np.random.rand(3),\n    ...                    'B(weekly)-2011': np.random.rand(3),\n    ...                    'X' : np.random.randint(3, size=3)})\n    >>> df['id'] = df.index\n    >>> df # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS\n       A(weekly)-2010  A(weekly)-2011  B(weekly)-2010  B(weekly)-2011  X  id\n    0        0.548814        0.544883        0.437587        0.383442  0   0\n    1        0.715189        0.423655        0.891773        0.791725  1   1\n    2        0.602763        0.645894        0.963663        0.528895  1   2\n\n    >>> pd.wide_to_long(df, ['A(weekly)', 'B(weekly)'], i='id',\n    ...                 j='year', sep='-')\n    ... # doctest: +NORMALIZE_WHITESPACE\n             X  A(weekly)  B(weekly)\n    id year\n    0  2010  0   0.548814   0.437587\n    1  2010  1   0.715189   0.891773\n    2  2010  1   0.602763   0.963663\n    0  2011  0   0.544883   0.383442\n    1  2011  1   0.423655   0.791725\n    2  2011  1   0.645894   0.528895\n\n    If we have many columns, we could also use a regex to find our\n    stubnames and pass that list on to wide_to_long\n\n    >>> stubnames = sorted(\n    ...     set([match[0] for match in df.columns.str.findall(\n    ...         r'[A-B]\\(.*\\)').values if match != []])\n    ... )\n    >>> list(stubnames)\n    ['A(weekly)', 'B(weekly)']\n\n    All of the above examples have integers as suffixes. It is possible to\n    have non-integers as suffixes.\n\n    >>> df = pd.DataFrame({\n    ...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],\n    ...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],\n    ...     'ht_one': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n    ...     'ht_two': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n    ... })\n    >>> df\n       famid  birth  ht_one  ht_two\n    0      1      1     2.8     3.4\n    1      1      2     2.9     3.8\n    2      1      3     2.2     2.9\n    3      2      1     2.0     3.2\n    4      2      2     1.8     2.8\n    5      2      3     1.9     2.4\n    6      3      1     2.2     3.3\n    7      3      2     2.3     3.4\n    8      3      3     2.1     2.9\n\n    >>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age',\n    ...                     sep='_', suffix='\\w+')\n    >>> l\n    ... # doctest: +NORMALIZE_WHITESPACE\n                      ht\n    famid birth age\n    1     1     one  2.8\n                two  3.4\n          2     one  2.9\n                two  3.8\n          3     one  2.2\n                two  2.9\n    2     1     one  2.0\n                two  3.2\n          2     one  1.8\n                two  2.8\n          3     one  1.9\n                two  2.4\n    3     1     one  2.2\n                two  3.3\n          2     one  2.3\n                two  3.4\n          3     one  2.1\n                two  2.9\n    \"\"\"\n\n    def get_var_names(df, stub: str, sep: str, suffix: str) -> List[str]:\n        regex = r\"^{stub}{sep}{suffix}$\".format(\n            stub=re.escape(stub), sep=re.escape(sep), suffix=suffix\n        )\n        pattern = re.compile(regex)\n        return [col for col in df.columns if pattern.match(col)]\n\n    def melt_stub(df, stub: str, i, j, value_vars, sep: str):\n        newdf = melt(\n            df,\n            id_vars=i,\n            value_vars=value_vars,\n            value_name=stub.rstrip(sep),\n            var_name=j,\n        )\n        newdf[j] = Categorical(newdf[j])\n        newdf[j] = newdf[j].str.replace(re.escape(stub + sep), \"\")\n\n        # GH17627 Cast numerics suffixes to int/float\n        newdf[j] = to_numeric(newdf[j], errors=\"ignore\")\n\n        return newdf.set_index(i + [j])\n\n    if not is_list_like(stubnames):\n        stubnames = [stubnames]\n    else:\n        stubnames = list(stubnames)\n\n    if any(col in stubnames for col in df.columns):\n        raise ValueError(\"stubname can't be identical to a column name\")\n\n    if not is_list_like(i):\n        i = [i]\n    else:\n        i = list(i)\n\n    if df[i].duplicated().any():\n        raise ValueError(\"the id variables need to uniquely identify each row\")\n\n    value_vars = [get_var_names(df, stub, sep, suffix) for stub in stubnames]\n\n    value_vars_flattened = [e for sublist in value_vars for e in sublist]\n    id_vars = list(set(df.columns.tolist()).difference(value_vars_flattened))\n\n    _melted = [melt_stub(df, s, i, j, v, sep) for s, v in zip(stubnames, value_vars)]\n    melted = _melted[0].join(_melted[1:], how=\"outer\")\n\n    if len(i) == 1:\n        new = df[id_vars].set_index(i).join(melted)\n        return new\n\n    new = df[id_vars].merge(melted.reset_index(), on=i).set_index(i + [j])\n\n    return new",
        "begin_line": 196,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.melt.get_var_names#420",
        "src_path": "pandas/core/reshape/melt.py",
        "class_name": "pandas.core.reshape.melt",
        "signature": "pandas.core.reshape.melt.get_var_names(df, stub: str, sep: str, suffix: str)",
        "snippet": "    def get_var_names(df, stub: str, sep: str, suffix: str) -> List[str]:\n        regex = r\"^{stub}{sep}{suffix}$\".format(\n            stub=re.escape(stub), sep=re.escape(sep), suffix=suffix\n        )\n        pattern = re.compile(regex)\n        return [col for col in df.columns if pattern.match(col)]",
        "begin_line": 420,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.reshape.melt.melt_stub#427",
        "src_path": "pandas/core/reshape/melt.py",
        "class_name": "pandas.core.reshape.melt",
        "signature": "pandas.core.reshape.melt.melt_stub(df, stub: str, i, j, value_vars, sep: str)",
        "snippet": "    def melt_stub(df, stub: str, i, j, value_vars, sep: str):\n        newdf = melt(\n            df,\n            id_vars=i,\n            value_vars=value_vars,\n            value_name=stub.rstrip(sep),\n            var_name=j,\n        )\n        newdf[j] = Categorical(newdf[j])\n        newdf[j] = newdf[j].str.replace(re.escape(stub + sep), \"\")\n\n        # GH17627 Cast numerics suffixes to int/float\n        newdf[j] = to_numeric(newdf[j], errors=\"ignore\")\n\n        return newdf.set_index(i + [j])",
        "begin_line": 427,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#183",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        axes: Optional[List[Index]] = None,\n        copy: bool = False,\n        dtype: Optional[Dtype] = None,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n        fastpath: bool = False,\n    ):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 183,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005633802816901409,
            "pseudo_dstar_susp": 0.001579778830963665,
            "pseudo_tarantula_susp": 0.00044742729306487697,
            "pseudo_op2_susp": 0.001579778830963665,
            "pseudo_barinel_susp": 0.00044742729306487697
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._init_mgr#212",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
        "snippet": "    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(\n                    axe, axis=self._get_block_manager_axis(a), copy=False\n                )\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr",
        "begin_line": 212,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035650623885918,
            "pseudo_dstar_susp": 0.00035650623885918,
            "pseudo_tarantula_susp": 0.0003566333808844508,
            "pseudo_op2_susp": 0.00035650623885918,
            "pseudo_barinel_susp": 0.0003566333808844508
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#232",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 232,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006770480704129993,
            "pseudo_dstar_susp": 0.0024752475247524753,
            "pseudo_tarantula_susp": 0.0005347593582887701,
            "pseudo_op2_susp": 0.0024752475247524753,
            "pseudo_barinel_susp": 0.0005347593582887701
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#244",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(self, dtype)",
        "snippet": "    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented\"\n                    \" in the {0} constructor\".format(type(self).__name__)\n                )\n\n        return dtype",
        "begin_line": 244,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00048520135856380397,
            "pseudo_dstar_susp": 0.0004837929366231253,
            "pseudo_tarantula_susp": 0.0006988120195667365,
            "pseudo_op2_susp": 0.0004837929366231253,
            "pseudo_barinel_susp": 0.0006988120195667365
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#351",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 351,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008496176720475786,
            "pseudo_dstar_susp": 0.004608294930875576,
            "pseudo_tarantula_susp": 0.0006635700066357001,
            "pseudo_op2_susp": 0.004608294930875576,
            "pseudo_barinel_susp": 0.0006635700066357001
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict_from#358",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict_from(self, axes, **kwargs)",
        "snippet": "    def _construct_axes_dict_from(self, axes, **kwargs):\n        \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n        d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n        d.update(kwargs)\n        return d",
        "begin_line": 358,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#364",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(self, args, kwargs, require_all=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        self, args, kwargs, require_all=False, sentinel=None\n    ):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # if we have an alias for this axis\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\n                            f\"arguments are mutually exclusive for [{a},{alias}]\"\n                        )\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments specified!\")\n\n        axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 364,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000649772579597141,
            "pseudo_dstar_susp": 0.0021929824561403508,
            "pseudo_tarantula_susp": 0.0005078720162519045,
            "pseudo_op2_susp": 0.0021929824561403508,
            "pseudo_barinel_susp": 0.0005078720162519045
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._from_axes#406",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._from_axes(cls, data, axes, **kwargs)",
        "snippet": "    def _from_axes(cls, data, axes, **kwargs):\n        # for construction from BlockManager\n        if isinstance(data, BlockManager):\n            return cls(data, **kwargs)\n        else:\n            if cls._AXIS_REVERSED:\n                axes = axes[::-1]\n            d = cls._construct_axes_dict_from(cls, axes, copy=False)\n            d.update(kwargs)\n            return cls(data, **d)",
        "begin_line": 406,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.529119874640899e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#418",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 418,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007716049382716049,
            "pseudo_dstar_susp": 0.0035587188612099642,
            "pseudo_tarantula_susp": 0.0005984440454817474,
            "pseudo_op2_susp": 0.0035587188612099642,
            "pseudo_barinel_susp": 0.0005984440454817474
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#431",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 431,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008250825082508251,
            "pseudo_dstar_susp": 0.004405286343612335,
            "pseudo_tarantula_susp": 0.0006341154090044388,
            "pseudo_op2_susp": 0.004405286343612335,
            "pseudo_barinel_susp": 0.0006341154090044388
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#443",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 443,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007886435331230284,
            "pseudo_dstar_susp": 0.0037313432835820895,
            "pseudo_tarantula_susp": 0.0006082725060827251,
            "pseudo_op2_susp": 0.0037313432835820895,
            "pseudo_barinel_susp": 0.0006082725060827251
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#448",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038182512409316535,
            "pseudo_dstar_susp": 0.00038182512409316535,
            "pseudo_tarantula_susp": 0.00038226299694189603,
            "pseudo_op2_susp": 0.00038182512409316535,
            "pseudo_barinel_susp": 0.00038226299694189603
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#504",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self):\n        return getattr(self, self._info_axis_name)",
        "begin_line": 504,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00039840637450199205,
            "pseudo_dstar_susp": 0.00039840637450199205,
            "pseudo_tarantula_susp": 0.00039936102236421724,
            "pseudo_op2_susp": 0.00039840637450199205,
            "pseudo_barinel_susp": 0.00039936102236421724
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#528",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim",
        "begin_line": 528,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.02663773880552e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.size#551",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n        return np.prod(self.shape)",
        "begin_line": 551,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.420048972323217e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.set_axis#584",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.set_axis(self, labels, axis=0, inplace=False)",
        "snippet": "    def set_axis(self, labels, axis=0, inplace=False):\n        \"\"\"\n        Assign desired index to given axis.\n\n        Indexes for column or row labels can be changed by assigning\n        a list-like or Index.\n\n        .. versionchanged:: 0.21.0\n\n           The signature is now `labels` and `axis`, consistent with\n           the rest of pandas API. Previously, the `axis` and `labels`\n           arguments were respectively the first and second positional\n           arguments.\n\n        Parameters\n        ----------\n        labels : list-like, Index\n            The values for the new index.\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to update. The value 0 identifies the rows, and 1\n            identifies the columns.\n\n        inplace : bool, default False\n            Whether to return a new %(klass)s instance.\n\n        Returns\n        -------\n        renamed : %(klass)s or None\n            An object of same type as caller if inplace=False, None otherwise.\n\n        See Also\n        --------\n        DataFrame.rename_axis : Alter the name of the index or columns.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n\n        >>> s.set_axis(['a', 'b', 'c'], axis=0)\n        a    1\n        b    2\n        c    3\n        dtype: int64\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n        Change the row labels.\n\n        >>> df.set_axis(['a', 'b', 'c'], axis='index')\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n\n        Change the column labels.\n\n        >>> df.set_axis(['I', 'II'], axis='columns')\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6\n\n        Now, update the labels inplace.\n\n        >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n        >>> df\n           i  ii\n        0  1   4\n        1  2   5\n        2  3   6\n        \"\"\"\n        if is_scalar(labels):\n            warnings.warn(\n                'set_axis now takes \"labels\" as first argument, and '\n                '\"axis\" as named parameter. The old form, with \"axis\" as '\n                'first parameter and \"labels\" as second, is still supported '\n                \"but will be deprecated in a future version of pandas.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            labels, axis = axis, labels\n\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            obj = self.copy()\n            obj.set_axis(labels, axis=axis, inplace=True)\n            return obj",
        "begin_line": 584,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis#683",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis(self, axis, labels)",
        "snippet": "    def _set_axis(self, axis, labels):\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()",
        "begin_line": 683,
        "end_line": 685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004764173415912339,
            "pseudo_dstar_susp": 0.00047505938242280285,
            "pseudo_tarantula_susp": 0.0006775067750677507,
            "pseudo_op2_susp": 0.00047505938242280285,
            "pseudo_barinel_susp": 0.0006775067750677507
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.transpose#687",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.transpose(self, *args, **kwargs)",
        "snippet": "    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Permute the dimensions of the %(klass)s\n\n        Parameters\n        ----------\n        args : %(args_transpose)s\n        copy : bool, default False\n            Make a copy of the underlying data. Mixed-dtype data will\n            always result in a copy\n        **kwargs\n            Additional keyword arguments will be passed to the function.\n\n        Returns\n        -------\n        y : same as input\n\n        Examples\n        --------\n        >>> p.transpose(2, 0, 1)\n        >>> p.transpose(2, 0, 1, copy=True)\n        \"\"\"\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(\n            args, kwargs, require_all=True\n        )\n        axes_names = tuple(self._get_axis_name(axes[a]) for a in self._AXIS_ORDERS)\n        axes_numbers = tuple(self._get_axis_number(axes[a]) for a in self._AXIS_ORDERS)\n\n        # we must have unique axes\n        if len(axes) != len(set(axes)):\n            raise ValueError(f\"Must specify {self._AXIS_LEN} unique axes\")\n\n        new_axes = self._construct_axes_dict_from(\n            self, [self._get_axis(x) for x in axes_names]\n        )\n        new_values = self.values.transpose(axes_numbers)\n        if kwargs.pop(\"copy\", None) or (len(args) and args[-1]):\n            new_values = new_values.copy()\n\n        nv.validate_transpose(tuple(), kwargs)\n        return self._constructor(new_values, **new_axes).__finalize__(self)",
        "begin_line": 687,
        "end_line": 729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.pop#816",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.pop(self, item)",
        "snippet": "    def pop(self, item):\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n\n        Parameters\n        ----------\n        item : str\n            Label of column to be popped.\n\n        Returns\n        -------\n        Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n        ...                    ('parrot', 'bird', 24.0),\n        ...                    ('lion', 'mammal', 80.5),\n        ...                    ('monkey','mammal', np.nan)],\n        ...                   columns=('name', 'class', 'max_speed'))\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        >>> df.pop('class')\n        0      bird\n        1      bird\n        2    mammal\n        3    mammal\n        Name: class, dtype: object\n\n        >>> df\n             name  max_speed\n        0  falcon      389.0\n        1  parrot       24.0\n        2    lion       80.5\n        3  monkey        NaN\n        \"\"\"\n        result = self[item]\n        del self[item]\n        try:\n            result._reset_cacher()\n        except AttributeError:\n            pass\n\n        return result",
        "begin_line": 816,
        "end_line": 864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.848335631278314e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.rename#999",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.rename(self, *args, **kwargs)",
        "snippet": "    def rename(self, *args, **kwargs):\n        \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n        errors : {'ignore', 'raise'}, default 'ignore'\n            If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n            or `columns` contains labels that are not present in the Index\n            being transformed.\n            If 'ignore', existing keys will be renamed and extra keys will be\n            ignored.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        Raises\n        ------\n        KeyError\n            If any of the labels is not found in the selected axis and\n            \"errors='raise'\".\n\n        See Also\n        --------\n        NDFrame.rename_axis\n\n        Examples\n        --------\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        Since ``DataFrame`` doesn't have a ``.name`` attribute,\n        only mapping-type arguments are allowed.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n\n        See the :ref:`user guide <basics.rename>` for more.\n        \"\"\"\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        copy = kwargs.pop(\"copy\", True)\n        inplace = kwargs.pop(\"inplace\", False)\n        level = kwargs.pop(\"level\", None)\n        axis = kwargs.pop(\"axis\", None)\n        errors = kwargs.pop(\"errors\", \"ignore\")\n        if axis is not None:\n            # Validate the axis\n            self._get_axis_number(axis)\n\n        if kwargs:\n            raise TypeError(\n                \"rename() got an unexpected keyword \"\n                'argument \"{0}\"'.format(list(kwargs.keys())[0])\n            )\n\n        if com.count_not_none(*axes.values()) == 0:\n            raise TypeError(\"must pass an index to rename\")\n\n        self._consolidate_inplace()\n        result = self if inplace else self.copy(deep=copy)\n\n        # start in the axis order to eliminate too many copies\n        for axis in range(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is None:\n                continue\n            f = com.get_rename_function(v)\n            baxis = self._get_block_manager_axis(axis)\n            if level is not None:\n                level = self.axes[axis]._get_level_number(level)\n\n            # GH 13473\n            if not callable(v):\n                indexer = self.axes[axis].get_indexer_for(v)\n                if errors == \"raise\" and len(indexer[indexer == -1]):\n                    missing_labels = [\n                        label for index, label in enumerate(v) if indexer[index] == -1\n                    ]\n                    raise KeyError(\"{} not found in axis\".format(missing_labels))\n\n            result._data = result._data.rename_axis(\n                f, axis=baxis, copy=copy, level=level\n            )\n            result._clear_item_cache()\n\n        if inplace:\n            self._update_inplace(result._data)\n        else:\n            return result.__finalize__(self)",
        "begin_line": 999,
        "end_line": 1161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.rename_axis#1164",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.rename_axis(self, mapper=sentinel, **kwargs)",
        "snippet": "    def rename_axis(self, mapper=sentinel, **kwargs):\n        \"\"\"\n        Set the name of the axis for the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set the axis name attribute.\n        index, columns : scalar, list-like, dict-like or function, optional\n            A scalar, list-like, dict-like or functions transformations to\n            apply to that axis' values.\n\n            Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index``\n            and/or ``columns``.\n\n            .. versionchanged:: 0.24.0\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to rename.\n        copy : bool, default True\n            Also copy underlying data.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or None if `inplace` is True.\n\n        See Also\n        --------\n        Series.rename : Alter Series index labels or name.\n        DataFrame.rename : Alter DataFrame index labels or name.\n        Index.rename : Set new names on index.\n\n        Notes\n        -----\n        ``DataFrame.rename_axis`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        The first calling convention will only modify the names of\n        the index and/or the names of the Index object that is the columns.\n        In this case, the parameter ``copy`` is ignored.\n\n        The second calling convention will modify the names of the\n        the corresponding index if mapper is a list or a scalar.\n        However, if mapper is dict-like or a function, it will use the\n        deprecated behavior of modifying the axis *labels*.\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n        >>> s\n        0       dog\n        1       cat\n        2    monkey\n        dtype: object\n        >>> s.rename_axis(\"animal\")\n        animal\n        0    dog\n        1    cat\n        2    monkey\n        dtype: object\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n        ...                    \"num_arms\": [0, 0, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs  num_arms\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"animal\")\n        >>> df\n                num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n        >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n        >>> df\n        limbs   num_legs  num_arms\n        animal\n        dog            4         0\n        cat            4         0\n        monkey         2         2\n\n        **MultiIndex**\n\n        >>> df.index = pd.MultiIndex.from_product([['mammal'],\n        ...                                        ['dog', 'cat', 'monkey']],\n        ...                                       names=['type', 'name'])\n        >>> df\n        limbs          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(index={'type': 'class'})\n        limbs          num_legs  num_arms\n        class  name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n\n        >>> df.rename_axis(columns=str.upper)\n        LIMBS          num_legs  num_arms\n        type   name\n        mammal dog            4         0\n               cat            4         0\n               monkey         2         2\n        \"\"\"\n        axes, kwargs = self._construct_axes_from_arguments(\n            (), kwargs, sentinel=sentinel\n        )\n        copy = kwargs.pop(\"copy\", True)\n        inplace = kwargs.pop(\"inplace\", False)\n        axis = kwargs.pop(\"axis\", 0)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n\n        if kwargs:\n            raise TypeError(\n                \"rename_axis() got an unexpected keyword \"\n                'argument \"{0}\"'.format(list(kwargs.keys())[0])\n            )\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if mapper is not sentinel:\n            # Use v0.23 behavior if a scalar or list\n            non_mapper = is_scalar(mapper) or (\n                is_list_like(mapper) and not is_dict_like(mapper)\n            )\n            if non_mapper:\n                return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n            else:\n                raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n        else:\n            # Use new behavior.  Means that index and/or columns\n            # is specified\n            result = self if inplace else self.copy(deep=copy)\n\n            for axis in range(self._AXIS_LEN):\n                v = axes.get(self._AXIS_NAMES[axis])\n                if v is sentinel:\n                    continue\n                non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n                if non_mapper:\n                    newnames = v\n                else:\n                    f = com.get_rename_function(v)\n                    curnames = self._get_axis(axis).names\n                    newnames = [f(name) for name in curnames]\n                result._set_axis_name(newnames, axis=axis, inplace=True)\n            if not inplace:\n                return result",
        "begin_line": 1164,
        "end_line": 1332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_axis_name#1334",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_axis_name(self, name, axis=0, inplace=False)",
        "snippet": "    def _set_axis_name(self, name, axis=0, inplace=False):\n        \"\"\"\n        Set the name(s) of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name(s) to set.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to set the label. The value 0 or 'index' specifies index,\n            and the value 1 or 'columns' specifies columns.\n        inplace : bool, default False\n            If `True`, do operation inplace and return None.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        Series, DataFrame, or None\n            The same type as the caller or `None` if `inplace` is `True`.\n\n        See Also\n        --------\n        DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n        Series.rename : Alter the index labels or set the index name\n            of :class:`Series`.\n        Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n        ...                   [\"dog\", \"cat\", \"monkey\"])\n        >>> df\n                num_legs\n        dog            4\n        cat            4\n        monkey         2\n        >>> df._set_axis_name(\"animal\")\n                num_legs\n        animal\n        dog            4\n        cat            4\n        monkey         2\n        >>> df.index = pd.MultiIndex.from_product(\n        ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n        >>> df._set_axis_name([\"type\", \"name\"])\n                       legs\n        type   name\n        mammal dog        4\n               cat        4\n               monkey     2\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(idx, axis=axis, inplace=True)\n        if not inplace:\n            return renamed",
        "begin_line": 1334,
        "end_line": 1393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__neg__#1493",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__neg__(self)",
        "snippet": "    def __neg__(self):\n        values = com.values_from_object(self)\n        if is_bool_dtype(values):\n            arr = operator.inv(values)\n        elif (\n            is_numeric_dtype(values)\n            or is_timedelta64_dtype(values)\n            or is_object_dtype(values)\n        ):\n            arr = operator.neg(values)\n        else:\n            raise TypeError(\n                \"Unary negative expects numeric dtype, not {}\".format(values.dtype)\n            )\n        return self.__array_wrap__(arr)",
        "begin_line": 1493,
        "end_line": 1507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007183908045977011,
            "pseudo_tarantula_susp": 0.0017064846416382253,
            "pseudo_op2_susp": 0.0007183908045977011,
            "pseudo_barinel_susp": 0.0017064846416382253
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1525",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        arr = operator.inv(com.values_from_object(self))\n        return self.__array_wrap__(arr)",
        "begin_line": 1525,
        "end_line": 1531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_level_reference#1581",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_level_reference(self, key, axis=0)",
        "snippet": "    def _is_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key : str\n            Potential level name for the given axis\n        axis : int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level : bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis].names\n            and not self._is_label_reference(key, axis=axis)\n        )",
        "begin_line": 1581,
        "end_line": 1609,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.869058860560277e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_label_reference#1611",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_label_reference(self, key, axis=0)",
        "snippet": "    def _is_label_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key: str\n            Potential label name\n        axis: int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n        return (\n            key is not None\n            and is_hashable(key)\n            and any(key in self.axes[ax] for ax in other_axes)\n        )",
        "begin_line": 1611,
        "end_line": 1638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009363295880149813,
            "pseudo_dstar_susp": 0.005494505494505495,
            "pseudo_tarantula_susp": 0.0007552870090634441,
            "pseudo_op2_susp": 0.005494505494505495,
            "pseudo_barinel_susp": 0.0007552870090634441
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_label_or_level_reference#1640",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_label_or_level_reference(self, key, axis=0)",
        "snippet": "    def _is_label_or_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key: str\n            Potential label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_label_or_level: bool\n        \"\"\"\n        return self._is_level_reference(key, axis=axis) or self._is_label_reference(\n            key, axis=axis\n        )",
        "begin_line": 1640,
        "end_line": 1662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.464124111182935e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_label_or_level_ambiguity#1664",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_label_or_level_ambiguity(self, key, axis=0)",
        "snippet": "    def _check_label_or_level_ambiguity(self, key, axis=0):\n        \"\"\"\n        Check whether `key` is ambiguous.\n\n        By ambiguous, we mean that it matches both a level of the input\n        `axis` and a label of the other axis.\n\n        Parameters\n        ----------\n        key: str or object\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns).\n\n        Raises\n        ------\n        ValueError: `key` is ambiguous\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n        if (\n            key is not None\n            and is_hashable(key)\n            and key in self.axes[axis].names\n            and any(key in self.axes[ax] for ax in other_axes)\n        ):\n\n            # Build an informative and grammatical warning\n            level_article, level_type = (\n                (\"an\", \"index\") if axis == 0 else (\"a\", \"column\")\n            )\n\n            label_article, label_type = (\n                (\"a\", \"column\") if axis == 0 else (\"an\", \"index\")\n            )\n\n            msg = (\n                \"'{key}' is both {level_article} {level_type} level and \"\n                \"{label_article} {label_type} label, which is ambiguous.\"\n            ).format(\n                key=key,\n                level_article=level_article,\n                level_type=level_type,\n                label_article=label_article,\n                label_type=label_type,\n            )\n            raise ValueError(msg)",
        "begin_line": 1664,
        "end_line": 1711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000864304235090752,
            "pseudo_dstar_susp": 0.005076142131979695,
            "pseudo_tarantula_susp": 0.0006752194463200541,
            "pseudo_op2_susp": 0.005076142131979695,
            "pseudo_barinel_susp": 0.0006752194463200541
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_label_or_level_values#1713",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_label_or_level_values(self, key, axis=0)",
        "snippet": "    def _get_label_or_level_values(self, key, axis=0):\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key: str\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        values: np.ndarray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n\n        # Check for duplicates\n        if values.ndim > 1:\n\n            if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n                multi_message = (\n                    \"\\n\"\n                    \"For a multi-index, the label must be a \"\n                    \"tuple with elements corresponding to \"\n                    \"each level.\"\n                )\n            else:\n                multi_message = \"\"\n\n            label_axis_name = \"column\" if axis == 0 else \"index\"\n            raise ValueError(\n                (\n                    \"The {label_axis_name} label '{key}' \"\n                    \"is not unique.{multi_message}\"\n                ).format(\n                    key=key,\n                    label_axis_name=label_axis_name,\n                    multi_message=multi_message,\n                )\n            )\n\n        return values",
        "begin_line": 1713,
        "end_line": 1783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009363295880149813,
            "pseudo_dstar_susp": 0.005494505494505495,
            "pseudo_tarantula_susp": 0.0007674597083653108,
            "pseudo_op2_susp": 0.005494505494505495,
            "pseudo_barinel_susp": 0.0007674597083653108
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._drop_labels_or_levels#1785",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._drop_labels_or_levels(self, keys, axis=0)",
        "snippet": "    def _drop_labels_or_levels(self, keys, axis=0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys: str or list of str\n            labels or levels to drop\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n        axis = self._get_axis_number(axis)\n\n        # Validate keys\n        keys = com.maybe_make_list(keys)\n        invalid_keys = [\n            k for k in keys if not self._is_label_or_level_reference(k, axis=axis)\n        ]\n\n        if invalid_keys:\n            raise ValueError(\n                (\n                    \"The following keys are not valid labels or \"\n                    \"levels for axis {axis}: {invalid_keys}\"\n                ).format(axis=axis, invalid_keys=invalid_keys)\n            )\n\n        # Compute levels and labels to drop\n        levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n\n        labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n\n        # Perform copy upfront and then use inplace operations below.\n        # This ensures that we always perform exactly one copy.\n        # ``copy`` and/or ``inplace`` options could be added in the future.\n        dropped = self.copy()\n\n        if axis == 0:\n            # Handle dropping index levels\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n            # Handle dropping columns labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            # Handle dropping column levels\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    # Drop the specified levels from the MultiIndex\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    # Drop the last level of Index by replacing with\n                    # a RangeIndex\n                    dropped.columns = RangeIndex(dropped.columns.size)\n\n            # Handle dropping index labels\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n        return dropped",
        "begin_line": 1785,
        "end_line": 1860,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__hash__#1865",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__hash__(self)",
        "snippet": "    def __hash__(self):\n        raise TypeError(\n            \"{0!r} objects are mutable, thus they cannot be\"\n            \" hashed\".format(type(self).__name__)\n        )",
        "begin_line": 1865,
        "end_line": 1869,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00078064012490242,
            "pseudo_dstar_susp": 0.0005488474204171241,
            "pseudo_tarantula_susp": 0.0008532423208191126,
            "pseudo_op2_susp": 0.0005488474204171241,
            "pseudo_barinel_susp": 0.0008532423208191126
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__iter__#1871",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Iterate over info axis.\n\n        Returns\n        -------\n        iterator\n            Info axis as iterator.\n        \"\"\"\n        return iter(self._info_axis)",
        "begin_line": 1871,
        "end_line": 1880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1916",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1916,
        "end_line": 1918,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.049240820277055e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.empty#1921",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.empty(self)",
        "snippet": "    def empty(self):\n        \"\"\"\n        Indicator whether DataFrame is empty.\n\n        True if DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If DataFrame is empty, return True, if not return False.\n\n        See Also\n        --------\n        Series.dropna\n        DataFrame.dropna\n\n        Notes\n        -----\n        If DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)",
        "begin_line": 1921,
        "end_line": 1967,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013717421124828531,
            "pseudo_dstar_susp": 0.0064516129032258064,
            "pseudo_tarantula_susp": 0.001,
            "pseudo_op2_susp": 0.0064516129032258064,
            "pseudo_barinel_susp": 0.001
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array__#1976",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return com.values_from_object(self)",
        "begin_line": 1976,
        "end_line": 1977,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array_wrap__#1979",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)",
        "begin_line": 1979,
        "end_line": 1981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005040322580645161,
            "pseudo_dstar_susp": 0.0005025125628140704,
            "pseudo_tarantula_susp": 0.0007412898443291327,
            "pseudo_op2_susp": 0.0005025125628140704,
            "pseudo_barinel_susp": 0.0007412898443291327
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3261",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3261,
        "end_line": 3265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008019246190858059,
            "pseudo_dstar_susp": 0.003952569169960474,
            "pseudo_tarantula_susp": 0.0006172839506172839,
            "pseudo_op2_susp": 0.003952569169960474,
            "pseudo_barinel_susp": 0.0006172839506172839
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reset_cacher#3267",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reset_cacher(self)",
        "snippet": "    def _reset_cacher(self):\n        \"\"\"Reset the cacher.\"\"\"\n        if hasattr(self, \"_cacher\"):\n            del self._cacher",
        "begin_line": 3267,
        "end_line": 3270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.848335631278314e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_cached#3278",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_cached(self)",
        "snippet": "    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, \"_cacher\", None) is not None",
        "begin_line": 3278,
        "end_line": 3280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3289",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear=False, verify_is_copy=True)",
        "snippet": "    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                # Note: we need to call ref._maybe_cache_changed even in the\n                #  case where it will raise.  (Uh, not clear why)\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except AssertionError:\n                    # ref._data.setitem can raise\n                    #  AssertionError because of shape mismatch\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3289,
        "end_line": 3324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.197393228953193e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3326",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self):\n        self._item_cache.clear()",
        "begin_line": 3326,
        "end_line": 3327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00041736227045075126,
            "pseudo_dstar_susp": 0.00041736227045075126,
            "pseudo_tarantula_susp": 0.00046274872744099955,
            "pseudo_op2_susp": 0.00041736227045075126,
            "pseudo_barinel_susp": 0.00046274872744099955
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.take#3332",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.take(self, indices, axis=0, is_copy=True, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, is_copy=True, **kwargs):\n        \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            The axis on which to select elements. ``0`` means that we are\n            selecting rows, ``1`` means that we are selecting columns.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n        **kwargs\n            For compatibility with :meth:`numpy.take`. Has no effect on the\n            output.\n\n        Returns\n        -------\n        taken : same type as caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by labels.\n        DataFrame.iloc : Select a subset of a DataFrame by positions.\n        numpy.take : Take elements from an array along an axis.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n        ...                    ('parrot', 'bird',     24.0),\n        ...                    ('lion',   'mammal',   80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                    columns=['name', 'class', 'max_speed'],\n        ...                    index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n        \"\"\"\n        nv.validate_take(tuple(), kwargs)\n\n        self._consolidate_inplace()\n\n        new_data = self._data.take(\n            indices, axis=self._get_block_manager_axis(axis), verify=True\n        )\n        result = self._constructor(new_data).__finalize__(self)\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result",
        "begin_line": 3332,
        "end_line": 3421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005017561465127947,
            "pseudo_dstar_susp": 0.0005002501250625312,
            "pseudo_tarantula_susp": 0.0007358351729212656,
            "pseudo_op2_susp": 0.0005002501250625312,
            "pseudo_barinel_susp": 0.0007358351729212656
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.xs#3423",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.xs(self, key, axis=0, level=None, drop_level=True)",
        "snippet": "    def xs(self, key, axis=0, level=None, drop_level=True):\n        \"\"\"\n        Return cross-section from the Series/DataFrame.\n\n        This method takes a `key` argument to select data at a particular\n        level of a MultiIndex.\n\n        Parameters\n        ----------\n        key : label or tuple of label\n            Label contained in the index, or partially in a MultiIndex.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis to retrieve cross-section on.\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : bool, default True\n            If False, returns object with same levels as self.\n\n        Returns\n        -------\n        Series or DataFrame\n            Cross-section from the original Series or DataFrame\n            corresponding to the selected index levels.\n\n        See Also\n        --------\n        DataFrame.loc : Access a group of rows and columns\n            by label(s) or a boolean array.\n        DataFrame.iloc : Purely integer-location based indexing\n            for selection by position.\n\n        Notes\n        -----\n        `xs` can not be used to set values.\n\n        MultiIndex Slicers is a generic way to get/set values on\n        any level or levels.\n        It is a superset of `xs` functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n        Examples\n        --------\n        >>> d = {'num_legs': [4, 4, 2, 2],\n        ...      'num_wings': [0, 0, 2, 2],\n        ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n        ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n        ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n        >>> df = pd.DataFrame(data=d)\n        >>> df = df.set_index(['class', 'animal', 'locomotion'])\n        >>> df\n                                   num_legs  num_wings\n        class  animal  locomotion\n        mammal cat     walks              4          0\n               dog     walks              4          0\n               bat     flies              2          2\n        bird   penguin walks              2          2\n\n        Get values at specified index\n\n        >>> df.xs('mammal')\n                           num_legs  num_wings\n        animal locomotion\n        cat    walks              4          0\n        dog    walks              4          0\n        bat    flies              2          2\n\n        Get values at several indexes\n\n        >>> df.xs(('mammal', 'dog'))\n                    num_legs  num_wings\n        locomotion\n        walks              4          0\n\n        Get values at specified index and level\n\n        >>> df.xs('cat', level=1)\n                           num_legs  num_wings\n        class  locomotion\n        mammal walks              4          0\n\n        Get values at several indexes and levels\n\n        >>> df.xs(('bird', 'walks'),\n        ...       level=[0, 'locomotion'])\n                 num_legs  num_wings\n        animal\n        penguin         2          2\n\n        Get values at specified column and axis\n\n        >>> df.xs('num_wings', axis=1)\n        class   animal   locomotion\n        mammal  cat      walks         0\n                dog      walks         0\n                bat      flies         2\n        bird    penguin  walks         2\n        Name: num_wings, dtype: int64\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n            # create the tuple of the indexer\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = loc\n            indexer = tuple(indexer)\n\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n\n        if axis == 1:\n            return self[key]\n\n        self._consolidate_inplace()\n\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n        else:\n            loc = self.index.get_loc(key)\n\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    (inds,) = loc.nonzero()\n                    return self.take(inds, axis=axis)\n                else:\n                    return self.take(loc, axis=axis)\n\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n\n        if is_scalar(loc):\n            new_values = self._data.fast_xs(loc)\n\n            # may need to box a datelike-scalar\n            #\n            # if we encounter an array-like and we only have 1 dim\n            # that means that their are list/ndarrays inside the Series!\n            # so just return them (GH 6394)\n            if not is_list_like(new_values) or self.ndim == 1:\n                return com.maybe_box_datetimelike(new_values)\n\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[loc],\n                dtype=new_values.dtype,\n            )\n\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        result._set_is_copy(self, copy=not result._is_view)\n        return result",
        "begin_line": 3423,
        "end_line": 3582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000574052812858783,
            "pseudo_dstar_susp": 0.0005122950819672131,
            "pseudo_tarantula_susp": 0.0007656967840735069,
            "pseudo_op2_susp": 0.0005122950819672131,
            "pseudo_barinel_susp": 0.0007656967840735069
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3589",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3589,
        "end_line": 3601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000856898029134533,
            "pseudo_dstar_susp": 0.004830917874396135,
            "pseudo_tarantula_susp": 0.0006693440428380187,
            "pseudo_op2_susp": 0.004830917874396135,
            "pseudo_barinel_susp": 0.0006693440428380187
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._slice#3615",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._slice(self, slobj: slice, axis=0, kind=None)",
        "snippet": "    def _slice(self, slobj: slice, axis=0, kind=None):\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n\n        # this could be a view\n        # but only in a single-dtyped view sliceable case\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result",
        "begin_line": 3615,
        "end_line": 3629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.173601147776183e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3631",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()",
        "begin_line": 3631,
        "end_line": 3633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006035003017501509,
            "pseudo_dstar_susp": 0.0005232862375719519,
            "pseudo_tarantula_susp": 0.000791765637371338,
            "pseudo_op2_susp": 0.0005232862375719519,
            "pseudo_barinel_susp": 0.000791765637371338
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_is_copy#3635",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_is_copy(self, ref=None, copy=True)",
        "snippet": "    def _set_is_copy(self, ref=None, copy=True):\n        if not copy:\n            self._is_copy = None\n        else:\n            if ref is not None:\n                self._is_copy = weakref.ref(ref)\n            else:\n                self._is_copy = None",
        "begin_line": 3635,
        "end_line": 3642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004664179104477612,
            "pseudo_dstar_susp": 0.00046598322460391424,
            "pseudo_tarantula_susp": 0.0006480881399870382,
            "pseudo_op2_susp": 0.00046598322460391424,
            "pseudo_barinel_susp": 0.0006480881399870382
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3644",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3644,
        "end_line": 3662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3664",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3664,
        "end_line": 3739,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045454545454545455,
            "pseudo_dstar_susp": 0.00045433893684688776,
            "pseudo_tarantula_susp": 0.0006067961165048543,
            "pseudo_op2_susp": 0.00045433893684688776,
            "pseudo_barinel_susp": 0.0006067961165048543
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__delitem__#3741",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__delitem__(self, key)",
        "snippet": "    def __delitem__(self, key):\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n\n        maybe_shortcut = False\n        if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n\n        if maybe_shortcut:\n            # Allow shorthand to delete all columns whose first len(key)\n            # elements match key:\n            if not isinstance(key, tuple):\n                key = (key,)\n            for col in self.columns:\n                if isinstance(col, tuple) and col[: len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            # If the above loop ran and didn't delete anything because\n            # there was no match, this call should raise the appropriate\n            # exception:\n            self._data.delete(key)\n\n        # delete from the caches\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass",
        "begin_line": 3741,
        "end_line": 3773,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3798",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view",
        "begin_line": 3798,
        "end_line": 3800,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.842514811212309e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex_like#3802",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex_like(self, other, method=None, copy=True, limit=None, tolerance=None)",
        "snippet": "    def reindex_like(self, other, method=None, copy=True, limit=None, tolerance=None):\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...     columns=['temp_celsius', 'temp_fahrenheit', 'windspeed'],\n        ...     index=pd.date_range(start='2014-02-12',\n        ...                         end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...     columns=['temp_celsius', 'windspeed'],\n        ...     index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                             '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)",
        "begin_line": 3802,
        "end_line": 3905,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.843137254901961e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.drop#3907",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
        "snippet": "    def drop(\n        self,\n        labels=None,\n        axis=0,\n        index=None,\n        columns=None,\n        level=None,\n        inplace=False,\n        errors=\"raise\",\n    ):\n\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\n                \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n            )\n\n        obj = self\n\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n        if inplace:\n            self._update_inplace(obj)\n        else:\n            return obj",
        "begin_line": 3907,
        "end_line": 3941,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._drop_axis#3943",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._drop_axis(self, labels, axis, level=None, errors='raise')",
        "snippet": "    def _drop_axis(self, labels, axis, level=None, errors=\"raise\"):\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis = self._get_axis(axis)\n\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            result = self.reindex(**{axis_name: new_axis})\n\n        # Case for non-unique axis\n        else:\n            labels = ensure_object(com.index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError(\"axis must be a MultiIndex\")\n                indexer = ~axis.get_level_values(level).isin(labels)\n\n                # GH 18561 MultiIndex.drop should raise if label is absent\n                if errors == \"raise\" and indexer.all():\n                    raise KeyError(\"{} not found in axis\".format(labels))\n            else:\n                indexer = ~axis.isin(labels)\n                # Check if label doesn't exist along axis\n                labels_missing = (axis.get_indexer_for(labels) == -1).any()\n                if errors == \"raise\" and labels_missing:\n                    raise KeyError(\"{} not found in axis\".format(labels))\n\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n\n            result = self.loc[tuple(slicer)]\n\n        return result",
        "begin_line": 3943,
        "end_line": 3994,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._update_inplace#3996",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._update_inplace(self, result, verify_is_copy=True)",
        "snippet": "    def _update_inplace(self, result, verify_is_copy=True):\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        # NOTE: This does *not* call __finalize__ and that's an explicit\n        # decision that we may revisit in the future.\n\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, \"_data\", result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
        "begin_line": 3996,
        "end_line": 4011,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.404098623118796e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4287",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs):\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                'argument \"{0}\"'.format(list(kwargs.keys())[0])\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self)",
        "begin_line": 4287,
        "end_line": 4534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007326007326007326,
            "pseudo_dstar_susp": 0.0022172949002217295,
            "pseudo_tarantula_susp": 0.0008278145695364238,
            "pseudo_op2_susp": 0.0022172949002217295,
            "pseudo_barinel_susp": 0.0008278145695364238
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_axes#4536",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
        "snippet": "    def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(\n                labels, level=level, limit=limit, tolerance=tolerance, method=method\n            )\n\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers(\n                {axis: [new_index, indexer]},\n                fill_value=fill_value,\n                copy=copy,\n                allow_dups=False,\n            )\n\n        return obj",
        "begin_line": 4536,
        "end_line": 4557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.923769300006924e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._needs_reindex_multi#4559",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            and not self._is_mixed_type\n        )",
        "begin_line": 4559,
        "end_line": 4566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4571",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self, reindexers, fill_value=None, copy=False, allow_dups=False)",
        "snippet": "    def _reindex_with_indexers(\n        self, reindexers, fill_value=None, copy=False, allow_dups=False\n    ):\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4571,
        "end_line": 4602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.186970240673143e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5184",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5184,
        "end_line": 5202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004032258064516129,
            "pseudo_dstar_susp": 0.0004032258064516129,
            "pseudo_tarantula_susp": 0.0004042037186742118,
            "pseudo_op2_susp": 0.0004032258064516129,
            "pseudo_barinel_susp": 0.0004042037186742118
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5204",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5204,
        "end_line": 5221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010235414534288639,
            "pseudo_dstar_susp": 0.0006161429451632779,
            "pseudo_tarantula_susp": 0.0011111111111111111,
            "pseudo_op2_susp": 0.0006161429451632779,
            "pseudo_barinel_susp": 0.0011111111111111111
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5223",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name, value)",
        "snippet": "    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5223,
        "end_line": 5262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011376564277588168,
            "pseudo_dstar_susp": 0.003952569169960474,
            "pseudo_tarantula_susp": 0.0013698630136986301,
            "pseudo_op2_susp": 0.003952569169960474,
            "pseudo_barinel_susp": 0.0013698630136986301
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5278",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5278,
        "end_line": 5286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00036589828027808267,
            "pseudo_dstar_susp": 0.00036589828027808267,
            "pseudo_tarantula_susp": 0.00036603221083455345,
            "pseudo_op2_susp": 0.00036589828027808267,
            "pseudo_barinel_susp": 0.00036603221083455345
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5288",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5288,
        "end_line": 5294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00036589828027808267,
            "pseudo_dstar_susp": 0.00036589828027808267,
            "pseudo_tarantula_susp": 0.00036603221083455345,
            "pseudo_op2_susp": 0.00036589828027808267,
            "pseudo_barinel_susp": 0.00036603221083455345
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5291",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5291,
        "end_line": 5292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045955882352941176,
            "pseudo_dstar_susp": 0.0012330456226880395,
            "pseudo_tarantula_susp": 0.00036603221083455345,
            "pseudo_op2_susp": 0.0012330456226880395,
            "pseudo_barinel_susp": 0.00036603221083455345
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate#5296",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate(self, inplace=False)",
        "snippet": "    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            If False return new object, otherwise modify existing object.\n\n        Returns\n        -------\n        consolidated : same type as caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda: self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)",
        "begin_line": 5296,
        "end_line": 5316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5319",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5319,
        "end_line": 5321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.815238874122537e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.values#5360",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]], dtype=int64)\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)",
        "begin_line": 5360,
        "end_line": 5434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.645401382243488e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.dtypes#5504",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.dtypes(self)",
        "snippet": "    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
        "begin_line": 5504,
        "end_line": 5533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.696129637069774e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.astype#5547",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.astype(self, dtype, copy=True, errors='raise')",
        "snippet": "    def astype(self, dtype, copy=True, errors=\"raise\"):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> cat_dtype = pd.api.types.CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument.\"\n                    )\n            results = []\n            for col_name, col in self.items():\n                if col_name in dtype:\n                    results.append(\n                        col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                    )\n                else:\n                    results.append(col.copy() if copy else col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            results = (\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            )\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n            return self._constructor(new_data).__finalize__(self)\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result",
        "begin_line": 5547,
        "end_line": 5686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5688",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)",
        "begin_line": 5688,
        "end_line": 5794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004405286343612335,
            "pseudo_dstar_susp": 0.00044033465433729633,
            "pseudo_tarantula_susp": 0.00055005500550055,
            "pseudo_op2_susp": 0.00044033465433729633,
            "pseudo_barinel_susp": 0.00055005500550055
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__deepcopy__#5799",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__deepcopy__(self, memo=None)",
        "snippet": "    def __deepcopy__(self, memo=None):\n        \"\"\"\n        Parameters\n        ----------\n        memo, default None\n            Standard signature. Unused\n        \"\"\"\n        if memo is None:\n            memo = {}\n        return self.copy(deep=True)",
        "begin_line": 5799,
        "end_line": 5808,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._convert#5810",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._convert(self, datetime=False, numeric=False, timedelta=False, coerce=False, copy=True)",
        "snippet": "    def _convert(\n        self, datetime=False, numeric=False, timedelta=False, coerce=False, copy=True\n    ):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : bool, default False\n            If True, convert to date where possible.\n        numeric : bool, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : bool, default False\n            If True, convert to timedelta where possible.\n        coerce : bool, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT).\n        copy : bool, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        validate_bool_kwarg(datetime, \"datetime\")\n        validate_bool_kwarg(numeric, \"numeric\")\n        validate_bool_kwarg(timedelta, \"timedelta\")\n        validate_bool_kwarg(coerce, \"coerce\")\n        validate_bool_kwarg(copy, \"copy\")\n        return self._constructor(\n            self._data.convert(\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n        ).__finalize__(self)",
        "begin_line": 5810,
        "end_line": 5850,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.831067695880866e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.fillna#5903",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "snippet": "    def fillna(\n        self,\n        value=None,\n        method=None,\n        axis=None,\n        inplace=False,\n        limit=None,\n        downcast=None,\n    ):\n        \"\"\"\n        Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame).  Values not\n            in the dict/Series/DataFrame will not be filled. This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use next valid observation to fill gap.\n        axis : %(axes_single_arg)s\n            Axis along which to fill missing values.\n        inplace : bool, default False\n            If True, fill in-place. Note: this will modify any\n            other views on this object (e.g., a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            A dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible).\n\n        Returns\n        -------\n        %(klass)s\n            Object with missing values filled.\n\n        See Also\n        --------\n        interpolate : Fill NaN values using interpolation.\n        reindex : Conform object to new index.\n        asfreq : Convert TimeSeries to specified frequency.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                   columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        value, method = validate_fillna_kwargs(value, method)\n\n        self._consolidate_inplace()\n\n        # set the default here, so functions examining the signaure\n        # can detect if something was set (e.g. in groupby) (GH9221)\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n\n        if value is None:\n\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n\n                # need to downcast here because of all of the transposes\n                result._data = result._data.downcast()\n\n                return result\n\n            new_data = self._data.interpolate(\n                method=method,\n                axis=axis,\n                limit=limit,\n                inplace=inplace,\n                coerce=True,\n                downcast=downcast,\n            )\n        else:\n            if len(self._get_axis(axis)) == 0:\n                return self\n\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    from pandas import Series\n\n                    value = Series(value)\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError(\n                        '\"value\" parameter must be a scalar, dict '\n                        \"or Series, but you passed a \"\n                        '\"{0}\"'.format(type(value).__name__)\n                    )\n\n                new_data = self._data.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError(\n                        \"Currently only can fill \"\n                        \"with dict/Series column \"\n                        \"by column\"\n                    )\n\n                result = self if inplace else self.copy()\n                for k, v in value.items():\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n\n            elif not is_list_like(value):\n                new_data = self._data.fillna(\n                    value=value, limit=limit, inplace=inplace, downcast=downcast\n                )\n            elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)\n            else:\n                raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)",
        "begin_line": 5903,
        "end_line": 6089,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.replace#6411",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
        "snippet": "    def replace(\n        self,\n        to_replace=None,\n        value=None,\n        inplace=False,\n        limit=None,\n        regex=False,\n        method=\"pad\",\n    ):\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n        self._consolidate_inplace()\n\n        if value is None:\n            # passing a single value that is scalar like\n            # when value is None (GH5319), for compat\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n\n            if isinstance(to_replace, (tuple, list)):\n                if isinstance(self, ABCDataFrame):\n                    return self.apply(\n                        _single_replace, args=(to_replace, method, inplace, limit)\n                    )\n                return _single_replace(self, to_replace, method, inplace, limit)\n\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError(\n                        'If \"to_replace\" and \"value\" are both None'\n                        ' and \"to_replace\" is not a list, then '\n                        \"regex must be a mapping\"\n                    )\n                to_replace = regex\n                regex = True\n\n            items = list(to_replace.items())\n            keys, values = zip(*items) if items else ([], [])\n\n            are_mappings = [is_dict_like(v) for v in values]\n\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\n                        \"If a nested mapping is passed, all values\"\n                        \" of the top level mapping must be \"\n                        \"mappings\"\n                    )\n                # passed a nested dict/Series\n                to_rep_dict = {}\n                value_dict = {}\n\n                for k, v in items:\n                    keys, values = list(zip(*v.items())) or ([], [])\n\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n\n            return self.replace(\n                to_replace, value, inplace=inplace, limit=limit, regex=regex\n            )\n        else:\n\n            # need a non-zero len on all axes\n            if not self.size:\n                return self\n\n            new_data = self._data\n            if is_dict_like(to_replace):\n                if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                    res = self if inplace else self.copy()\n                    for c, src in to_replace.items():\n                        if c in value and c in self:\n                            # object conversion is handled in\n                            # series.replace which is called recursively\n                            res[c] = res[c].replace(\n                                to_replace=src,\n                                value=value[c],\n                                inplace=False,\n                                regex=regex,\n                            )\n                    return None if inplace else res\n\n                # {'A': NA} -> 0\n                elif not is_list_like(value):\n                    keys = [(k, src) for k, src in to_replace.items() if k in self]\n                    keys_len = len(keys) - 1\n                    for i, (k, src) in enumerate(keys):\n                        convert = i == keys_len\n                        new_data = new_data.replace(\n                            to_replace=src,\n                            value=value,\n                            filter=[k],\n                            inplace=inplace,\n                            regex=regex,\n                            convert=convert,\n                        )\n                else:\n                    raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n            elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError(\n                            f\"Replacement lists must match in length. \"\n                            f\"Expecting {len(to_replace)} got {len(value)} \"\n                        )\n\n                    new_data = self._data.replace_list(\n                        src_list=to_replace,\n                        dest_list=value,\n                        inplace=inplace,\n                        regex=regex,\n                    )\n\n                else:  # [NA, ''] -> 0\n                    new_data = self._data.replace(\n                        to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                    )\n            elif to_replace is None:\n                if not (\n                    is_re_compilable(regex)\n                    or is_list_like(regex)\n                    or is_dict_like(regex)\n                ):\n                    raise TypeError(\n                        \"'regex' must be a string or a compiled \"\n                        \"regular expression or a list or dict of \"\n                        \"strings or regular expressions, you \"\n                        \"passed a\"\n                        \" {0!r}\".format(type(regex).__name__)\n                    )\n                return self.replace(\n                    regex, value, inplace=inplace, limit=limit, regex=True\n                )\n            else:\n\n                # dest iterable dict-like\n                if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                    new_data = self._data\n\n                    for k, v in value.items():\n                        if k in self:\n                            new_data = new_data.replace(\n                                to_replace=to_replace,\n                                value=v,\n                                filter=[k],\n                                inplace=inplace,\n                                regex=regex,\n                            )\n\n                elif not is_list_like(value):  # NA -> 0\n                    new_data = self._data.replace(\n                        to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                    )\n                else:\n                    msg = ('Invalid \"to_replace\" type: ' \"{0!r}\").format(\n                        type(to_replace).__name__\n                    )\n                    raise TypeError(msg)  # pragma: no cover\n\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)",
        "begin_line": 6411,
        "end_line": 6581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isna#7099",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self).__finalize__(self)",
        "begin_line": 7099,
        "end_line": 7100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00078064012490242,
            "pseudo_dstar_susp": 0.0005488474204171241,
            "pseudo_tarantula_susp": 0.0008532423208191126,
            "pseudo_op2_susp": 0.0005488474204171241,
            "pseudo_barinel_susp": 0.0008532423208191126
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.notna#7169",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.notna(self)",
        "snippet": "    def notna(self):\n        return notna(self).__finalize__(self)",
        "begin_line": 7169,
        "end_line": 7170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.460952703274389e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.groupby#7338",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.groupby(self, by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True, squeeze=False, observed=False)",
        "snippet": "    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index=True,\n        sort=True,\n        group_keys=True,\n        squeeze=False,\n        observed=False,\n    ):\n        \"\"\"\n        Group DataFrame or Series using a mapper or by a Series of columns.\n\n        A groupby operation involves some combination of splitting the\n        object, applying a function, and combining the results. This can be\n        used to group large amounts of data and compute operations on these\n        groups.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it's called on each value of the object's\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted as a (single) key.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Split along rows (0) or columns (1).\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels.\n        as_index : bool, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output.\n        sort : bool, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group. Groupby preserves the order of rows within each group.\n        group_keys : bool, default True\n            When calling apply, add group keys to index to identify pieces.\n        squeeze : bool, default False\n            Reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type.\n        observed : bool, default False\n            This only applies if any of the groupers are Categoricals.\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        DataFrameGroupBy or SeriesGroupBy\n            Depends on the calling object and returns groupby object that\n            contains information about the groups.\n\n        See Also\n        --------\n        resample : Convenience method for frequency conversion and resampling\n            of time series.\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n        ...                               'Parrot', 'Parrot'],\n        ...                    'Max Speed': [380., 370., 24., 26.]})\n        >>> df\n           Animal  Max Speed\n        0  Falcon      380.0\n        1  Falcon      370.0\n        2  Parrot       24.0\n        3  Parrot       26.0\n        >>> df.groupby(['Animal']).mean()\n                Max Speed\n        Animal\n        Falcon      375.0\n        Parrot       25.0\n\n        **Hierarchical Indexes**\n\n        We can groupby different levels of a hierarchical index\n        using the `level` parameter:\n\n        >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n        ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n        >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n        >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n        ...                   index=index)\n        >>> df\n                        Max Speed\n        Animal Type\n        Falcon Captive      390.0\n               Wild         350.0\n        Parrot Captive       30.0\n               Wild          20.0\n        >>> df.groupby(level=0).mean()\n                Max Speed\n        Animal\n        Falcon      370.0\n        Parrot       25.0\n        >>> df.groupby(level=1).mean()\n                 Max Speed\n        Type\n        Captive      210.0\n        Wild         185.0\n        \"\"\"\n        from pandas.core.groupby.groupby import get_groupby\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return get_groupby(\n            self,\n            by=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n        )",
        "begin_line": 7338,
        "end_line": 7470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.035812284528248e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.resample#7708",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.resample(self, rule, how=None, axis=0, fill_method=None, closed=None, label=None, convention='start', kind=None, loffset=None, limit=None, base=0, on=None, level=None)",
        "snippet": "    def resample(\n        self,\n        rule,\n        how=None,\n        axis=0,\n        fill_method=None,\n        closed=None,\n        label=None,\n        convention=\"start\",\n        kind=None,\n        loffset=None,\n        limit=None,\n        base=0,\n        on=None,\n        level=None,\n    ):\n        \"\"\"\n        Resample time-series data.\n\n        Convenience method for frequency conversion and resampling of time\n        series. Object must have a datetime-like index (`DatetimeIndex`,\n        `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n        to the `on` or `level` keyword.\n\n        Parameters\n        ----------\n        rule : DateOffset, Timedelta or str\n            The offset string or object representing target conversion.\n        how : str\n            Method for down/re-sampling, default to 'mean' for downsampling.\n\n            .. deprecated:: 0.18.0\n               The new syntax is ``.resample(...).mean()``, or\n               ``.resample(...).apply(<func>)``\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Which axis to use for up- or down-sampling. For `Series` this\n            will default to 0, i.e. along the rows. Must be\n            `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n        fill_method : str, default None\n            Filling method for upsampling.\n\n            .. deprecated:: 0.18.0\n               The new syntax is ``.resample(...).<func>()``,\n               e.g. ``.resample(...).pad()``\n        closed : {'right', 'left'}, default None\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {'right', 'left'}, default None\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {'start', 'end', 's', 'e'}, default 'start'\n            For `PeriodIndex` only, controls whether to use the start or\n            end of `rule`.\n        kind : {'timestamp', 'period'}, optional, default None\n            Pass 'timestamp' to convert the resulting index to a\n            `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n            By default the input representation is retained.\n        loffset : timedelta, default None\n            Adjust the resampled time labels.\n        limit : int, default None\n            Maximum size gap when reindexing with `fill_method`.\n\n            .. deprecated:: 0.18.0\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0.\n        on : str, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n\n        level : str or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling. `level` must be datetime-like.\n\n        Returns\n        -------\n        Resampler object\n\n        See Also\n        --------\n        groupby : Group by mapping, function, label, or list of labels.\n        Series.resample : Resample a Series.\n        DataFrame.resample: Resample a DataFrame.\n\n        Notes\n        -----\n        See the `user guide\n        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n        Examples\n        --------\n\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like) + 5\n        ...\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        Resample a year by quarter using 'start' `convention`. Values are\n        assigned to the first quarter of the period.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n        ...                                             freq='A',\n        ...                                             periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n        >>> s.resample('Q', convention='start').asfreq()\n        2012Q1    1.0\n        2012Q2    NaN\n        2012Q3    NaN\n        2012Q4    NaN\n        2013Q1    2.0\n        2013Q2    NaN\n        2013Q3    NaN\n        2013Q4    NaN\n        Freq: Q-DEC, dtype: float64\n\n        Resample quarters by month using 'end' `convention`. Values are\n        assigned to the last month of the period.\n\n        >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n        ...                                                   freq='Q',\n        ...                                                   periods=4))\n        >>> q\n        2018Q1    1\n        2018Q2    2\n        2018Q3    3\n        2018Q4    4\n        Freq: Q-DEC, dtype: int64\n        >>> q.resample('M', convention='end').asfreq()\n        2018-03    1.0\n        2018-04    NaN\n        2018-05    NaN\n        2018-06    2.0\n        2018-07    NaN\n        2018-08    NaN\n        2018-09    3.0\n        2018-10    NaN\n        2018-11    NaN\n        2018-12    4.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword `on` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n        >>> df = pd.DataFrame(d)\n        >>> df['week_starting'] = pd.date_range('01/01/2018',\n        ...                                     periods=8,\n        ...                                     freq='W')\n        >>> df\n           price  volume week_starting\n        0     10      50    2018-01-07\n        1     11      60    2018-01-14\n        2      9      40    2018-01-21\n        3     13     100    2018-01-28\n        4     14      50    2018-02-04\n        5     18     100    2018-02-11\n        6     17      40    2018-02-18\n        7     19      50    2018-02-25\n        >>> df.resample('M', on='week_starting').mean()\n                       price  volume\n        week_starting\n        2018-01-31     10.75    62.5\n        2018-02-28     17.00    60.0\n\n        For a DataFrame with MultiIndex, the keyword `level` can be used to\n        specify on which level the resampling needs to take place.\n\n        >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n        >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n        ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n        >>> df2 = pd.DataFrame(d2,\n        ...                    index=pd.MultiIndex.from_product([days,\n        ...                                                     ['morning',\n        ...                                                      'afternoon']]\n        ...                                                     ))\n        >>> df2\n                              price  volume\n        2000-01-01 morning       10      50\n                   afternoon     11      60\n        2000-01-02 morning        9      40\n                   afternoon     13     100\n        2000-01-03 morning       14      50\n                   afternoon     18     100\n        2000-01-04 morning       17      40\n                   afternoon     19      50\n        >>> df2.resample('D', level=0).sum()\n                    price  volume\n        2000-01-01     21     110\n        2000-01-02     22     140\n        2000-01-03     32     150\n        2000-01-04     36      90\n        \"\"\"\n\n        from pandas.core.resample import resample, _maybe_process_deprecations\n\n        axis = self._get_axis_number(axis)\n        r = resample(\n            self,\n            freq=rule,\n            label=label,\n            closed=closed,\n            axis=axis,\n            kind=kind,\n            loffset=loffset,\n            convention=convention,\n            base=base,\n            key=on,\n            level=level,\n        )\n        return _maybe_process_deprecations(\n            r, how=how, fill_method=fill_method, limit=limit\n        )",
        "begin_line": 7708,
        "end_line": 8022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.align#8315",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
        "snippet": "    def align(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n        broadcast_axis=None,\n    ):\n        method = missing.clean_fill_method(method)\n\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, ABCSeries):\n                # this means other is a DataFrame, and we need to broadcast\n                # self\n                cons = self._constructor_expanddim\n                df = cons(\n                    {c: self for c in other.columns}, **other._construct_axes_dict()\n                )\n                return df._align_frame(\n                    other,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n            elif isinstance(other, ABCSeries):\n                # this means self is a DataFrame, and we need to broadcast\n                # other\n                cons = other._constructor_expanddim\n                df = cons(\n                    {c: other for c in self.columns}, **self._construct_axes_dict()\n                )\n                return self._align_frame(\n                    df,\n                    join=join,\n                    axis=axis,\n                    level=level,\n                    copy=copy,\n                    fill_value=fill_value,\n                    method=method,\n                    limit=limit,\n                    fill_axis=fill_axis,\n                )\n\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, ABCDataFrame):\n            return self._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            return self._align_series(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        else:  # pragma: no cover\n            raise TypeError(f\"unsupported type: {type(other)}\")",
        "begin_line": 8315,
        "end_line": 8395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._align_series#8457",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._align_series(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0)",
        "snippet": "    def _align_series(\n        self,\n        other,\n        join=\"outer\",\n        axis=None,\n        level=None,\n        copy=True,\n        fill_value=None,\n        method=None,\n        limit=None,\n        fill_axis=0,\n    ):\n\n        is_series = isinstance(self, ABCSeries)\n\n        # series/series compat, other must always be a Series\n        if is_series:\n            if axis:\n                raise ValueError(\"cannot align series to a series other than axis 0\")\n\n            # equal\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n\n        else:\n            # one has > 1 ndim\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(\n                        other.index, how=join, level=level, return_indexers=True\n                    )\n\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError(\"Must specify axis=0 or 1\")\n\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n\n            left = self._constructor(fdata)\n\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n\n        # fill\n        fill_na = notna(fill_value) or (method is not None)\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n\n        # if DatetimeIndex have different tz, convert to UTC\n        if is_series or (not is_series and axis == 0):\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n\n        return left.__finalize__(self), right.__finalize__(other)",
        "begin_line": 8457,
        "end_line": 8539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#11077",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also='', examples='')",
        "snippet": "def _make_min_count_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also=\"\", examples=\"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11077,
        "end_line": 11122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.979828296223913e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11090",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 11090,
        "end_line": 11120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.419743782969103e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function#11125",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also='', examples='')",
        "snippet": "def _make_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also=\"\", examples=\"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11125,
        "end_line": 11155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11138",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )",
        "begin_line": 11138,
        "end_line": 11153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function_ddof#11158",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f)",
        "snippet": "def _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11158,
        "end_line": 11177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11161",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )",
        "begin_line": 11161,
        "end_line": 11175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.generic._make_logical_function#11230",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_logical_function(cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value)",
        "snippet": "def _make_logical_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
        "begin_line": 11230,
        "end_line": 11260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005844535359438924,
            "pseudo_dstar_susp": 0.000514668039114771,
            "pseudo_tarantula_susp": 0.0007710100231303007,
            "pseudo_op2_susp": 0.000514668039114771,
            "pseudo_barinel_susp": 0.0007710100231303007
        }
    },
    {
        "name": "pandas.core.generic.logical_func#11243",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
        "snippet": "    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )",
        "begin_line": 11243,
        "end_line": 11258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005844535359438924,
            "pseudo_dstar_susp": 0.000514668039114771,
            "pseudo_tarantula_susp": 0.0007710100231303007,
            "pseudo_op2_susp": 0.000514668039114771,
            "pseudo_barinel_susp": 0.0007710100231303007
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties.__init__#26",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties.__init__(self, data, orig)",
        "snippet": "    def __init__(self, data, orig):\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                \"cannot convert an object of type {0} to a \"\n                \"datetimelike index\".format(type(data))\n            )\n\n        self._parent = data\n        self.orig = orig\n        self.name = getattr(data, \"name\", None)\n        self._freeze()",
        "begin_line": 26,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._get_values#38",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._get_values(self)",
        "snippet": "    def _get_values(self):\n        data = self._parent\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeIndex(data, copy=False, name=self.name)\n\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaIndex(data, copy=False, name=self.name)\n\n        else:\n            if is_period_arraylike(data):\n                # TODO: use to_period_array\n                return PeriodArray(data, copy=False)\n            if is_datetime_arraylike(data):\n                return DatetimeIndex(data, copy=False, name=self.name)\n\n        raise TypeError(\n            \"cannot convert an object of type {0} to a \"\n            \"datetimelike index\".format(type(data))\n        )",
        "begin_line": 38,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._delegate_property_get#61",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._delegate_property_get(self, name)",
        "snippet": "    def _delegate_property_get(self, name):\n        from pandas import Series\n\n        values = self._get_values()\n\n        result = getattr(values, name)\n\n        # maybe need to upcast (ints)\n        if isinstance(result, np.ndarray):\n            if is_integer_dtype(result):\n                result = result.astype(\"int64\")\n        elif not is_list_like(result):\n            return result\n\n        result = np.asarray(result)\n\n        if self.orig is not None:\n            index = self.orig.index\n        else:\n            index = self._parent.index\n        # return the result as a Series, which is by definition a copy\n        result = Series(result, index=index, name=self.name)\n\n        # setting this object will show a SettingWithCopyWarning/Error\n        result._is_copy = (\n            \"modifications to a property of a datetimelike \"\n            \"object are not supported and are discarded. \"\n            \"Change values on the original.\"\n        )\n\n        return result",
        "begin_line": 61,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.accessors.Properties._delegate_method#100",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.Properties",
        "signature": "pandas.core.indexes.accessors.Properties._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        values = self._get_values()\n\n        method = getattr(values, name)\n        result = method(*args, **kwargs)\n\n        if not is_list_like(result):\n            return result\n\n        result = Series(result, index=self._parent.index, name=self.name)\n\n        # setting this object will show a SettingWithCopyWarning/Error\n        result._is_copy = (\n            \"modifications to a method of a datetimelike \"\n            \"object are not supported and are discarded. \"\n            \"Change values on the original.\"\n        )\n\n        return result",
        "begin_line": 100,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__#309",
        "src_path": "pandas/core/indexes/accessors.py",
        "class_name": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties",
        "signature": "pandas.core.indexes.accessors.CombinedDatetimelikeProperties.__new__(cls, data)",
        "snippet": "    def __new__(cls, data):\n        # CombinedDatetimelikeProperties isn't really instantiated. Instead\n        # we need to choose which parent (datetime or timedelta) is\n        # appropriate. Since we're checking the dtypes anyway, we'll just\n        # do all the validation here.\n        from pandas import Series\n\n        if not isinstance(data, ABCSeries):\n            raise TypeError(\n                \"cannot convert an object of type {0} to a \"\n                \"datetimelike index\".format(type(data))\n            )\n\n        orig = data if is_categorical_dtype(data) else None\n        if orig is not None:\n            data = Series(\n                orig.array,\n                name=orig.name,\n                copy=False,\n                dtype=orig.values.categories.dtype,\n            )\n\n        if is_datetime64_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_datetime64tz_dtype(data.dtype):\n            return DatetimeProperties(data, orig)\n        elif is_timedelta64_dtype(data.dtype):\n            return TimedeltaProperties(data, orig)\n        elif is_period_arraylike(data):\n            return PeriodProperties(data, orig)\n        elif is_datetime_arraylike(data):\n            return DatetimeProperties(data, orig)\n\n        raise AttributeError(\"Can only use .dt accessor with datetimelike values\")",
        "begin_line": 309,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas._config.config._get_single_key#83",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat, silent)",
        "snippet": "def _get_single_key(pat, silent):\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003619254433586681,
            "pseudo_dstar_susp": 0.0003619254433586681,
            "pseudo_tarantula_susp": 0.0003620564808110065,
            "pseudo_op2_susp": 0.0003619254433586681,
            "pseudo_barinel_susp": 0.0003620564808110065
        }
    },
    {
        "name": "pandas._config.config._get_option#101",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat, silent=False)",
        "snippet": "def _get_option(pat, silent=False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.779201410073893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas._config.config._set_option#109",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs):\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 109,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00037313432835820896,
            "pseudo_dstar_susp": 0.00037313432835820896,
            "pseudo_tarantula_susp": 0.0003734129947722181,
            "pseudo_op2_susp": 0.00037313432835820896,
            "pseudo_barinel_susp": 0.0003734129947722181
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003619254433586681,
            "pseudo_dstar_susp": 0.0003619254433586681,
            "pseudo_tarantula_susp": 0.0003620564808110065,
            "pseudo_op2_susp": 0.0003619254433586681,
            "pseudo_barinel_susp": 0.0003620564808110065
        }
    },
    {
        "name": "pandas._config.config.option_context.__init__#395",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__init__(self, *args)",
        "snippet": "    def __init__(self, *args):\n        if not (len(args) % 2 == 0 and len(args) >= 2):\n            raise ValueError(\n                \"Need to invoke as option_context(pat, val, [(pat, val), ...]).\"\n            )\n\n        self.ops = list(zip(args[::2], args[1::2]))",
        "begin_line": 395,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas._config.config.option_context.__enter__#403",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__enter__(self)",
        "snippet": "    def __enter__(self):\n        self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n\n        for pat, val in self.ops:\n            _set_option(pat, val, silent=True)",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas._config.config.option_context.__exit__#409",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__exit__(self, *args)",
        "snippet": "    def __exit__(self, *args):\n        if self.undo:\n            for pat, val in self.undo:\n                _set_option(pat, val, silent=True)",
        "begin_line": 409,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas._config.config._select_options#534",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat)",
        "snippet": "def _select_options(pat):\n    \"\"\"returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 534,
        "end_line": 549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00046685340802987864,
            "pseudo_dstar_susp": 0.0012345679012345679,
            "pseudo_tarantula_susp": 0.0003756574004507889,
            "pseudo_op2_susp": 0.0012345679012345679,
            "pseudo_barinel_susp": 0.0003756574004507889
        }
    },
    {
        "name": "pandas._config.config._get_root#552",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key)",
        "snippet": "def _get_root(key):\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 552,
        "end_line": 557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035971223021582735,
            "pseudo_dstar_susp": 0.00035971223021582735,
            "pseudo_tarantula_susp": 0.0003598416696653472,
            "pseudo_op2_susp": 0.00035971223021582735,
            "pseudo_barinel_susp": 0.0003598416696653472
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#567",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key)",
        "snippet": "def _get_deprecated_option(key):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 567,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035971223021582735,
            "pseudo_dstar_susp": 0.00035971223021582735,
            "pseudo_tarantula_susp": 0.0003598416696653472,
            "pseudo_op2_susp": 0.00035971223021582735,
            "pseudo_barinel_susp": 0.0003598416696653472
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#584",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key)",
        "snippet": "def _get_registered_option(key):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 584,
        "end_line": 592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00037313432835820896,
            "pseudo_dstar_susp": 0.00037313432835820896,
            "pseudo_tarantula_susp": 0.0003734129947722181,
            "pseudo_op2_susp": 0.00037313432835820896,
            "pseudo_barinel_susp": 0.0003734129947722181
        }
    },
    {
        "name": "pandas._config.config._translate_key#595",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key)",
        "snippet": "def _translate_key(key):\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 595,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035971223021582735,
            "pseudo_dstar_susp": 0.00035971223021582735,
            "pseudo_tarantula_susp": 0.0003598416696653472,
            "pseudo_op2_susp": 0.00035971223021582735,
            "pseudo_barinel_susp": 0.0003598416696653472
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#608",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key)",
        "snippet": "def _warn_if_deprecated(key):\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 608,
        "end_line": 633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003619254433586681,
            "pseudo_dstar_susp": 0.0003619254433586681,
            "pseudo_tarantula_susp": 0.0003620564808110065,
            "pseudo_op2_susp": 0.0003619254433586681,
            "pseudo_barinel_susp": 0.0003620564808110065
        }
    },
    {
        "name": "pandas._config.config.inner#805",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x):\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 805,
        "end_line": 814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00037313432835820896,
            "pseudo_dstar_susp": 0.00037313432835820896,
            "pseudo_tarantula_susp": 0.0003734129947722181,
            "pseudo_op2_susp": 0.00037313432835820896,
            "pseudo_barinel_susp": 0.0003734129947722181
        }
    },
    {
        "name": "pandas.core.groupby.categorical.recode_for_groupby#11",
        "src_path": "pandas/core/groupby/categorical.py",
        "class_name": "pandas.core.groupby.categorical",
        "signature": "pandas.core.groupby.categorical.recode_for_groupby(c: Categorical, sort: bool, observed: bool)",
        "snippet": "def recode_for_groupby(c: Categorical, sort: bool, observed: bool):\n    \"\"\"\n    Code the categories to ensure we can groupby for categoricals.\n\n    If observed=True, we return a new Categorical with the observed\n    categories only.\n\n    If sort=False, return a copy of self, coded with categories as\n    returned by .unique(), followed by any categories not appearing in\n    the data. If sort=True, return self.\n\n    This method is needed solely to ensure the categorical index of the\n    GroupBy result has categories in the order of appearance in the data\n    (GH-8868).\n\n    Parameters\n    ----------\n    c : Categorical\n    sort : boolean\n        The value of the sort parameter groupby was called with.\n    observed : boolean\n        Account only for the observed values\n\n    Returns\n    -------\n    New Categorical\n        If sort=False, the new categories are set to the order of\n        appearance in codes (unless ordered=True, in which case the\n        original order is preserved), followed by any unrepresented\n        categories in the original order.\n    Categorical or None\n        If we are observed, return the original categorical, otherwise None\n    \"\"\"\n\n    # we only care about observed values\n    if observed:\n        unique_codes = unique1d(c.codes)\n\n        take_codes = unique_codes[unique_codes != -1]\n        if c.ordered:\n            take_codes = np.sort(take_codes)\n\n        # we recode according to the uniques\n        categories = c.categories.take(take_codes)\n        codes = _recode_for_categories(c.codes, c.categories, categories)\n\n        # return a new categorical that maps our new codes\n        # and categories\n        dtype = CategoricalDtype(categories, ordered=c.ordered)\n        return Categorical(codes, dtype=dtype, fastpath=True), c\n\n    # Already sorted according to c.categories; all is fine\n    if sort:\n        return c, None\n\n    # sort=False should order groups in as-encountered order (GH-8868)\n    cat = c.unique()\n\n    # But for groupby to work, all categories should be present,\n    # including those missing from the data (GH-13179), which .unique()\n    # above dropped\n    cat = cat.add_categories(c.categories[~c.categories.isin(cat.categories)])\n\n    return c.reorder_categories(cat.categories), None",
        "begin_line": 11,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.categorical.recode_from_groupby#77",
        "src_path": "pandas/core/groupby/categorical.py",
        "class_name": "pandas.core.groupby.categorical",
        "signature": "pandas.core.groupby.categorical.recode_from_groupby(c: Categorical, sort: bool, ci)",
        "snippet": "def recode_from_groupby(c: Categorical, sort: bool, ci):\n    \"\"\"\n    Reverse the codes_to_groupby to account for sort / observed.\n\n    Parameters\n    ----------\n    c : Categorical\n    sort : boolean\n        The value of the sort parameter groupby was called with.\n    ci : CategoricalIndex\n        The codes / categories to recode\n\n    Returns\n    -------\n    CategoricalIndex\n    \"\"\"\n\n    # we re-order to the original category orderings\n    if sort:\n        return ci.set_categories(c.categories)\n\n    # we are not sorting, so add unobserved to the end\n    return ci.add_categories(c.categories[~c.categories.isin(ci.categories)])",
        "begin_line": 77,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#48",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 48,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000375234521575985,
            "pseudo_dstar_susp": 0.000375234521575985,
            "pseudo_tarantula_susp": 0.0003756574004507889,
            "pseudo_op2_susp": 0.000375234521575985,
            "pseudo_barinel_susp": 0.0003756574004507889
        }
    },
    {
        "name": "pandas.conftest.configure_tests#71",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000375234521575985,
            "pseudo_dstar_susp": 0.000375234521575985,
            "pseudo_tarantula_susp": 0.0003756574004507889,
            "pseudo_op2_susp": 0.000375234521575985,
            "pseudo_barinel_susp": 0.0003756574004507889
        }
    },
    {
        "name": "pandas.conftest.add_imports#79",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000375234521575985,
            "pseudo_dstar_susp": 0.000375234521575985,
            "pseudo_tarantula_susp": 0.0003756574004507889,
            "pseudo_op2_susp": 0.000375234521575985,
            "pseudo_barinel_susp": 0.0003756574004507889
        }
    },
    {
        "name": "pandas.conftest.axis#92",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.axis(request)",
        "snippet": "def axis(request):\n    \"\"\"\n     Fixture for returning the axis numbers of a DataFrame.\n     \"\"\"\n    return request.param",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.observed#125",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.observed(request)",
        "snippet": "def observed(request):\n    \"\"\"\n    Pass in the observed keyword to groupby for [True, False]\n    This indicates whether categoricals should return values for\n    values which are not in the grouper [False / None], or only values which\n    appear in the grouper [True]. [None] is supported for future compatibility\n    if we decide to change the default (and would need to warn if this\n    parameter is not passed).\n    \"\"\"\n    return request.param",
        "begin_line": 125,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.ordered_fixture#138",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.ordered_fixture(request)",
        "snippet": "def ordered_fixture(request):\n    \"\"\"\n    Boolean 'ordered' parameter for Categorical.\n    \"\"\"\n    return request.param",
        "begin_line": 138,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.join_type#349",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.join_type(request)",
        "snippet": "def join_type(request):\n    \"\"\"\n    Fixture for trying all types of join operations\n    \"\"\"\n    return request.param",
        "begin_line": 349,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.430992327796982e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.strict_data_files#357",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.strict_data_files(pytestconfig)",
        "snippet": "def strict_data_files(pytestconfig):\n    return pytestconfig.getoption(\"--strict-data-files\")",
        "begin_line": 357,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00390625,
            "pseudo_dstar_susp": 0.0010214504596527069,
            "pseudo_tarantula_susp": 0.005917159763313609,
            "pseudo_op2_susp": 0.0010214504596527069,
            "pseudo_barinel_susp": 0.005917159763313609
        }
    },
    {
        "name": "pandas.conftest.datapath#362",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.datapath(strict_data_files)",
        "snippet": "def datapath(strict_data_files):\n    \"\"\"\n    Get the path to a data file.\n\n    Parameters\n    ----------\n    path : str\n        Path to the file, relative to ``pandas/tests/``\n\n    Returns\n    -------\n    path : path including ``pandas/tests``.\n\n    Raises\n    ------\n    ValueError\n        If the path doesn't exist and the --strict-data-files option is set.\n    \"\"\"\n    BASE_PATH = os.path.join(os.path.dirname(__file__), \"tests\")\n\n    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                msg = \"Could not find file {} and --strict-data-files is set.\"\n                raise ValueError(msg.format(path))\n            else:\n                msg = \"Could not find {}.\"\n                pytest.skip(msg.format(path))\n        return path\n\n    return deco",
        "begin_line": 362,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00390625,
            "pseudo_dstar_susp": 0.0010214504596527069,
            "pseudo_tarantula_susp": 0.005917159763313609,
            "pseudo_op2_susp": 0.0010214504596527069,
            "pseudo_barinel_susp": 0.005917159763313609
        }
    },
    {
        "name": "pandas.conftest.deco#382",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.deco(*args)",
        "snippet": "    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                msg = \"Could not find file {} and --strict-data-files is set.\"\n                raise ValueError(msg.format(path))\n            else:\n                msg = \"Could not find {}.\"\n                pytest.skip(msg.format(path))\n        return path",
        "begin_line": 382,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010869565217391304,
            "pseudo_dstar_susp": 0.0625,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0625,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.conftest.closed#413",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.closed(request)",
        "snippet": "def closed(request):\n    \"\"\"\n    Fixture for trying all interval closed parameters\n    \"\"\"\n    return request.param",
        "begin_line": 413,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.tz_aware_fixture#481",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_aware_fixture(request)",
        "snippet": "def tz_aware_fixture(request):\n    \"\"\"\n    Fixture for trying explicit timezones: {0}\n    \"\"\"\n    return request.param",
        "begin_line": 481,
        "end_line": 485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.any_int_dtype#639",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.any_int_dtype(request)",
        "snippet": "def any_int_dtype(request):\n    \"\"\"\n    Parameterized fixture for any integer dtype.\n\n    * int\n    * 'int8'\n    * 'uint8'\n    * 'int16'\n    * 'uint16'\n    * 'int32'\n    * 'uint32'\n    * 'int64'\n    * 'uint64'\n    \"\"\"\n\n    return request.param",
        "begin_line": 639,
        "end_line": 654,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.any_real_dtype#658",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.any_real_dtype(request)",
        "snippet": "def any_real_dtype(request):\n    \"\"\"\n    Parameterized fixture for any (purely) real numeric dtype.\n\n    * int\n    * 'int8'\n    * 'uint8'\n    * 'int16'\n    * 'uint16'\n    * 'int32'\n    * 'uint32'\n    * 'int64'\n    * 'uint64'\n    * float\n    * 'float32'\n    * 'float64'\n    \"\"\"\n\n    return request.param",
        "begin_line": 658,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.conftest.float_frame#845",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.float_frame()",
        "snippet": "def float_frame():\n    \"\"\"\n    Fixture for DataFrame of floats with index of unique strings\n\n    Columns are ['A', 'B', 'C', 'D'].\n\n                       A         B         C         D\n    P7GACiRnxd -0.465578 -0.361863  0.886172 -0.053465\n    qZKh6afn8n -0.466693 -0.373773  0.266873  1.673901\n    tkp0r6Qble  0.148691 -0.059051  0.174817  1.598433\n    wP70WOCtv8  0.133045 -0.581994 -0.992240  0.261651\n    M2AeYQMnCz -1.207959 -0.185775  0.588206  0.563938\n    QEPzyGDYDo -0.381843 -0.758281  0.502575 -0.565053\n    r78Jwns6dn -0.653707  0.883127  0.682199  0.206159\n    ...              ...       ...       ...       ...\n    IHEGx9NO0T -0.277360  0.113021 -1.018314  0.196316\n    lPMj8K27FA -1.313667 -0.604776 -1.305618 -0.863999\n    qa66YMWQa5  1.110525  0.475310 -0.747865  0.032121\n    yOa0ATsmcE -0.431457  0.067094  0.096567 -0.264962\n    65znX3uRNG  1.528446  0.160416 -0.109635 -0.032987\n    eCOBvKqf3e  0.235281  1.622222  0.781255  0.392871\n    xSucinXxuV -1.263557  0.252799 -0.552247  0.400426\n\n    [30 rows x 4 columns]\n    \"\"\"\n    return DataFrame(tm.getSeriesData())",
        "begin_line": 845,
        "end_line": 870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#71",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq):\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError):\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 71,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010101010101010102,
            "pseudo_dstar_susp": 0.010309278350515464,
            "pseudo_tarantula_susp": 0.010526315789473684,
            "pseudo_op2_susp": 0.010309278350515464,
            "pseudo_barinel_susp": 0.010526315789473684
        }
    },
    {
        "name": "pandas.tseries.frequencies.get_offset#182",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.get_offset(name)",
        "snippet": "def get_offset(name):\n    \"\"\"\n    Return DateOffset object associated with rule name\n\n    Examples\n    --------\n    get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError):\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name))\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 182,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.09090909090909091,
            "pseudo_dstar_susp": 0.001215066828675577,
            "pseudo_tarantula_susp": 0.09090909090909091,
            "pseudo_op2_susp": 0.001215066828675577,
            "pseudo_barinel_susp": 0.09090909090909091
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#217",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn=True)",
        "snippet": "def infer_freq(index, warn=True):\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      if passed a Series will use the values of the series (NOT THE INDEX).\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency\n        TypeError if the index is not datetime-like\n        ValueError if there are less than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                \"on a Series of {dtype}\".format(dtype=index.dtype)\n            )\n        index = values\n\n    if is_period_arraylike(index):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible index \"\n                \"type {type}\".format(type=type(index))\n            )\n        index = index.values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        try:\n            index = pd.DatetimeIndex(index)\n        except AmbiguousTimeError:\n            index = pd.DatetimeIndex(index.asi8)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 217,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#283",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn=True)",
        "snippet": "    def __init__(self, index, warn=True):\n        self.index = index\n        self.values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.values = tz_convert(self.values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 283,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#303",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.values)",
        "begin_line": 303,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8#307",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)",
        "snippet": "    def deltas_asi8(self):\n        return unique_deltas(self.index.asi8)",
        "begin_line": 307,
        "end_line": 308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#311",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return len(self.deltas) == 1",
        "begin_line": 311,
        "end_line": 312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8#315",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)",
        "snippet": "    def is_unique_asi8(self):\n        return len(self.deltas_asi8) == 1",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#318",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self):\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 318,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.day_deltas#364",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)",
        "snippet": "    def day_deltas(self):\n        return [x / _ONE_DAY for x in self.deltas]",
        "begin_line": 364,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.225092250922509e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas#368",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)",
        "snippet": "    def hour_deltas(self):\n        return [x / _ONE_HOUR for x in self.deltas]",
        "begin_line": 368,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#372",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.values)",
        "begin_line": 372,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.month_position_check#379",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)",
        "snippet": "    def month_position_check(self):\n        return libresolution.month_position_check(self.fields, self.index.dayofweek)",
        "begin_line": 379,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#383",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#388",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 388,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#391",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self):\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = \"{prefix}-{month}\".format(prefix=annual_rule, month=month)\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = \"{prefix}-{month}\".format(prefix=quarterly_rule, month=month)\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(\"W-{day}\".format(day=day), days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule",
        "begin_line": 391,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#427",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self):\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 427,
        "end_line": 435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#437",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#447",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 447,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily#453",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._is_business_daily(self)",
        "snippet": "    def _is_business_daily(self):\n        # quick check: cannot be business daily\n        if self.day_deltas != [1, 3]:\n            return False\n\n        # probably business daily, but need to confirm\n        first_weekday = self.index[0].weekday()\n        shifts = np.diff(self.index.asi8)\n        shifts = np.floor_divide(shifts, _ONE_DAY)\n        weekdays = np.mod(first_weekday + np.cumsum(shifts), 7)\n        return np.all(\n            ((weekdays == 0) & (shifts == 3))\n            | ((weekdays > 0) & (weekdays <= 4) & (shifts == 1))\n        )",
        "begin_line": 453,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#504",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult)",
        "snippet": "def _is_multiple(us, mult):\n    return us % mult == 0",
        "begin_line": 504,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#508",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base, count)",
        "snippet": "def _maybe_add_count(base, count):\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return \"{count}{base}\".format(count=count, base=base)\n    else:\n        return base",
        "begin_line": 508,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#335",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.389261744966443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__#341",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return (self._box_func(v) for v in self.asi8)",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#345",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 345,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004,
            "pseudo_dstar_susp": 0.009900990099009901,
            "pseudo_tarantula_susp": 0.0011135857461024498,
            "pseudo_op2_susp": 0.009900990099009901,
            "pseudo_barinel_susp": 0.0011135857461024498
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values#358",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.244801854669275e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#385",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 385,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size#392",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"The number of elements in this array.\"\"\"\n        return np.prod(self.shape)",
        "begin_line": 392,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#396",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 396,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013386880856760374,
            "pseudo_dstar_susp": 0.005952380952380952,
            "pseudo_tarantula_susp": 0.0009775171065493646,
            "pseudo_op2_susp": 0.005952380952380952,
            "pseudo_barinel_susp": 0.0009775171065493646
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#399",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            return self._box_func(val)\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            if is_period:\n                return self._simple_new(result, dtype=self.dtype, freq=freq)\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 399,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.000697350069735007,
            "pseudo_tarantula_susp": 0.0015923566878980893,
            "pseudo_op2_susp": 0.000697350069735007,
            "pseudo_barinel_susp": 0.0015923566878980893
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#504",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 504,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.389261744966443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#542",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 542,
        "end_line": 545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.273856997125104e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.unique#550",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.unique(self)",
        "snippet": "    def unique(self):\n        result = unique1d(self.asi8)\n        return type(self)(result, dtype=self.dtype)",
        "begin_line": 550,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take#573",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.take(self, indices, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None):\n        if allow_fill:\n            fill_value = self._validate_fill_value(fill_value)\n\n        new_values = take(\n            self.asi8, indices, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        return type(self)(new_values, dtype=self.dtype)",
        "begin_line": 573,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.536524890329964e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type#584",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        dtypes = {x.dtype for x in to_concat}\n        assert len(dtypes) == 1\n        dtype = list(dtypes)[0]\n\n        values = np.concatenate([x.asi8 for x in to_concat])\n        return cls(values, dtype=dtype)",
        "begin_line": 584,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#592",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 592,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00909090909090909,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0015625,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0015625
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_factorize#596",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self):\n        return self.asi8, iNaT",
        "begin_line": 596,
        "end_line": 597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_factorized#600",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        return cls(values, dtype=original.dtype)",
        "begin_line": 600,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort#603",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 603,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.map#692",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.map(self, mapper)",
        "snippet": "    def map(self, mapper):\n        # TODO(GH-23179): Add ExtensionArray.map\n        # Need to figure out if we want ExtensionArray.map first.\n        # If so, then we can refactor IndexOpsMixin._map_values to\n        # a standalone function and call from here..\n        # Else, just rewrite _map_infer_values to do the right thing.\n        from pandas import Index\n\n        return Index(self).map(mapper).array",
        "begin_line": 692,
        "end_line": 700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#705",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 705,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.304268393954493e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#709",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 709,
        "end_line": 713,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.035812284528248e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#716",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 716,
        "end_line": 720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.843137254901961e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#722",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 722,
        "end_line": 746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#799",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 799,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001321003963011889,
            "pseudo_dstar_susp": 0.0058823529411764705,
            "pseudo_tarantula_susp": 0.0009737098344693282,
            "pseudo_op2_susp": 0.0058823529411764705,
            "pseudo_barinel_susp": 0.0009737098344693282
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#806",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self, value)",
        "snippet": "    def freq(self, value):\n        if value is not None:\n            value = frequencies.to_offset(value)\n            self._validate_frequency(self, value)\n\n        self._freq = value",
        "begin_line": 806,
        "end_line": 811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr#814",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freqstr(self)",
        "snippet": "    def freqstr(self):\n        \"\"\"\n        Return the frequency object as a string if its set, otherwise None\n        \"\"\"\n        if self.freq is None:\n            return None\n        return self.freq.freqstr",
        "begin_line": 814,
        "end_line": 820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#823",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 823,
        "end_line": 832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency#846",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._validate_frequency(cls, index, freq, **kwargs)",
        "snippet": "    def _validate_frequency(cls, index, freq, **kwargs):\n        \"\"\"\n        Validate that a frequency is compatible with the values of a given\n        Datetime Array/Index or Timedelta Array/Index\n\n        Parameters\n        ----------\n        index : DatetimeIndex or TimedeltaIndex\n            The index on which to determine if the given frequency is valid\n        freq : DateOffset\n            The frequency to validate\n        \"\"\"\n        if is_period_dtype(cls):\n            # Frequency validation is not meaningful for Period Array/Index\n            return None\n\n        inferred = index.inferred_freq\n        if index.size == 0 or inferred == freq.freqstr:\n            return None\n\n        try:\n            on_freq = cls._generate_range(\n                start=index[0], end=None, periods=len(index), freq=freq, **kwargs\n            )\n            if not np.array_equal(index.asi8, on_freq.asi8):\n                raise ValueError\n        except ValueError as e:\n            if \"non-fixed\" in str(e):\n                # non-fixed frequencies are not meaningful for timedelta64;\n                #  we retain that error message\n                raise e\n            # GH#11587 the main way this is reached is if the `np.array_equal`\n            #  check above is False.  This can also be reached if index[0]\n            #  is `NaT`, in which case the call to `cls._generate_range` will\n            #  raise a ValueError, which we re-raise with a more targeted\n            #  message.\n            raise ValueError(\n                \"Inferred frequency {infer} from passed values \"\n                \"does not conform to passed frequency {passed}\".format(\n                    infer=inferred, passed=freq.freqstr\n                )\n            )",
        "begin_line": 846,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta#950",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta(self, other)",
        "snippet": "    def _add_delta(self, other):\n        \"\"\"\n        Add a timedelta-like, Tick or TimedeltaIndex-like object\n        to self, yielding an int64 numpy array\n\n        Parameters\n        ----------\n        delta : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : ndarray[int64]\n\n        Notes\n        -----\n        The result's name is set outside of _add_delta by the calling\n        method (__add__ or __sub__), if necessary (i.e. for Indexes).\n        \"\"\"\n        if isinstance(other, (Tick, timedelta, np.timedelta64)):\n            new_values = self._add_timedeltalike_scalar(other)\n        elif is_timedelta64_dtype(other):\n            # ndarray[timedelta64] or TimedeltaArray/index\n            new_values = self._add_delta_tdi(other)\n\n        return new_values",
        "begin_line": 950,
        "end_line": 975,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#977",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n        return the i8 result view\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(len(self), dtype=\"i8\")\n            new_values[:] = iNaT\n            return new_values\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n        return new_values.view(\"i8\")",
        "begin_line": 977,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__#1194",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__add__(self, other)",
        "snippet": "    def __add__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._add_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._add_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._time_shift(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(other)\n        elif is_offsetlike(other):\n            # Array/Index of DateOffset objects\n            result = self._addsub_offset_array(other, operator.add)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            return self._add_datetime_arraylike(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.add)\n        else:\n            # Includes Categorical, other ExtensionArrays\n            # For PeriodDtype, if self is a TimedeltaArray and other is a\n            #  PeriodArray with  a timedelta-like (i.e. Tick) freq, this\n            #  operation is valid.  Defer to the PeriodArray implementation.\n            #  In remaining cases, this will end up raising TypeError.\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1194,
        "end_line": 1239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1246",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n\n        # scalar others\n        if other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(-other)\n        elif is_offsetlike(other):\n            # Array/Index of DateOffset objects\n            result = self._addsub_offset_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1246,
        "end_line": 1293,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ensure_localized#1349",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ensure_localized(self, arg, ambiguous='raise', nonexistent='raise', from_utc=False)",
        "snippet": "    def _ensure_localized(\n        self, arg, ambiguous=\"raise\", nonexistent=\"raise\", from_utc=False\n    ):\n        \"\"\"\n        Ensure that we are re-localized.\n\n        This is for compat as we can then call this on all datetimelike\n        arrays generally (ignored for Period/Timedelta)\n\n        Parameters\n        ----------\n        arg : Union[DatetimeLikeArray, DatetimeIndexOpsMixin, ndarray]\n        ambiguous : str, bool, or bool-ndarray, default 'raise'\n        nonexistent : str, default 'raise'\n        from_utc : bool, default False\n            If True, localize the i8 ndarray to UTC first before converting to\n            the appropriate tz. If False, localize directly to the tz.\n\n        Returns\n        -------\n        localized array\n        \"\"\"\n\n        # reconvert to local tz\n        tz = getattr(self, \"tz\", None)\n        if tz is not None:\n            if not isinstance(arg, type(self)):\n                arg = self._simple_new(arg)\n            if from_utc:\n                arg = arg.tz_localize(\"UTC\").tz_convert(self.tz)\n            else:\n                arg = arg.tz_localize(\n                    self.tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n        return arg",
        "begin_line": 1349,
        "end_line": 1383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1501",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(\n                \"periods must be a number, got {periods}\".format(periods=periods)\n            )\n    return periods",
        "begin_line": 1501,
        "end_line": 1526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012804097311139564,
            "pseudo_dstar_susp": 0.0006968641114982578,
            "pseudo_tarantula_susp": 0.001589825119236884,
            "pseudo_op2_susp": 0.0006968641114982578,
            "pseudo_barinel_susp": 0.001589825119236884
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1529",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1529,
        "end_line": 1559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001152073732718894,
            "pseudo_dstar_susp": 0.0006578947368421052,
            "pseudo_tarantula_susp": 0.0013908205841446453,
            "pseudo_op2_susp": 0.0006578947368421052,
            "pseudo_barinel_susp": 0.0013908205841446453
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1562",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                \"Inferred frequency {inferred} from passed \"\n                \"values does not conform to passed frequency \"\n                \"{passed}\".format(inferred=inferred_freq, passed=freq.freqstr)\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1562,
        "end_line": 1594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.014084507042253521,
            "pseudo_dstar_susp": 0.010869565217391304,
            "pseudo_tarantula_susp": 0.014492753623188406,
            "pseudo_op2_susp": 0.010869565217391304,
            "pseudo_barinel_susp": 0.014492753623188406
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1597",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1597,
        "end_line": 1621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005235602094240838,
            "pseudo_dstar_susp": 0.010309278350515464,
            "pseudo_tarantula_susp": 0.0011723329425556857,
            "pseudo_op2_susp": 0.010309278350515464,
            "pseudo_barinel_susp": 0.0011723329425556857
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike._ensure_datetimelike_to_i8#1624",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike._ensure_datetimelike_to_i8(other, to_utc=False)",
        "snippet": "def _ensure_datetimelike_to_i8(other, to_utc=False):\n    \"\"\"\n    Helper for coercing an input scalar or array to i8.\n\n    Parameters\n    ----------\n    other : 1d array\n    to_utc : bool, default False\n        If True, convert the values to UTC before extracting the i8 values\n        If False, extract the i8 values directly.\n\n    Returns\n    -------\n    i8 1d array\n    \"\"\"\n    from pandas import Index\n\n    if lib.is_scalar(other) and isna(other):\n        return iNaT\n    elif isinstance(other, (ABCPeriodArray, ABCIndexClass, DatetimeLikeArrayMixin)):\n        # convert tz if needed\n        if getattr(other, \"tz\", None) is not None:\n            if to_utc:\n                other = other.tz_convert(\"UTC\")\n            else:\n                other = other.tz_localize(None)\n    else:\n        try:\n            return np.array(other, copy=False).view(\"i8\")\n        except TypeError:\n            # period array cannot be coerced to int\n            other = Index(other)\n    return other.asi8",
        "begin_line": 1624,
        "end_line": 1656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints#75",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndexUIntEngine",
        "signature": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self, codes)",
        "snippet": "    def _codes_to_ints(self, codes):\n        \"\"\"\n        Transform combination(s) of uint64 in one uint64 (each), in a strictly\n        monotonic way (i.e. respecting the lexicographic order of integer\n        combinations): see BaseMultiIndexCodesEngine documentation.\n\n        Parameters\n        ----------\n        codes : 1- or 2-dimensional array of dtype uint64\n            Combinations of integers (one per row)\n\n        Returns\n        -------\n        int_keys : scalar or 1-dimensional array, of dtype uint64\n            Integer(s) representing one combination (each).\n        \"\"\"\n        # Shift the representation of each level by the pre-calculated number\n        # of bits:\n        codes <<= self.offsets\n\n        # Now sum and OR are in fact interchangeable. This is a simple\n        # composition of the (disjunct) significant bits of each level (i.e.\n        # each column in \"codes\") in a single positive integer:\n        if codes.ndim == 1:\n            # Single key\n            return np.bitwise_or.reduce(codes)\n\n        # Multiple keys\n        return np.bitwise_or.reduce(codes, axis=1)",
        "begin_line": 75,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.271298593879239e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__new__#246",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity=True, _set_identity=True)",
        "snippet": "    def __new__(\n        cls,\n        levels=None,\n        codes=None,\n        sortorder=None,\n        names=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity=True,\n        _set_identity=True,\n    ):\n\n        # compat with Index\n        if name is not None:\n            names = name\n        if levels is None or codes is None:\n            raise TypeError(\"Must pass both levels and codes\")\n        if len(levels) != len(codes):\n            raise ValueError(\"Length of levels and codes must be the same.\")\n        if len(levels) == 0:\n            raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n        result = object.__new__(MultiIndex)\n\n        # we've already validated levels and codes, so shortcut here\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_codes(codes, copy=copy, validate=False)\n\n        result._names = [None] * len(levels)\n        if names is not None:\n            # handles name validation\n            result._set_names(names)\n\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n\n        if verify_integrity:\n            new_codes = result._verify_integrity()\n            result._codes = new_codes\n\n        if _set_identity:\n            result._reset_identity()\n\n        return result",
        "begin_line": 246,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._validate_codes#294",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._validate_codes(self, level: list, code: list)",
        "snippet": "    def _validate_codes(self, level: list, code: list):\n        \"\"\"\n        Reassign code values as -1 if their corresponding levels are NaN.\n\n        Parameters\n        ----------\n        code : list\n            Code to reassign.\n        level : list\n            Level to check for missing values (NaN, NaT, None).\n\n        Returns\n        -------\n        code : new code where code value = -1 if it corresponds\n        to a level with missing values (NaN, NaT, None).\n        \"\"\"\n        null_mask = isna(level)\n        if np.any(null_mask):\n            code = np.where(null_mask[code], -1, code)\n        return code",
        "begin_line": 294,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._verify_integrity#315",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._verify_integrity(self, codes=None, levels=None)",
        "snippet": "    def _verify_integrity(self, codes=None, levels=None):\n        \"\"\"\n\n        Parameters\n        ----------\n        codes : optional list\n            Codes to check for validity. Defaults to current codes.\n        levels : optional list\n            Levels to check for validity. Defaults to current levels.\n\n        Raises\n        ------\n        ValueError\n            If length of levels and codes don't match, if the codes for any\n            level would exceed level bounds, or there are any duplicate levels.\n\n        Returns\n        -------\n        codes : new codes where code value = -1 if it corresponds to a\n        NaN level.\n        \"\"\"\n        # NOTE: Currently does not check, among other things, that cached\n        # nlevels matches nor that sortorder matches actually sortorder.\n        codes = codes or self.codes\n        levels = levels or self.levels\n\n        if len(levels) != len(codes):\n            raise ValueError(\n                \"Length of levels and codes must match. NOTE:\"\n                \" this index is in an inconsistent state.\"\n            )\n        codes_length = len(codes[0])\n        for i, (level, level_codes) in enumerate(zip(levels, codes)):\n            if len(level_codes) != codes_length:\n                raise ValueError(\n                    \"Unequal code lengths: %s\" % ([len(code_) for code_ in codes])\n                )\n            if len(level_codes) and level_codes.max() >= len(level):\n                msg = (\n                    \"On level {level}, code max ({max_code}) >= length of \"\n                    \"level ({level_len}). NOTE: this index is in an \"\n                    \"inconsistent state\".format(\n                        level=i, max_code=level_codes.max(), level_len=len(level)\n                    )\n                )\n                raise ValueError(msg)\n            if len(level_codes) and level_codes.min() < -1:\n                raise ValueError(\n                    \"On level {level}, code value ({code})\"\n                    \" < -1\".format(level=i, code=level_codes.min())\n                )\n            if not level.is_unique:\n                raise ValueError(\n                    \"Level values must be unique: {values} on \"\n                    \"level {level}\".format(values=list(level), level=i)\n                )\n        if self.sortorder is not None:\n            if self.sortorder > self._lexsort_depth():\n                raise ValueError(\n                    \"Value for sortorder must be inferior or equal \"\n                    \"to actual lexsort_depth: \"\n                    \"sortorder {sortorder} with lexsort_depth {lexsort_depth}\".format(\n                        sortorder=self.sortorder, lexsort_depth=self._lexsort_depth()\n                    )\n                )\n\n        codes = [\n            self._validate_codes(level, code) for level, code in zip(levels, codes)\n        ]\n        new_codes = FrozenList(codes)\n        return new_codes",
        "begin_line": 315,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_arrays#388",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_arrays(cls, arrays, sortorder=None, names=_no_default_names)",
        "snippet": "    def from_arrays(cls, arrays, sortorder=None, names=_no_default_names):\n        \"\"\"\n        Convert arrays to MultiIndex.\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        index : MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        error_msg = \"Input must be a list / sequence of array-likes.\"\n        if not is_list_like(arrays):\n            raise TypeError(error_msg)\n        elif is_iterator(arrays):\n            arrays = list(arrays)\n\n        # Check if elements of array are list-like\n        for array in arrays:\n            if not is_list_like(array):\n                raise TypeError(error_msg)\n\n        # Check if lengths of all arrays are equal or not,\n        # raise ValueError, if not\n        for i in range(1, len(arrays)):\n            if len(arrays[i]) != len(arrays[i - 1]):\n                raise ValueError(\"all arrays must be same length\")\n\n        codes, levels = factorize_from_iterables(arrays)\n        if names is _no_default_names:\n            names = [getattr(arr, \"name\", None) for arr in arrays]\n\n        return MultiIndex(\n            levels=levels,\n            codes=codes,\n            sortorder=sortorder,\n            names=names,\n            verify_integrity=False,\n        )",
        "begin_line": 388,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_tuples#454",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_tuples(cls, tuples, sortorder=None, names=None)",
        "snippet": "    def from_tuples(cls, tuples, sortorder=None, names=None):\n        \"\"\"\n        Convert list of tuples to MultiIndex.\n\n        Parameters\n        ----------\n        tuples : list / sequence of tuple-likes\n            Each tuple is the index of one row/column.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        index : MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> tuples = [(1, 'red'), (1, 'blue'),\n        ...           (2, 'red'), (2, 'blue')]\n        >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        if not is_list_like(tuples):\n            raise TypeError(\"Input must be a list / sequence of tuple-likes.\")\n        elif is_iterator(tuples):\n            tuples = list(tuples)\n\n        if len(tuples) == 0:\n            if names is None:\n                msg = \"Cannot infer number of levels from empty list\"\n                raise TypeError(msg)\n            arrays = [[]] * len(names)\n        elif isinstance(tuples, (np.ndarray, Index)):\n            if isinstance(tuples, Index):\n                tuples = tuples._values\n\n            arrays = list(lib.tuples_to_object_array(tuples).T)\n        elif isinstance(tuples, list):\n            arrays = list(lib.to_object_array_tuples(tuples).T)\n        else:\n            arrays = zip(*tuples)\n\n        return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
        "begin_line": 454,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_product#513",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_product(cls, iterables, sortorder=None, names=_no_default_names)",
        "snippet": "    def from_product(cls, iterables, sortorder=None, names=_no_default_names):\n        \"\"\"\n        Make a MultiIndex from the cartesian product of multiple iterables.\n\n        Parameters\n        ----------\n        iterables : list / sequence of iterables\n            Each iterable has unique labels for each level of the index.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n            .. versionchanged:: 1.0.0\n\n               If not explicitly provided, names will be inferred from the\n               elements of iterables if an element has a name attribute\n\n        Returns\n        -------\n        index : MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> numbers = [0, 1, 2]\n        >>> colors = ['green', 'purple']\n        >>> pd.MultiIndex.from_product([numbers, colors],\n        ...                            names=['number', 'color'])\n        MultiIndex([(0,  'green'),\n                    (0, 'purple'),\n                    (1,  'green'),\n                    (1, 'purple'),\n                    (2,  'green'),\n                    (2, 'purple')],\n                   names=['number', 'color'])\n        \"\"\"\n        from pandas.core.reshape.util import cartesian_product\n\n        if not is_list_like(iterables):\n            raise TypeError(\"Input must be a list / sequence of iterables.\")\n        elif is_iterator(iterables):\n            iterables = list(iterables)\n\n        codes, levels = factorize_from_iterables(iterables)\n        if names is _no_default_names:\n            names = [getattr(it, \"name\", None) for it in iterables]\n\n        codes = cartesian_product(codes)\n        return MultiIndex(levels, codes, sortorder=sortorder, names=names)",
        "begin_line": 513,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levels#639",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levels(self)",
        "snippet": "    def levels(self):\n        result = [\n            x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n        ]\n        return FrozenList(result)",
        "begin_line": 639,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.477942605428517e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._values#646",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._values(self)",
        "snippet": "    def _values(self):\n        # We override here, since our parent uses _data, which we don't use.\n        return self.values",
        "begin_line": 646,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.316359379572725e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_levels#699",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_levels(\n        self, levels, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        # This is NOT part of the levels property because it should be\n        # externally not allowed to set levels. User beware if you change\n        # _levels directly\n        if validate:\n            if len(levels) == 0:\n                raise ValueError(\"Must set non-zero number of levels.\")\n            if level is None and len(levels) != self.nlevels:\n                raise ValueError(\"Length of levels must match number of levels.\")\n            if level is not None and len(levels) != len(level):\n                raise ValueError(\"Length of levels must match length of level.\")\n\n        if level is None:\n            new_levels = FrozenList(\n                ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_levels = list(self._levels)\n            for lev_num, lev in zip(level_numbers, levels):\n                new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(levels=new_levels)\n            self._codes = new_codes\n\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 699,
        "end_line": 734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.set_levels#736",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.set_levels(self, levels, level=None, inplace=False, verify_integrity=True)",
        "snippet": "    def set_levels(self, levels, level=None, inplace=False, verify_integrity=True):\n        \"\"\"\n        Set new levels on MultiIndex. Defaults to returning new index.\n\n        Parameters\n        ----------\n        levels : sequence or list of sequence\n            New level(s) to apply.\n        level : int, level name, or sequence of int/level names (default None)\n            Level(s) to set (None for all levels).\n        inplace : bool\n            If True, mutates in place.\n        verify_integrity : bool (default True)\n            If True, checks that levels and codes are compatible.\n\n        Returns\n        -------\n        new index (of same type and class...etc)\n\n        Examples\n        --------\n        >>> idx = pd.MultiIndex.from_tuples([(1, 'one'), (1, 'two'),\n                                            (2, 'one'), (2, 'two')],\n                                            names=['foo', 'bar'])\n        >>> idx.set_levels([['a', 'b'], [1, 2]])\n        MultiIndex([('a', 1),\n                    ('a', 2),\n                    ('b', 1),\n                    ('b', 2)],\n                   names=['foo', 'bar'])\n        >>> idx.set_levels(['a', 'b'], level=0)\n        MultiIndex([('a', 'one'),\n                    ('a', 'two'),\n                    ('b', 'one'),\n                    ('b', 'two')],\n                   names=['foo', 'bar'])\n        >>> idx.set_levels(['a', 'b'], level='bar')\n        MultiIndex([(1, 'a'),\n                    (1, 'b'),\n                    (2, 'a'),\n                    (2, 'b')],\n                   names=['foo', 'bar'])\n        >>> idx.set_levels([['a', 'b'], [1, 2]], level=[0, 1])\n        MultiIndex([('a', 1),\n                    ('a', 2),\n                    ('b', 1),\n                    ('b', 2)],\n                   names=['foo', 'bar'])\n        \"\"\"\n        if is_list_like(levels) and not isinstance(levels, Index):\n            levels = list(levels)\n\n        if level is not None and not is_list_like(level):\n            if not is_list_like(levels):\n                raise TypeError(\"Levels must be list-like\")\n            if is_list_like(levels[0]):\n                raise TypeError(\"Levels must be list-like\")\n            level = [level]\n            levels = [levels]\n        elif level is None or is_list_like(level):\n            if not is_list_like(levels) or not is_list_like(levels[0]):\n                raise TypeError(\"Levels must be list of lists-like\")\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._reset_identity()\n        idx._set_levels(\n            levels, level=level, validate=True, verify_integrity=verify_integrity\n        )\n        if not inplace:\n            return idx",
        "begin_line": 736,
        "end_line": 808,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.codes#811",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._codes",
        "begin_line": 811,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.411078343377356e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_codes#814",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_codes(\n        self, codes, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        if validate:\n            if level is None and len(codes) != self.nlevels:\n                raise ValueError(\"Length of codes must match number of levels\")\n            if level is not None and len(codes) != len(level):\n                raise ValueError(\"Length of codes must match length of levels.\")\n\n        if level is None:\n            new_codes = FrozenList(\n                _coerce_indexer_frozen(level_codes, lev, copy=copy).view()\n                for lev, level_codes in zip(self._levels, codes)\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_codes = list(self._codes)\n            for lev_num, level_codes in zip(level_numbers, codes):\n                lev = self.levels[lev_num]\n                new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n            new_codes = FrozenList(new_codes)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(codes=new_codes)\n\n        self._codes = new_codes\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 814,
        "end_line": 842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.424257998201208e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.copy#920",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.copy(self, names=None, dtype=None, levels=None, codes=None, deep=False, _set_identity=False, **kwargs)",
        "snippet": "    def copy(\n        self,\n        names=None,\n        dtype=None,\n        levels=None,\n        codes=None,\n        deep=False,\n        _set_identity=False,\n        **kwargs,\n    ):\n        \"\"\"\n        Make a copy of this object. Names, dtype, levels and codes can be\n        passed and will be set on new copy.\n\n        Parameters\n        ----------\n        names : sequence, optional\n        dtype : numpy dtype or pandas type, optional\n        levels : sequence, optional\n        codes : sequence, optional\n\n        Returns\n        -------\n        copy : MultiIndex\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        This could be potentially expensive on large MultiIndex objects.\n        \"\"\"\n        name = kwargs.get(\"name\")\n        names = self._validate_names(name=name, names=names, deep=deep)\n        if \"labels\" in kwargs:\n            raise TypeError(\"'labels' argument has been removed; use 'codes' instead\")\n        if deep:\n            from copy import deepcopy\n\n            if levels is None:\n                levels = deepcopy(self.levels)\n            if codes is None:\n                codes = deepcopy(self.codes)\n        else:\n            if levels is None:\n                levels = self.levels\n            if codes is None:\n                codes = self.codes\n        return MultiIndex(\n            levels=levels,\n            codes=codes,\n            names=names,\n            sortorder=self.sortorder,\n            verify_integrity=False,\n            _set_identity=_set_identity,\n        )",
        "begin_line": 920,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.721333512568894e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__array__#976",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\" the array interface, return my values \"\"\"\n        return self.values",
        "begin_line": 976,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.view#980",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n        \"\"\" this is defined as a copy with the same identity \"\"\"\n        result = self.copy()\n        result._id = self._id\n        return result",
        "begin_line": 980,
        "end_line": 984,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__contains__#998",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        hash(key)\n        try:\n            self.get_loc(key)\n            return True\n        except (LookupError, TypeError, ValueError):\n            return False",
        "begin_line": 998,
        "end_line": 1004,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._shallow_copy#1007",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None:\n            names = kwargs.pop(\"names\", kwargs.pop(\"name\", self.names))\n            # discards freq\n            kwargs.pop(\"freq\", None)\n            return MultiIndex.from_tuples(values, names=names, **kwargs)\n        return self.copy(**kwargs)",
        "begin_line": 1007,
        "end_line": 1013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.dtype#1016",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(\"O\")",
        "begin_line": 1016,
        "end_line": 1017,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.767273465520742e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.format#1117",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.format(self, space=2, sparsify=None, adjoin=True, names=False, na_rep=None, formatter=None)",
        "snippet": "    def format(\n        self,\n        space=2,\n        sparsify=None,\n        adjoin=True,\n        names=False,\n        na_rep=None,\n        formatter=None,\n    ):\n        if len(self) == 0:\n            return []\n\n        stringified_levels = []\n        for lev, level_codes in zip(self.levels, self.codes):\n            na = na_rep if na_rep is not None else _get_na_rep(lev.dtype.type)\n\n            if len(lev) > 0:\n\n                formatted = lev.take(level_codes).format(formatter=formatter)\n\n                # we have some NA\n                mask = level_codes == -1\n                if mask.any():\n                    formatted = np.array(formatted, dtype=object)\n                    formatted[mask] = na\n                    formatted = formatted.tolist()\n\n            else:\n                # weird all NA case\n                formatted = [\n                    pprint_thing(na if isna(x) else x, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                    for x in algos.take_1d(lev._values, level_codes)\n                ]\n            stringified_levels.append(formatted)\n\n        result_levels = []\n        for lev, name in zip(stringified_levels, self.names):\n            level = []\n\n            if names:\n                level.append(\n                    pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                    if name is not None\n                    else \"\"\n                )\n\n            level.extend(np.array(lev, dtype=object))\n            result_levels.append(level)\n\n        if sparsify is None:\n            sparsify = get_option(\"display.multi_sparse\")\n\n        if sparsify:\n            sentinel = \"\"\n            # GH3547\n            # use value of sparsify as sentinel,  unless it's an obvious\n            # \"Truthy\" value\n            if sparsify not in [True, 1]:\n                sentinel = sparsify\n            # little bit of a kludge job for #1217\n            result_levels = _sparsify(\n                result_levels, start=int(names), sentinel=sentinel\n            )\n\n        if adjoin:\n            from pandas.io.formats.format import _get_adjustment\n\n            adj = _get_adjustment()\n            return adj.adjoin(space, *result_levels).split(\"\\n\")\n        else:\n            return result_levels",
        "begin_line": 1117,
        "end_line": 1187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__len__#1191",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.codes[0])",
        "begin_line": 1191,
        "end_line": 1192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.43459236857345e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_names#1194",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList(self._names)",
        "begin_line": 1194,
        "end_line": 1195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.424257998201208e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_names#1197",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_names(self, names, level=None, validate=True)",
        "snippet": "    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110\n        # Don't allow a single string for names in a MultiIndex\n        if names is not None and not is_list_like(names):\n            raise ValueError(\"Names should be list-like for a MultiIndex\")\n        names = list(names)\n\n        if validate:\n            if level is not None and len(names) != len(level):\n                raise ValueError(\"Length of names must match length of level.\")\n            if level is None and len(names) != self.nlevels:\n                raise ValueError(\n                    \"Length of names must match number of levels in MultiIndex.\"\n                )\n\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(lev) for lev in level]\n\n        # set the name\n        for lev, name in zip(level, names):\n            if name is not None:\n                # GH 20527\n                # All items in 'names' need to be hashable:\n                if not is_hashable(name):\n                    raise TypeError(\n                        \"{}.name must be a hashable type\".format(type(self).__name__)\n                    )\n            self._names[lev] = name",
        "begin_line": 1197,
        "end_line": 1250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.507451031430989e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.inferred_type#1294",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"mixed\"",
        "begin_line": 1294,
        "end_line": 1295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.15307582260372e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_number#1297",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n                raise KeyError(f\"Level {level} not found\")\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        f\"Too many levels: Index has only {self.nlevels} levels,\"\n                        f\" {orig_level} is not a valid level number\"\n                    )\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n                raise IndexError(\n                    \"Too many levels: Index has only %d levels, \"\n                    \"not %d\" % (self.nlevels, level + 1)\n                )\n        return level",
        "begin_line": 1297,
        "end_line": 1322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._engine#1327",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_....\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n        # ... in order to obtain offsets such that sorting the combination of\n        # shifted codes (one for each level, resulting in a unique integer) is\n        # equivalent to sorting lexicographically the codes themselves. Notice\n        # that each level needs to be shifted by the number of bits needed to\n        # represent the _previous_ ones:\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n        # Check the total number of bits needed for our representation:\n        if lev_bits[0] > 64:\n            # The levels would overflow a 64 bit uint - use Python integers:\n            return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n        return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
        "begin_line": 1327,
        "end_line": 1346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.66000666000666e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.values#1349",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.values(self)",
        "snippet": "    def values(self):\n        if self._tuples is not None:\n            return self._tuples\n\n        values = []\n\n        for i in range(self.nlevels):\n            vals = self._get_level_values(i)\n            if is_categorical_dtype(vals):\n                vals = vals._internal_get_values()\n            if isinstance(vals.dtype, ExtensionDtype) or hasattr(vals, \"_box_values\"):\n                vals = vals.astype(object)\n            vals = np.array(vals, copy=False)\n            values.append(vals)\n\n        self._tuples = lib.fast_zip(values)\n        return self._tuples",
        "begin_line": 1349,
        "end_line": 1365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing#1368",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        return if the index is monotonic increasing (only equal or\n        increasing) values.\n        \"\"\"\n\n        if all(x.is_monotonic for x in self.levels):\n            # If each level is sorted, we can operate on the codes directly. GH27495\n            return libalgos.is_lexsorted(\n                [x.astype(\"int64\", copy=False) for x in self.codes]\n            )\n\n        # reversed() because lexsort() wants the most significant key last.\n        values = [\n            self._get_level_values(i).values for i in reversed(range(len(self.levels)))\n        ]\n        try:\n            sort_order = np.lexsort(values)\n            return Index(sort_order).is_monotonic\n        except TypeError:\n\n            # we have mixed types and np.lexsort is not happy\n            return Index(self.values).is_monotonic",
        "begin_line": 1368,
        "end_line": 1390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_value#1477",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n        # Label-based\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        def _try_mi(k):\n            # TODO: what if a level contains tuples??\n            loc = self.get_loc(k)\n            new_values = series._values[loc]\n            new_index = self[loc]\n            new_index = maybe_droplevels(new_index, k)\n            return series._constructor(\n                new_values, index=new_index, name=series.name\n            ).__finalize__(self)\n\n        try:\n            return self._engine.get_value(s, k)\n        except KeyError as e1:\n            try:\n                return _try_mi(key)\n            except KeyError:\n                pass\n\n            try:\n                return libindex.get_value_at(s, k)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:  # pragma: no cover\n                raise e1\n        except TypeError:\n\n            # a Timestamp will raise a TypeError in a multi-index\n            # rather than a KeyError, try it here\n            # note that a string that 'looks' like a Timestamp will raise\n            # a KeyError! (GH5725)\n            if isinstance(key, (datetime.datetime, np.datetime64, str)):\n                try:\n                    return _try_mi(key)\n                except KeyError:\n                    raise\n                except (IndexError, ValueError, TypeError):\n                    pass\n\n                try:\n                    return _try_mi(Timestamp(key))\n                except (\n                    KeyError,\n                    TypeError,\n                    IndexError,\n                    ValueError,\n                    tslibs.OutOfBoundsDatetime,\n                ):\n                    pass\n\n            raise InvalidIndexError(key)",
        "begin_line": 1477,
        "end_line": 1537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._try_mi#1482",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._try_mi(k)",
        "snippet": "        def _try_mi(k):\n            # TODO: what if a level contains tuples??\n            loc = self.get_loc(k)\n            new_values = series._values[loc]\n            new_index = self[loc]\n            new_index = maybe_droplevels(new_index, k)\n            return series._constructor(\n                new_values, index=new_index, name=series.name\n            ).__finalize__(self)",
        "begin_line": 1482,
        "end_line": 1490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_values#1539",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_values(self, level, unique=False)",
        "snippet": "    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n\n        lev = self.levels[level]\n        level_codes = self.codes[level]\n        name = self._names[level]\n        if unique:\n            level_codes = algos.unique(level_codes)\n        filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n        return lev._shallow_copy(filled, name=name)",
        "begin_line": 1539,
        "end_line": 1563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.675121820973233e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_level_values#1565",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_level_values(self, level)",
        "snippet": "    def get_level_values(self, level):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index.\n\n        Parameters\n        ----------\n        level : int or str\n            ``level`` is either the integer position of the level in the\n            MultiIndex, or the name of the level.\n\n        Returns\n        -------\n        values : Index\n            Values is a level of this MultiIndex converted to\n            a single :class:`Index` (or subclass thereof).\n\n        Examples\n        --------\n\n        Create a MultiIndex:\n\n        >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n        >>> mi.names = ['level_1', 'level_2']\n\n        Get level values by supplying level as either integer or name:\n\n        >>> mi.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object', name='level_1')\n        >>> mi.get_level_values('level_2')\n        Index(['d', 'e', 'f'], dtype='object', name='level_2')\n        \"\"\"\n        level = self._get_level_number(level)\n        values = self._get_level_values(level)\n        return values",
        "begin_line": 1565,
        "end_line": 1599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.094544277157196e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_all_dates#1701",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return False",
        "begin_line": 1701,
        "end_line": 1702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.866245536940401e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_lexsorted#1704",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_lexsorted(self)",
        "snippet": "    def is_lexsorted(self) -> bool:\n        \"\"\"\n        Return True if the codes are lexicographically sorted.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self.lexsort_depth == self.nlevels",
        "begin_line": 1704,
        "end_line": 1712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.563152321887763e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.lexsort_depth#1715",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)",
        "snippet": "    def lexsort_depth(self):\n        if self.sortorder is not None:\n            return self.sortorder\n\n        return self._lexsort_depth()",
        "begin_line": 1715,
        "end_line": 1719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._lexsort_depth#1721",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._lexsort_depth(self)",
        "snippet": "    def _lexsort_depth(self) -> int:\n        \"\"\"\n        Compute and return the lexsort_depth, the number of levels of the\n        MultiIndex that are sorted lexically\n\n        Returns\n        ------\n        int\n        \"\"\"\n        int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n        for k in range(self.nlevels, 0, -1):\n            if libalgos.is_lexsorted(int64_codes[:k]):\n                return k\n        return 0",
        "begin_line": 1721,
        "end_line": 1734,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic#1736",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        This is an *internal* function.\n\n        Create a new MultiIndex from the current to monotonically sorted\n        items IN the levels. This does not actually make the entire MultiIndex\n        monotonic, JUST the levels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n\n        >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n        ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi\n        MultiIndex([('a', 'bb'),\n                    ('a', 'aa'),\n                    ('b', 'bb'),\n                    ('b', 'aa')],\n                   )\n\n        >>> mi.sort_values()\n        MultiIndex([('a', 'aa'),\n                    ('a', 'bb'),\n                    ('b', 'aa'),\n                    ('b', 'bb')],\n                   )\n        \"\"\"\n\n        if self.is_lexsorted() and self.is_monotonic:\n            return self\n\n        new_levels = []\n        new_codes = []\n\n        for lev, level_codes in zip(self.levels, self.codes):\n\n            if not lev.is_monotonic:\n                try:\n                    # indexer to reorder the levels\n                    indexer = lev.argsort()\n                except TypeError:\n                    pass\n                else:\n                    lev = lev.take(indexer)\n\n                    # indexer to reorder the level codes\n                    indexer = ensure_int64(indexer)\n                    ri = lib.get_reverse_indexer(indexer, len(indexer))\n                    level_codes = algos.take_1d(ri, level_codes)\n\n            new_levels.append(lev)\n            new_codes.append(level_codes)\n\n        return MultiIndex(\n            new_levels,\n            new_codes,\n            names=self.names,\n            sortorder=self.sortorder,\n            verify_integrity=False,\n        )",
        "begin_line": 1736,
        "end_line": 1803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.remove_unused_levels#1805",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.remove_unused_levels(self)",
        "snippet": "    def remove_unused_levels(self):\n        \"\"\"\n        Create a new MultiIndex from the current that removes\n        unused levels, meaning that they are not expressed in the labels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_product([range(2), list('ab')])\n        >>> mi\n        MultiIndex([(0, 'a'),\n                    (0, 'b'),\n                    (1, 'a'),\n                    (1, 'b')],\n                   )\n\n        >>> mi[2:]\n        MultiIndex([(1, 'a'),\n                    (1, 'b')],\n                   )\n\n        The 0 from the first level is not represented\n        and can be removed\n\n        >>> mi2 = mi[2:].remove_unused_levels()\n        >>> mi2.levels\n        FrozenList([[1], ['a', 'b']])\n        \"\"\"\n\n        new_levels = []\n        new_codes = []\n\n        changed = False\n        for lev, level_codes in zip(self.levels, self.codes):\n\n            # Since few levels are typically unused, bincount() is more\n            # efficient than unique() - however it only accepts positive values\n            # (and drops order):\n            uniques = np.where(np.bincount(level_codes + 1) > 0)[0] - 1\n            has_na = int(len(uniques) and (uniques[0] == -1))\n\n            if len(uniques) != len(lev) + has_na:\n                # We have unused levels\n                changed = True\n\n                # Recalculate uniques, now preserving order.\n                # Can easily be cythonized by exploiting the already existing\n                # \"uniques\" and stop parsing \"level_codes\" when all items\n                # are found:\n                uniques = algos.unique(level_codes)\n                if has_na:\n                    na_idx = np.where(uniques == -1)[0]\n                    # Just ensure that -1 is in first position:\n                    uniques[[0, na_idx[0]]] = uniques[[na_idx[0], 0]]\n\n                # codes get mapped from uniques to 0:len(uniques)\n                # -1 (if present) is mapped to last position\n                code_mapping = np.zeros(len(lev) + has_na)\n                # ... and reassigned value -1:\n                code_mapping[uniques] = np.arange(len(uniques)) - has_na\n\n                level_codes = code_mapping[level_codes]\n\n                # new levels are simple\n                lev = lev.take(uniques[has_na:])\n\n            new_levels.append(lev)\n            new_codes.append(level_codes)\n\n        result = self.view()\n\n        if changed:\n            result._reset_identity()\n            result._set_levels(new_levels, validate=False)\n            result._set_codes(new_codes, validate=False)\n\n        return result",
        "begin_line": 1805,
        "end_line": 1888,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.nlevels#1891",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Integer number of levels in this MultiIndex.\n        \"\"\"\n        return len(self._levels)",
        "begin_line": 1891,
        "end_line": 1895,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.404098623118796e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levshape#1898",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levshape(self)",
        "snippet": "    def levshape(self):\n        \"\"\"\n        A tuple with the length of each level.\n        \"\"\"\n        return tuple(len(x) for x in self.levels)",
        "begin_line": 1898,
        "end_line": 1902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.640106241699867e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__getitem__#1936",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n\n            retval = []\n            for lev, level_codes in zip(self.levels, self.codes):\n                if level_codes[key] == -1:\n                    retval.append(np.nan)\n                else:\n                    retval.append(lev[level_codes[key]])\n\n            return tuple(retval)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key, dtype=bool)\n                sortorder = self.sortorder\n            else:\n                # cannot be sure whether the result will be sorted\n                sortorder = None\n\n                if isinstance(key, Index):\n                    key = np.asarray(key)\n\n            new_codes = [level_codes[key] for level_codes in self.codes]\n\n            return MultiIndex(\n                levels=self.levels,\n                codes=new_codes,\n                names=self.names,\n                sortorder=sortorder,\n                verify_integrity=False,\n            )",
        "begin_line": 1936,
        "end_line": 1967,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.take#1970",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(\n            self.codes,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=-1,\n        )\n        return MultiIndex(\n            levels=self.levels, codes=taken, names=self.names, verify_integrity=False\n        )",
        "begin_line": 1970,
        "end_line": 1982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.387706855791962e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable#1984",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=None\n    ):\n        \"\"\" Internal method to handle NA filling of take \"\"\"\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = [lab.take(indices) for lab in self.codes]\n            mask = indices == -1\n            if mask.any():\n                masked = []\n                for new_label in taken:\n                    label_values = new_label\n                    label_values[mask] = na_value\n                    masked.append(np.asarray(label_values))\n                taken = masked\n        else:\n            taken = [lab.take(indices) for lab in self.codes]\n        return taken",
        "begin_line": 1984,
        "end_line": 2007,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.387706855791962e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.append#2009",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        if not isinstance(other, (list, tuple)):\n            other = [other]\n\n        if all(\n            (isinstance(o, MultiIndex) and o.nlevels >= self.nlevels) for o in other\n        ):\n            arrays = []\n            for i in range(self.nlevels):\n                label = self._get_level_values(i)\n                appended = [o._get_level_values(i) for o in other]\n                arrays.append(label.append(appended))\n            return MultiIndex.from_arrays(arrays, names=self.names)\n\n        to_concat = (self.values,) + tuple(k._values for k in other)\n        new_tuples = np.concatenate(to_concat)\n\n        # if all(isinstance(x, MultiIndex) for x in other):\n        try:\n            return MultiIndex.from_tuples(new_tuples, names=self.names)\n        except (TypeError, IndexError):\n            return Index(new_tuples)",
        "begin_line": 2009,
        "end_line": 2041,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.drop#2064",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.drop(self, codes, level=None, errors='raise')",
        "snippet": "    def drop(self, codes, level=None, errors=\"raise\"):\n        \"\"\"\n        Make new MultiIndex with passed list of codes deleted\n\n        Parameters\n        ----------\n        codes : array-like\n            Must be a list of tuples\n        level : int or level name, default None\n        errors : str, default 'raise'\n\n        Returns\n        -------\n        dropped : MultiIndex\n        \"\"\"\n        if level is not None:\n            return self._drop_from_level(codes, level)\n\n        if not isinstance(codes, (np.ndarray, Index)):\n            try:\n                codes = com.index_labels_to_array(codes)\n            except ValueError:\n                pass\n\n        inds = []\n        for level_codes in codes:\n            try:\n                loc = self.get_loc(level_codes)\n                # get_loc returns either an integer, a slice, or a boolean\n                # mask\n                if isinstance(loc, int):\n                    inds.append(loc)\n                elif isinstance(loc, slice):\n                    inds.extend(range(loc.start, loc.stop))\n                elif com.is_bool_indexer(loc):\n                    if self.lexsort_depth == 0:\n                        warnings.warn(\n                            \"dropping on a non-lexsorted multi-index\"\n                            \" without a level parameter may impact \"\n                            \"performance.\",\n                            PerformanceWarning,\n                            stacklevel=3,\n                        )\n                    loc = loc.nonzero()[0]\n                    inds.extend(loc)\n                else:\n                    msg = \"unsupported indexer of type {}\".format(type(loc))\n                    raise AssertionError(msg)\n            except KeyError:\n                if errors != \"ignore\":\n                    raise\n\n        return self.delete(inds)",
        "begin_line": 2064,
        "end_line": 2116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.reorder_levels#2186",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.reorder_levels(self, order)",
        "snippet": "    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange levels using input order. May not drop or duplicate levels.\n\n        Parameters\n        ----------\n\n        Returns\n        -------\n        MultiIndex\n        \"\"\"\n        order = [self._get_level_number(i) for i in order]\n        if len(order) != self.nlevels:\n            raise AssertionError(\n                f\"Length of order must be same as number of levels ({self.nlevels}),\"\n                f\" got {len(order)}\"\n            )\n        new_levels = [self.levels[i] for i in order]\n        new_codes = [self.codes[i] for i in order]\n        new_names = [self.names[i] for i in order]\n\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n        )",
        "begin_line": 2186,
        "end_line": 2209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_codes_for_sorting#2214",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_codes_for_sorting(self)",
        "snippet": "    def _get_codes_for_sorting(self):\n        \"\"\"\n        we categorizing our codes by using the\n        available categories (all, not just observed)\n        excluding any missing ones (-1); this is in preparation\n        for sorting, where we need to disambiguate that -1 is not\n        a valid valid\n        \"\"\"\n\n        def cats(level_codes):\n            return np.arange(\n                np.array(level_codes).max() + 1 if len(level_codes) else 0,\n                dtype=level_codes.dtype,\n            )\n\n        return [\n            Categorical.from_codes(level_codes, cats(level_codes), ordered=True)\n            for level_codes in self.codes\n        ]",
        "begin_line": 2214,
        "end_line": 2232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.cats#2223",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.cats(level_codes)",
        "snippet": "        def cats(level_codes):\n            return np.arange(\n                np.array(level_codes).max() + 1 if len(level_codes) else 0,\n                dtype=level_codes.dtype,\n            )",
        "begin_line": 2223,
        "end_line": 2227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.sortlevel#2234",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.sortlevel(self, level=0, ascending=True, sort_remaining=True)",
        "snippet": "    def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n        \"\"\"\n        Sort MultiIndex at the requested level. The result will respect the\n        original ordering of the associated factor at that level.\n\n        Parameters\n        ----------\n        level : list-like, int or str, default 0\n            If a string is given, must be a name of the level.\n            If list-like must be names or ints of levels.\n        ascending : bool, default True\n            False to sort in descending order.\n            Can also be a list to specify a directed ordering.\n        sort_remaining : sort by the remaining levels after level\n\n        Returns\n        -------\n        sorted_index : pd.MultiIndex\n            Resulting index.\n        indexer : np.ndarray\n            Indices of output values in original index.\n        \"\"\"\n        if isinstance(level, (str, int)):\n            level = [level]\n        level = [self._get_level_number(lev) for lev in level]\n        sortorder = None\n\n        # we have a directed ordering via ascending\n        if isinstance(ascending, list):\n            if not len(level) == len(ascending):\n                raise ValueError(\"level must have same length as ascending\")\n\n            indexer = lexsort_indexer(\n                [self.codes[lev] for lev in level], orders=ascending\n            )\n\n        # level ordering\n        else:\n\n            codes = list(self.codes)\n            shape = list(self.levshape)\n\n            # partition codes and shape\n            primary = tuple(codes[lev] for lev in level)\n            primshp = tuple(shape[lev] for lev in level)\n\n            # Reverse sorted to retain the order of\n            # smaller indices that needs to be removed\n            for lev in sorted(level, reverse=True):\n                codes.pop(lev)\n                shape.pop(lev)\n\n            if sort_remaining:\n                primary += primary + tuple(codes)\n                primshp += primshp + tuple(shape)\n            else:\n                sortorder = level[0]\n\n            indexer = indexer_from_factorized(primary, primshp, compress=False)\n\n            if not ascending:\n                indexer = indexer[::-1]\n\n        indexer = ensure_platform_int(indexer)\n        new_codes = [level_codes.take(indexer) for level_codes in self.codes]\n\n        new_index = MultiIndex(\n            codes=new_codes,\n            levels=self.levels,\n            names=self.names,\n            sortorder=sortorder,\n            verify_integrity=False,\n        )\n\n        return new_index, indexer",
        "begin_line": 2234,
        "end_line": 2308,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer#2310",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer(self, keyarr, kind=None)",
        "snippet": "    def _convert_listlike_indexer(self, keyarr, kind=None):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        tuple (indexer, keyarr)\n            indexer is an ndarray or None if cannot convert\n            keyarr are tuple-safe keys\n        \"\"\"\n        indexer, keyarr = super()._convert_listlike_indexer(keyarr, kind=kind)\n\n        # are we indexing a specific level\n        if indexer is None and len(keyarr) and not isinstance(keyarr[0], tuple):\n            level = 0\n            _, indexer = self.reindex(keyarr, level=level)\n\n            # take all\n            if indexer is None:\n                indexer = np.arange(len(self))\n\n            check = self.levels[0].get_indexer(keyarr)\n            mask = check == -1\n            if mask.any():\n                raise KeyError(\"%s not in index\" % keyarr[mask])\n\n        return indexer, keyarr",
        "begin_line": 2310,
        "end_line": 2339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_indexer#2342",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n\n        # empty indexer\n        if is_list_like(target) and not len(target):\n            return ensure_platform_int(np.array([]))\n\n        if not isinstance(target, MultiIndex):\n            try:\n                target = MultiIndex.from_tuples(target)\n            except (TypeError, ValueError):\n\n                # let's instead try with a straight Index\n                if method is None:\n                    return Index(self.values).get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n\n        if not self.is_unique:\n            raise ValueError(\"Reindexing only valid with uniquely valued Index objects\")\n\n        if method == \"pad\" or method == \"backfill\":\n            if tolerance is not None:\n                raise NotImplementedError(\n                    \"tolerance not implemented yet for MultiIndex\"\n                )\n            indexer = self._engine.get_indexer(target, method, limit)\n        elif method == \"nearest\":\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet \"\n                \"for MultiIndex; see GitHub issue 9365\"\n            )\n        else:\n            indexer = self._engine.get_indexer(target)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2342,
        "end_line": 2378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.reindex#2384",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.MultiIndex\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"names\")\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n\n            # GH7774: preserve dtype/tz if target is empty and not an Index.\n            # target may be an iterator\n            target = ibase._ensure_has_len(target)\n            if len(target) == 0 and not isinstance(target, Index):\n                idx = self.levels[level]\n                attrs = idx._get_attributes_dict()\n                attrs.pop(\"freq\", None)  # don't preserve freq\n                target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype), **attrs)\n            else:\n                target = ensure_index(target)\n            target, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True, keep_order=False\n            )\n        else:\n            target = ensure_index(target)\n            if self.equals(target):\n                indexer = None\n            else:\n                if self.is_unique:\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    raise ValueError(\"cannot handle a non-unique multi-index!\")\n\n        if not isinstance(target, MultiIndex):\n            if indexer is None:\n                target = self\n            elif (indexer >= 0).all():\n                target = self.take(indexer)\n            else:\n                # hopefully?\n                target = MultiIndex.from_tuples(target)\n\n        if (\n            preserve_names\n            and target.nlevels == self.nlevels\n            and target.names != self.names\n        ):\n            target = target.copy(deep=False)\n            target.names = self.names\n\n        return target, indexer",
        "begin_line": 2384,
        "end_line": 2446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc#2540",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc(self, key, method=None)",
        "snippet": "    def get_loc(self, key, method=None):\n        \"\"\"\n        Get location for a label or a tuple of labels as an integer, slice or\n        boolean mask.\n\n        Parameters\n        ----------\n        key : label or tuple of labels (one for each level)\n        method : None\n\n        Returns\n        -------\n        loc : int, slice object or boolean mask\n            If the key is past the lexsort depth, the return may be a\n            boolean mask array, otherwise it is always a slice or int.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Notes\n        -----\n        The key cannot be a slice, list of same-level labels, a boolean mask,\n        or a sequence of such. If you want to use those, use\n        :meth:`MultiIndex.get_locs` instead.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_loc('b')\n        slice(1, 3, None)\n\n        >>> mi.get_loc(('b', 'e'))\n        1\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"only the default get_loc method is \"\n                \"currently supported for MultiIndex\"\n            )\n\n        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask\n\n        if not isinstance(key, tuple):\n            loc = self._get_level_indexer(key, level=0)\n            return _maybe_to_slice(loc)\n\n        keylen = len(key)\n        if self.nlevels < keylen:\n            raise KeyError(\n                \"Key length ({0}) exceeds index depth ({1})\"\n                \"\".format(keylen, self.nlevels)\n            )\n\n        if keylen == self.nlevels and self.is_unique:\n            return self._engine.get_loc(key)\n\n        # -- partial selection or non-unique index\n        # break the key into 2 parts based on the lexsort_depth of the index;\n        # the first part returns a continuous slice of the index; the 2nd part\n        # needs linear search within the slice\n        i = self.lexsort_depth\n        lead_key, follow_key = key[:i], key[i:]\n        start, stop = (\n            self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n        )\n\n        if start == stop:\n            raise KeyError(key)\n\n        if not follow_key:\n            return slice(start, stop)\n\n        warnings.warn(\n            \"indexing past lexsort depth may impact performance.\",\n            PerformanceWarning,\n            stacklevel=10,\n        )\n\n        loc = np.arange(start, stop, dtype=\"int64\")\n\n        for i, k in enumerate(follow_key, len(lead_key)):\n            mask = self.codes[i][loc] == self.levels[i].get_loc(k)\n            if not mask.all():\n                loc = loc[mask]\n            if not len(loc):\n                raise KeyError(key)\n\n        return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
        "begin_line": 2540,
        "end_line": 2645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice#2586",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice(loc)",
        "snippet": "        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask",
        "begin_line": 2586,
        "end_line": 2598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc_level#2647",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc_level(self, key, level=0, drop_level: bool=True)",
        "snippet": "    def get_loc_level(self, key, level=0, drop_level: bool = True):\n        \"\"\"\n        Get both the location for the requested label(s) and the\n        resulting sliced index.\n\n        Parameters\n        ----------\n        key : label or sequence of labels\n        level : int/level name or list thereof, optional\n        drop_level : bool, default True\n            if ``False``, the resulting index will not drop any level.\n\n        Returns\n        -------\n        loc : A 2-tuple where the elements are:\n              Element 0: int, slice object or boolean array\n              Element 1: The resulting sliced multiindex/index. If the key\n              contains all levels, this will be ``None``.\n\n        See Also\n        --------\n        MultiIndex.get_loc  : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n        ...                                names=['A', 'B'])\n\n        >>> mi.get_loc_level('b')\n        (slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n        >>> mi.get_loc_level('e', level='B')\n        (array([False,  True, False], dtype=bool),\n        Index(['b'], dtype='object', name='A'))\n\n        >>> mi.get_loc_level(['b', 'e'])\n        (1, None)\n        \"\"\"\n\n        # different name to distinguish from maybe_droplevels\n        def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n            if not drop_level:\n                return self[indexer]\n            # kludgearound\n            orig_index = new_index = self[indexer]\n            levels = [self._get_level_number(i) for i in levels]\n            for i in sorted(levels, reverse=True):\n                try:\n                    new_index = new_index.droplevel(i)\n                except ValueError:\n\n                    # no dropping here\n                    return orig_index\n            return new_index\n\n        if isinstance(level, (tuple, list)):\n            if len(key) != len(level):\n                raise AssertionError(\n                    \"Key for location must have same length as number of levels\"\n                )\n            result = None\n            for lev, k in zip(level, key):\n                loc, new_index = self.get_loc_level(k, level=lev)\n                if isinstance(loc, slice):\n                    mask = np.zeros(len(self), dtype=bool)\n                    mask[loc] = True\n                    loc = mask\n\n                result = loc if result is None else result & loc\n\n            return result, maybe_mi_droplevels(result, level, drop_level)\n\n        level = self._get_level_number(level)\n\n        # kludge for #1796\n        if isinstance(key, list):\n            key = tuple(key)\n\n        if isinstance(key, tuple) and level == 0:\n\n            try:\n                if key in self.levels[0]:\n                    indexer = self._get_level_indexer(key, level=level)\n                    new_index = maybe_mi_droplevels(indexer, [0], drop_level)\n                    return indexer, new_index\n            except TypeError:\n                pass\n\n            if not any(isinstance(k, slice) for k in key):\n\n                # partial selection\n                # optionally get indexer to avoid re-calculation\n                def partial_selection(key, indexer=None):\n                    if indexer is None:\n                        indexer = self.get_loc(key)\n                    ilevels = [\n                        i for i in range(len(key)) if key[i] != slice(None, None)\n                    ]\n                    return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n\n                if len(key) == self.nlevels and self.is_unique:\n                    # Complete key in unique index -> standard get_loc\n                    try:\n                        return (self._engine.get_loc(key), None)\n                    except KeyError as e:\n                        raise KeyError(key) from e\n                else:\n                    return partial_selection(key)\n            else:\n                indexer = None\n                for i, k in enumerate(key):\n                    if not isinstance(k, slice):\n                        k = self._get_level_indexer(k, level=i)\n                        if isinstance(k, slice):\n                            # everything\n                            if k.start == 0 and k.stop == len(self):\n                                k = slice(None, None)\n                        else:\n                            k_index = k\n\n                    if isinstance(k, slice):\n                        if k == slice(None, None):\n                            continue\n                        else:\n                            raise TypeError(key)\n\n                    if indexer is None:\n                        indexer = k_index\n                    else:  # pragma: no cover\n                        indexer &= k_index\n                if indexer is None:\n                    indexer = slice(None, None)\n                ilevels = [i for i in range(len(key)) if key[i] != slice(None, None)]\n                return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)\n        else:\n            indexer = self._get_level_indexer(key, level=level)\n            return indexer, maybe_mi_droplevels(indexer, [level], drop_level)",
        "begin_line": 2647,
        "end_line": 2785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.maybe_mi_droplevels#2689",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.maybe_mi_droplevels(indexer, levels, drop_level: bool)",
        "snippet": "        def maybe_mi_droplevels(indexer, levels, drop_level: bool):\n            if not drop_level:\n                return self[indexer]\n            # kludgearound\n            orig_index = new_index = self[indexer]\n            levels = [self._get_level_number(i) for i in levels]\n            for i in sorted(levels, reverse=True):\n                try:\n                    new_index = new_index.droplevel(i)\n                except ValueError:\n\n                    # no dropping here\n                    return orig_index\n            return new_index",
        "begin_line": 2689,
        "end_line": 2702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.partial_selection#2741",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.partial_selection(key, indexer=None)",
        "snippet": "                def partial_selection(key, indexer=None):\n                    if indexer is None:\n                        indexer = self.get_loc(key)\n                    ilevels = [\n                        i for i in range(len(key)) if key[i] != slice(None, None)\n                    ]\n                    return indexer, maybe_mi_droplevels(indexer, ilevels, drop_level)",
        "begin_line": 2741,
        "end_line": 2747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_indexer#2787",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_indexer(self, key, level=0, indexer=None)",
        "snippet": "    def _get_level_indexer(self, key, level=0, indexer=None):\n        # return an indexer, boolean array or a slice showing where the key is\n        # in the totality of values\n        # if the indexer is provided, then use this\n\n        level_index = self.levels[level]\n        level_codes = self.codes[level]\n\n        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)._ndarray_values\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m\n\n        if isinstance(key, slice):\n            # handle a slice, returning a slice if we can\n            # otherwise a boolean indexer\n\n            try:\n                if key.start is not None:\n                    start = level_index.get_loc(key.start)\n                else:\n                    start = 0\n                if key.stop is not None:\n                    stop = level_index.get_loc(key.stop)\n                else:\n                    stop = len(level_index) - 1\n                step = key.step\n            except KeyError:\n\n                # we have a partial slice (like looking up a partial date\n                # string)\n                start = stop = level_index.slice_indexer(\n                    key.start, key.stop, key.step, kind=\"loc\"\n                )\n                step = start.step\n\n            if isinstance(start, slice) or isinstance(stop, slice):\n                # we have a slice for start and/or stop\n                # a partial date slicer on a DatetimeIndex generates a slice\n                # note that the stop ALREADY includes the stopped point (if\n                # it was a string sliced)\n                start = getattr(start, \"start\", start)\n                stop = getattr(stop, \"stop\", stop)\n                return convert_indexer(start, stop, step)\n\n            elif level > 0 or self.lexsort_depth == 0 or step is not None:\n                # need to have like semantics here to right\n                # searching as when we are using a slice\n                # so include the stop+1 (so we include stop)\n                return convert_indexer(start, stop + 1, step)\n            else:\n                # sorted, so can return slice object -> view\n                i = level_codes.searchsorted(start, side=\"left\")\n                j = level_codes.searchsorted(stop, side=\"right\")\n                return slice(i, j, step)\n\n        else:\n\n            code = level_index.get_loc(key)\n\n            if level > 0 or self.lexsort_depth == 0:\n                # Desired level is not sorted\n                locs = np.array(level_codes == code, dtype=bool, copy=False)\n                if not locs.any():\n                    # The label is present in self.levels[level] but unused:\n                    raise KeyError(key)\n                return locs\n\n            i = level_codes.searchsorted(code, side=\"left\")\n            j = level_codes.searchsorted(code, side=\"right\")\n            if i == j:\n                # The label is present in self.levels[level] but unused:\n                raise KeyError(key)\n            return slice(i, j)",
        "begin_line": 2787,
        "end_line": 2882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.convert_indexer#2795",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
        "snippet": "        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)._ndarray_values\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m",
        "begin_line": 2795,
        "end_line": 2820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.638835841417768e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_locs#2884",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_locs(self, seq)",
        "snippet": "    def get_locs(self, seq):\n        \"\"\"\n        Get location for a given label/slice/list/mask or a sequence of such as\n        an array of integers.\n\n        Parameters\n        ----------\n        seq : label/slice/list/mask or a sequence of such\n           You should use one of the above for each level.\n           If a level should not be used, set it to ``slice(None)``.\n\n        Returns\n        -------\n        locs : array of integers suitable for passing to iloc\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_locs('b')\n        array([1, 2], dtype=int64)\n\n        >>> mi.get_locs([slice(None), ['e', 'f']])\n        array([1, 2], dtype=int64)\n\n        >>> mi.get_locs([[True, False, True], slice('e', 'f')])\n        array([2], dtype=int64)\n\n        See Also\n        --------\n        MultiIndex.get_loc : Get location for a label or a tuple of labels.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        \"\"\"\n        from .numeric import Int64Index\n\n        # must be lexsorted to at least as many levels\n        true_slices = [i for (i, s) in enumerate(com.is_true_slices(seq)) if s]\n        if true_slices and true_slices[-1] >= self.lexsort_depth:\n            raise UnsortedIndexError(\n                \"MultiIndex slicing requires the index \"\n                \"to be lexsorted: slicing on levels {0}, \"\n                \"lexsort depth {1}\".format(true_slices, self.lexsort_depth)\n            )\n        # indexer\n        # this is the list of all values that we want to select\n        n = len(self)\n        indexer = None\n\n        def _convert_to_indexer(r):\n            # return an indexer\n            if isinstance(r, slice):\n                m = np.zeros(n, dtype=bool)\n                m[r] = True\n                r = m.nonzero()[0]\n            elif com.is_bool_indexer(r):\n                if len(r) != n:\n                    raise ValueError(\n                        \"cannot index with a boolean indexer \"\n                        \"that is not the same length as the \"\n                        \"index\"\n                    )\n                r = r.nonzero()[0]\n            return Int64Index(r)\n\n        def _update_indexer(idxr, indexer=indexer):\n            if indexer is None:\n                indexer = Index(np.arange(n))\n            if idxr is None:\n                return indexer\n            return indexer & idxr\n\n        for i, k in enumerate(seq):\n\n            if com.is_bool_indexer(k):\n                # a boolean indexer, must be the same length!\n                k = np.asarray(k)\n                indexer = _update_indexer(_convert_to_indexer(k), indexer=indexer)\n\n            elif is_list_like(k):\n                # a collection of labels to include from this level (these\n                # are or'd)\n                indexers = None\n                for x in k:\n                    try:\n                        idxrs = _convert_to_indexer(\n                            self._get_level_indexer(x, level=i, indexer=indexer)\n                        )\n                        indexers = idxrs if indexers is None else indexers | idxrs\n                    except KeyError:\n\n                        # ignore not founds\n                        continue\n\n                if indexers is not None:\n                    indexer = _update_indexer(indexers, indexer=indexer)\n                else:\n                    # no matches we are done\n                    return Int64Index([])._ndarray_values\n\n            elif com.is_null_slice(k):\n                # empty slice\n                indexer = _update_indexer(None, indexer=indexer)\n\n            elif isinstance(k, slice):\n\n                # a slice, include BOTH of the labels\n                indexer = _update_indexer(\n                    _convert_to_indexer(\n                        self._get_level_indexer(k, level=i, indexer=indexer)\n                    ),\n                    indexer=indexer,\n                )\n            else:\n                # a single label\n                indexer = _update_indexer(\n                    _convert_to_indexer(\n                        self.get_loc_level(k, level=i, drop_level=False)[0]\n                    ),\n                    indexer=indexer,\n                )\n\n        # empty indexer\n        if indexer is None:\n            return Int64Index([])._ndarray_values\n        return indexer._ndarray_values",
        "begin_line": 2884,
        "end_line": 3009,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._convert_to_indexer#2933",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._convert_to_indexer(r)",
        "snippet": "        def _convert_to_indexer(r):\n            # return an indexer\n            if isinstance(r, slice):\n                m = np.zeros(n, dtype=bool)\n                m[r] = True\n                r = m.nonzero()[0]\n            elif com.is_bool_indexer(r):\n                if len(r) != n:\n                    raise ValueError(\n                        \"cannot index with a boolean indexer \"\n                        \"that is not the same length as the \"\n                        \"index\"\n                    )\n                r = r.nonzero()[0]\n            return Int64Index(r)",
        "begin_line": 2933,
        "end_line": 2947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._update_indexer#2949",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._update_indexer(idxr, indexer=indexer)",
        "snippet": "        def _update_indexer(idxr, indexer=indexer):\n            if indexer is None:\n                indexer = Index(np.arange(n))\n            if idxr is None:\n                return indexer\n            return indexer & idxr",
        "begin_line": 2949,
        "end_line": 2954,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.equals#3040",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See Also\n        --------\n        equal_levels\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if not isinstance(other, MultiIndex):\n            other_vals = com.values_from_object(ensure_index(other))\n            return array_equivalent(self._ndarray_values, other_vals)\n\n        if self.nlevels != other.nlevels:\n            return False\n\n        if len(self) != len(other):\n            return False\n\n        for i in range(self.nlevels):\n            self_codes = self.codes[i]\n            self_codes = self_codes[self_codes != -1]\n            self_values = algos.take_nd(\n                np.asarray(self.levels[i]._values), self_codes, allow_fill=False\n            )\n\n            other_codes = other.codes[i]\n            other_codes = other_codes[other_codes != -1]\n            other_values = algos.take_nd(\n                np.asarray(other.levels[i]._values), other_codes, allow_fill=False\n            )\n\n            # since we use NaT both datetime64 and timedelta64\n            # we can have a situation where a level is typed say\n            # timedelta64 in self (IOW it has other values than NaT)\n            # but types datetime64 in other (where its all NaT)\n            # but these are equivalent\n            if len(self_values) == 0 and len(other_values) == 0:\n                continue\n\n            if not array_equivalent(self_values, other_values):\n                return False\n\n        return True",
        "begin_line": 3040,
        "end_line": 3089,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.union#3104",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two MultiIndex objects\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n        sort : False or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        Index\n\n        >>> index.union(index2)\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if len(other) == 0 or self.equals(other):\n            return self\n\n        # TODO: Index.union returns other when `len(self)` is 0.\n\n        uniq_tuples = lib.fast_unique_multiple(\n            [self._ndarray_values, other._ndarray_values], sort=sort\n        )\n\n        return MultiIndex.from_arrays(\n            zip(*uniq_tuples), sortorder=0, names=result_names\n        )",
        "begin_line": 3104,
        "end_line": 3151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.intersection#3153",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        \"\"\"\n        Form the intersection of two MultiIndex objects.\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n        sort : False or None, default False\n            Sort the resulting MultiIndex if possible\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default from ``True`` to ``False``, to match\n               behaviour from before 0.24.0\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if self.equals(other):\n            return self\n\n        self_tuples = self._ndarray_values\n        other_tuples = other._ndarray_values\n        uniq_tuples = set(self_tuples) & set(other_tuples)\n\n        if sort is None:\n            uniq_tuples = sorted(uniq_tuples)\n\n        if len(uniq_tuples) == 0:\n            return MultiIndex(\n                levels=self.levels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n        else:\n            return MultiIndex.from_arrays(\n                zip(*uniq_tuples), sortorder=0, names=result_names\n            )",
        "begin_line": 3153,
        "end_line": 3198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.difference#3200",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.difference(self, other, sort=None)",
        "snippet": "    def difference(self, other, sort=None):\n        \"\"\"\n        Compute set difference of two MultiIndex objects\n\n        Parameters\n        ----------\n        other : MultiIndex\n        sort : False or None, default None\n            Sort the resulting MultiIndex if possible\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        diff : MultiIndex\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n\n        if len(other) == 0:\n            return self\n\n        if self.equals(other):\n            return MultiIndex(\n                levels=self.levels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n\n        label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n        difference = this.values.take(label_diff)\n        if sort is None:\n            difference = sorted(difference)\n\n        if len(difference) == 0:\n            return MultiIndex(\n                levels=[[]] * self.nlevels,\n                codes=[[]] * self.nlevels,\n                names=result_names,\n                verify_integrity=False,\n            )\n        else:\n            return MultiIndex.from_tuples(difference, sortorder=0, names=result_names)",
        "begin_line": 3200,
        "end_line": 3254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.astype#3257",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_categorical_dtype(dtype):\n            msg = \"> 1 ndim Categorical are not supported at this time\"\n            raise NotImplementedError(msg)\n        elif not is_object_dtype(dtype):\n            msg = (\n                \"Setting {cls} dtype to anything other than object is not supported\"\n            ).format(cls=type(self))\n            raise TypeError(msg)\n        elif copy is True:\n            return self._shallow_copy()\n        return self",
        "begin_line": 3257,
        "end_line": 3269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._convert_can_do_setop#3271",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._convert_can_do_setop(self, other)",
        "snippet": "    def _convert_can_do_setop(self, other):\n        result_names = self.names\n\n        if not hasattr(other, \"names\"):\n            if len(other) == 0:\n                other = MultiIndex(\n                    levels=[[]] * self.nlevels,\n                    codes=[[]] * self.nlevels,\n                    verify_integrity=False,\n                )\n            else:\n                msg = \"other must be a MultiIndex or a list of tuples\"\n                try:\n                    other = MultiIndex.from_tuples(other)\n                except TypeError:\n                    raise TypeError(msg)\n        else:\n            result_names = self.names if self.names == other.names else None\n        return other, result_names",
        "begin_line": 3271,
        "end_line": 3289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.791442279447762e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.insert#3291",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new MultiIndex inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : tuple\n            Must be same length as number of levels in the MultiIndex\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        # Pad the key with empty strings if lower levels of the key\n        # aren't specified:\n        if not isinstance(item, tuple):\n            item = (item,) + (\"\",) * (self.nlevels - 1)\n        elif len(item) != self.nlevels:\n            raise ValueError(\"Item must have length equal to number of levels.\")\n\n        new_levels = []\n        new_codes = []\n        for k, level, level_codes in zip(item, self.levels, self.codes):\n            if k not in level:\n                # have to insert into level\n                # must insert at end otherwise you have to recompute all the\n                # other codes\n                lev_loc = len(level)\n                level = level.insert(lev_loc, k)\n            else:\n                lev_loc = level.get_loc(k)\n\n            new_levels.append(level)\n            new_codes.append(np.insert(ensure_int64(level_codes), loc, lev_loc))\n\n        return MultiIndex(\n            levels=new_levels, codes=new_codes, names=self.names, verify_integrity=False\n        )",
        "begin_line": 3291,
        "end_line": 3329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.delete#3331",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.delete(self, loc)",
        "snippet": "    def delete(self, loc):\n        \"\"\"\n        Make new index with passed location deleted\n\n        Returns\n        -------\n        new_index : MultiIndex\n        \"\"\"\n        new_codes = [np.delete(level_codes, loc) for level_codes in self.codes]\n        return MultiIndex(\n            levels=self.levels,\n            codes=new_codes,\n            names=self.names,\n            verify_integrity=False,\n        )",
        "begin_line": 3331,
        "end_line": 3345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._wrap_joined_index#3347",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        names = self.names if self.names == other.names else None\n        return MultiIndex.from_tuples(joined, names=names)",
        "begin_line": 3347,
        "end_line": 3349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi._sparsify#3373",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._sparsify(label_list, start: int=0, sentinel='')",
        "snippet": "def _sparsify(label_list, start: int = 0, sentinel=\"\"):\n    pivoted = list(zip(*label_list))\n    k = len(label_list)\n\n    result = pivoted[: start + 1]\n    prev = pivoted[start]\n\n    for cur in pivoted[start + 1 :]:\n        sparse_cur = []\n\n        for i, (p, t) in enumerate(zip(prev, cur)):\n            if i == k - 1:\n                sparse_cur.append(t)\n                result.append(sparse_cur)\n                break\n\n            if p == t:\n                sparse_cur.append(sentinel)\n            else:\n                sparse_cur.extend(cur[i:])\n                result.append(sparse_cur)\n                break\n\n        prev = cur\n\n    return list(zip(*result))",
        "begin_line": 3373,
        "end_line": 3398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi._get_na_rep#3401",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._get_na_rep(dtype)",
        "snippet": "def _get_na_rep(dtype) -> str:\n    return {np.datetime64: \"NaT\", np.timedelta64: \"NaT\"}.get(dtype, \"NaN\")",
        "begin_line": 3401,
        "end_line": 3402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi.maybe_droplevels#3405",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi.maybe_droplevels(index, key)",
        "snippet": "def maybe_droplevels(index, key):\n    \"\"\"\n    Attempt to drop level or levels from the given index.\n\n    Parameters\n    ----------\n    index: Index\n    key : scalar or tuple\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # drop levels\n    original_index = index\n    if isinstance(key, tuple):\n        for _ in key:\n            try:\n                index = index.droplevel(0)\n            except ValueError:\n                # we have dropped too much, so back out\n                return original_index\n    else:\n        try:\n            index = index.droplevel(0)\n        except ValueError:\n            pass\n\n    return index",
        "begin_line": 3405,
        "end_line": 3433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.multi._coerce_indexer_frozen#3436",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._coerce_indexer_frozen(array_like, categories, copy: bool=False)",
        "snippet": "def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all\n    of the given categories.\n\n    Parameters\n    ----------\n    array_like : array-like\n    categories : array-like\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n        Non-writeable.\n    \"\"\"\n    array_like = coerce_indexer_dtype(array_like, categories)\n    if copy:\n        array_like = array_like.copy()\n    array_like.flags.writeable = False\n    return array_like",
        "begin_line": 3436,
        "end_line": 3456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.424257998201208e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#48",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 48,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003699593044765076,
            "pseudo_dstar_susp": 0.0003699593044765076,
            "pseudo_tarantula_susp": 0.00037023324694557573,
            "pseudo_op2_susp": 0.0003699593044765076,
            "pseudo_barinel_susp": 0.00037023324694557573
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#76",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            msg = f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            raise ValueError(msg)",
        "begin_line": 76,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005889281507656066,
            "pseudo_dstar_susp": 0.0017301038062283738,
            "pseudo_tarantula_susp": 0.0004636068613815484,
            "pseudo_op2_susp": 0.0017301038062283738,
            "pseudo_barinel_susp": 0.0004636068613815484
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound#92",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound(self, label, side, kind)",
        "snippet": "    def _maybe_cast_slice_bound(self, label, side, kind):\n        assert kind in [\"ix\", \"loc\", \"getitem\", None]\n\n        # we will try to coerce to integers\n        return self._maybe_cast_indexer(label)",
        "begin_line": 92,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#99",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None and not self._can_hold_na:\n            # Ensure we are not returning an Int64Index with float data:\n            return self._shallow_copy_with_infer(values=values, **kwargs)\n        return super()._shallow_copy(values=values, **kwargs)",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004610419548178884,
            "pseudo_dstar_susp": 0.00046061722708429296,
            "pseudo_tarantula_susp": 0.0006369426751592356,
            "pseudo_op2_susp": 0.00046061722708429296,
            "pseudo_barinel_susp": 0.0006369426751592356
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting#141",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Subclasses need to override this only if the process of casting data\n        from some accepted dtype to the internal dtype(s) bears the risk of\n        truncation (e.g. float to int).\n        \"\"\"\n        pass",
        "begin_line": 141,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.430992327796982e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._concat_same_dtype#149",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._concat_same_dtype(self, indexes, name)",
        "snippet": "    def _concat_same_dtype(self, indexes, name):\n        result = type(indexes[0])(np.concatenate([x._values for x in indexes]))\n        return result.rename(name)",
        "begin_line": 149,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011511453896627144,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#154",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 154,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007674597083653108,
            "pseudo_dstar_susp": 0.0035211267605633804,
            "pseudo_tarantula_susp": 0.0005973715651135006,
            "pseudo_op2_susp": 0.0035211267605633804,
            "pseudo_barinel_susp": 0.0005973715651135006
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.insert#161",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        # treat NA values as nans:\n        if is_scalar(item) and isna(item):\n            item = self._na_value\n        return super().insert(loc, item)",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011511453896627144,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._union#167",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        # Right now, we treat union(int, float) a bit special.\n        # See https://github.com/pandas-dev/pandas/issues/26778 for discussion\n        # We may change union(int, float) to go to object.\n        # float | [u]int -> float  (the special case)\n        # <T>   | <T>    -> T\n        # <T>   | <U>    -> object\n        needs_cast = (is_integer_dtype(self.dtype) and is_float_dtype(other.dtype)) or (\n            is_integer_dtype(other.dtype) and is_float_dtype(self.dtype)\n        )\n        if needs_cast:\n            first = self.astype(\"float\")\n            second = other.astype(\"float\")\n            return first._union(second, sort)\n        else:\n            return super()._union(other, sort)",
        "begin_line": 167,
        "end_line": 182,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.797634423220719e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.__contains__#226",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        \"\"\"\n        Check if key is a float and has a decimal. If it has, return False.\n        \"\"\"\n        hash(key)\n        try:\n            if is_float(key) and int(key) != key:\n                return False\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 226,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index.inferred_type#248",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Always 'integer' for ``Int64Index``\"\"\"\n        return \"integer\"",
        "begin_line": 248,
        "end_line": 250,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0890214942458744e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index.asi8#253",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        # do not cache or you'll create a memory leak\n        return self.values.view(\"i8\")",
        "begin_line": 253,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer#258",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # don't coerce ilocs to integers\n        if kind != \"iloc\":\n            key = self._maybe_cast_indexer(key)\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._wrap_joined_index#266",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        return Int64Index(joined, name=name)",
        "begin_line": 266,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting#271",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as ints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.signedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 271,
        "end_line": 277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.001330252748022e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other#279",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        return super()._is_compatible_with_other(other) or all(\n            isinstance(type(obj), (ABCInt64Index, ABCFloat64Index, ABCRangeIndex))\n            for obj in [self, other]\n        )",
        "begin_line": 279,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.UInt64Index.inferred_type#303",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.UInt64Index",
        "signature": "pandas.core.indexes.numeric.UInt64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Always 'integer' for ``UInt64Index``\"\"\"\n        return \"integer\"",
        "begin_line": 303,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting#347",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.UInt64Index",
        "signature": "pandas.core.indexes.numeric.UInt64Index._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Ensure incoming data can be represented as uints.\n        \"\"\"\n        if not issubclass(data.dtype.type, np.unsignedinteger):\n            if not np.array_equal(data, subarr):\n                raise TypeError(\"Unsafe NumPy casting, you must explicitly cast\")",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.inferred_type#378",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Always 'floating' for ``Float64Index``\"\"\"\n        return \"floating\"",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.304268393954493e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.astype#383",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if needs_i8_conversion(dtype):\n            msg = (\n                \"Cannot convert Float64Index to dtype {dtype}; integer \"\n                \"values are required for conversion\"\n            ).format(dtype=dtype)\n            raise TypeError(msg)\n        elif is_integer_dtype(dtype) and not is_extension_array_dtype(dtype):\n            # TODO(jreback); this can change once we have an EA Index type\n            # GH 13149\n            arr = astype_nansafe(self.values, dtype=dtype)\n            return Int64Index(arr)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 383,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.equals#447",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self is other:\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        # need to compare nans locations and make sure that they are the same\n        # since nans don't compare equal this is a bit tricky\n        try:\n            if not isinstance(other, Float64Index):\n                other = self._constructor(other)\n            if not is_dtype_equal(self.dtype, other.dtype) or self.shape != other.shape:\n                return False\n            left, right = self._ndarray_values, other._ndarray_values\n            return ((left == right) | (self._isnan & other._isnan)).all()\n        except (TypeError, ValueError):\n            return False",
        "begin_line": 447,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.__contains__#469",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.__contains__(self, other)",
        "snippet": "    def __contains__(self, other) -> bool:\n        if super().__contains__(other):\n            return True\n\n        try:\n            # if other is a sequence this throws a ValueError\n            return np.isnan(other) and self.hasnans\n        except ValueError:\n            try:\n                return len(other) <= 1 and other.item() in self\n            except AttributeError:\n                return len(other) <= 1 and other in self\n            except TypeError:\n                pass\n        except TypeError:\n            pass\n\n        return False",
        "begin_line": 469,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.get_loc#489",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        try:\n            if np.all(np.isnan(key)) or is_bool(key):\n                nan_idxs = self._nan_idxs\n                try:\n                    return nan_idxs.item()\n                except ValueError:\n                    if not len(nan_idxs):\n                        raise KeyError(key)\n                    return nan_idxs\n        except (TypeError, NotImplementedError):\n            pass\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 489,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.is_unique#504",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return super().is_unique and self._nan_idxs.size < 2",
        "begin_line": 504,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.153946510110893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index._is_compatible_with_other#513",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        return super()._is_compatible_with_other(other) or all(\n            isinstance(\n                type(obj),\n                (ABCInt64Index, ABCFloat64Index, ABCUInt64Index, ABCRangeIndex),\n            )\n            for obj in [self, other]\n        )",
        "begin_line": 513,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#59",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall through to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 59,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045248868778280545,
            "pseudo_dstar_susp": 0.0004522840343735866,
            "pseudo_tarantula_susp": 0.0006016847172081829,
            "pseudo_op2_susp": 0.0004522840343735866,
            "pseudo_barinel_susp": 0.0006016847172081829
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#166",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 166,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004399472063352398,
            "pseudo_dstar_susp": 0.00043975373790677223,
            "pseudo_tarantula_susp": 0.0005491488193300384,
            "pseudo_op2_susp": 0.00043975373790677223,
            "pseudo_barinel_susp": 0.0005491488193300384
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#195",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\", \"unicode\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 195,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00043782837127845885,
            "pseudo_dstar_susp": 0.00043782837127845885,
            "pseudo_tarantula_susp": 0.0005367686527106817,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.0005367686527106817
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#219",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    htable : HashTable subclass\n    values : ndarray\n    \"\"\"\n    values, _ = _ensure_data(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables[ndtype]\n    return htable, values",
        "begin_line": 219,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.596741209842338e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#237",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00043554006968641115,
            "pseudo_dstar_susp": 0.00043554006968641115,
            "pseudo_tarantula_susp": 0.0005235602094240838,
            "pseudo_op2_susp": 0.00043554006968641115,
            "pseudo_barinel_susp": 0.0005235602094240838
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#245",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00043554006968641115,
            "pseudo_dstar_susp": 0.00043554006968641115,
            "pseudo_tarantula_susp": 0.0005235602094240838,
            "pseudo_op2_susp": 0.00043554006968641115,
            "pseudo_barinel_susp": 0.0005235602094240838
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#254",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 254,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00048146364949446316,
            "pseudo_dstar_susp": 0.00048007681228996637,
            "pseudo_tarantula_susp": 0.000689655172413793,
            "pseudo_op2_susp": 0.00048007681228996637,
            "pseudo_barinel_susp": 0.000689655172413793
        }
    },
    {
        "name": "pandas.core.algorithms.unique#283",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique\n    Series.unique\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, values = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 283,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.596741209842338e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.isin#380",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.isin(comps, values)",
        "snippet": "def isin(comps, values) -> np.ndarray:\n    \"\"\"\n    Compute the isin boolean array.\n\n    Parameters\n    ----------\n    comps : array-like\n    values : array-like\n\n    Returns\n    -------\n    ndarray[bool]\n        Same length as `comps`.\n    \"\"\"\n\n    if not is_list_like(comps):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed\"\n            \" to isin(), you passed a [{comps_type}]\".format(\n                comps_type=type(comps).__name__\n            )\n        )\n    if not is_list_like(values):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed\"\n            \" to isin(), you passed a [{values_type}]\".format(\n                values_type=type(values).__name__\n            )\n        )\n\n    if not isinstance(values, (ABCIndex, ABCSeries, np.ndarray)):\n        values = construct_1d_object_array_from_listlike(list(values))\n\n    if is_categorical_dtype(comps):\n        # TODO(extension)\n        # handle categoricals\n        return comps._values.isin(values)\n\n    comps = com.values_from_object(comps)\n\n    comps, dtype = _ensure_data(comps)\n    values, _ = _ensure_data(values, dtype=dtype)\n\n    # faster for larger cases to use np.in1d\n    f = htable.ismember_object\n\n    # GH16012\n    # Ensure np.in1d doesn't get object types or it *may* throw an exception\n    if len(comps) > 1000000 and not is_object_dtype(comps):\n        f = np.in1d\n    elif is_integer_dtype(comps):\n        try:\n            values = values.astype(\"int64\", copy=False)\n            comps = comps.astype(\"int64\", copy=False)\n            f = htable.ismember_int64\n        except (TypeError, ValueError, OverflowError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    elif is_float_dtype(comps):\n        try:\n            values = values.astype(\"float64\", copy=False)\n            comps = comps.astype(\"float64\", copy=False)\n            f = htable.ismember_float64\n        except (TypeError, ValueError):\n            values = values.astype(object)\n            comps = comps.astype(object)\n\n    return f(comps, values)",
        "begin_line": 380,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.536524890329964e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#451",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(values, na_sentinel=na_sentinel, na_value=na_value)\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 451,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004580852038479157,
            "pseudo_dstar_susp": 0.0004578754578754579,
            "pseudo_tarantula_susp": 0.0006277463904582549,
            "pseudo_op2_susp": 0.0004578754578754579,
            "pseudo_barinel_susp": 0.0006277463904582549
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#603",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None)",
        "snippet": "def factorize(\n    values, sort: bool = False, na_sentinel: int = -1, size_hint: Optional[int] = None,\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 603,
        "end_line": 649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000468384074941452,
            "pseudo_dstar_susp": 0.0004677268475210477,
            "pseudo_tarantula_susp": 0.0006514657980456026,
            "pseudo_op2_susp": 0.0004677268475210477,
            "pseudo_barinel_susp": 0.0006514657980456026
        }
    },
    {
        "name": "pandas.core.algorithms.value_counts#652",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.value_counts(values, sort: bool=True, ascending: bool=False, normalize: bool=False, bins=None, dropna: bool=True)",
        "snippet": "def value_counts(\n    values,\n    sort: bool = True,\n    ascending: bool = False,\n    normalize: bool = False,\n    bins=None,\n    dropna: bool = True,\n) -> ABCSeries:\n    \"\"\"\n    Compute a histogram of the counts of non-null values.\n\n    Parameters\n    ----------\n    values : ndarray (1-d)\n    sort : bool, default True\n        Sort by values\n    ascending : bool, default False\n        Sort in ascending order\n    normalize: bool, default False\n        If True then compute a relative histogram\n    bins : integer, optional\n        Rather than count values, group them into half-open bins,\n        convenience for pd.cut, only works with numeric data\n    dropna : bool, default True\n        Don't include counts of NaN\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    name = getattr(values, \"name\", None)\n\n    if bins is not None:\n        from pandas.core.reshape.tile import cut\n\n        values = Series(values)\n        try:\n            ii = cut(values, bins, include_lowest=True)\n        except TypeError:\n            raise TypeError(\"bins argument only works with numeric data.\")\n\n        # count, remove nulls (from the index), and but the bins\n        result = ii.value_counts(dropna=dropna)\n        result = result[result.index.notna()]\n        result.index = result.index.astype(\"interval\")\n        result = result.sort_index()\n\n        # if we are dropna and we have NO values\n        if dropna and (result.values == 0).all():\n            result = result.iloc[0:0]\n\n        # normalizing is by len of all (regardless of dropna)\n        counts = np.array([len(ii)])\n\n    else:\n\n        if is_extension_array_dtype(values):\n\n            # handle Categorical and sparse,\n            result = Series(values)._values.value_counts(dropna=dropna)\n            result.name = name\n            counts = result.values\n\n        else:\n            keys, counts = _value_counts_arraylike(values, dropna)\n\n            result = Series(counts, index=keys, name=name)\n\n    if sort:\n        result = result.sort_values(ascending=ascending)\n\n    if normalize:\n        result = result / float(counts.sum())\n\n    return result",
        "begin_line": 652,
        "end_line": 728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._value_counts_arraylike#731",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._value_counts_arraylike(values, dropna: bool)",
        "snippet": "def _value_counts_arraylike(values, dropna: bool):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n    dropna : bool\n\n    Returns\n    -------\n    uniques : np.ndarray or ExtensionArray\n    counts : np.ndarray\n    \"\"\"\n    values = _ensure_arraylike(values)\n    original = values\n    values, _ = _ensure_data(values)\n    ndtype = values.dtype.name\n\n    if needs_i8_conversion(original.dtype):\n        # datetime, timedelta, or period\n\n        keys, counts = htable.value_count_int64(values, dropna)\n\n        if dropna:\n            msk = keys != iNaT\n            keys, counts = keys[msk], counts[msk]\n\n    else:\n        # ndarray like\n\n        # TODO: handle uint8\n        f = getattr(htable, \"value_count_{dtype}\".format(dtype=ndtype))\n        keys, counts = f(values, dropna)\n\n        mask = isna(values)\n        if not dropna and mask.any():\n            if not isna(keys).any():\n                keys = np.insert(keys, 0, np.NaN)\n                counts = np.insert(counts, 0, mask.sum())\n\n    keys = _reconstruct_data(keys, original.dtype, original)\n\n    return keys, counts",
        "begin_line": 731,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.duplicated#775",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.duplicated(values, keep='first')",
        "snippet": "def duplicated(values, keep=\"first\") -> np.ndarray:\n    \"\"\"\n    Return boolean ndarray denoting duplicate values.\n\n    Parameters\n    ----------\n    values : ndarray-like\n        Array over which to check for duplicate values.\n    keep : {'first', 'last', False}, default 'first'\n        - ``first`` : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    duplicated : ndarray\n    \"\"\"\n\n    values, _ = _ensure_data(values)\n    ndtype = values.dtype.name\n    f = getattr(htable, \"duplicated_{dtype}\".format(dtype=ndtype))\n    return f(values, keep=keep)",
        "begin_line": 775,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#903",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 903,
        "end_line": 976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.quantile#979",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.quantile(x, q, interpolation_method='fraction')",
        "snippet": "def quantile(x, q, interpolation_method=\"fraction\"):\n    \"\"\"\n    Compute sample quantile or quantiles of the input array. For example, q=0.5\n    computes the median.\n\n    The `interpolation_method` parameter supports three values, namely\n    `fraction` (default), `lower` and `higher`. Interpolation is done only,\n    if the desired quantile lies between two data points `i` and `j`. For\n    `fraction`, the result is an interpolated value between `i` and `j`;\n    for `lower`, the result is `i`, for `higher` the result is `j`.\n\n    Parameters\n    ----------\n    x : ndarray\n        Values from which to extract score.\n    q : scalar or array\n        Percentile at which to extract score.\n    interpolation_method : {'fraction', 'lower', 'higher'}, optional\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        - fraction: `i + (j - i)*fraction`, where `fraction` is the\n                    fractional part of the index surrounded by `i` and `j`.\n        -lower: `i`.\n        - higher: `j`.\n\n    Returns\n    -------\n    score : float\n        Score at percentile.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(100)\n    >>> stats.scoreatpercentile(a, 50)\n    49.5\n\n    \"\"\"\n    x = np.asarray(x)\n    mask = isna(x)\n\n    x = x[~mask]\n\n    values = np.sort(x)\n\n    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n        return a + (b - a) * fraction\n\n    def _get_score(at):\n        if len(values) == 0:\n            return np.nan\n\n        idx = at * (len(values) - 1)\n        if idx % 1 == 0:\n            score = values[int(idx)]\n        else:\n            if interpolation_method == \"fraction\":\n                score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n            elif interpolation_method == \"lower\":\n                score = values[np.floor(idx)]\n            elif interpolation_method == \"higher\":\n                score = values[np.ceil(idx)]\n            else:\n                raise ValueError(\n                    \"interpolation_method can only be 'fraction' \"\n                    \", 'lower' or 'higher'\"\n                )\n\n        return score\n\n    if is_scalar(q):\n        return _get_score(q)\n    else:\n        q = np.asarray(q, np.float64)\n        result = [_get_score(x) for x in q]\n        result = np.array(result, dtype=np.float64)\n        return result",
        "begin_line": 979,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._interpolate#1025",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._interpolate(a, b, fraction)",
        "snippet": "    def _interpolate(a, b, fraction):\n        \"\"\"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        \"\"\"\n        return a + (b - a) * fraction",
        "begin_line": 1025,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._get_score#1031",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_score(at)",
        "snippet": "    def _get_score(at):\n        if len(values) == 0:\n            return np.nan\n\n        idx = at * (len(values) - 1)\n        if idx % 1 == 0:\n            score = values[int(idx)]\n        else:\n            if interpolation_method == \"fraction\":\n                score = _interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)\n            elif interpolation_method == \"lower\":\n                score = values[np.floor(idx)]\n            elif interpolation_method == \"higher\":\n                score = values[np.ceil(idx)]\n            else:\n                raise ValueError(\n                    \"interpolation_method can only be 'fraction' \"\n                    \", 'lower' or 'higher'\"\n                )\n\n        return score",
        "begin_line": 1031,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.wrapper#1274",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.wrapper(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def wrapper(arr, indexer, out, fill_value=np.nan):\n        if arr_dtype is not None:\n            arr = arr.view(arr_dtype)\n        if out_dtype is not None:\n            out = out.view(out_dtype)\n        if fill_wrap is not None:\n            fill_value = fill_wrap(fill_value)\n        f(arr, indexer, out, fill_value=fill_value)",
        "begin_line": 1274,
        "end_line": 1281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._convert_wrapper#1286",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._convert_wrapper(f, conv_dtype)",
        "snippet": "def _convert_wrapper(f, conv_dtype):\n    def wrapper(arr, indexer, out, fill_value=np.nan):\n        arr = arr.astype(conv_dtype)\n        f(arr, indexer, out, fill_value=fill_value)\n\n    return wrapper",
        "begin_line": 1286,
        "end_line": 1291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.wrapper#1287",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.wrapper(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def wrapper(arr, indexer, out, fill_value=np.nan):\n        arr = arr.astype(conv_dtype)\n        f(arr, indexer, out, fill_value=fill_value)",
        "begin_line": 1287,
        "end_line": 1289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._take_nd_object#1317",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info)",
        "snippet": "def _take_nd_object(arr, indexer, out, axis: int, fill_value, mask_info):\n    if mask_info is not None:\n        mask, needs_masking = mask_info\n    else:\n        mask = indexer == -1\n        needs_masking = mask.any()\n    if arr.dtype != out.dtype:\n        arr = arr.astype(out.dtype)\n    if arr.shape[axis] > 0:\n        arr.take(ensure_platform_int(indexer), axis=axis, out=out)\n    if needs_masking:\n        outindexer = [slice(None)] * arr.ndim\n        outindexer[axis] = mask\n        out[tuple(outindexer)] = fill_value",
        "begin_line": 1317,
        "end_line": 1330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1434",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1434,
        "end_line": 1467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00042052144659377626,
            "pseudo_dstar_susp": 0.00042052144659377626,
            "pseudo_tarantula_susp": 0.00047058823529411766,
            "pseudo_op2_susp": 0.00042052144659377626,
            "pseudo_barinel_susp": 0.00047058823529411766
        }
    },
    {
        "name": "pandas.core.algorithms.func2#1461",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.func2(arr, indexer, out, fill_value=np.nan)",
        "snippet": "    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )",
        "begin_line": 1461,
        "end_line": 1465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.take#1470",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis: int=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis: int = 0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1470,
        "end_line": 1560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.094544277157196e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1563",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1563,
        "end_line": 1664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00039077764751856197,
            "pseudo_dstar_susp": 0.00039077764751856197,
            "pseudo_tarantula_susp": 0.0003916960438699569,
            "pseudo_op2_susp": 0.00039077764751856197,
            "pseudo_barinel_susp": 0.0003916960438699569
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1912",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to be\"\n            \"passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    from pandas import Index\n\n    if not assume_unique and not Index(values).is_unique:\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1912,
        "end_line": 2039,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010526315789473684,
            "pseudo_dstar_susp": 0.0006253908692933083,
            "pseudo_tarantula_susp": 0.0011441647597254005,
            "pseudo_op2_susp": 0.0006253908692933083,
            "pseudo_barinel_susp": 0.0011441647597254005
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#1971",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 1971,
        "end_line": 1976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000441306266548985,
            "pseudo_dstar_susp": 0.0004411116012351125,
            "pseudo_tarantula_susp": 0.0005515719801434088,
            "pseudo_op2_susp": 0.0004411116012351125,
            "pseudo_barinel_susp": 0.0005515719801434088
        }
    },
    {
        "name": "pandas.core.strings._na_map#119",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._na_map(f, arr, na_result=np.nan, dtype=object)",
        "snippet": "def _na_map(f, arr, na_result=np.nan, dtype=object):\n    # should really _check_ for NA\n    if is_extension_array_dtype(arr.dtype):\n        # just StringDtype\n        arr = extract_array(arr)\n        return _map_stringarray(f, arr, na_value=na_result, dtype=dtype)\n    return _map_object(f, arr, na_mask=True, na_value=na_result, dtype=dtype)",
        "begin_line": 119,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings._map_object#193",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._map_object(f, arr, na_mask=False, na_value=np.nan, dtype=object)",
        "snippet": "def _map_object(f, arr, na_mask=False, na_value=np.nan, dtype=object):\n    if not len(arr):\n        return np.ndarray(0, dtype=dtype)\n\n    if isinstance(arr, ABCSeries):\n        arr = arr.values\n    if not isinstance(arr, np.ndarray):\n        arr = np.asarray(arr, dtype=object)\n    if na_mask:\n        mask = isna(arr)\n        convert = not np.all(mask)\n        try:\n            result = lib.map_infer_mask(arr, f, mask.view(np.uint8), convert)\n        except (TypeError, AttributeError) as e:\n            # Reraise the exception if callable `f` got wrong number of args.\n            # The user may want to be warned by this, instead of getting NaN\n            p_err = (\n                r\"((takes)|(missing)) (?(2)from \\d+ to )?\\d+ \"\n                r\"(?(3)required )positional arguments?\"\n            )\n\n            if len(e.args) >= 1 and re.search(p_err, e.args[0]):\n                # FIXME: this should be totally avoidable\n                raise e\n\n            def g(x):\n                try:\n                    return f(x)\n                except (TypeError, AttributeError):\n                    return na_value\n\n            return _map_object(g, arr, dtype=dtype)\n        if na_value is not np.nan:\n            np.putmask(result, mask, na_value)\n            if result.dtype == object:\n                result = lib.maybe_convert_objects(result)\n        return result\n    else:\n        return lib.map_infer(arr, f)",
        "begin_line": 193,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.str_replace#562",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings.str_replace(arr, pat, repl, n=-1, case=None, flags=0, regex=True)",
        "snippet": "def str_replace(arr, pat, repl, n=-1, case=None, flags=0, regex=True):\n    r\"\"\"\n    Replace occurrences of pattern/regex in the Series/Index with\n    some other string. Equivalent to :meth:`str.replace` or\n    :func:`re.sub`.\n\n    Parameters\n    ----------\n    pat : str or compiled regex\n        String can be a character sequence or regular expression.\n    repl : str or callable\n        Replacement string or a callable. The callable is passed the regex\n        match object and must return a replacement string to be used.\n        See :func:`re.sub`.\n    n : int, default -1 (all)\n        Number of replacements to make from start.\n    case : bool, default None\n        Determines if replace is case sensitive:\n\n        - If True, case sensitive (the default if `pat` is a string)\n        - Set to False for case insensitive\n        - Cannot be set if `pat` is a compiled regex.\n\n    flags : int, default 0 (no flags)\n        Regex module flags, e.g. re.IGNORECASE. Cannot be set if `pat` is a compiled\n        regex.\n    regex : bool, default True\n        Determines if assumes the passed-in pattern is a regular expression:\n\n        - If True, assumes the passed-in pattern is a regular expression.\n        - If False, treats the pattern as a literal string\n        - Cannot be set to False if `pat` is a compiled regex or `repl` is\n          a callable.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Series or Index of object\n        A copy of the object with all matching occurrences of `pat` replaced by\n        `repl`.\n\n    Raises\n    ------\n    ValueError\n        * if `regex` is False and `repl` is a callable or `pat` is a compiled\n          regex\n        * if `pat` is a compiled regex and `case` or `flags` is set\n\n    Notes\n    -----\n    When `pat` is a compiled regex, all flags should be included in the\n    compiled regex. Use of `case`, `flags`, or `regex=False` with a compiled\n    regex will raise an error.\n\n    Examples\n    --------\n    When `pat` is a string and `regex` is True (the default), the given `pat`\n    is compiled as a regex. When `repl` is a string, it replaces matching\n    regex patterns as with :meth:`re.sub`. NaN value(s) in the Series are\n    left as is:\n\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)\n    0    bao\n    1    baz\n    2    NaN\n    dtype: object\n\n    When `pat` is a string and `regex` is False, every `pat` is replaced with\n    `repl` as with :meth:`str.replace`:\n\n    >>> pd.Series(['f.o', 'fuz', np.nan]).str.replace('f.', 'ba', regex=False)\n    0    bao\n    1    fuz\n    2    NaN\n    dtype: object\n\n    When `repl` is a callable, it is called on every `pat` using\n    :func:`re.sub`. The callable should expect one positional argument\n    (a regex object) and return a string.\n\n    To get the idea:\n\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr)\n    0    <_sre.SRE_Match object; span=(0, 1), match='f'>oo\n    1    <_sre.SRE_Match object; span=(0, 1), match='f'>uz\n    2                                                  NaN\n    dtype: object\n\n    Reverse every lowercase alphabetic word:\n\n    >>> repl = lambda m: m.group(0)[::-1]\n    >>> pd.Series(['foo 123', 'bar baz', np.nan]).str.replace(r'[a-z]+', repl)\n    0    oof 123\n    1    rab zab\n    2        NaN\n    dtype: object\n\n    Using regex groups (extract second group and swap case):\n\n    >>> pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n    >>> repl = lambda m: m.group('two').swapcase()\n    >>> pd.Series(['One Two Three', 'Foo Bar Baz']).str.replace(pat, repl)\n    0    tWO\n    1    bAR\n    dtype: object\n\n    Using a compiled regex with flags\n\n    >>> import re\n    >>> regex_pat = re.compile(r'FUZ', flags=re.IGNORECASE)\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace(regex_pat, 'bar')\n    0    foo\n    1    bar\n    2    NaN\n    dtype: object\n    \"\"\"\n\n    # Check whether repl is valid (GH 13438, GH 15055)\n    if not (isinstance(repl, str) or callable(repl)):\n        raise TypeError(\"repl must be a string or callable\")\n\n    is_compiled_re = is_re(pat)\n    if regex:\n        if is_compiled_re:\n            if (case is not None) or (flags != 0):\n                raise ValueError(\n                    \"case and flags cannot be set when pat is a compiled regex\"\n                )\n        else:\n            # not a compiled regex\n            # set default case\n            if case is None:\n                case = True\n\n            # add case flag, if provided\n            if case is False:\n                flags |= re.IGNORECASE\n        if is_compiled_re or len(pat) > 1 or flags or callable(repl):\n            n = n if n >= 0 else 0\n            compiled = re.compile(pat, flags=flags)\n            f = lambda x: compiled.sub(repl=repl, string=x, count=n)\n        else:\n            f = lambda x: x.replace(pat, repl, n)\n    else:\n        if is_compiled_re:\n            raise ValueError(\n                \"Cannot use a compiled regex as replacement pattern with regex=False\"\n            )\n        if callable(repl):\n            raise ValueError(\"Cannot use a callable replacement when regex=False\")\n        f = lambda x: x.replace(pat, repl, n)\n\n    return _na_map(f, arr, dtype=str)",
        "begin_line": 562,
        "end_line": 715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings._forbid_nonstring_types#1929",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._forbid_nonstring_types(func)",
        "snippet": "    def _forbid_nonstring_types(func):\n        func_name = func.__name__ if name is None else name\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            if self._inferred_dtype not in allowed_types:\n                msg = (\n                    \"Cannot use .str.{name} with values of inferred dtype \"\n                    \"{inf_type!r}.\".format(\n                        name=func_name, inf_type=self._inferred_dtype\n                    )\n                )\n                raise TypeError(msg)\n            return func(self, *args, **kwargs)\n\n        wrapper.__name__ = func_name\n        return wrapper",
        "begin_line": 1929,
        "end_line": 1945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.wrapper#1933",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings.wrapper(self, *args, **kwargs)",
        "snippet": "        def wrapper(self, *args, **kwargs):\n            if self._inferred_dtype not in allowed_types:\n                msg = (\n                    \"Cannot use .str.{name} with values of inferred dtype \"\n                    \"{inf_type!r}.\".format(\n                        name=func_name, inf_type=self._inferred_dtype\n                    )\n                )\n                raise TypeError(msg)\n            return func(self, *args, **kwargs)",
        "begin_line": 1933,
        "end_line": 1942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.StringMethods.__init__#2028",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods.__init__(self, data)",
        "snippet": "    def __init__(self, data):\n        self._inferred_dtype = self._validate(data)\n        self._is_categorical = is_categorical_dtype(data)\n        self._is_string = data.dtype.name == \"string\"\n\n        # .values.categories works for both Series/Index\n        self._parent = data.values.categories if self._is_categorical else data\n        # save orig to blow up categoricals to the right type\n        self._orig = data\n        self._freeze()",
        "begin_line": 2028,
        "end_line": 2037,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.StringMethods._validate#2040",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods._validate(data)",
        "snippet": "    def _validate(data):\n        \"\"\"\n        Auxiliary function for StringMethods, infers and checks dtype of data.\n\n        This is a \"first line of defence\" at the creation of the StringMethods-\n        object (see _make_accessor), and just checks that the dtype is in the\n        *union* of the allowed types over all string methods below; this\n        restriction is then refined on a per-method basis using the decorator\n        @forbid_nonstring_types (more info in the corresponding docstring).\n\n        This really should exclude all series/index with any non-string values,\n        but that isn't practical for performance reasons until we have a str\n        dtype (GH 9343 / 13877)\n\n        Parameters\n        ----------\n        data : The content of the Series\n\n        Returns\n        -------\n        dtype : inferred dtype of data\n        \"\"\"\n        from pandas import StringDtype\n\n        if isinstance(data, ABCMultiIndex):\n            raise AttributeError(\n                \"Can only use .str accessor with Index, not MultiIndex\"\n            )\n\n        # see _libs/lib.pyx for list of inferred types\n        allowed_types = [\"string\", \"empty\", \"bytes\", \"mixed\", \"mixed-integer\"]\n\n        values = getattr(data, \"values\", data)  # Series / Index\n        values = getattr(values, \"categories\", values)  # categorical / normal\n\n        # explicitly allow StringDtype\n        if isinstance(values.dtype, StringDtype):\n            return \"string\"\n\n        try:\n            inferred_dtype = lib.infer_dtype(values, skipna=True)\n        except ValueError:\n            # GH#27571 mostly occurs with ExtensionArray\n            inferred_dtype = None\n\n        if inferred_dtype not in allowed_types:\n            raise AttributeError(\"Can only use .str accessor with string values!\")\n        return inferred_dtype",
        "begin_line": 2040,
        "end_line": 2087,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.StringMethods._wrap_result#2103",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods._wrap_result(self, result, use_codes=True, name=None, expand=None, fill_value=np.nan, returns_string=True)",
        "snippet": "    def _wrap_result(\n        self,\n        result,\n        use_codes=True,\n        name=None,\n        expand=None,\n        fill_value=np.nan,\n        returns_string=True,\n    ):\n\n        from pandas import Index, Series, MultiIndex\n\n        # for category, we do the stuff on the categories, so blow it up\n        # to the full series again\n        # But for some operations, we have to do the stuff on the full values,\n        # so make it possible to skip this step as the method already did this\n        # before the transformation...\n        if use_codes and self._is_categorical:\n            # if self._orig is a CategoricalIndex, there is no .cat-accessor\n            result = take_1d(\n                result, Series(self._orig, copy=False).cat.codes, fill_value=fill_value\n            )\n\n        if not hasattr(result, \"ndim\") or not hasattr(result, \"dtype\"):\n            return result\n        assert result.ndim < 3\n\n        # We can be wrapping a string / object / categorical result, in which\n        # case we'll want to return the same dtype as the input.\n        # Or we can be wrapping a numeric output, in which case we don't want\n        # to return a StringArray.\n        if self._is_string and returns_string:\n            dtype = \"string\"\n        else:\n            dtype = None\n\n        if expand is None:\n            # infer from ndim if expand is not specified\n            expand = result.ndim != 1\n\n        elif expand is True and not isinstance(self._orig, ABCIndexClass):\n            # required when expand=True is explicitly specified\n            # not needed when inferred\n\n            def cons_row(x):\n                if is_list_like(x):\n                    return x\n                else:\n                    return [x]\n\n            result = [cons_row(x) for x in result]\n            if result:\n                # propagate nan values to match longest sequence (GH 18450)\n                max_len = max(len(x) for x in result)\n                result = [\n                    x * max_len if len(x) == 0 or x[0] is np.nan else x for x in result\n                ]\n\n        if not isinstance(expand, bool):\n            raise ValueError(\"expand must be True or False\")\n\n        if expand is False:\n            # if expand is False, result should have the same name\n            # as the original otherwise specified\n            if name is None:\n                name = getattr(result, \"name\", None)\n            if name is None:\n                # do not use logical or, _orig may be a DataFrame\n                # which has \"name\" column\n                name = self._orig.name\n\n        # Wait until we are sure result is a Series or Index before\n        # checking attributes (GH 12180)\n        if isinstance(self._orig, ABCIndexClass):\n            # if result is a boolean np.array, return the np.array\n            # instead of wrapping it into a boolean Index (GH 8875)\n            if is_bool_dtype(result):\n                return result\n\n            if expand:\n                result = list(result)\n                out = MultiIndex.from_tuples(result, names=name)\n                if out.nlevels == 1:\n                    # We had all tuples of length-one, which are\n                    # better represented as a regular Index.\n                    out = out.get_level_values(0)\n                return out\n            else:\n                return Index(result, name=name)\n        else:\n            index = self._orig.index\n            if expand:\n                cons = self._orig._constructor_expanddim\n                result = cons(result, columns=name, index=index, dtype=dtype)\n            else:\n                # Must be a Series\n                cons = self._orig._constructor\n                result = cons(result, name=name, index=index, dtype=dtype)\n            return result",
        "begin_line": 2103,
        "end_line": 2201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.strings.StringMethods.replace#2763",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods.replace(self, pat, repl, n=-1, case=None, flags=0, regex=True)",
        "snippet": "    def replace(self, pat, repl, n=-1, case=None, flags=0, regex=True):\n        result = str_replace(\n            self._parent, pat, repl, n=n, case=case, flags=flags, regex=regex\n        )\n        return self._wrap_result(result)",
        "begin_line": 2763,
        "end_line": 2767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#41",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype)",
        "snippet": "    def __init__(self, dtype):\n        dtype = np.dtype(dtype)\n        self._dtype = dtype\n        self._name = dtype.name\n        self._type = dtype.type",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004154549231408392,
            "pseudo_dstar_susp": 0.0004154549231408392,
            "pseudo_tarantula_susp": 0.00045392646391284613,
            "pseudo_op2_susp": 0.0004154549231408392,
            "pseudo_barinel_susp": 0.00045392646391284613
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#124",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values, copy=False)",
        "snippet": "    def __init__(self, values, copy=False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                \"'values' must be a NumPy array, not {typ}\".format(\n                    typ=type(values).__name__\n                )\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 124,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004154549231408392,
            "pseudo_dstar_susp": 0.0004154549231408392,
            "pseudo_tarantula_susp": 0.00045392646391284613,
            "pseudo_op2_susp": 0.0004154549231408392,
            "pseudo_barinel_susp": 0.00045392646391284613
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#165",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#171",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00042122999157540015,
            "pseudo_dstar_susp": 0.00042122999157540015,
            "pseudo_tarantula_susp": 0.00047281323877068556,
            "pseudo_op2_susp": 0.00042122999157540015,
            "pseudo_barinel_susp": 0.00047281323877068556
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray._values_for_argsort#289",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._ndarray",
        "begin_line": 289,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#403",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the PandasArray to a :class:`numpy.ndarray`.\n\n        By default, this requires no coercion or copying of data.\n\n        Parameters\n        ----------\n        dtype : numpy.dtype\n            The NumPy dtype to pass to :func:`numpy.asarray`.\n        copy : bool, default False\n            Whether to copy the underlying data.\n\n        Returns\n        -------\n        ndarray\n        \"\"\"\n        result = np.asarray(self._ndarray, dtype=dtype)\n        if copy and result is self._ndarray:\n            result = result.copy()\n\n        return result",
        "begin_line": 403,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.30596544330937e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#63",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key=None)",
        "snippet": "    def _reset_cache(self, key=None):\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 63,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin._freeze#101",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin._freeze(self)",
        "snippet": "    def _freeze(self):\n        \"\"\"Prevents setting additional attributes\"\"\"\n        object.__setattr__(self, \"__frozen\", True)",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin.__setattr__#106",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin.__setattr__(self, key, value)",
        "snippet": "    def __setattr__(self, key, value):\n        # _cache is used by a decorator\n        # We need to check both 1.) cls.__dict__ and 2.) getattr(self, key)\n        # because\n        # 1.) getattr is false for attributes that raise errors\n        # 2.) cls.__dict__ doesn't traverse into base classes\n        if getattr(self, \"__frozen\", False) and not (\n            key == \"_cache\"\n            or key in type(self).__dict__\n            or getattr(self, key, None) is not None\n        ):\n            raise AttributeError(\n                \"You cannot add any new attribute '{key}'\".format(key=key)\n            )\n        object.__setattr__(self, key, value)",
        "begin_line": 106,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.ndim#208",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return self._selected_obj.ndim",
        "begin_line": 208,
        "end_line": 209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._obj_with_exclusions#212",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._obj_with_exclusions(self)",
        "snippet": "    def _obj_with_exclusions(self):\n        if self._selection is not None and isinstance(self.obj, ABCDataFrame):\n            return self.obj.reindex(columns=self._selection_list)\n\n        if len(self.exclusions) > 0:\n            return self.obj.drop(self.exclusions, axis=1)\n        else:\n            return self.obj",
        "begin_line": 212,
        "end_line": 219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.__getitem__#221",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if self._selection is not None:\n            raise IndexError(\n                \"Column(s) {selection} already selected\".format(\n                    selection=self._selection\n                )\n            )\n\n        if isinstance(key, (list, tuple, ABCSeries, ABCIndexClass, np.ndarray)):\n            if len(self.obj.columns.intersection(key)) != len(key):\n                bad_keys = list(set(key).difference(self.obj.columns))\n                raise KeyError(\n                    \"Columns not found: {missing}\".format(missing=str(bad_keys)[1:-1])\n                )\n            return self._gotitem(list(key), ndim=2)\n\n        elif not getattr(self, \"as_index\", False):\n            if key not in self.obj.columns:\n                raise KeyError(\"Column not found: {key}\".format(key=key))\n            return self._gotitem(key, ndim=2)\n\n        else:\n            if key not in self.obj:\n                raise KeyError(\"Column not found: {key}\".format(key=key))\n            return self._gotitem(key, ndim=1)",
        "begin_line": 221,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._try_aggregate_string_function#268",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._try_aggregate_string_function(self, arg: str, *args, **kwargs)",
        "snippet": "    def _try_aggregate_string_function(self, arg: str, *args, **kwargs):\n        \"\"\"\n        if arg is a string, then try to operate on it:\n        - try to find a function (or attribute) on ourselves\n        - try to find a numpy function\n        - raise\n\n        \"\"\"\n        assert isinstance(arg, str)\n\n        f = getattr(self, arg, None)\n        if f is not None:\n            if callable(f):\n                return f(*args, **kwargs)\n\n            # people may try to aggregate on a non-callable attribute\n            # but don't let them think they can pass args to it\n            assert len(args) == 0\n            assert len([kwarg for kwarg in kwargs if kwarg not in [\"axis\"]]) == 0\n            return f\n\n        f = getattr(np, arg, None)\n        if f is not None:\n            if hasattr(self, \"__array__\"):\n                # in particular exclude Window\n                return f(self, *args, **kwargs)\n\n        raise AttributeError(\n            \"'{arg}' is not a valid function for \"\n            \"'{cls}' object\".format(arg=arg, cls=type(self).__name__)\n        )",
        "begin_line": 268,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._aggregate#300",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._aggregate(self, arg, *args, **kwargs)",
        "snippet": "    def _aggregate(self, arg, *args, **kwargs):\n        \"\"\"\n        provide an implementation for the aggregators\n\n        Parameters\n        ----------\n        arg : string, dict, function\n        *args : args to pass on to the function\n        **kwargs : kwargs to pass on to the function\n\n        Returns\n        -------\n        tuple of result, how\n\n        Notes\n        -----\n        how can be a string describe the required post-processing, or\n        None if not required\n        \"\"\"\n        is_aggregator = lambda x: isinstance(x, (list, tuple, dict))\n        is_nested_renamer = False\n\n        _axis = kwargs.pop(\"_axis\", None)\n        if _axis is None:\n            _axis = getattr(self, \"axis\", 0)\n\n        if isinstance(arg, str):\n            return self._try_aggregate_string_function(arg, *args, **kwargs), None\n\n        if isinstance(arg, dict):\n            # aggregate based on the passed dict\n            if _axis != 0:  # pragma: no cover\n                raise ValueError(\"Can only pass dict with axis=0\")\n\n            obj = self._selected_obj\n\n            # if we have a dict of any non-scalars\n            # eg. {'A' : ['mean']}, normalize all to\n            # be list-likes\n            if any(is_aggregator(x) for x in arg.values()):\n                new_arg = OrderedDict()\n                for k, v in arg.items():\n                    if not isinstance(v, (tuple, list, dict)):\n                        new_arg[k] = [v]\n                    else:\n                        new_arg[k] = v\n\n                    # the keys must be in the columns\n                    # for ndim=2, or renamers for ndim=1\n\n                    # ok for now, but deprecated\n                    # {'A': { 'ra': 'mean' }}\n                    # {'A': { 'ra': ['mean'] }}\n                    # {'ra': ['mean']}\n\n                    # not ok\n                    # {'ra' : { 'A' : 'mean' }}\n                    if isinstance(v, dict):\n                        raise SpecificationError(\"nested renamer is not supported\")\n                    elif isinstance(obj, ABCSeries):\n                        raise SpecificationError(\"nested renamer is not supported\")\n                    elif isinstance(obj, ABCDataFrame) and k not in obj.columns:\n                        raise KeyError(\"Column '{col}' does not exist!\".format(col=k))\n\n                arg = new_arg\n\n            else:\n                # deprecation of renaming keys\n                # GH 15931\n                keys = list(arg.keys())\n                if isinstance(obj, ABCDataFrame) and len(\n                    obj.columns.intersection(keys)\n                ) != len(keys):\n                    raise SpecificationError(\"nested renamer is not supported\")\n\n            from pandas.core.reshape.concat import concat\n\n            def _agg_1dim(name, how, subset=None):\n                \"\"\"\n                aggregate a 1-dim with how\n                \"\"\"\n                colg = self._gotitem(name, ndim=1, subset=subset)\n                if colg.ndim != 1:\n                    raise SpecificationError(\n                        \"nested dictionary is ambiguous in aggregation\"\n                    )\n                return colg.aggregate(how)\n\n            def _agg_2dim(name, how):\n                \"\"\"\n                aggregate a 2-dim with how\n                \"\"\"\n                colg = self._gotitem(self._selection, ndim=2, subset=obj)\n                return colg.aggregate(how)\n\n            def _agg(arg, func):\n                \"\"\"\n                run the aggregations over the arg with func\n                return an OrderedDict\n                \"\"\"\n                result = OrderedDict()\n                for fname, agg_how in arg.items():\n                    result[fname] = func(fname, agg_how)\n                return result\n\n            # set the final keys\n            keys = list(arg.keys())\n            result = OrderedDict()\n\n            # nested renamer\n            if is_nested_renamer:\n                result = list(_agg(arg, _agg_1dim).values())\n\n                if all(isinstance(r, dict) for r in result):\n\n                    result, results = OrderedDict(), result\n                    for r in results:\n                        result.update(r)\n                    keys = list(result.keys())\n\n                else:\n\n                    if self._selection is not None:\n                        keys = None\n\n            # some selection on the object\n            elif self._selection is not None:\n\n                sl = set(self._selection_list)\n\n                # we are a Series like object,\n                # but may have multiple aggregations\n                if len(sl) == 1:\n\n                    result = _agg(\n                        arg, lambda fname, agg_how: _agg_1dim(self._selection, agg_how)\n                    )\n\n                # we are selecting the same set as we are aggregating\n                elif not len(sl - set(keys)):\n\n                    result = _agg(arg, _agg_1dim)\n\n                # we are a DataFrame, with possibly multiple aggregations\n                else:\n\n                    result = _agg(arg, _agg_2dim)\n\n            # no selection\n            else:\n\n                try:\n                    result = _agg(arg, _agg_1dim)\n                except SpecificationError:\n\n                    # we are aggregating expecting all 1d-returns\n                    # but we have 2d\n                    result = _agg(arg, _agg_2dim)\n\n            # combine results\n\n            def is_any_series() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCSeries) for r in result.values())\n\n            def is_any_frame() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCDataFrame) for r in result.values())\n\n            if isinstance(result, list):\n                return concat(result, keys=keys, axis=1, sort=True), True\n\n            elif is_any_frame():\n                # we have a dict of DataFrames\n                # return a MI DataFrame\n\n                return concat([result[k] for k in keys], keys=keys, axis=1), True\n\n            elif isinstance(self, ABCSeries) and is_any_series():\n\n                # we have a dict of Series\n                # return a MI Series\n                try:\n                    result = concat(result)\n                except TypeError:\n                    # we want to give a nice error here if\n                    # we have non-same sized objects, so\n                    # we don't automatically broadcast\n\n                    raise ValueError(\n                        \"cannot perform both aggregation \"\n                        \"and transformation operations \"\n                        \"simultaneously\"\n                    )\n\n                return result, True\n\n            # fall thru\n            from pandas import DataFrame, Series\n\n            try:\n                result = DataFrame(result)\n            except ValueError:\n\n                # we have a dict of scalars\n                result = Series(result, name=getattr(self, \"name\", None))\n\n            return result, True\n        elif is_list_like(arg):\n            # we require a list, but not an 'str'\n            return self._aggregate_multiple_funcs(arg, _axis=_axis), None\n        else:\n            result = None\n\n        f = self._get_cython_func(arg)\n        if f and not args and not kwargs:\n            return getattr(self, f)(), None\n\n        # caller can react\n        return result, True",
        "begin_line": 300,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg_1dim#377",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg_1dim(name, how, subset=None)",
        "snippet": "            def _agg_1dim(name, how, subset=None):\n                \"\"\"\n                aggregate a 1-dim with how\n                \"\"\"\n                colg = self._gotitem(name, ndim=1, subset=subset)\n                if colg.ndim != 1:\n                    raise SpecificationError(\n                        \"nested dictionary is ambiguous in aggregation\"\n                    )\n                return colg.aggregate(how)",
        "begin_line": 377,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg_2dim#388",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg_2dim(name, how)",
        "snippet": "            def _agg_2dim(name, how):\n                \"\"\"\n                aggregate a 2-dim with how\n                \"\"\"\n                colg = self._gotitem(self._selection, ndim=2, subset=obj)\n                return colg.aggregate(how)",
        "begin_line": 388,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._agg#395",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._agg(arg, func)",
        "snippet": "            def _agg(arg, func):\n                \"\"\"\n                run the aggregations over the arg with func\n                return an OrderedDict\n                \"\"\"\n                result = OrderedDict()\n                for fname, agg_how in arg.items():\n                    result[fname] = func(fname, agg_how)\n                return result",
        "begin_line": 395,
        "end_line": 403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.is_any_series#461",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.is_any_series()",
        "snippet": "            def is_any_series() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCSeries) for r in result.values())",
        "begin_line": 461,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin.is_any_frame#465",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin.is_any_frame()",
        "snippet": "            def is_any_frame() -> bool:\n                # return a boolean if we have *any* nested series\n                return any(isinstance(r, ABCDataFrame) for r in result.values())",
        "begin_line": 465,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._aggregate_multiple_funcs#521",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._aggregate_multiple_funcs(self, arg, _axis)",
        "snippet": "    def _aggregate_multiple_funcs(self, arg, _axis):\n        from pandas.core.reshape.concat import concat\n\n        if _axis != 0:\n            raise NotImplementedError(\"axis other than 0 is not supported\")\n\n        if self._selected_obj.ndim == 1:\n            obj = self._selected_obj\n        else:\n            obj = self._obj_with_exclusions\n\n        results = []\n        keys = []\n\n        # degenerate case\n        if obj.ndim == 1:\n            for a in arg:\n                colg = self._gotitem(obj.name, ndim=1, subset=obj)\n                try:\n                    new_res = colg.aggregate(a)\n\n                except TypeError:\n                    pass\n                else:\n                    results.append(new_res)\n\n                    # make sure we find a good name\n                    name = com.get_callable_name(a) or a\n                    keys.append(name)\n\n        # multiples\n        else:\n            for index, col in enumerate(obj):\n                colg = self._gotitem(col, ndim=1, subset=obj.iloc[:, index])\n                try:\n                    new_res = colg.aggregate(arg)\n                except (TypeError, DataError):\n                    pass\n                except ValueError as err:\n                    # cannot aggregate\n                    if \"Must produce aggregated value\" in str(err):\n                        # raised directly in _aggregate_named\n                        pass\n                    elif \"no results\" in str(err):\n                        # raised direcly in _aggregate_multiple_funcs\n                        pass\n                    else:\n                        raise\n                else:\n                    results.append(new_res)\n                    keys.append(col)\n\n        # if we are empty\n        if not len(results):\n            raise ValueError(\"no results\")\n\n        try:\n            return concat(results, keys=keys, axis=1, sort=False)\n        except TypeError:\n\n            # we are concatting non-NDFrame objects,\n            # e.g. a list of scalars\n\n            from pandas import Series\n\n            result = Series(results, index=keys, name=self.name)\n            if is_nested_object(result):\n                raise ValueError(\"cannot combine transform and aggregation operations\")\n            return result",
        "begin_line": 521,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._get_cython_func#591",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._get_cython_func(self, arg: str)",
        "snippet": "    def _get_cython_func(self, arg: str) -> Optional[str]:\n        \"\"\"\n        if we define an internal function for this argument, return it\n        \"\"\"\n        return self._cython_table.get(arg)",
        "begin_line": 591,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.479606546256254e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._is_builtin_func#597",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._is_builtin_func(self, arg)",
        "snippet": "    def _is_builtin_func(self, arg):\n        \"\"\"\n        if we define an builtin function for this argument, return it,\n        otherwise return the arg\n        \"\"\"\n        return self._builtin_table.get(arg, arg)",
        "begin_line": 597,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.transpose#634",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.transpose(self, *args, **kwargs)",
        "snippet": "    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Return the transpose, which is by definition self.\n\n        Returns\n        -------\n        %(klass)s\n        \"\"\"\n        nv.validate_transpose(args, kwargs)\n        return self",
        "begin_line": 634,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#671",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 671,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.909417536101706e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#678",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 678,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.007449237053947e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#710",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 710,
        "end_line": 714,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00046904315196998124,
            "pseudo_dstar_susp": 0.000468384074941452,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.000468384074941452,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.array#717",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        \"\"\"\n        The ExtensionArray of the data backing this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        ExtensionArray\n            An ExtensionArray of the values stored within. For extension\n            types, this is the actual array. For NumPy native types, this\n            is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n            ``.array`` differs ``.values`` which may require converting the\n            data to a different form.\n\n        See Also\n        --------\n        Index.to_numpy : Similar method that always returns a NumPy array.\n        Series.to_numpy : Similar method that always returns a NumPy array.\n\n        Notes\n        -----\n        This table lays out the different array types for each extension\n        dtype within pandas.\n\n        ================== =============================\n        dtype              array type\n        ================== =============================\n        category           Categorical\n        period             PeriodArray\n        interval           IntervalArray\n        IntegerNA          IntegerArray\n        datetime64[ns, tz] DatetimeArray\n        ================== =============================\n\n        For any 3rd-party extension types, the array type will be an\n        ExtensionArray.\n\n        For all remaining dtypes ``.array`` will be a\n        :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\n        stored within. If you absolutely need a NumPy array (possibly with\n        copying / coercing data), then use :meth:`Series.to_numpy` instead.\n\n        Examples\n        --------\n\n        For regular NumPy types like int, and float, a PandasArray\n        is returned.\n\n        >>> pd.Series([1, 2, 3]).array\n        <PandasArray>\n        [1, 2, 3]\n        Length: 3, dtype: int64\n\n        For extension types, like Categorical, the actual ExtensionArray\n        is returned\n\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.array\n        [a, b, a]\n        Categories (2, object): [a, b]\n        \"\"\"\n        # As a mixin, we depend on the mixing class having _values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        result = self._values  # type: ignore\n\n        if is_datetime64_ns_dtype(result.dtype):\n            from pandas.arrays import DatetimeArray\n\n            result = DatetimeArray(result)\n        elif is_timedelta64_ns_dtype(result.dtype):\n            from pandas.arrays import TimedeltaArray\n\n            result = TimedeltaArray(result)\n\n        elif not is_extension_array_dtype(result.dtype):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            result = PandasArray(result)\n\n        return result",
        "begin_line": 717,
        "end_line": 799,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004154549231408392,
            "pseudo_dstar_susp": 0.0004154549231408392,
            "pseudo_tarantula_susp": 0.00045392646391284613,
            "pseudo_op2_susp": 0.0004154549231408392,
            "pseudo_barinel_susp": 0.00045392646391284613
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._ndarray_values#898",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        \"\"\"\n        The data as an ndarray, possibly losing information.\n\n        The expectation is that this is cheap to compute, and is primarily\n        used for interacting with our indexers.\n\n        - categorical -> codes\n        \"\"\"\n        if is_extension_array_dtype(self):\n            return self.array._ndarray_values\n        # As a mixin, we depend on the mixing class having values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        return self.values  # type: ignore",
        "begin_line": 898,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006640106241699867,
            "pseudo_dstar_susp": 0.0023094688221709007,
            "pseudo_tarantula_susp": 0.0005252100840336134,
            "pseudo_op2_susp": 0.0023094688221709007,
            "pseudo_barinel_susp": 0.0005252100840336134
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#915",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 915,
        "end_line": 916,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009478672985781991,
            "pseudo_dstar_susp": 0.000591016548463357,
            "pseudo_tarantula_susp": 0.0009633911368015414,
            "pseudo_op2_susp": 0.000591016548463357,
            "pseudo_barinel_susp": 0.0009633911368015414
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.tolist#1045",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.tolist(self)",
        "snippet": "    def tolist(self):\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        list\n\n        See Also\n        --------\n        numpy.ndarray.tolist\n        \"\"\"\n        if self.dtype.kind in [\"m\", \"M\"]:\n            return [com.maybe_box_datetimelike(x) for x in self._values]\n        elif is_extension_array_dtype(self._values):\n            return list(self._values)\n        else:\n            return self._values.tolist()",
        "begin_line": 1045,
        "end_line": 1066,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1070",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if self.dtype.kind in [\"m\", \"M\"]:\n            return map(com.maybe_box_datetimelike, self._values)\n        elif is_extension_array_dtype(self._values):\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1070,
        "end_line": 1088,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00039541320680110717,
            "pseudo_dstar_susp": 0.00039541320680110717,
            "pseudo_tarantula_susp": 0.00039635354736424893,
            "pseudo_op2_susp": 0.00039541320680110717,
            "pseudo_barinel_susp": 0.00039635354736424893
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._map_values#1110",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._map_values(self, mapper, na_action=None)",
        "snippet": "    def _map_values(self, mapper, na_action=None):\n        \"\"\"\n        An internal function that maps values using the input\n        correspondence (which can be a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            The input correspondence object\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping function\n\n        Returns\n        -------\n        Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n\n        \"\"\"\n\n        # we can fastpath dict/Series to an efficient map\n        # as we know that we are not going to have to yield\n        # python types\n        if isinstance(mapper, dict):\n            if hasattr(mapper, \"__missing__\"):\n                # If a dictionary subclass defines a default value method,\n                # convert mapper to a lookup function (GH #15999).\n                dict_with_default = mapper\n                mapper = lambda x: dict_with_default[x]\n            else:\n                # Dictionary does not have a default. Thus it's safe to\n                # convert to an Series for efficiency.\n                # we specify the keys here to handle the\n                # possibility that they are tuples\n                from pandas import Series\n\n                mapper = Series(mapper)\n\n        if isinstance(mapper, ABCSeries):\n            # Since values were input this means we came from either\n            # a dict or a series and mapper should be an index\n            if is_categorical_dtype(self._values):\n                # use the built in categorical series mapper which saves\n                # time by mapping the categories instead of all values\n                return self._values.map(mapper)\n            if is_extension_array_dtype(self.dtype):\n                values = self._values\n            else:\n                values = self.values\n\n            indexer = mapper.index.get_indexer(values)\n            new_values = algorithms.take_1d(mapper._values, indexer)\n\n            return new_values\n\n        # we must convert to python types\n        if is_extension_array_dtype(self.dtype) and hasattr(self._values, \"map\"):\n            # GH#23179 some EAs do not have `map`\n            values = self._values\n            if na_action is not None:\n                raise NotImplementedError\n            map_f = lambda values, f: values.map(f)\n        else:\n            values = self.astype(object)\n            values = getattr(values, \"values\", values)\n            if na_action == \"ignore\":\n\n                def map_f(values, f):\n                    return lib.map_infer_mask(values, f, isna(values).view(np.uint8))\n\n            else:\n                map_f = lib.map_infer\n\n        # mapper is a function\n        new_values = map_f(values, mapper)\n\n        return new_values",
        "begin_line": 1110,
        "end_line": 1188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.value_counts#1190",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
        "snippet": "    def value_counts(\n        self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n    ):\n        \"\"\"\n        Return a Series containing counts of unique values.\n\n        The resulting object will be in descending order so that the\n        first element is the most frequently-occurring element.\n        Excludes NA values by default.\n\n        Parameters\n        ----------\n        normalize : bool, default False\n            If True then the object returned will contain the relative\n            frequencies of the unique values.\n        sort : bool, default True\n            Sort by frequencies.\n        ascending : bool, default False\n            Sort in ascending order.\n        bins : int, optional\n            Rather than count values, group them into half-open bins,\n            a convenience for ``pd.cut``, only works with numeric data.\n        dropna : bool, default True\n            Don't include counts of NaN.\n\n        Returns\n        -------\n        Series\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.count: Number of non-NA elements in a DataFrame.\n\n        Examples\n        --------\n        >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])\n        >>> index.value_counts()\n        3.0    2\n        4.0    1\n        2.0    1\n        1.0    1\n        dtype: int64\n\n        With `normalize` set to `True`, returns the relative frequency by\n        dividing all values by the sum of values.\n\n        >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])\n        >>> s.value_counts(normalize=True)\n        3.0    0.4\n        4.0    0.2\n        2.0    0.2\n        1.0    0.2\n        dtype: float64\n\n        **bins**\n\n        Bins can be useful for going from a continuous variable to a\n        categorical variable; instead of counting unique\n        apparitions of values, divide the index in the specified\n        number of half-open bins.\n\n        >>> s.value_counts(bins=3)\n        (2.0, 3.0]      2\n        (0.996, 2.0]    2\n        (3.0, 4.0]      1\n        dtype: int64\n\n        **dropna**\n\n        With `dropna` set to `False` we can also see NaN index values.\n\n        >>> s.value_counts(dropna=False)\n        3.0    2\n        NaN    1\n        4.0    1\n        2.0    1\n        1.0    1\n        dtype: int64\n        \"\"\"\n        result = value_counts(\n            self,\n            sort=sort,\n            ascending=ascending,\n            normalize=normalize,\n            bins=bins,\n            dropna=dropna,\n        )\n        return result",
        "begin_line": 1190,
        "end_line": 1278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.unique#1280",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.unique(self)",
        "snippet": "    def unique(self):\n        values = self._values\n\n        if hasattr(values, \"unique\"):\n\n            result = values.unique()\n        else:\n            result = unique1d(values)\n\n        return result",
        "begin_line": 1280,
        "end_line": 1289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.545461404964914e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.is_monotonic#1343",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.is_monotonic(self)",
        "snippet": "    def is_monotonic(self):\n        \"\"\"\n        Return boolean if values in the object are\n        monotonic_increasing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        from pandas import Index\n\n        return Index(self).is_monotonic",
        "begin_line": 1343,
        "end_line": 1354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.duplicated#1525",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.duplicated(self, keep='first')",
        "snippet": "    def duplicated(self, keep=\"first\"):\n        if isinstance(self, ABCIndexClass):\n            if self.is_unique:\n                return np.zeros(len(self), dtype=np.bool)\n            return duplicated(self, keep=keep)\n        else:\n            return self._constructor(\n                duplicated(self, keep=keep), index=self.index\n            ).__finalize__(self)",
        "begin_line": 1525,
        "end_line": 1533,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._is_convertible_to_td#57",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._is_convertible_to_td(key)",
        "snippet": "def _is_convertible_to_td(key):\n    return isinstance(key, (Tick, timedelta, np.timedelta64, str))",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._td_array_cmp#77",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._td_array_cmp(cls, op)",
        "snippet": "def _td_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert timedelta-like to timedelta64\n    \"\"\"\n    opname = \"__{name}__\".format(name=op.__name__)\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n\n        if _is_convertible_to_td(other) or other is NaT:\n            try:\n                other = Timedelta(other)\n            except ValueError:\n                # failed to parse as timedelta\n                return invalid_comparison(self, other, op)\n\n            result = op(self.view(\"i8\"), other.value)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            try:\n                other = type(self)._from_sequence(other)._data\n            except (ValueError, TypeError):\n                return invalid_comparison(self, other, op)\n\n            result = op(self.view(\"i8\"), other.view(\"i8\"))\n            result = com.values_from_object(result)\n\n            o_mask = np.array(isna(other))\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
        "begin_line": 77,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.wrapper#85",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        if _is_convertible_to_td(other) or other is NaT:\n            try:\n                other = Timedelta(other)\n            except ValueError:\n                # failed to parse as timedelta\n                return invalid_comparison(self, other, op)\n\n            result = op(self.view(\"i8\"), other.value)\n            if isna(other):\n                result.fill(nat_result)\n\n        elif not is_list_like(other):\n            return invalid_comparison(self, other, op)\n\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n\n        else:\n            try:\n                other = type(self)._from_sequence(other)._data\n            except (ValueError, TypeError):\n                return invalid_comparison(self, other, op)\n\n            result = op(self.view(\"i8\"), other.view(\"i8\"))\n            result = com.values_from_object(result)\n\n            o_mask = np.array(isna(other))\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 85,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func#179",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 179,
        "end_line": 180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#183",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 183,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#202",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a TimedeltaArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_TD_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 202,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#254",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values.view(_TD_DTYPE)\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 254,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#265",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 265,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range#287",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(cls, start, end, periods, freq, closed=None)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, closed=None):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n\n        if start is not None:\n            start = Timedelta(start)\n\n        if end is not None:\n            end = Timedelta(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of startand end are defined\"\n                )\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        if freq is not None:\n            index = _generate_regular_range(start, end, periods, freq)\n        else:\n            index = np.linspace(start.value, end.value, periods).astype(\"i8\")\n\n        if not left_closed:\n            index = index[1:]\n        if not right_closed:\n            index = index[:-1]\n\n        return cls._simple_new(index, freq=freq)",
        "begin_line": 287,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.astype#360",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> timedelta64[ns]\n        #   --> timedelta64\n        # DatetimeLikeArrayMixin super call handles other cases\n        dtype = pandas_dtype(dtype)\n\n        if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):\n            # by pandas convention, converting to non-nano timedelta64\n            #  returns an int64-dtyped array with ints representing multiples\n            #  of the desired timedelta unit.  This is essentially division\n            if self._hasnans:\n                # avoid double-copying\n                result = self._data.astype(dtype, copy=False)\n                values = self._maybe_mask_results(\n                    result, fill_value=None, convert=\"float64\"\n                )\n                return values\n            result = self._data.astype(dtype, copy=copy)\n            return result.astype(\"i8\")\n        elif is_timedelta64_ns_dtype(dtype):\n            if copy:\n                return self.copy()\n            return self\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy=copy)",
        "begin_line": 360,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#981",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(\n            \"dtype {dtype} cannot be converted to timedelta64[ns]\".format(\n                dtype=data.dtype\n            )\n        )\n\n    data = np.array(data, copy=copy)\n    if data.ndim != 1:\n        raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 981,
        "end_line": 1070,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.ints_to_td64ns#1073",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.ints_to_td64ns(data, unit='ns')",
        "snippet": "def ints_to_td64ns(data, unit=\"ns\"):\n    \"\"\"\n    Convert an ndarray with integer-dtype to timedelta64[ns] dtype, treating\n    the integers as multiples of the given timedelta unit.\n\n    Parameters\n    ----------\n    data : numpy.ndarray with integer-dtype\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False\n    unit = unit if unit is not None else \"ns\"\n\n    if data.dtype != np.int64:\n        # converting to int64 makes a copy, so we can avoid\n        # re-copying later\n        data = data.astype(np.int64)\n        copy_made = True\n\n    if unit != \"ns\":\n        dtype_str = \"timedelta64[{unit}]\".format(unit=unit)\n        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later\n        copy_made = True\n\n    else:\n        data = data.view(\"timedelta64[ns]\")\n\n    return data, copy_made",
        "begin_line": 1073,
        "end_line": 1110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#1113",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 1113,
        "end_line": 1145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1148",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        dtype = _TD_DTYPE\n        msg = textwrap.dedent(\n            \"\"\"\\\n            Passing in 'timedelta' dtype with no precision is deprecated\n            and will raise in a future version. Please pass in\n            'timedelta64[ns]' instead.\"\"\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=4)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(_BAD_DTYPE.format(dtype=dtype))\n\n    return dtype",
        "begin_line": 1148,
        "end_line": 1163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000107284626113078,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._generate_regular_range#1166",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._generate_regular_range(start, end, periods, offset)",
        "snippet": "def _generate_regular_range(start, end, periods, offset):\n    stride = offset.nanos\n    if periods is None:\n        b = Timedelta(start).value\n        e = Timedelta(end).value\n        e += stride - e % stride\n    elif start is not None:\n        b = Timedelta(start).value\n        e = b + periods * stride\n    elif end is not None:\n        e = Timedelta(end).value + stride\n        b = e - periods * stride\n    else:\n        raise ValueError(\n            \"at least 'start' or 'end' should be specified if a 'period' is given.\"\n        )\n\n    data = np.arange(b, e, stride, dtype=np.int64)\n    return data",
        "begin_line": 1166,
        "end_line": 1184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#75",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 75,
        "end_line": 90,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.006993006993006993,
            "pseudo_tarantula_susp": 0.0016501650165016502,
            "pseudo_op2_susp": 0.006993006993006993,
            "pseudo_barinel_susp": 0.0016501650165016502
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._to_M8#93",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._to_M8(key, tz=None)",
        "snippet": "def _to_M8(key, tz=None):\n    \"\"\"\n    Timestamp-like => dt64\n    \"\"\"\n    if not isinstance(key, Timestamp):\n        # this also converts strings\n        key = Timestamp(key)\n        if key.tzinfo is not None and tz is not None:\n            # Don't tz_localize(None) if key is already tz-aware\n            key = key.tz_convert(tz)\n        else:\n            key = key.tz_localize(tz)\n\n    return np.int64(conversion.pydt_to_i8(key)).view(_NS_DTYPE)",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.f#110",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.f(self)",
        "snippet": "    def f(self):\n        values = self.asi8\n        if self.tz is not None and not timezones.is_utc(self.tz):\n            values = self._local_timestamps()\n\n        if field in self._bool_ops:\n            if field.endswith((\"start\", \"end\")):\n                freq = self.freq\n                month_kw = 12\n                if freq:\n                    kwds = freq.kwds\n                    month_kw = kwds.get(\"startingMonth\", kwds.get(\"month\", 12))\n\n                result = fields.get_start_end_field(\n                    values, field, self.freqstr, month_kw\n                )\n            else:\n                result = fields.get_date_field(values, field)\n\n            # these return a boolean by-definition\n            return result\n\n        if field in self._object_ops:\n            result = fields.get_date_name_field(values, field)\n            result = self._maybe_mask_results(result, fill_value=None)\n\n        else:\n            result = fields.get_date_field(values, field)\n            result = self._maybe_mask_results(\n                result, fill_value=None, convert=\"float64\"\n            )\n\n        return result",
        "begin_line": 110,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.587727708533077e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._dt_array_cmp#149",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._dt_array_cmp(cls, op)",
        "snippet": "def _dt_array_cmp(cls, op):\n    \"\"\"\n    Wrap comparison operations to convert datetime-like to datetime64\n    \"\"\"\n    opname = \"__{name}__\".format(name=op.__name__)\n    nat_result = opname == \"__ne__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n\n        if isinstance(other, (datetime, np.datetime64, str)):\n            if isinstance(other, (datetime, np.datetime64)):\n                # GH#18435 strings get a pass from tzawareness compat\n                self._assert_tzawareness_compat(other)\n\n            try:\n                other = _to_M8(other, tz=self.tz)\n            except ValueError:\n                # string that cannot be parsed to Timestamp\n                return invalid_comparison(self, other, op)\n\n            result = op(self.asi8, other.view(\"i8\"))\n            if isna(other):\n                result.fill(nat_result)\n        elif lib.is_scalar(other) or np.ndim(other) == 0:\n            return invalid_comparison(self, other, op)\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n        else:\n            if isinstance(other, list):\n                try:\n                    other = type(self)._from_sequence(other)\n                except ValueError:\n                    other = np.array(other, dtype=np.object_)\n            elif not isinstance(\n                other, (np.ndarray, ABCIndexClass, ABCSeries, DatetimeArray)\n            ):\n                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                # We have to use comp_method_OBJECT_ARRAY instead of numpy\n                #  comparison otherwise it would fail to raise when\n                #  comparing tz-aware and tz-naive\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n            elif not (is_datetime64_dtype(other) or is_datetime64tz_dtype(other)):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n            else:\n                self._assert_tzawareness_compat(other)\n                if isinstance(other, (ABCIndexClass, ABCSeries)):\n                    other = other.array\n\n                if (\n                    is_datetime64_dtype(other)\n                    and not is_datetime64_ns_dtype(other)\n                    or not hasattr(other, \"asi8\")\n                ):\n                    # e.g. other.dtype == 'datetime64[s]'\n                    # or an object-dtype ndarray\n                    other = type(self)._from_sequence(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result\n\n    return compat.set_function_name(wrapper, opname, cls)",
        "begin_line": 149,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.wrapper#157",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        if isinstance(other, (datetime, np.datetime64, str)):\n            if isinstance(other, (datetime, np.datetime64)):\n                # GH#18435 strings get a pass from tzawareness compat\n                self._assert_tzawareness_compat(other)\n\n            try:\n                other = _to_M8(other, tz=self.tz)\n            except ValueError:\n                # string that cannot be parsed to Timestamp\n                return invalid_comparison(self, other, op)\n\n            result = op(self.asi8, other.view(\"i8\"))\n            if isna(other):\n                result.fill(nat_result)\n        elif lib.is_scalar(other) or np.ndim(other) == 0:\n            return invalid_comparison(self, other, op)\n        elif len(other) != len(self):\n            raise ValueError(\"Lengths must match\")\n        else:\n            if isinstance(other, list):\n                try:\n                    other = type(self)._from_sequence(other)\n                except ValueError:\n                    other = np.array(other, dtype=np.object_)\n            elif not isinstance(\n                other, (np.ndarray, ABCIndexClass, ABCSeries, DatetimeArray)\n            ):\n                # Following Timestamp convention, __eq__ is all-False\n                # and __ne__ is all True, others raise TypeError.\n                return invalid_comparison(self, other, op)\n\n            if is_object_dtype(other):\n                # We have to use comp_method_OBJECT_ARRAY instead of numpy\n                #  comparison otherwise it would fail to raise when\n                #  comparing tz-aware and tz-naive\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other\n                    )\n                o_mask = isna(other)\n            elif not (is_datetime64_dtype(other) or is_datetime64tz_dtype(other)):\n                # e.g. is_timedelta64_dtype(other)\n                return invalid_comparison(self, other, op)\n            else:\n                self._assert_tzawareness_compat(other)\n                if isinstance(other, (ABCIndexClass, ABCSeries)):\n                    other = other.array\n\n                if (\n                    is_datetime64_dtype(other)\n                    and not is_datetime64_ns_dtype(other)\n                    or not hasattr(other, \"asi8\")\n                ):\n                    # e.g. other.dtype == 'datetime64[s]'\n                    # or an object-dtype ndarray\n                    other = type(self)._from_sequence(other)\n\n                result = op(self.view(\"i8\"), other.view(\"i8\"))\n                o_mask = other._isnan\n\n            if o_mask.any():\n                result[o_mask] = nat_result\n\n        if self._hasnans:\n            result[self._isnan] = nat_result\n\n        return result",
        "begin_line": 157,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#326",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        \"'{}' != '{}'\"\n                    )\n                    raise TypeError(msg.format(dtz, values.tz))\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a DatetimeArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_NS_DTYPE)\n\n        if values.dtype != _NS_DTYPE:\n            msg = (\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'.\"\n                \" Got {} instead.\"\n            )\n            raise ValueError(msg.format(values.dtype))\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 326,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00510204081632653,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.009009009009009009,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.009009009009009009
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#402",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype == \"i8\":\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 402,
        "end_line": 411,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007874015748031496,
            "pseudo_dstar_susp": 0.030303030303030304,
            "pseudo_tarantula_susp": 0.0012738853503184713,
            "pseudo_op2_susp": 0.030303030303030304,
            "pseudo_barinel_susp": 0.0012738853503184713
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#414",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n        int_as_wall_time=False,\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=int_as_wall_time,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 414,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.007874015748031496,
            "pseudo_dstar_susp": 0.030303030303030304,
            "pseudo_tarantula_susp": 0.0012738853503184713,
            "pseudo_op2_susp": 0.030303030303030304,
            "pseudo_barinel_susp": 0.0012738853503184713
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#457",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n            # TODO: consider re-implementing _cached_range; GH#17914\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 457,
        "end_line": 561,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.029411764705882353,
            "pseudo_dstar_susp": 0.001184834123222749,
            "pseudo_tarantula_susp": 0.03125,
            "pseudo_op2_susp": 0.001184834123222749,
            "pseudo_barinel_susp": 0.03125
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#593",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 593,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.651589729945457e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#597",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 597,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013513513513513514,
            "pseudo_dstar_susp": 0.006211180124223602,
            "pseudo_tarantula_susp": 0.0009871668311944718,
            "pseudo_op2_susp": 0.006211180124223602,
            "pseudo_barinel_susp": 0.0009871668311944718
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#619",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 619,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013513513513513514,
            "pseudo_dstar_susp": 0.006211180124223602,
            "pseudo_tarantula_susp": 0.0009871668311944718,
            "pseudo_op2_susp": 0.006211180124223602,
            "pseudo_barinel_susp": 0.0009871668311944718
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#640",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 640,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#647",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 647,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#667",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 667,
        "end_line": 672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#674",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 674,
        "end_line": 695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.637625289128758e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#697",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 697,
        "end_line": 722,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._validate_fill_value#728",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._validate_fill_value(self, fill_value)",
        "snippet": "    def _validate_fill_value(self, fill_value):\n        if isna(fill_value):\n            fill_value = iNaT\n        elif isinstance(fill_value, (datetime, np.datetime64)):\n            self._assert_tzawareness_compat(fill_value)\n            fill_value = Timestamp(fill_value).value\n        else:\n            raise ValueError(\n                \"'fill_value' should be a Timestamp. \"\n                \"Got '{got}'.\".format(got=fill_value)\n            )\n        return fill_value",
        "begin_line": 728,
        "end_line": 739,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.737098344693281e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#758",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 758,
        "end_line": 766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat#768",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._assert_tzawareness_compat(self, other)",
        "snippet": "    def _assert_tzawareness_compat(self, other):\n        # adapted from _Timestamp._assert_tzawareness_compat\n        other_tz = getattr(other, \"tzinfo\", None)\n        if is_datetime64tz_dtype(other):\n            # Get tzinfo from Series dtype\n            other_tz = other.dtype.tz\n        if other is NaT:\n            # pd.NaT quacks both aware and naive\n            pass\n        elif self.tz is None:\n            if other_tz is not None:\n                raise TypeError(\n                    \"Cannot compare tz-naive and tz-aware datetime-like objects.\"\n                )\n        elif other_tz is None:\n            raise TypeError(\n                \"Cannot compare tz-naive and tz-aware datetime-like objects\"\n            )",
        "begin_line": 768,
        "end_line": 785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar#834",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            return self - NaT\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"Timestamp subtraction must have the same timezones or no timezones\"\n            )\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, -other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 834,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_delta#853",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_delta(self, delta)",
        "snippet": "    def _add_delta(self, delta):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new DatetimeArray\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : DatetimeArray\n        \"\"\"\n        new_values = super()._add_delta(delta)\n        return type(self)._from_sequence(new_values, tz=self.tz, freq=\"infer\")",
        "begin_line": 853,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#882",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 882,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#958",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise')",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq='D')\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        \"\"\"\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise',\"\n                \" 'NaT', 'shift_forward', 'shift_backward' or\"\n                \" a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(_NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(new_dates, dtype=dtype, freq=self.freq)",
        "begin_line": 958,
        "end_line": 1121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.34306691139663e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1812",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n    int_as_wall_time=False,\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n    int_as_wall_time : bool, default False\n        Whether to treat ints as wall time in specified timezone, or as\n        nanosecond-precision UNIX epoch (wall time in UTC).\n        This is used in DatetimeIndex.__init__ to deprecate the wall-time\n        behaviour.\n\n        ..versionadded:: 0.24.0\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n            # When a sequence of timestamp objects is passed, we always\n            # want to treat the (now i8-valued) data as UTC timestamps,\n            # not wall times.\n            int_as_wall_time = False\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        if int_as_wall_time and tz is not None and not timezones.is_utc(tz):\n            warnings.warn(_i8_message, FutureWarning, stacklevel=4)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1812,
        "end_line": 1955,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009523809523809525,
            "pseudo_dstar_susp": 0.04,
            "pseudo_tarantula_susp": 0.009900990099009901,
            "pseudo_op2_susp": 0.04,
            "pseudo_barinel_susp": 0.009900990099009901
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1958",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1958,
        "end_line": 2038,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000946073793755913,
            "pseudo_dstar_susp": 0.0005903187721369539,
            "pseudo_tarantula_susp": 0.0009615384615384616,
            "pseudo_op2_susp": 0.0005903187721369539,
            "pseudo_barinel_susp": 0.0009615384615384616
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2041",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if is_float_dtype(data):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid.  Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data) and not is_datetime64tz_dtype(data):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2041,
        "end_line": 2091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00641025641025641,
            "pseudo_dstar_susp": 0.016129032258064516,
            "pseudo_tarantula_susp": 0.001226993865030675,
            "pseudo_op2_susp": 0.016129032258064516,
            "pseudo_barinel_susp": 0.001226993865030675
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2098",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            \"data is already tz-aware {inferred_tz}, unable to \"\n            \"set specified tz: {tz}\".format(inferred_tz=inferred_tz, tz=tz)\n        )\n    return tz",
        "begin_line": 2098,
        "end_line": 2125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001358695652173913,
            "pseudo_dstar_susp": 0.0007132667617689016,
            "pseudo_tarantula_susp": 0.0016778523489932886,
            "pseudo_op2_susp": 0.0007132667617689016,
            "pseudo_barinel_susp": 0.0016778523489932886
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2128",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, warn\n            dtype = _NS_DTYPE\n            msg = textwrap.dedent(\n                \"\"\"\\\n                Passing in 'datetime64' dtype with no precision is deprecated\n                and will raise in a future version. Please pass in\n                'datetime64[ns]' instead.\"\"\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                \"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\".format(dtype=dtype)\n            )\n    return dtype",
        "begin_line": 2128,
        "end_line": 2170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014814814814814814,
            "pseudo_dstar_susp": 0.008333333333333333,
            "pseudo_tarantula_susp": 0.001053740779768177,
            "pseudo_op2_susp": 0.008333333333333333,
            "pseudo_barinel_susp": 0.001053740779768177
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2173",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2173,
        "end_line": 2217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005555555555555556,
            "pseudo_dstar_susp": 0.011627906976744186,
            "pseudo_tarantula_susp": 0.0011918951132300357,
            "pseudo_op2_susp": 0.011627906976744186,
            "pseudo_barinel_susp": 0.0011918951132300357
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2220",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        )\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2220,
        "end_line": 2258,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011961722488038277,
            "pseudo_dstar_susp": 0.0006720430107526882,
            "pseudo_tarantula_susp": 0.001455604075691412,
            "pseudo_op2_susp": 0.0006720430107526882,
            "pseudo_barinel_susp": 0.001455604075691412
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2261",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2261,
        "end_line": 2278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.011111111111111112,
            "pseudo_dstar_susp": 0.0011111111111111111,
            "pseudo_tarantula_susp": 0.011235955056179775,
            "pseudo_op2_susp": 0.0011111111111111111,
            "pseudo_barinel_susp": 0.011235955056179775
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2281",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2281,
        "end_line": 2311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.029411764705882353,
            "pseudo_dstar_susp": 0.001184834123222749,
            "pseudo_tarantula_susp": 0.03125,
            "pseudo_op2_susp": 0.001184834123222749,
            "pseudo_barinel_susp": 0.03125
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#190",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                msg = DIFFERENT_FREQ.format(\n                    cls=type(self).__name__,\n                    own_freq=values.freq.freqstr,\n                    other_freq=freq.freqstr,\n                )\n                raise IncompatibleFrequency(msg)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 190,
        "end_line": 218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#221",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, freq=None, **kwargs):\n        # alias for PeriodArray.__init__\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 221,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#226",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls, scalars: Sequence[Optional[Period]], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        scalars: Sequence[Optional[Period]],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> ABCPeriodArray:\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 226,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#274",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 274,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#322",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 322,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#327",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 327,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__array__#333",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # overriding DatetimelikeArray\n        return np.array(list(self), dtype=object)",
        "begin_line": 333,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._validate_fill_value#487",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._validate_fill_value(self, fill_value)",
        "snippet": "    def _validate_fill_value(self, fill_value):\n        if isna(fill_value):\n            fill_value = iNaT\n        elif isinstance(fill_value, Period):\n            self._check_compatible_with(fill_value)\n            fill_value = fill_value.ordinal\n        else:\n            raise ValueError(\n                \"'fill_value' should be a Period. \"\n                \"Got '{got}'.\".format(got=fill_value)\n            )\n        return fill_value",
        "begin_line": 487,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._box_func#528",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 528,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.737098344693281e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.astype#612",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle Period[T] -> Period[U]\n        # Our parent handles everything else.\n        dtype = pandas_dtype(dtype)\n\n        if is_period_dtype(dtype):\n            return self.asfreq(dtype.freq)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 612,
        "end_line": 619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._values_for_argsort#782",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 782,
        "end_line": 783,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#821",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if isinstance(data, (ABCPeriodIndex, ABCSeries, PeriodArray)):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 821,
        "end_line": 900,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#903",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 903,
        "end_line": 933,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#974",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 974,
        "end_line": 1018,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.parsers._validate_integer#365",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_integer(name, val, min_val=0)",
        "snippet": "def _validate_integer(name, val, min_val=0):\n    \"\"\"\n    Checks whether the 'name' parameter for parsing is either\n    an integer OR float that can SAFELY be cast to an integer\n    without losing accuracy. Raises a ValueError if that is\n    not the case.\n\n    Parameters\n    ----------\n    name : string\n        Parameter name (used for error reporting)\n    val : int or float\n        The value to check\n    min_val : int\n        Minimum allowed value (val < min_val will result in a ValueError)\n    \"\"\"\n    msg = \"'{name:s}' must be an integer >={min_val:d}\".format(\n        name=name, min_val=min_val\n    )\n\n    if val is not None:\n        if is_float(val):\n            if int(val) != val:\n                raise ValueError(msg)\n            val = int(val)\n        elif not (is_integer(val) and val >= min_val):\n            raise ValueError(msg)\n\n    return val",
        "begin_line": 365,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._validate_names#396",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_names(names)",
        "snippet": "def _validate_names(names):\n    \"\"\"\n    Raise ValueError if the `names` parameter contains duplicates.\n\n    Parameters\n    ----------\n    names : array-like or None\n        An array containing a list of the names used for the output DataFrame.\n\n    Raises\n    ------\n    ValueError\n        If names are not unique.\n    \"\"\"\n\n    if names is not None:\n        if len(names) != len(set(names)):\n            raise ValueError(\"Duplicate names are not allowed.\")",
        "begin_line": 396,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._read#416",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._read(filepath_or_buffer: FilePathOrBuffer, kwds)",
        "snippet": "def _read(filepath_or_buffer: FilePathOrBuffer, kwds):\n    \"\"\"Generic reader of line files.\"\"\"\n    encoding = kwds.get(\"encoding\", None)\n    if encoding is not None:\n        encoding = re.sub(\"_\", \"-\", encoding).lower()\n        kwds[\"encoding\"] = encoding\n\n    compression = kwds.get(\"compression\", \"infer\")\n    compression = _infer_compression(filepath_or_buffer, compression)\n\n    # TODO: get_filepath_or_buffer could return\n    # Union[FilePathOrBuffer, s3fs.S3File, gcsfs.GCSFile]\n    # though mypy handling of conditional imports is difficult.\n    # See https://github.com/python/mypy/issues/1297\n    fp_or_buf, _, compression, should_close = get_filepath_or_buffer(\n        filepath_or_buffer, encoding, compression\n    )\n    kwds[\"compression\"] = compression\n\n    if kwds.get(\"date_parser\", None) is not None:\n        if isinstance(kwds[\"parse_dates\"], bool):\n            kwds[\"parse_dates\"] = True\n\n    # Extract some of the arguments (pass chunksize on).\n    iterator = kwds.get(\"iterator\", False)\n    chunksize = _validate_integer(\"chunksize\", kwds.get(\"chunksize\", None), 1)\n    nrows = kwds.get(\"nrows\", None)\n\n    # Check for duplicates in names.\n    _validate_names(kwds.get(\"names\", None))\n\n    # Create the parser.\n    parser = TextFileReader(fp_or_buf, **kwds)\n\n    if chunksize or iterator:\n        return parser\n\n    try:\n        data = parser.read(nrows)\n    finally:\n        parser.close()\n\n    if should_close:\n        try:\n            fp_or_buf.close()\n        except ValueError:\n            pass\n\n    return data",
        "begin_line": 416,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.parser_f#530",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers.parser_f(filepath_or_buffer: FilePathOrBuffer, sep=default_sep, delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal: str='.', lineterminator=None, quotechar='\"', quoting=csv.QUOTE_MINIMAL, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=_c_parser_defaults['low_memory'], memory_map=False, float_precision=None)",
        "snippet": "    def parser_f(\n        filepath_or_buffer: FilePathOrBuffer,\n        sep=default_sep,\n        delimiter=None,\n        # Column and Index Locations and Names\n        header=\"infer\",\n        names=None,\n        index_col=None,\n        usecols=None,\n        squeeze=False,\n        prefix=None,\n        mangle_dupe_cols=True,\n        # General Parsing Configuration\n        dtype=None,\n        engine=None,\n        converters=None,\n        true_values=None,\n        false_values=None,\n        skipinitialspace=False,\n        skiprows=None,\n        skipfooter=0,\n        nrows=None,\n        # NA and Missing Data Handling\n        na_values=None,\n        keep_default_na=True,\n        na_filter=True,\n        verbose=False,\n        skip_blank_lines=True,\n        # Datetime Handling\n        parse_dates=False,\n        infer_datetime_format=False,\n        keep_date_col=False,\n        date_parser=None,\n        dayfirst=False,\n        cache_dates=True,\n        # Iteration\n        iterator=False,\n        chunksize=None,\n        # Quoting, Compression, and File Format\n        compression=\"infer\",\n        thousands=None,\n        decimal: str = \".\",\n        lineterminator=None,\n        quotechar='\"',\n        quoting=csv.QUOTE_MINIMAL,\n        doublequote=True,\n        escapechar=None,\n        comment=None,\n        encoding=None,\n        dialect=None,\n        # Error Handling\n        error_bad_lines=True,\n        warn_bad_lines=True,\n        # Internal\n        delim_whitespace=False,\n        low_memory=_c_parser_defaults[\"low_memory\"],\n        memory_map=False,\n        float_precision=None,\n    ):\n\n        # gh-23761\n        #\n        # When a dialect is passed, it overrides any of the overlapping\n        # parameters passed in directly. We don't want to warn if the\n        # default parameters were passed in (since it probably means\n        # that the user didn't pass them in explicitly in the first place).\n        #\n        # \"delimiter\" is the annoying corner case because we alias it to\n        # \"sep\" before doing comparison to the dialect values later on.\n        # Thus, we need a flag to indicate that we need to \"override\"\n        # the comparison to dialect values by checking if default values\n        # for BOTH \"delimiter\" and \"sep\" were provided.\n        if dialect is not None:\n            sep_override = delimiter is None and sep == default_sep\n            kwds = dict(sep_override=sep_override)\n        else:\n            kwds = dict()\n\n        # Alias sep -> delimiter.\n        if delimiter is None:\n            delimiter = sep\n\n        if delim_whitespace and delimiter != default_sep:\n            raise ValueError(\n                \"Specified a delimiter with both sep and\"\n                \" delim_whitespace=True; you can only\"\n                \" specify one.\"\n            )\n\n        if engine is not None:\n            engine_specified = True\n        else:\n            engine = \"c\"\n            engine_specified = False\n\n        kwds.update(\n            delimiter=delimiter,\n            engine=engine,\n            dialect=dialect,\n            compression=compression,\n            engine_specified=engine_specified,\n            doublequote=doublequote,\n            escapechar=escapechar,\n            quotechar=quotechar,\n            quoting=quoting,\n            skipinitialspace=skipinitialspace,\n            lineterminator=lineterminator,\n            header=header,\n            index_col=index_col,\n            names=names,\n            prefix=prefix,\n            skiprows=skiprows,\n            skipfooter=skipfooter,\n            na_values=na_values,\n            true_values=true_values,\n            false_values=false_values,\n            keep_default_na=keep_default_na,\n            thousands=thousands,\n            comment=comment,\n            decimal=decimal,\n            parse_dates=parse_dates,\n            keep_date_col=keep_date_col,\n            dayfirst=dayfirst,\n            date_parser=date_parser,\n            cache_dates=cache_dates,\n            nrows=nrows,\n            iterator=iterator,\n            chunksize=chunksize,\n            converters=converters,\n            dtype=dtype,\n            usecols=usecols,\n            verbose=verbose,\n            encoding=encoding,\n            squeeze=squeeze,\n            memory_map=memory_map,\n            float_precision=float_precision,\n            na_filter=na_filter,\n            delim_whitespace=delim_whitespace,\n            warn_bad_lines=warn_bad_lines,\n            error_bad_lines=error_bad_lines,\n            low_memory=low_memory,\n            mangle_dupe_cols=mangle_dupe_cols,\n            infer_datetime_format=infer_datetime_format,\n            skip_blank_lines=skip_blank_lines,\n        )\n\n        return _read(filepath_or_buffer, kwds)",
        "begin_line": 530,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.__init__#792",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.__init__(self, f, engine=None, **kwds)",
        "snippet": "    def __init__(self, f, engine=None, **kwds):\n\n        self.f = f\n\n        if engine is not None:\n            engine_specified = True\n        else:\n            engine = \"python\"\n            engine_specified = False\n\n        self._engine_specified = kwds.get(\"engine_specified\", engine_specified)\n\n        if kwds.get(\"dialect\") is not None:\n            dialect = kwds[\"dialect\"]\n            if dialect in csv.list_dialects():\n                dialect = csv.get_dialect(dialect)\n\n            # Any valid dialect should have these attributes.\n            # If any are missing, we will raise automatically.\n            for param in (\n                \"delimiter\",\n                \"doublequote\",\n                \"escapechar\",\n                \"skipinitialspace\",\n                \"quotechar\",\n                \"quoting\",\n            ):\n                try:\n                    dialect_val = getattr(dialect, param)\n                except AttributeError:\n                    raise ValueError(\n                        \"Invalid dialect '{dialect}' provided\".format(\n                            dialect=kwds[\"dialect\"]\n                        )\n                    )\n                parser_default = _parser_defaults[param]\n                provided = kwds.get(param, parser_default)\n\n                # Messages for conflicting values between the dialect\n                # instance and the actual parameters provided.\n                conflict_msgs = []\n\n                # Don't warn if the default parameter was passed in,\n                # even if it conflicts with the dialect (gh-23761).\n                if provided != parser_default and provided != dialect_val:\n                    msg = (\n                        \"Conflicting values for '{param}': '{val}' was \"\n                        \"provided, but the dialect specifies '{diaval}'. \"\n                        \"Using the dialect-specified value.\".format(\n                            param=param, val=provided, diaval=dialect_val\n                        )\n                    )\n\n                    # Annoying corner case for not warning about\n                    # conflicts between dialect and delimiter parameter.\n                    # Refer to the outer \"_read_\" function for more info.\n                    if not (param == \"delimiter\" and kwds.pop(\"sep_override\", False)):\n                        conflict_msgs.append(msg)\n\n                if conflict_msgs:\n                    warnings.warn(\n                        \"\\n\\n\".join(conflict_msgs), ParserWarning, stacklevel=2\n                    )\n                kwds[param] = dialect_val\n\n        if kwds.get(\"skipfooter\"):\n            if kwds.get(\"iterator\") or kwds.get(\"chunksize\"):\n                raise ValueError(\"'skipfooter' not supported for 'iteration'\")\n            if kwds.get(\"nrows\"):\n                raise ValueError(\"'skipfooter' not supported with 'nrows'\")\n\n        if kwds.get(\"header\", \"infer\") == \"infer\":\n            kwds[\"header\"] = 0 if kwds.get(\"names\") is None else None\n\n        self.orig_options = kwds\n\n        # miscellanea\n        self.engine = engine\n        self._engine = None\n        self._currow = 0\n\n        options = self._get_options_with_defaults(engine)\n\n        self.chunksize = options.pop(\"chunksize\", None)\n        self.nrows = options.pop(\"nrows\", None)\n        self.squeeze = options.pop(\"squeeze\", False)\n\n        # might mutate self.engine\n        self.engine = self._check_file_or_buffer(f, engine)\n        self.options, self.engine = self._clean_options(options, engine)\n\n        if \"has_index_names\" in kwds:\n            self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n\n        self._make_engine(self.engine)",
        "begin_line": 792,
        "end_line": 886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.close#888",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.close(self)",
        "snippet": "    def close(self):\n        self._engine.close()",
        "begin_line": 888,
        "end_line": 889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._get_options_with_defaults#891",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._get_options_with_defaults(self, engine)",
        "snippet": "    def _get_options_with_defaults(self, engine):\n        kwds = self.orig_options\n\n        options = {}\n\n        for argname, default in _parser_defaults.items():\n            value = kwds.get(argname, default)\n\n            # see gh-12935\n            if argname == \"mangle_dupe_cols\" and not value:\n                raise ValueError(\"Setting mangle_dupe_cols=False is not supported yet\")\n            else:\n                options[argname] = value\n\n        for argname, default in _c_parser_defaults.items():\n            if argname in kwds:\n                value = kwds[argname]\n\n                if engine != \"c\" and value != default:\n                    if \"python\" in engine and argname not in _python_unsupported:\n                        pass\n                    elif value == _deprecated_defaults.get(argname, default):\n                        pass\n                    else:\n                        raise ValueError(\n                            \"The %r option is not supported with the\"\n                            \" %r engine\" % (argname, engine)\n                        )\n            else:\n                value = _deprecated_defaults.get(argname, default)\n            options[argname] = value\n\n        if engine == \"python-fwf\":\n            for argname, default in _fwf_defaults.items():\n                options[argname] = kwds.get(argname, default)\n\n        return options",
        "begin_line": 891,
        "end_line": 927,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._check_file_or_buffer#929",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._check_file_or_buffer(self, f, engine)",
        "snippet": "    def _check_file_or_buffer(self, f, engine):\n        # see gh-16530\n        if is_file_like(f):\n            next_attr = \"__next__\"\n\n            # The C engine doesn't need the file-like to have the \"next\" or\n            # \"__next__\" attribute. However, the Python engine explicitly calls\n            # \"next(...)\" when iterating through such an object, meaning it\n            # needs to have that attribute (\"next\" for Python 2.x, \"__next__\"\n            # for Python 3.x)\n            if engine != \"c\" and not hasattr(f, next_attr):\n                msg = \"The 'python' engine cannot iterate through this file buffer.\"\n                raise ValueError(msg)\n\n        return engine",
        "begin_line": 929,
        "end_line": 943,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._clean_options#945",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._clean_options(self, options, engine)",
        "snippet": "    def _clean_options(self, options, engine):\n        result = options.copy()\n\n        engine_specified = self._engine_specified\n        fallback_reason = None\n\n        sep = options[\"delimiter\"]\n        delim_whitespace = options[\"delim_whitespace\"]\n\n        # C engine not supported yet\n        if engine == \"c\":\n            if options[\"skipfooter\"] > 0:\n                fallback_reason = \"the 'c' engine does not support skipfooter\"\n                engine = \"python\"\n\n        encoding = sys.getfilesystemencoding() or \"utf-8\"\n        if sep is None and not delim_whitespace:\n            if engine == \"c\":\n                fallback_reason = (\n                    \"the 'c' engine does not support\"\n                    \" sep=None with delim_whitespace=False\"\n                )\n                engine = \"python\"\n        elif sep is not None and len(sep) > 1:\n            if engine == \"c\" and sep == r\"\\s+\":\n                result[\"delim_whitespace\"] = True\n                del result[\"delimiter\"]\n            elif engine not in (\"python\", \"python-fwf\"):\n                # wait until regex engine integrated\n                fallback_reason = (\n                    \"the 'c' engine does not support\"\n                    \" regex separators (separators > 1 char and\"\n                    r\" different from '\\s+' are\"\n                    \" interpreted as regex)\"\n                )\n                engine = \"python\"\n        elif delim_whitespace:\n            if \"python\" in engine:\n                result[\"delimiter\"] = r\"\\s+\"\n        elif sep is not None:\n            encodeable = True\n            try:\n                if len(sep.encode(encoding)) > 1:\n                    encodeable = False\n            except UnicodeDecodeError:\n                encodeable = False\n            if not encodeable and engine not in (\"python\", \"python-fwf\"):\n                fallback_reason = (\n                    \"the separator encoded in {encoding}\"\n                    \" is > 1 char long, and the 'c' engine\"\n                    \" does not support such separators\".format(encoding=encoding)\n                )\n                engine = \"python\"\n\n        quotechar = options[\"quotechar\"]\n        if quotechar is not None and isinstance(quotechar, (str, bytes)):\n            if (\n                len(quotechar) == 1\n                and ord(quotechar) > 127\n                and engine not in (\"python\", \"python-fwf\")\n            ):\n                fallback_reason = (\n                    \"ord(quotechar) > 127, meaning the \"\n                    \"quotechar is larger than one byte, \"\n                    \"and the 'c' engine does not support \"\n                    \"such quotechars\"\n                )\n                engine = \"python\"\n\n        if fallback_reason and engine_specified:\n            raise ValueError(fallback_reason)\n\n        if engine == \"c\":\n            for arg in _c_unsupported:\n                del result[arg]\n\n        if \"python\" in engine:\n            for arg in _python_unsupported:\n                if fallback_reason and result[arg] != _c_parser_defaults[arg]:\n                    msg = (\n                        \"Falling back to the 'python' engine because\"\n                        \" {reason}, but this causes {option!r} to be\"\n                        \" ignored as it is not supported by the 'python'\"\n                        \" engine.\"\n                    ).format(reason=fallback_reason, option=arg)\n                    raise ValueError(msg)\n                del result[arg]\n\n        if fallback_reason:\n            warnings.warn(\n                (\n                    \"Falling back to the 'python' engine because\"\n                    \" {0}; you can avoid this warning by specifying\"\n                    \" engine='python'.\"\n                ).format(fallback_reason),\n                ParserWarning,\n                stacklevel=5,\n            )\n\n        index_col = options[\"index_col\"]\n        names = options[\"names\"]\n        converters = options[\"converters\"]\n        na_values = options[\"na_values\"]\n        skiprows = options[\"skiprows\"]\n\n        _validate_header_arg(options[\"header\"])\n\n        depr_warning = \"\"\n\n        for arg in _deprecated_args:\n            parser_default = _c_parser_defaults[arg]\n            depr_default = _deprecated_defaults[arg]\n\n            msg = (\n                \"The '{arg}' argument has been deprecated \"\n                \"and will be removed in a future version.\".format(arg=arg)\n            )\n\n            if result.get(arg, depr_default) != depr_default:\n                depr_warning += msg + \"\\n\\n\"\n            else:\n                result[arg] = parser_default\n\n        if depr_warning != \"\":\n            warnings.warn(depr_warning, FutureWarning, stacklevel=2)\n\n        if index_col is True:\n            raise ValueError(\"The value of index_col couldn't be 'True'\")\n        if _is_index_col(index_col):\n            if not isinstance(index_col, (list, tuple, np.ndarray)):\n                index_col = [index_col]\n        result[\"index_col\"] = index_col\n\n        names = list(names) if names is not None else names\n\n        # type conversion-related\n        if converters is not None:\n            if not isinstance(converters, dict):\n                raise TypeError(\n                    \"Type converters must be a dict or\"\n                    \" subclass, input was \"\n                    \"a {0!r}\".format(type(converters).__name__)\n                )\n        else:\n            converters = {}\n\n        # Converting values to NA\n        keep_default_na = options[\"keep_default_na\"]\n        na_values, na_fvalues = _clean_na_values(na_values, keep_default_na)\n\n        # handle skiprows; this is internally handled by the\n        # c-engine, so only need for python parsers\n        if engine != \"c\":\n            if is_integer(skiprows):\n                skiprows = list(range(skiprows))\n            if skiprows is None:\n                skiprows = set()\n            elif not callable(skiprows):\n                skiprows = set(skiprows)\n\n        # put stuff back\n        result[\"names\"] = names\n        result[\"converters\"] = converters\n        result[\"na_values\"] = na_values\n        result[\"na_fvalues\"] = na_fvalues\n        result[\"skiprows\"] = skiprows\n\n        return result, engine",
        "begin_line": 945,
        "end_line": 1112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.__next__#1114",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.__next__(self)",
        "snippet": "    def __next__(self):\n        try:\n            return self.get_chunk()\n        except StopIteration:\n            self.close()\n            raise",
        "begin_line": 1114,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._make_engine#1121",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._make_engine(self, engine='c')",
        "snippet": "    def _make_engine(self, engine=\"c\"):\n        if engine == \"c\":\n            self._engine = CParserWrapper(self.f, **self.options)\n        else:\n            if engine == \"python\":\n                klass = PythonParser\n            elif engine == \"python-fwf\":\n                klass = FixedWidthFieldParser\n            else:\n                raise ValueError(\n                    \"Unknown engine: {engine} (valid options are\"\n                    ' \"c\", \"python\", or'\n                    ' \"python-fwf\")'.format(engine=engine)\n                )\n            self._engine = klass(self.f, **self.options)",
        "begin_line": 1121,
        "end_line": 1135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.read#1140",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.read(self, nrows=None)",
        "snippet": "    def read(self, nrows=None):\n        nrows = _validate_integer(\"nrows\", nrows)\n        ret = self._engine.read(nrows)\n\n        # May alter columns / col_dict\n        index, columns, col_dict = self._create_index(ret)\n\n        if index is None:\n            if col_dict:\n                # Any column is actually fine:\n                new_rows = len(next(iter(col_dict.values())))\n                index = RangeIndex(self._currow, self._currow + new_rows)\n            else:\n                new_rows = 0\n        else:\n            new_rows = len(index)\n\n        df = DataFrame(col_dict, columns=columns, index=index)\n\n        self._currow += new_rows\n\n        if self.squeeze and len(df.columns) == 1:\n            return df[df.columns[0]].copy()\n        return df",
        "begin_line": 1140,
        "end_line": 1163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader._create_index#1165",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader._create_index(self, ret)",
        "snippet": "    def _create_index(self, ret):\n        index, columns, col_dict = ret\n        return index, columns, col_dict",
        "begin_line": 1165,
        "end_line": 1167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.TextFileReader.get_chunk#1169",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.TextFileReader",
        "signature": "pandas.io.parsers.TextFileReader.get_chunk(self, size=None)",
        "snippet": "    def get_chunk(self, size=None):\n        if size is None:\n            size = self.chunksize\n        if self.nrows is not None:\n            if self._currow >= self.nrows:\n                raise StopIteration\n            size = min(size, self.nrows - self._currow)\n        return self.read(nrows=size)",
        "begin_line": 1169,
        "end_line": 1176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.parsers._is_index_col#1179",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._is_index_col(col)",
        "snippet": "def _is_index_col(col):\n    return col is not None and col is not False",
        "begin_line": 1179,
        "end_line": 1180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._is_potential_multi_index#1183",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._is_potential_multi_index(columns)",
        "snippet": "def _is_potential_multi_index(columns):\n    \"\"\"\n    Check whether or not the `columns` parameter\n    could be converted into a MultiIndex.\n\n    Parameters\n    ----------\n    columns : array-like\n        Object which may or may not be convertible into a MultiIndex\n\n    Returns\n    -------\n    boolean : Whether or not columns could become a MultiIndex\n    \"\"\"\n    return (\n        len(columns)\n        and not isinstance(columns, MultiIndex)\n        and all(isinstance(c, tuple) for c in columns)\n    )",
        "begin_line": 1183,
        "end_line": 1201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010526315789473684,
            "pseudo_dstar_susp": 0.05555555555555555,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.05555555555555555,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._validate_usecols_arg#1280",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_usecols_arg(usecols)",
        "snippet": "def _validate_usecols_arg(usecols):\n    \"\"\"\n    Validate the 'usecols' parameter.\n\n    Checks whether or not the 'usecols' parameter contains all integers\n    (column selection by index), strings (column by name) or is a callable.\n    Raises a ValueError if that is not the case.\n\n    Parameters\n    ----------\n    usecols : list-like, callable, or None\n        List of columns to use when parsing or a callable that can be used\n        to filter a list of table columns.\n\n    Returns\n    -------\n    usecols_tuple : tuple\n        A tuple of (verified_usecols, usecols_dtype).\n\n        'verified_usecols' is either a set if an array-like is passed in or\n        'usecols' if a callable or None is passed in.\n\n        'usecols_dtype` is the inferred dtype of 'usecols' if an array-like\n        is passed in or None if a callable or None is passed in.\n    \"\"\"\n    msg = (\n        \"'usecols' must either be list-like of all strings, all unicode, \"\n        \"all integers or a callable.\"\n    )\n    if usecols is not None:\n        if callable(usecols):\n            return usecols, None\n\n        if not is_list_like(usecols):\n            # see gh-20529\n            #\n            # Ensure it is iterable container but not string.\n            raise ValueError(msg)\n\n        usecols_dtype = lib.infer_dtype(usecols, skipna=False)\n\n        if usecols_dtype not in (\"empty\", \"integer\", \"string\", \"unicode\"):\n            raise ValueError(msg)\n\n        usecols = set(usecols)\n\n        return usecols, usecols_dtype\n    return usecols, None",
        "begin_line": 1280,
        "end_line": 1327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._validate_parse_dates_arg#1330",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._validate_parse_dates_arg(parse_dates)",
        "snippet": "def _validate_parse_dates_arg(parse_dates):\n    \"\"\"\n    Check whether or not the 'parse_dates' parameter\n    is a non-boolean scalar. Raises a ValueError if\n    that is the case.\n    \"\"\"\n    msg = (\n        \"Only booleans, lists, and \"\n        \"dictionaries are accepted \"\n        \"for the 'parse_dates' parameter\"\n    )\n\n    if parse_dates is not None:\n        if is_scalar(parse_dates):\n            if not lib.is_bool(parse_dates):\n                raise TypeError(msg)\n\n        elif not isinstance(parse_dates, (list, dict)):\n            raise TypeError(msg)\n\n    return parse_dates",
        "begin_line": 1330,
        "end_line": 1350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase.__init__#1354",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase.__init__(self, kwds)",
        "snippet": "    def __init__(self, kwds):\n        self.names = kwds.get(\"names\")\n        self.orig_names = None\n        self.prefix = kwds.pop(\"prefix\", None)\n\n        self.index_col = kwds.get(\"index_col\", None)\n        self.unnamed_cols = set()\n        self.index_names = None\n        self.col_names = None\n\n        self.parse_dates = _validate_parse_dates_arg(kwds.pop(\"parse_dates\", False))\n        self.date_parser = kwds.pop(\"date_parser\", None)\n        self.dayfirst = kwds.pop(\"dayfirst\", False)\n        self.keep_date_col = kwds.pop(\"keep_date_col\", False)\n\n        self.na_values = kwds.get(\"na_values\")\n        self.na_fvalues = kwds.get(\"na_fvalues\")\n        self.na_filter = kwds.get(\"na_filter\", False)\n        self.keep_default_na = kwds.get(\"keep_default_na\", True)\n\n        self.true_values = kwds.get(\"true_values\")\n        self.false_values = kwds.get(\"false_values\")\n        self.mangle_dupe_cols = kwds.get(\"mangle_dupe_cols\", True)\n        self.infer_datetime_format = kwds.pop(\"infer_datetime_format\", False)\n        self.cache_dates = kwds.pop(\"cache_dates\", True)\n\n        self._date_conv = _make_date_converter(\n            date_parser=self.date_parser,\n            dayfirst=self.dayfirst,\n            infer_datetime_format=self.infer_datetime_format,\n            cache_dates=self.cache_dates,\n        )\n\n        # validate header options for mi\n        self.header = kwds.get(\"header\")\n        if isinstance(self.header, (list, tuple, np.ndarray)):\n            if not all(map(is_integer, self.header)):\n                raise ValueError(\"header must be integer or list of integers\")\n            if any(i < 0 for i in self.header):\n                raise ValueError(\n                    \"cannot specify multi-index header with negative integers\"\n                )\n            if kwds.get(\"usecols\"):\n                raise ValueError(\n                    \"cannot specify usecols when specifying a multi-index header\"\n                )\n            if kwds.get(\"names\"):\n                raise ValueError(\n                    \"cannot specify names when specifying a multi-index header\"\n                )\n\n            # validate index_col that only contains integers\n            if self.index_col is not None:\n                is_sequence = isinstance(self.index_col, (list, tuple, np.ndarray))\n                if not (\n                    is_sequence\n                    and all(map(is_integer, self.index_col))\n                    or is_integer(self.index_col)\n                ):\n                    raise ValueError(\n                        \"index_col must only contain row numbers \"\n                        \"when specifying a multi-index header\"\n                    )\n\n        # GH 16338\n        elif self.header is not None and not is_integer(self.header):\n            raise ValueError(\"header must be integer or list of integers\")\n\n        # GH 27779\n        elif self.header is not None and self.header < 0:\n            raise ValueError(\n                \"Passing negative integer to header is invalid. \"\n                \"For no header, use header=None instead\"\n            )\n\n        self._name_processed = False\n\n        self._first_chunk = True\n\n        # GH 13932\n        # keep references to file handles opened by the parser itself\n        self.handles = []",
        "begin_line": 1354,
        "end_line": 1435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._has_complex_date_col#1442",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._has_complex_date_col(self)",
        "snippet": "    def _has_complex_date_col(self):\n        return isinstance(self.parse_dates, dict) or (\n            isinstance(self.parse_dates, list)\n            and len(self.parse_dates) > 0\n            and isinstance(self.parse_dates[0], list)\n        )",
        "begin_line": 1442,
        "end_line": 1447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._maybe_dedup_names#1526",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._maybe_dedup_names(self, names)",
        "snippet": "    def _maybe_dedup_names(self, names):\n        # see gh-7160 and gh-9424: this helps to provide\n        # immediate alleviation of the duplicate names\n        # issue and appears to be satisfactory to users,\n        # but ultimately, not needing to butcher the names\n        # would be nice!\n        if self.mangle_dupe_cols:\n            names = list(names)  # so we can index\n            counts = defaultdict(int)\n            is_potential_mi = _is_potential_multi_index(names)\n\n            for i, col in enumerate(names):\n                cur_count = counts[col]\n\n                while cur_count > 0:\n                    counts[col] = cur_count + 1\n\n                    if is_potential_mi:\n                        col = col[:-1] + (\n                            \"{column}.{count}\".format(column=col[-1], count=cur_count),\n                        )\n                    else:\n                        col = \"{column}.{count}\".format(column=col, count=cur_count)\n                    cur_count = counts[col]\n\n                names[i] = col\n                counts[col] = cur_count + 1\n\n        return names",
        "begin_line": 1526,
        "end_line": 1554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._maybe_make_multi_index_columns#1556",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._maybe_make_multi_index_columns(self, columns, col_names=None)",
        "snippet": "    def _maybe_make_multi_index_columns(self, columns, col_names=None):\n        # possibly create a column mi here\n        if _is_potential_multi_index(columns):\n            columns = MultiIndex.from_tuples(columns, names=col_names)\n        return columns",
        "begin_line": 1556,
        "end_line": 1560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._make_index#1562",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._make_index(self, data, alldata, columns, indexnamerow=False)",
        "snippet": "    def _make_index(self, data, alldata, columns, indexnamerow=False):\n        if not _is_index_col(self.index_col) or not self.index_col:\n            index = None\n\n        elif not self._has_complex_date_col:\n            index = self._get_simple_index(alldata, columns)\n            index = self._agg_index(index)\n        elif self._has_complex_date_col:\n            if not self._name_processed:\n                (self.index_names, _, self.index_col) = _clean_index_names(\n                    list(columns), self.index_col, self.unnamed_cols\n                )\n                self._name_processed = True\n            index = self._get_complex_date_index(data, columns)\n            index = self._agg_index(index, try_parse_dates=False)\n\n        # add names for the index\n        if indexnamerow:\n            coffset = len(indexnamerow) - len(columns)\n            index = index.set_names(indexnamerow[:coffset])\n\n        # maybe create a mi on the columns\n        columns = self._maybe_make_multi_index_columns(columns, self.col_names)\n\n        return index, columns",
        "begin_line": 1562,
        "end_line": 1586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.ParserBase._do_date_conversions#1865",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.ParserBase",
        "signature": "pandas.io.parsers.ParserBase._do_date_conversions(self, names, data)",
        "snippet": "    def _do_date_conversions(self, names, data):\n        # returns data, columns\n\n        if self.parse_dates is not None:\n            data, names = _process_date_conversion(\n                data,\n                self._date_conv,\n                self.parse_dates,\n                self.index_col,\n                self.index_names,\n                names,\n                keep_date_col=self.keep_date_col,\n            )\n\n        return names, data",
        "begin_line": 1865,
        "end_line": 1879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.__init__#1887",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.__init__(self, src, **kwds)",
        "snippet": "    def __init__(self, src, **kwds):\n        self.kwds = kwds\n        kwds = kwds.copy()\n\n        ParserBase.__init__(self, kwds)\n\n        if kwds.get(\"compression\") is None and \"utf-16\" in (kwds.get(\"encoding\") or \"\"):\n            # if source is utf-16 plain text, convert source to utf-8\n            if isinstance(src, str):\n                src = open(src, \"rb\")\n                self.handles.append(src)\n            src = UTF8Recoder(src, kwds[\"encoding\"])\n            kwds[\"encoding\"] = \"utf-8\"\n\n        # #2442\n        kwds[\"allow_leading_cols\"] = self.index_col is not False\n\n        # GH20529, validate usecol arg before TextReader\n        self.usecols, self.usecols_dtype = _validate_usecols_arg(kwds[\"usecols\"])\n        kwds[\"usecols\"] = self.usecols\n\n        self._reader = parsers.TextReader(src, **kwds)\n        self.unnamed_cols = self._reader.unnamed_cols\n\n        passed_names = self.names is None\n\n        if self._reader.header is None:\n            self.names = None\n        else:\n            if len(self._reader.header) > 1:\n                # we have a multi index in the columns\n                (\n                    self.names,\n                    self.index_names,\n                    self.col_names,\n                    passed_names,\n                ) = self._extract_multi_indexer_columns(\n                    self._reader.header, self.index_names, self.col_names, passed_names\n                )\n            else:\n                self.names = list(self._reader.header[0])\n\n        if self.names is None:\n            if self.prefix:\n                self.names = [\n                    \"{prefix}{i}\".format(prefix=self.prefix, i=i)\n                    for i in range(self._reader.table_width)\n                ]\n            else:\n                self.names = list(range(self._reader.table_width))\n\n        # gh-9755\n        #\n        # need to set orig_names here first\n        # so that proper indexing can be done\n        # with _set_noconvert_columns\n        #\n        # once names has been filtered, we will\n        # then set orig_names again to names\n        self.orig_names = self.names[:]\n\n        if self.usecols:\n            usecols = _evaluate_usecols(self.usecols, self.orig_names)\n\n            # GH 14671\n            if self.usecols_dtype == \"string\" and not set(usecols).issubset(\n                self.orig_names\n            ):\n                _validate_usecols_names(usecols, self.orig_names)\n\n            if len(self.names) > len(usecols):\n                self.names = [\n                    n\n                    for i, n in enumerate(self.names)\n                    if (i in usecols or n in usecols)\n                ]\n\n            if len(self.names) < len(usecols):\n                _validate_usecols_names(usecols, self.names)\n\n        self._set_noconvert_columns()\n\n        self.orig_names = self.names\n\n        if not self._has_complex_date_col:\n            if self._reader.leading_cols == 0 and _is_index_col(self.index_col):\n\n                self._name_processed = True\n                (index_names, self.names, self.index_col) = _clean_index_names(\n                    self.names, self.index_col, self.unnamed_cols\n                )\n\n                if self.index_names is None:\n                    self.index_names = index_names\n\n            if self._reader.header is None and not passed_names:\n                self.index_names = [None] * len(self.index_names)\n\n        self._implicit_index = self._reader.leading_cols > 0",
        "begin_line": 1887,
        "end_line": 1985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.close#1987",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.close(self)",
        "snippet": "    def close(self):\n        for f in self.handles:\n            f.close()\n\n        # close additional handles opened by C parser (for compression)\n        try:\n            self._reader.close()\n        except ValueError:\n            pass",
        "begin_line": 1987,
        "end_line": 1995,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper._set_noconvert_columns#1997",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper._set_noconvert_columns(self)",
        "snippet": "    def _set_noconvert_columns(self):\n        \"\"\"\n        Set the columns that should not undergo dtype conversions.\n\n        Currently, any column that is involved with date parsing will not\n        undergo such conversions.\n        \"\"\"\n        names = self.orig_names\n        if self.usecols_dtype == \"integer\":\n            # A set of integers will be converted to a list in\n            # the correct order every single time.\n            usecols = list(self.usecols)\n            usecols.sort()\n        elif callable(self.usecols) or self.usecols_dtype not in (\"empty\", None):\n            # The names attribute should have the correct columns\n            # in the proper order for indexing with parse_dates.\n            usecols = self.names[:]\n        else:\n            # Usecols is empty.\n            usecols = None\n\n        def _set(x):\n            if usecols is not None and is_integer(x):\n                x = usecols[x]\n\n            if not is_integer(x):\n                x = names.index(x)\n\n            self._reader.set_noconvert(x)\n\n        if isinstance(self.parse_dates, list):\n            for val in self.parse_dates:\n                if isinstance(val, list):\n                    for k in val:\n                        _set(k)\n                else:\n                    _set(val)\n\n        elif isinstance(self.parse_dates, dict):\n            for val in self.parse_dates.values():\n                if isinstance(val, list):\n                    for k in val:\n                        _set(k)\n                else:\n                    _set(val)\n\n        elif self.parse_dates:\n            if isinstance(self.index_col, list):\n                for k in self.index_col:\n                    _set(k)\n            elif self.index_col is not None:\n                _set(self.index_col)",
        "begin_line": 1997,
        "end_line": 2048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper._set#2018",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper._set(x)",
        "snippet": "        def _set(x):\n            if usecols is not None and is_integer(x):\n                x = usecols[x]\n\n            if not is_integer(x):\n                x = names.index(x)\n\n            self._reader.set_noconvert(x)",
        "begin_line": 2018,
        "end_line": 2025,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.CParserWrapper.read#2053",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers.CParserWrapper",
        "signature": "pandas.io.parsers.CParserWrapper.read(self, nrows=None)",
        "snippet": "    def read(self, nrows=None):\n        try:\n            data = self._reader.read(nrows)\n        except StopIteration:\n            if self._first_chunk:\n                self._first_chunk = False\n                names = self._maybe_dedup_names(self.orig_names)\n                index, columns, col_dict = _get_empty_meta(\n                    names,\n                    self.index_col,\n                    self.index_names,\n                    dtype=self.kwds.get(\"dtype\"),\n                )\n                columns = self._maybe_make_multi_index_columns(columns, self.col_names)\n\n                if self.usecols is not None:\n                    columns = self._filter_usecols(columns)\n\n                col_dict = dict(\n                    filter(lambda item: item[0] in columns, col_dict.items())\n                )\n\n                return index, columns, col_dict\n\n            else:\n                raise\n\n        # Done with first read, next time raise StopIteration\n        self._first_chunk = False\n\n        names = self.names\n\n        if self._reader.leading_cols:\n            if self._has_complex_date_col:\n                raise NotImplementedError(\"file structure not yet supported\")\n\n            # implicit index, no index names\n            arrays = []\n\n            for i in range(self._reader.leading_cols):\n                if self.index_col is None:\n                    values = data.pop(i)\n                else:\n                    values = data.pop(self.index_col[i])\n\n                values = self._maybe_parse_dates(values, i, try_parse_dates=True)\n                arrays.append(values)\n\n            index = ensure_index_from_sequences(arrays)\n\n            if self.usecols is not None:\n                names = self._filter_usecols(names)\n\n            names = self._maybe_dedup_names(names)\n\n            # rename dict keys\n            data = sorted(data.items())\n            data = {k: v for k, (i, v) in zip(names, data)}\n\n            names, data = self._do_date_conversions(names, data)\n\n        else:\n            # rename dict keys\n            data = sorted(data.items())\n\n            # ugh, mutation\n            names = list(self.orig_names)\n            names = self._maybe_dedup_names(names)\n\n            if self.usecols is not None:\n                names = self._filter_usecols(names)\n\n            # columns as list\n            alldata = [x[1] for x in data]\n\n            data = {k: v for k, (i, v) in zip(names, data)}\n\n            names, data = self._do_date_conversions(names, data)\n            index, names = self._make_index(data, alldata, names)\n\n        # maybe create a mi on the columns\n        names = self._maybe_make_multi_index_columns(names, self.col_names)\n\n        return index, names, data",
        "begin_line": 2053,
        "end_line": 2136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.010526315789473684,
            "pseudo_dstar_susp": 0.05555555555555555,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.05555555555555555,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._make_date_converter#3258",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._make_date_converter(date_parser=None, dayfirst=False, infer_datetime_format=False, cache_dates=True)",
        "snippet": "def _make_date_converter(\n    date_parser=None, dayfirst=False, infer_datetime_format=False, cache_dates=True\n):\n    def converter(*date_cols):\n        if date_parser is None:\n            strs = parsing._concat_date_cols(date_cols)\n\n            try:\n                return tools.to_datetime(\n                    ensure_object(strs),\n                    utc=None,\n                    dayfirst=dayfirst,\n                    errors=\"ignore\",\n                    infer_datetime_format=infer_datetime_format,\n                    cache=cache_dates,\n                ).to_numpy()\n\n            except ValueError:\n                return tools.to_datetime(\n                    parsing.try_parse_dates(strs, dayfirst=dayfirst), cache=cache_dates\n                )\n        else:\n            try:\n                result = tools.to_datetime(\n                    date_parser(*date_cols), errors=\"ignore\", cache=cache_dates\n                )\n                if isinstance(result, datetime.datetime):\n                    raise Exception(\"scalar parser\")\n                return result\n            except Exception:\n                try:\n                    return tools.to_datetime(\n                        parsing.try_parse_dates(\n                            parsing._concat_date_cols(date_cols),\n                            parser=date_parser,\n                            dayfirst=dayfirst,\n                        ),\n                        errors=\"ignore\",\n                    )\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)\n\n    return converter",
        "begin_line": 3258,
        "end_line": 3300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers.converter#3261",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers.converter(*date_cols)",
        "snippet": "    def converter(*date_cols):\n        if date_parser is None:\n            strs = parsing._concat_date_cols(date_cols)\n\n            try:\n                return tools.to_datetime(\n                    ensure_object(strs),\n                    utc=None,\n                    dayfirst=dayfirst,\n                    errors=\"ignore\",\n                    infer_datetime_format=infer_datetime_format,\n                    cache=cache_dates,\n                ).to_numpy()\n\n            except ValueError:\n                return tools.to_datetime(\n                    parsing.try_parse_dates(strs, dayfirst=dayfirst), cache=cache_dates\n                )\n        else:\n            try:\n                result = tools.to_datetime(\n                    date_parser(*date_cols), errors=\"ignore\", cache=cache_dates\n                )\n                if isinstance(result, datetime.datetime):\n                    raise Exception(\"scalar parser\")\n                return result\n            except Exception:\n                try:\n                    return tools.to_datetime(\n                        parsing.try_parse_dates(\n                            parsing._concat_date_cols(date_cols),\n                            parser=date_parser,\n                            dayfirst=dayfirst,\n                        ),\n                        errors=\"ignore\",\n                    )\n                except Exception:\n                    return generic_parser(date_parser, *date_cols)",
        "begin_line": 3261,
        "end_line": 3298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._process_date_conversion#3303",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._process_date_conversion(data_dict, converter, parse_spec, index_col, index_names, columns, keep_date_col=False)",
        "snippet": "def _process_date_conversion(\n    data_dict,\n    converter,\n    parse_spec,\n    index_col,\n    index_names,\n    columns,\n    keep_date_col=False,\n):\n    def _isindex(colspec):\n        return (isinstance(index_col, list) and colspec in index_col) or (\n            isinstance(index_names, list) and colspec in index_names\n        )\n\n    new_cols = []\n    new_data = {}\n\n    orig_names = columns\n    columns = list(columns)\n\n    date_cols = set()\n\n    if parse_spec is None or isinstance(parse_spec, bool):\n        return data_dict, columns\n\n    if isinstance(parse_spec, list):\n        # list of column lists\n        for colspec in parse_spec:\n            if is_scalar(colspec):\n                if isinstance(colspec, int) and colspec not in data_dict:\n                    colspec = orig_names[colspec]\n                if _isindex(colspec):\n                    continue\n                data_dict[colspec] = converter(data_dict[colspec])\n            else:\n                new_name, col, old_names = _try_convert_dates(\n                    converter, colspec, data_dict, orig_names\n                )\n                if new_name in data_dict:\n                    raise ValueError(\n                        \"New date column already in dict {name}\".format(name=new_name)\n                    )\n                new_data[new_name] = col\n                new_cols.append(new_name)\n                date_cols.update(old_names)\n\n    elif isinstance(parse_spec, dict):\n        # dict of new name to column list\n        for new_name, colspec in parse_spec.items():\n            if new_name in data_dict:\n                raise ValueError(\n                    \"Date column {name} already in dict\".format(name=new_name)\n                )\n\n            _, col, old_names = _try_convert_dates(\n                converter, colspec, data_dict, orig_names\n            )\n\n            new_data[new_name] = col\n            new_cols.append(new_name)\n            date_cols.update(old_names)\n\n    data_dict.update(new_data)\n    new_cols.extend(columns)\n\n    if not keep_date_col:\n        for c in list(date_cols):\n            data_dict.pop(c)\n            new_cols.remove(c)\n\n    return data_dict, new_cols",
        "begin_line": 3303,
        "end_line": 3373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._isindex#3312",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._isindex(colspec)",
        "snippet": "    def _isindex(colspec):\n        return (isinstance(index_col, list) and colspec in index_col) or (\n            isinstance(index_names, list) and colspec in index_names\n        )",
        "begin_line": 3312,
        "end_line": 3315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.parsers._clean_na_values#3395",
        "src_path": "pandas/io/parsers.py",
        "class_name": "pandas.io.parsers",
        "signature": "pandas.io.parsers._clean_na_values(na_values, keep_default_na=True)",
        "snippet": "def _clean_na_values(na_values, keep_default_na=True):\n\n    if na_values is None:\n        if keep_default_na:\n            na_values = _NA_VALUES\n        else:\n            na_values = set()\n        na_fvalues = set()\n    elif isinstance(na_values, dict):\n        old_na_values = na_values.copy()\n        na_values = {}  # Prevent aliasing.\n\n        # Convert the values in the na_values dictionary\n        # into array-likes for further use. This is also\n        # where we append the default NaN values, provided\n        # that `keep_default_na=True`.\n        for k, v in old_na_values.items():\n            if not is_list_like(v):\n                v = [v]\n\n            if keep_default_na:\n                v = set(v) | _NA_VALUES\n\n            na_values[k] = v\n        na_fvalues = {k: _floatify_na_values(v) for k, v in na_values.items()}\n    else:\n        if not is_list_like(na_values):\n            na_values = [na_values]\n        na_values = _stringify_na_values(na_values)\n        if keep_default_na:\n            na_values = na_values | _NA_VALUES\n\n        na_fvalues = _floatify_na_values(na_values)\n\n    return na_values, na_fvalues",
        "begin_line": 3395,
        "end_line": 3429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.union#25",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.union(self, other)",
        "snippet": "    def union(self, other) -> \"FrozenList\":\n        \"\"\"\n        Returns a FrozenList with other concatenated to the end of self.\n\n        Parameters\n        ----------\n        other : array-like\n            The array-like whose elements we are concatenating.\n\n        Returns\n        -------\n        diff : FrozenList\n            The collection difference between self and other.\n        \"\"\"\n        if isinstance(other, tuple):\n            other = list(other)\n        return type(self)(super().__add__(other))",
        "begin_line": 25,
        "end_line": 41,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#64",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.563152321887763e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__radd__#69",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__radd__(self, other)",
        "snippet": "    def __radd__(self, other):\n        if isinstance(other, tuple):\n            other = list(other)\n        return type(self)(other + list(self))",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#74",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0143140674806036e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__reduce__#86",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__reduce__(self)",
        "snippet": "    def __reduce__(self):\n        return type(self), (list(self),)",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.923769300006924e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.get_group_index#21",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_group_index(labels, shape, sort: bool, xnull: bool)",
        "snippet": "def get_group_index(labels, shape, sort: bool, xnull: bool):\n    \"\"\"\n    For the particular label_list, gets the offsets into the hypothetical list\n    representing the totally ordered cartesian product of all possible label\n    combinations, *as long as* this space fits within int64 bounds;\n    otherwise, though group indices identify unique combinations of\n    labels, they cannot be deconstructed.\n    - If `sort`, rank of returned ids preserve lexical ranks of labels.\n      i.e. returned id's can be used to do lexical sort on labels;\n    - If `xnull` nulls (-1 labels) are passed through.\n\n    Parameters\n    ----------\n    labels: sequence of arrays\n        Integers identifying levels at each location\n    shape: sequence of ints same length as labels\n        Number of unique levels at each location\n    sort: boolean\n        If the ranks of returned ids should match lexical ranks of labels\n    xnull: boolean\n        If true nulls are excluded. i.e. -1 values in the labels are\n        passed through\n    Returns\n    -------\n    An array of type int64 where two elements are equal if their corresponding\n    labels are equal at all location.\n    \"\"\"\n\n    def _int64_cut_off(shape) -> int:\n        acc = 1\n        for i, mul in enumerate(shape):\n            acc *= int(mul)\n            if not acc < _INT64_MAX:\n                return i\n        return len(shape)\n\n    def maybe_lift(lab, size):\n        # promote nan values (assigned -1 label in lab array)\n        # so that all output values are non-negative\n        return (lab + 1, size + 1) if (lab == -1).any() else (lab, size)\n\n    labels = map(ensure_int64, labels)\n    if not xnull:\n        labels, shape = map(list, zip(*map(maybe_lift, labels, shape)))\n\n    labels = list(labels)\n    shape = list(shape)\n\n    # Iteratively process all the labels in chunks sized so less\n    # than _INT64_MAX unique int ids will be required for each chunk\n    while True:\n        # how many levels can be done without overflow:\n        nlev = _int64_cut_off(shape)\n\n        # compute flat ids for the first `nlev` levels\n        stride = np.prod(shape[1:nlev], dtype=\"i8\")\n        out = stride * labels[0].astype(\"i8\", subok=False, copy=False)\n\n        for i in range(1, nlev):\n            if shape[i] == 0:\n                stride = 0\n            else:\n                stride //= shape[i]\n            out += labels[i] * stride\n\n        if xnull:  # exclude nulls\n            mask = labels[0] == -1\n            for lab in labels[1:nlev]:\n                mask |= lab == -1\n            out[mask] = -1\n\n        if nlev == len(shape):  # all levels done!\n            break\n\n        # compress what has been done so far in order to avoid overflow\n        # to retain lexical ranks, obs_ids should be sorted\n        comp_ids, obs_ids = compress_group_index(out, sort=sort)\n\n        labels = [comp_ids] + labels[nlev:]\n        shape = [len(obs_ids)] + shape[nlev:]\n\n    return out",
        "begin_line": 21,
        "end_line": 102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009057971014492754,
            "pseudo_dstar_susp": 0.0005773672055427252,
            "pseudo_tarantula_susp": 0.000925925925925926,
            "pseudo_op2_susp": 0.0005773672055427252,
            "pseudo_barinel_susp": 0.000925925925925926
        }
    },
    {
        "name": "pandas.core.sorting._int64_cut_off#49",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting._int64_cut_off(shape)",
        "snippet": "    def _int64_cut_off(shape) -> int:\n        acc = 1\n        for i, mul in enumerate(shape):\n            acc *= int(mul)\n            if not acc < _INT64_MAX:\n                return i\n        return len(shape)",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011173184357541898,
            "pseudo_dstar_susp": 0.005714285714285714,
            "pseudo_tarantula_susp": 0.0009107468123861566,
            "pseudo_op2_susp": 0.005714285714285714,
            "pseudo_barinel_susp": 0.0009107468123861566
        }
    },
    {
        "name": "pandas.core.sorting.maybe_lift#57",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.maybe_lift(lab, size)",
        "snippet": "    def maybe_lift(lab, size):\n        # promote nan values (assigned -1 label in lab array)\n        # so that all output values are non-negative\n        return (lab + 1, size + 1) if (lab == -1).any() else (lab, size)",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011185682326621924,
            "pseudo_dstar_susp": 0.005747126436781609,
            "pseudo_tarantula_susp": 0.0009208103130755065,
            "pseudo_op2_susp": 0.005747126436781609,
            "pseudo_barinel_susp": 0.0009208103130755065
        }
    },
    {
        "name": "pandas.core.sorting.get_compressed_ids#105",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_compressed_ids(labels, sizes)",
        "snippet": "def get_compressed_ids(labels, sizes):\n    \"\"\"\n\n    Group_index is offsets into cartesian product of all possible labels. This\n    space can be huge, so this function compresses it, by computing offsets\n    (comp_ids) into the list of unique labels (obs_group_ids).\n\n    Parameters\n    ----------\n    labels : list of label arrays\n    sizes : list of size of the levels\n\n    Returns\n    -------\n    tuple of (comp_ids, obs_group_ids)\n\n    \"\"\"\n    ids = get_group_index(labels, sizes, sort=True, xnull=False)\n    return compress_group_index(ids, sort=True)",
        "begin_line": 105,
        "end_line": 123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.is_int64_overflow_possible#126",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.is_int64_overflow_possible(shape)",
        "snippet": "def is_int64_overflow_possible(shape) -> bool:\n    the_prod = 1\n    for x in shape:\n        the_prod *= int(x)\n\n    return the_prod >= _INT64_MAX",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.323910706380825e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.decons_group_index#134",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.decons_group_index(comp_labels, shape)",
        "snippet": "def decons_group_index(comp_labels, shape):\n    # reconstruct labels\n    if is_int64_overflow_possible(shape):\n        # at some point group indices are factorized,\n        # and may not be deconstructed here! wrong path!\n        raise ValueError(\"cannot deconstruct factorized group indices!\")\n\n    label_list = []\n    factor = 1\n    y = 0\n    x = comp_labels\n    for i in reversed(range(len(shape))):\n        labels = (x - y) % (factor * shape[i]) // factor\n        np.putmask(labels, comp_labels < 0, -1)\n        label_list.append(labels)\n        y = labels * factor\n        factor *= shape[i]\n    return label_list[::-1]",
        "begin_line": 134,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.638835841417768e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.decons_obs_group_ids#154",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.decons_obs_group_ids(comp_ids, obs_ids, shape, labels, xnull: bool)",
        "snippet": "def decons_obs_group_ids(comp_ids, obs_ids, shape, labels, xnull: bool):\n    \"\"\"\n    reconstruct labels from observed group ids\n\n    Parameters\n    ----------\n    xnull: boolean,\n        if nulls are excluded; i.e. -1 labels are passed through\n    \"\"\"\n\n    if not xnull:\n        lift = np.fromiter(((a == -1).any() for a in labels), dtype=\"i8\")\n        shape = np.asarray(shape, dtype=\"i8\") + lift\n\n    if not is_int64_overflow_possible(shape):\n        # obs ids are deconstructable! take the fast route!\n        out = decons_group_index(obs_ids, shape)\n        return out if xnull or not lift.any() else [x - y for x, y in zip(out, lift)]\n\n    i = unique_label_indices(comp_ids)\n    i8copy = lambda a: a.astype(\"i8\", subok=False, copy=True)\n    return [i8copy(lab[i]) for lab in labels]",
        "begin_line": 154,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.indexer_from_factorized#178",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.indexer_from_factorized(labels, shape, compress: bool=True)",
        "snippet": "def indexer_from_factorized(labels, shape, compress: bool = True):\n    ids = get_group_index(labels, shape, sort=True, xnull=False)\n\n    if not compress:\n        ngroups = (ids.size and ids.max()) + 1\n    else:\n        ids, obs = compress_group_index(ids, sort=True)\n        ngroups = len(obs)\n\n    return get_group_index_sorter(ids, ngroups)",
        "begin_line": 178,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.lexsort_indexer#190",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.lexsort_indexer(keys, orders=None, na_position='last')",
        "snippet": "def lexsort_indexer(keys, orders=None, na_position=\"last\"):\n    from pandas.core.arrays import Categorical\n\n    labels = []\n    shape = []\n    if isinstance(orders, bool):\n        orders = [orders] * len(keys)\n    elif orders is None:\n        orders = [True] * len(keys)\n\n    for key, order in zip(keys, orders):\n\n        # we are already a Categorical\n        if is_categorical_dtype(key):\n            cat = key\n\n        # create the Categorical\n        else:\n            cat = Categorical(key, ordered=True)\n\n        if na_position not in [\"last\", \"first\"]:\n            raise ValueError(\"invalid na_position: {!r}\".format(na_position))\n\n        n = len(cat.categories)\n        codes = cat.codes.copy()\n\n        mask = cat.codes == -1\n        if order:  # ascending\n            if na_position == \"last\":\n                codes = np.where(mask, n, codes)\n            elif na_position == \"first\":\n                codes += 1\n        else:  # not order means descending\n            if na_position == \"last\":\n                codes = np.where(mask, n, n - codes - 1)\n            elif na_position == \"first\":\n                codes = np.where(mask, 0, n - codes)\n        if mask.any():\n            n += 1\n\n        shape.append(n)\n        labels.append(codes)\n\n    return indexer_from_factorized(labels, shape)",
        "begin_line": 190,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.nargsort#236",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.nargsort(items, kind='quicksort', ascending: bool=True, na_position='last')",
        "snippet": "def nargsort(items, kind=\"quicksort\", ascending: bool = True, na_position=\"last\"):\n    \"\"\"\n    This is intended to be a drop-in replacement for np.argsort which\n    handles NaNs. It adds ascending and na_position parameters.\n    GH #6399, #5231\n    \"\"\"\n    items = extract_array(items)\n    mask = np.asarray(isna(items))\n\n    if is_extension_array_dtype(items):\n        items = items._values_for_argsort()\n    else:\n        items = np.asanyarray(items)\n\n    idx = np.arange(len(items))\n    non_nans = items[~mask]\n    non_nan_idx = idx[~mask]\n    nan_idx = np.nonzero(mask)[0]\n    if not ascending:\n        non_nans = non_nans[::-1]\n        non_nan_idx = non_nan_idx[::-1]\n    indexer = non_nan_idx[non_nans.argsort(kind=kind)]\n    if not ascending:\n        indexer = indexer[::-1]\n    # Finally, place the NaNs at the end or the beginning according to\n    # na_position\n    if na_position == \"last\":\n        indexer = np.concatenate([indexer, nan_idx])\n    elif na_position == \"first\":\n        indexer = np.concatenate([nan_idx, indexer])\n    else:\n        raise ValueError(\"invalid na_position: {!r}\".format(na_position))\n    return indexer",
        "begin_line": 236,
        "end_line": 268,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper.__init__#276",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper.__init__(self, comp_ids, ngroups, levels, labels)",
        "snippet": "    def __init__(self, comp_ids, ngroups, levels, labels):\n        self.levels = levels\n        self.labels = labels\n        self.comp_ids = comp_ids.astype(np.int64)\n\n        self.k = len(labels)\n        self.tables = [hashtable.Int64HashTable(ngroups) for _ in range(self.k)]\n\n        self._populate_tables()",
        "begin_line": 276,
        "end_line": 284,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper._populate_tables#286",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper._populate_tables(self)",
        "snippet": "    def _populate_tables(self):\n        for labs, table in zip(self.labels, self.tables):\n            table.map(self.comp_ids, labs.astype(np.int64))",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting._KeyMapper.get_key#290",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting._KeyMapper",
        "signature": "pandas.core.sorting._KeyMapper.get_key(self, comp_id)",
        "snippet": "    def get_key(self, comp_id):\n        return tuple(\n            level[table.get_item(comp_id)]\n            for table, level in zip(self.tables, self.levels)\n        )",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.get_flattened_iterator#297",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_flattened_iterator(comp_ids, ngroups, levels, labels)",
        "snippet": "def get_flattened_iterator(comp_ids, ngroups, levels, labels):\n    # provide \"flattened\" iterator for multi-group setting\n    mapper = _KeyMapper(comp_ids, ngroups, levels, labels)\n    return [mapper.get_key(i) for i in range(ngroups)]",
        "begin_line": 297,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.get_indexer_dict#303",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_indexer_dict(label_list, keys)",
        "snippet": "def get_indexer_dict(label_list, keys):\n    \"\"\" return a dict of {labels} -> {indexers} \"\"\"\n    shape = [len(x) for x in keys]\n\n    group_index = get_group_index(label_list, shape, sort=True, xnull=True)\n    ngroups = (\n        ((group_index.size and group_index.max()) + 1)\n        if is_int64_overflow_possible(shape)\n        else np.prod(shape, dtype=\"i8\")\n    )\n\n    sorter = get_group_index_sorter(group_index, ngroups)\n\n    sorted_labels = [lab.take(sorter) for lab in label_list]\n    group_index = group_index.take(sorter)\n\n    return lib.indices_fast(sorter, group_index, keys, sorted_labels)",
        "begin_line": 303,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.get_group_index_sorter#326",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_group_index_sorter(group_index, ngroups: int)",
        "snippet": "def get_group_index_sorter(group_index, ngroups: int):\n    \"\"\"\n    algos.groupsort_indexer implements `counting sort` and it is at least\n    O(ngroups), where\n        ngroups = prod(shape)\n        shape = map(len, keys)\n    that is, linear in the number of combinations (cartesian product) of unique\n    values of groupby keys. This can be huge when doing multi-key groupby.\n    np.argsort(kind='mergesort') is O(count x log(count)) where count is the\n    length of the data-frame;\n    Both algorithms are `stable` sort and that is necessary for correctness of\n    groupby operations. e.g. consider:\n        df.groupby(key)[col].transform('first')\n    \"\"\"\n    count = len(group_index)\n    alpha = 0.0  # taking complexities literally; there may be\n    beta = 1.0  # some room for fine-tuning these parameters\n    do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))\n    if do_groupsort:\n        sorter, _ = algos.groupsort_indexer(ensure_int64(group_index), ngroups)\n        return ensure_platform_int(sorter)\n    else:\n        return group_index.argsort(kind=\"mergesort\")",
        "begin_line": 326,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.34306691139663e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting.compress_group_index#351",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.compress_group_index(group_index, sort: bool=True)",
        "snippet": "def compress_group_index(group_index, sort: bool = True):\n    \"\"\"\n    Group_index is offsets into cartesian product of all possible labels. This\n    space can be huge, so this function compresses it, by computing offsets\n    (comp_ids) into the list of unique labels (obs_group_ids).\n    \"\"\"\n\n    size_hint = min(len(group_index), hashtable._SIZE_HINT_LIMIT)\n    table = hashtable.Int64HashTable(size_hint)\n\n    group_index = ensure_int64(group_index)\n\n    # note, group labels come out ascending (ie, 1,2,3 etc)\n    comp_ids, obs_group_ids = table.get_labels_groupby(group_index)\n\n    if sort and len(obs_group_ids) > 0:\n        obs_group_ids, comp_ids = _reorder_by_uniques(obs_group_ids, comp_ids)\n\n    return comp_ids, obs_group_ids",
        "begin_line": 351,
        "end_line": 369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.891323823306458e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.sorting._reorder_by_uniques#372",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting._reorder_by_uniques(uniques, labels)",
        "snippet": "def _reorder_by_uniques(uniques, labels):\n    # sorter is index where elements ought to go\n    sorter = uniques.argsort()\n\n    # reverse_indexer is where elements came from\n    reverse_indexer = np.empty(len(sorter), dtype=np.int64)\n    reverse_indexer.put(sorter, np.arange(len(sorter)))\n\n    mask = labels < 0\n\n    # move labels to right locations (ie, unsort ascending labels)\n    labels = algorithms.take_nd(reverse_indexer, labels, allow_fill=False)\n    np.putmask(labels, mask, -1)\n\n    # sort observed ids\n    uniques = algorithms.take_nd(uniques, sorter, allow_fill=False)\n\n    return uniques, labels",
        "begin_line": 372,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.891323823306458e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.__init__#230",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.__init__(self, series: 'Series', buf: Optional[IO[str]]=None, length: bool=True, header: bool=True, index: bool=True, na_rep: str='NaN', name: bool=False, float_format: Optional[str]=None, dtype: bool=True, max_rows: Optional[int]=None, min_rows: Optional[int]=None)",
        "snippet": "    def __init__(\n        self,\n        series: \"Series\",\n        buf: Optional[IO[str]] = None,\n        length: bool = True,\n        header: bool = True,\n        index: bool = True,\n        na_rep: str = \"NaN\",\n        name: bool = False,\n        float_format: Optional[str] = None,\n        dtype: bool = True,\n        max_rows: Optional[int] = None,\n        min_rows: Optional[int] = None,\n    ):\n        self.series = series\n        self.buf = buf if buf is not None else StringIO()\n        self.name = name\n        self.na_rep = na_rep\n        self.header = header\n        self.length = length\n        self.index = index\n        self.max_rows = max_rows\n        self.min_rows = min_rows\n\n        if float_format is None:\n            float_format = get_option(\"display.float_format\")\n        self.float_format = float_format\n        self.dtype = dtype\n        self.adj = _get_adjustment()\n\n        self._chk_truncate()",
        "begin_line": 230,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._chk_truncate#262",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._chk_truncate(self)",
        "snippet": "    def _chk_truncate(self) -> None:\n        from pandas.core.reshape.concat import concat\n\n        self.tr_row_num: Optional[int]\n\n        min_rows = self.min_rows\n        max_rows = self.max_rows\n        # truncation determined by max_rows, actual truncated number of rows\n        # used below by min_rows\n        truncate_v = max_rows and (len(self.series) > max_rows)\n        series = self.series\n        if truncate_v:\n            max_rows = cast(int, max_rows)\n            if min_rows:\n                # if min_rows is set (not None or 0), set max_rows to minimum\n                # of both\n                max_rows = min(min_rows, max_rows)\n            if max_rows == 1:\n                row_num = max_rows\n                series = series.iloc[:max_rows]\n            else:\n                row_num = max_rows // 2\n                series = concat((series.iloc[:row_num], series.iloc[-row_num:]))\n            self.tr_row_num = row_num\n        else:\n            self.tr_row_num = None\n        self.tr_series = series\n        self.truncate_v = truncate_v",
        "begin_line": 262,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_footer#291",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_footer(self)",
        "snippet": "    def _get_footer(self) -> str:\n        name = self.series.name\n        footer = \"\"\n\n        if getattr(self.series.index, \"freq\", None) is not None:\n            footer += \"Freq: {freq}\".format(freq=self.series.index.freqstr)\n\n        if self.name is not False and name is not None:\n            if footer:\n                footer += \", \"\n\n            series_name = pprint_thing(name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            footer += (\n                (\"Name: {sname}\".format(sname=series_name)) if name is not None else \"\"\n            )\n\n        if self.length is True or (self.length == \"truncate\" and self.truncate_v):\n            if footer:\n                footer += \", \"\n            footer += \"Length: {length}\".format(length=len(self.series))\n\n        if self.dtype is not False and self.dtype is not None:\n            name = getattr(self.tr_series.dtype, \"name\", None)\n            if name:\n                if footer:\n                    footer += \", \"\n                footer += \"dtype: {typ}\".format(typ=pprint_thing(name))\n\n        # level infos are added to the end and in a new line, like it is done\n        # for Categoricals\n        if is_categorical_dtype(self.tr_series.dtype):\n            level_info = self.tr_series._values._repr_categories_info()\n            if footer:\n                footer += \"\\n\"\n            footer += level_info\n\n        return str(footer)",
        "begin_line": 291,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_index#329",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_index(self)",
        "snippet": "    def _get_formatted_index(self) -> Tuple[List[str], bool]:\n        index = self.tr_series.index\n        is_multi = isinstance(index, ABCMultiIndex)\n\n        if is_multi:\n            have_header = any(name for name in index.names)\n            fmt_index = index.format(names=True)\n        else:\n            have_header = index.name is not None\n            fmt_index = index.format(name=True)\n        return fmt_index, have_header",
        "begin_line": 329,
        "end_line": 339,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter._get_formatted_values#341",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter._get_formatted_values(self)",
        "snippet": "    def _get_formatted_values(self) -> List[str]:\n        return format_array(\n            self.tr_series._values,\n            None,\n            float_format=self.float_format,\n            na_rep=self.na_rep,\n        )",
        "begin_line": 341,
        "end_line": 347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.SeriesFormatter.to_string#349",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.SeriesFormatter",
        "signature": "pandas.io.formats.format.SeriesFormatter.to_string(self)",
        "snippet": "    def to_string(self) -> str:\n        series = self.tr_series\n        footer = self._get_footer()\n\n        if len(series) == 0:\n            return \"{name}([], {footer})\".format(\n                name=type(self.series).__name__, footer=footer\n            )\n\n        fmt_index, have_header = self._get_formatted_index()\n        fmt_values = self._get_formatted_values()\n\n        if self.truncate_v:\n            n_header_rows = 0\n            row_num = self.tr_row_num\n            row_num = cast(int, row_num)\n            width = self.adj.len(fmt_values[row_num - 1])\n            if width > 3:\n                dot_str = \"...\"\n            else:\n                dot_str = \"..\"\n            # Series uses mode=center because it has single value columns\n            # DataFrame uses mode=left\n            dot_str = self.adj.justify([dot_str], width, mode=\"center\")[0]\n            fmt_values.insert(row_num + n_header_rows, dot_str)\n            fmt_index.insert(row_num + 1, \"\")\n\n        if self.index:\n            result = self.adj.adjoin(3, *[fmt_index[1:], fmt_values])\n        else:\n            result = self.adj.adjoin(3, fmt_values)\n\n        if self.header and have_header:\n            result = fmt_index[0] + \"\\n\" + result\n\n        if footer:\n            result += \"\\n\" + footer\n\n        return str(\"\".join(result))",
        "begin_line": 349,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#391",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 391,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#394",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 394,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.304268393954493e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.justify#397",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.justify(self, texts: Any, max_len: int, mode: str='right')",
        "snippet": "    def justify(self, texts: Any, max_len: int, mode: str = \"right\") -> List[str]:\n        return justify(texts, max_len, mode=mode)",
        "begin_line": 397,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.adjoin#400",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.adjoin(self, space: int, *lists, **kwargs)",
        "snippet": "    def adjoin(self, space: int, *lists, **kwargs) -> str:\n        return adjoin(space, *lists, strlen=self.len, justfunc=self.justify, **kwargs)",
        "begin_line": 400,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#443",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 443,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.format_array#1093",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.format_array(values: Any, formatter: Optional[Callable], float_format: Optional[float_format_type]=None, na_rep: str='NaN', digits: Optional[int]=None, space: Optional[Union[str, int]]=None, justify: str='right', decimal: str='.', leading_space: Optional[bool]=None)",
        "snippet": "def format_array(\n    values: Any,\n    formatter: Optional[Callable],\n    float_format: Optional[float_format_type] = None,\n    na_rep: str = \"NaN\",\n    digits: Optional[int] = None,\n    space: Optional[Union[str, int]] = None,\n    justify: str = \"right\",\n    decimal: str = \".\",\n    leading_space: Optional[bool] = None,\n) -> List[str]:\n    \"\"\"\n    Format an array for printing.\n\n    Parameters\n    ----------\n    values\n    formatter\n    float_format\n    na_rep\n    digits\n    space\n    justify\n    decimal\n    leading_space : bool, optional\n        Whether the array should be formatted with a leading space.\n        When an array as a column of a Series or DataFrame, we do want\n        the leading space to pad between columns.\n\n        When formatting an Index subclass\n        (e.g. IntervalIndex._format_native_types), we don't want the\n        leading space since it should be left-aligned.\n\n    Returns\n    -------\n    List[str]\n    \"\"\"\n\n    fmt_klass: Type[GenericArrayFormatter]\n    if is_datetime64_dtype(values.dtype):\n        fmt_klass = Datetime64Formatter\n    elif is_datetime64tz_dtype(values):\n        fmt_klass = Datetime64TZFormatter\n    elif is_timedelta64_dtype(values.dtype):\n        fmt_klass = Timedelta64Formatter\n    elif is_extension_array_dtype(values.dtype):\n        fmt_klass = ExtensionArrayFormatter\n    elif is_float_dtype(values.dtype) or is_complex_dtype(values.dtype):\n        fmt_klass = FloatArrayFormatter\n    elif is_integer_dtype(values.dtype):\n        fmt_klass = IntArrayFormatter\n    else:\n        fmt_klass = GenericArrayFormatter\n\n    if space is None:\n        space = get_option(\"display.column_space\")\n\n    if float_format is None:\n        float_format = get_option(\"display.float_format\")\n\n    if digits is None:\n        digits = get_option(\"display.precision\")\n\n    fmt_obj = fmt_klass(\n        values,\n        digits=digits,\n        na_rep=na_rep,\n        float_format=float_format,\n        formatter=formatter,\n        space=space,\n        justify=justify,\n        decimal=decimal,\n        leading_space=leading_space,\n    )\n\n    return fmt_obj.get_result()",
        "begin_line": 1093,
        "end_line": 1168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.__init__#1172",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.__init__(self, values: Any, digits: int=7, formatter: Optional[Callable]=None, na_rep: str='NaN', space: Union[str, int]=12, float_format: Optional[float_format_type]=None, justify: str='right', decimal: str='.', quoting: Optional[int]=None, fixed_width: bool=True, leading_space: Optional[bool]=None)",
        "snippet": "    def __init__(\n        self,\n        values: Any,\n        digits: int = 7,\n        formatter: Optional[Callable] = None,\n        na_rep: str = \"NaN\",\n        space: Union[str, int] = 12,\n        float_format: Optional[float_format_type] = None,\n        justify: str = \"right\",\n        decimal: str = \".\",\n        quoting: Optional[int] = None,\n        fixed_width: bool = True,\n        leading_space: Optional[bool] = None,\n    ):\n        self.values = values\n        self.digits = digits\n        self.na_rep = na_rep\n        self.space = space\n        self.formatter = formatter\n        self.float_format = float_format\n        self.justify = justify\n        self.decimal = decimal\n        self.quoting = quoting\n        self.fixed_width = fixed_width\n        self.leading_space = leading_space",
        "begin_line": 1172,
        "end_line": 1196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter.get_result#1198",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter.get_result(self)",
        "snippet": "    def get_result(self) -> List[str]:\n        fmt_values = self._format_strings()\n        return _make_fixed_width(fmt_values, self.justify)",
        "begin_line": 1198,
        "end_line": 1200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format_strings#1202",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        if self.float_format is None:\n            float_format = get_option(\"display.float_format\")\n            if float_format is None:\n                fmt_str = \"{{x: .{prec:d}g}}\".format(\n                    prec=get_option(\"display.precision\")\n                )\n                float_format = lambda x: fmt_str.format(x=x)\n        else:\n            float_format = self.float_format\n\n        formatter = (\n            self.formatter\n            if self.formatter is not None\n            else (lambda x: pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")))\n        )\n\n        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return \"{x}\".format(x=x)\n            else:\n                # object dtype\n                return \"{x}\".format(x=formatter(x))\n\n        vals = self.values\n        if isinstance(vals, Index):\n            vals = vals._values\n        elif isinstance(vals, ABCSparseArray):\n            vals = vals.values\n\n        is_float_type = lib.map_infer(vals, is_float) & notna(vals)\n        leading_space = self.leading_space\n        if leading_space is None:\n            leading_space = is_float_type.any()\n\n        fmt_values = []\n        for i, v in enumerate(vals):\n            if not is_float_type[i] and leading_space:\n                fmt_values.append(\" {v}\".format(v=_format(v)))\n            elif is_float_type[i]:\n                fmt_values.append(float_format(v))\n            else:\n                if leading_space is False:\n                    # False specifically, so that the default is\n                    # to include a space if we get here.\n                    tpl = \"{v}\"\n                else:\n                    tpl = \" {v}\"\n                fmt_values.append(tpl.format(v=_format(v)))\n\n        return fmt_values",
        "begin_line": 1202,
        "end_line": 1264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.842514811212309e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.GenericArrayFormatter._format#1219",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.GenericArrayFormatter",
        "signature": "pandas.io.formats.format.GenericArrayFormatter._format(x)",
        "snippet": "        def _format(x):\n            if self.na_rep is not None and is_scalar(x) and isna(x):\n                try:\n                    # try block for np.isnat specifically\n                    # determine na_rep if x is None or NaT-like\n                    if x is None:\n                        return \"None\"\n                    elif x is NaT or np.isnat(x):\n                        return \"NaT\"\n                except (TypeError, ValueError):\n                    # np.isnat only handles datetime or timedelta objects\n                    pass\n                return self.na_rep\n            elif isinstance(x, PandasObject):\n                return \"{x}\".format(x=x)\n            else:\n                # object dtype\n                return \"{x}\".format(x=formatter(x))",
        "begin_line": 1219,
        "end_line": 1236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.842514811212309e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.IntArrayFormatter._format_strings#1434",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.IntArrayFormatter",
        "signature": "pandas.io.formats.format.IntArrayFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        formatter = self.formatter or (lambda x: \"{x: d}\".format(x=x))\n        fmt_values = [formatter(x) for x in self.values]\n        return fmt_values",
        "begin_line": 1434,
        "end_line": 1437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.Datetime64Formatter.__init__#1441",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.Datetime64Formatter",
        "signature": "pandas.io.formats.format.Datetime64Formatter.__init__(self, values: Union[np.ndarray, 'Series', DatetimeIndex, DatetimeArray], nat_rep: str='NaT', date_format: None=None, **kwargs)",
        "snippet": "    def __init__(\n        self,\n        values: Union[np.ndarray, \"Series\", DatetimeIndex, DatetimeArray],\n        nat_rep: str = \"NaT\",\n        date_format: None = None,\n        **kwargs,\n    ):\n        super().__init__(values, **kwargs)\n        self.nat_rep = nat_rep\n        self.date_format = date_format",
        "begin_line": 1441,
        "end_line": 1450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format._is_dates_only#1568",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._is_dates_only(values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex])",
        "snippet": "def _is_dates_only(\n    values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex]\n) -> bool:\n    # return a boolean if we are only dates (and don't have a timezone)\n    assert values.ndim == 1\n\n    values = DatetimeIndex(values)\n    if values.tz is not None:\n        return False\n\n    values_int = values.asi8\n    consider_values = values_int != iNaT\n    one_day_nanos = 86400 * 1e9\n    even_days = (\n        np.logical_and(consider_values, values_int % int(one_day_nanos) != 0).sum() == 0\n    )\n    if even_days:\n        return True\n    return False",
        "begin_line": 1568,
        "end_line": 1586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format._format_datetime64#1589",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._format_datetime64(x: Union[NaTType, Timestamp], tz: Optional[tzinfo]=None, nat_rep: str='NaT')",
        "snippet": "def _format_datetime64(\n    x: Union[NaTType, Timestamp], tz: Optional[tzinfo] = None, nat_rep: str = \"NaT\"\n) -> str:\n    if x is None or (is_scalar(x) and isna(x)):\n        return nat_rep\n\n    if tz is not None or not isinstance(x, Timestamp):\n        if getattr(x, \"tzinfo\", None) is not None:\n            x = Timestamp(x).tz_convert(tz)\n        else:\n            x = Timestamp(x).tz_localize(tz)\n\n    return str(x)",
        "begin_line": 1589,
        "end_line": 1601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format._get_format_datetime64#1619",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_format_datetime64(is_dates_only: bool, nat_rep: str='NaT', date_format: None=None)",
        "snippet": "def _get_format_datetime64(\n    is_dates_only: bool, nat_rep: str = \"NaT\", date_format: None = None\n) -> Callable:\n\n    if is_dates_only:\n        return lambda x, tz=None: _format_datetime64_dateonly(\n            x, nat_rep=nat_rep, date_format=date_format\n        )\n    else:\n        return lambda x, tz=None: _format_datetime64(x, tz=tz, nat_rep=nat_rep)",
        "begin_line": 1619,
        "end_line": 1628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.Datetime64TZFormatter._format_strings#1648",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.Datetime64TZFormatter",
        "signature": "pandas.io.formats.format.Datetime64TZFormatter._format_strings(self)",
        "snippet": "    def _format_strings(self) -> List[str]:\n        \"\"\" we by definition have a TZ \"\"\"\n\n        values = self.values.astype(object)\n        is_dates_only = _is_dates_only(values)\n        formatter = self.formatter or _get_format_datetime64(\n            is_dates_only, date_format=self.date_format\n        )\n        fmt_values = [formatter(x) for x in values]\n\n        return fmt_values",
        "begin_line": 1648,
        "end_line": 1658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format._make_fixed_width#1725",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._make_fixed_width(strings: List[str], justify: str='right', minimum: Optional[int]=None, adj: Optional[TextAdjustment]=None)",
        "snippet": "def _make_fixed_width(\n    strings: List[str],\n    justify: str = \"right\",\n    minimum: Optional[int] = None,\n    adj: Optional[TextAdjustment] = None,\n) -> List[str]:\n\n    if len(strings) == 0 or justify == \"all\":\n        return strings\n\n    if adj is None:\n        adj = _get_adjustment()\n\n    max_len = max(adj.len(x) for x in strings)\n\n    if minimum is not None:\n        max_len = max(minimum, max_len)\n\n    conf_max = get_option(\"display.max_colwidth\")\n    if conf_max is not None and max_len > conf_max:\n        max_len = conf_max\n\n    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x\n\n    strings = [just(x) for x in strings]\n    result = adj.justify(strings, max_len, mode=justify)\n    return result",
        "begin_line": 1725,
        "end_line": 1755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.formats.format.just#1747",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format.just(x)",
        "snippet": "    def just(x):\n        if conf_max is not None:\n            if (conf_max > 3) & (adj.len(x) > max_len):\n                x = x[: max_len - 3] + \"...\"\n        return x",
        "begin_line": 1747,
        "end_line": 1751,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.628872206402623e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#30",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 30,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.339948012426299e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#50",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 50,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.392227051904884e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.__init__#80",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.__init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None)",
        "snippet": "    def __init__(\n        self,\n        axis: Index,\n        groupings: \"Sequence[grouper.Grouping]\",\n        sort: bool = True,\n        group_keys: bool = True,\n        mutated: bool = False,\n        indexer: Optional[np.ndarray] = None,\n    ):\n        assert isinstance(axis, Index), axis\n\n        self._filter_empty_groups = self.compressed = len(groupings) != 1\n        self.axis = axis\n        self._groupings: List[grouper.Grouping] = list(groupings)\n        self.sort = sort\n        self.group_keys = group_keys\n        self.mutated = mutated\n        self.indexer = indexer",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.076139258420605e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.groupings#100",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.groupings(self)",
        "snippet": "    def groupings(self) -> List[\"grouper.Grouping\"]:\n        return self._groupings",
        "begin_line": 100,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.076139258420605e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.shape#104",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.shape(self)",
        "snippet": "    def shape(self):\n        return tuple(ping.ngroups for ping in self.groupings)",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.767273465520742e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.nkeys#111",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.nkeys(self)",
        "snippet": "    def nkeys(self) -> int:\n        return len(self.groupings)",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.get_iterator#114",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.get_iterator(self, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def get_iterator(self, data: FrameOrSeries, axis: int = 0):\n        \"\"\"\n        Groupby iterator\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group\n        \"\"\"\n        splitter = self._get_splitter(data, axis=axis)\n        keys = self._get_group_keys()\n        for key, (i, group) in zip(keys, splitter):\n            yield key, group",
        "begin_line": 114,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_splitter#128",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_splitter(self, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def _get_splitter(self, data: FrameOrSeries, axis: int = 0) -> \"DataSplitter\":\n        comp_ids, _, ngroups = self.group_info\n        return get_splitter(data, comp_ids, ngroups, axis=axis)",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_group_keys#141",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_group_keys(self)",
        "snippet": "    def _get_group_keys(self):\n        if len(self.groupings) == 1:\n            return self.levels[0]\n        else:\n            comp_ids, _, ngroups = self.group_info\n\n            # provide \"flattened\" iterator for multi-group setting\n            return get_flattened_iterator(comp_ids, ngroups, self.levels, self.codes)",
        "begin_line": 141,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.apply#150",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.apply(self, f, data: FrameOrSeries, axis: int=0)",
        "snippet": "    def apply(self, f, data: FrameOrSeries, axis: int = 0):\n        mutated = self.mutated\n        splitter = self._get_splitter(data, axis=axis)\n        group_keys = self._get_group_keys()\n        result_values = None\n\n        sdata: FrameOrSeries = splitter._get_sorted_data()\n        if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n            # calling splitter.fast_apply will raise TypeError via apply_frame_axis0\n            #  if we pass EA instead of ndarray\n            #  TODO: can we have a workaround for EAs backed by ndarray?\n            pass\n\n        elif (\n            com.get_callable_name(f) not in base.plotting_methods\n            and isinstance(splitter, FrameSplitter)\n            and axis == 0\n            # apply_frame_axis0 doesn't allow MultiIndex\n            and not isinstance(sdata.index, MultiIndex)\n        ):\n            try:\n                result_values, mutated = splitter.fast_apply(f, group_keys)\n\n            except libreduction.InvalidApply as err:\n                # This Exception is raised if `f` triggers an exception\n                # but it is preferable to raise the exception in Python.\n                if \"Let this error raise above us\" not in str(err):\n                    # TODO: can we infer anything about whether this is\n                    #  worth-retrying in pure-python?\n                    raise\n\n            else:\n                # If the fast apply path could be used we can return here.\n                # Otherwise we need to fall back to the slow implementation.\n                if len(result_values) == len(group_keys):\n                    return group_keys, result_values, mutated\n\n        for key, (i, group) in zip(group_keys, splitter):\n            object.__setattr__(group, \"name\", key)\n\n            # result_values is None if fast apply path wasn't taken\n            # or fast apply aborted with an unexpected exception.\n            # In either case, initialize the result list and perform\n            # the slow iteration.\n            if result_values is None:\n                result_values = []\n\n            # If result_values is not None we're in the case that the\n            # fast apply loop was broken prematurely but we have\n            # already the result for the first group which we can reuse.\n            elif i == 0:\n                continue\n\n            # group might be modified\n            group_axes = group.axes\n            res = f(group)\n            if not _is_indexed_like(res, group_axes):\n                mutated = True\n            result_values.append(res)\n\n        return group_keys, result_values, mutated",
        "begin_line": 150,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.indices#213",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.indices(self)",
        "snippet": "    def indices(self):\n        \"\"\" dict {group name -> group indices} \"\"\"\n        if len(self.groupings) == 1:\n            return self.groupings[0].indices\n        else:\n            codes_list = [ping.codes for ping in self.groupings]\n            keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n            return get_indexer_dict(codes_list, keys)",
        "begin_line": 213,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.codes#223",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.codes(self)",
        "snippet": "    def codes(self) -> List[np.ndarray]:\n        return [ping.codes for ping in self.groupings]",
        "begin_line": 223,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.575486586007364e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.levels#227",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.levels(self)",
        "snippet": "    def levels(self) -> List[Index]:\n        return [ping.group_index for ping in self.groupings]",
        "begin_line": 227,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.names#231",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.names(self)",
        "snippet": "    def names(self):\n        return [ping.name for ping in self.groupings]",
        "begin_line": 231,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.611570247933885e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.size#234",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.size(self)",
        "snippet": "    def size(self) -> Series:\n        \"\"\"\n        Compute group sizes.\n        \"\"\"\n        ids, _, ngroup = self.group_info\n        ids = ensure_platform_int(ids)\n        if ngroup:\n            out = np.bincount(ids[ids != -1], minlength=ngroup)\n        else:\n            out = []\n        return Series(out, index=self.result_index, dtype=\"int64\")",
        "begin_line": 234,
        "end_line": 244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.group_info#262",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.group_info(self)",
        "snippet": "    def group_info(self):\n        comp_ids, obs_group_ids = self._get_compressed_codes()\n\n        ngroups = len(obs_group_ids)\n        comp_ids = ensure_int64(comp_ids)\n        return comp_ids, obs_group_ids, ngroups",
        "begin_line": 262,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.076139258420605e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.codes_info#270",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.codes_info(self)",
        "snippet": "    def codes_info(self) -> np.ndarray:\n        # return the codes of items in original grouped axis\n        codes, _, _ = self.group_info\n        if self.indexer is not None:\n            sorter = np.lexsort((codes, self.indexer))\n            codes = codes[sorter]\n        return codes",
        "begin_line": 270,
        "end_line": 276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_compressed_codes#278",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_compressed_codes(self)",
        "snippet": "    def _get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]:\n        all_codes = self.codes\n        if len(all_codes) > 1:\n            group_index = get_group_index(all_codes, self.shape, sort=True, xnull=True)\n            return compress_group_index(group_index, sort=self.sort)\n\n        ping = self.groupings[0]\n        return ping.codes, np.arange(len(ping.group_index))",
        "begin_line": 278,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.32570144034635e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.ngroups#288",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.ngroups(self)",
        "snippet": "    def ngroups(self) -> int:\n        return len(self.result_index)",
        "begin_line": 288,
        "end_line": 289,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.328691828508612e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.reconstructed_codes#292",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.reconstructed_codes(self)",
        "snippet": "    def reconstructed_codes(self) -> List[np.ndarray]:\n        codes = self.codes\n        comp_ids, obs_ids, _ = self.group_info\n        return decons_obs_group_ids(comp_ids, obs_ids, self.shape, codes, xnull=True)",
        "begin_line": 292,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.638835841417768e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.result_index#298",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.result_index(self)",
        "snippet": "    def result_index(self) -> Index:\n        if not self.compressed and len(self.groupings) == 1:\n            return self.groupings[0].result_index.rename(self.names[0])\n\n        codes = self.reconstructed_codes\n        levels = [ping.result_index for ping in self.groupings]\n        result = MultiIndex(\n            levels=levels, codes=codes, verify_integrity=False, names=self.names\n        )\n        return result",
        "begin_line": 298,
        "end_line": 307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._is_builtin_func#351",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._is_builtin_func(self, arg)",
        "snippet": "    def _is_builtin_func(self, arg):\n        \"\"\"\n        if we define an builtin function for this argument, return it,\n        otherwise return the arg\n        \"\"\"\n        return SelectionMixin._builtin_table.get(arg, arg)",
        "begin_line": 351,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_cython_function#358",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_cython_function(self, kind: str, how: str, values, is_numeric: bool)",
        "snippet": "    def _get_cython_function(self, kind: str, how: str, values, is_numeric: bool):\n\n        dtype_str = values.dtype.name\n        ftype = self._cython_functions[kind][how]\n\n        # see if there is a fused-type version of function\n        # only valid for numeric\n        f = getattr(libgroupby, ftype, None)\n        if f is not None and is_numeric:\n            return f\n\n        # otherwise find dtype-specific version, falling back to object\n        for dt in [dtype_str, \"object\"]:\n            f2 = getattr(libgroupby, f\"{ftype}_{dt}\", None)\n            if f2 is not None:\n                return f2\n\n        if hasattr(f, \"__signatures__\"):\n            # inspect what fused types are implemented\n            if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                # disallow this function so we get a NotImplementedError below\n                #  instead of a TypeError at runtime\n                f = None\n\n        func = f\n\n        if func is None:\n            raise NotImplementedError(\n                f\"function is not implemented for this dtype: \"\n                f\"[how->{how},dtype->{dtype_str}]\"\n            )\n\n        return func",
        "begin_line": 358,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_cython_func_and_vals#392",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_cython_func_and_vals(self, kind: str, how: str, values: np.ndarray, is_numeric: bool)",
        "snippet": "    def _get_cython_func_and_vals(\n        self, kind: str, how: str, values: np.ndarray, is_numeric: bool\n    ):\n        \"\"\"\n        Find the appropriate cython function, casting if necessary.\n\n        Parameters\n        ----------\n        kind : sttr\n        how : srt\n        values : np.ndarray\n        is_numeric : bool\n\n        Returns\n        -------\n        func : callable\n        values : np.ndarray\n        \"\"\"\n        try:\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        except NotImplementedError:\n            if is_numeric:\n                try:\n                    values = ensure_float64(values)\n                except TypeError:\n                    if lib.infer_dtype(values, skipna=False) == \"complex\":\n                        values = values.astype(complex)\n                    else:\n                        raise\n                func = self._get_cython_function(kind, how, values, is_numeric)\n            else:\n                raise\n        return func, values",
        "begin_line": 392,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._cython_operation#426",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._cython_operation(self, kind: str, values, how: str, axis, min_count: int=-1, **kwargs)",
        "snippet": "    def _cython_operation(\n        self, kind: str, values, how: str, axis, min_count: int = -1, **kwargs\n    ) -> Tuple[np.ndarray, Optional[List[str]]]:\n        \"\"\"\n        Returns the values of a cython operation as a Tuple of [data, names].\n\n        Names is only useful when dealing with 2D results, like ohlc\n        (see self._name_functions).\n        \"\"\"\n\n        assert kind in [\"transform\", \"aggregate\"]\n        orig_values = values\n\n        if values.ndim > 2:\n            raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n        elif values.ndim == 2:\n            # Note: it is *not* the case that axis is always 0 for 1-dim values,\n            #  as we can have 1D ExtensionArrays that we need to treat as 2D\n            assert axis == 1, axis\n\n        # can we do this operation with our cython functions\n        # if not raise NotImplementedError\n\n        # we raise NotImplemented if this is an invalid operation\n        # entirely, e.g. adding datetimes\n\n        # categoricals are only 1d, so we\n        # are not setup for dim transforming\n        if is_categorical_dtype(values) or is_sparse(values):\n            raise NotImplementedError(f\"{values.dtype} dtype not supported\")\n        elif is_datetime64_any_dtype(values):\n            if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n                raise NotImplementedError(\n                    f\"datetime64 type does not support {how} operations\"\n                )\n        elif is_timedelta64_dtype(values):\n            if how in [\"prod\", \"cumprod\"]:\n                raise NotImplementedError(\n                    f\"timedelta64 type does not support {how} operations\"\n                )\n\n        if is_datetime64tz_dtype(values.dtype):\n            # Cast to naive; we'll cast back at the end of the function\n            # TODO: possible need to reshape?  kludge can be avoided when\n            #  2D EA is allowed.\n            values = values.view(\"M8[ns]\")\n\n        is_datetimelike = needs_i8_conversion(values.dtype)\n        is_numeric = is_numeric_dtype(values.dtype)\n\n        if is_datetimelike:\n            values = values.view(\"int64\")\n            is_numeric = True\n        elif is_bool_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif is_integer_dtype(values):\n            # we use iNaT for the missing value on ints\n            # so pre-convert to guard this condition\n            if (values == iNaT).any():\n                values = ensure_float64(values)\n            else:\n                values = ensure_int_or_float(values)\n        elif is_numeric and not is_complex_dtype(values):\n            values = ensure_float64(values)\n        else:\n            values = values.astype(object)\n\n        arity = self._cython_arity.get(how, 1)\n\n        vdim = values.ndim\n        swapped = False\n        if vdim == 1:\n            values = values[:, None]\n            out_shape = (self.ngroups, arity)\n        else:\n            if axis > 0:\n                swapped = True\n                assert axis == 1, axis\n                values = values.T\n            if arity > 1:\n                raise NotImplementedError(\n                    \"arity of more than 1 is not supported for the 'how' argument\"\n                )\n            out_shape = (self.ngroups,) + values.shape[1:]\n\n        func, values = self._get_cython_func_and_vals(kind, how, values, is_numeric)\n\n        if how == \"rank\":\n            out_dtype = \"float\"\n        else:\n            if is_numeric:\n                out_dtype = f\"{values.dtype.kind}{values.dtype.itemsize}\"\n            else:\n                out_dtype = \"object\"\n\n        codes, _, _ = self.group_info\n\n        if kind == \"aggregate\":\n            result = _maybe_fill(\n                np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n            )\n            counts = np.zeros(self.ngroups, dtype=np.int64)\n            result = self._aggregate(\n                result, counts, values, codes, func, is_datetimelike, min_count\n            )\n        elif kind == \"transform\":\n            result = _maybe_fill(\n                np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n            )\n\n            # TODO: min_count\n            result = self._transform(\n                result, values, codes, func, is_datetimelike, **kwargs\n            )\n\n        if is_integer_dtype(result) and not is_datetimelike:\n            mask = result == iNaT\n            if mask.any():\n                result = result.astype(\"float64\")\n                result[mask] = np.nan\n\n        if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n            assert result.ndim != 2\n            result = result[counts > 0]\n\n        if vdim == 1 and arity == 1:\n            result = result[:, 0]\n\n        names: Optional[List[str]] = self._name_functions.get(how, None)\n\n        if swapped:\n            result = result.swapaxes(0, axis)\n\n        if is_datetime64tz_dtype(orig_values.dtype):\n            result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n        elif is_datetimelike and kind == \"aggregate\":\n            result = result.astype(orig_values.dtype)\n\n        return result, names",
        "begin_line": 426,
        "end_line": 564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.aggregate#566",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.aggregate(self, values, how: str, axis: int=0, min_count: int=-1)",
        "snippet": "    def aggregate(self, values, how: str, axis: int = 0, min_count: int = -1):\n        return self._cython_operation(\n            \"aggregate\", values, how, axis, min_count=min_count\n        )",
        "begin_line": 566,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate#574",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike: bool, min_count: int=-1)",
        "snippet": "    def _aggregate(\n        self,\n        result,\n        counts,\n        values,\n        comp_ids,\n        agg_func,\n        is_datetimelike: bool,\n        min_count: int = -1,\n    ):\n        if agg_func is libgroupby.group_nth:\n            # different signature from the others\n            # TODO: should we be using min_count instead of hard-coding it?\n            agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n        else:\n            agg_func(result, counts, values, comp_ids, min_count)\n\n        return result",
        "begin_line": 574,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.agg_series#602",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.agg_series(self, obj: Series, func)",
        "snippet": "    def agg_series(self, obj: Series, func):\n        # Caller is responsible for checking ngroups != 0\n        assert self.ngroups != 0\n\n        if len(obj) == 0:\n            # SeriesGrouper would raise if we were to call _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n\n        elif is_extension_array_dtype(obj.dtype):\n            # _aggregate_series_fast would raise TypeError when\n            #  calling libreduction.Slider\n            # In the datetime64tz case it would incorrectly cast to tz-naive\n            # TODO: can we get a performant workaround for EAs backed by ndarray?\n            return self._aggregate_series_pure_python(obj, func)\n\n        elif isinstance(obj.index, MultiIndex):\n            # MultiIndex; Pre-empt TypeError in _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n\n        try:\n            return self._aggregate_series_fast(obj, func)\n        except ValueError as err:\n            if \"Function does not reduce\" in str(err):\n                # raised in libreduction\n                pass\n            else:\n                raise\n        return self._aggregate_series_pure_python(obj, func)",
        "begin_line": 602,
        "end_line": 629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_fast#631",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_fast(self, obj: Series, func)",
        "snippet": "    def _aggregate_series_fast(self, obj: Series, func):\n        # At this point we have already checked that\n        #  - obj.index is not a MultiIndex\n        #  - obj is backed by an ndarray, not ExtensionArray\n        #  - len(obj) > 0\n        #  - ngroups != 0\n        func = self._is_builtin_func(func)\n\n        group_index, _, ngroups = self.group_info\n\n        # avoids object / Series creation overhead\n        dummy = obj._get_values(slice(None, 0))\n        indexer = get_group_index_sorter(group_index, ngroups)\n        obj = obj.take(indexer)\n        group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n        grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n        result, counts = grouper.get_result()\n        return result, counts",
        "begin_line": 631,
        "end_line": 648,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.__init__#714",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.__init__(self, bins, binlabels, filter_empty: bool=False, mutated: bool=False, indexer=None)",
        "snippet": "    def __init__(\n        self,\n        bins,\n        binlabels,\n        filter_empty: bool = False,\n        mutated: bool = False,\n        indexer=None,\n    ):\n        self.bins = ensure_int64(bins)\n        self.binlabels = ensure_index(binlabels)\n        self._filter_empty_groups = filter_empty\n        self.mutated = mutated\n        self.indexer = indexer\n\n        # These lengths must match, otherwise we could call agg_series\n        #  with empty self.bins, which would raise in libreduction.\n        assert len(self.binlabels) == len(self.bins)",
        "begin_line": 714,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper._get_grouper#749",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper._get_grouper(self)",
        "snippet": "    def _get_grouper(self):\n        \"\"\"\n        We are a grouper as part of another's groupings.\n\n        We have a specific method of grouping, so cannot\n        convert to a Index for our grouper.\n        \"\"\"\n        return self",
        "begin_line": 749,
        "end_line": 756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.group_info#792",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.group_info(self)",
        "snippet": "    def group_info(self):\n        ngroups = self.ngroups\n        obs_group_ids = np.arange(ngroups)\n        rep = np.diff(np.r_[0, self.bins])\n\n        rep = ensure_platform_int(rep)\n        if ngroups == len(self.bins):\n            comp_ids = np.repeat(np.arange(ngroups), rep)\n        else:\n            comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n        return (\n            comp_ids.astype(\"int64\", copy=False),\n            obs_group_ids.astype(\"int64\", copy=False),\n            ngroups,\n        )",
        "begin_line": 792,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.result_index#815",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.result_index(self)",
        "snippet": "    def result_index(self):\n        if len(self.binlabels) != 0 and isna(self.binlabels[0]):\n            return self.binlabels[1:]\n\n        return self.binlabels",
        "begin_line": 815,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.levels#822",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.levels(self)",
        "snippet": "    def levels(self):\n        return [self.binlabels]",
        "begin_line": 822,
        "end_line": 823,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.names#826",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.names(self)",
        "snippet": "    def names(self):\n        return [self.binlabels.name]",
        "begin_line": 826,
        "end_line": 827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.BinGrouper.groupings#830",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BinGrouper",
        "signature": "pandas.core.groupby.ops.BinGrouper.groupings(self)",
        "snippet": "    def groupings(self) -> \"List[grouper.Grouping]\":\n        return [\n            grouper.Grouping(lvl, lvl, in_axis=False, level=None, name=name)\n            for lvl, name in zip(self.levels, self.names)\n        ]",
        "begin_line": 830,
        "end_line": 834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__init__#866",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int=0)",
        "snippet": "    def __init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int = 0):\n        self.data = data\n        self.labels = ensure_int64(labels)\n        self.ngroups = ngroups\n\n        self.axis = axis\n        assert isinstance(axis, int), axis",
        "begin_line": 866,
        "end_line": 872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.slabels#875",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.slabels(self)",
        "snippet": "    def slabels(self):\n        # Sorted labels\n        return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
        "begin_line": 875,
        "end_line": 877,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.sort_idx#880",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.sort_idx(self)",
        "snippet": "    def sort_idx(self):\n        # Counting sort indexer\n        return get_group_index_sorter(self.labels, self.ngroups)",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__iter__#884",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__iter__(self)",
        "snippet": "    def __iter__(self):\n        sdata = self._get_sorted_data()\n\n        if self.ngroups == 0:\n            # we are inside a generator, rather than raise StopIteration\n            # we merely return signal the end\n            return\n\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n        for i, (start, end) in enumerate(zip(starts, ends)):\n            yield i, self._chop(sdata, slice(start, end))",
        "begin_line": 884,
        "end_line": 895,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter._get_sorted_data#897",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter._get_sorted_data(self)",
        "snippet": "    def _get_sorted_data(self) -> FrameOrSeries:\n        return self.data.take(self.sort_idx, axis=self.axis)",
        "begin_line": 897,
        "end_line": 898,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.SeriesSplitter._chop#905",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.SeriesSplitter",
        "signature": "pandas.core.groupby.ops.SeriesSplitter._chop(self, sdata: Series, slice_obj: slice)",
        "snippet": "    def _chop(self, sdata: Series, slice_obj: slice) -> Series:\n        return sdata._get_values(slice_obj)",
        "begin_line": 905,
        "end_line": 906,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.FrameSplitter.fast_apply#910",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.FrameSplitter",
        "signature": "pandas.core.groupby.ops.FrameSplitter.fast_apply(self, f, names)",
        "snippet": "    def fast_apply(self, f, names):\n        # must return keys::list, values::list, mutated::bool\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n        sdata = self._get_sorted_data()\n        return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)",
        "begin_line": 910,
        "end_line": 915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.FrameSplitter._chop#917",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.FrameSplitter",
        "signature": "pandas.core.groupby.ops.FrameSplitter._chop(self, sdata: DataFrame, slice_obj: slice)",
        "snippet": "    def _chop(self, sdata: DataFrame, slice_obj: slice) -> DataFrame:\n        if self.axis == 0:\n            return sdata.iloc[slice_obj]\n        else:\n            return sdata._slice(slice_obj, axis=1)",
        "begin_line": 917,
        "end_line": 921,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.ops.get_splitter#924",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops",
        "signature": "pandas.core.groupby.ops.get_splitter(data: FrameOrSeries, *args, **kwargs)",
        "snippet": "def get_splitter(data: FrameOrSeries, *args, **kwargs) -> DataSplitter:\n    if isinstance(data, Series):\n        klass: Type[DataSplitter] = SeriesSplitter\n    else:\n        # i.e. DataFrame\n        klass = FrameSplitter\n\n    return klass(data, *args, **kwargs)",
        "begin_line": 924,
        "end_line": 931,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices#142",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices(self)",
        "snippet": "    def _iterate_slices(self) -> Iterable[Series]:\n        yield self._selected_obj",
        "begin_line": 142,
        "end_line": 143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.aggregate#224",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.aggregate(self, func=None, *args, **kwargs)",
        "snippet": "    def aggregate(self, func=None, *args, **kwargs):\n\n        relabeling = func is None\n        columns = None\n        no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n        if relabeling:\n            columns = list(kwargs)\n            func = [kwargs[col] for col in columns]\n            kwargs = {}\n            if not columns:\n                raise TypeError(no_arg_message)\n\n        if isinstance(func, str):\n            return getattr(self, func)(*args, **kwargs)\n\n        elif isinstance(func, abc.Iterable):\n            # Catch instances of lists / tuples\n            # but not the class list / tuple itself.\n            func = _maybe_mangle_lambdas(func)\n            ret = self._aggregate_multiple_funcs(func)\n            if relabeling:\n                ret.columns = columns\n        else:\n            cyfunc = self._get_cython_func(func)\n            if cyfunc and not args and not kwargs:\n                return getattr(self, cyfunc)()\n\n            if self.grouper.nkeys > 1:\n                return self._python_agg_general(func, *args, **kwargs)\n\n            try:\n                return self._python_agg_general(func, *args, **kwargs)\n            except (ValueError, KeyError):\n                # TODO: KeyError is raised in _python_agg_general,\n                #  see see test_groupby.test_basic\n                result = self._aggregate_named(func, *args, **kwargs)\n\n            index = Index(sorted(result), name=self.grouper.names[0])\n            ret = Series(result, index=index)\n\n        if not self.as_index:  # pragma: no cover\n            print(\"Warning, ignoring as_index=True\")\n\n        if isinstance(ret, dict):\n            from pandas import concat\n\n            ret = concat(ret, axis=1)\n        return ret",
        "begin_line": 224,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_multiple_funcs#275",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._aggregate_multiple_funcs(self, arg)",
        "snippet": "    def _aggregate_multiple_funcs(self, arg):\n        if isinstance(arg, dict):\n\n            # show the deprecation, but only if we\n            # have not shown a higher level one\n            # GH 15931\n            if isinstance(self._selected_obj, Series):\n                raise SpecificationError(\"nested renamer is not supported\")\n\n            columns = list(arg.keys())\n            arg = arg.items()\n        elif any(isinstance(x, (tuple, list)) for x in arg):\n            arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n\n            # indicated column order\n            columns = next(zip(*arg))\n        else:\n            # list of functions / function names\n            columns = []\n            for f in arg:\n                columns.append(com.get_callable_name(f) or f)\n\n            arg = zip(columns, arg)\n\n        results = OrderedDict()\n        for name, func in arg:\n            obj = self\n            if name in results:\n                raise SpecificationError(\n                    f\"Function names must be unique, found multiple named {name}\"\n                )\n\n            # reset the cache so that we\n            # only include the named selection\n            if name in self._selected_obj:\n                obj = copy.copy(obj)\n                obj._reset_cache()\n                obj._selection = name\n            results[name] = obj.aggregate(func)\n\n        if any(isinstance(x, DataFrame) for x in results.values()):\n            # let higher level handle\n            return results\n\n        return DataFrame(results, columns=columns)",
        "begin_line": 275,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output#321",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index)",
        "snippet": "    def _wrap_series_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index,\n    ) -> Union[Series, DataFrame]:\n        \"\"\"\n        Wraps the output of a SeriesGroupBy operation into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n            Data to wrap.\n        index : pd.Index\n            Index to apply to the output.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        Notes\n        -----\n        In the vast majority of cases output and columns will only contain one\n        element. The exception is operations that expand dimensions, like ohlc.\n        \"\"\"\n        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result: Union[Series, DataFrame]\n        if len(output) > 1:\n            result = DataFrame(indexed_output, index=index)\n            result.columns = columns\n        else:\n            result = Series(indexed_output[0], index=index, name=columns[0])\n\n        return result",
        "begin_line": 321,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output#355",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_aggregated_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> Union[Series, DataFrame]:\n        \"\"\"\n        Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n            Data to wrap.\n\n        Returns\n        -------\n        Series or DataFrame\n\n        Notes\n        -----\n        In the vast majority of cases output will only contain one element.\n        The exception is operations that expand dimensions, like ohlc.\n        \"\"\"\n        result = self._wrap_series_output(\n            output=output, index=self.grouper.result_index\n        )\n        return self._reindex_output(result)._convert(datetime=True)",
        "begin_line": 355,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.aggregate#908",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.aggregate(self, func=None, *args, **kwargs)",
        "snippet": "    def aggregate(self, func=None, *args, **kwargs):\n\n        relabeling = func is None and _is_multi_agg_with_relabel(**kwargs)\n        if relabeling:\n            func, columns, order = _normalize_keyword_aggregation(kwargs)\n\n            kwargs = {}\n        elif func is None:\n            # nicer error message\n            raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n\n        func = _maybe_mangle_lambdas(func)\n\n        result, how = self._aggregate(func, *args, **kwargs)\n        if how is None:\n            return result\n\n        if result is None:\n\n            # grouper specific aggregations\n            if self.grouper.nkeys > 1:\n                return self._python_agg_general(func, *args, **kwargs)\n            elif args or kwargs:\n                result = self._aggregate_frame(func, *args, **kwargs)\n\n            elif self.axis == 1:\n                # _aggregate_multiple_funcs does not allow self.axis == 1\n                result = self._aggregate_frame(func)\n\n            else:\n\n                # try to treat as if we are passing a list\n                try:\n                    result = self._aggregate_multiple_funcs([func], _axis=self.axis)\n                except ValueError as err:\n                    if \"no results\" not in str(err):\n                        # raised directly by _aggregate_multiple_funcs\n                        raise\n                    result = self._aggregate_frame(func)\n                else:\n                    result.columns = Index(\n                        result.columns.levels[0], name=self._selected_obj.columns.name\n                    )\n\n        if not self.as_index:\n            self._insert_inaxis_grouper_inplace(result)\n            result.index = np.arange(len(result))\n\n        if relabeling:\n\n            # used reordered index of columns\n            result = result.iloc[:, order]\n            result.columns = columns\n\n        return result._convert(datetime=True)",
        "begin_line": 908,
        "end_line": 962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_slices#966",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._iterate_slices(self)",
        "snippet": "    def _iterate_slices(self) -> Iterable[Series]:\n        obj = self._selected_obj\n        if self.axis == 1:\n            obj = obj.T\n\n        if isinstance(obj, Series) and obj.name not in self.exclusions:\n            # Occurs when doing DataFrameGroupBy(...)[\"X\"]\n            yield obj\n        else:\n            for label, values in obj.items():\n                if label in self.exclusions:\n                    continue\n\n                yield values",
        "begin_line": 966,
        "end_line": 979,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011389521640091117,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_general#981",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_general(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ):\n        new_items, new_blocks = self._cython_agg_blocks(\n            how, alt=alt, numeric_only=numeric_only, min_count=min_count\n        )\n        return self._wrap_agged_blocks(new_items, new_blocks)",
        "begin_line": 981,
        "end_line": 987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks#989",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
        "snippet": "    def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ):\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n\n        data = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        new_blocks = []\n        new_items = []\n        deleted_items = []\n        no_result = object()\n        for block in data.blocks:\n            # Avoid inheriting result from earlier in the loop\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                # generally if we have numeric_only=False\n                # and non-applicable functions\n                # try to python agg\n\n                if alt is None:\n                    # we cannot perform the operation\n                    # in an alternate way, exclude the block\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n\n                # call our grouper again with only this block\n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    # Avoid call to self.values that can occur in DataFrame\n                    #  reductions; see GH#28949\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                try:\n                    result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    # we may have an exception in trying to aggregate\n                    # continue and exclude the block\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    result = cast(DataFrame, result)\n                    # unwrap DataFrame to get array\n                    assert len(result._data.blocks) == 1\n                    result = result._data.blocks[0].values\n                    if isinstance(result, np.ndarray) and result.ndim == 1:\n                        result = result.reshape(1, -1)\n\n            finally:\n                assert not isinstance(result, DataFrame)\n\n                if result is not no_result:\n                    # see if we can cast the block back to the original dtype\n                    result = maybe_downcast_numeric(result, block.dtype)\n\n                    if block.is_extension and isinstance(result, np.ndarray):\n                        # e.g. block.values was an IntegerArray\n                        # (1, N) case can occur if block.values was Categorical\n                        #  and result is ndarray[object]\n                        assert result.ndim == 1 or result.shape[0] == 1\n                        try:\n                            # Cast back if feasible\n                            result = type(block.values)._from_sequence(\n                                result.ravel(), dtype=block.values.dtype\n                            )\n                        except ValueError:\n                            # reshape to be valid for non-Extension Block\n                            result = result.reshape(1, -1)\n\n                    newb = block.make_block(result)\n\n            new_items.append(locs)\n            new_blocks.append(newb)\n\n        if len(new_blocks) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n        new_items = data.items.take(np.sort(indexer))\n\n        if len(deleted_items):\n\n            # we need to adjust the indexer to account for the\n            # items we have removed\n            # really should be done in internals :<\n\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n\n        offset = 0\n        for b in new_blocks:\n            loc = len(b.mgr_locs)\n            b.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n\n        return new_items, new_blocks",
        "begin_line": 989,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.692899453804139e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_frame#1101",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._aggregate_frame(self, func, *args, **kwargs)",
        "snippet": "    def _aggregate_frame(self, func, *args, **kwargs) -> DataFrame:\n        if self.grouper.nkeys != 1:\n            raise AssertionError(\"Number of keys must be 1\")\n\n        axis = self.axis\n        obj = self._obj_with_exclusions\n\n        result: OrderedDict = OrderedDict()\n        if axis != obj._info_axis_number:\n            for name, data in self:\n                fres = func(data, *args, **kwargs)\n                result[name] = fres\n        else:\n            for name in self.indices:\n                data = self.get_group(name, obj=obj)\n                fres = func(data, *args, **kwargs)\n                result[name] = fres\n\n        return self._wrap_frame_output(result, obj)",
        "begin_line": 1101,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_applied_output#1159",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_applied_output(self, keys, values, not_indexed_same=False)",
        "snippet": "    def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n        if len(keys) == 0:\n            return DataFrame(index=keys)\n\n        key_names = self.grouper.names\n\n        # GH12824.\n        def first_not_none(values):\n            try:\n                return next(com.not_none(*values))\n            except StopIteration:\n                return None\n\n        v = first_not_none(values)\n\n        if v is None:\n            # GH9684. If all values are None, then this will throw an error.\n            # We'd prefer it return an empty dataframe.\n            return DataFrame()\n        elif isinstance(v, DataFrame):\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n        elif self.grouper.groupings is not None:\n            if len(self.grouper.groupings) > 1:\n                key_index = self.grouper.result_index\n\n            else:\n                ping = self.grouper.groupings[0]\n                if len(keys) == ping.ngroups:\n                    key_index = ping.group_index\n                    key_index.name = key_names[0]\n\n                    key_lookup = Index(keys)\n                    indexer = key_lookup.get_indexer(key_index)\n\n                    # reorder the values\n                    values = [values[i] for i in indexer]\n                else:\n\n                    key_index = Index(keys, name=key_names[0])\n\n                # don't use the key indexer\n                if not self.as_index:\n                    key_index = None\n\n            # make Nones an empty object\n            v = first_not_none(values)\n            if v is None:\n                return DataFrame()\n            elif isinstance(v, NDFrame):\n                values = [\n                    x if x is not None else v._constructor(**v._construct_axes_dict())\n                    for x in values\n                ]\n\n            v = values[0]\n\n            if isinstance(v, (np.ndarray, Index, Series)):\n                if isinstance(v, Series):\n                    applied_index = self._selected_obj._get_axis(self.axis)\n                    all_indexed_same = all_indexes_same([x.index for x in values])\n                    singular_series = len(values) == 1 and applied_index.nlevels == 1\n\n                    # GH3596\n                    # provide a reduction (Frame -> Series) if groups are\n                    # unique\n                    if self.squeeze:\n                        # assign the name to this series\n                        if singular_series:\n                            values[0].name = keys[0]\n\n                            # GH2893\n                            # we have series in the values array, we want to\n                            # produce a series:\n                            # if any of the sub-series are not indexed the same\n                            # OR we don't have a multi-index and we have only a\n                            # single values\n                            return self._concat_objects(\n                                keys, values, not_indexed_same=not_indexed_same\n                            )\n\n                        # still a series\n                        # path added as of GH 5545\n                        elif all_indexed_same:\n                            from pandas.core.reshape.concat import concat\n\n                            return concat(values)\n\n                    if not all_indexed_same:\n                        # GH 8467\n                        return self._concat_objects(keys, values, not_indexed_same=True)\n\n                if self.axis == 0 and isinstance(v, ABCSeries):\n                    # GH6124 if the list of Series have a consistent name,\n                    # then propagate that name to the result.\n                    index = v.index.copy()\n                    if index.name is None:\n                        # Only propagate the series name to the result\n                        # if all series have a consistent name.  If the\n                        # series do not have a consistent name, do\n                        # nothing.\n                        names = {v.name for v in values}\n                        if len(names) == 1:\n                            index.name = list(names)[0]\n\n                    # normally use vstack as its faster than concat\n                    # and if we have mi-columns\n                    if (\n                        isinstance(v.index, MultiIndex)\n                        or key_index is None\n                        or isinstance(key_index, MultiIndex)\n                    ):\n                        stacked_values = np.vstack([np.asarray(v) for v in values])\n                        result = DataFrame(\n                            stacked_values, index=key_index, columns=index\n                        )\n                    else:\n                        # GH5788 instead of stacking; concat gets the\n                        # dtypes correct\n                        from pandas.core.reshape.concat import concat\n\n                        result = concat(\n                            values,\n                            keys=key_index,\n                            names=key_index.names,\n                            axis=self.axis,\n                        ).unstack()\n                        result.columns = index\n                elif isinstance(v, ABCSeries):\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(\n                        stacked_values.T, index=v.index, columns=key_index\n                    )\n                else:\n                    # GH#1738: values is list of arrays of unequal lengths\n                    #  fall through to the outer else clause\n                    # TODO: sure this is right?  we used to do this\n                    #  after raising AttributeError above\n                    return Series(values, index=key_index, name=self._selection_name)\n\n                # if we have date/time like in the original, then coerce dates\n                # as we are stacking can easily have object dtypes here\n                so = self._selected_obj\n                if so.ndim == 2 and so.dtypes.apply(needs_i8_conversion).any():\n                    result = _recast_datetimelike_result(result)\n                else:\n                    result = result._convert(datetime=True)\n\n                return self._reindex_output(result)\n\n            # values are not series or array-like but scalars\n            else:\n                # only coerce dates if we find at least 1 datetime\n                should_coerce = any(isinstance(x, Timestamp) for x in values)\n                # self._selection_name not passed through to Series as the\n                # result should not take the name of original selection\n                # of columns\n                return Series(values, index=key_index)._convert(\n                    datetime=True, coerce=should_coerce\n                )\n\n        else:\n            # Handle cases like BinGrouper\n            return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
        "begin_line": 1159,
        "end_line": 1321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.first_not_none#1166",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.first_not_none(values)",
        "snippet": "        def first_not_none(values):\n            try:\n                return next(com.not_none(*values))\n            except StopIteration:\n                return None",
        "begin_line": 1166,
        "end_line": 1170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._gotitem#1560",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._gotitem(self, key, ndim: int, subset=None)",
        "snippet": "    def _gotitem(self, key, ndim: int, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n\n        if ndim == 2:\n            if subset is None:\n                subset = self.obj\n            return DataFrameGroupBy(\n                subset,\n                self.grouper,\n                selection=key,\n                grouper=self.grouper,\n                exclusions=self.exclusions,\n                as_index=self.as_index,\n                observed=self.observed,\n            )\n        elif ndim == 1:\n            if subset is None:\n                subset = self.obj[key]\n            return SeriesGroupBy(\n                subset, selection=key, grouper=self.grouper, observed=self.observed\n            )\n\n        raise AssertionError(\"invalid ndim for _gotitem\")",
        "begin_line": 1560,
        "end_line": 1593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_frame_output#1595",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_frame_output(self, result, obj)",
        "snippet": "    def _wrap_frame_output(self, result, obj) -> DataFrame:\n        result_index = self.grouper.levels[0]\n\n        if self.axis == 0:\n            return DataFrame(result, index=obj.columns, columns=result_index).T\n        else:\n            return DataFrame(result, index=obj.index, columns=result_index)",
        "begin_line": 1595,
        "end_line": 1601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._get_data_to_aggregate#1603",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._get_data_to_aggregate(self)",
        "snippet": "    def _get_data_to_aggregate(self):\n        obj = self._obj_with_exclusions\n        if self.axis == 1:\n            return obj.T._data\n        else:\n            return obj._data",
        "begin_line": 1603,
        "end_line": 1608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.545461404964914e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_aggregated_output#1627",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]])",
        "snippet": "    def _wrap_aggregated_output(\n        self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n    ) -> DataFrame:\n        \"\"\"\n        Wraps the output of DataFrameGroupBy aggregations into the expected result.\n\n        Parameters\n        ----------\n        output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n           Data to wrap.\n\n        Returns\n        -------\n        DataFrame\n        \"\"\"\n        indexed_output = {key.position: val for key, val in output.items()}\n        columns = Index(key.label for key in output)\n\n        result = DataFrame(indexed_output)\n        result.columns = columns\n\n        if not self.as_index:\n            self._insert_inaxis_grouper_inplace(result)\n            result = result._consolidate()\n        else:\n            index = self.grouper.result_index\n            result.index = index\n\n        if self.axis == 1:\n            result = result.T\n\n        return self._reindex_output(result)._convert(datetime=True)",
        "begin_line": 1627,
        "end_line": 1658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011511453896627144,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_agged_blocks#1684",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy._wrap_agged_blocks(self, items, blocks)",
        "snippet": "    def _wrap_agged_blocks(self, items, blocks):\n        if not self.as_index:\n            index = np.arange(blocks[0].values.shape[-1])\n            mgr = BlockManager(blocks, [items, index])\n            result = DataFrame(mgr)\n\n            self._insert_inaxis_grouper_inplace(result)\n            result = result._consolidate()\n        else:\n            index = self.grouper.result_index\n            mgr = BlockManager(blocks, [items, index])\n            result = DataFrame(mgr)\n\n        if self.axis == 1:\n            result = result.T\n\n        return self._reindex_output(result)._convert(datetime=True)",
        "begin_line": 1684,
        "end_line": 1700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.545461404964914e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic.DataFrameGroupBy.count#1720",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.DataFrameGroupBy",
        "signature": "pandas.core.groupby.generic.DataFrameGroupBy.count(self)",
        "snippet": "    def count(self):\n        \"\"\"\n        Compute count of group, excluding missing values.\n\n        Returns\n        -------\n        DataFrame\n            Count of values within each group.\n        \"\"\"\n        data = self._get_data_to_aggregate()\n        ids, _, ngroups = self.grouper.group_info\n        mask = ids != -1\n\n        val = (\n            (mask & ~_isna_ndarraylike(np.atleast_2d(blk.get_values())))\n            for blk in data.blocks\n        )\n        loc = (blk.mgr_locs for blk in data.blocks)\n\n        counted = [\n            lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in val\n        ]\n        blk = map(make_block, counted, loc)\n\n        return self._wrap_agged_blocks(data.items, list(blk))",
        "begin_line": 1720,
        "end_line": 1744,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic._managle_lambda_list#1928",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic",
        "signature": "pandas.core.groupby.generic._managle_lambda_list(aggfuncs: Sequence[Any])",
        "snippet": "def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:\n    \"\"\"\n    Possibly mangle a list of aggfuncs.\n\n    Parameters\n    ----------\n    aggfuncs : Sequence\n\n    Returns\n    -------\n    mangled: list-like\n        A new AggSpec sequence, where lambdas have been converted\n        to have unique names.\n\n    Notes\n    -----\n    If just one aggfunc is passed, the name will not be mangled.\n    \"\"\"\n    if len(aggfuncs) <= 1:\n        # don't mangle for .agg([lambda x: .])\n        return aggfuncs\n    i = 0\n    mangled_aggfuncs = []\n    for aggfunc in aggfuncs:\n        if com.get_callable_name(aggfunc) == \"<lambda>\":\n            aggfunc = partial(aggfunc)\n            aggfunc.__name__ = f\"<lambda_{i}>\"\n            i += 1\n        mangled_aggfuncs.append(aggfunc)\n\n    return mangled_aggfuncs",
        "begin_line": 1928,
        "end_line": 1958,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.generic._maybe_mangle_lambdas#1961",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic",
        "signature": "pandas.core.groupby.generic._maybe_mangle_lambdas(agg_spec: Any)",
        "snippet": "def _maybe_mangle_lambdas(agg_spec: Any) -> Any:\n    \"\"\"\n    Make new lambdas with unique names.\n\n    Parameters\n    ----------\n    agg_spec : Any\n        An argument to GroupBy.agg.\n        Non-dict-like `agg_spec` are pass through as is.\n        For dict-like `agg_spec` a new spec is returned\n        with name-mangled lambdas.\n\n    Returns\n    -------\n    mangled : Any\n        Same type as the input.\n\n    Examples\n    --------\n    >>> _maybe_mangle_lambdas('sum')\n    'sum'\n\n    >>> _maybe_mangle_lambdas([lambda: 1, lambda: 2])  # doctest: +SKIP\n    [<function __main__.<lambda_0>,\n     <function pandas...._make_lambda.<locals>.f(*args, **kwargs)>]\n    \"\"\"\n    is_dict = is_dict_like(agg_spec)\n    if not (is_dict or is_list_like(agg_spec)):\n        return agg_spec\n    mangled_aggspec = type(agg_spec)()  # dict or OrderdDict\n\n    if is_dict:\n        for key, aggfuncs in agg_spec.items():\n            if is_list_like(aggfuncs) and not is_dict_like(aggfuncs):\n                mangled_aggfuncs = _managle_lambda_list(aggfuncs)\n            else:\n                mangled_aggfuncs = aggfuncs\n\n            mangled_aggspec[key] = mangled_aggfuncs\n    else:\n        mangled_aggspec = _managle_lambda_list(agg_spec)\n\n    return mangled_aggspec",
        "begin_line": 1961,
        "end_line": 2003,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__init__#73",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__init__(self, obj, groupby=None, axis=0, kind=None, **kwargs)",
        "snippet": "    def __init__(self, obj, groupby=None, axis=0, kind=None, **kwargs):\n        self.groupby = groupby\n        self.keys = None\n        self.sort = True\n        self.axis = axis\n        self.kind = kind\n        self.squeeze = False\n        self.group_keys = True\n        self.as_index = True\n        self.exclusions = set()\n        self.binner = None\n        self.grouper = None\n\n        if self.groupby is not None:\n            self.groupby._set_grouper(self._convert_obj(obj), sort=True)",
        "begin_line": 73,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__str__#89",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        \"\"\"\n        Provide a nice str repr of our rolling object.\n        \"\"\"\n        attrs = (\n            \"{k}={v}\".format(k=k, v=getattr(self.groupby, k))\n            for k in self._attributes\n            if getattr(self.groupby, k, None) is not None\n        )\n        return \"{klass} [{attrs}]\".format(\n            klass=type(self).__name__, attrs=\", \".join(attrs)\n        )",
        "begin_line": 89,
        "end_line": 100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__getattr__#102",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__getattr__(self, attr)",
        "snippet": "    def __getattr__(self, attr):\n        if attr in self._internal_names_set:\n            return object.__getattribute__(self, attr)\n        if attr in self._attributes:\n            return getattr(self.groupby, attr)\n        if attr in self.obj:\n            return self[attr]\n\n        return object.__getattribute__(self, attr)",
        "begin_line": 102,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.__iter__#112",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Resampler iterator.\n\n        Returns\n        -------\n        Generator yielding sequence of (name, subsetted object)\n        for each group.\n\n        See Also\n        --------\n        GroupBy.__iter__\n        \"\"\"\n        self._set_binner()\n        return super().__iter__()",
        "begin_line": 112,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.obj#129",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.obj(self)",
        "snippet": "    def obj(self):\n        return self.groupby.obj",
        "begin_line": 129,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.ax#133",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.ax(self)",
        "snippet": "    def ax(self):\n        return self.groupby.ax",
        "begin_line": 133,
        "end_line": 134,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._typ#137",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._typ(self)",
        "snippet": "    def _typ(self):\n        \"\"\"\n        Masquerade for compat as a Series or a DataFrame.\n        \"\"\"\n        if isinstance(self._selected_obj, ABCSeries):\n            return \"series\"\n        return \"dataframe\"",
        "begin_line": 137,
        "end_line": 143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._from_selection#146",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._from_selection(self)",
        "snippet": "    def _from_selection(self):\n        \"\"\"\n        Is the resampling from a DataFrame column or MultiIndex level.\n        \"\"\"\n        # upsampling and PeriodIndex resampling do not work\n        # with selection, this state used to catch and raise an error\n        return self.groupby is not None and (\n            self.groupby.key is not None or self.groupby.level is not None\n        )",
        "begin_line": 146,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._convert_obj#156",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._convert_obj(self, obj)",
        "snippet": "    def _convert_obj(self, obj):\n        \"\"\"\n        Provide any conversions for the object in order to correctly handle.\n\n        Parameters\n        ----------\n        obj : the object to be resampled\n\n        Returns\n        -------\n        obj : converted object\n        \"\"\"\n        obj = obj._consolidate()\n        return obj",
        "begin_line": 156,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_binner_for_time#171",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        raise AbstractMethodError(self)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._set_binner#174",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._set_binner(self)",
        "snippet": "    def _set_binner(self):\n        \"\"\"\n        Setup our binners.\n\n        Cache these as we are an immutable object\n        \"\"\"\n        if self.binner is None:\n            self.binner, self.grouper = self._get_binner()",
        "begin_line": 174,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_binner#183",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_binner(self)",
        "snippet": "    def _get_binner(self):\n        \"\"\"\n        Create the BinGrouper, assume that self.set_grouper(obj)\n        has already been called.\n        \"\"\"\n\n        binner, bins, binlabels = self._get_binner_for_time()\n        assert len(bins) == len(binlabels)\n        bin_grouper = BinGrouper(bins, binlabels, indexer=self.groupby.indexer)\n        return binner, bin_grouper",
        "begin_line": 183,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._assure_grouper#194",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._assure_grouper(self)",
        "snippet": "    def _assure_grouper(self):\n        \"\"\"\n        Make sure that we are creating our binner & grouper.\n        \"\"\"\n        self._set_binner()",
        "begin_line": 194,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.pipe#222",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.pipe(self, func, *args, **kwargs)",
        "snippet": "    def pipe(self, func, *args, **kwargs):\n        return super().pipe(func, *args, **kwargs)",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.aggregate#281",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.aggregate(self, func, *args, **kwargs)",
        "snippet": "    def aggregate(self, func, *args, **kwargs):\n\n        self._set_binner()\n        result, how = self._aggregate(func, *args, **kwargs)\n        if result is None:\n            how = func\n            grouper = None\n            result = self._groupby_and_aggregate(how, grouper, *args, **kwargs)\n\n        result = self._apply_loffset(result)\n        return result",
        "begin_line": 281,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.transform#296",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.transform(self, arg, *args, **kwargs)",
        "snippet": "    def transform(self, arg, *args, **kwargs):\n        \"\"\"\n        Call function producing a like-indexed Series on each group and return\n        a Series with the transformed values.\n\n        Parameters\n        ----------\n        arg : function\n            To apply to each group. Should return a Series with the same index.\n\n        Returns\n        -------\n        transformed : Series\n\n        Examples\n        --------\n        >>> resampled.transform(lambda x: (x - x.mean()) / x.std())\n        \"\"\"\n        return self._selected_obj.groupby(self.groupby).transform(arg, *args, **kwargs)",
        "begin_line": 296,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._downsample#316",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._downsample(self, f)",
        "snippet": "    def _downsample(self, f):\n        raise AbstractMethodError(self)",
        "begin_line": 316,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._upsample#319",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._upsample(self, f, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, f, limit=None, fill_value=None):\n        raise AbstractMethodError(self)",
        "begin_line": 319,
        "end_line": 320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._gotitem#322",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._gotitem(self, key, ndim, subset=None)",
        "snippet": "    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        Sub-classes to define. Return a sliced object.\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        self._set_binner()\n        grouper = self.grouper\n        if subset is None:\n            subset = self.obj\n        grouped = get_groupby(subset, by=None, grouper=grouper, axis=self.axis)\n\n        # try the key selection\n        try:\n            return grouped[key]\n        except KeyError:\n            return grouped",
        "begin_line": 322,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._groupby_and_aggregate#346",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._groupby_and_aggregate(self, how, grouper=None, *args, **kwargs)",
        "snippet": "    def _groupby_and_aggregate(self, how, grouper=None, *args, **kwargs):\n        \"\"\"\n        Re-evaluate the obj with a groupby aggregation.\n        \"\"\"\n\n        if grouper is None:\n            self._set_binner()\n            grouper = self.grouper\n\n        obj = self._selected_obj\n\n        grouped = get_groupby(obj, by=None, grouper=grouper, axis=self.axis)\n\n        try:\n            if isinstance(obj, ABCDataFrame) and callable(how):\n                # Check if the function is reducing or not.\n                result = grouped._aggregate_item_by_item(how, *args, **kwargs)\n            else:\n                result = grouped.aggregate(how, *args, **kwargs)\n        except DataError:\n            # we have a non-reducing function; try to evaluate\n            result = grouped.apply(how, *args, **kwargs)\n        except ValueError as err:\n            if \"Must produce aggregated value\" in str(err):\n                # raised in _aggregate_named\n                pass\n            elif \"len(index) != len(labels)\" in str(err):\n                # raised in libgroupby validation\n                pass\n            elif \"No objects to concatenate\" in str(err):\n                # raised in concat call\n                #  In tests this is reached via either\n                #  _apply_to_column_groupbys (ohlc) or DataFrameGroupBy.nunique\n                pass\n            else:\n                raise\n\n            # we have a non-reducing function\n            # try to evaluate\n            result = grouped.apply(how, *args, **kwargs)\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 346,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._apply_loffset#390",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._apply_loffset(self, result)",
        "snippet": "    def _apply_loffset(self, result):\n        \"\"\"\n        If loffset is set, offset the result index.\n\n        This is NOT an idempotent routine, it will be applied\n        exactly once to the result.\n\n        Parameters\n        ----------\n        result : Series or DataFrame\n            the result of resample\n        \"\"\"\n\n        needs_offset = (\n            isinstance(self.loffset, (DateOffset, timedelta, np.timedelta64))\n            and isinstance(result.index, DatetimeIndex)\n            and len(result.index) > 0\n        )\n\n        if needs_offset:\n            result.index = result.index + self.loffset\n\n        self.loffset = None\n        return result",
        "begin_line": 390,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._get_resampler_for_grouping#415",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._get_resampler_for_grouping(self, groupby, **kwargs)",
        "snippet": "    def _get_resampler_for_grouping(self, groupby, **kwargs):\n        \"\"\"\n        Return the correct class for resampling with groupby.\n        \"\"\"\n        return self._resampler_for_grouping(self, groupby=groupby, **kwargs)",
        "begin_line": 415,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler._wrap_result#421",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler._wrap_result(self, result)",
        "snippet": "    def _wrap_result(self, result):\n        \"\"\"\n        Potentially wrap any results.\n        \"\"\"\n        if isinstance(result, ABCSeries) and self._selection is not None:\n            result.name = self._selection\n\n        if isinstance(result, ABCSeries) and result.empty:\n            obj = self.obj\n            if isinstance(obj.index, PeriodIndex):\n                result.index = obj.index.asfreq(self.freq)\n            else:\n                result.index = obj.index._shallow_copy(freq=self.freq)\n            result.name = getattr(obj, \"name\", None)\n\n        return result",
        "begin_line": 421,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.pad#438",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.pad(self, limit=None)",
        "snippet": "    def pad(self, limit=None):\n        \"\"\"\n        Forward fill the values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        An upsampled Series.\n\n        See Also\n        --------\n        Series.fillna\n        DataFrame.fillna\n        \"\"\"\n        return self._upsample(\"pad\", limit=limit)",
        "begin_line": 438,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.nearest#460",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.nearest(self, limit=None)",
        "snippet": "    def nearest(self, limit=None):\n        \"\"\"\n        Resample by using the nearest value.\n\n        When resampling data, missing values may appear (e.g., when the\n        resampling frequency is higher than the original frequency).\n        The `nearest` method will replace ``NaN`` values that appeared in\n        the resampled data with the value from the nearest member of the\n        sequence, based on the index value.\n        Missing values that existed in the original data will not be modified.\n        If `limit` is given, fill only this many values in each direction for\n        each of the original values.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        Series or DataFrame\n            An upsampled Series or DataFrame with ``NaN`` values filled with\n            their nearest value.\n\n        See Also\n        --------\n        backfill : Backward fill the new missing values in the resampled data.\n        pad : Forward fill ``NaN`` values.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2],\n        ...               index=pd.date_range('20180101',\n        ...                                   periods=2,\n        ...                                   freq='1h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        Freq: H, dtype: int64\n\n        >>> s.resample('15min').nearest()\n        2018-01-01 00:00:00    1\n        2018-01-01 00:15:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 00:45:00    2\n        2018-01-01 01:00:00    2\n        Freq: 15T, dtype: int64\n\n        Limit the number of upsampled values imputed by the nearest:\n\n        >>> s.resample('15min').nearest(limit=1)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        Freq: 15T, dtype: float64\n        \"\"\"\n        return self._upsample(\"nearest\", limit=limit)",
        "begin_line": 460,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.backfill#522",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.backfill(self, limit=None)",
        "snippet": "    def backfill(self, limit=None):\n        \"\"\"\n        Backward fill the new missing values in the resampled data.\n\n        In statistics, imputation is the process of replacing missing data with\n        substituted values [1]_. When resampling data, missing values may\n        appear (e.g., when the resampling frequency is higher than the original\n        frequency). The backward fill will replace NaN values that appeared in\n        the resampled data with the next value in the original sequence.\n        Missing values that existed in the original data will not be modified.\n\n        Parameters\n        ----------\n        limit : int, optional\n            Limit of how many values to fill.\n\n        Returns\n        -------\n        Series, DataFrame\n            An upsampled Series or DataFrame with backward filled NaN values.\n\n        See Also\n        --------\n        bfill : Alias of backfill.\n        fillna : Fill NaN values using the specified method, which can be\n            'backfill'.\n        nearest : Fill NaN values with nearest neighbor starting from center.\n        pad : Forward fill NaN values.\n        Series.fillna : Fill NaN values in the Series using the\n            specified method, which can be 'backfill'.\n        DataFrame.fillna : Fill NaN values in the DataFrame using the\n            specified method, which can be 'backfill'.\n\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 02:00:00    3\n        Freq: H, dtype: int64\n\n        >>> s.resample('30min').backfill()\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('15min').backfill(limit=2)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    NaN\n        2018-01-01 00:30:00    2.0\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:15:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 01:45:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 15T, dtype: float64\n\n        Resampling a DataFrame that has missing values:\n\n        >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n        ...                   index=pd.date_range('20180101', periods=3,\n        ...                                       freq='h'))\n        >>> df\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('30min').backfill()\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 00:30:00  NaN  3\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 01:30:00  6.0  5\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('15min').backfill(limit=2)\n                               a    b\n        2018-01-01 00:00:00  2.0  1.0\n        2018-01-01 00:15:00  NaN  NaN\n        2018-01-01 00:30:00  NaN  3.0\n        2018-01-01 00:45:00  NaN  3.0\n        2018-01-01 01:00:00  NaN  3.0\n        2018-01-01 01:15:00  NaN  NaN\n        2018-01-01 01:30:00  6.0  5.0\n        2018-01-01 01:45:00  6.0  5.0\n        2018-01-01 02:00:00  6.0  5.0\n        \"\"\"\n        return self._upsample(\"backfill\", limit=limit)",
        "begin_line": 522,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.fillna#627",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.fillna(self, method, limit=None)",
        "snippet": "    def fillna(self, method, limit=None):\n        \"\"\"\n        Fill missing values introduced by upsampling.\n\n        In statistics, imputation is the process of replacing missing data with\n        substituted values [1]_. When resampling data, missing values may\n        appear (e.g., when the resampling frequency is higher than the original\n        frequency).\n\n        Missing values that existed in the original data will\n        not be modified.\n\n        Parameters\n        ----------\n        method : {'pad', 'backfill', 'ffill', 'bfill', 'nearest'}\n            Method to use for filling holes in resampled data\n\n            * 'pad' or 'ffill': use previous valid observation to fill gap\n              (forward fill).\n            * 'backfill' or 'bfill': use next valid observation to fill gap.\n            * 'nearest': use nearest valid observation to fill gap.\n\n        limit : int, optional\n            Limit of how many consecutive missing values to fill.\n\n        Returns\n        -------\n        Series or DataFrame\n            An upsampled Series or DataFrame with missing values filled.\n\n        See Also\n        --------\n        backfill : Backward fill NaN values in the resampled data.\n        pad : Forward fill NaN values in the resampled data.\n        nearest : Fill NaN values in the resampled data\n            with nearest neighbor starting from center.\n        interpolate : Fill NaN values using interpolation.\n        Series.fillna : Fill NaN values in the Series using the\n            specified method, which can be 'bfill' and 'ffill'.\n        DataFrame.fillna : Fill NaN values in the DataFrame using the\n            specified method, which can be 'bfill' and 'ffill'.\n\n        References\n        ----------\n        .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n        Examples\n        --------\n        Resampling a Series:\n\n        >>> s = pd.Series([1, 2, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> s\n        2018-01-01 00:00:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 02:00:00    3\n        Freq: H, dtype: int64\n\n        Without filling the missing values you get:\n\n        >>> s.resample(\"30min\").asfreq()\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:30:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> s.resample('30min').fillna(\"backfill\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('15min').fillna(\"backfill\", limit=2)\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:15:00    NaN\n        2018-01-01 00:30:00    2.0\n        2018-01-01 00:45:00    2.0\n        2018-01-01 01:00:00    2.0\n        2018-01-01 01:15:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 01:45:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 15T, dtype: float64\n\n        >>> s.resample('30min').fillna(\"pad\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    1\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    2\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        >>> s.resample('30min').fillna(\"nearest\")\n        2018-01-01 00:00:00    1\n        2018-01-01 00:30:00    2\n        2018-01-01 01:00:00    2\n        2018-01-01 01:30:00    3\n        2018-01-01 02:00:00    3\n        Freq: 30T, dtype: int64\n\n        Missing values present before the upsampling are not affected.\n\n        >>> sm = pd.Series([1, None, 3],\n        ...               index=pd.date_range('20180101', periods=3, freq='h'))\n        >>> sm\n        2018-01-01 00:00:00    1.0\n        2018-01-01 01:00:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: H, dtype: float64\n\n        >>> sm.resample('30min').fillna('backfill')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> sm.resample('30min').fillna('pad')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    1.0\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    NaN\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        >>> sm.resample('30min').fillna('nearest')\n        2018-01-01 00:00:00    1.0\n        2018-01-01 00:30:00    NaN\n        2018-01-01 01:00:00    NaN\n        2018-01-01 01:30:00    3.0\n        2018-01-01 02:00:00    3.0\n        Freq: 30T, dtype: float64\n\n        DataFrame resampling is done column-wise. All the same options are\n        available.\n\n        >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n        ...                   index=pd.date_range('20180101', periods=3,\n        ...                                       freq='h'))\n        >>> df\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 02:00:00  6.0  5\n\n        >>> df.resample('30min').fillna(\"bfill\")\n                               a  b\n        2018-01-01 00:00:00  2.0  1\n        2018-01-01 00:30:00  NaN  3\n        2018-01-01 01:00:00  NaN  3\n        2018-01-01 01:30:00  6.0  5\n        2018-01-01 02:00:00  6.0  5\n        \"\"\"\n        return self._upsample(method, limit=limit)",
        "begin_line": 627,
        "end_line": 785,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.interpolate#788",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
        "snippet": "    def interpolate(\n        self,\n        method=\"linear\",\n        axis=0,\n        limit=None,\n        inplace=False,\n        limit_direction=\"forward\",\n        limit_area=None,\n        downcast=None,\n        **kwargs,\n    ):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        result = self._upsample(None)\n        return result.interpolate(\n            method=method,\n            axis=axis,\n            limit=limit,\n            inplace=inplace,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            downcast=downcast,\n            **kwargs,\n        )",
        "begin_line": 788,
        "end_line": 812,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.asfreq#814",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.asfreq(self, fill_value=None)",
        "snippet": "    def asfreq(self, fill_value=None):\n        \"\"\"\n        Return the values at the new freq, essentially a reindex.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n        Returns\n        -------\n        DataFrame or Series\n            Values at the specified freq.\n\n        See Also\n        --------\n        Series.asfreq\n        DataFrame.asfreq\n        \"\"\"\n        return self._upsample(\"asfreq\", fill_value=fill_value)",
        "begin_line": 814,
        "end_line": 834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.std#836",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.std(self, ddof=1, *args, **kwargs)",
        "snippet": "    def std(self, ddof=1, *args, **kwargs):\n        \"\"\"\n        Compute standard deviation of groups, excluding missing values.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        DataFrame or Series\n            Standard deviation of values within each group.\n        \"\"\"\n        nv.validate_resampler_func(\"std\", args, kwargs)\n        return self._downsample(\"std\", ddof=ddof)",
        "begin_line": 836,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.var#853",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.var(self, ddof=1, *args, **kwargs)",
        "snippet": "    def var(self, ddof=1, *args, **kwargs):\n        \"\"\"\n        Compute variance of groups, excluding missing values.\n\n        Parameters\n        ----------\n        ddof : int, default 1\n            Degrees of freedom.\n\n        Returns\n        -------\n        DataFrame or Series\n            Variance of values within each group.\n        \"\"\"\n        nv.validate_resampler_func(\"var\", args, kwargs)\n        return self._downsample(\"var\", ddof=ddof)",
        "begin_line": 853,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.size#871",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.size(self)",
        "snippet": "    def size(self):\n        result = self._downsample(\"size\")\n        if not len(self.ax):\n            from pandas import Series\n\n            if self._selected_obj.ndim == 1:\n                name = self._selected_obj.name\n            else:\n                name = None\n            result = Series([], index=result.index, dtype=\"int64\", name=name)\n        return result",
        "begin_line": 871,
        "end_line": 881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.count#884",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.count(self)",
        "snippet": "    def count(self):\n        result = self._downsample(\"count\")\n        if not len(self.ax):\n            if self._selected_obj.ndim == 1:\n                result = type(self._selected_obj)(\n                    [], index=result.index, dtype=\"int64\", name=self._selected_obj.name\n                )\n            else:\n                from pandas import DataFrame\n\n                result = DataFrame(\n                    [], index=result.index, columns=result.columns, dtype=\"int64\"\n                )\n\n        return result",
        "begin_line": 884,
        "end_line": 898,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.Resampler.quantile#900",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.Resampler",
        "signature": "pandas.core.resample.Resampler.quantile(self, q=0.5, **kwargs)",
        "snippet": "    def quantile(self, q=0.5, **kwargs):\n        \"\"\"\n        Return value at the given quantile.\n\n        .. versionadded:: 0.24.0\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n\n        Returns\n        -------\n        DataFrame or Series\n            Quantile of values within each group.\n\n        See Also\n        --------\n        Series.quantile\n        DataFrame.quantile\n        DataFrameGroupBy.quantile\n        \"\"\"\n        return self._downsample(\"quantile\", q=q, **kwargs)",
        "begin_line": 900,
        "end_line": 921,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.f#927",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.f(self, _method=method, min_count=0, *args, **kwargs)",
        "snippet": "    def f(self, _method=method, min_count=0, *args, **kwargs):\n        nv.validate_resampler_func(_method, args, kwargs)\n        return self._downsample(_method, min_count=min_count)",
        "begin_line": 927,
        "end_line": 929,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.g#938",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.g(self, _method=method, *args, **kwargs)",
        "snippet": "    def g(self, _method=method, *args, **kwargs):\n        nv.validate_resampler_func(_method, args, kwargs)\n        return self._downsample(_method)",
        "begin_line": 938,
        "end_line": 940,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.h#949",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.h(self, _method=method)",
        "snippet": "    def h(self, _method=method):\n        return self._downsample(_method)",
        "begin_line": 949,
        "end_line": 950,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._maybe_process_deprecations#956",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._maybe_process_deprecations(r, how=None, fill_method=None, limit=None)",
        "snippet": "def _maybe_process_deprecations(r, how=None, fill_method=None, limit=None):\n    \"\"\"\n    Potentially we might have a deprecation warning, show it\n    but call the appropriate methods anyhow.\n    \"\"\"\n\n    if how is not None:\n\n        # .resample(..., how='sum')\n        if isinstance(how, str):\n            method = \"{0}()\".format(how)\n\n            # .resample(..., how=lambda x: ....)\n        else:\n            method = \".apply(<func>)\"\n\n        # if we have both a how and fill_method, then show\n        # the following warning\n        if fill_method is None:\n            warnings.warn(\n                \"how in .resample() is deprecated\\n\"\n                \"the new syntax is \"\n                \".resample(...).{method}\".format(method=method),\n                FutureWarning,\n                stacklevel=3,\n            )\n        r = r.aggregate(how)\n\n    if fill_method is not None:\n\n        # show the prior function call\n        method = \".\" + method if how is not None else \"\"\n\n        args = \"limit={0}\".format(limit) if limit is not None else \"\"\n        warnings.warn(\n            \"fill_method is deprecated to .resample()\\n\"\n            \"the new syntax is .resample(...){method}\"\n            \".{fill_method}({args})\".format(\n                method=method, fill_method=fill_method, args=args\n            ),\n            FutureWarning,\n            stacklevel=3,\n        )\n\n        if how is not None:\n            r = getattr(r, fill_method)(limit=limit)\n        else:\n            r = r.aggregate(fill_method, limit=limit)\n\n    return r",
        "begin_line": 956,
        "end_line": 1005,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._GroupByMixin.__init__#1013",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample._GroupByMixin",
        "signature": "pandas.core.resample._GroupByMixin.__init__(self, obj, *args, **kwargs)",
        "snippet": "    def __init__(self, obj, *args, **kwargs):\n\n        parent = kwargs.pop(\"parent\", None)\n        groupby = kwargs.pop(\"groupby\", None)\n        if parent is None:\n            parent = obj\n\n        # initialize our GroupByMixin object with\n        # the resampler attributes\n        for attr in self._attributes:\n            setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))\n\n        super().__init__(None)\n        self._groupby = groupby\n        self._groupby.mutated = True\n        self._groupby.grouper.mutated = True\n        self.groupby = copy.copy(parent.groupby)",
        "begin_line": 1013,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._GroupByMixin._apply#1032",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample._GroupByMixin",
        "signature": "pandas.core.resample._GroupByMixin._apply(self, f, grouper=None, *args, **kwargs)",
        "snippet": "    def _apply(self, f, grouper=None, *args, **kwargs):\n        \"\"\"\n        Dispatch to _upsample; we are stripping all of the _upsample kwargs and\n        performing the original function call on the grouped object.\n        \"\"\"\n\n        def func(x):\n            x = self._shallow_copy(x, groupby=self.groupby)\n\n            if isinstance(f, str):\n                return getattr(x, f)(**kwargs)\n\n            return x.apply(f, *args, **kwargs)\n\n        result = self._groupby.apply(func)\n        return self._wrap_result(result)",
        "begin_line": 1032,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping#1056",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return DatetimeIndexResamplerGroupby",
        "begin_line": 1056,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._get_binner_for_time#1059",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n\n        # this is how we are actually creating the bins\n        if self.kind == \"period\":\n            return self.groupby._get_time_period_bins(self.ax)\n        return self.groupby._get_time_bins(self.ax)",
        "begin_line": 1059,
        "end_line": 1064,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._downsample#1066",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._downsample(self, how, **kwargs)",
        "snippet": "    def _downsample(self, how, **kwargs):\n        \"\"\"\n        Downsample the cython defined function.\n\n        Parameters\n        ----------\n        how : string / cython mapped function\n        **kwargs : kw args passed to how function\n        \"\"\"\n        self._set_binner()\n        how = self._get_cython_func(how) or how\n        ax = self.ax\n        obj = self._selected_obj\n\n        if not len(ax):\n            # reset to the new freq\n            obj = obj.copy()\n            # TODO: find a less code-smelly way to set this\n            obj.index._data._freq = self.freq\n            return obj\n\n        # do we have a regular frequency\n        if ax.freq is not None or ax.inferred_freq is not None:\n\n            if len(self.grouper.binlabels) > len(ax) and how is None:\n\n                # let's do an asfreq\n                return self.asfreq()\n\n        # we are downsampling\n        # we want to call the actual grouper method here\n        result = obj.groupby(self.grouper, axis=self.axis).aggregate(how, **kwargs)\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 1066,
        "end_line": 1100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample#1102",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample(self, binner)",
        "snippet": "    def _adjust_binner_for_upsample(self, binner):\n        \"\"\"\n        Adjust our binner when upsampling.\n\n        The range of a new index should not be outside specified range\n        \"\"\"\n        if self.closed == \"right\":\n            binner = binner[1:]\n        else:\n            binner = binner[:-1]\n        return binner",
        "begin_line": 1102,
        "end_line": 1112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._upsample#1114",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._upsample(self, method, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, method, limit=None, fill_value=None):\n        \"\"\"\n        Parameters\n        ----------\n        method : string {'backfill', 'bfill', 'pad',\n            'ffill', 'asfreq'} method for upsampling\n        limit : int, default None\n            Maximum size gap to fill when reindexing\n        fill_value : scalar, default None\n            Value to use for missing values\n\n        See Also\n        --------\n        .fillna\n\n        \"\"\"\n        self._set_binner()\n        if self.axis:\n            raise AssertionError(\"axis must be 0\")\n        if self._from_selection:\n            raise ValueError(\n                \"Upsampling from level= or on= selection\"\n                \" is not supported, use .set_index(...)\"\n                \" to explicitly set index to\"\n                \" datetime-like\"\n            )\n\n        ax = self.ax\n        obj = self._selected_obj\n        binner = self.binner\n        res_index = self._adjust_binner_for_upsample(binner)\n\n        # if we have the same frequency as our axis, then we are equal sampling\n        if limit is None and to_offset(ax.inferred_freq) == self.freq:\n            result = obj.copy()\n            result.index = res_index\n        else:\n            result = obj.reindex(\n                res_index, method=method, limit=limit, fill_value=fill_value\n            )\n\n        result = self._apply_loffset(result)\n        return self._wrap_result(result)",
        "begin_line": 1114,
        "end_line": 1156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResampler._wrap_result#1158",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResampler",
        "signature": "pandas.core.resample.DatetimeIndexResampler._wrap_result(self, result)",
        "snippet": "    def _wrap_result(self, result):\n        result = super()._wrap_result(result)\n\n        # we may have a different kind that we were asked originally\n        # convert if needed\n        if self.kind == \"period\" and not isinstance(result.index, PeriodIndex):\n            result.index = result.index.to_period(self.freq)\n        return result",
        "begin_line": 1158,
        "end_line": 1165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.DatetimeIndexResamplerGroupby._constructor#1174",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.DatetimeIndexResamplerGroupby",
        "signature": "pandas.core.resample.DatetimeIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return DatetimeIndexResampler",
        "begin_line": 1174,
        "end_line": 1175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._resampler_for_grouping#1180",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return PeriodIndexResamplerGroupby",
        "begin_line": 1180,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._get_binner_for_time#1183",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        if self.kind == \"timestamp\":\n            return super()._get_binner_for_time()\n        return self.groupby._get_period_bins(self.ax)",
        "begin_line": 1183,
        "end_line": 1186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._convert_obj#1188",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._convert_obj(self, obj)",
        "snippet": "    def _convert_obj(self, obj):\n        obj = super()._convert_obj(obj)\n\n        if self._from_selection:\n            # see GH 14008, GH 12871\n            msg = (\n                \"Resampling from level= or on= selection\"\n                \" with a PeriodIndex is not currently supported,\"\n                \" use .set_index(...) to explicitly set index\"\n            )\n            raise NotImplementedError(msg)\n\n        if self.loffset is not None:\n            # Cannot apply loffset/timedelta to PeriodIndex -> convert to\n            # timestamps\n            self.kind = \"timestamp\"\n\n        # convert to timestamp\n        if self.kind == \"timestamp\":\n            obj = obj.to_timestamp(how=self.convention)\n\n        return obj",
        "begin_line": 1188,
        "end_line": 1209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._downsample#1211",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._downsample(self, how, **kwargs)",
        "snippet": "    def _downsample(self, how, **kwargs):\n        \"\"\"\n        Downsample the cython defined function.\n\n        Parameters\n        ----------\n        how : string / cython mapped function\n        **kwargs : kw args passed to how function\n        \"\"\"\n\n        # we may need to actually resample as if we are timestamps\n        if self.kind == \"timestamp\":\n            return super()._downsample(how, **kwargs)\n\n        how = self._get_cython_func(how) or how\n        ax = self.ax\n\n        if is_subperiod(ax.freq, self.freq):\n            # Downsampling\n            return self._groupby_and_aggregate(how, grouper=self.grouper, **kwargs)\n        elif is_superperiod(ax.freq, self.freq):\n            if how == \"ohlc\":\n                # GH #13083\n                # upsampling to subperiods is handled as an asfreq, which works\n                # for pure aggregating/reducing methods\n                # OHLC reduces along the time dimension, but creates multiple\n                # values for each period -> handle by _groupby_and_aggregate()\n                return self._groupby_and_aggregate(how, grouper=self.grouper)\n            return self.asfreq()\n        elif ax.freq == self.freq:\n            return self.asfreq()\n\n        raise IncompatibleFrequency(\n            \"Frequency {} cannot be resampled to {}, as they are not \"\n            \"sub or super periods\".format(ax.freq, self.freq)\n        )",
        "begin_line": 1211,
        "end_line": 1246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResampler._upsample#1248",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResampler",
        "signature": "pandas.core.resample.PeriodIndexResampler._upsample(self, method, limit=None, fill_value=None)",
        "snippet": "    def _upsample(self, method, limit=None, fill_value=None):\n        \"\"\"\n        Parameters\n        ----------\n        method : string {'backfill', 'bfill', 'pad', 'ffill'}\n            Method for upsampling.\n        limit : int, default None\n            Maximum size gap to fill when reindexing.\n        fill_value : scalar, default None\n            Value to use for missing values.\n\n        See Also\n        --------\n        .fillna\n\n        \"\"\"\n\n        # we may need to actually resample as if we are timestamps\n        if self.kind == \"timestamp\":\n            return super()._upsample(method, limit=limit, fill_value=fill_value)\n\n        self._set_binner()\n        ax = self.ax\n        obj = self.obj\n        new_index = self.binner\n\n        # Start vs. end of period\n        memb = ax.asfreq(self.freq, how=self.convention)\n\n        # Get the fill indexer\n        indexer = memb.get_indexer(new_index, method=method, limit=limit)\n        return self._wrap_result(\n            _take_new_index(obj, indexer, new_index, axis=self.axis)\n        )",
        "begin_line": 1248,
        "end_line": 1281,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.PeriodIndexResamplerGroupby._constructor#1290",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.PeriodIndexResamplerGroupby",
        "signature": "pandas.core.resample.PeriodIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return PeriodIndexResampler",
        "begin_line": 1290,
        "end_line": 1291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping#1296",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping(self)",
        "snippet": "    def _resampler_for_grouping(self):\n        return TimedeltaIndexResamplerGroupby",
        "begin_line": 1296,
        "end_line": 1297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time#1299",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time(self)",
        "snippet": "    def _get_binner_for_time(self):\n        return self.groupby._get_time_delta_bins(self.ax)",
        "begin_line": 1299,
        "end_line": 1300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample#1302",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResampler",
        "signature": "pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample(self, binner)",
        "snippet": "    def _adjust_binner_for_upsample(self, binner):\n        \"\"\"\n        Adjust our binner when upsampling.\n\n        The range of a new index is allowed to be greater than original range\n        so we don't need to change the length of a binner, GH 13022\n        \"\"\"\n        return binner",
        "begin_line": 1302,
        "end_line": 1309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor#1318",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimedeltaIndexResamplerGroupby",
        "signature": "pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor(self)",
        "snippet": "    def _constructor(self):\n        return TimedeltaIndexResampler",
        "begin_line": 1318,
        "end_line": 1319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.resample#1322",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.resample(obj, kind=None, **kwds)",
        "snippet": "def resample(obj, kind=None, **kwds):\n    \"\"\"\n    Create a TimeGrouper and return our resampler.\n    \"\"\"\n    tg = TimeGrouper(**kwds)\n    return tg._get_resampler(obj, kind=kind)",
        "begin_line": 1322,
        "end_line": 1327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.get_resampler_for_grouping#1333",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.get_resampler_for_grouping(groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs)",
        "snippet": "def get_resampler_for_grouping(\n    groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs\n):\n    \"\"\"\n    Return our appropriate resampler when grouping as well.\n    \"\"\"\n\n    # .resample uses 'on' similar to how .groupby uses 'key'\n    kwargs[\"key\"] = kwargs.pop(\"on\", None)\n\n    tg = TimeGrouper(freq=rule, **kwargs)\n    resampler = tg._get_resampler(groupby.obj, kind=kind)\n    r = resampler._get_resampler_for_grouping(groupby=groupby)\n    return _maybe_process_deprecations(r, how=how, fill_method=fill_method, limit=limit)",
        "begin_line": 1333,
        "end_line": 1346,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper.__init__#1372",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper.__init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs)",
        "snippet": "    def __init__(\n        self,\n        freq=\"Min\",\n        closed=None,\n        label=None,\n        how=\"mean\",\n        axis=0,\n        fill_method=None,\n        limit=None,\n        loffset=None,\n        kind=None,\n        convention=None,\n        base=0,\n        **kwargs,\n    ):\n        # Check for correctness of the keyword arguments which would\n        # otherwise silently use the default if misspelled\n        if label not in {None, \"left\", \"right\"}:\n            raise ValueError(\"Unsupported value {} for `label`\".format(label))\n        if closed not in {None, \"left\", \"right\"}:\n            raise ValueError(\"Unsupported value {} for `closed`\".format(closed))\n        if convention not in {None, \"start\", \"end\", \"e\", \"s\"}:\n            raise ValueError(\"Unsupported value {} for `convention`\".format(convention))\n\n        freq = to_offset(freq)\n\n        end_types = {\"M\", \"A\", \"Q\", \"BM\", \"BA\", \"BQ\", \"W\"}\n        rule = freq.rule_code\n        if rule in end_types or (\"-\" in rule and rule[: rule.find(\"-\")] in end_types):\n            if closed is None:\n                closed = \"right\"\n            if label is None:\n                label = \"right\"\n        else:\n            if closed is None:\n                closed = \"left\"\n            if label is None:\n                label = \"left\"\n\n        self.closed = closed\n        self.label = label\n        self.kind = kind\n\n        self.convention = convention or \"E\"\n        self.convention = self.convention.lower()\n\n        if isinstance(loffset, str):\n            loffset = to_offset(loffset)\n        self.loffset = loffset\n\n        self.how = how\n        self.fill_method = fill_method\n        self.limit = limit\n        self.base = base\n\n        # always sort time groupers\n        kwargs[\"sort\"] = True\n\n        super().__init__(freq=freq, axis=axis, **kwargs)",
        "begin_line": 1372,
        "end_line": 1430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_resampler#1432",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_resampler(self, obj, kind=None)",
        "snippet": "    def _get_resampler(self, obj, kind=None):\n        \"\"\"\n        Return my resampler or raise if we have an invalid axis.\n\n        Parameters\n        ----------\n        obj : input object\n        kind : string, optional\n            'period','timestamp','timedelta' are valid\n\n        Returns\n        -------\n        a Resampler\n\n        Raises\n        ------\n        TypeError if incompatible axis\n\n        \"\"\"\n        self._set_grouper(obj)\n\n        ax = self.ax\n        if isinstance(ax, DatetimeIndex):\n            return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n        elif isinstance(ax, PeriodIndex) or kind == \"period\":\n            return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n        elif isinstance(ax, TimedeltaIndex):\n            return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n\n        raise TypeError(\n            \"Only valid with DatetimeIndex, \"\n            \"TimedeltaIndex or PeriodIndex, \"\n            \"but got an instance of '{typ}'\".format(typ=type(ax).__name__)\n        )",
        "begin_line": 1432,
        "end_line": 1465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_grouper#1467",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_grouper(self, obj, validate=True)",
        "snippet": "    def _get_grouper(self, obj, validate=True):\n        # create the resampler and return our binner\n        r = self._get_resampler(obj)\n        r._set_binner()\n        return r.binner, r.grouper, r.obj",
        "begin_line": 1467,
        "end_line": 1471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_bins#1473",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_bins(self, ax)",
        "snippet": "    def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                \"an instance of {typ}\".format(typ=type(ax).__name__)\n            )\n\n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n        # GH #12037\n        # use first/last directly instead of call replace() on them\n        # because replace() will swallow the nanosecond part\n        # thus last bin maybe slightly before the end if the end contains\n        # nanosecond part and lead to `Values falls after last bin` error\n        binner = labels = date_range(\n            freq=self.freq,\n            start=first,\n            end=last,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n\n        ax_values = ax.asi8\n        binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n        # general version, knowing nothing about relative frequencies\n        bins = lib.generate_bins_dt64(\n            ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n        )\n\n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n\n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n\n        return binner, bins, labels",
        "begin_line": 1473,
        "end_line": 1527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._adjust_bin_edges#1529",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._adjust_bin_edges(self, binner, ax_values)",
        "snippet": "    def _adjust_bin_edges(self, binner, ax_values):\n        # Some hacks for > daily data, see #1471, #1458, #1483\n\n        if self.freq != \"D\" and is_superperiod(self.freq, \"D\"):\n            if self.closed == \"right\":\n                # GH 21459, GH 9119: Adjust the bins relative to the wall time\n                bin_edges = binner.tz_localize(None)\n                bin_edges = bin_edges + timedelta(1) - Nano(1)\n                bin_edges = bin_edges.tz_localize(binner.tz).asi8\n            else:\n                bin_edges = binner.asi8\n\n            # intraday values on last day\n            if bin_edges[-2] > ax_values.max():\n                bin_edges = bin_edges[:-1]\n                binner = binner[:-1]\n        else:\n            bin_edges = binner.asi8\n        return binner, bin_edges",
        "begin_line": 1529,
        "end_line": 1547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_delta_bins#1549",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_delta_bins(self, ax)",
        "snippet": "    def _get_time_delta_bins(self, ax):\n        if not isinstance(ax, TimedeltaIndex):\n            raise TypeError(\n                \"axis must be a TimedeltaIndex, but got \"\n                \"an instance of {typ}\".format(typ=type(ax).__name__)\n            )\n\n        if not len(ax):\n            binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        start, end = ax.min(), ax.max()\n        labels = binner = timedelta_range(\n            start=start, end=end, freq=self.freq, name=ax.name\n        )\n\n        end_stamps = labels + self.freq\n        bins = ax.searchsorted(end_stamps, side=\"left\")\n\n        # Addresses GH #10530\n        if self.base > 0:\n            labels += type(self.freq)(self.base)\n\n        return binner, bins, labels",
        "begin_line": 1549,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_time_period_bins#1574",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_time_period_bins(self, ax)",
        "snippet": "    def _get_time_period_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                \"an instance of {typ}\".format(typ=type(ax).__name__)\n            )\n\n        freq = self.freq\n\n        if not len(ax):\n            binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n            return binner, [], labels\n\n        labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n\n        end_stamps = (labels + freq).asfreq(freq, \"s\").to_timestamp()\n        if ax.tzinfo:\n            end_stamps = end_stamps.tz_localize(ax.tzinfo)\n        bins = ax.searchsorted(end_stamps, side=\"left\")\n\n        return binner, bins, labels",
        "begin_line": 1574,
        "end_line": 1594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.TimeGrouper._get_period_bins#1596",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample.TimeGrouper",
        "signature": "pandas.core.resample.TimeGrouper._get_period_bins(self, ax)",
        "snippet": "    def _get_period_bins(self, ax):\n        if not isinstance(ax, PeriodIndex):\n            raise TypeError(\n                \"axis must be a PeriodIndex, but got \"\n                \"an instance of {typ}\".format(typ=type(ax).__name__)\n            )\n\n        memb = ax.asfreq(self.freq, how=self.convention)\n\n        # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n        nat_count = 0\n        if memb.hasnans:\n            nat_count = np.sum(memb._isnan)\n            memb = memb[~memb._isnan]\n\n        # if index contains no valid (non-NaT) values, return empty index\n        if not len(memb):\n            binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n\n        freq_mult = self.freq.n\n\n        start = ax.min().asfreq(self.freq, how=self.convention)\n        end = ax.max().asfreq(self.freq, how=\"end\")\n        bin_shift = 0\n\n        # GH 23882\n        if self.base:\n            # get base adjusted bin edge labels\n            p_start, end = _get_period_range_edges(\n                start, end, self.freq, closed=self.closed, base=self.base\n            )\n\n            # Get offset for bin edge (not label edge) adjustment\n            start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n            bin_shift = start_offset.n % freq_mult\n            start = p_start\n\n        labels = binner = period_range(\n            start=start, end=end, freq=self.freq, name=ax.name\n        )\n\n        i8 = memb.asi8\n\n        # when upsampling to subperiods, we need to generate enough bins\n        expected_bins_count = len(binner) * freq_mult\n        i8_extend = expected_bins_count - (i8[-1] - i8[0])\n        rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n        rng += freq_mult\n        # adjust bin edge indexes to account for base\n        rng -= bin_shift\n        bins = memb.searchsorted(rng, side=\"left\")\n\n        if nat_count > 0:\n            # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n            # shift bins by the number of NaT\n            bins += nat_count\n            bins = np.insert(bins, 0, nat_count)\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n\n        return binner, bins, labels",
        "begin_line": 1596,
        "end_line": 1657,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._take_new_index#1660",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._take_new_index(obj, indexer, new_index, axis=0)",
        "snippet": "def _take_new_index(obj, indexer, new_index, axis=0):\n\n    if isinstance(obj, ABCSeries):\n        new_values = algos.take_1d(obj.values, indexer)\n        return obj._constructor(new_values, index=new_index, name=obj.name)\n    elif isinstance(obj, ABCDataFrame):\n        if axis == 1:\n            raise NotImplementedError(\"axis 1 is not supported\")\n        return obj._constructor(\n            obj._data.reindex_indexer(new_axis=new_index, indexer=indexer, axis=1)\n        )\n    else:\n        raise ValueError(\"'obj' should be either a Series or a DataFrame\")",
        "begin_line": 1660,
        "end_line": 1672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._get_timestamp_range_edges#1675",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._get_timestamp_range_edges(first, last, offset, closed='left', base=0)",
        "snippet": "def _get_timestamp_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the `first` Timestamp to the preceding Timestamp that resides on\n    the provided offset. Adjust the `last` Timestamp to the following\n    Timestamp that resides on the provided offset. Input Timestamps that\n    already reside on the offset will be adjusted depending on the type of\n    offset and the `closed` parameter.\n\n    Parameters\n    ----------\n    first : pd.Timestamp\n        The beginning Timestamp of the range to be adjusted.\n    last : pd.Timestamp\n        The ending Timestamp of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Timestamps will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Timestamps.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Timestamp objects.\n    \"\"\"\n    if isinstance(offset, Tick):\n        if isinstance(offset, Day):\n            # _adjust_dates_anchored assumes 'D' means 24H, but first/last\n            # might contain a DST transition (23H, 24H, or 25H).\n            # So \"pretend\" the dates are naive when adjusting the endpoints\n            tz = first.tz\n            first = first.tz_localize(None)\n            last = last.tz_localize(None)\n\n        first, last = _adjust_dates_anchored(\n            first, last, offset, closed=closed, base=base\n        )\n        if isinstance(offset, Day):\n            first = first.tz_localize(tz)\n            last = last.tz_localize(tz)\n        return first, last\n\n    else:\n        first = first.normalize()\n        last = last.normalize()\n\n    if closed == \"left\":\n        first = Timestamp(offset.rollback(first))\n    else:\n        first = Timestamp(first - offset)\n\n    last = Timestamp(last + offset)\n\n    return first, last",
        "begin_line": 1675,
        "end_line": 1728,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._get_period_range_edges#1731",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._get_period_range_edges(first, last, offset, closed='left', base=0)",
        "snippet": "def _get_period_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the provided `first` and `last` Periods to the respective Period of\n    the given offset that encompasses them.\n\n    Parameters\n    ----------\n    first : pd.Period\n        The beginning Period of the range to be adjusted.\n    last : pd.Period\n        The ending Period of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Periods will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Periods.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Period objects.\n    \"\"\"\n    if not all(isinstance(obj, Period) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type Period\")\n\n    # GH 23882\n    first = first.to_timestamp()\n    last = last.to_timestamp()\n    adjust_first = not offset.onOffset(first)\n    adjust_last = offset.onOffset(last)\n\n    first, last = _get_timestamp_range_edges(\n        first, last, offset, closed=closed, base=base\n    )\n\n    first = (first + adjust_first * offset).to_period(offset)\n    last = (last - adjust_last * offset).to_period(offset)\n    return first, last",
        "begin_line": 1731,
        "end_line": 1768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample._adjust_dates_anchored#1771",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample._adjust_dates_anchored(first, last, offset, closed='right', base=0)",
        "snippet": "def _adjust_dates_anchored(first, last, offset, closed=\"right\", base=0):\n    # First and last offsets should be calculated from the start day to fix an\n    # error cause by resampling across multiple days when a one day period is\n    # not a multiple of the frequency.\n    #\n    # See https://github.com/pandas-dev/pandas/issues/8683\n\n    # GH 10117 & GH 19375. If first and last contain timezone information,\n    # Perform the calculation in UTC in order to avoid localizing on an\n    # Ambiguous or Nonexistent time.\n    first_tzinfo = first.tzinfo\n    last_tzinfo = last.tzinfo\n    start_day_nanos = first.normalize().value\n    if first_tzinfo is not None:\n        first = first.tz_convert(\"UTC\")\n    if last_tzinfo is not None:\n        last = last.tz_convert(\"UTC\")\n\n    base_nanos = (base % offset.n) * offset.nanos // offset.n\n    start_day_nanos += base_nanos\n\n    foffset = (first.value - start_day_nanos) % offset.nanos\n    loffset = (last.value - start_day_nanos) % offset.nanos\n\n    if closed == \"right\":\n        if foffset > 0:\n            # roll back\n            fresult = first.value - foffset\n        else:\n            fresult = first.value - offset.nanos\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            # already the end of the road\n            lresult = last.value\n    else:  # closed == 'left'\n        if foffset > 0:\n            fresult = first.value - foffset\n        else:\n            # start of the road\n            fresult = first.value\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            lresult = last.value + offset.nanos\n    fresult = Timestamp(fresult)\n    lresult = Timestamp(lresult)\n    if first_tzinfo is not None:\n        fresult = fresult.tz_localize(\"UTC\").tz_convert(first_tzinfo)\n    if last_tzinfo is not None:\n        lresult = lresult.tz_localize(\"UTC\").tz_convert(last_tzinfo)\n    return fresult, lresult",
        "begin_line": 1771,
        "end_line": 1826,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.resample.asfreq#1829",
        "src_path": "pandas/core/resample.py",
        "class_name": "pandas.core.resample",
        "signature": "pandas.core.resample.asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None)",
        "snippet": "def asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None):\n    \"\"\"\n    Utility frequency conversion method for Series/DataFrame.\n    \"\"\"\n    if isinstance(obj.index, PeriodIndex):\n        if method is not None:\n            raise NotImplementedError(\"'method' argument is not supported\")\n\n        if how is None:\n            how = \"E\"\n\n        new_obj = obj.copy()\n        new_obj.index = obj.index.asfreq(freq, how=how)\n\n    elif len(obj.index) == 0:\n        new_obj = obj.copy()\n        new_obj.index = obj.index._shallow_copy(freq=to_offset(freq))\n\n    else:\n        dti = date_range(obj.index[0], obj.index[-1], freq=freq)\n        dti.name = obj.index.name\n        new_obj = obj.reindex(dti, method=method, fill_value=fill_value)\n        if normalize:\n            new_obj.index = new_obj.index.normalize()\n\n    return new_obj",
        "begin_line": 1829,
        "end_line": 1854,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical._cat_compare_op#62",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._cat_compare_op(op)",
        "snippet": "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
        "begin_line": 62,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.func#66",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.func(self, other)",
        "snippet": "    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )",
        "begin_line": 66,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.contains#144",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.contains(cat, key, container)",
        "snippet": "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
        "begin_line": 144,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#311",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype._ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                if len(values) == 0:\n                    sanitize_dtype = \"object\"\n                else:\n                    sanitize_dtype = None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError:\n                codes, categories = factorize(values, sort=False)\n                if dtype._ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    )\n            except ValueError:\n\n                # FIXME\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                )\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype._ordered)\n\n        elif is_categorical_dtype(values):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = _recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 311,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#396",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 396,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.195403010965863e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#427",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self, categories)",
        "snippet": "    def categories(self, categories):\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n        if self.dtype.categories is not None and len(self.dtype.categories) != len(\n            new_dtype.categories\n        ):\n            raise ValueError(\n                \"new categories need to have the same number of \"\n                \"items as the old categories!\"\n            )\n        self._dtype = new_dtype",
        "begin_line": 427,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#439",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype._ordered",
        "begin_line": 439,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.89893066574681e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#446",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 446,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.186587478346944e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._ndarray_values#453",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        return self.codes",
        "begin_line": 453,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._constructor#457",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Categorical\"]:\n        return Categorical",
        "begin_line": 457,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.964758322886195e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.copy#468",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.copy(self)",
        "snippet": "    def copy(self) -> \"Categorical\":\n        \"\"\"\n        Copy constructor.\n        \"\"\"\n        return self._constructor(\n            values=self._codes.copy(), dtype=self.dtype, fastpath=True\n        )",
        "begin_line": 468,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.008199593524424e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.astype#476",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.astype(self, dtype: Dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n\n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_extension_array_dtype(dtype):\n            return array(self, dtype=dtype, copy=copy)  # type: ignore # GH 28770\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n        return np.array(self, dtype=dtype, copy=copy)",
        "begin_line": 476,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.tolist#518",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.tolist(self)",
        "snippet": "    def tolist(self) -> list:\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n        \"\"\"\n        return list(self)",
        "begin_line": 518,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.from_codes#593",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
        "snippet": "    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n\n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n\n        If your data does not follow this convention, please use the normal\n        constructor.\n\n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n\n            .. versionadded:: 0.24.0\n\n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n\n        Returns\n        -------\n        Categorical\n\n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n\n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n            msg = \"codes need to be array-like integers\"\n            if is_float_dtype(codes):\n                icodes = codes.astype(\"i8\")\n                if (icodes == codes).all():\n                    msg = None\n                    codes = icodes\n                    warn(\n                        (\n                            \"float codes will be disallowed in the future and \"\n                            \"raise a ValueError\"\n                        ),\n                        FutureWarning,\n                        stacklevel=2,\n                    )\n            if msg:\n                raise ValueError(msg)\n\n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n        return cls(codes, dtype=dtype, fastpath=True)",
        "begin_line": 593,
        "end_line": 669,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.5603883749918e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_codes#671",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_codes(self)",
        "snippet": "    def _get_codes(self):\n        \"\"\"\n        Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 671,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.229365227683299e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.set_categories#801",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
        "snippet": "    def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n        \"\"\"\n        Set the categories to the specified new_categories.\n\n        `new_categories` can include new categories (which will result in\n        unused categories) or remove old categories (which results in values\n        set to NaN). If `rename==True`, the categories will simple be renamed\n        (less or more items than in old categories will result in values set to\n        NaN or in unused categories respectively).\n\n        This method can be used to perform more than one action of adding,\n        removing, and reordering simultaneously and is therefore faster than\n        performing the individual steps via the more specialised methods.\n\n        On the other hand this methods does not do checks (e.g., whether the\n        old categories are included in the new categories on a reorder), which\n        can result in surprising changes, for example when using special string\n        dtypes, which does not considers a S1 string equal to a single char\n        python string.\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : bool, default False\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        rename : bool, default False\n           Whether or not the new_categories should be considered as a rename\n           of the old categories or as reordered categories.\n        inplace : bool, default False\n           Whether or not to reorder the categories in-place or return a copy\n           of this categorical with reordered categories.\n\n        Returns\n        -------\n        Categorical with reordered categories or None if inplace.\n\n        Raises\n        ------\n        ValueError\n            If new_categories does not validate as categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if ordered is None:\n            ordered = self.dtype._ordered\n        new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n        cat = self if inplace else self.copy()\n        if rename:\n            if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n                cat.dtype.categories\n            ):\n                # remove all _codes which are larger and set to -1/NaN\n                cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n        else:\n            codes = _recode_for_categories(\n                cat.codes, cat.categories, new_dtype.categories\n            )\n            cat._codes = codes\n        cat._dtype = new_dtype\n\n        if not inplace:\n            return cat",
        "begin_line": 801,
        "end_line": 872,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.rename_categories#874",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.rename_categories(self, new_categories, inplace=False)",
        "snippet": "    def rename_categories(self, new_categories, inplace=False):\n        \"\"\"\n        Rename categories.\n\n        Parameters\n        ----------\n        new_categories : list-like, dict-like or callable\n\n            New categories which will replace old categories.\n\n            * list-like: all items must be unique and the number of items in\n              the new categories must match the existing number of categories.\n\n            * dict-like: specifies a mapping from\n              old categories to new. Categories not contained in the mapping\n              are passed through and extra categories in the mapping are\n              ignored.\n\n            .. versionadded:: 0.21.0.\n\n            * callable : a callable that is called on all items in the old\n              categories and whose return values comprise the new categories.\n\n            .. versionadded:: 0.23.0.\n\n        inplace : bool, default False\n            Whether or not to rename the categories inplace or return a copy of\n            this categorical with renamed categories.\n\n        Returns\n        -------\n        cat : Categorical or None\n           With ``inplace=False``, the new categorical is returned.\n           With ``inplace=True``, there is no return value.\n\n        Raises\n        ------\n        ValueError\n            If new categories are list-like and do not have the same number of\n            items than the current categories or do not validate as categories\n\n        See Also\n        --------\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n\n        Examples\n        --------\n        >>> c = pd.Categorical(['a', 'a', 'b'])\n        >>> c.rename_categories([0, 1])\n        [0, 0, 1]\n        Categories (2, int64): [0, 1]\n\n        For dict-like ``new_categories``, extra keys are ignored and\n        categories not in the dictionary are passed through\n\n        >>> c.rename_categories({'a': 'A', 'c': 'C'})\n        [A, A, b]\n        Categories (2, object): [A, b]\n\n        You may also provide a callable to create the new categories\n\n        >>> c.rename_categories(lambda x: x.upper())\n        [A, A, B]\n        Categories (2, object): [A, B]\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        cat = self if inplace else self.copy()\n\n        if is_dict_like(new_categories):\n            cat.categories = [new_categories.get(item, item) for item in cat.categories]\n        elif callable(new_categories):\n            cat.categories = [new_categories(item) for item in cat.categories]\n        else:\n            cat.categories = new_categories\n        if not inplace:\n            return cat",
        "begin_line": 874,
        "end_line": 953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.shape#1229",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Shape of the Categorical.\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        shape : tuple\n        \"\"\"\n\n        return tuple([len(self._codes)])",
        "begin_line": 1229,
        "end_line": 1240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__array__#1282",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        numpy.array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype.\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an\n            # ndarray.\n            ret = np.asarray(ret)\n        return ret",
        "begin_line": 1282,
        "end_line": 1301,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.isna#1379",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values\n\n        Missing values (-1 in .codes) are detected.\n\n        Returns\n        -------\n        a boolean array of whether my values are null\n\n        See Also\n        --------\n        isna : Top-level isna.\n        isnull : Alias of isna.\n        Categorical.notna : Boolean inverse of Categorical.isna.\n\n        \"\"\"\n\n        ret = self._codes == -1\n        return ret",
        "begin_line": 1379,
        "end_line": 1398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.374707040404987e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._internal_get_values#1502",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        # if we are a datetime and period index, return Index to keep metadata\n        if needs_i8_conversion(self.categories):\n            return self.categories.take(self._codes, fill_value=np.nan)\n        elif is_integer_dtype(self.categories) and -1 in self._codes:\n            return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n        return np.array(self)",
        "begin_line": 1502,
        "end_line": 1508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._values_for_argsort#1519",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._codes.copy()",
        "begin_line": 1519,
        "end_line": 1520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.argsort#1522",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.argsort(self, ascending=True, kind='quicksort', *args, **kwargs)",
        "snippet": "    def argsort(self, ascending=True, kind=\"quicksort\", *args, **kwargs):\n        \"\"\"\n        Return the indices that would sort the Categorical.\n\n        .. versionchanged:: 0.25.0\n\n           Changed to sort missing values at the end.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending\n            or descending sort.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        *args, **kwargs:\n            passed through to :func:`numpy.argsort`.\n\n        Returns\n        -------\n        numpy.array\n\n        See Also\n        --------\n        numpy.ndarray.argsort\n\n        Notes\n        -----\n        While an ordering is applied to the category values, arg-sorting\n        in this context refers more to organizing and grouping together\n        based on matching category values. Thus, this function can be\n        called on an unordered Categorical instance unlike the functions\n        'Categorical.min' and 'Categorical.max'.\n\n        Examples\n        --------\n        >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n        array([2, 0, 1, 3])\n\n        >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n        ...                      categories=['c', 'b', 'a'],\n        ...                      ordered=True)\n        >>> cat.argsort()\n        array([3, 0, 1, 2])\n\n        Missing values are placed at the end\n\n        >>> cat = pd.Categorical([2, None, 1])\n        >>> cat.argsort()\n        array([2, 0, 1])\n        \"\"\"\n        return super().argsort(ascending=ascending, kind=kind, *args, **kwargs)",
        "begin_line": 1522,
        "end_line": 1573,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.sort_values#1575",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.sort_values(self, inplace=False, ascending=True, na_position='last')",
        "snippet": "    def sort_values(self, inplace=False, ascending=True, na_position=\"last\"):\n        \"\"\"\n        Sort the Categorical by category value returning a new\n        Categorical by default.\n\n        While an ordering is applied to the category values, sorting in this\n        context refers more to organizing and grouping together based on\n        matching category values. Thus, this function can be called on an\n        unordered Categorical instance unlike the functions 'Categorical.min'\n        and 'Categorical.max'.\n\n        Parameters\n        ----------\n        inplace : bool, default False\n            Do operation in place.\n        ascending : bool, default True\n            Order ascending. Passing False orders descending. The\n            ordering parameter provides the method by which the\n            category values are organized.\n        na_position : {'first', 'last'} (optional, default='last')\n            'first' puts NaNs at the beginning\n            'last' puts NaNs at the end\n\n        Returns\n        -------\n        Categorical or None\n\n        See Also\n        --------\n        Categorical.sort\n        Series.sort_values\n\n        Examples\n        --------\n        >>> c = pd.Categorical([1, 2, 2, 1, 5])\n        >>> c\n        [1, 2, 2, 1, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>> c.sort_values()\n        [1, 1, 2, 2, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>> c.sort_values(ascending=False)\n        [5, 2, 2, 1, 1]\n        Categories (3, int64): [1, 2, 5]\n\n        Inplace sorting can be done as well:\n\n        >>> c.sort_values(inplace=True)\n        >>> c\n        [1, 1, 2, 2, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>>\n        >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n        'sort_values' behaviour with NaNs. Note that 'na_position'\n        is independent of the 'ascending' parameter:\n\n        >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n        >>> c\n        [NaN, 2.0, 2.0, NaN, 5.0]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values()\n        [2.0, 2.0, 5.0, NaN, NaN]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(ascending=False)\n        [5.0, 2.0, 2.0, NaN, NaN]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(na_position='first')\n        [NaN, NaN, 2.0, 2.0, 5.0]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(ascending=False, na_position='first')\n        [NaN, NaN, 5.0, 2.0, 2.0]\n        Categories (2, int64): [2, 5]\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if na_position not in [\"last\", \"first\"]:\n            raise ValueError(f\"invalid na_position: {na_position!r}\")\n\n        sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n\n        if inplace:\n            self._codes = self._codes[sorted_idx]\n        else:\n            return self._constructor(\n                values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True\n            )",
        "begin_line": 1575,
        "end_line": 1660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.take#1794",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.take(self, indexer, allow_fill: bool=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill: bool = False, fill_value=None):\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of int\n            The indices in `self` to take. The meaning of negative values in\n            `indexer` depends on the value of `allow_fill`.\n        allow_fill : bool, default False\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n              (the default). These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n            .. versionchanged:: 1.0.0\n\n               Default value changed from ``True`` to ``False``.\n\n        fill_value : object\n            The value to use for `indices` that are missing (-1), when\n            ``allow_fill=True``. This should be the category, i.e. a value\n            in ``self.categories``, not a code.\n\n        Returns\n        -------\n        Categorical\n            This Categorical will have the same categories and ordered as\n            `self`.\n\n        See Also\n        --------\n        Series.take : Similar method for Series.\n        numpy.ndarray.take : Similar method for NumPy arrays.\n\n        Examples\n        --------\n        >>> cat = pd.Categorical(['a', 'a', 'b'])\n        >>> cat\n        [a, a, b]\n        Categories (2, object): [a, b]\n\n        Specify ``allow_fill==False`` to have negative indices mean indexing\n        from the right.\n\n        >>> cat.take([0, -1, -2], allow_fill=False)\n        [a, b, a]\n        Categories (2, object): [a, b]\n\n        With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n        values that should be filled with the `fill_value`, which is\n        ``np.nan`` by default.\n\n        >>> cat.take([0, -1, -1], allow_fill=True)\n        [a, NaN, NaN]\n        Categories (2, object): [a, b]\n\n        The fill value can be specified.\n\n        >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n        [a, a, a]\n        Categories (3, object): [a, b]\n\n        Specifying a fill value that's not in ``self.categories``\n        will raise a ``TypeError``.\n        \"\"\"\n        indexer = np.asarray(indexer, dtype=np.intp)\n\n        dtype = self.dtype\n\n        if isna(fill_value):\n            fill_value = -1\n        elif allow_fill:\n            # convert user-provided `fill_value` to codes\n            if fill_value in self.categories:\n                fill_value = self.categories.get_loc(fill_value)\n            else:\n                msg = (\n                    f\"'fill_value' ('{fill_value}') is not in this \"\n                    \"Categorical's categories.\"\n                )\n                raise TypeError(msg)\n\n        codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n        result = type(self).from_codes(codes, dtype=dtype)\n        return result",
        "begin_line": 1794,
        "end_line": 1884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.968155529231412e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__len__#1895",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        The length of this Categorical.\n        \"\"\"\n        return len(self._codes)",
        "begin_line": 1895,
        "end_line": 1899,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.616819956328988e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__iter__#1901",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Returns an Iterator over the values of this Categorical.\n        \"\"\"\n        return iter(self._internal_get_values().tolist())",
        "begin_line": 1901,
        "end_line": 1905,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.364700961940611e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__getitem__#2020",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Return an item.\n        \"\"\"\n        if isinstance(key, (int, np.integer)):\n            i = self._codes[key]\n            if i == -1:\n                return np.nan\n            else:\n                return self.categories[i]\n        else:\n            return self._constructor(\n                values=self._codes[key], dtype=self.dtype, fastpath=True\n            )",
        "begin_line": 2020,
        "end_line": 2033,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._reverse_indexer#2101",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._reverse_indexer(self)",
        "snippet": "    def _reverse_indexer(self):\n        \"\"\"\n        Compute the inverse of a categorical, returning\n        a dict of categories -> indexers.\n\n        *This is an internal function*\n\n        Returns\n        -------\n        dict of categories -> indexers\n\n        Examples\n        --------\n        >>> c = pd.Categorical(list('aabca'))\n        >>> c\n        [a, a, b, c, a]\n        Categories (3, object): [a, b, c]\n        >>> c.categories\n        Index(['a', 'b', 'c'], dtype='object')\n        >>> c.codes\n        array([0, 0, 1, 2, 0], dtype=int8)\n        >>> c._reverse_indexer()\n        {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n        \"\"\"\n        categories = self.categories\n        r, counts = libalgos.groupsort_indexer(\n            self.codes.astype(\"int64\"), categories.size\n        )\n        counts = counts.cumsum()\n        result = (r[start:end] for start, end in zip(counts, counts[1:]))\n        result = dict(zip(categories, result))\n        return result",
        "begin_line": 2101,
        "end_line": 2133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.unique#2218",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.unique(self)",
        "snippet": "    def unique(self):\n        \"\"\"\n        Return the ``Categorical`` which ``categories`` and ``codes`` are\n        unique. Unused categories are NOT returned.\n\n        - unordered category: values and categories are sorted by appearance\n          order.\n        - ordered category: values are sorted by appearance order, categories\n          keeps existing order.\n\n        Returns\n        -------\n        unique values : ``Categorical``\n\n        Examples\n        --------\n        An unordered Categorical will return categories in the\n        order of appearance.\n\n        >>> pd.Categorical(list('baabc'))\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        >>> pd.Categorical(list('baabc'), categories=list('abc'))\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Categorical(list('baabc'),\n        ...                categories=list('abc'),\n        ...                ordered=True)\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n\n        See Also\n        --------\n        unique\n        CategoricalIndex.unique\n        Series.unique\n\n        \"\"\"\n\n        # unlike np.unique, unique1d does not sort\n        unique_codes = unique1d(self.codes)\n        cat = self.copy()\n\n        # keep nan in codes\n        cat._codes = unique_codes\n\n        # exclude nan from indexer for categories\n        take_codes = unique_codes[unique_codes != -1]\n        if self.ordered:\n            take_codes = np.sort(take_codes)\n        return cat.set_categories(cat.categories.take(take_codes))",
        "begin_line": 2218,
        "end_line": 2272,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.equals#2284",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Returns True if categorical arrays are equal.\n\n        Parameters\n        ----------\n        other : `Categorical`\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if self.is_dtype_equal(other):\n            if self.categories.equals(other.categories):\n                # fastpath to avoid re-coding\n                other_codes = other._codes\n            else:\n                other_codes = _recode_for_categories(\n                    other.codes, other.categories, self.categories\n                )\n            return np.array_equal(self._codes, other_codes)\n        return False",
        "begin_line": 2284,
        "end_line": 2305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.273856997125104e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.is_dtype_equal#2307",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.is_dtype_equal(self, other)",
        "snippet": "    def is_dtype_equal(self, other):\n        \"\"\"\n        Returns True if categoricals are the same dtype\n          same categories, and same ordered\n\n        Parameters\n        ----------\n        other : Categorical\n\n        Returns\n        -------\n        bool\n        \"\"\"\n\n        try:\n            return hash(self.dtype) == hash(other.dtype)\n        except (AttributeError, TypeError):\n            return False",
        "begin_line": 2307,
        "end_line": 2324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.isin#2364",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.isin(self, values)",
        "snippet": "    def isin(self, values):\n        \"\"\"\n        Check whether `values` are contained in Categorical.\n\n        Return a boolean NumPy Array showing whether each element in\n        the Categorical matches an element in the passed sequence of\n        `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n        Returns\n        -------\n        isin : numpy.ndarray (bool dtype)\n\n        Raises\n        ------\n        TypeError\n          * If `values` is not a set or list-like\n\n        See Also\n        --------\n        pandas.Series.isin : Equivalent method on Series.\n\n        Examples\n        --------\n\n        >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'])\n        >>> s.isin(['cow', 'lama'])\n        array([ True,  True,  True, False,  True, False])\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        array([ True, False,  True, False,  True, False])\n        \"\"\"\n        if not is_list_like(values):\n            values_type = type(values).__name__\n            raise TypeError(\n                \"only list-like objects are allowed to be passed\"\n                f\" to isin(), you passed a [{values_type}]\"\n            )\n        values = sanitize_array(values, None, None)\n        null_mask = np.asarray(isna(values))\n        code_values = self.categories.get_indexer(values)\n        code_values = code_values[null_mask | (code_values >= 0)]\n        return algorithms.isin(self.codes, code_values)",
        "begin_line": 2364,
        "end_line": 2416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.536524890329964e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor.__init__#2514",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor.__init__(self, data)",
        "snippet": "    def __init__(self, data):\n        self._validate(data)\n        self._parent = data.values\n        self._index = data.index\n        self._name = data.name\n        self._freeze()",
        "begin_line": 2514,
        "end_line": 2519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._validate#2522",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._validate(data)",
        "snippet": "    def _validate(data):\n        if not is_categorical_dtype(data.dtype):\n            raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
        "begin_line": 2522,
        "end_line": 2524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_get#2526",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_property_get(self, name)",
        "snippet": "    def _delegate_property_get(self, name):\n        return getattr(self._parent, name)",
        "begin_line": 2526,
        "end_line": 2527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor.codes#2533",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor.codes(self)",
        "snippet": "    def codes(self):\n        \"\"\"\n        Return Series of codes as well as the index.\n        \"\"\"\n        from pandas import Series\n\n        return Series(self._parent.codes, index=self._index)",
        "begin_line": 2533,
        "end_line": 2539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method#2541",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        method = getattr(self._parent, name)\n        res = method(*args, **kwargs)\n        if res is not None:\n            return Series(res, index=self._index, name=self._name)",
        "begin_line": 2541,
        "end_line": 2547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical._get_codes_for_values#2553",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._get_codes_for_values(values, categories)",
        "snippet": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = try_cast_to_ea(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
        "begin_line": 2553,
        "end_line": 2582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical._recode_for_categories#2585",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
        "snippet": "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
        "begin_line": 2585,
        "end_line": 2616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical._convert_to_list_like#2619",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._convert_to_list_like(list_like)",
        "snippet": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
        "begin_line": 2619,
        "end_line": 2630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterable#2633",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterable(values)",
        "snippet": "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
        "begin_line": 2633,
        "end_line": 2668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterables#2671",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterables(iterables)",
        "snippet": "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
        "begin_line": 2671,
        "end_line": 2693,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.596741209842338e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__new__#96",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__new__(cls, *args, **kwargs)",
        "snippet": "    def __new__(cls, *args, **kwargs):\n        if kwargs.get(\"freq\") is not None:\n            from pandas.core.resample import TimeGrouper\n\n            cls = TimeGrouper\n        return super().__new__(cls)",
        "begin_line": 96,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__init__#103",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__init__(self, key=None, level=None, freq=None, axis=0, sort=False)",
        "snippet": "    def __init__(self, key=None, level=None, freq=None, axis=0, sort=False):\n        self.key = key\n        self.level = level\n        self.freq = freq\n        self.axis = axis\n        self.sort = sort\n\n        self.grouper = None\n        self.obj = None\n        self.indexer = None\n        self.binner = None\n        self._grouper = None",
        "begin_line": 103,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.ax#117",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.ax(self)",
        "snippet": "    def ax(self):\n        return self.grouper",
        "begin_line": 117,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper._set_grouper#144",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper._set_grouper(self, obj: FrameOrSeries, sort: bool=False)",
        "snippet": "    def _set_grouper(self, obj: FrameOrSeries, sort: bool = False):\n        \"\"\"\n        given an object and the specifications, setup the internal grouper\n        for this particular specification\n\n        Parameters\n        ----------\n        obj : Series or DataFrame\n        sort : bool, default False\n            whether the resulting grouper should be sorted\n        \"\"\"\n        assert obj is not None\n\n        if self.key is not None and self.level is not None:\n            raise ValueError(\"The Grouper cannot specify both a key and a level!\")\n\n        # Keep self.grouper value before overriding\n        if self._grouper is None:\n            self._grouper = self.grouper\n\n        # the key must be a valid info item\n        if self.key is not None:\n            key = self.key\n            # The 'on' is already defined\n            if getattr(self.grouper, \"name\", None) == key and isinstance(\n                obj, ABCSeries\n            ):\n                ax = self._grouper.take(obj.index)\n            else:\n                if key not in obj._info_axis:\n                    raise KeyError(f\"The grouper name {key} is not found\")\n                ax = Index(obj[key], name=key)\n\n        else:\n            ax = obj._get_axis(self.axis)\n            if self.level is not None:\n                level = self.level\n\n                # if a level is given it must be a mi level or\n                # equivalent to the axis name\n                if isinstance(ax, MultiIndex):\n                    level = ax._get_level_number(level)\n                    ax = Index(ax._get_level_values(level), name=ax.names[level])\n\n                else:\n                    if level not in (0, ax.name):\n                        raise ValueError(f\"The level {level} is not valid\")\n\n        # possibly sort\n        if (self.sort or sort) and not ax.is_monotonic:\n            # use stable sort to support first, last, nth\n            indexer = self.indexer = ax.argsort(kind=\"mergesort\")\n            ax = ax.take(indexer)\n            obj = obj.take(indexer, axis=self.axis, is_copy=False)\n\n        self.obj = obj\n        self.grouper = ax\n        return self.grouper",
        "begin_line": 144,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouper.__repr__#207",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouper",
        "signature": "pandas.core.groupby.grouper.Grouper.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        attrs_list = (\n            f\"{attr_name}={getattr(self, attr_name)!r}\"\n            for attr_name in self._attributes\n            if getattr(self, attr_name) is not None\n        )\n        attrs = \", \".join(attrs_list)\n        cls_name = type(self).__name__\n        return f\"{cls_name}({attrs})\"",
        "begin_line": 207,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.__init__#243",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.__init__(self, index: Index, grouper=None, obj: Optional[FrameOrSeries]=None, name=None, level=None, sort: bool=True, observed: bool=False, in_axis: bool=False)",
        "snippet": "    def __init__(\n        self,\n        index: Index,\n        grouper=None,\n        obj: Optional[FrameOrSeries] = None,\n        name=None,\n        level=None,\n        sort: bool = True,\n        observed: bool = False,\n        in_axis: bool = False,\n    ):\n        self.name = name\n        self.level = level\n        self.grouper = _convert_grouper(index, grouper)\n        self.all_grouper = None\n        self.index = index\n        self.sort = sort\n        self.obj = obj\n        self.observed = observed\n        self.in_axis = in_axis\n\n        # right place for this?\n        if isinstance(grouper, (Series, Index)) and name is None:\n            self.name = grouper.name\n\n        if isinstance(grouper, MultiIndex):\n            self.grouper = grouper.values\n\n        # we have a single grouper which may be a myriad of things,\n        # some of which are dependent on the passing in level\n\n        if level is not None:\n            if not isinstance(level, int):\n                if level not in index.names:\n                    raise AssertionError(f\"Level {level} not in index\")\n                level = index.names.index(level)\n\n            if self.name is None:\n                self.name = index.names[level]\n\n            (\n                self.grouper,\n                self._codes,\n                self._group_index,\n            ) = index._get_grouper_for_level(self.grouper, level)\n\n        # a passed Grouper like, directly get the grouper in the same way\n        # as single grouper groupby, use the group_info to get codes\n        elif isinstance(self.grouper, Grouper):\n            # get the new grouper; we already have disambiguated\n            # what key/level refer to exactly, don't need to\n            # check again as we have by this point converted these\n            # to an actual value (rather than a pd.Grouper)\n            _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n            if self.name is None:\n                self.name = grouper.result_index.name\n            self.obj = self.grouper.obj\n            self.grouper = grouper._get_grouper()\n\n        else:\n            if self.grouper is None and self.name is not None and self.obj is not None:\n                self.grouper = self.obj[self.name]\n\n            elif isinstance(self.grouper, (list, tuple)):\n                self.grouper = com.asarray_tuplesafe(self.grouper)\n\n            # a passed Categorical\n            elif is_categorical_dtype(self.grouper):\n\n                self.grouper, self.all_grouper = recode_for_groupby(\n                    self.grouper, self.sort, observed\n                )\n                categories = self.grouper.categories\n\n                # we make a CategoricalIndex out of the cat grouper\n                # preserving the categories / ordered attributes\n                self._codes = self.grouper.codes\n                if observed:\n                    codes = algorithms.unique1d(self.grouper.codes)\n                    codes = codes[codes != -1]\n                    if sort or self.grouper.ordered:\n                        codes = np.sort(codes)\n                else:\n                    codes = np.arange(len(categories))\n\n                self._group_index = CategoricalIndex(\n                    Categorical.from_codes(\n                        codes=codes, categories=categories, ordered=self.grouper.ordered\n                    ),\n                    name=self.name,\n                )\n\n            # we are done\n            if isinstance(self.grouper, Grouping):\n                self.grouper = self.grouper.grouper\n\n            # no level passed\n            elif not isinstance(\n                self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n            ):\n                if getattr(self.grouper, \"ndim\", 1) != 1:\n                    t = self.name or str(type(self.grouper))\n                    raise ValueError(f\"Grouper for '{t}' not 1-dimensional\")\n                self.grouper = self.index.map(self.grouper)\n                if not (\n                    hasattr(self.grouper, \"__len__\")\n                    and len(self.grouper) == len(self.index)\n                ):\n                    grper = pprint_thing(self.grouper)\n                    errmsg = (\n                        \"Grouper result violates len(labels) == \"\n                        f\"len(data)\\nresult: {grper}\"\n                    )\n                    self.grouper = None  # Try for sanity\n                    raise AssertionError(errmsg)\n\n        # if we have a date/time-like grouper, make sure that we have\n        # Timestamps like\n        if getattr(self.grouper, \"dtype\", None) is not None:\n            if is_datetime64_dtype(self.grouper):\n                self.grouper = self.grouper.astype(\"datetime64[ns]\")\n            elif is_timedelta64_dtype(self.grouper):\n\n                self.grouper = self.grouper.astype(\"timedelta64[ns]\")",
        "begin_line": 243,
        "end_line": 366,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.ngroups#378",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.ngroups(self)",
        "snippet": "    def ngroups(self) -> int:\n        return len(self.group_index)",
        "begin_line": 378,
        "end_line": 379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.545461404964914e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.indices#382",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.indices(self)",
        "snippet": "    def indices(self):\n        # we have a list of groupers\n        if isinstance(self.grouper, ops.BaseGrouper):\n            return self.grouper.indices\n\n        values = ensure_categorical(self.grouper)\n        return values._reverse_indexer()",
        "begin_line": 382,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.codes#391",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.codes(self)",
        "snippet": "    def codes(self) -> np.ndarray:\n        if self._codes is None:\n            self._make_codes()\n        return self._codes",
        "begin_line": 391,
        "end_line": 394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.70594128072744e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.result_index#397",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.result_index(self)",
        "snippet": "    def result_index(self) -> Index:\n        if self.all_grouper is not None:\n            return recode_from_groupby(self.all_grouper, self.sort, self.group_index)\n        return self.group_index",
        "begin_line": 397,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.group_index#403",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.group_index(self)",
        "snippet": "    def group_index(self) -> Index:\n        if self._group_index is None:\n            self._make_codes()\n        assert self._group_index is not None\n        return self._group_index",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping._make_codes#409",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping._make_codes(self)",
        "snippet": "    def _make_codes(self) -> None:\n        if self._codes is None or self._group_index is None:\n            # we have a list of groupers\n            if isinstance(self.grouper, ops.BaseGrouper):\n                codes = self.grouper.codes_info\n                uniques = self.grouper.result_index\n            else:\n                codes, uniques = algorithms.factorize(self.grouper, sort=self.sort)\n                uniques = Index(uniques, name=self.name)\n            self._codes = codes\n            self._group_index = uniques",
        "begin_line": 409,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.get_grouper#426",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.get_grouper(obj: FrameOrSeries, key=None, axis: int=0, level=None, sort: bool=True, observed: bool=False, mutated: bool=False, validate: bool=True)",
        "snippet": "def get_grouper(\n    obj: FrameOrSeries,\n    key=None,\n    axis: int = 0,\n    level=None,\n    sort: bool = True,\n    observed: bool = False,\n    mutated: bool = False,\n    validate: bool = True,\n) -> \"Tuple[ops.BaseGrouper, List[Hashable], FrameOrSeries]\":\n    \"\"\"\n    Create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values.\n\n    If validate, then check for key/level overlaps.\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # TODO: These if-block and else-block are almost same.\n        # MultiIndex instance check is removable, but it seems that there are\n        # some processes only for non-MultiIndex in else-block,\n        # eg. `obj.index.name != level`. We have to consider carefully whether\n        # these are applicable for MultiIndex. Even if these are applicable,\n        # we need to check if it makes no side effect to subsequent processes\n        # on the outside of this condition.\n        # (GH 17621)\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            # allow level to be a length-one list-like object\n            # (e.g., level=[0])\n            # GH 13901\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(f\"level name {level} is not the name of the index\")\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n            # are same in this section.\n            level = None\n            key = group_axis\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, [key.key], obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, ops.BaseGrouper):\n        return key, [], obj\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    # is this an index replacement?\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        else:\n            assert isinstance(obj, Series)\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings: List[Grouping] = []\n    exclusions: List[Hashable] = []\n\n    # if the actual grouper should be obj[key]\n    def is_in_axis(key) -> bool:\n        if not _is_label_like(key):\n            items = obj._data.items\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True\n\n    # if the grouper is obj[name]\n    def is_in_obj(gpr) -> bool:\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n\n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr, axis=axis):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n        elif isinstance(gpr, Grouper) and gpr.key is not None:\n            # Add key to exclusions\n            exclusions.append(gpr.key)\n            in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                f\"Length of grouper ({len(gpr)}) and axis ({obj.shape[axis]})\"\n                \" must be same length\"\n            )\n\n        # create the Grouping\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = ops.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
        "begin_line": 426,
        "end_line": 635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_axis#560",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_axis(key)",
        "snippet": "    def is_in_axis(key) -> bool:\n        if not _is_label_like(key):\n            items = obj._data.items\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True",
        "begin_line": 560,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_obj#572",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_obj(gpr)",
        "snippet": "    def is_in_obj(gpr) -> bool:\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False",
        "begin_line": 572,
        "end_line": 578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011222085063404781,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper._is_label_like#638",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._is_label_like(val)",
        "snippet": "def _is_label_like(val) -> bool:\n    return isinstance(val, (str, tuple)) or (val is not None and is_scalar(val))",
        "begin_line": 638,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.076139258420605e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.groupby.grouper._convert_grouper#642",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._convert_grouper(axis: Index, grouper)",
        "snippet": "def _convert_grouper(axis: Index, grouper):\n    if isinstance(grouper, dict):\n        return grouper.get\n    elif isinstance(grouper, Series):\n        if grouper.index.equals(axis):\n            return grouper._values\n        else:\n            return grouper.reindex(axis)._values\n    elif isinstance(grouper, (list, Series, Index, np.ndarray)):\n        if len(grouper) != len(axis):\n            raise ValueError(\"Grouper and axis must be same length\")\n        return grouper\n    else:\n        return grouper",
        "begin_line": 642,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY#44",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comp_method_OBJECT_ARRAY(op, x, y)",
        "snippet": "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    # TODO: Should the checks below be ABCIndexClass?\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # TODO: should this be ABCIndexClass??\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y.values\n\n        result = libops.vec_compare(x, y, op)\n    else:\n        result = libops.scalar_compare(x, y, op)\n    return result",
        "begin_line": 44,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#128",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: str)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: str):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        result = masked_arith_op(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 128,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#158",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str)",
        "snippet": "def arithmetic_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str\n):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    from pandas.core.ops import maybe_upcast_for_op\n\n    keep_null_freq = isinstance(\n        right,\n        (\n            ABCDatetimeIndex,\n            ABCDatetimeArray,\n            ABCTimedeltaIndex,\n            ABCTimedeltaArray,\n            Timestamp,\n        ),\n    )\n\n    # NB: We assume that extract_array has already been called on `left`, but\n    #  cannot make the same assumption about `right`.  This is because we need\n    #  to define `keep_null_freq` before calling extract_array on it.\n    lvalues = left\n    rvalues = extract_array(right, extract_numpy=True)\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues, keep_null_freq)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
        "begin_line": 158,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comparison_op#215",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comparison_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op)",
        "snippet": "def comparison_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray, ABCIndexClass)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            raise ValueError(\"Lengths must match to compare\")\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(len(lvalues), dtype=bool)\n        else:\n            res_values = np.zeros(len(lvalues), dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        op_name = \"__{op}__\".format(op=op.__name__)\n        method = getattr(lvalues, op_name)\n        with np.errstate(all=\"ignore\"):\n            res_values = method(rvalues)\n\n        if res_values is NotImplemented:\n            res_values = invalid_comparison(lvalues, rvalues, op)\n        if is_scalar(res_values):\n            raise TypeError(\n                \"Could not compare {typ} type with Series\".format(typ=type(rvalues))\n            )\n\n    return res_values",
        "begin_line": 215,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_logical_op#278",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_logical_op(x: np.ndarray, y, op)",
        "snippet": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                raise TypeError(\n                    \"Cannot perform '{op}' with a dtyped [{dtype}] array \"\n                    \"and scalar of type [{typ}]\".format(\n                        op=op.__name__, dtype=x.dtype, typ=type(y).__name__\n                    )\n                )\n\n    return result",
        "begin_line": 278,
        "end_line": 317,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.logical_op#320",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.logical_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op)",
        "snippet": "def logical_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a logical operation `|`, `&`, or `^`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.and_, operator.or_, operator.xor}\n        Or one of the reversed variants from roperator.\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    fill_int = lambda x: x\n\n    def fill_bool(x, left=None):\n        # if `left` is specifically not-boolean, we do not cast to bool\n        if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n            # dtypes that can hold NA\n            mask = isna(x)\n            if mask.any():\n                x = x.astype(object)\n                x[mask] = False\n\n        if left is None or is_bool_dtype(left.dtype):\n            x = x.astype(bool)\n        return x\n\n    is_self_int_dtype = is_integer_dtype(left.dtype)\n\n    right = lib.item_from_zerodim(right)\n    if is_list_like(right) and not hasattr(right, \"dtype\"):\n        # e.g. list, tuple\n        right = construct_1d_object_array_from_listlike(right)\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        if isinstance(rvalues, np.ndarray):\n            is_other_int_dtype = is_integer_dtype(rvalues.dtype)\n            rvalues = rvalues if is_other_int_dtype else fill_bool(rvalues, lvalues)\n\n        else:\n            # i.e. scalar\n            is_other_int_dtype = lib.is_integer(rvalues)\n\n        # For int vs int `^`, `|`, `&` are bitwise operators and return\n        #   integer dtypes.  Otherwise these are boolean ops\n        filler = fill_int if is_self_int_dtype and is_other_int_dtype else fill_bool\n\n        res_values = na_logical_op(lvalues, rvalues, op)\n        res_values = filler(res_values)  # type: ignore\n\n    return res_values",
        "begin_line": 320,
        "end_line": 384,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.ops.array_ops.fill_bool#341",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.fill_bool(x, left=None)",
        "snippet": "    def fill_bool(x, left=None):\n        # if `left` is specifically not-boolean, we do not cast to bool\n        if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n            # dtypes that can hold NA\n            mask = isna(x)\n            if mask.any():\n                x = x.astype(object)\n                x[mask] = False\n\n        if left is None or is_bool_dtype(left.dtype):\n            x = x.astype(bool)\n        return x",
        "begin_line": 341,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#20",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', box=True, errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", box=True, errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr',\n        'h', 'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n    box : bool, default True\n        - If True returns a Timedelta/TimedeltaIndex of the results.\n        - If False returns a numpy.timedelta64 or numpy.darray of\n          values of dtype timedelta64[ns].\n\n        .. deprecated:: 0.25.0\n            Use :meth:`Series.to_numpy` or :meth:`Timedelta.to_timedelta64`\n            instead to get an ndarray of values or numpy.timedelta64,\n            respectively.\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n\n    Examples\n    --------\n\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',\n                    '00:00:03', '00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Returning an ndarray by using the 'box' keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), box=False)\n    array([0, 1, 2, 3, 4], dtype='timedelta64[ns]')\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        warnings.warn(\n            \"M and Y units are deprecated and will be removed in a future version.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, box=False, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, box=box, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, box=box, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, box=box, errors=errors)",
        "begin_line": 20,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#150",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', box=True, errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", box=True, errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    if box:\n        from pandas import TimedeltaIndex\n\n        value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 150,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#185",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, start=None, end=None, periods=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            raise TypeError(\n                \"__new__() got an unexpected keyword argument {}\".format(\n                    list(set(fields) - valid_field_set)[0]\n                )\n            )\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(start, end, periods, freq, fields)\n            # PeriodArray._generate range does validate that fields is\n            # empty when really using the range-based constructor.\n            if not fields:\n                msg = (\n                    \"Creating a PeriodIndex by passing range \"\n                    \"endpoints is deprecated.  Use \"\n                    \"`pandas.period_range` instead.\"\n                )\n                # period_range differs from PeriodIndex for cases like\n                # start=\"2000\", periods=4\n                # PeriodIndex interprets that as A-DEC freq.\n                # period_range interprets it as 'D' freq.\n                cond = freq is None and (\n                    (start and not isinstance(start, Period))\n                    or (end and not isinstance(end, Period))\n                )\n                if cond:\n                    msg += (\n                        \" Note that the default `freq` may differ. Pass \"\n                        \"'freq=\\\"{}\\\"' to ensure the same output.\"\n                    ).format(freq2.freqstr)\n                warnings.warn(msg, FutureWarning, stacklevel=2)\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 185,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#273",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values, name=None, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, **kwargs):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n\n        \"\"\"\n        # TODO: raising on floats is tested, but maybe not useful.\n        # Should the callers know not to pass floats?\n        # At the very least, I think we can ensure that lists aren't passed.\n        if isinstance(values, list):\n            values = np.asarray(values)\n        if is_float_dtype(values):\n            raise TypeError(\"PeriodIndex._simple_new does not accept floats.\")\n        if freq:\n            freq = Period._maybe_convert_freq(freq)\n        values = PeriodArray(values, freq=freq)\n\n        if not isinstance(values, PeriodArray):\n            raise TypeError(\"PeriodIndex._simple_new only accepts PeriodArray\")\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._reset_identity()\n        return result",
        "begin_line": 273,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.values#309",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.values(self)",
        "snippet": "    def values(self):\n        return np.asarray(self)",
        "begin_line": 309,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.freq#313",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.freq(self)",
        "snippet": "    def freq(self) -> DateOffset:\n        return self._data.freq",
        "begin_line": 313,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._shallow_copy#316",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        # TODO: simplify, figure out type of values\n        if values is None:\n            values = self._data\n\n        if isinstance(values, type(self)):\n            values = values._values\n\n        if not isinstance(values, PeriodArray):\n            if isinstance(values, np.ndarray) and is_integer_dtype(values.dtype):\n                values = PeriodArray(values, freq=self.freq)\n            else:\n                # in particular, I would like to avoid period_array here.\n                # Some people seem to be calling use with unexpected types\n                # Index.difference -> ndarray[Period]\n                # DatetimelikeIndexOpsMixin.repeat -> ndarray[ordinal]\n                # I think that once all of Datetime* are EAs, we can simplify\n                # this quite a bit.\n                values = period_array(values, freq=self.freq)\n\n        # We don't allow changing `freq` in _shallow_copy.\n        validate_dtype_freq(self.dtype, kwargs.get(\"freq\"))\n        attributes = self._get_attributes_dict()\n\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        return self._simple_new(values, **attributes)",
        "begin_line": 316,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._engine#429",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # To avoid a reference cycle, pass a weakref of self to _engine_type.\n        period = weakref.ref(self)\n        return self._engine_type(period, len(self))",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__contains__#435",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        if isinstance(key, Period):\n            if key.freq != self.freq:\n                return False\n            else:\n                return key.ordinal in self._engine\n        else:\n            try:\n                self.get_loc(key)\n                return True\n            except (TypeError, KeyError):\n                # TypeError can be reached if we pass a tuple that is not hashable\n                return False",
        "begin_line": 435,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._int64index#450",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._int64index(self)",
        "snippet": "    def _int64index(self):\n        return Int64Index._simple_new(self.asi8, name=self.name)",
        "begin_line": 450,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__array__#466",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if is_integer_dtype(dtype):\n            return self.asi8\n        else:\n            return self.astype(object).values",
        "begin_line": 466,
        "end_line": 470,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.astype#530",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.astype(self, dtype, copy=True, how='start')",
        "snippet": "    def astype(self, dtype, copy=True, how=\"start\"):\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_any_dtype(dtype):\n            # 'how' is index-specific, isn't part of the EA interface.\n            tz = getattr(dtype, \"tz\", None)\n            return self.to_timestamp(how=how).tz_localize(tz)\n\n        # TODO: should probably raise on `how` here, so we don't ignore it.\n        return super().astype(dtype, copy=copy)",
        "begin_line": 530,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.is_all_dates#562",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 562,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.inferred_type#579",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c data is represented as ints make sure we can't have ambiguous\n        # indexing\n        return \"period\"",
        "begin_line": 579,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.get_indexer#625",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        target = ensure_index(target)\n\n        if hasattr(target, \"freq\") and target.freq != self.freq:\n            msg = DIFFERENT_FREQ.format(\n                cls=type(self).__name__,\n                own_freq=self.freqstr,\n                other_freq=target.freqstr,\n            )\n            raise IncompatibleFrequency(msg)\n\n        if isinstance(target, PeriodIndex):\n            target = target.asi8\n            self_index = self._int64index\n        else:\n            self_index = self\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n        return Index.get_indexer(self_index, target, method, limit, tolerance)",
        "begin_line": 625,
        "end_line": 644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.unique#673",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.unique(self, level=None)",
        "snippet": "    def unique(self, level=None):\n        # override the Index.unique method for performance GH#23083\n        if level is not None:\n            # this should never occur, but is retained to make the signature\n            # match Index.unique\n            self._validate_index_level(level)\n\n        values = self._ndarray_values\n        result = unique1d(values)\n        return self._shallow_copy(result)",
        "begin_line": 673,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.get_loc#684",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location for requested label\n\n        Returns\n        -------\n        loc : int\n        \"\"\"\n        try:\n            return self._engine.get_loc(key)\n        except KeyError:\n            if is_integer(key):\n                raise\n\n            try:\n                asdt, parsed, reso = parse_time_string(key, self.freq)\n                key = asdt\n            except TypeError:\n                pass\n            except DateParseError:\n                # A string with invalid format\n                raise KeyError(\"Cannot interpret '{}' as period\".format(key))\n\n            try:\n                key = Period(key, freq=self.freq)\n            except ValueError:\n                # we cannot construct the Period\n                # as we have an invalid type\n                raise KeyError(key)\n\n            try:\n                ordinal = iNaT if key is NaT else key.ordinal\n                if tolerance is not None:\n                    tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n                return self._int64index.get_loc(ordinal, method, tolerance)\n\n            except KeyError:\n                raise KeyError(key)",
        "begin_line": 684,
        "end_line": 721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.insert#824",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        if not isinstance(item, Period) or self.freq != item.freq:\n            return self.astype(object).insert(loc, item)\n\n        idx = np.concatenate(\n            (self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8)\n        )\n        return self._shallow_copy(idx)",
        "begin_line": 824,
        "end_line": 831,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.join#833",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        \"\"\"\n        See Index.join\n        \"\"\"\n        self._assert_can_do_setop(other)\n\n        if not isinstance(other, PeriodIndex):\n            return self.astype(object).join(\n                other, how=how, level=level, return_indexers=return_indexers, sort=sort\n            )\n\n        result = Int64Index.join(\n            self,\n            other,\n            how=how,\n            level=level,\n            return_indexers=return_indexers,\n            sort=sort,\n        )\n\n        if return_indexers:\n            result, lidx, ridx = result\n            return self._apply_meta(result), lidx, ridx\n        return self._apply_meta(result)",
        "begin_line": 833,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._assert_can_do_setop#862",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        super()._assert_can_do_setop(other)\n\n        # *Can't* use PeriodIndexes of different freqs\n        # *Can* use PeriodIndex/DatetimeIndex\n        if isinstance(other, PeriodIndex) and self.freq != other.freq:\n            msg = DIFFERENT_FREQ.format(\n                cls=type(self).__name__, own_freq=self.freqstr, other_freq=other.freqstr\n            )\n            raise IncompatibleFrequency(msg)",
        "begin_line": 862,
        "end_line": 871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._apply_meta#879",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._apply_meta(self, rawarr)",
        "snippet": "    def _apply_meta(self, rawarr):\n        if not isinstance(rawarr, PeriodIndex):\n            rawarr = PeriodIndex._simple_new(rawarr, freq=self.freq, name=self.name)\n        return rawarr",
        "begin_line": 879,
        "end_line": 882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#948",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 948,
        "end_line": 1011,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype#65",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype(self)",
        "snippet": "    def numpy_dtype(self):\n        \"\"\" Return an instance of our numpy dtype \"\"\"\n        return np.dtype(self.type)",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.kind#70",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.kind(self)",
        "snippet": "    def kind(self):\n        return self.numpy_dtype.kind",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.construct_array_type#79",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return IntegerArray",
        "begin_line": 79,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.integer_array#118",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.integer_array(values, dtype=None, copy=False)",
        "snippet": "def integer_array(values, dtype=None, copy=False):\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : dtype, optional\n        dtype to coerce\n    copy : bool, default False\n\n    Returns\n    -------\n    IntegerArray\n\n    Raises\n    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)",
        "begin_line": 118,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.safe_cast#141",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.safe_cast(values, dtype, copy)",
        "snippet": "def safe_cast(values, dtype, copy):\n    \"\"\"\n    Safely cast the values to the dtype if they\n    are equivalent, meaning floats must be equivalent to the\n    ints.\n\n    \"\"\"\n\n    try:\n        return values.astype(dtype, casting=\"safe\", copy=copy)\n    except TypeError:\n\n        casted = values.astype(dtype, copy=copy)\n        if (casted == values).all():\n            return casted\n\n        raise TypeError(\n            \"cannot safely cast non-equivalent {} to {}\".format(\n                values.dtype, np.dtype(dtype)\n            )\n        )",
        "begin_line": 141,
        "end_line": 161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.coerce_to_array#164",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.coerce_to_array(values, dtype, mask=None, copy=False)",
        "snippet": "def coerce_to_array(values, dtype, mask=None, copy=False):\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    # if values is integer numpy array, preserve it's dtype\n    if dtype is None and hasattr(values, \"dtype\"):\n        if is_integer_dtype(values.dtype):\n            dtype = values.dtype\n\n    if dtype is not None:\n        if isinstance(dtype, str) and (\n            dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\n        ):\n            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:\n                dtype = _dtypes[str(np.dtype(dtype))]\n            except KeyError:\n                raise ValueError(\"invalid dtype specified {}\".format(dtype))\n\n    if isinstance(values, IntegerArray):\n        values, mask = values._data, values._mask\n        if dtype is not None:\n            values = values.astype(dtype.numpy_dtype, copy=False)\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    values = np.array(values, copy=copy)\n    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values, skipna=True)\n        if inferred_type == \"empty\":\n            values = np.empty(len(values))\n            values.fill(np.nan)\n        elif inferred_type not in [\n            \"floating\",\n            \"integer\",\n            \"mixed-integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n        ]:\n            raise TypeError(\n                \"{} cannot be converted to an IntegerDtype\".format(values.dtype)\n            )\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):\n        raise TypeError(\n            \"{} cannot be converted to an IntegerDtype\".format(values.dtype)\n        )\n\n    if mask is None:\n        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:\n        raise TypeError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise TypeError(\"mask must be a 1D list-like\")\n\n    # infer dtype if needed\n    if dtype is None:\n        dtype = np.dtype(\"int64\")\n    else:\n        dtype = dtype.type\n\n    # if we are float, let's make sure that we can\n    # safely cast\n\n    # we copy as need to coerce here\n    if mask.any():\n        values = values.copy()\n        values[mask] = 1\n        values = safe_cast(values, dtype, copy=False)\n    else:\n        values = safe_cast(values, dtype, copy=False)\n\n    return values, mask",
        "begin_line": 164,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.dtype#330",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return _dtypes[str(self._data.dtype)]",
        "begin_line": 330,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__init__#333",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__init__(self, values, mask, copy=False)",
        "snippet": "    def __init__(self, values, mask, copy=False):\n        if not (isinstance(values, np.ndarray) and is_integer_dtype(values.dtype)):\n            raise TypeError(\n                \"values should be integer numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n        if not (isinstance(mask, np.ndarray) and is_bool_dtype(mask.dtype)):\n            raise TypeError(\n                \"mask should be boolean numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n\n        self._data = values\n        self._mask = mask",
        "begin_line": 333,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._from_sequence#353",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return integer_array(scalars, dtype=dtype, copy=copy)",
        "begin_line": 353,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__getitem__#373",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if is_integer(item):\n            if self._mask[item]:\n                return self.dtype.na_value\n            return self._data[item]\n        return type(self)(self._data[item], self._mask[item])",
        "begin_line": 373,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._coerce_to_ndarray#380",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._coerce_to_ndarray(self)",
        "snippet": "    def _coerce_to_ndarray(self):\n        \"\"\"\n        coerce to an ndarary of object dtype\n        \"\"\"\n\n        # TODO(jreback) make this better\n        data = self._data.astype(object)\n        data[self._mask] = self._na_value\n        return data",
        "begin_line": 380,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__array__#392",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        the array interface, return my values\n        We return an object array here to preserve our scalar values\n        \"\"\"\n        return self._coerce_to_ndarray()",
        "begin_line": 392,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__iter__#454",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        for i in range(len(self)):\n            if self._mask[i]:\n                yield self.dtype.na_value\n            else:\n                yield self._data[i]",
        "begin_line": 454,
        "end_line": 459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.take#461",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.take(self, indexer, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill=False, fill_value=None):\n        # we always fill with 1 internally\n        # to avoid upcasting\n        data_fill_value = 1 if isna(fill_value) else fill_value\n        result = take(\n            self._data, indexer, fill_value=data_fill_value, allow_fill=allow_fill\n        )\n\n        mask = take(self._mask, indexer, fill_value=True, allow_fill=allow_fill)\n\n        # if we are filling\n        # we only fill where the indexer is null\n        # not existing missing values\n        # TODO(jreback) what if we have a non-na float as a fill value?\n        if allow_fill and notna(fill_value):\n            fill_mask = np.asarray(indexer) == -1\n            result[fill_mask] = fill_value\n            mask = mask ^ fill_mask\n\n        return type(self)(result, mask, copy=False)",
        "begin_line": 461,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.copy#482",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.copy(self)",
        "snippet": "    def copy(self):\n        data, mask = self._data, self._mask\n        data = data.copy()\n        mask = mask.copy()\n        return type(self)(data, mask, copy=False)",
        "begin_line": 482,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__len__#501",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 501,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.isna#508",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.isna(self)",
        "snippet": "    def isna(self):\n        return self._mask",
        "begin_line": 508,
        "end_line": 509,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._na_value#512",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._na_value(self)",
        "snippet": "    def _na_value(self):\n        return np.nan",
        "begin_line": 512,
        "end_line": 513,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.astype#521",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to a NumPy array or IntegerArray with 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        array : ndarray or IntegerArray\n            NumPy ndarray or IntergerArray with 'dtype' for its dtype.\n\n        Raises\n        ------\n        TypeError\n            if incompatible type with an IntegerDtype, equivalent of same_kind\n            casting\n        \"\"\"\n\n        # if we are astyping to an existing IntegerDtype we can fastpath\n        if isinstance(dtype, _IntegerDtype):\n            result = self._data.astype(dtype.numpy_dtype, copy=False)\n            return type(self)(result, mask=self._mask, copy=False)\n\n        # coerce\n        data = self._coerce_to_ndarray()\n        return astype_nansafe(data, dtype, copy=None)",
        "begin_line": 521,
        "end_line": 553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#49",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 49,
        "end_line": 123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006459948320413437,
            "pseudo_dstar_susp": 0.002150537634408602,
            "pseudo_tarantula_susp": 0.0005042864346949068,
            "pseudo_op2_susp": 0.002150537634408602,
            "pseudo_barinel_susp": 0.0005042864346949068
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#129",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 129,
        "end_line": 157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000693000693000693,
            "pseudo_dstar_susp": 0.0026954177897574125,
            "pseudo_tarantula_susp": 0.0005467468562055768,
            "pseudo_op2_susp": 0.0026954177897574125,
            "pseudo_barinel_susp": 0.0005467468562055768
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#222",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 222,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006131207847946045,
            "pseudo_dstar_susp": 0.000526592943654555,
            "pseudo_tarantula_susp": 0.0007993605115907274,
            "pseudo_op2_susp": 0.000526592943654555,
            "pseudo_barinel_susp": 0.0007993605115907274
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#296",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 296,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_compat#379",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_compat(arr, fill_value=np.nan)",
        "snippet": "def _isna_compat(arr, fill_value=np.nan) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    arr: a numpy array\n    fill_value: fill value, default to np.nan\n\n    Returns\n    -------\n    True if we can fill using this fill_value\n    \"\"\"\n    dtype = arr.dtype\n    if isna(fill_value):\n        return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))\n    return True",
        "begin_line": 379,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.594167679222357e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#396",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 396,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004385964912280702,
            "pseudo_dstar_susp": 0.0004385964912280702,
            "pseudo_tarantula_susp": 0.0005461496450027307,
            "pseudo_op2_susp": 0.0004385964912280702,
            "pseudo_barinel_susp": 0.0005461496450027307
        }
    },
    {
        "name": "pandas.core.dtypes.missing._maybe_fill#510",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._maybe_fill(arr, fill_value=np.nan)",
        "snippet": "def _maybe_fill(arr, fill_value=np.nan):\n    \"\"\"\n    if we have a compatible fill_value and arr dtype, then fill\n    \"\"\"\n    if _isna_compat(arr, fill_value):\n        arr.fill(fill_value)\n    return arr",
        "begin_line": 510,
        "end_line": 516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.622532205198568e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#519",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 519,
        "end_line": 564,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing.remove_na_arraylike#567",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.remove_na_arraylike(arr)",
        "snippet": "def remove_na_arraylike(arr):\n    \"\"\"\n    Return array-like containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    if is_extension_array_dtype(arr):\n        return arr[notna(arr)]\n    else:\n        return arr[notna(lib.values_from_object(arr))]",
        "begin_line": 567,
        "end_line": 574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#577",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype) -> bool:\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 577,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_float#80",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_float(arr)",
        "snippet": "def ensure_float(arr):\n    \"\"\"\n    Ensure that an array object has a float dtype if possible.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array whose data type we want to enforce as float.\n\n    Returns\n    -------\n    float_arr : The original array cast to the float dtype if\n                possible. Otherwise, the original array is returned.\n    \"\"\"\n\n    if issubclass(arr.dtype.type, (np.integer, np.bool_)):\n        arr = arr.astype(float)\n    return arr",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_categorical#120",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_categorical(arr)",
        "snippet": "def ensure_categorical(arr):\n    \"\"\"\n    Ensure that an array-like object is a Categorical (if not already).\n\n    Parameters\n    ----------\n    arr : array-like\n        The array that we want to convert into a Categorical.\n\n    Returns\n    -------\n    cat_arr : The original array cast as a Categorical. If it already\n              is a Categorical, we return as is.\n    \"\"\"\n\n    if not is_categorical(arr):\n        from pandas import Categorical\n\n        arr = Categorical(arr)\n    return arr",
        "begin_line": 120,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_int_or_float#142",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_int_or_float(arr: ArrayLike, copy: bool=False)",
        "snippet": "def ensure_int_or_float(arr: ArrayLike, copy: bool = False) -> np.array:\n    \"\"\"\n    Ensure that an dtype array of some integer dtype\n    has an int64 dtype if possible.\n    If it's not possible, potentially because of overflow,\n    convert the array to float64 instead.\n\n    Parameters\n    ----------\n    arr : array-like\n          The array whose data type we want to enforce.\n    copy: bool\n          Whether to copy the original array or reuse\n          it in place, if possible.\n\n    Returns\n    -------\n    out_arr : The input array cast as int64 if\n              possible without overflow.\n              Otherwise the input array cast to float64.\n\n    Notes\n    -----\n    If the array is explicitly of type uint64 the type\n    will remain unchanged.\n    \"\"\"\n    # TODO: GH27506 potential bug with ExtensionArrays\n    try:\n        return arr.astype(\"int64\", copy=copy, casting=\"safe\")  # type: ignore\n    except TypeError:\n        pass\n    try:\n        return arr.astype(\"uint64\", copy=copy, casting=\"safe\")  # type: ignore\n    except TypeError:\n        return arr.astype(\"float64\", copy=copy)",
        "begin_line": 142,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.511362669163333e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#179",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            \"Value needs to be a scalar value, was type {}\".format(type(value))\n        )\n    msg = \"Wrong type {} for value {}\"\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError):\n        raise TypeError(msg.format(type(value), value))\n    return new_value",
        "begin_line": 179,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006706908115358819,
            "pseudo_dstar_susp": 0.0023923444976076554,
            "pseudo_tarantula_susp": 0.0005296610169491525,
            "pseudo_op2_susp": 0.0023923444976076554,
            "pseudo_barinel_susp": 0.0005296610169491525
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#208",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 208,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009074410163339383,
            "pseudo_dstar_susp": 0.07692307692307693,
            "pseudo_tarantula_susp": 0.0004116920543433512,
            "pseudo_op2_susp": 0.07692307692307693,
            "pseudo_barinel_susp": 0.0004116920543433512
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#213",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 213,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009115770282588879,
            "pseudo_dstar_susp": 0.08333333333333333,
            "pseudo_tarantula_susp": 0.0004187604690117253,
            "pseudo_op2_susp": 0.08333333333333333,
            "pseudo_barinel_susp": 0.0004187604690117253
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#224",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 224,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005200208008320333,
            "pseudo_dstar_susp": 0.001336898395721925,
            "pseudo_tarantula_susp": 0.00041946308724832214,
            "pseudo_op2_susp": 0.001336898395721925,
            "pseudo_barinel_susp": 0.00041946308724832214
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#254",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 254,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005586592178770949,
            "pseudo_dstar_susp": 0.0015552099533437014,
            "pseudo_tarantula_susp": 0.0004440497335701599,
            "pseudo_op2_susp": 0.0015552099533437014,
            "pseudo_barinel_susp": 0.0004440497335701599
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#341",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 341,
        "end_line": 371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005263157894736842,
            "pseudo_dstar_susp": 0.001379310344827586,
            "pseudo_tarantula_susp": 0.000423908435777872,
            "pseudo_op2_susp": 0.001379310344827586,
            "pseudo_barinel_susp": 0.000423908435777872
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#405",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 405,
        "end_line": 433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005186721991701245,
            "pseudo_dstar_susp": 0.0013280212483399733,
            "pseudo_tarantula_susp": 0.0004182350480970305,
            "pseudo_op2_susp": 0.0013280212483399733,
            "pseudo_barinel_susp": 0.0004182350480970305
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#436",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 436,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005089058524173028,
            "pseudo_dstar_susp": 0.0012658227848101266,
            "pseudo_tarantula_susp": 0.0004116920543433512,
            "pseudo_op2_susp": 0.0012658227848101266,
            "pseudo_barinel_susp": 0.0004116920543433512
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#474",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 474,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005181347150259067,
            "pseudo_dstar_susp": 0.0013245033112582781,
            "pseudo_tarantula_susp": 0.0004178854993731718,
            "pseudo_op2_susp": 0.0013245033112582781,
            "pseudo_barinel_susp": 0.0004178854993731718
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#505",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 505,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005128205128205128,
            "pseudo_dstar_susp": 0.0012903225806451613,
            "pseudo_tarantula_susp": 0.0004144218814753419,
            "pseudo_op2_susp": 0.0012903225806451613,
            "pseudo_barinel_susp": 0.0004144218814753419
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#539",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 539,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005327650506126798,
            "pseudo_dstar_susp": 0.00141643059490085,
            "pseudo_tarantula_susp": 0.0004297378599054577,
            "pseudo_op2_susp": 0.00141643059490085,
            "pseudo_barinel_susp": 0.0004297378599054577
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#575",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 575,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005282620179609086,
            "pseudo_dstar_susp": 0.001388888888888889,
            "pseudo_tarantula_susp": 0.00042716787697565144,
            "pseudo_op2_susp": 0.001388888888888889,
            "pseudo_barinel_susp": 0.00042716787697565144
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#608",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 608,
        "end_line": 641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007564296520423601,
            "pseudo_dstar_susp": 0.0033003300330033004,
            "pseudo_tarantula_susp": 0.0005906674542232723,
            "pseudo_op2_susp": 0.0033003300330033004,
            "pseudo_barinel_susp": 0.0005906674542232723
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#638",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)",
        "begin_line": 638,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001026694045174538,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.0005906674542232723,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.0005906674542232723
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_arraylike#644",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_arraylike(arr)",
        "snippet": "def is_period_arraylike(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a periodical array-like or PeriodIndex.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a periodical array-like or\n        PeriodIndex instance.\n\n    Examples\n    --------\n    >>> is_period_arraylike([1, 2, 3])\n    False\n    >>> is_period_arraylike(pd.Index([1, 2, 3]))\n    False\n    >>> is_period_arraylike(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    True\n    \"\"\"\n\n    if isinstance(arr, (ABCPeriodIndex, ABCPeriodArray)):\n        return True\n    elif isinstance(arr, (np.ndarray, ABCSeries)):\n        return is_period_dtype(arr.dtype)\n    return getattr(arr, \"inferred_type\", None) == \"period\"",
        "begin_line": 644,
        "end_line": 673,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#711",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(), \"datetime64\")\n    False\n    \"\"\"\n\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 711,
        "end_line": 747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010718113612004287,
            "pseudo_dstar_susp": 0.002232142857142857,
            "pseudo_tarantula_susp": 0.0011723329425556857,
            "pseudo_op2_susp": 0.002232142857142857,
            "pseudo_barinel_susp": 0.0011723329425556857
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_any_int_dtype#750",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_any_int_dtype(arr_or_dtype)",
        "snippet": "def is_any_int_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    In this function, timedelta64 instances are also considered \"any-integer\"\n    type objects and will return True.\n\n    This function is internal and should not be exposed in the public API.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype.\n\n    Examples\n    --------\n    >>> is_any_int_dtype(str)\n    False\n    >>> is_any_int_dtype(int)\n    True\n    >>> is_any_int_dtype(float)\n    False\n    >>> is_any_int_dtype(np.uint64)\n    True\n    >>> is_any_int_dtype(np.datetime64)\n    False\n    >>> is_any_int_dtype(np.timedelta64)\n    True\n    >>> is_any_int_dtype(np.array(['a', 'b']))\n    False\n    >>> is_any_int_dtype(pd.Series([1, 2]))\n    True\n    >>> is_any_int_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_any_int_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.integer, np.timedelta64))",
        "begin_line": 750,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#801",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 801,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00035435861091424523,
            "pseudo_dstar_susp": 0.00035435861091424523,
            "pseudo_tarantula_susp": 0.0003544842254519674,
            "pseudo_op2_susp": 0.00035435861091424523,
            "pseudo_barinel_susp": 0.0003544842254519674
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#856",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 856,
        "end_line": 910,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005263157894736842,
            "pseudo_dstar_susp": 0.001379310344827586,
            "pseudo_tarantula_susp": 0.000423908435777872,
            "pseudo_op2_susp": 0.001379310344827586,
            "pseudo_barinel_susp": 0.000423908435777872
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#913",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 913,
        "end_line": 959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005405405405405405,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.0004347826086956522,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.0004347826086956522
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#1013",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                dtype=np.datetime64))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 1013,
        "end_line": 1050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005379236148466917,
            "pseudo_dstar_susp": 0.0014534883720930232,
            "pseudo_tarantula_susp": 0.00043308791684711995,
            "pseudo_op2_susp": 0.0014534883720930232,
            "pseudo_barinel_susp": 0.00043308791684711995
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#1053",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 1053,
        "end_line": 1100,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003912363067292645,
            "pseudo_dstar_susp": 0.0003912363067292645,
            "pseudo_tarantula_susp": 0.000392156862745098,
            "pseudo_op2_susp": 0.0003912363067292645,
            "pseudo_barinel_susp": 0.000392156862745098
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#1103",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == _TD_DTYPE)",
        "begin_line": 1103,
        "end_line": 1131,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005047955577990914,
            "pseudo_dstar_susp": 0.0012406947890818859,
            "pseudo_tarantula_susp": 0.0004045307443365696,
            "pseudo_op2_susp": 0.0012406947890818859,
            "pseudo_barinel_susp": 0.0004045307443365696
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1134",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1134,
        "end_line": 1170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00037023324694557573,
            "pseudo_dstar_susp": 0.00037023324694557573,
            "pseudo_tarantula_susp": 0.0003705075954057058,
            "pseudo_op2_susp": 0.00037023324694557573,
            "pseudo_barinel_susp": 0.0003705075954057058
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_unorderable_exception#1173",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_unorderable_exception(e: TypeError)",
        "snippet": "def _is_unorderable_exception(e: TypeError) -> bool:\n    \"\"\"\n    Check if the exception raised is an unorderable exception.\n\n    Parameters\n    ----------\n    e : Exception or sub-class\n        The exception object to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the exception raised is an unorderable exception.\n    \"\"\"\n    return \"'>' not supported between instances of\" in str(e)",
        "begin_line": 1173,
        "end_line": 1187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_v_string_like#1191",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_v_string_like(a, b)",
        "snippet": "def is_numeric_v_string_like(a, b):\n    \"\"\"\n    Check if we are comparing a string-like object to a numeric ndarray.\n    NumPy doesn't like to compare such objects, especially numeric arrays\n    and scalar string-likes.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a string-like object to a numeric array.\n\n    Examples\n    --------\n    >>> is_numeric_v_string_like(1, 1)\n    False\n    >>> is_numeric_v_string_like(\"foo\", \"foo\")\n    False\n    >>> is_numeric_v_string_like(1, \"foo\")  # non-array numeric\n    False\n    >>> is_numeric_v_string_like(np.array([1]), \"foo\")\n    True\n    >>> is_numeric_v_string_like(\"foo\", np.array([1]))  # symmetric check\n    True\n    >>> is_numeric_v_string_like(np.array([1, 2]), np.array([\"foo\"]))\n    True\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([1, 2]))\n    True\n    >>> is_numeric_v_string_like(np.array([1]), np.array([2]))\n    False\n    >>> is_numeric_v_string_like(np.array([\"foo\"]), np.array([\"foo\"]))\n    False\n    \"\"\"\n\n    is_a_array = isinstance(a, np.ndarray)\n    is_b_array = isinstance(b, np.ndarray)\n\n    is_a_numeric_array = is_a_array and is_numeric_dtype(a)\n    is_b_numeric_array = is_b_array and is_numeric_dtype(b)\n    is_a_string_array = is_a_array and is_string_like_dtype(a)\n    is_b_string_array = is_b_array and is_string_like_dtype(b)\n\n    is_a_scalar_string_like = not is_a_array and isinstance(a, str)\n    is_b_scalar_string_like = not is_b_array and isinstance(b, str)\n\n    return (\n        (is_a_numeric_array and is_b_scalar_string_like)\n        or (is_b_numeric_array and is_a_scalar_string_like)\n        or (is_a_numeric_array and is_b_string_array)\n        or (is_b_numeric_array and is_a_string_array)\n    )",
        "begin_line": 1191,
        "end_line": 1247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1251",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> dt = np.datetime64(pd.datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1251,
        "end_line": 1305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.043026347594876e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1297",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1297,
        "end_line": 1301,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.420048972323217e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1308",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1308,
        "end_line": 1349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.003842459173871e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_dtype#1352",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)",
        "snippet": "def is_numeric_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a numeric dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a numeric dtype.\n\n    Examples\n    --------\n    >>> is_numeric_dtype(str)\n    False\n    >>> is_numeric_dtype(int)\n    True\n    >>> is_numeric_dtype(float)\n    True\n    >>> is_numeric_dtype(np.uint64)\n    True\n    >>> is_numeric_dtype(np.datetime64)\n    False\n    >>> is_numeric_dtype(np.timedelta64)\n    False\n    >>> is_numeric_dtype(np.array(['a', 'b']))\n    False\n    >>> is_numeric_dtype(pd.Series([1, 2]))\n    True\n    >>> is_numeric_dtype(pd.Index([1, 2.]))\n    True\n    >>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    False\n    \"\"\"\n\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.number, np.bool_)\n    )",
        "begin_line": 1352,
        "end_line": 1392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.279829188646068e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1395",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1395,
        "end_line": 1424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005617977528089888,
            "pseudo_dstar_susp": 0.001567398119122257,
            "pseudo_tarantula_susp": 0.00044583147570218456,
            "pseudo_op2_susp": 0.001567398119122257,
            "pseudo_barinel_susp": 0.00044583147570218456
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1427",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1427,
        "end_line": 1458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005162622612287042,
            "pseudo_dstar_susp": 0.0013123359580052493,
            "pseudo_tarantula_susp": 0.0004166666666666667,
            "pseudo_op2_susp": 0.0013123359580052493,
            "pseudo_barinel_susp": 0.0004166666666666667
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1461",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1461,
        "end_line": 1523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005268703898840885,
            "pseudo_dstar_susp": 0.0013831258644536654,
            "pseudo_tarantula_susp": 0.0004246284501061571,
            "pseudo_op2_susp": 0.0013831258644536654,
            "pseudo_barinel_susp": 0.0004246284501061571
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1591",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1591,
        "end_line": 1637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005162622612287042,
            "pseudo_dstar_susp": 0.0013123359580052493,
            "pseudo_tarantula_susp": 0.0004166666666666667,
            "pseudo_op2_susp": 0.0013123359580052493,
            "pseudo_barinel_susp": 0.0004166666666666667
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1640",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1640,
        "end_line": 1670,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.025911419102139e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1673",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1673,
        "end_line": 1695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006480881399870382,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0005058168942842691,
            "pseudo_op2_susp": 0.002173913043478261,
            "pseudo_barinel_susp": 0.0005058168942842691
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1698",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1698,
        "end_line": 1731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005995203836930455,
            "pseudo_dstar_susp": 0.0017889087656529517,
            "pseudo_tarantula_susp": 0.0004716981132075472,
            "pseudo_op2_susp": 0.0017889087656529517,
            "pseudo_barinel_susp": 0.0004716981132075472
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1734",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1734,
        "end_line": 1776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006353240152477764,
            "pseudo_dstar_susp": 0.0020491803278688526,
            "pseudo_tarantula_susp": 0.0004906771344455348,
            "pseudo_op2_susp": 0.0020491803278688526,
            "pseudo_barinel_susp": 0.0004906771344455348
        }
    },
    {
        "name": "pandas.core.dtypes.common.infer_dtype_from_object#1779",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.infer_dtype_from_object(dtype)",
        "snippet": "def infer_dtype_from_object(dtype):\n    \"\"\"\n    Get a numpy dtype.type-style object for a dtype object.\n\n    This methods also includes handling of the datetime64[ns] and\n    datetime64[ns, TZ] objects.\n\n    If no dtype can be found, we return ``object``.\n\n    Parameters\n    ----------\n    dtype : dtype, type\n        The dtype object whose numpy dtype.type-style\n        object we want to extract.\n\n    Returns\n    -------\n    dtype_object : The extracted numpy dtype.type-style object.\n    \"\"\"\n\n    if isinstance(dtype, type) and issubclass(dtype, np.generic):\n        # Type object from a dtype\n        return dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        # dtype object\n        try:\n            _validate_date_like_dtype(dtype)\n        except TypeError:\n            # Should still pass if we don't have a date-like\n            pass\n        return dtype.type\n\n    try:\n        dtype = pandas_dtype(dtype)\n    except TypeError:\n        pass\n\n    if is_extension_array_dtype(dtype):\n        return dtype.type\n    elif isinstance(dtype, str):\n\n        # TODO(jreback)\n        # should deprecate these\n        if dtype in [\"datetimetz\", \"datetime64tz\"]:\n            return DatetimeTZDtype.type\n        elif dtype in [\"period\"]:\n            raise NotImplementedError\n\n        if dtype == \"datetime\" or dtype == \"timedelta\":\n            dtype += \"64\"\n        try:\n            return infer_dtype_from_object(getattr(np, dtype))\n        except (AttributeError, TypeError):\n            # Handles cases like _get_dtype(int) i.e.,\n            # Python objects that are valid dtypes\n            # (unlike user-defined types, in general)\n            #\n            # TypeError handles the float16 type code of 'e'\n            # further handle internal types\n            pass\n\n    return infer_dtype_from_object(np.dtype(dtype))",
        "begin_line": 1779,
        "end_line": 1840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.271298593879239e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common._validate_date_like_dtype#1843",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._validate_date_like_dtype(dtype)",
        "snippet": "def _validate_date_like_dtype(dtype) -> None:\n    \"\"\"\n    Check whether the dtype is a date-like dtype. Raises an error if invalid.\n\n    Parameters\n    ----------\n    dtype : dtype, type\n        The dtype to check.\n\n    Raises\n    ------\n    TypeError : The dtype could not be casted to a date-like dtype.\n    ValueError : The dtype is an illegal date-like dtype (e.g. the\n                 the frequency provided is too specific)\n    \"\"\"\n\n    try:\n        typ = np.datetime_data(dtype)[0]\n    except ValueError as e:\n        raise TypeError(\"{error}\".format(error=e))\n    if typ != \"generic\" and typ != \"ns\":\n        msg = \"{name!r} is too specific of a frequency, try passing {type!r}\"\n        raise ValueError(msg.format(name=dtype.name, type=dtype.type.__name__))",
        "begin_line": 1843,
        "end_line": 1865,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1868",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype):\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(\"data type '{}' not understood\".format(dtype))\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(\"dtype '{}' not understood\".format(dtype))\n\n    return npdtype",
        "begin_line": 1868,
        "end_line": 1915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005089058524173028,
            "pseudo_dstar_susp": 0.0012658227848101266,
            "pseudo_tarantula_susp": 0.00046446818392940084,
            "pseudo_op2_susp": 0.0012658227848101266,
            "pseudo_barinel_susp": 0.00046446818392940084
        }
    },
    {
        "name": "pandas.core.construction.array#50",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Sequence[object], dtype: Optional[Union[str, np.dtype, ExtensionDtype]]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Sequence[object],\n    dtype: Optional[Union[str, np.dtype, ExtensionDtype]] = None,\n    copy: bool = True,\n) -> ABCExtensionArray:\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Or use the dedicated constructor for the array you're expecting, and\n    wrap that in a PandasArray\n\n    >>> pd.array(np.array(['a', 'b'], dtype='<U1'))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['01:00:00', '02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, `data` is passed through to\n    :meth:`numpy.array`, and a :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1, 2])\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int64\n\n    Or the NumPy dtype can be specified\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    Because omitting the `dtype` passes the data through to NumPy,\n    a mixture of valid integers and NA will return a floating-point\n    NumPy array.\n\n    >>> pd.array([1, 2, np.nan])\n    <PandasArray>\n    [1.0,  2.0, nan]\n    Length: 3, dtype: float64\n\n    To use pandas' nullable :class:`pandas.arrays.IntegerArray`, specify\n    the dtype:\n\n    >>> pd.array([1, 2, np.nan], dtype='Int64')\n    <IntegerArray>\n    [1, 2, NaN]\n    Length: 3, dtype: Int64\n\n    Pandas will infer an ExtensionArray for some types of data:\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = \"Cannot pass scalar '{}' to 'pandas.array'.\"\n        raise ValueError(msg.format(data))\n\n    data = extract_array(data, extract_numpy=True)\n\n    if dtype is None and isinstance(data, ABCExtensionArray):\n        dtype = data.dtype\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=False)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        # TODO(BooleanArray): handle this type\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 50,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.construction.extract_array#316",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy=False)",
        "snippet": "def extract_array(obj, extract_numpy=False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 316,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005296610169491525,
            "pseudo_dstar_susp": 0.001394700139470014,
            "pseudo_tarantula_susp": 0.000427715996578272,
            "pseudo_op2_susp": 0.001394700139470014,
            "pseudo_barinel_susp": 0.000427715996578272
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#367",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred == \"period\":\n                from pandas.core.arrays import period_array\n\n                try:\n                    subarr = period_array(subarr)\n                except IncompatibleFrequency:\n                    pass\n\n    return subarr",
        "begin_line": 367,
        "end_line": 487,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013440860215053765,
            "pseudo_dstar_susp": 0.006060606060606061,
            "pseudo_tarantula_susp": 0.000980392156862745,
            "pseudo_op2_susp": 0.006060606060606061,
            "pseudo_barinel_susp": 0.000980392156862745
        }
    },
    {
        "name": "pandas.core.construction._try_cast#490",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype._ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 490,
        "end_line": 551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008223684210526315,
            "pseudo_dstar_susp": 0.0005561735261401557,
            "pseudo_tarantula_susp": 0.0008710801393728223,
            "pseudo_op2_susp": 0.0005561735261401557,
            "pseudo_barinel_susp": 0.0008710801393728223
        }
    },
    {
        "name": "pandas.core.reshape.util.cartesian_product#8",
        "src_path": "pandas/core/reshape/util.py",
        "class_name": "pandas.core.reshape.util",
        "signature": "pandas.core.reshape.util.cartesian_product(X)",
        "snippet": "def cartesian_product(X):\n    \"\"\"\n    Numpy version of itertools.product.\n    Sometimes faster (for large inputs)...\n\n    Parameters\n    ----------\n    X : list-like of list-likes\n\n    Returns\n    -------\n    product : list of ndarrays\n\n    Examples\n    --------\n    >>> cartesian_product([list('ABC'), [1, 2]])\n    [array(['A', 'A', 'B', 'B', 'C', 'C'], dtype='|S1'),\n    array([1, 2, 1, 2, 1, 2])]\n\n    See Also\n    --------\n    itertools.product : Cartesian product of input iterables.  Equivalent to\n        nested for-loops.\n    \"\"\"\n    msg = \"Input must be a list-like of list-likes\"\n    if not is_list_like(X):\n        raise TypeError(msg)\n    for x in X:\n        if not is_list_like(x):\n            raise TypeError(msg)\n\n    if len(X) == 0:\n        return []\n\n    lenX = np.fromiter((len(x) for x in X), dtype=np.intp)\n    cumprodX = np.cumproduct(lenX)\n\n    a = np.roll(cumprodX, 1)\n    a[0] = 1\n\n    if cumprodX[-1] != 0:\n        b = cumprodX[-1] / cumprodX\n    else:\n        # if any factor is empty, the cartesian product is empty\n        b = np.zeros_like(cumprodX)\n\n    return [\n        np.tile(\n            np.repeat(np.asarray(com.values_from_object(x)), b[i]), np.product(a[i])\n        )\n        for i, x in enumerate(X)\n    ]",
        "begin_line": 8,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.cmp_method#102",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.cmp_method(self, other)",
        "snippet": "    def cmp_method(self, other):\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n            if other.ndim > 0 and len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n\n        if is_object_dtype(self) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)",
        "begin_line": 102,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.927070947284978e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.index_arithmetic_method#128",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.index_arithmetic_method(self, other)",
        "snippet": "    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)",
        "begin_line": 128,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._left_indexer_unique#227",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._left_indexer_unique(self, left, right)",
        "snippet": "    def _left_indexer_unique(self, left, right):\n        return libjoin.left_join_indexer_unique(left, right)",
        "begin_line": 227,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._left_indexer#230",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._left_indexer(self, left, right)",
        "snippet": "    def _left_indexer(self, left, right):\n        return libjoin.left_join_indexer(left, right)",
        "begin_line": 230,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._inner_indexer#233",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._inner_indexer(self, left, right)",
        "snippet": "    def _inner_indexer(self, left, right):\n        return libjoin.inner_join_indexer(left, right)",
        "begin_line": 233,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.397952655150352e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._outer_indexer#236",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._outer_indexer(self, left, right)",
        "snippet": "    def _outer_indexer(self, left, right):\n        return libjoin.outer_join_indexer(left, right)",
        "begin_line": 236,
        "end_line": 237,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#267",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n\n        from .range import RangeIndex\n        from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n        from .numeric import Float64Index, Int64Index, UInt64Index\n        from .interval import IntervalIndex\n        from .category import CategoricalIndex\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # interval\n        elif (\n            is_interval_dtype(data) or is_interval_dtype(dtype)\n        ) and not is_object_dtype(dtype):\n            closed = kwargs.get(\"closed\", None)\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            if is_dtype_equal(_o_dtype, dtype):\n                # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n                #  will raise in the where `data` is already tz-aware.  So\n                #  we leave it out of this step and cast to object-dtype after\n                #  the DatetimeIndex construction.\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                return DatetimeIndex(data, copy=False, name=name, **kwargs).astype(\n                    object\n                )\n            else:\n                return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            if is_dtype_equal(_o_dtype, dtype):\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                return TimedeltaIndex(data, copy=False, name=name, **kwargs).astype(\n                    object\n                )\n            else:\n                return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_period_dtype(data) and not is_object_dtype(dtype):\n            return PeriodIndex(data, copy=copy, name=name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            data = np.asarray(data)\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                if is_integer_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"integer\":\n                        data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n                    elif inferred in [\"floating\", \"mixed-integer-float\"]:\n                        if isna(data).any():\n                            raise ValueError(\"cannot convert float NaN to integer\")\n\n                        if inferred == \"mixed-integer-float\":\n                            data = maybe_cast_to_integer_array(data, dtype)\n\n                        # If we are actually all equal to integers,\n                        # then coerce to integer.\n                        try:\n                            return cls._try_convert_to_int_index(\n                                data, copy, name, dtype\n                            )\n                        except ValueError:\n                            pass\n\n                        # Return an actual float index.\n                        return Float64Index(data, copy=copy, name=name)\n\n                    elif inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                elif is_float_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                else:\n                    data = np.array(data, dtype=dtype, copy=copy)\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                inferred = lib.infer_dtype(subarr, skipna=False)\n                if inferred == \"integer\":\n                    try:\n                        return cls._try_convert_to_int_index(subarr, copy, name, dtype)\n                    except ValueError:\n                        pass\n\n                    return Index(subarr, copy=copy, dtype=object, name=name)\n                elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n                    # TODO: Returns IntegerArray for integer-na case in the future\n                    return Float64Index(subarr, copy=copy, name=name)\n                elif inferred == \"interval\":\n                    try:\n                        return IntervalIndex(subarr, name=name, copy=copy)\n                    except ValueError:\n                        # GH27172: mixed closed Intervals --> object dtype\n                        pass\n                elif inferred == \"boolean\":\n                    # don't support boolean explicitly ATM\n                    pass\n                elif inferred != \"string\":\n                    if inferred.startswith(\"datetime\"):\n                        try:\n                            return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)\n                        except (ValueError, OutOfBoundsDatetime):\n                            # GH 27011\n                            # If we have mixed timezones, just send it\n                            # down the base constructor\n                            pass\n\n                    elif inferred.startswith(\"timedelta\"):\n                        return TimedeltaIndex(subarr, copy=copy, name=name, **kwargs)\n                    elif inferred == \"period\":\n                        try:\n                            return PeriodIndex(subarr, name=name, **kwargs)\n                        except IncompatibleFrequency:\n                            pass\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {set(kwargs)!r}\")\n            return cls._simple_new(subarr, name, **kwargs)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from .multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 267,
        "end_line": 467,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009633911368015414,
            "pseudo_dstar_susp": 0.14285714285714285,
            "pseudo_tarantula_susp": 0.0006385696040868455,
            "pseudo_op2_susp": 0.14285714285714285,
            "pseudo_barinel_susp": 0.0006385696040868455
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.asi8#489",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.asi8(self)",
        "snippet": "    def asi8(self):\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        return None",
        "begin_line": 489,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#501",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            # Index._data must always be an ndarray.\n            # This is no-copy for when _values is an ndarray,\n            # which should be always at this point.\n            values = np.asarray(values._values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides. We don't re-use `_ndarray_values`, since\n        # we actually set this value too.\n        result._index_data = values\n        result.name = name\n\n        return result._reset_identity()",
        "begin_line": 501,
        "end_line": 524,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005379236148466917,
            "pseudo_dstar_susp": 0.0014534883720930232,
            "pseudo_tarantula_susp": 0.00043308791684711995,
            "pseudo_op2_susp": 0.0014534883720930232,
            "pseudo_barinel_susp": 0.00043308791684711995
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._constructor#527",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._constructor(self)",
        "snippet": "    def _constructor(self):\n        return type(self)",
        "begin_line": 527,
        "end_line": 528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.354451293130838e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#533",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 533,
        "end_line": 537,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004385964912280702,
            "pseudo_dstar_susp": 0.0012315270935960591,
            "pseudo_tarantula_susp": 0.00034831069313827936,
            "pseudo_op2_susp": 0.0012315270935960591,
            "pseudo_barinel_susp": 0.00034831069313827936
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#555",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            values = self.values\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n\n        # _simple_new expects an the type of self._data\n        values = getattr(values, \"_values\", values)\n        if isinstance(values, ABCDatetimeArray):\n            # `self.values` returns `self` for tz-aware, so we need to unwrap\n            #  more specifically\n            values = values.asi8\n\n        return self._simple_new(values, **attributes)",
        "begin_line": 555,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007836990595611285,
            "pseudo_dstar_susp": 0.000550357732526142,
            "pseudo_tarantula_susp": 0.000856898029134533,
            "pseudo_op2_susp": 0.000550357732526142,
            "pseudo_barinel_susp": 0.000856898029134533
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy_with_infer#572",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy_with_infer(self, values, **kwargs)",
        "snippet": "    def _shallow_copy_with_infer(self, values, **kwargs):\n        \"\"\"\n        Create a new Index inferring the class with passed value, don't copy\n        the data, use the same object attributes with passed in attributes\n        taking precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        kwargs : updates the default attributes for this Index\n        \"\"\"\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        attributes[\"copy\"] = False\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        if self._infer_as_myclass:\n            try:\n                return self._constructor(values, **attributes)\n            except (TypeError, ValueError):\n                pass\n        return Index(values, **attributes)",
        "begin_line": 572,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038255547054322876,
            "pseudo_dstar_susp": 0.00038255547054322876,
            "pseudo_tarantula_susp": 0.00038299502106472615,
            "pseudo_op2_susp": 0.00038255547054322876,
            "pseudo_barinel_susp": 0.00038299502106472615
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#601",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 601,
        "end_line": 618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005813953488372093,
            "pseudo_dstar_susp": 0.0017123287671232876,
            "pseudo_tarantula_susp": 0.00046125461254612545,
            "pseudo_op2_susp": 0.0017123287671232876,
            "pseudo_barinel_susp": 0.00046125461254612545
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#620",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 620,
        "end_line": 625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005219206680584551,
            "pseudo_dstar_susp": 0.001349527665317139,
            "pseudo_tarantula_susp": 0.00042069835927639884,
            "pseudo_op2_susp": 0.001349527665317139,
            "pseudo_barinel_susp": 0.00042069835927639884
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._cleanup#627",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._cleanup(self)",
        "snippet": "    def _cleanup(self):\n        self._engine.clear_mapping()",
        "begin_line": 627,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.721333512568894e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#631",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `_ndarray_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        _ndarray_values = self._ndarray_values\n        return self._engine_type(lambda: _ndarray_values, len(self))",
        "begin_line": 631,
        "end_line": 637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009643201542912247,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.0005197505197505198,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.0005197505197505198
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#643",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 643,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005279831045406547,
            "pseudo_dstar_susp": 0.0013869625520110957,
            "pseudo_tarantula_susp": 0.0004269854824935952,
            "pseudo_op2_susp": 0.0013869625520110957,
            "pseudo_barinel_susp": 0.0004269854824935952
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#649",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 649,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.172458490216653e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#667",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 667,
        "end_line": 671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006510416666666666,
            "pseudo_dstar_susp": 0.002207505518763797,
            "pseudo_tarantula_susp": 0.0005094243504839531,
            "pseudo_op2_susp": 0.002207505518763797,
            "pseudo_barinel_susp": 0.0005094243504839531
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#688",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 688,
        "end_line": 698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004411116012351125,
            "pseudo_dstar_susp": 0.0004409171075837742,
            "pseudo_tarantula_susp": 0.0005512679162072767,
            "pseudo_op2_susp": 0.0004409171075837742,
            "pseudo_barinel_susp": 0.0005512679162072767
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#726",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n        elif is_datetime64tz_dtype(dtype):\n            # TODO(GH-24559): Remove this block, use the following elif.\n            # avoid FutureWarning from DatetimeIndex constructor.\n            from pandas import DatetimeIndex\n\n            tz = pandas_dtype(dtype).tz\n            return DatetimeIndex(np.asarray(self)).tz_localize(\"UTC\").tz_convert(tz)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            if is_datetime64tz_dtype(dtype):\n                from pandas import DatetimeIndex\n\n                return DatetimeIndex(\n                    self.values, name=self.name, dtype=dtype, copy=copy\n                )\n            return Index(\n                self.values.astype(dtype, copy=copy), name=self.name, dtype=dtype\n            )\n        except (TypeError, ValueError):\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))",
        "begin_line": 726,
        "end_line": 757,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#788",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self.values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                msg = \"Unable to fill values because {0} cannot contain NA\"\n                raise ValueError(msg.format(type(self).__name__))\n            taken = self.values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 788,
        "end_line": 805,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005025125628140704,
            "pseudo_dstar_susp": 0.000501002004008016,
            "pseudo_tarantula_susp": 0.0007380073800738007,
            "pseudo_op2_susp": 0.000501002004008016,
            "pseudo_barinel_susp": 0.0007380073800738007
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#807",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 807,
        "end_line": 828,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.repeat#870",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.repeat(self, repeats, axis=None)",
        "snippet": "    def repeat(self, repeats, axis=None):\n        repeats = ensure_platform_int(repeats)\n        nv.validate_repeat(tuple(), dict(axis=axis))\n        return self._shallow_copy(self._values.repeat(repeats))",
        "begin_line": 870,
        "end_line": 873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#901",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, **kwargs)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, **kwargs):\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = kwargs.get(\"names\")\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 901,
        "end_line": 913,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.250144377526606e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#932",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self):\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = f\"{klass_name}({data}{prepr})\"\n\n        return res",
        "begin_line": 932,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#951",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self):\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 951,
        "end_line": 959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._formatter_func#962",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint",
        "begin_line": 962,
        "end_line": 966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#968",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None):\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n\n        # do we want to justify (only do so for non-objects)\n        is_justify = not (\n            self.inferred_type in (\"string\", \"unicode\")\n            or (\n                self.inferred_type == \"categorical\" and is_object_dtype(self.categories)\n            )\n        )\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 968,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#985",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 985,
        "end_line": 989,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010175010175010175,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.format#995",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.format(self, name=False, formatter=None, **kwargs)",
        "snippet": "    def format(self, name=False, formatter=None, **kwargs):\n        \"\"\"\n        Render a string representation of the Index.\n        \"\"\"\n        header = []\n        if name:\n            header.append(\n                pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n                if self.name is not None\n                else \"\"\n            )\n\n        if formatter is not None:\n            return header + list(self.map(formatter))\n\n        return self._format_with_header(header, **kwargs)",
        "begin_line": 995,
        "end_line": 1010,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.773469029654326e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_with_header#1012",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_with_header(self, header, na_rep='NaN', **kwargs)",
        "snippet": "    def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n        values = self.values\n\n        from pandas.io.formats.format import format_array\n\n        if is_categorical_dtype(values.dtype):\n            values = np.array(values)\n\n        elif is_object_dtype(values.dtype):\n            values = lib.maybe_convert_objects(values, safe=1)\n\n        if is_object_dtype(values.dtype):\n            result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n            # could have nans\n            mask = isna(values)\n            if mask.any():\n                result = np.array(result)\n                result[mask] = na_rep\n                result = result.tolist()\n\n        else:\n            result = _trim_front(format_array(values, None, justify=\"left\"))\n        return header + result",
        "begin_line": 1012,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1226",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep=False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1226,
        "end_line": 1244,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.481721545242416e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1246",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1246,
        "end_line": 1247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00038550501156515033,
            "pseudo_dstar_susp": 0.00038550501156515033,
            "pseudo_tarantula_susp": 0.0003863987635239567,
            "pseudo_op2_susp": 0.00038550501156515033,
            "pseudo_barinel_susp": 0.0003863987635239567
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1249",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(\n                    \"{}.name must be a hashable type\".format(type(self).__name__)\n                )\n        self.name = values[0]",
        "begin_line": 1249,
        "end_line": 1277,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.329113924050633e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1281",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace=False)",
        "snippet": "    def set_names(self, names, level=None, inplace=False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            msg = \"Names must be a string when a single level is provided.\"\n            raise TypeError(msg)\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1281,
        "end_line": 1359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.rename#1361",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.rename(self, name, inplace=False)",
        "snippet": "    def rename(self, name, inplace=False):\n        \"\"\"\n        Alter Index or MultiIndex name.\n\n        Able to set new names without level. Defaults to returning new index.\n        Length of names must match number of levels in MultiIndex.\n\n        Parameters\n        ----------\n        name : label or list of labels\n            Name(s) to set.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.set_names : Able to set new names partially and by level.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n        >>> idx.rename('grade')\n        Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]],\n        ...                                   names=['kind', 'year'])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.rename(['species', 'year'])\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        >>> idx.rename('species')\n        Traceback (most recent call last):\n        TypeError: Must pass list-like as `names`.\n        \"\"\"\n        return self.set_names([name], inplace=inplace)",
        "begin_line": 1361,
        "end_line": 1410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.621201085876978e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1416",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1416,
        "end_line": 1420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006920415224913495,
            "pseudo_dstar_susp": 0.002688172043010753,
            "pseudo_tarantula_susp": 0.0005461496450027307,
            "pseudo_op2_susp": 0.002688172043010753,
            "pseudo_barinel_susp": 0.0005461496450027307
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._sort_levels_monotonic#1422",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        Compat with MultiIndex.\n        \"\"\"\n        return self",
        "begin_line": 1422,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.747133560582585e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_index_level#1428",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_index_level(self, level)",
        "snippet": "    def _validate_index_level(self, level):\n        \"\"\"\n        Validate index level.\n\n        For single-level Index getting level number is a no-op, but some\n        verification must be done like in MultiIndex.\n\n        \"\"\"\n        if isinstance(level, int):\n            if level < 0 and level != -1:\n                raise IndexError(\n                    f\"Too many levels: Index has only 1 level,\"\n                    f\" {level} is not a valid level number\"\n                )\n            elif level > 0:\n                raise IndexError(\n                    \"Too many levels: Index has only 1 level, not %d\" % (level + 1)\n                )\n        elif level != self.name:\n            raise KeyError(\n                \"Requested level ({}) does not match index name ({})\".format(\n                    level, self.name\n                )\n            )",
        "begin_line": 1428,
        "end_line": 1451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.124087591240875e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_level_number#1453",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level):\n        self._validate_index_level(level)\n        return 0",
        "begin_line": 1453,
        "end_line": 1455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.067118425298483e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_level_values#1476",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_level_values(self, level)",
        "snippet": "    def _get_level_values(self, level):\n        \"\"\"\n        Return an Index of values for requested level.\n\n        This is primarily useful to get an individual level of values from a\n        MultiIndex, but is provided on Index as well for compatibility.\n\n        Parameters\n        ----------\n        level : int or str\n            It is either the integer position or the name of the level.\n\n        Returns\n        -------\n        Index\n            Calling object, as there is only one level in the Index.\n\n        See Also\n        --------\n        MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n        Notes\n        -----\n        For Index, level should be 0, since there are no multiple levels.\n\n        Examples\n        --------\n\n        >>> idx = pd.Index(list('abc'))\n        >>> idx\n        Index(['a', 'b', 'c'], dtype='object')\n\n        Get level values by supplying `level` as integer:\n\n        >>> idx.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object')\n        \"\"\"\n        self._validate_index_level(level)\n        return self",
        "begin_line": 1476,
        "end_line": 1514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.droplevel#1518",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.droplevel(self, level=0)",
        "snippet": "    def droplevel(self, level=0):\n        \"\"\"\n        Return index with requested level(s) removed.\n\n        If resulting index has only 1 level left, the result will be\n        of Index type, not MultiIndex.\n\n        .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n        Parameters\n        ----------\n        level : int, str, or list-like, default 0\n            If a string is given, must be the name of a level\n            If list-like, elements must be names or indexes of levels.\n\n        Returns\n        -------\n        Index or MultiIndex\n        \"\"\"\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n\n        levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n        if len(level) == 0:\n            return self\n        if len(level) >= self.nlevels:\n            raise ValueError(\n                \"Cannot remove {} levels from an index with {} \"\n                \"levels: at least one level must be \"\n                \"left.\".format(len(level), self.nlevels)\n            )\n        # The two checks above guarantee that here self is a MultiIndex\n\n        new_levels = list(self.levels)\n        new_codes = list(self.codes)\n        new_names = list(self.names)\n\n        for i in levnums:\n            new_levels.pop(i)\n            new_codes.pop(i)\n            new_names.pop(i)\n\n        if len(new_levels) == 1:\n\n            # set nan if needed\n            mask = new_codes[0] == -1\n            result = new_levels[0].take(new_codes[0])\n            if mask.any():\n                result = result.putmask(mask, np.nan)\n\n            result.name = new_names[0]\n            return result\n        else:\n            from .multi import MultiIndex\n\n            return MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=new_names,\n                verify_integrity=False,\n            )",
        "begin_line": 1518,
        "end_line": 1579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic#1617",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing",
        "begin_line": 1617,
        "end_line": 1621,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.173601679219657e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1624",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self):\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1624,
        "end_line": 1638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.163328197226502e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1692",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1692,
        "end_line": 1696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006788866259334691,
            "pseudo_dstar_susp": 0.0025,
            "pseudo_tarantula_susp": 0.0005367686527106817,
            "pseudo_op2_susp": 0.0025,
            "pseudo_barinel_susp": 0.0005367686527106817
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1702",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1702,
        "end_line": 1703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00042354934349851756,
            "pseudo_dstar_susp": 0.00042354934349851756,
            "pseudo_tarantula_susp": 0.0004957858205255329,
            "pseudo_op2_susp": 0.00042354934349851756,
            "pseudo_barinel_susp": 0.0004957858205255329
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1705",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1705,
        "end_line": 1706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.779201410073893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_numeric#1711",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_numeric(self)",
        "snippet": "    def is_numeric(self) -> bool:\n        return self.inferred_type in [\"integer\", \"floating\"]",
        "begin_line": 1711,
        "end_line": 1712,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_object#1714",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_object(self)",
        "snippet": "    def is_object(self) -> bool:\n        return is_object_dtype(self.dtype)",
        "begin_line": 1714,
        "end_line": 1715,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005431830526887561,
            "pseudo_dstar_susp": 0.000505050505050505,
            "pseudo_tarantula_susp": 0.0007468259895444362,
            "pseudo_op2_susp": 0.000505050505050505,
            "pseudo_barinel_susp": 0.0007468259895444362
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_categorical#1717",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_categorical(self)",
        "snippet": "    def is_categorical(self) -> bool:\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        boolean\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]",
        "begin_line": 1717,
        "end_line": 1751,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_mixed#1756",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_mixed(self)",
        "snippet": "    def is_mixed(self) -> bool:\n        return self.inferred_type in [\"mixed\"]",
        "begin_line": 1756,
        "end_line": 1757,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.000125250501002004,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.holds_integer#1759",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.holds_integer(self)",
        "snippet": "    def holds_integer(self):\n        \"\"\"\n        Whether the type is an integer type.\n        \"\"\"\n        return self.inferred_type in [\"integer\", \"mixed-integer\"]",
        "begin_line": 1759,
        "end_line": 1763,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1766",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1766,
        "end_line": 1770,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003943217665615142,
            "pseudo_dstar_susp": 0.0003943217665615142,
            "pseudo_tarantula_susp": 0.0003952569169960474,
            "pseudo_op2_susp": 0.0003943217665615142,
            "pseudo_barinel_susp": 0.0003952569169960474
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1773",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1773,
        "end_line": 1774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00045248868778280545,
            "pseudo_dstar_susp": 0.0004522840343735866,
            "pseudo_tarantula_susp": 0.0006016847172081829,
            "pseudo_op2_susp": 0.0004522840343735866,
            "pseudo_barinel_susp": 0.0006016847172081829
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1820",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1820,
        "end_line": 1830,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.288517167651868e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._nan_idxs#1833",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._nan_idxs(self)",
        "snippet": "    def _nan_idxs(self):\n        if self._can_hold_na:\n            return self._isnan.nonzero()[0]\n        else:\n            return np.array([], dtype=np.int64)",
        "begin_line": 1833,
        "end_line": 1837,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.153946510110893e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#1840",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self):\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 1840,
        "end_line": 1847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.596741209842338e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isna#1849",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n        mapped to ``True`` values.\n        Everything else get mapped to ``False`` values. Characters such as\n        empty strings `''` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        numpy.ndarray\n            A boolean array of whether my values are NA.\n\n        See Also\n        --------\n        Index.notna : Boolean inverse of isna.\n        Index.dropna : Omit entries with missing values.\n        isna : Top-level isna.\n        Series.isna : Detect missing values in Series object.\n\n        Examples\n        --------\n        Show which entries in a pandas.Index are NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.isna()\n        array([False, False,  True], dtype=bool)\n\n        Empty strings are not considered NA values. None is considered an NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.isna()\n        array([False, False, False,  True], dtype=bool)\n\n        For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n        >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n        ...                         pd.Timestamp(''), None, pd.NaT])\n        >>> idx\n        DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                      dtype='datetime64[ns]', freq=None)\n        >>> idx.isna()\n        array([False,  True,  True,  True], dtype=bool)\n        \"\"\"\n        return self._isnan",
        "begin_line": 1849,
        "end_line": 1902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.259001161440186e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.notna#1906",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.notna(self)",
        "snippet": "    def notna(self):\n        \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to ``True``. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n        values.\n\n        Returns\n        -------\n        numpy.ndarray\n            Boolean array to indicate which entries are not NA.\n\n        See Also\n        --------\n        Index.notnull : Alias of notna.\n        Index.isna: Inverse of notna.\n        notna : Top-level notna.\n\n        Examples\n        --------\n        Show which entries in an Index are not NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.notna()\n        array([ True,  True, False])\n\n        Empty strings are not considered NA values. None is considered a NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.notna()\n        array([ True,  True,  True, False])\n        \"\"\"\n        return ~self.isna()",
        "begin_line": 1906,
        "end_line": 1948,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.unique#2035",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.unique(self, level=None)",
        "snippet": "    def unique(self, level=None):\n        if level is not None:\n            self._validate_index_level(level)\n        result = super().unique()\n        return self._shallow_copy(result)",
        "begin_line": 2035,
        "end_line": 2039,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.duplicated#2089",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.duplicated(self, keep='first')",
        "snippet": "    def duplicated(self, keep=\"first\"):\n        \"\"\"\n        Indicate duplicate index values.\n\n        Duplicated values are indicated as ``True`` values in the resulting\n        array. Either all duplicates, all except the first, or all except the\n        last occurrence of duplicates can be indicated.\n\n        Parameters\n        ----------\n        keep : {'first', 'last', False}, default 'first'\n            The value or values in a set of duplicates to mark as missing.\n\n            - 'first' : Mark duplicates as ``True`` except for the first\n              occurrence.\n            - 'last' : Mark duplicates as ``True`` except for the last\n              occurrence.\n            - ``False`` : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        Series.duplicated : Equivalent method on pandas.Series.\n        DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n        Index.drop_duplicates : Remove duplicate values from Index.\n\n        Examples\n        --------\n        By default, for each set of duplicated values, the first occurrence is\n        set to False and all others to True:\n\n        >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n        >>> idx.duplicated()\n        array([False, False,  True, False,  True])\n\n        which is equivalent to\n\n        >>> idx.duplicated(keep='first')\n        array([False, False,  True, False,  True])\n\n        By using 'last', the last occurrence of each set of duplicated values\n        is set on False and all others on True:\n\n        >>> idx.duplicated(keep='last')\n        array([ True, False,  True, False, False])\n\n        By setting keep on ``False``, all duplicates are True:\n\n        >>> idx.duplicated(keep=False)\n        array([ True, False,  True, False,  True])\n        \"\"\"\n        return super().duplicated(keep=keep)",
        "begin_line": 2089,
        "end_line": 2143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_unique_index#2207",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_unique_index(self, dropna=False)",
        "snippet": "    def _get_unique_index(self, dropna=False):\n        \"\"\"\n        Returns an index containing unique values.\n\n        Parameters\n        ----------\n        dropna : bool\n            If True, NaN values are dropped.\n\n        Returns\n        -------\n        uniques : index\n        \"\"\"\n        if self.is_unique and not dropna:\n            return self\n\n        values = self.values\n\n        if not self.is_unique:\n            values = self.unique()\n\n        if dropna:\n            try:\n                if self.hasnans:\n                    values = values[~isna(values)]\n            except NotImplementedError:\n                pass\n\n        return self._shallow_copy(values)",
        "begin_line": 2207,
        "end_line": 2235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000966183574879227,
            "pseudo_dstar_susp": 0.0005955926146515784,
            "pseudo_tarantula_susp": 0.0009832841691248771,
            "pseudo_op2_susp": 0.0005955926146515784,
            "pseudo_barinel_susp": 0.0009832841691248771
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__and__#2265",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__and__(self, other)",
        "snippet": "    def __and__(self, other):\n        return self.intersection(other)",
        "begin_line": 2265,
        "end_line": 2266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__or__#2268",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__or__(self, other)",
        "snippet": "    def __or__(self, other):\n        return self.union(other)",
        "begin_line": 2268,
        "end_line": 2269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_reconciled_name_object#2287",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_reconciled_name_object(self, other)",
        "snippet": "    def _get_reconciled_name_object(self, other):\n        \"\"\"\n        If the result of a set operation will be self,\n        return self, unless the name changes, in which\n        case make a shallow copy of self.\n        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self",
        "begin_line": 2287,
        "end_line": 2296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.65335994677312e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._union_incompatible_dtypes#2298",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._union_incompatible_dtypes(self, other, sort)",
        "snippet": "    def _union_incompatible_dtypes(self, other, sort):\n        \"\"\"\n        Casts this and other index to object dtype to allow the formation\n        of a union between incompatible types.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        this = self.astype(object, copy=False)\n        # cast to Index for when `other` is list-like\n        other = Index(other).astype(object, copy=False)\n        return Index.union(this, other, sort=sort).astype(object, copy=False)",
        "begin_line": 2298,
        "end_line": 2320,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._is_compatible_with_other#2322",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other.\n        Meaning a union can be formed between them without needing to be cast\n        to dtype object.\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
        "begin_line": 2322,
        "end_line": 2336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.74399784192069e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_sort_keyword#2338",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_sort_keyword(self, sort)",
        "snippet": "    def _validate_sort_keyword(self, sort):\n        if sort not in [None, False]:\n            raise ValueError(\n                \"The 'sort' keyword only takes the values of \"\n                \"None or False; {0} was passed.\".format(sort)\n            )",
        "begin_line": 2338,
        "end_line": 2343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00043346337234503684,
            "pseudo_dstar_susp": 0.00043346337234503684,
            "pseudo_tarantula_susp": 0.0005173305742369374,
            "pseudo_op2_susp": 0.00043346337234503684,
            "pseudo_barinel_susp": 0.0005173305742369374
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.union#2345",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two Index objects.\n\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : bool or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` or `other` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        union : Index\n\n        Examples\n        --------\n\n        Union matching dtypes\n\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.union(idx2)\n        Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)\n        Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if not self._is_compatible_with_other(other):\n            return self._union_incompatible_dtypes(other, sort=sort)\n\n        return self._union(other, sort=sort)",
        "begin_line": 2345,
        "end_line": 2403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._union#2405",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Specific union logic should go here. In subclasses, union behavior\n        should be overwritten here rather than in `self.union`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        if not len(other) or self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not len(self):\n            return other._get_reconciled_name_object(self)\n\n        # TODO(EA): setops-refactor, clean all this up\n        if is_period_dtype(self) or is_datetime64tz_dtype(self):\n            lvals = self._ndarray_values\n        else:\n            lvals = self._values\n        if is_period_dtype(other) or is_datetime64tz_dtype(other):\n            rvals = other._ndarray_values\n        else:\n            rvals = other._values\n\n        if sort is None and self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._outer_indexer(lvals, rvals)[0]\n            except TypeError:\n                # incomparable objects\n                result = list(lvals)\n\n                # worth making this faster? a very unusual case\n                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)\n                indexer = (indexer == -1).nonzero()[0]\n            else:\n                indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n            if len(indexer) > 0:\n                other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n                result = concat_compat((lvals, other_diff))\n\n            else:\n                result = lvals\n\n            if sort is None:\n                try:\n                    result = algos.safe_sort(result)\n                except TypeError as e:\n                    warnings.warn(\n                        \"{}, sort order is undefined for \"\n                        \"incomparable objects\".format(e),\n                        RuntimeWarning,\n                        stacklevel=3,\n                    )\n\n        # for subclasses\n        return self._wrap_setop_result(other, result)",
        "begin_line": 2405,
        "end_line": 2478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._wrap_setop_result#2480",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._wrap_setop_result(self, other, result)",
        "snippet": "    def _wrap_setop_result(self, other, result):\n        return self._constructor(result, name=get_op_result_name(self, other))",
        "begin_line": 2480,
        "end_line": 2481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.396724876863046e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.intersection#2522",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.intersection(self, other, sort=False)",
        "snippet": "    def intersection(self, other, sort=False):\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n        other = ensure_index(other)\n\n        if self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.intersection(other, sort=sort)\n\n        # TODO(EA): setops-refactor, clean all this up\n        if is_period_dtype(self):\n            lvals = self._ndarray_values\n        else:\n            lvals = self._values\n        if is_period_dtype(other):\n            rvals = other._ndarray_values\n        else:\n            rvals = other._values\n\n        if self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._inner_indexer(lvals, rvals)[0]\n                return self._wrap_setop_result(other, result)\n            except TypeError:\n                pass\n\n        try:\n            indexer = Index(rvals).get_indexer(lvals)\n            indexer = indexer.take((indexer != -1).nonzero()[0])\n        except (InvalidIndexError, IncompatibleFrequency):\n            # InvalidIndexError raised by get_indexer if non-unique\n            # IncompatibleFrequency raised by PeriodIndex.get_indexer\n            indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n            indexer = indexer[indexer != -1]\n\n        taken = other.take(indexer)\n\n        if sort is None:\n            taken = algos.safe_sort(taken.values)\n            if self.name != other.name:\n                name = None\n            else:\n                name = self.name\n            return self._shallow_copy(taken, name=name)\n\n        if self.name != other.name:\n            taken.name = None\n\n        return taken",
        "begin_line": 2522,
        "end_line": 2574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.difference#2576",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.difference(self, other, sort=None)",
        "snippet": "    def difference(self, other, sort=None):\n        \"\"\"\n        Return a new Index with elements from the index that are not in\n        `other`.\n\n        This is the set difference of two Index objects.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default None\n            Whether to sort the resulting index. By default, the\n            values are attempted to be sorted, but any TypeError from\n            incomparable elements is caught by pandas.\n\n            * None : Attempt to sort the result, but catch any TypeErrors\n              from comparing incomparable elements.\n            * False : Do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        difference : Index\n\n        Examples\n        --------\n\n        >>> idx1 = pd.Index([2, 1, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.difference(idx2)\n        Int64Index([1, 2], dtype='int64')\n        >>> idx1.difference(idx2, sort=False)\n        Int64Index([2, 1], dtype='int64')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if self.equals(other):\n            # pass an empty np.ndarray with the appropriate dtype\n            return self._shallow_copy(self._data[:0])\n\n        other, result_name = self._convert_can_do_setop(other)\n\n        this = self._get_unique_index()\n\n        indexer = this.get_indexer(other)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n\n        label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n        the_diff = this.values.take(label_diff)\n        if sort is None:\n            try:\n                the_diff = algos.safe_sort(the_diff)\n            except TypeError:\n                pass\n\n        return this._shallow_copy(the_diff, name=result_name)",
        "begin_line": 2576,
        "end_line": 2638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010672358591248667,
            "pseudo_dstar_susp": 0.0006305170239596469,
            "pseudo_tarantula_susp": 0.0011614401858304297,
            "pseudo_op2_susp": 0.0006305170239596469,
            "pseudo_barinel_susp": 0.0011614401858304297
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_can_do_setop#2721",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        if not is_list_like(other):\n            raise TypeError(\"Input must be Index or array-like\")\n        return True",
        "begin_line": 2721,
        "end_line": 2724,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004338394793926247,
            "pseudo_dstar_susp": 0.0004338394793926247,
            "pseudo_tarantula_susp": 0.0005189413596263622,
            "pseudo_op2_susp": 0.0004338394793926247,
            "pseudo_barinel_susp": 0.0005189413596263622
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_can_do_setop#2726",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_can_do_setop(self, other)",
        "snippet": "    def _convert_can_do_setop(self, other):\n        if not isinstance(other, Index):\n            other = Index(other, name=self.name)\n            result_name = self.name\n        else:\n            result_name = get_op_result_name(self, other)\n        return other, result_name",
        "begin_line": 2726,
        "end_line": 2732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010775862068965517,
            "pseudo_dstar_susp": 0.0006337135614702154,
            "pseudo_tarantula_susp": 0.0012610340479192938,
            "pseudo_op2_susp": 0.0006337135614702154,
            "pseudo_barinel_susp": 0.0012610340479192938
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2778",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            try:\n                return self._engine.get_loc(key)\n            except KeyError:\n                return self._engine.get_loc(self._maybe_cast_indexer(key))\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2778,
        "end_line": 2795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000847457627118644,
            "pseudo_dstar_susp": 0.004545454545454545,
            "pseudo_tarantula_susp": 0.0006557377049180328,
            "pseudo_op2_susp": 0.004545454545454545,
            "pseudo_barinel_susp": 0.0006557377049180328
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2847",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._ndarray_values)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2847,
        "end_line": 2895,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004253509145044662,
            "pseudo_dstar_susp": 0.0004253509145044662,
            "pseudo_tarantula_susp": 0.000499001996007984,
            "pseudo_op2_susp": 0.0004253509145044662,
            "pseudo_barinel_susp": 0.000499001996007984
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_scalar_indexer#2994",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        if kind == \"iloc\":\n            return self._validate_indexer(\"positional\", key, kind)\n\n        if len(self) and not isinstance(self, ABCMultiIndex):\n\n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .ix on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n\n            if kind in [\"getitem\", \"ix\"] and is_float(key):\n                if not self.is_floating():\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_float(key):\n\n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"unicode\",\n                    \"mixed\",\n                ]:\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_integer(key):\n                if not self.holds_integer():\n                    return self._invalid_indexer(\"label\", key)\n\n        return key",
        "begin_line": 2994,
        "end_line": 3030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3047",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind=None)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # validate iloc\n        if kind == \"iloc\":\n            return slice(\n                self._validate_indexer(\"slice\", key.start, kind),\n                self._validate_indexer(\"slice\", key.stop, kind),\n                self._validate_indexer(\"slice\", key.step, kind),\n            )\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_null_slicer = start is None and stop is None\n        is_index_slice = is_int(start) and is_int(stop)\n        is_positional = is_index_slice and not self.is_integer()\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                return slice(\n                    self._validate_indexer(\"slice\", key.start, kind),\n                    self._validate_indexer(\"slice\", key.stop, kind),\n                    self._validate_indexer(\"slice\", key.step, kind),\n                )\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        try:\n            if is_positional and self.is_mixed():\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n        except KeyError:\n            if self.inferred_type in [\"mixed-integer-float\", \"integer-na\"]:\n                raise\n\n        if is_null_slicer:\n            indexer = key\n        elif is_positional:\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3047,
        "end_line": 3103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3062",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3062,
        "end_line": 3063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.992518005733865e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_listlike_indexer#3105",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_listlike_indexer(self, keyarr, kind=None)",
        "snippet": "    def _convert_listlike_indexer(self, keyarr, kind=None):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        indexer : numpy.ndarray or None\n            Return an ndarray or None if cannot convert.\n        keyarr : numpy.ndarray\n            Return tuple-safe keys.\n        \"\"\"\n        if isinstance(keyarr, Index):\n            keyarr = self._convert_index_indexer(keyarr)\n        else:\n            keyarr = self._convert_arr_indexer(keyarr)\n\n        indexer = self._convert_list_indexer(keyarr, kind=kind)\n        return indexer, keyarr",
        "begin_line": 3105,
        "end_line": 3125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_arr_indexer#3143",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_arr_indexer(self, keyarr)",
        "snippet": "    def _convert_arr_indexer(self, keyarr):\n        keyarr = com.asarray_tuplesafe(keyarr)\n        return keyarr",
        "begin_line": 3143,
        "end_line": 3145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.809669731018046e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_index_indexer#3163",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_index_indexer(self, keyarr)",
        "snippet": "    def _convert_index_indexer(self, keyarr):\n        return keyarr",
        "begin_line": 3163,
        "end_line": 3164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_list_indexer#3183",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_list_indexer(self, keyarr, kind=None)",
        "snippet": "    def _convert_list_indexer(self, keyarr, kind=None):\n        if (\n            kind in [None, \"iloc\", \"ix\"]\n            and is_integer_dtype(keyarr)\n            and not self.is_floating()\n            and not isinstance(keyarr, ABCPeriodIndex)\n        ):\n\n            if self.inferred_type == \"mixed-integer\":\n                indexer = self.get_indexer(keyarr)\n                if (indexer >= 0).all():\n                    return indexer\n                # missing values are flagged as -1 by get_indexer and negative\n                # indices are already converted to positive indices in the\n                # above if-statement, so the negative flags are changed to\n                # values outside the range of indices so as to trigger an\n                # IndexError in maybe_convert_indices\n                indexer[indexer < 0] = len(self)\n\n                return maybe_convert_indices(indexer, len(self))\n\n            elif not self.inferred_type == \"integer\":\n                keyarr = np.where(keyarr < 0, len(self) + keyarr, keyarr)\n                return keyarr\n\n        return None",
        "begin_line": 3183,
        "end_line": 3208,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.757213325224677e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3224",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3224,
        "end_line": 3239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.193868070610096e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3241",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = _ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            attrs = self._get_attributes_dict()\n            attrs.pop(\"freq\", None)  # don't preserve freq\n            values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, dtype=self.dtype, **attrs)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3241,
        "end_line": 3299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reindex_non_unique#3301",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reindex_non_unique(self, target)",
        "snippet": "    def _reindex_non_unique(self, target):\n        \"\"\"\n        Create a new index with target's values (move/add/delete values as\n        necessary) use with non-unique Index and a possibly non-unique target.\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n\n        \"\"\"\n\n        target = ensure_index(target)\n        indexer, missing = self.get_indexer_non_unique(target)\n        check = indexer != -1\n        new_labels = self.take(indexer[check])\n        new_indexer = None\n\n        if len(missing):\n            length = np.arange(len(indexer))\n\n            missing = ensure_platform_int(missing)\n            missing_labels = target.take(missing)\n            missing_indexer = ensure_int64(length[~check])\n            cur_labels = self.take(indexer[check]).values\n            cur_indexer = ensure_int64(length[check])\n\n            new_labels = np.empty(tuple([len(indexer)]), dtype=object)\n            new_labels[cur_indexer] = cur_labels\n            new_labels[missing_indexer] = missing_labels\n\n            # a unique indexer\n            if target.is_unique:\n\n                # see GH5553, make sure we use the right indexer\n                new_indexer = np.arange(len(indexer))\n                new_indexer[cur_indexer] = np.arange(len(cur_labels))\n                new_indexer[missing_indexer] = -1\n\n            # we have a non_unique selector, need to use the original\n            # indexer here\n            else:\n\n                # need to retake to have the same size as the indexer\n                indexer[~check] = -1\n\n                # reset the new indexer to account for the new size\n                new_indexer = np.arange(len(self.take(indexer)))\n                new_indexer[~check] = -1\n\n        new_index = self._shallow_copy_with_infer(new_labels)\n        return new_index, indexer, new_indexer",
        "begin_line": 3301,
        "end_line": 3358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011868027533823879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.join#3385",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.join(self, other, how='left', level=None, return_indexers=False, sort=False)",
        "snippet": "    def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n\n        # try to figure out the join level\n        # GH3662\n        if level is None and (self_is_mi or other_is_mi):\n\n            # have the same levels/names so a simple join\n            if self.names == other.names:\n                pass\n            else:\n                return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n        # join on the level\n        if level is not None and (self_is_mi or other_is_mi):\n            return self._join_level(\n                other, level, how=how, return_indexers=return_indexers\n            )\n\n        other = ensure_index(other)\n\n        if len(other) == 0 and how in (\"left\", \"outer\"):\n            join_index = self._shallow_copy()\n            if return_indexers:\n                rindexer = np.repeat(-1, len(join_index))\n                return join_index, None, rindexer\n            else:\n                return join_index\n\n        if len(self) == 0 and how in (\"right\", \"outer\"):\n            join_index = other._shallow_copy()\n            if return_indexers:\n                lindexer = np.repeat(-1, len(join_index))\n                return join_index, lindexer, None\n            else:\n                return join_index\n\n        if self._join_precedence < other._join_precedence:\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n            result = other.join(\n                self, how=how, level=level, return_indexers=return_indexers\n            )\n            if return_indexers:\n                x, y, z = result\n                result = x, z, y\n            return result\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            this = self.astype(\"O\")\n            other = other.astype(\"O\")\n            return this.join(other, how=how, return_indexers=return_indexers)\n\n        _validate_join_method(how)\n\n        if not self.is_unique and not other.is_unique:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n        elif not self.is_unique or not other.is_unique:\n            if self.is_monotonic and other.is_monotonic:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            else:\n                return self._join_non_unique(\n                    other, how=how, return_indexers=return_indexers\n                )\n        elif self.is_monotonic and other.is_monotonic:\n            try:\n                return self._join_monotonic(\n                    other, how=how, return_indexers=return_indexers\n                )\n            except TypeError:\n                pass\n\n        if how == \"left\":\n            join_index = self\n        elif how == \"right\":\n            join_index = other\n        elif how == \"inner\":\n            # TODO: sort=False here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.intersection(other, sort=False)\n        elif how == \"outer\":\n            # TODO: sort=True here for backwards compat. It may\n            # be better to use the sort parameter passed into join\n            join_index = self.union(other)\n\n        if sort:\n            join_index = join_index.sort_values()\n\n        if return_indexers:\n            if join_index is self:\n                lindexer = None\n            else:\n                lindexer = self.get_indexer(join_index)\n            if join_index is other:\n                rindexer = None\n            else:\n                rindexer = other.get_indexer(join_index)\n            return join_index, lindexer, rindexer\n        else:\n            return join_index",
        "begin_line": 3385,
        "end_line": 3488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_multi#3490",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_multi(self, other, how, return_indexers=True)",
        "snippet": "    def _join_multi(self, other, how, return_indexers=True):\n        from .multi import MultiIndex\n        from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n\n        # figure out join names\n        self_names = set(com.not_none(*self.names))\n        other_names = set(com.not_none(*other.names))\n        overlap = self_names & other_names\n\n        # need at least 1 in common\n        if not overlap:\n            raise ValueError(\"cannot join with no overlapping index names\")\n\n        self_is_mi = isinstance(self, MultiIndex)\n        other_is_mi = isinstance(other, MultiIndex)\n\n        if self_is_mi and other_is_mi:\n\n            # Drop the non-matching levels from left and right respectively\n            ldrop_names = list(self_names - overlap)\n            rdrop_names = list(other_names - overlap)\n\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n\n            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(\n                other_jnlevels, how, return_indexers=True\n            )\n\n            # Restore the dropped levels\n            # Returned index level order is\n            # common levels, ldrop_names, rdrop_names\n            dropped_names = ldrop_names + rdrop_names\n\n            levels, codes, names = _restore_dropped_levels_multijoin(\n                self, other, dropped_names, join_idx, lidx, ridx\n            )\n\n            # Re-create the multi-index\n            multi_join_idx = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n\n            multi_join_idx = multi_join_idx.remove_unused_levels()\n\n            return multi_join_idx, lidx, ridx\n\n        jl = list(overlap)[0]\n\n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n        level = other.names.index(jl)\n        result = self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n\n        if flip_order:\n            if isinstance(result, tuple):\n                return result[0], result[2], result[1]\n        return result",
        "begin_line": 3490,
        "end_line": 3558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_non_unique#3560",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_non_unique(self, other, how='left', return_indexers=False)",
        "snippet": "    def _join_non_unique(self, other, how=\"left\", return_indexers=False):\n        from pandas.core.reshape.merge import _get_join_indexers\n\n        left_idx, right_idx = _get_join_indexers(\n            [self._ndarray_values], [other._ndarray_values], how=how, sort=True\n        )\n\n        left_idx = ensure_platform_int(left_idx)\n        right_idx = ensure_platform_int(right_idx)\n\n        join_index = np.asarray(self._ndarray_values.take(left_idx))\n        mask = left_idx == -1\n        np.putmask(join_index, mask, other._ndarray_values.take(right_idx))\n\n        join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            return join_index, left_idx, right_idx\n        else:\n            return join_index",
        "begin_line": 3560,
        "end_line": 3579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_level#3581",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
        "snippet": "    def _join_level(\n        self, other, level, how=\"left\", return_indexers=False, keep_order=True\n    ):\n        \"\"\"\n        The join method *only* affects the level of the resulting\n        MultiIndex. Otherwise it just exactly aligns the Index data to the\n        labels of the level in the MultiIndex.\n\n        If ```keep_order == True```, the order of the data indexed by the\n        MultiIndex will not be changed; otherwise, it will tie out\n        with `other`.\n        \"\"\"\n        from .multi import MultiIndex\n\n        def _get_leaf_sorter(labels):\n            \"\"\"\n            Returns sorter for the inner most level while preserving the\n            order of higher levels.\n            \"\"\"\n            if labels[0].size == 0:\n                return np.empty(0, dtype=\"int64\")\n\n            if len(labels) == 1:\n                lab = ensure_int64(labels[0])\n                sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n                return sorter\n\n            # find indexers of beginning of each set of\n            # same-key labels w.r.t all but last level\n            tic = labels[0][:-1] != labels[0][1:]\n            for lab in labels[1:-1]:\n                tic |= lab[:-1] != lab[1:]\n\n            starts = np.hstack(([True], tic, [True])).nonzero()[0]\n            lab = ensure_int64(labels[-1])\n            return lib.get_level_sorter(lab, ensure_int64(starts))\n\n        if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n            raise TypeError(\"Join on level between two MultiIndex objects is ambiguous\")\n\n        left, right = self, other\n\n        flip_order = not isinstance(self, MultiIndex)\n        if flip_order:\n            left, right = right, left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n        level = left._get_level_number(level)\n        old_level = left.levels[level]\n\n        if not right.is_unique:\n            raise NotImplementedError(\n                \"Index._join_level on non-unique index is not implemented\"\n            )\n\n        new_level, left_lev_indexer, right_lev_indexer = old_level.join(\n            right, how=how, return_indexers=True\n        )\n\n        if left_lev_indexer is None:\n            if keep_order or len(left) == 0:\n                left_indexer = None\n                join_index = left\n            else:  # sort the leaves\n                left_indexer = _get_leaf_sorter(left.codes[: level + 1])\n                join_index = left[left_indexer]\n\n        else:\n            left_lev_indexer = ensure_int64(left_lev_indexer)\n            rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n\n            new_lev_codes = algos.take_nd(\n                rev_indexer, left.codes[level], allow_fill=False\n            )\n\n            new_codes = list(left.codes)\n            new_codes[level] = new_lev_codes\n\n            new_levels = list(left.levels)\n            new_levels[level] = new_level\n\n            if keep_order:  # just drop missing values. o.w. keep order\n                left_indexer = np.arange(len(left), dtype=np.intp)\n                mask = new_lev_codes != -1\n                if not mask.all():\n                    new_codes = [lab[mask] for lab in new_codes]\n                    left_indexer = left_indexer[mask]\n\n            else:  # tie out the order with other\n                if level == 0:  # outer most level, take the fast route\n                    ngroups = 1 + new_lev_codes.max()\n                    left_indexer, counts = libalgos.groupsort_indexer(\n                        new_lev_codes, ngroups\n                    )\n\n                    # missing values are placed first; drop them!\n                    left_indexer = left_indexer[counts[0] :]\n                    new_codes = [lab[left_indexer] for lab in new_codes]\n\n                else:  # sort the leaves\n                    mask = new_lev_codes != -1\n                    mask_all = mask.all()\n                    if not mask_all:\n                        new_codes = [lab[mask] for lab in new_codes]\n\n                    left_indexer = _get_leaf_sorter(new_codes[: level + 1])\n                    new_codes = [lab[left_indexer] for lab in new_codes]\n\n                    # left_indexers are w.r.t masked frame.\n                    # reverse to original frame!\n                    if not mask_all:\n                        left_indexer = mask.nonzero()[0][left_indexer]\n\n            join_index = MultiIndex(\n                levels=new_levels,\n                codes=new_codes,\n                names=left.names,\n                verify_integrity=False,\n            )\n\n        if right_lev_indexer is not None:\n            right_indexer = algos.take_nd(\n                right_lev_indexer, join_index.codes[level], allow_fill=False\n            )\n        else:\n            right_indexer = join_index.codes[level]\n\n        if flip_order:\n            left_indexer, right_indexer = right_indexer, left_indexer\n\n        if return_indexers:\n            left_indexer = (\n                None if left_indexer is None else ensure_platform_int(left_indexer)\n            )\n            right_indexer = (\n                None if right_indexer is None else ensure_platform_int(right_indexer)\n            )\n            return join_index, left_indexer, right_indexer\n        else:\n            return join_index",
        "begin_line": 3581,
        "end_line": 3720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_leaf_sorter#3595",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_leaf_sorter(labels)",
        "snippet": "        def _get_leaf_sorter(labels):\n            \"\"\"\n            Returns sorter for the inner most level while preserving the\n            order of higher levels.\n            \"\"\"\n            if labels[0].size == 0:\n                return np.empty(0, dtype=\"int64\")\n\n            if len(labels) == 1:\n                lab = ensure_int64(labels[0])\n                sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n                return sorter\n\n            # find indexers of beginning of each set of\n            # same-key labels w.r.t all but last level\n            tic = labels[0][:-1] != labels[0][1:]\n            for lab in labels[1:-1]:\n                tic |= lab[:-1] != lab[1:]\n\n            starts = np.hstack(([True], tic, [True])).nonzero()[0]\n            lab = ensure_int64(labels[-1])\n            return lib.get_level_sorter(lab, ensure_int64(starts))",
        "begin_line": 3595,
        "end_line": 3616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012143290831815422,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._join_monotonic#3722",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._join_monotonic(self, other, how='left', return_indexers=False)",
        "snippet": "    def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n        if self.equals(other):\n            ret_index = other if how == \"right\" else self\n            if return_indexers:\n                return ret_index, None, None\n            else:\n                return ret_index\n\n        sv = self._ndarray_values\n        ov = other._ndarray_values\n\n        if self.is_unique and other.is_unique:\n            # We can perform much better than the general case\n            if how == \"left\":\n                join_index = self\n                lidx = None\n                ridx = self._left_indexer_unique(sv, ov)\n            elif how == \"right\":\n                join_index = other\n                lidx = self._left_indexer_unique(ov, sv)\n                ridx = None\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n                join_index = self._wrap_joined_index(join_index, other)\n        else:\n            if how == \"left\":\n                join_index, lidx, ridx = self._left_indexer(sv, ov)\n            elif how == \"right\":\n                join_index, ridx, lidx = self._left_indexer(ov, sv)\n            elif how == \"inner\":\n                join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            elif how == \"outer\":\n                join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n\n        if return_indexers:\n            lidx = None if lidx is None else ensure_platform_int(lidx)\n            ridx = None if ridx is None else ensure_platform_int(ridx)\n            return join_index, lidx, ridx\n        else:\n            return join_index",
        "begin_line": 3722,
        "end_line": 3765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._wrap_joined_index#3767",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._wrap_joined_index(self, joined, other)",
        "snippet": "    def _wrap_joined_index(self, joined, other):\n        name = get_op_result_name(self, other)\n        return Index(joined, name=name)",
        "begin_line": 3767,
        "end_line": 3769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3775",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3775,
        "end_line": 3794,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006305170239596469,
            "pseudo_dstar_susp": 0.002,
            "pseudo_tarantula_susp": 0.0004868549172346641,
            "pseudo_op2_susp": 0.002,
            "pseudo_barinel_susp": 0.0004868549172346641
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3797",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:\n        # TODO(EA): remove index types as they become extension arrays\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray, ExtensionArray, or Index subclass. This differs\n        from ``_ndarray_values``, which always returns an ndarray.\n\n        Both ``_values`` and ``_ndarray_values`` are consistent between\n        ``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       | _ndarray_values |\n        ----------------- | --------------- | ------------- | --------------- |\n        Index             | ndarray         | ndarray       | ndarray         |\n        CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n        DatetimeIndex     | ndarray[M8ns]   | ndarray[M8ns] | ndarray[M8ns]   |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DTI[tz]       | ndarray[M8ns]   |\n        PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n        IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n        See Also\n        --------\n        values\n        _ndarray_values\n        \"\"\"\n        return self._data",
        "begin_line": 3797,
        "end_line": 3824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003718854592785422,
            "pseudo_dstar_susp": 0.0003718854592785422,
            "pseudo_tarantula_susp": 0.0003721622627465575,
            "pseudo_op2_susp": 0.0003718854592785422,
            "pseudo_barinel_susp": 0.0003721622627465575
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._internal_get_values#3879",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        return self.values",
        "begin_line": 3879,
        "end_line": 3880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003705075954057058,
            "pseudo_dstar_susp": 0.0003705075954057058,
            "pseudo_tarantula_susp": 0.0003707823507601038,
            "pseudo_op2_susp": 0.0003705075954057058,
            "pseudo_barinel_susp": 0.0003707823507601038
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.where#3908",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.where(self, cond, other=None)",
        "snippet": "    def where(self, cond, other=None):\n        if other is None:\n            other = self._na_value\n\n        dtype = self.dtype\n        values = self.values\n\n        if is_bool(other) or is_bool_dtype(other):\n\n            # bools force casting\n            values = values.astype(object)\n            dtype = None\n\n        values = np.where(cond, values, other)\n\n        if self._is_numeric_dtype and np.any(isna(values)):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return self._shallow_copy_with_infer(values, dtype=dtype)",
        "begin_line": 3908,
        "end_line": 3928,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._try_convert_to_int_index#3932",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._try_convert_to_int_index(cls, data, copy, name, dtype)",
        "snippet": "    def _try_convert_to_int_index(cls, data, copy, name, dtype):\n        \"\"\"\n        Attempt to convert an array of data into an integer index.\n\n        Parameters\n        ----------\n        data : The data to convert.\n        copy : Whether to copy the data or not.\n        name : The name of the index returned.\n\n        Returns\n        -------\n        int_index : data converted to either an Int64Index or a\n                    UInt64Index\n\n        Raises\n        ------\n        ValueError if the conversion was not successful.\n        \"\"\"\n\n        from .numeric import Int64Index, UInt64Index\n\n        if not is_unsigned_integer_dtype(dtype):\n            # skip int64 conversion attempt if uint-like dtype is passed, as\n            # this could return Int64Index when UInt64Index is what's desired\n            try:\n                res = data.astype(\"i8\", copy=False)\n                if (res == data).all():\n                    return Int64Index(res, copy=copy, name=name)\n            except (OverflowError, TypeError, ValueError):\n                pass\n\n        # Conversion to int64 failed (possibly due to overflow) or was skipped,\n        # so let's try now with uint64.\n        try:\n            res = data.astype(\"u8\", copy=False)\n            if (res == data).all():\n                return UInt64Index(res, copy=copy, name=name)\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n        raise ValueError",
        "begin_line": 3932,
        "end_line": 3973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.566850538481745e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#3991",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 3991,
        "end_line": 4006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.571597555365709e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_can_do_op#4020",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_can_do_op(self, value)",
        "snippet": "    def _assert_can_do_op(self, value):\n        \"\"\"\n        Check value is valid for scalar op.\n        \"\"\"\n        if not is_scalar(value):\n            msg = \"'value' must be a scalar, passed: {0}\"\n            raise TypeError(msg.format(type(value).__name__))",
        "begin_line": 4020,
        "end_line": 4026,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#4073",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 4073,
        "end_line": 4078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008250825082508251,
            "pseudo_dstar_susp": 0.004405286343612335,
            "pseudo_tarantula_susp": 0.0006341154090044388,
            "pseudo_op2_susp": 0.004405286343612335,
            "pseudo_barinel_susp": 0.0006341154090044388
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__hash__#4100",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__hash__(self)",
        "snippet": "    def __hash__(self):\n        raise TypeError(\"unhashable type: %r\" % type(self).__name__)",
        "begin_line": 4100,
        "end_line": 4101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.082652134423252e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4106",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        key = com.values_from_object(key)\n        result = getitem(key)\n        if not is_scalar(result):\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4106,
        "end_line": 4139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0017699115044247787,
            "pseudo_tarantula_susp": 0.0004692632566870014,
            "pseudo_op2_susp": 0.0017699115044247787,
            "pseudo_barinel_susp": 0.0004692632566870014
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name#4141",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self, name)",
        "snippet": "    def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False",
        "begin_line": 4141,
        "end_line": 4152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005467468562055768,
            "pseudo_dstar_susp": 0.0005065856129685917,
            "pseudo_tarantula_susp": 0.0007501875468867217,
            "pseudo_op2_susp": 0.0005065856129685917,
            "pseudo_barinel_susp": 0.0007501875468867217
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.append#4154",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.append(self, other)",
        "snippet": "    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together.\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n\n        to_concat = [self]\n\n        if isinstance(other, (list, tuple)):\n            to_concat = to_concat + list(other)\n        else:\n            to_concat.append(other)\n\n        for obj in to_concat:\n            if not isinstance(obj, Index):\n                raise TypeError(\"all inputs must be Index\")\n\n        names = {obj.name for obj in to_concat}\n        name = None if len(names) > 1 else self.name\n\n        return self._concat(to_concat, name)",
        "begin_line": 4154,
        "end_line": 4181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat#4183",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat(self, to_concat, name)",
        "snippet": "    def _concat(self, to_concat, name):\n\n        typs = _concat.get_dtype_kinds(to_concat)\n\n        if len(typs) == 1:\n            return self._concat_same_dtype(to_concat, name=name)\n        return Index._concat_same_dtype(self, to_concat, name=name)",
        "begin_line": 4183,
        "end_line": 4189,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.439369141496801e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._concat_same_dtype#4191",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        Concatenate to_concat which has the same class.\n        \"\"\"\n        # must be overridden in specific classes\n        klasses = (\n            ABCDatetimeIndex,\n            ABCTimedeltaIndex,\n            ABCPeriodIndex,\n            ExtensionArray,\n            ABCIntervalIndex,\n        )\n        to_concat = [\n            x.astype(object) if isinstance(x, klasses) else x for x in to_concat\n        ]\n\n        self = to_concat[0]\n        attribs = self._get_attributes_dict()\n        attribs[\"name\"] = name\n\n        to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n\n        return self._shallow_copy_with_infer(np.concatenate(to_concat), **attribs)",
        "begin_line": 4191,
        "end_line": 4213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.118453255017132e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4238",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determine if two Index objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements as calling\n            index; False otherwise.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self) and not is_object_dtype(other):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        return array_equivalent(\n            com.values_from_object(self), com.values_from_object(other)\n        )",
        "begin_line": 4238,
        "end_line": 4260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006082725060827251,
            "pseudo_dstar_susp": 0.0018018018018018018,
            "pseudo_tarantula_susp": 0.00047281323877068556,
            "pseudo_op2_susp": 0.0018018018018018018,
            "pseudo_barinel_susp": 0.00047281323877068556
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4262",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4262,
        "end_line": 4282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009345794392523365,
            "pseudo_dstar_susp": 0.005434782608695652,
            "pseudo_tarantula_susp": 0.0007604562737642585,
            "pseudo_op2_susp": 0.005434782608695652,
            "pseudo_barinel_susp": 0.0007604562737642585
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.sort_values#4388",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.sort_values(self, return_indexer=False, ascending=True)",
        "snippet": "    def sort_values(self, return_indexer=False, ascending=True):\n        \"\"\"\n        Return a sorted copy of the index.\n\n        Return a sorted copy of the index, and optionally return the indices\n        that sorted the index itself.\n\n        Parameters\n        ----------\n        return_indexer : bool, default False\n            Should the indices that would sort the index be returned.\n        ascending : bool, default True\n            Should the index values be sorted in an ascending order.\n\n        Returns\n        -------\n        sorted_index : pandas.Index\n            Sorted copy of the index.\n        indexer : numpy.ndarray, optional\n            The indices that the index itself was sorted by.\n\n        See Also\n        --------\n        Series.sort_values : Sort values of a Series.\n        DataFrame.sort_values : Sort values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([10, 100, 1, 1000])\n        >>> idx\n        Int64Index([10, 100, 1, 1000], dtype='int64')\n\n        Sort values in ascending order (default behavior).\n\n        >>> idx.sort_values()\n        Int64Index([1, 10, 100, 1000], dtype='int64')\n\n        Sort values in descending order, and also get the indices `idx` was\n        sorted by.\n\n        >>> idx.sort_values(ascending=False, return_indexer=True)\n        (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n        \"\"\"\n        _as = self.argsort()\n        if not ascending:\n            _as = _as[::-1]\n\n        sorted_index = self.take(_as)\n\n        if return_indexer:\n            return sorted_index, _as\n        else:\n            return sorted_index",
        "begin_line": 4388,
        "end_line": 4440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.argsort#4506",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.argsort(self, *args, **kwargs)",
        "snippet": "    def argsort(self, *args, **kwargs):\n        \"\"\"\n        Return the integer indices that would sort the index.\n\n        Parameters\n        ----------\n        *args\n            Passed to `numpy.ndarray.argsort`.\n        **kwargs\n            Passed to `numpy.ndarray.argsort`.\n\n        Returns\n        -------\n        numpy.ndarray\n            Integer indices that would sort the index if used as\n            an indexer.\n\n        See Also\n        --------\n        numpy.argsort : Similar method for NumPy arrays.\n        Index.sort_values : Return sorted copy of Index.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n        >>> idx\n        Index(['b', 'a', 'd', 'c'], dtype='object')\n\n        >>> order = idx.argsort()\n        >>> order\n        array([1, 0, 3, 2])\n\n        >>> idx[order]\n        Index(['a', 'b', 'c', 'd'], dtype='object')\n        \"\"\"\n        result = self.asi8\n        if result is None:\n            result = np.array(self)\n        return result.argsort(*args, **kwargs)",
        "begin_line": 4506,
        "end_line": 4544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010322047894302229,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_value#4559",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n\n        # if we have something that is Index-like, then\n        # use this, e.g. DatetimeIndex\n        # Things like `Series._get_value` (via .at) pass the EA directly here.\n        s = getattr(series, \"_values\", series)\n        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            # GH 20882, 21257\n            # Unify Index and ExtensionArray treatment\n            # First try to convert the key to a location\n            # If that fails, raise a KeyError if an integer\n            # index, otherwise, see if key is an integer, and\n            # try that\n            try:\n                iloc = self.get_loc(key)\n                return s[iloc]\n            except KeyError:\n                if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                    raise\n                elif is_integer(key):\n                    return s[key]\n\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        k = self._convert_scalar_indexer(k, kind=\"getitem\")\n        try:\n            return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n        except KeyError as e1:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n\n            try:\n                return libindex.get_value_at(s, key)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:\n                raise e1\n        except TypeError:\n            # e.g. \"[False] is an invalid key\"\n            if is_scalar(key):\n                raise IndexError(key)\n            raise InvalidIndexError(key)",
        "begin_line": 4559,
        "end_line": 4607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer_non_unique#4654",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer_non_unique(self, target)",
        "snippet": "    def get_indexer_non_unique(self, target):\n        target = ensure_index(target)\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer_non_unique(ptarget)\n\n        if is_categorical(target):\n            tgt_values = np.asarray(target)\n        elif self.is_all_dates:\n            tgt_values = target.asi8\n        else:\n            tgt_values = target._ndarray_values\n\n        indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n        return ensure_platform_int(indexer), missing",
        "begin_line": 4654,
        "end_line": 4668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011646866992778943,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer_for#4670",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer_for(self, target, **kwargs)",
        "snippet": "    def get_indexer_for(self, target, **kwargs):\n        \"\"\"\n        Guaranteed return of an indexer even when non-unique.\n\n        This dispatches to get_indexer or get_indexer_non_unique\n        as appropriate.\n\n        Returns\n        -------\n        numpy.ndarray\n            List of indices.\n        \"\"\"\n        if self.is_unique:\n            return self.get_indexer(target, **kwargs)\n        indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n        return indexer",
        "begin_line": 4670,
        "end_line": 4685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4687",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        # A hack, but it works\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n        return self, other",
        "begin_line": 4687,
        "end_line": 4695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004266211604095563,
            "pseudo_dstar_susp": 0.0004266211604095563,
            "pseudo_tarantula_susp": 0.000500751126690035,
            "pseudo_op2_susp": 0.0004266211604095563,
            "pseudo_barinel_susp": 0.000500751126690035
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.map#4724",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.map(self, mapper, na_action=None)",
        "snippet": "    def map(self, mapper, na_action=None):\n        \"\"\"\n        Map values using input correspondence (a dict, Series, or function).\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}\n            If 'ignore', propagate NA values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        applied : Union[Index, MultiIndex], inferred\n            The output of the mapping function applied to the index.\n            If the function returns a tuple with more than one element\n            a MultiIndex will be returned.\n        \"\"\"\n\n        from .multi import MultiIndex\n\n        new_values = super()._map_values(mapper, na_action=na_action)\n\n        attributes = self._get_attributes_dict()\n\n        # we can return a MultiIndex\n        if new_values.size and isinstance(new_values[0], tuple):\n            if isinstance(self, MultiIndex):\n                names = self.names\n            elif attributes.get(\"name\"):\n                names = [attributes.get(\"name\")] * len(new_values[0])\n            else:\n                names = None\n            return MultiIndex.from_tuples(new_values, names=names)\n\n        attributes[\"copy\"] = False\n        if not new_values.size:\n            # empty\n            attributes[\"dtype\"] = self.dtype\n\n        return Index(new_values, **attributes)",
        "begin_line": 4724,
        "end_line": 4765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isin#4767",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isin(self, values, level=None)",
        "snippet": "    def isin(self, values, level=None):\n        \"\"\"\n        Return a boolean array where the index values are in `values`.\n\n        Compute boolean array of whether each index value is found in the\n        passed set of values. The length of the returned boolean array matches\n        the length of the index.\n\n        Parameters\n        ----------\n        values : set or list-like\n            Sought values.\n        level : str or int, optional\n            Name or position of the index level to use (if the index is a\n            `MultiIndex`).\n\n        Returns\n        -------\n        is_contained : ndarray\n            NumPy array of boolean values.\n\n        See Also\n        --------\n        Series.isin : Same for Series.\n        DataFrame.isin : Same method for DataFrames.\n\n        Notes\n        -----\n        In the case of `MultiIndex` you must either specify `values` as a\n        list-like object containing tuples that are the same length as the\n        number of levels, or specify `level`. Otherwise it will raise a\n        ``ValueError``.\n\n        If `level` is specified:\n\n        - if it is the name of one *and only one* index level, use that level;\n        - otherwise it should be a number indicating level position.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1,2,3])\n        >>> idx\n        Int64Index([1, 2, 3], dtype='int64')\n\n        Check whether each index value in a list of values.\n        >>> idx.isin([1, 4])\n        array([ True, False, False])\n\n        >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n        ...                                  ['red', 'blue', 'green']],\n        ...                                  names=('number', 'color'))\n        >>> midx\n        MultiIndex(levels=[[1, 2, 3], ['blue', 'green', 'red']],\n                   codes=[[0, 1, 2], [2, 0, 1]],\n                   names=['number', 'color'])\n\n        Check whether the strings in the 'color' level of the MultiIndex\n        are in a list of colors.\n\n        >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n        array([ True, False, False])\n\n        To check across the levels of a MultiIndex, pass a list of tuples:\n\n        >>> midx.isin([(1, 'red'), (3, 'red')])\n        array([ True, False, False])\n\n        For a DatetimeIndex, string values in `values` are converted to\n        Timestamps.\n\n        >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n        >>> dti = pd.to_datetime(dates)\n        >>> dti\n        DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n        dtype='datetime64[ns]', freq=None)\n\n        >>> dti.isin(['2000-03-11'])\n        array([ True, False, False])\n        \"\"\"\n        if level is not None:\n            self._validate_index_level(level)\n        return algos.isin(self, values)",
        "begin_line": 4767,
        "end_line": 4848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_indexer#4855",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_indexer(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_indexer(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered or unique index, compute the slice indexer for input\n        labels and step.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, default None\n        kind : str, default None\n\n        Returns\n        -------\n        indexer : slice\n\n        Raises\n        ------\n        KeyError : If key does not exist, or key is not unique and index is\n            not ordered.\n\n        Notes\n        -----\n        This function assumes that the data is sorted, so use at your own peril\n\n        Examples\n        --------\n        This is a method on all index types. For example you can do:\n\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_indexer(start='b', end='c')\n        slice(1, 3)\n\n        >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n        >>> idx.slice_indexer(start='b', end=('c', 'g'))\n        slice(1, 3)\n        \"\"\"\n        start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n        # return a slice\n        if not is_scalar(start_slice):\n            raise AssertionError(\"Start slice bound is non-scalar\")\n        if not is_scalar(end_slice):\n            raise AssertionError(\"End slice bound is non-scalar\")\n\n        return slice(start_slice, end_slice, step)",
        "begin_line": 4855,
        "end_line": 4902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4904",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n\n        if is_float(key) and not self.is_floating():\n            try:\n                ckey = int(key)\n                if ckey == key:\n                    key = ckey\n            except (OverflowError, ValueError, TypeError):\n                pass\n        return key",
        "begin_line": 4904,
        "end_line": 4917,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.621201085876978e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_indexer#4919",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_indexer(self, form, key, kind)",
        "snippet": "    def _validate_indexer(self, form, key, kind):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\"]\n\n        if key is None:\n            pass\n        elif is_integer(key):\n            pass\n        elif kind in [\"iloc\", \"getitem\"]:\n            self._invalid_indexer(form, key)\n        return key",
        "begin_line": 4919,
        "end_line": 4932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.998390370214851e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_slice_bound#4989",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_slice_bound(self, label, side, kind)",
        "snippet": "    def get_slice_bound(self, label, side, kind):\n        \"\"\"\n        Calculate slice bound that corresponds to given label.\n\n        Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n        of given label.\n\n        Parameters\n        ----------\n        label : object\n        side : {'left', 'right'}\n        kind : {'ix', 'loc', 'getitem'}\n\n        Returns\n        -------\n        int\n            Index of label.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", None]\n\n        if side not in (\"left\", \"right\"):\n            raise ValueError(\n                f\"Invalid value for side kwarg, must be either\"\n                f\" 'left' or 'right': {side}\"\n            )\n\n        original_label = label\n\n        # For datetime indices label may be a string that has to be converted\n        # to datetime boundary according to its resolution.\n        label = self._maybe_cast_slice_bound(label, side, kind)\n\n        # we need to look up the label\n        try:\n            slc = self.get_loc(label)\n        except KeyError as err:\n            try:\n                return self._searchsorted_monotonic(label, side)\n            except ValueError:\n                # raise the original KeyError\n                raise err\n\n        if isinstance(slc, np.ndarray):\n            # get_loc may return a boolean array or an array of indices, which\n            # is OK as long as they are representable by a slice.\n            if is_bool_dtype(slc):\n                slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n            else:\n                slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n            if isinstance(slc, np.ndarray):\n                raise KeyError(\n                    \"Cannot get %s slice bound for non-unique \"\n                    \"label: %r\" % (side, original_label)\n                )\n\n        if isinstance(slc, slice):\n            if side == \"left\":\n                return slc.start\n            else:\n                return slc.stop\n        else:\n            if side == \"right\":\n                return slc + 1\n            else:\n                return slc",
        "begin_line": 4989,
        "end_line": 5053,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.slice_locs#5055",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.slice_locs(self, start=None, end=None, step=None, kind=None)",
        "snippet": "    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        Compute slice locations for input labels.\n\n        Parameters\n        ----------\n        start : label, default None\n            If None, defaults to the beginning.\n        end : label, default None\n            If None, defaults to the end.\n        step : int, defaults None\n            If None, defaults to 1.\n        kind : {'ix', 'loc', 'getitem'} or None\n\n        Returns\n        -------\n        start, end : int\n\n        See Also\n        --------\n        Index.get_loc : Get location for a single label.\n\n        Notes\n        -----\n        This method only works if the index is monotonic or unique.\n\n        Examples\n        --------\n        >>> idx = pd.Index(list('abcd'))\n        >>> idx.slice_locs(start='b', end='c')\n        (1, 3)\n        \"\"\"\n        inc = step is None or step >= 0\n\n        if not inc:\n            # If it's a reverse slice, temporarily swap bounds.\n            start, end = end, start\n\n        # GH 16785: If start and end happen to be date strings with UTC offsets\n        # attempt to parse and check that the offsets are the same\n        if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n            try:\n                ts_start = Timestamp(start)\n                ts_end = Timestamp(end)\n            except (ValueError, TypeError):\n                pass\n            else:\n                if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                    raise ValueError(\"Both dates must have the same UTC offset\")\n\n        start_slice = None\n        if start is not None:\n            start_slice = self.get_slice_bound(start, \"left\", kind)\n        if start_slice is None:\n            start_slice = 0\n\n        end_slice = None\n        if end is not None:\n            end_slice = self.get_slice_bound(end, \"right\", kind)\n        if end_slice is None:\n            end_slice = len(self)\n\n        if not inc:\n            # Bounds at this moment are swapped, swap them back and shift by 1.\n            #\n            # slice_locs('B', 'A', step=-1): s='B', e='A'\n            #\n            #              s='A'                 e='B'\n            # AFTER SWAP:    |                     |\n            #                v ------------------> V\n            #           -----------------------------------\n            #           | | |A|A|A|A| | | | | |B|B| | | | |\n            #           -----------------------------------\n            #              ^ <------------------ ^\n            # SHOULD BE:   |                     |\n            #           end=s-1              start=e-1\n            #\n            end_slice, start_slice = start_slice - 1, end_slice - 1\n\n            # i == -1 triggers ``len(self) + i`` selection that points to the\n            # last element, not before-the-first one, subtracting len(self)\n            # compensates that.\n            if end_slice == -1:\n                end_slice -= len(self)\n            if start_slice == -1:\n                start_slice -= len(self)\n\n        return start_slice, end_slice",
        "begin_line": 5055,
        "end_line": 5142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.delete#5144",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.delete(self, loc)",
        "snippet": "    def delete(self, loc):\n        \"\"\"\n        Make new Index with passed location(-s) deleted.\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        return self._shallow_copy(np.delete(self._data, loc))",
        "begin_line": 5144,
        "end_line": 5152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.292474200855777e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#5154",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        _self = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._ndarray_values\n        idx = np.concatenate((_self[:loc], item, _self[loc:]))\n        return self._shallow_copy_with_infer(idx)",
        "begin_line": 5154,
        "end_line": 5172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.571597555365709e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.drop#5174",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.drop(self, labels, errors='raise')",
        "snippet": "    def drop(self, labels, errors=\"raise\"):\n        \"\"\"\n        Make new Index with passed list of labels deleted.\n\n        Parameters\n        ----------\n        labels : array-like\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        Returns\n        -------\n        dropped : Index\n\n        Raises\n        ------\n        KeyError\n            If not all of the labels are found in the selected axis\n        \"\"\"\n        arr_dtype = \"object\" if self.dtype == \"object\" else None\n        labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n        indexer = self.get_indexer(labels)\n        mask = indexer == -1\n        if mask.any():\n            if errors != \"ignore\":\n                raise KeyError(\"{} not found in axis\".format(labels[mask]))\n            indexer = indexer[~mask]\n        return self.delete(indexer)",
        "begin_line": 5174,
        "end_line": 5201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.shape#5419",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        # not using \"(len(self), )\" to return \"correct\" shape if the values\n        # consists of a >1 D array (see GH-27775)\n        # overridden in MultiIndex.shape to avoid materializing the values\n        return self._values.shape",
        "begin_line": 5419,
        "end_line": 5426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.173601147776183e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index_from_sequences#5434",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index_from_sequences(sequences, names=None)",
        "snippet": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex([('a', 'a'),\n                ('a', 'b')],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from .multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)",
        "begin_line": 5434,
        "end_line": 5472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.406858751203614e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5475",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from .multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5475,
        "end_line": 5539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009025270758122744,
            "pseudo_dstar_susp": 0.005405405405405406,
            "pseudo_tarantula_susp": 0.0007363770250368188,
            "pseudo_op2_susp": 0.005405405405405406,
            "pseudo_barinel_susp": 0.0007363770250368188
        }
    },
    {
        "name": "pandas.core.indexes.base._ensure_has_len#5542",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._ensure_has_len(seq)",
        "snippet": "def _ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5542,
        "end_line": 5551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.135722174499939e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base._validate_join_method#5564",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._validate_join_method(method)",
        "snippet": "def _validate_join_method(method):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")",
        "begin_line": 5564,
        "end_line": 5566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.906388361796332e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5569",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.index import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5569,
        "end_line": 5572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006706908115358819,
            "pseudo_dstar_susp": 0.0023923444976076554,
            "pseudo_tarantula_susp": 0.0005296610169491525,
            "pseudo_op2_susp": 0.0023923444976076554,
            "pseudo_barinel_susp": 0.0005296610169491525
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n    @classmethod\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005055611729019212,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.0004095004095004095,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.0004095004095004095
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#8",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005055611729019212,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.0004095004095004095,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.0004095004095004095
        }
    },
    {
        "name": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__#77",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic._ABCGeneric",
        "signature": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls, inst)",
        "snippet": "    def __instancecheck__(cls, inst) -> bool:\n        return hasattr(inst, \"_data\")",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.536374926465782e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#31",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(arr):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 31,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#72",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis: int=0)",
        "snippet": "def concat_compat(to_concat, axis: int = 0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n    _contains_period = any(typ.startswith(\"period\") for typ in typs)\n\n    if \"category\" in typs:\n        # this must be prior to concat_datetime,\n        # to support Categorical + datetime-like\n        return concat_categorical(to_concat, axis=axis)\n\n    elif _contains_datetime or \"timedelta\" in typs or _contains_period:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    # these are mandated to handle empties as well\n    elif \"sparse\" in typs:\n        return _concat_sparse(to_concat, axis=axis, typs=typs)\n\n    all_empty = all(not is_nonempty(x) for x in to_concat)\n    if any(is_extension_array_dtype(x) for x in to_concat) and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n\n    if all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 72,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#91",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x) -> bool:\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.328691828508612e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_categorical#140",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_categorical(to_concat, axis: int=0)",
        "snippet": "def concat_categorical(to_concat, axis: int = 0):\n    \"\"\"Concatenate an object/categorical array of arrays, each of which is a\n    single dtype\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : int\n        Axis to provide concatenation in the current implementation this is\n        always 0, e.g. we only have 1D categoricals\n\n    Returns\n    -------\n    Categorical\n        A single array, preserving the combined dtypes\n    \"\"\"\n\n    # we could have object blocks and categoricals here\n    # if we only have a single categoricals then combine everything\n    # else its a non-compat categorical\n    categoricals = [x for x in to_concat if is_categorical_dtype(x.dtype)]\n\n    # validate the categories\n    if len(categoricals) != len(to_concat):\n        pass\n    else:\n        # when all categories are identical\n        first = to_concat[0]\n        if all(first.is_dtype_equal(other) for other in to_concat[1:]):\n            return union_categoricals(categoricals)\n\n    # extract the categoricals & coerce to object if needed\n    to_concat = [\n        x._internal_get_values()\n        if is_categorical_dtype(x.dtype)\n        else np.asarray(x).ravel()\n        if not is_datetime64tz_dtype(x)\n        else np.asarray(x.astype(object))\n        for x in to_concat\n    ]\n    result = concat_compat(to_concat)\n    if axis == 1:\n        result = result.reshape(1, len(result))\n    return result",
        "begin_line": 140,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.union_categoricals#186",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.union_categoricals(to_union, sort_categories: bool=False, ignore_order: bool=False)",
        "snippet": "def union_categoricals(\n    to_union, sort_categories: bool = False, ignore_order: bool = False\n):\n    \"\"\"\n    Combine list-like of Categorical-like, unioning categories.\n\n    All categories must have the same dtype.\n\n    Parameters\n    ----------\n    to_union : list-like\n        Categorical, CategoricalIndex, or Series with dtype='category'.\n    sort_categories : bool, default False\n        If true, resulting categories will be lexsorted, otherwise\n        they will be ordered as they appear in the data.\n    ignore_order : bool, default False\n        If true, the ordered attribute of the Categoricals will be ignored.\n        Results in an unordered categorical.\n\n    Returns\n    -------\n    Categorical\n\n    Raises\n    ------\n    TypeError\n        - all inputs do not have the same dtype\n        - all inputs do not have the same ordered property\n        - all inputs are ordered and their categories are not identical\n        - sort_categories=True and Categoricals are ordered\n    ValueError\n        Empty list of categoricals passed\n\n    Notes\n    -----\n\n    To learn more about categories, see `link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__\n\n    Examples\n    --------\n\n    >>> from pandas.api.types import union_categoricals\n\n    If you want to combine categoricals that do not necessarily have\n    the same categories, `union_categoricals` will combine a list-like\n    of categoricals. The new categories will be the union of the\n    categories being combined.\n\n    >>> a = pd.Categorical([\"b\", \"c\"])\n    >>> b = pd.Categorical([\"a\", \"b\"])\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n\n    By default, the resulting categories will be ordered as they appear\n    in the `categories` of the data. If you want the categories to be\n    lexsorted, use `sort_categories=True` argument.\n\n    >>> union_categoricals([a, b], sort_categories=True)\n    [b, c, a, b]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with the case of combining two\n    categoricals of the same categories and order information (e.g. what\n    you could also `append` for).\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b])\n    [a, b, a, b, a]\n    Categories (2, object): [a < b]\n\n    Raises `TypeError` because the categories are ordered and not identical.\n\n    >>> a = pd.Categorical([\"a\", \"b\"], ordered=True)\n    >>> b = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> union_categoricals([a, b])\n    TypeError: to union ordered Categoricals, all categories must be the same\n\n    New in version 0.20.0\n\n    Ordered categoricals with different categories or orderings can be\n    combined by using the `ignore_ordered=True` argument.\n\n    >>> a = pd.Categorical([\"a\", \"b\", \"c\"], ordered=True)\n    >>> b = pd.Categorical([\"c\", \"b\", \"a\"], ordered=True)\n    >>> union_categoricals([a, b], ignore_order=True)\n    [a, b, c, c, b, a]\n    Categories (3, object): [a, b, c]\n\n    `union_categoricals` also works with a `CategoricalIndex`, or `Series`\n    containing categorical data, but note that the resulting array will\n    always be a plain `Categorical`\n\n    >>> a = pd.Series([\"b\", \"c\"], dtype='category')\n    >>> b = pd.Series([\"a\", \"b\"], dtype='category')\n    >>> union_categoricals([a, b])\n    [b, c, a, b]\n    Categories (3, object): [b, c, a]\n    \"\"\"\n    from pandas import Index, Categorical\n    from pandas.core.arrays.categorical import _recode_for_categories\n\n    if len(to_union) == 0:\n        raise ValueError(\"No Categoricals to union\")\n\n    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x.values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")\n\n    to_union = [_maybe_unwrap(x) for x in to_union]\n    first = to_union[0]\n\n    if not all(\n        is_dtype_equal(other.categories.dtype, first.categories.dtype)\n        for other in to_union[1:]\n    ):\n        raise TypeError(\"dtype of categories must be the same\")\n\n    ordered = False\n    if all(first.is_dtype_equal(other) for other in to_union[1:]):\n        # identical categories - fastpath\n        categories = first.categories\n        ordered = first.ordered\n\n        if all(first.categories.equals(other.categories) for other in to_union[1:]):\n            new_codes = np.concatenate([c.codes for c in to_union])\n        else:\n            codes = [first.codes] + [\n                _recode_for_categories(other.codes, other.categories, first.categories)\n                for other in to_union[1:]\n            ]\n            new_codes = np.concatenate(codes)\n\n        if sort_categories and not ignore_order and ordered:\n            raise TypeError(\"Cannot use sort_categories=True with ordered Categoricals\")\n\n        if sort_categories and not categories.is_monotonic_increasing:\n            categories = categories.sort_values()\n            indexer = categories.get_indexer(first.categories)\n\n            from pandas.core.algorithms import take_1d\n\n            new_codes = take_1d(indexer, new_codes, fill_value=-1)\n    elif ignore_order or all(not c.ordered for c in to_union):\n        # different categories - union and recode\n        cats = first.categories.append([c.categories for c in to_union[1:]])\n        categories = Index(cats.unique())\n        if sort_categories:\n            categories = categories.sort_values()\n\n        new_codes = [\n            _recode_for_categories(c.codes, c.categories, categories) for c in to_union\n        ]\n        new_codes = np.concatenate(new_codes)\n    else:\n        # ordered - to show a proper error message\n        if all(c.ordered for c in to_union):\n            msg = \"to union ordered Categoricals, all categories must be the same\"\n            raise TypeError(msg)\n        else:\n            raise TypeError(\"Categorical.ordered must be the same\")\n\n    if ignore_order:\n        ordered = False\n\n    return Categorical(new_codes, categories=categories, ordered=ordered, fastpath=True)",
        "begin_line": 186,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat._maybe_unwrap#293",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._maybe_unwrap(x)",
        "snippet": "    def _maybe_unwrap(x):\n        if isinstance(x, (ABCCategoricalIndex, ABCSeries)):\n            return x.values\n        elif isinstance(x, Categorical):\n            return x\n        else:\n            raise TypeError(\"all components to combine must be Categorical\")",
        "begin_line": 293,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat._concatenate_2d#360",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._concatenate_2d(to_concat, axis: int)",
        "snippet": "def _concatenate_2d(to_concat, axis: int):\n    # coerce to 2d if needed & concatenate\n    if axis == 1:\n        to_concat = [np.atleast_2d(x) for x in to_concat]\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.962143853357243e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_datetime#367",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_datetime(to_concat, axis=0, typs=None)",
        "snippet": "def concat_datetime(to_concat, axis=0, typs=None):\n    \"\"\"\n    provide concatenation of an datetimelike array of arrays each of which is a\n    single M8[ns], datetimet64[ns, tz] or m8[ns] dtype\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n    typs : set of to_concat dtypes\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n\n    if typs is None:\n        typs = get_dtype_kinds(to_concat)\n\n    # multiple types, need to coerce to object\n    if len(typs) != 1:\n        return _concatenate_2d(\n            [_convert_datetimelike_to_object(x) for x in to_concat], axis=axis\n        )\n\n    # must be single dtype\n    if any(typ.startswith(\"datetime\") for typ in typs):\n\n        if \"datetime\" in typs:\n            to_concat = [x.astype(np.int64, copy=False) for x in to_concat]\n            return _concatenate_2d(to_concat, axis=axis).view(_NS_DTYPE)\n        else:\n            # when to_concat has different tz, len(typs) > 1.\n            # thus no need to care\n            return _concat_datetimetz(to_concat)\n\n    elif \"timedelta\" in typs:\n        return _concatenate_2d([x.view(np.int64) for x in to_concat], axis=axis).view(\n            _TD_DTYPE\n        )\n\n    elif any(typ.startswith(\"period\") for typ in typs):\n        assert len(typs) == 1\n        cls = to_concat[0]\n        new_values = cls._concat_same_type(to_concat)\n        return new_values",
        "begin_line": 367,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.dtypes.concat._convert_datetimelike_to_object#415",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._convert_datetimelike_to_object(x)",
        "snippet": "def _convert_datetimelike_to_object(x):\n    # coerce datetimelike array to object dtype\n\n    # if dtype is of datetimetz or timezone\n    if x.dtype.kind == _NS_DTYPE.kind:\n        if getattr(x, \"tz\", None) is not None:\n            x = np.asarray(x.astype(object))\n        else:\n            shape = x.shape\n            x = tslib.ints_to_pydatetime(x.view(np.int64).ravel(), box=\"timestamp\")\n            x = x.reshape(shape)\n\n    elif x.dtype == _TD_DTYPE:\n        shape = x.shape\n        x = tslibs.ints_to_pytimedelta(x.view(np.int64).ravel(), box=True)\n        x = x.reshape(shape)\n\n    return x",
        "begin_line": 415,
        "end_line": 432,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._exceptions.rewrite_exception#6",
        "src_path": "pandas/util/_exceptions.py",
        "class_name": "pandas.util._exceptions",
        "signature": "pandas.util._exceptions.rewrite_exception(old_name: str, new_name: str)",
        "snippet": "def rewrite_exception(old_name: str, new_name: str):\n    \"\"\"Rewrite the message of an exception.\"\"\"\n    try:\n        yield\n    except Exception as err:\n        msg = err.args[0]\n        msg = msg.replace(old_name, new_name)\n        args: Tuple[str, ...] = (msg,)\n        if len(err.args) > 1:\n            args = args + err.args[1:]\n        err.args = args\n        raise",
        "begin_line": 6,
        "end_line": 17,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.363228039172373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.SetopCheck.func#138",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.SetopCheck",
        "signature": "pandas.core.indexes.interval.SetopCheck.func(intvidx_self, other, sort=False)",
        "snippet": "        def func(intvidx_self, other, sort=False):\n            intvidx_self._assert_can_do_setop(other)\n            other = ensure_index(other)\n\n            if not isinstance(other, IntervalIndex):\n                result = getattr(intvidx_self.astype(object), self.op_name)(other)\n                if self.op_name in (\"difference\",):\n                    result = result.astype(intvidx_self.dtype)\n                return result\n            elif intvidx_self.closed != other.closed:\n                msg = (\n                    \"can only do set operations between two IntervalIndex \"\n                    \"objects that are closed on the same side\"\n                )\n                raise ValueError(msg)\n\n            # GH 19016: ensure set op will not return a prohibited dtype\n            subtypes = [intvidx_self.dtype.subtype, other.dtype.subtype]\n            common_subtype = find_common_type(subtypes)\n            if is_object_dtype(common_subtype):\n                msg = (\n                    \"can only do {op} between two IntervalIndex \"\n                    \"objects that have compatible dtypes\"\n                )\n                raise TypeError(msg.format(op=self.op_name))\n\n            return setop(intvidx_self, other, sort)",
        "begin_line": 138,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__new__#214",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__new__(cls, data, closed=None, dtype=None, copy=False, name=None, verify_integrity=True)",
        "snippet": "    def __new__(\n        cls, data, closed=None, dtype=None, copy=False, name=None, verify_integrity=True\n    ):\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray(\n                data,\n                closed=closed,\n                copy=copy,\n                dtype=dtype,\n                verify_integrity=verify_integrity,\n            )\n\n        return cls._simple_new(array, name)",
        "begin_line": 214,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._simple_new#233",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._simple_new(cls, array, name, closed=None)",
        "snippet": "    def _simple_new(cls, array, name, closed=None):\n        \"\"\"\n        Construct from an IntervalArray\n\n        Parameters\n        ----------\n        array : IntervalArray\n        name : str\n            Attached as result.name\n        closed : Any\n            Ignored.\n        \"\"\"\n        result = IntervalMixin.__new__(cls)\n        result._data = array\n        result.name = name\n        result._reset_identity()\n        return result",
        "begin_line": 233,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_breaks#268",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_breaks(cls, breaks, closed='right', name=None, copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", name=None, copy=False, dtype=None):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_breaks(\n                breaks, closed=closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 268,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.954816641476414e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_arrays#292",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_arrays(cls, left, right, closed='right', name=None, copy=False, dtype=None)",
        "snippet": "    def from_arrays(\n        cls, left, right, closed=\"right\", name=None, copy=False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_arrays(\n                left, right, closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 292,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011511453896627144,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_tuples#318",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_tuples(cls, data, closed='right', name=None, copy=False, dtype=None)",
        "snippet": "    def from_tuples(cls, data, closed=\"right\", name=None, copy=False, dtype=None):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            arr = IntervalArray.from_tuples(data, closed=closed, copy=copy, dtype=dtype)\n        return cls._simple_new(arr, name=name)",
        "begin_line": 318,
        "end_line": 321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._shallow_copy#326",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._shallow_copy(self, left=None, right=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, left=None, right=None, **kwargs):\n        result = self._data._shallow_copy(left=left, right=right)\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        return self._simple_new(result, **attributes)",
        "begin_line": 326,
        "end_line": 330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.842514811212309e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._isnan#333",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"Return a mask indicating if each value is NA\"\"\"\n        if self._mask is None:\n            self._mask = isna(self.left)\n        return self._mask",
        "begin_line": 333,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.285443683520327e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._engine#340",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._engine(self)",
        "snippet": "    def _engine(self):\n        left = self._maybe_convert_i8(self.left)\n        right = self._maybe_convert_i8(self.right)\n        return IntervalTree(left, right, closed=self.closed)",
        "begin_line": 340,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__contains__#345",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool:\n        \"\"\"\n        return a boolean if this key is IN the index\n        We *only* accept an Interval\n\n        Parameters\n        ----------\n        key : Interval\n\n        Returns\n        -------\n        boolean\n        \"\"\"\n        if not isinstance(key, Interval):\n            return False\n\n        try:\n            self.get_loc(key)\n            return True\n        except KeyError:\n            return False",
        "begin_line": 345,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._multiindex#387",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._multiindex(self)",
        "snippet": "    def _multiindex(self):\n        return MultiIndex.from_arrays([self.left, self.right], names=[\"left\", \"right\"])",
        "begin_line": 387,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.left#391",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalIndex as\n        an Index.\n        \"\"\"\n        return self._data._left",
        "begin_line": 391,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.right#399",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalIndex as\n        an Index.\n        \"\"\"\n        return self._data._right",
        "begin_line": 399,
        "end_line": 404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.105300554213443e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.closed#407",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._data._closed",
        "begin_line": 407,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.217610970768675e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__len__#457",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 457,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.125552230297848e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.values#461",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return the IntervalIndex's data as an IntervalArray.\n        \"\"\"\n        return self._data",
        "begin_line": 461,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.452675510508272e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._values#468",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._values(self)",
        "snippet": "    def _values(self):\n        return self._data",
        "begin_line": 468,
        "end_line": 469,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.409721638213776e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._ndarray_values#472",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        return np.array(self._data)",
        "begin_line": 472,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.638835841417768e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__array__#475",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__array__(self, result=None)",
        "snippet": "    def __array__(self, result=None):\n        \"\"\" the array interface, return my values \"\"\"\n        return self._ndarray_values",
        "begin_line": 475,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.astype#500",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        with rewrite_exception(\"IntervalArray\", type(self).__name__):\n            new_values = self.values.astype(dtype, copy=copy)\n        if is_interval_dtype(new_values):\n            return self._shallow_copy(new_values.left, new_values.right)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 500,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.48676596148373e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.dtype#508",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"Return the dtype object of the underlying data\"\"\"\n        return self._data.dtype",
        "begin_line": 508,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.125552230297848e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.inferred_type#513",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"Return a string of the type inferred from the values\"\"\"\n        return \"interval\"",
        "begin_line": 513,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.667535654040791e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_unique#555",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return True if the IntervalIndex contains unique elements, else False\n        \"\"\"\n        left = self.left\n        right = self.right\n\n        if self.isna().sum() > 1:\n            return False\n\n        if left.is_unique or right.is_unique:\n            return True\n\n        seen_pairs = set()\n        check_idx = np.where(left.duplicated(keep=False))[0]\n        for idx in check_idx:\n            pair = (left[idx], right[idx])\n            if pair in seen_pairs:\n                return False\n            seen_pairs.add(pair)\n\n        return True",
        "begin_line": 555,
        "end_line": 576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.285443683520327e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_overlapping#584",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_overlapping(self)",
        "snippet": "    def is_overlapping(self):\n        \"\"\"\n        Return True if the IntervalIndex has overlapping intervals, else False.\n\n        Two intervals overlap if they share a common point, including closed\n        endpoints. Intervals that only have an open endpoint in common do not\n        overlap.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        bool\n            Boolean indicating if the IntervalIndex has overlapping intervals.\n\n        See Also\n        --------\n        Interval.overlaps : Check whether two Interval objects overlap.\n        IntervalIndex.overlaps : Check an IntervalIndex elementwise for\n            overlaps.\n\n        Examples\n        --------\n        >>> index = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])\n        >>> index\n        IntervalIndex([(0, 2], (1, 3], (4, 5]],\n              closed='right',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        True\n\n        Intervals that share closed endpoints overlap:\n\n        >>> index = pd.interval_range(0, 3, closed='both')\n        >>> index\n        IntervalIndex([[0, 1], [1, 2], [2, 3]],\n              closed='both',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        True\n\n        Intervals that only have an open endpoint in common do not overlap:\n\n        >>> index = pd.interval_range(0, 3, closed='left')\n        >>> index\n        IntervalIndex([[0, 1), [1, 2), [2, 3)],\n              closed='left',\n              dtype='interval[int64]')\n        >>> index.is_overlapping\n        False\n        \"\"\"\n        # GH 23309\n        return self._engine.is_overlapping",
        "begin_line": 584,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00012363996043521266,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._can_reindex#681",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._can_reindex(self, indexer: np.ndarray)",
        "snippet": "    def _can_reindex(self, indexer: np.ndarray) -> None:\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n\n        # trying to reindex on an axis with duplicates\n        if self.is_overlapping and len(indexer):\n            raise ValueError(\"cannot reindex from an overlapping axis\")",
        "begin_line": 681,
        "end_line": 696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._needs_i8_conversion#698",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._needs_i8_conversion(self, key)",
        "snippet": "    def _needs_i8_conversion(self, key):\n        \"\"\"\n        Check if a given key needs i8 conversion. Conversion is necessary for\n        Timestamp, Timedelta, DatetimeIndex, and TimedeltaIndex keys. An\n        Interval-like requires conversion if it's endpoints are one of the\n        aforementioned types.\n\n        Assumes that any list-like data has already been cast to an Index.\n\n        Parameters\n        ----------\n        key : scalar or Index-like\n            The key that should be checked for i8 conversion\n\n        Returns\n        -------\n        boolean\n        \"\"\"\n        if is_interval_dtype(key) or isinstance(key, Interval):\n            return self._needs_i8_conversion(key.left)\n\n        i8_types = (Timestamp, Timedelta, DatetimeIndex, TimedeltaIndex)\n        return isinstance(key, i8_types)",
        "begin_line": 698,
        "end_line": 720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._maybe_convert_i8#722",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._maybe_convert_i8(self, key)",
        "snippet": "    def _maybe_convert_i8(self, key):\n        \"\"\"\n        Maybe convert a given key to it's equivalent i8 value(s). Used as a\n        preprocessing step prior to IntervalTree queries (self._engine), which\n        expects numeric data.\n\n        Parameters\n        ----------\n        key : scalar or list-like\n            The key that should maybe be converted to i8.\n\n        Returns\n        -------\n        key: scalar or list-like\n            The original key if no conversion occurred, int if converted scalar,\n            Int64Index if converted list-like.\n        \"\"\"\n        original = key\n        if is_list_like(key):\n            key = ensure_index(key)\n\n        if not self._needs_i8_conversion(key):\n            return original\n\n        scalar = is_scalar(key)\n        if is_interval_dtype(key) or isinstance(key, Interval):\n            # convert left/right and reconstruct\n            left = self._maybe_convert_i8(key.left)\n            right = self._maybe_convert_i8(key.right)\n            constructor = Interval if scalar else IntervalIndex.from_arrays\n            return constructor(left, right, closed=self.closed)\n\n        if scalar:\n            # Timestamp/Timedelta\n            key_dtype, key_i8 = infer_dtype_from_scalar(key, pandas_dtype=True)\n        else:\n            # DatetimeIndex/TimedeltaIndex\n            key_dtype, key_i8 = key.dtype, Index(key.asi8)\n            if key.hasnans:\n                # convert NaT from it's i8 value to np.nan so it's not viewed\n                # as a valid value, maybe causing errors (e.g. is_overlapping)\n                key_i8 = key_i8.where(~key._isnan)\n\n        # ensure consistency with IntervalIndex subtype\n        subtype = self.dtype.subtype\n        msg = (\n            \"Cannot index an IntervalIndex of subtype {subtype} with \"\n            \"values of dtype {other}\"\n        )\n        if not is_dtype_equal(subtype, key_dtype):\n            raise ValueError(msg.format(subtype=subtype, other=key_dtype))\n\n        return key_i8",
        "begin_line": 722,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._check_method#776",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._check_method(self, method)",
        "snippet": "    def _check_method(self, method):\n        if method is None:\n            return\n\n        if method in [\"bfill\", \"backfill\", \"pad\", \"ffill\", \"nearest\"]:\n            msg = \"method {method} not yet implemented for IntervalIndex\"\n            raise NotImplementedError(msg.format(method=method))\n\n        raise ValueError(\"Invalid fill method\")",
        "begin_line": 776,
        "end_line": 784,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00011027790030877812,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.get_loc#842",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.get_loc(self, key: Any, method: Optional[str]=None, tolerance=None)",
        "snippet": "    def get_loc(\n        self, key: Any, method: Optional[str] = None, tolerance=None\n    ) -> Union[int, slice, np.ndarray]:\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None}, optional\n            * default: matches where the label is within an interval only.\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> i1, i2 = pd.Interval(0, 1), pd.Interval(1, 2)\n        >>> index = pd.IntervalIndex([i1, i2])\n        >>> index.get_loc(1)\n        0\n\n        You can also supply a point inside an interval.\n\n        >>> index.get_loc(1.5)\n        1\n\n        If a label is in several intervals, you get the locations of all the\n        relevant intervals.\n\n        >>> i3 = pd.Interval(0, 2)\n        >>> overlapping_index = pd.IntervalIndex([i1, i2, i3])\n        >>> overlapping_index.get_loc(0.5)\n        array([ True, False,  True])\n\n        Only exact matches will be returned if an interval is provided.\n\n        >>> index.get_loc(pd.Interval(0, 1))\n        0\n        \"\"\"\n        self._check_method(method)\n\n        # list-like are invalid labels for II but in some cases may work, e.g\n        # single element array of comparable type, so guard against them early\n        if is_list_like(key):\n            raise KeyError(key)\n\n        if isinstance(key, Interval):\n            if self.closed != key.closed:\n                raise KeyError(key)\n            mask = (self.left == key.left) & (self.right == key.right)\n        else:\n            # assume scalar\n            op_left = le if self.closed_left else lt\n            op_right = le if self.closed_right else lt\n            try:\n                mask = op_left(self.left, key) & op_right(key, self.right)\n            except TypeError:\n                # scalar is not comparable to II subtype --> invalid label\n                raise KeyError(key)\n\n        matches = mask.sum()\n        if matches == 0:\n            raise KeyError(key)\n        elif matches == 1:\n            return mask.argmax()\n        return lib.maybe_booleans_to_slice(mask.view(\"u1\"))",
        "begin_line": 842,
        "end_line": 909,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.get_indexer#928",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.get_indexer(self, target: AnyArrayLike, method: Optional[str]=None, limit: Optional[int]=None, tolerance: Optional[Any]=None)",
        "snippet": "    def get_indexer(\n        self,\n        target: AnyArrayLike,\n        method: Optional[str] = None,\n        limit: Optional[int] = None,\n        tolerance: Optional[Any] = None,\n    ) -> np.ndarray:\n\n        self._check_method(method)\n\n        if self.is_overlapping:\n            msg = (\n                \"cannot handle overlapping indices; use \"\n                \"IntervalIndex.get_indexer_non_unique\"\n            )\n            raise InvalidIndexError(msg)\n\n        target_as_index = ensure_index(target)\n\n        if isinstance(target_as_index, IntervalIndex):\n            # equal indexes -> 1:1 positional match\n            if self.equals(target_as_index):\n                return np.arange(len(self), dtype=\"intp\")\n\n            # different closed or incompatible subtype -> no matches\n            common_subtype = find_common_type(\n                [self.dtype.subtype, target_as_index.dtype.subtype]\n            )\n            if self.closed != target_as_index.closed or is_object_dtype(common_subtype):\n                return np.repeat(np.intp(-1), len(target_as_index))\n\n            # non-overlapping -> at most one match per interval in target_as_index\n            # want exact matches -> need both left/right to match, so defer to\n            # left/right get_indexer, compare elementwise, equality -> match\n            left_indexer = self.left.get_indexer(target_as_index.left)\n            right_indexer = self.right.get_indexer(target_as_index.right)\n            indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n        elif not is_object_dtype(target_as_index):\n            # homogeneous scalar index: use IntervalTree\n            target_as_index = self._maybe_convert_i8(target_as_index)\n            indexer = self._engine.get_indexer(target_as_index.values)\n        else:\n            # heterogeneous scalar index: defer elementwise to get_loc\n            # (non-overlapping so get_loc guarantees scalar of KeyError)\n            indexer = []\n            for key in target_as_index:\n                try:\n                    loc = self.get_loc(key)\n                except KeyError:\n                    loc = -1\n                indexer.append(loc)\n\n        return ensure_platform_int(indexer)",
        "begin_line": 928,
        "end_line": 980,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._concat_same_dtype#1113",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._concat_same_dtype(self, to_concat, name)",
        "snippet": "    def _concat_same_dtype(self, to_concat, name):\n        \"\"\"\n        assert that we all have the same .closed\n        we allow a 0-len index here as well\n        \"\"\"\n        if not len({i.closed for i in to_concat if len(i)}) == 1:\n            msg = (\n                \"can only append two IntervalIndex objects \"\n                \"that are closed on the same side\"\n            )\n            raise ValueError(msg)\n        return super()._concat_same_dtype(to_concat, name)",
        "begin_line": 1113,
        "end_line": 1124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.take#1127",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        result = self._data.take(\n            indices, axis=axis, allow_fill=allow_fill, fill_value=fill_value, **kwargs\n        )\n        attributes = self._get_attributes_dict()\n        return self._simple_new(result, **attributes)",
        "begin_line": 1127,
        "end_line": 1132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010606703436571913,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__getitem__#1134",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        result = self._data[value]\n        if isinstance(result, IntervalArray):\n            return self._shallow_copy(result)\n        else:\n            # scalar\n            return result",
        "begin_line": 1134,
        "end_line": 1140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.equals#1202",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two IntervalIndex objects contain the same elements\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        # if we can coerce to an II\n        # then we can compare\n        if not isinstance(other, IntervalIndex):\n            if not is_interval_dtype(other):\n                return False\n            other = Index(getattr(other, \".values\", other))\n\n        return (\n            self.left.equals(other.left)\n            and self.right.equals(other.right)\n            and self.closed == other.closed\n        )",
        "begin_line": 1202,
        "end_line": 1220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013833171946327292,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._setop#1329",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._setop(op_name: str, sort=None)",
        "snippet": "    def _setop(op_name: str, sort=None):\n        @SetopCheck(op_name=op_name)\n        def func(self, other, sort=sort):\n            result = getattr(self._multiindex, op_name)(other._multiindex, sort=sort)\n            result_name = get_op_result_name(self, other)\n\n            # GH 19101: ensure empty results have correct dtype\n            if result.empty:\n                result = result.values.astype(self.dtype.subtype)\n            else:\n                result = result.values\n\n            return type(self).from_tuples(result, closed=self.closed, name=result_name)\n\n        return func",
        "begin_line": 1329,
        "end_line": 1343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.func#1331",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.func(self, other, sort=sort)",
        "snippet": "        def func(self, other, sort=sort):\n            result = getattr(self._multiindex, op_name)(other._multiindex, sort=sort)\n            result_name = get_op_result_name(self, other)\n\n            # GH 19101: ensure empty results have correct dtype\n            if result.empty:\n                result = result.values.astype(self.dtype.subtype)\n            else:\n                result = result.values\n\n            return type(self).from_tuples(result, closed=self.closed, name=result_name)",
        "begin_line": 1331,
        "end_line": 1341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_all_dates#1346",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        This is False even when left/right contain datetime-like objects,\n        as the check is done on the Interval itself\n        \"\"\"\n        return False",
        "begin_line": 1346,
        "end_line": 1351,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001304631441617743,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#55",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.979828296223913e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#58",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f)",
        "snippet": "    def __call__(self, f):\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                msg = \"reduction operation {name!r} not allowed for this dtype\"\n                raise TypeError(msg.format(name=f.__name__.replace(\"nan\", \"\")))\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise\n\n        return _f",
        "begin_line": 58,
        "end_line": 77,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.979828296223913e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#60",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                msg = \"reduction operation {name!r} not allowed for this dtype\"\n                raise TypeError(msg.format(name=f.__name__.replace(\"nan\", \"\")))\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise",
        "begin_line": 60,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.__call__#85",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.__call__(self, alt)",
        "snippet": "    def __call__(self, alt):\n        bn_name = self.name or alt.__name__\n\n        try:\n            bn_func = getattr(bn, bn_name)\n        except (AttributeError, NameError):  # pragma: no cover\n            bn_func = None\n\n        @functools.wraps(alt)\n        def f(values, axis=None, skipna=True, **kwds):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result\n\n        return f",
        "begin_line": 85,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.479606546256254e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.f#94",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.f(values, axis=None, skipna=True, **kwds)",
        "snippet": "        def f(values, axis=None, skipna=True, **kwds):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result",
        "begin_line": 94,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#164",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype, fill_value=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(dtype, fill_value=None, fill_value_typ=None):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 164,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000502008032128514,
            "pseudo_dstar_susp": 0.0005005005005005005,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0005005005005005005,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#187",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 187,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005,
            "pseudo_dstar_susp": 0.0004985044865403788,
            "pseudo_tarantula_susp": 0.0007320644216691069,
            "pseudo_op2_susp": 0.0004985044865403788,
            "pseudo_barinel_susp": 0.0007320644216691069
        }
    },
    {
        "name": "pandas.core.nanops._get_values#232",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : dtype\n        dtype for values\n    dtype_max : dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n\n    # In _get_values is only called from within nanops, and in all cases\n    #  with scalar fill_value.  This guarantee is important for the\n    #  maybe_upcast_putmask call below\n    assert is_scalar(fill_value)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    if is_datetime64tz_dtype(values):\n        # lib.values_from_object returns M8[ns] dtype instead of tz-aware,\n        #  so this case must be handled separately from the rest\n        dtype = values.dtype\n        values = getattr(values, \"_values\", values)\n    else:\n        values = lib.values_from_object(values)\n        dtype = values.dtype\n\n    if is_datetime_or_timedelta_dtype(values) or is_datetime64tz_dtype(values):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = getattr(values, \"asi8\", values)\n        values = values.view(np.int64)\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    copy = (mask is not None) and (fill_value is not None)\n\n    if skipna and copy:\n        values = values.copy()\n        if dtype_ok:\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, changed = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.int64\n    elif is_float_dtype(dtype):\n        dtype_max = np.float64\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 232,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005,
            "pseudo_dstar_susp": 0.0004985044865403788,
            "pseudo_tarantula_susp": 0.0007320644216691069,
            "pseudo_op2_susp": 0.0004985044865403788,
            "pseudo_barinel_susp": 0.0007320644216691069
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#327",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype)",
        "snippet": "def _na_ok_dtype(dtype):\n    # TODO: what about datetime64tz?  PeriodDtype?\n    return not issubclass(dtype.type, (np.integer, np.timedelta64, np.datetime64))",
        "begin_line": 327,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004916420845624386,
            "pseudo_dstar_susp": 0.0004901960784313725,
            "pseudo_tarantula_susp": 0.0007122507122507123,
            "pseudo_op2_susp": 0.0004901960784313725,
            "pseudo_barinel_susp": 0.0007122507122507123
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#332",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n\n    if is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            result = result.view(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    return result",
        "begin_line": 332,
        "end_line": 360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.819421713038734e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.nanany#394",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanany(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanany(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if any elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2])\n    >>> nanops.nanany(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([np.nan])\n    >>> nanops.nanany(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=False, mask=mask)\n    return values.any(axis)",
        "begin_line": 394,
        "end_line": 423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006443298969072165,
            "pseudo_dstar_susp": 0.0005271481286241434,
            "pseudo_tarantula_susp": 0.0008006405124099279,
            "pseudo_op2_susp": 0.0005271481286241434,
            "pseudo_barinel_susp": 0.0008006405124099279
        }
    },
    {
        "name": "pandas.core.nanops.nanall#426",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanall(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanall(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if all elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanall(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 0])\n    >>> nanops.nanall(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=True, mask=mask)\n    return values.all(axis)",
        "begin_line": 426,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.34306691139663e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.nansum#459",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values, axis=None, skipna=True, min_count=0, mask=None)",
        "snippet": "def nansum(values, axis=None, skipna=True, min_count=0, mask=None):\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 459,
        "end_line": 494,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.nanmean#499",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanmean(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanmean(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Compute the mean of the element along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanmean(s)\n    1.5\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    dtype_count = np.float64\n    if (\n        is_integer_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n    ):\n        dtype_sum = np.float64\n    elif is_float_dtype(dtype):\n        dtype_sum = dtype\n        dtype_count = dtype\n    count = _get_counts(values.shape, mask, axis, dtype=dtype_count)\n    the_sum = _ensure_numeric(values.sum(axis, dtype=dtype_sum))\n\n    if axis is not None and getattr(the_sum, \"ndim\", False):\n        with np.errstate(all=\"ignore\"):\n            # suppress division by zero warnings\n            the_mean = the_sum / count\n        ct_mask = count == 0\n        if ct_mask.any():\n            the_mean[ct_mask] = np.nan\n    else:\n        the_mean = the_sum / count if count > 0 else np.nan\n\n    return _wrap_results(the_mean, dtype)",
        "begin_line": 499,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._get_counts_nanvar#625",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts_nanvar(value_counts: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], ddof: int, dtype=float)",
        "snippet": "def _get_counts_nanvar(\n    value_counts: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    ddof: int,\n    dtype=float,\n) -> Tuple[Union[int, np.ndarray], Union[int, np.ndarray]]:\n    \"\"\" Get the count of non-null values along an axis, accounting\n    for degrees of freedom.\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    ddof : int\n        degrees of freedom\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    d : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    count = _get_counts(value_counts, mask, axis, dtype=dtype)\n    d = count - dtype.type(ddof)\n\n    # always return NaN, never inf\n    if is_scalar(count):\n        if count <= ddof:\n            count = np.nan\n            d = np.nan\n    else:\n        mask2: np.ndarray = count <= ddof\n        if mask2.any():\n            np.putmask(d, mask2, np.nan)\n            np.putmask(count, mask2, np.nan)\n    return count, d",
        "begin_line": 625,
        "end_line": 667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.nanstd#672",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanstd(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanstd(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the standard deviation along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanstd(s)\n    1.0\n    \"\"\"\n    orig_dtype = values.dtype\n    values, mask, dtype, dtype_max, fill_value = _get_values(values, skipna, mask=mask)\n\n    result = np.sqrt(nanvar(values, axis=axis, skipna=skipna, ddof=ddof, mask=mask))\n    return _wrap_results(result, orig_dtype)",
        "begin_line": 672,
        "end_line": 704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.nanvar#709",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanvar(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanvar(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the variance along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanvar(s)\n    1.0\n    \"\"\"\n    values = lib.values_from_object(values)\n    dtype = values.dtype\n    mask = _maybe_get_mask(values, skipna, mask)\n    if is_any_int_dtype(values):\n        values = values.astype(\"f8\")\n        if mask is not None:\n            values[mask] = np.nan\n\n    if is_float_dtype(values):\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)\n    else:\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    # xref GH10242\n    # Compute variance via two-pass algorithm, which is stable against\n    # cancellation errors and relatively accurate for small numbers of\n    # observations.\n    #\n    # See https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    avg = _ensure_numeric(values.sum(axis=axis, dtype=np.float64)) / count\n    if axis is not None:\n        avg = np.expand_dims(avg, axis)\n    sqr = _ensure_numeric((avg - values) ** 2)\n    if mask is not None:\n        np.putmask(sqr, mask, 0)\n    result = sqr.sum(axis=axis, dtype=np.float64) / d\n\n    # Return variance as np.float64 (the datatype used in the accumulator),\n    # unless we were dealing with a float array, in which case use the same\n    # precision as the original values array.\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n    return _wrap_results(result, values.dtype)",
        "begin_line": 709,
        "end_line": 773,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._nanminmax#820",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._nanminmax(meth, fill_value_typ)",
        "snippet": "def _nanminmax(meth, fill_value_typ):\n    @bottleneck_switch(name=\"nan\" + meth)\n    def reduction(values, axis=None, skipna=True, mask=None):\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError, np.core._internal.AxisError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)\n\n    return reduction",
        "begin_line": 820,
        "end_line": 840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.155832265152902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops.reduction#822",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.reduction(values, axis=None, skipna=True, mask=None)",
        "snippet": "    def reduction(values, axis=None, skipna=True, mask=None):\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError, np.core._internal.AxisError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)",
        "begin_line": 822,
        "end_line": 838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.155832265152902e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._get_counts#1135",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts(values_shape: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], dtype=float)",
        "snippet": "def _get_counts(\n    values_shape: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    dtype=float,\n) -> Union[int, np.ndarray]:\n    \"\"\" Get the count of non-null values along an axis\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    if axis is None:\n        if mask is not None:\n            n = mask.size - mask.sum()\n        else:\n            n = np.prod(values_shape)\n        return dtype.type(n)\n\n    if mask is not None:\n        count = mask.shape[axis] - mask.sum(axis)\n    else:\n        count = values_shape[axis]\n\n    if is_scalar(count):\n        return dtype.type(count)\n    try:\n        return count.astype(dtype)\n    except AttributeError:\n        return np.array(count, dtype=dtype)",
        "begin_line": 1135,
        "end_line": 1176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1179",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple, min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple,\n    min_count: int = 1,\n) -> np.ndarray:\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if mask is not None:\n            null_mask = mask.size - mask.sum()\n        else:\n            null_mask = np.prod(shape)\n        if null_mask < min_count:\n            result = np.nan\n\n    return result",
        "begin_line": 1179,
        "end_line": 1206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.nanops._ensure_numeric#1282",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._ensure_numeric(x)",
        "snippet": "def _ensure_numeric(x):\n    if isinstance(x, np.ndarray):\n        if is_integer_dtype(x) or is_bool_dtype(x):\n            x = x.astype(np.float64)\n        elif is_object_dtype(x):\n            try:\n                x = x.astype(np.complex128)\n            except (TypeError, ValueError):\n                x = x.astype(np.float64)\n            else:\n                if not np.any(np.imag(x)):\n                    x = x.real\n    elif not (is_float(x) or is_integer(x) or is_complex(x)):\n        try:\n            x = float(x)\n        except ValueError:\n            # e.g. \"1+1j\" or \"foo\"\n            try:\n                x = complex(x)\n            except ValueError:\n                # e.g. \"foo\"\n                raise TypeError(\n                    \"Could not convert {value!s} to numeric\".format(value=x)\n                )\n    return x",
        "begin_line": 1282,
        "end_line": 1306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.common.BaseIterator.__iter__#86",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common.BaseIterator",
        "signature": "pandas.io.common.BaseIterator.__iter__(self)",
        "snippet": "    def __iter__(self) -> \"BaseIterator\":\n        return self",
        "begin_line": 86,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.io.common._is_url#93",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._is_url(url)",
        "snippet": "def _is_url(url) -> bool:\n    \"\"\"\n    Check to see if a URL has a valid protocol.\n\n    Parameters\n    ----------\n    url : str or unicode\n\n    Returns\n    -------\n    isurl : bool\n        If `url` has a valid protocol return True otherwise False.\n    \"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in _VALID_URLS",
        "begin_line": 93,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.io.common._expand_user#111",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._expand_user(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _expand_user(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"Return the argument with an initial component of ~ or ~user\n       replaced by that user's home directory.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted if possible\n\n    Returns\n    -------\n    expanded_filepath_or_buffer : an expanded filepath or the\n                                  input if not expandable\n    \"\"\"\n    if isinstance(filepath_or_buffer, str):\n        return os.path.expanduser(filepath_or_buffer)\n    return filepath_or_buffer",
        "begin_line": 111,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.io.common._validate_header_arg#131",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._validate_header_arg(header)",
        "snippet": "def _validate_header_arg(header) -> None:\n    if isinstance(header, bool):\n        raise TypeError(\n            \"Passing a bool to header is invalid. \"\n            \"Use header=None for no header or \"\n            \"header=int or list-like of ints to specify \"\n            \"the row(s) making up the column names\"\n        )",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.common._stringify_path#141",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._stringify_path(filepath_or_buffer: FilePathOrBuffer[AnyStr])",
        "snippet": "def _stringify_path(\n    filepath_or_buffer: FilePathOrBuffer[AnyStr],\n) -> FilePathOrBuffer[AnyStr]:\n    \"\"\"Attempt to convert a path-like object to a string.\n\n    Parameters\n    ----------\n    filepath_or_buffer : object to be converted\n\n    Returns\n    -------\n    str_filepath_or_buffer : maybe a string version of the object\n\n    Notes\n    -----\n    Objects supporting the fspath protocol (python 3.6+) are coerced\n    according to its __fspath__ method.\n\n    For backwards compatibility with older pythons, pathlib.Path and\n    py.path objects are specially coerced.\n\n    Any other object is passed through unchanged, which includes bytes,\n    strings, buffers, or anything else that's not even path-like.\n    \"\"\"\n    if hasattr(filepath_or_buffer, \"__fspath__\"):\n        # https://github.com/python/mypy/issues/1424\n        return filepath_or_buffer.__fspath__()  # type: ignore\n    elif isinstance(filepath_or_buffer, pathlib.Path):\n        return str(filepath_or_buffer)\n    return _expand_user(filepath_or_buffer)",
        "begin_line": 141,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002150537634408602,
            "pseudo_dstar_susp": 0.0008453085376162299,
            "pseudo_tarantula_susp": 0.0026666666666666666,
            "pseudo_op2_susp": 0.0008453085376162299,
            "pseudo_barinel_susp": 0.0026666666666666666
        }
    },
    {
        "name": "pandas.io.common.is_s3_url#173",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_s3_url(url)",
        "snippet": "def is_s3_url(url) -> bool:\n    \"\"\"Check for an s3, s3n, or s3a url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"s3\", \"s3n\", \"s3a\"]",
        "begin_line": 173,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.io.common.is_gcs_url#180",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.is_gcs_url(url)",
        "snippet": "def is_gcs_url(url) -> bool:\n    \"\"\"Check for a gcs url\"\"\"\n    if not isinstance(url, str):\n        return False\n    return parse_url(url).scheme in [\"gcs\", \"gs\"]",
        "begin_line": 180,
        "end_line": 184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.io.common.get_filepath_or_buffer#197",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common.get_filepath_or_buffer(filepath_or_buffer: FilePathOrBuffer, encoding: Optional[str]=None, compression: Optional[str]=None, mode: Optional[str]=None)",
        "snippet": "def get_filepath_or_buffer(\n    filepath_or_buffer: FilePathOrBuffer,\n    encoding: Optional[str] = None,\n    compression: Optional[str] = None,\n    mode: Optional[str] = None,\n):\n    \"\"\"\n    If the filepath_or_buffer is a url, translate and return the buffer.\n    Otherwise passthrough.\n\n    Parameters\n    ----------\n    filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),\n                         or buffer\n    compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional\n    encoding : the encoding to use to decode bytes, default is 'utf-8'\n    mode : str, optional\n\n    Returns\n    -------\n    tuple of ({a filepath_ or buffer or S3File instance},\n              encoding, str,\n              compression, str,\n              should_close, bool)\n    \"\"\"\n    filepath_or_buffer = _stringify_path(filepath_or_buffer)\n\n    if isinstance(filepath_or_buffer, str) and _is_url(filepath_or_buffer):\n        req = urlopen(filepath_or_buffer)\n        content_encoding = req.headers.get(\"Content-Encoding\", None)\n        if content_encoding == \"gzip\":\n            # Override compression based on Content-Encoding header\n            compression = \"gzip\"\n        reader = BytesIO(req.read())\n        req.close()\n        return reader, encoding, compression, True\n\n    if is_s3_url(filepath_or_buffer):\n        from pandas.io import s3\n\n        return s3.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if is_gcs_url(filepath_or_buffer):\n        from pandas.io import gcs\n\n        return gcs.get_filepath_or_buffer(\n            filepath_or_buffer, encoding=encoding, compression=compression, mode=mode\n        )\n\n    if isinstance(filepath_or_buffer, (str, bytes, mmap.mmap)):\n        return _expand_user(filepath_or_buffer), None, compression, False\n\n    if not is_file_like(filepath_or_buffer):\n        msg = \"Invalid file path or buffer object type: {_type}\"\n        raise ValueError(msg.format(_type=type(filepath_or_buffer)))\n\n    return filepath_or_buffer, None, compression, False",
        "begin_line": 197,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.io.common._infer_compression#312",
        "src_path": "pandas/io/common.py",
        "class_name": "pandas.io.common",
        "signature": "pandas.io.common._infer_compression(filepath_or_buffer: FilePathOrBuffer, compression: Optional[str])",
        "snippet": "def _infer_compression(\n    filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]\n) -> Optional[str]:\n    \"\"\"\n    Get the compression method for filepath_or_buffer. If compression='infer',\n    the inferred compression method is returned. Otherwise, the input\n    compression method is returned unchanged, unless it's invalid, in which\n    case an error is raised.\n\n    Parameters\n    ----------\n    filepath_or_buffer : str or file handle\n        File path or object.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n        If 'infer' and `filepath_or_buffer` is path-like, then detect\n        compression from the following extensions: '.gz', '.bz2', '.zip',\n        or '.xz' (otherwise no compression).\n\n    Returns\n    -------\n    string or None\n\n    Raises\n    ------\n    ValueError on invalid compression specified.\n    \"\"\"\n\n    # No compression has been explicitly specified\n    if compression is None:\n        return None\n\n    # Infer compression\n    if compression == \"infer\":\n        # Convert all path types (e.g. pathlib.Path) to strings\n        filepath_or_buffer = _stringify_path(filepath_or_buffer)\n        if not isinstance(filepath_or_buffer, str):\n            # Cannot infer compression of a buffer, assume no compression\n            return None\n\n        # Infer compression from the filename/URL extension\n        for compression, extension in _compression_to_extension.items():\n            if filepath_or_buffer.endswith(extension):\n                return compression\n        return None\n\n    # Compression has been specified. Check that it's valid\n    if compression in _compression_to_extension:\n        return compression\n\n    msg = \"Unrecognized compression type: {}\".format(compression)\n    valid = [\"infer\", None] + sorted(_compression_to_extension)\n    msg += \"\\nValid compression types are {}\".format(valid)\n    raise ValueError(msg)",
        "begin_line": 312,
        "end_line": 364,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0037593984962406013,
            "pseudo_dstar_susp": 0.0010111223458038423,
            "pseudo_tarantula_susp": 0.00558659217877095,
            "pseudo_op2_susp": 0.0010111223458038423,
            "pseudo_barinel_susp": 0.00558659217877095
        }
    },
    {
        "name": "pandas.util.testing.assert_almost_equal#283",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_almost_equal(left, right, check_dtype='equiv', check_less_precise=False, **kwargs)",
        "snippet": "def assert_almost_equal(\n    left, right, check_dtype=\"equiv\", check_less_precise=False, **kwargs\n):\n    \"\"\"\n    Check that the left and right objects are approximately equal.\n\n    By approximately equal, we refer to objects that are numbers or that\n    contain numbers which may be equivalent to specific levels of precision.\n\n    Parameters\n    ----------\n    left : object\n    right : object\n    check_dtype : bool or {'equiv'}, default 'equiv'\n        Check dtype if both a and b are the same type. If 'equiv' is passed in,\n        then `RangeIndex` and `Int64Index` are also considered equivalent\n        when doing type checking.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. 5 digits (False) or 3 digits (True)\n        after decimal points are compared. If int, then specify the number\n        of digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    \"\"\"\n\n    if isinstance(left, pd.Index):\n        assert_index_equal(\n            left,\n            right,\n            check_exact=False,\n            exact=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.Series):\n        assert_series_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    else:\n        # Other sequences.\n        if check_dtype:\n            if is_number(left) and is_number(right):\n                # Do not compare numeric classes, like np.float64 and float.\n                pass\n            elif is_bool(left) and is_bool(right):\n                # Do not compare bool classes, like np.bool_ and bool.\n                pass\n            else:\n                if isinstance(left, np.ndarray) or isinstance(right, np.ndarray):\n                    obj = \"numpy array\"\n                else:\n                    obj = \"Input\"\n                assert_class_equal(left, right, obj=obj)\n        _testing.assert_almost_equal(\n            left,\n            right,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )",
        "begin_line": 283,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing._check_isinstance#366",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_isinstance(left, right, cls)",
        "snippet": "def _check_isinstance(left, right, cls):\n    \"\"\"\n    Helper method for our assert_* methods that ensures that\n    the two objects being compared have the right type before\n    proceeding with the comparison.\n\n    Parameters\n    ----------\n    left : The first object being compared.\n    right : The second object being compared.\n    cls : The class type to check against.\n\n    Raises\n    ------\n    AssertionError : Either `left` or `right` is not an instance of `cls`.\n    \"\"\"\n\n    err_msg = \"{name} Expected type {exp_type}, found {act_type} instead\"\n    cls_name = cls.__name__\n\n    if not isinstance(left, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))\n        )\n    if not isinstance(right, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(right))\n        )",
        "begin_line": 366,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0103377809832915e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.rands_array#413",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.rands_array(nchars, size, dtype='O')",
        "snippet": "def rands_array(nchars, size, dtype=\"O\"):\n    \"\"\"Generate an array of byte strings.\"\"\"\n    retval = (\n        np.random.choice(RANDS_CHARS, size=nchars * np.prod(size))\n        .view((np.str_, nchars))\n        .reshape(size)\n    )\n    if dtype is None:\n        return retval\n    else:\n        return retval.astype(dtype)",
        "begin_line": 413,
        "end_line": 423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014184397163120567,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_index_equal#570",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_index_equal(left: Index, right: Index, exact: Union[bool, str]='equiv', check_names: bool=True, check_less_precise: Union[bool, int]=False, check_exact: bool=True, check_categorical: bool=True, obj: str='Index')",
        "snippet": "def assert_index_equal(\n    left: Index,\n    right: Index,\n    exact: Union[bool, str] = \"equiv\",\n    check_names: bool = True,\n    check_less_precise: Union[bool, int] = False,\n    check_exact: bool = True,\n    check_categorical: bool = True,\n    obj: str = \"Index\",\n) -> None:\n    \"\"\"\n    Check that left and right Index are equal.\n\n    Parameters\n    ----------\n    left : Index\n    right : Index\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    check_names : bool, default True\n        Whether to check the names attribute.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)\n\n    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        level_codes = index.codes[level]\n        filled = take_1d(unique.values, level_codes, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values\n\n    # instance validation\n    _check_isinstance(left, right, Index)\n\n    # class / dtype comparison\n    _check_types(left, right, obj=obj)\n\n    # level comparison\n    if left.nlevels != right.nlevels:\n        msg1 = \"{obj} levels are different\".format(obj=obj)\n        msg2 = \"{nlevels}, {left}\".format(nlevels=left.nlevels, left=left)\n        msg3 = \"{nlevels}, {right}\".format(nlevels=right.nlevels, right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{obj} length are different\".format(obj=obj)\n        msg2 = \"{length}, {left}\".format(length=len(left), left=left)\n        msg3 = \"{length}, {right}\".format(length=len(right), right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # MultiIndex special comparison for little-friendly error messages\n    if left.nlevels > 1:\n        left = cast(MultiIndex, left)\n        right = cast(MultiIndex, right)\n\n        for level in range(left.nlevels):\n            # cannot use get_level_values here because it can change dtype\n            llevel = _get_ilevel_values(left, level)\n            rlevel = _get_ilevel_values(right, level)\n\n            lobj = \"MultiIndex level [{level}]\".format(level=level)\n            assert_index_equal(\n                llevel,\n                rlevel,\n                exact=exact,\n                check_names=check_names,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                obj=lobj,\n            )\n            # get_level_values may change dtype\n            _check_types(left.levels[level], right.levels[level], obj=obj)\n\n    # skip exact index checking when `check_categorical` is False\n    if check_exact and check_categorical:\n        if not left.equals(right):\n            diff = np.sum((left.values != right.values).astype(int)) * 100.0 / len(left)\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n    else:\n        _testing.assert_almost_equal(\n            left.values,\n            right.values,\n            check_less_precise=check_less_precise,\n            check_dtype=exact,\n            obj=obj,\n            lobj=left,\n            robj=right,\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"names\", left, right, obj=obj)\n    if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):\n        assert_attr_equal(\"freq\", left, right, obj=obj)\n    if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):\n        assert_interval_array_equal(left.values, right.values)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 570,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00013383297644539615,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing._check_types#607",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_types(l, r, obj='Index')",
        "snippet": "    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)",
        "begin_line": 607,
        "end_line": 619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.0990485484264454e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing._get_ilevel_values#621",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_ilevel_values(index, level)",
        "snippet": "    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        level_codes = index.codes[level]\n        filled = take_1d(unique.values, level_codes, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values",
        "begin_line": 621,
        "end_line": 627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.217610970768675e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_class_equal#706",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_class_equal(left, right, exact=True, obj='Input')",
        "snippet": "def assert_class_equal(left, right, exact=True, obj=\"Input\"):\n    \"\"\"checks classes are equal.\"\"\"\n    __tracebackhide__ = True\n\n    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return type(x).__name__\n        except AttributeError:\n            return repr(type(x))\n\n    if exact == \"equiv\":\n        if type(left) != type(right):\n            # allow equivalence of Int64Index/RangeIndex\n            types = {type(left).__name__, type(right).__name__}\n            if len(types - {\"Int64Index\", \"RangeIndex\"}):\n                msg = \"{obj} classes are not equivalent\".format(obj=obj)\n                raise_assert_detail(obj, msg, repr_class(left), repr_class(right))\n    elif exact:\n        if type(left) != type(right):\n            msg = \"{obj} classes are different\".format(obj=obj)\n            raise_assert_detail(obj, msg, repr_class(left), repr_class(right))",
        "begin_line": 706,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.690305746972637e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.repr_class#710",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.repr_class(x)",
        "snippet": "    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return type(x).__name__\n        except AttributeError:\n            return repr(type(x))",
        "begin_line": 710,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.008893161879582e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_attr_equal#733",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_attr_equal(attr, left, right, obj='Attributes')",
        "snippet": "def assert_attr_equal(attr, left, right, obj=\"Attributes\"):\n    \"\"\"checks attributes are equal. Both objects must have attribute.\n\n    Parameters\n    ----------\n    attr : str\n        Attribute name being compared.\n    left : object\n    right : object\n    obj : str, default 'Attributes'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    left_attr = getattr(left, attr)\n    right_attr = getattr(right, attr)\n\n    if left_attr is right_attr:\n        return True\n    elif (\n        is_number(left_attr)\n        and np.isnan(left_attr)\n        and is_number(right_attr)\n        and np.isnan(right_attr)\n    ):\n        # np.nan\n        return True\n\n    try:\n        result = left_attr == right_attr\n    except TypeError:\n        # datetimetz on rhs may raise TypeError\n        result = False\n    if not isinstance(result, bool):\n        result = result.all()\n\n    if result:\n        return True\n    else:\n        msg = 'Attribute \"{attr}\" are different'.format(attr=attr)\n        raise_assert_detail(obj, msg, left_attr, right_attr)",
        "begin_line": 733,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_categorical_equal#808",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_categorical_equal(left, right, check_dtype=True, check_category_order=True, obj='Categorical')",
        "snippet": "def assert_categorical_equal(\n    left, right, check_dtype=True, check_category_order=True, obj=\"Categorical\"\n):\n    \"\"\"Test that Categoricals are equivalent.\n\n    Parameters\n    ----------\n    left : Categorical\n    right : Categorical\n    check_dtype : bool, default True\n        Check that integer dtype of the codes are the same\n    check_category_order : bool, default True\n        Whether the order of the categories should be compared, which\n        implies identical integer codes.  If False, only the resulting\n        values are compared.  The ordered attribute is\n        checked regardless.\n    obj : str, default 'Categorical'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, Categorical)\n\n    if check_category_order:\n        assert_index_equal(\n            left.categories, right.categories, obj=\"{obj}.categories\".format(obj=obj)\n        )\n        assert_numpy_array_equal(\n            left.codes,\n            right.codes,\n            check_dtype=check_dtype,\n            obj=\"{obj}.codes\".format(obj=obj),\n        )\n    else:\n        assert_index_equal(\n            left.categories.sort_values(),\n            right.categories.sort_values(),\n            obj=\"{obj}.categories\".format(obj=obj),\n        )\n        assert_index_equal(\n            left.categories.take(left.codes),\n            right.categories.take(right.codes),\n            obj=\"{obj}.values\".format(obj=obj),\n        )\n\n    assert_attr_equal(\"ordered\", left, right, obj=obj)",
        "begin_line": 808,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.909417536101706e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_interval_array_equal#855",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_interval_array_equal(left, right, exact='equiv', obj='IntervalArray')",
        "snippet": "def assert_interval_array_equal(left, right, exact=\"equiv\", obj=\"IntervalArray\"):\n    \"\"\"Test that two IntervalArrays are equivalent.\n\n    Parameters\n    ----------\n    left, right : IntervalArray\n        The IntervalArrays to compare.\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    obj : str, default 'IntervalArray'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, IntervalArray)\n\n    assert_index_equal(\n        left.left, right.left, exact=exact, obj=\"{obj}.left\".format(obj=obj)\n    )\n    assert_index_equal(\n        left.right, right.right, exact=exact, obj=\"{obj}.left\".format(obj=obj)\n    )\n    assert_attr_equal(\"closed\", left, right, obj=obj)",
        "begin_line": 855,
        "end_line": 878,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.807620237351655e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_numpy_array_equal#933",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_numpy_array_equal(left, right, strict_nan=False, check_dtype=True, err_msg=None, check_same=None, obj='numpy array')",
        "snippet": "def assert_numpy_array_equal(\n    left,\n    right,\n    strict_nan=False,\n    check_dtype=True,\n    err_msg=None,\n    check_same=None,\n    obj=\"numpy array\",\n):\n    \"\"\" Checks that 'np.ndarray' is equivalent\n\n    Parameters\n    ----------\n    left : np.ndarray or iterable\n    right : np.ndarray or iterable\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    check_dtype: bool, default True\n        check dtype if both a and b are np.ndarray\n    err_msg : str, default None\n        If provided, used as assertion message\n    check_same : None|'copy'|'same', default None\n        Ensure left and right refer/do not refer to the same memory area\n    obj : str, default 'numpy array'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    # Show a detailed error message when classes are different\n    assert_class_equal(left, right, obj=obj)\n    # both classes must be an np.ndarray\n    _check_isinstance(left, right, np.ndarray)\n\n    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj\n\n    left_base = _get_base(left)\n    right_base = _get_base(right)\n\n    if check_same == \"same\":\n        if left_base is not right_base:\n            msg = \"{left!r} is not {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n    elif check_same == \"copy\":\n        if left_base is right_base:\n            msg = \"{left!r} is {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)\n\n    # compare shape and values\n    if not array_equivalent(left, right, strict_nan=strict_nan):\n        _raise(left, right, err_msg)\n\n    if check_dtype:\n        if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n            assert_attr_equal(\"dtype\", left, right, obj=obj)",
        "begin_line": 933,
        "end_line": 1013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.552650547146321e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing._get_base#968",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_base(obj)",
        "snippet": "    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj",
        "begin_line": 968,
        "end_line": 969,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.548788474132285e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing._raise#983",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._raise(left, right, err_msg)",
        "snippet": "    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)",
        "begin_line": 983,
        "end_line": 1005,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 6.548788474132285e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_extension_array_equal#1016",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_extension_array_equal(left, right, check_dtype=True, check_less_precise=False, check_exact=False)",
        "snippet": "def assert_extension_array_equal(\n    left, right, check_dtype=True, check_less_precise=False, check_exact=False\n):\n    \"\"\"Check that left and right ExtensionArrays are equal.\n\n    Parameters\n    ----------\n    left, right : ExtensionArray\n        The two arrays to compare\n    check_dtype : bool, default True\n        Whether to check if the ExtensionArray dtypes are identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n\n    Notes\n    -----\n    Missing values are checked separately from valid values.\n    A mask of missing values is computed for each and checked to match.\n    The remaining all-valid values are cast to object dtype and checked.\n    \"\"\"\n    assert isinstance(left, ExtensionArray), \"left is not an ExtensionArray\"\n    assert isinstance(right, ExtensionArray), \"right is not an ExtensionArray\"\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"ExtensionArray\")\n\n    if hasattr(left, \"asi8\") and type(right) == type(left):\n        # Avoid slow object-dtype comparisons\n        assert_numpy_array_equal(left.asi8, right.asi8)\n        return\n\n    left_na = np.asarray(left.isna())\n    right_na = np.asarray(right.isna())\n    assert_numpy_array_equal(left_na, right_na, obj=\"ExtensionArray NA mask\")\n\n    left_valid = np.asarray(left[~left_na].astype(object))\n    right_valid = np.asarray(right[~right_na].astype(object))\n    if check_exact:\n        assert_numpy_array_equal(left_valid, right_valid, obj=\"ExtensionArray\")\n    else:\n        _testing.assert_almost_equal(\n            left_valid,\n            right_valid,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            obj=\"ExtensionArray\",\n        )",
        "begin_line": 1016,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.444519506840061e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_series_equal#1069",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series')",
        "snippet": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n        Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        # ToDo: There are some tests using rhs is sparse\n        # lhs is dense. Should use assert_class_equal in future\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{len}, {left}\".format(len=len(left), left=left.index)\n        msg2 = \"{len}, {right}\".format(len=len(right), right=right.index)\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"{obj}.index\".format(obj=obj),\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left)\n            and is_categorical_dtype(right)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\n                \"dtype\", left, right, obj=\"Attributes of {obj}\".format(obj=obj)\n            )\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n    elif check_datetimelike_compat:\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n        if needs_i8_conversion(left) or needs_i8_conversion(right):\n\n            # datetimelike may have different objects (e.g. datetime.datetime\n            # vs Timestamp) but will compare equal\n            if not Index(left.values).equals(Index(right.values)):\n                msg = (\n                    \"[datetimelike_compat=True] {left} is not equal to {right}.\"\n                ).format(left=left.values, right=right.values)\n                raise AssertionError(msg)\n        else:\n            assert_numpy_array_equal(\n                left._internal_get_values(),\n                right._internal_get_values(),\n                check_dtype=check_dtype,\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_extension_array_dtype(left.dtype) and is_datetime64tz_dtype(left.dtype):\n        # .values is an ndarray, but ._values is the ExtensionArray.\n        # TODO: Use .array\n        assert is_extension_array_dtype(right.dtype)\n        assert_extension_array_equal(left._values, right._values)\n    elif (\n        is_extension_array_dtype(left)\n        and not is_categorical_dtype(left)\n        and is_extension_array_dtype(right)\n        and not is_categorical_dtype(right)\n    ):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        _testing.assert_almost_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 1069,
        "end_line": 1219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_frame_equal#1223",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_frame_equal(left, right, check_dtype=True, check_index_type='equiv', check_column_type='equiv', check_frame_type=True, check_less_precise=False, check_names=True, by_blocks=False, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_like=False, obj='DataFrame')",
        "snippet": "def assert_frame_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_column_type=\"equiv\",\n    check_frame_type=True,\n    check_less_precise=False,\n    check_names=True,\n    by_blocks=False,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_like=False,\n    obj=\"DataFrame\",\n):\n    \"\"\"\n    Check that left and right DataFrame are equal.\n\n    This function is intended to compare two DataFrames and output any\n    differences. Is is mostly intended for use in unit tests.\n    Additional parameters allow varying the strictness of the\n    equality checks performed.\n\n    Parameters\n    ----------\n    left : DataFrame\n        First DataFrame to compare.\n    right : DataFrame\n        Second DataFrame to compare.\n    check_dtype : bool, default True\n        Whether to check the DataFrame dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_column_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the columns class, dtype and inferred_type\n        are identical. Is passed as the ``exact`` argument of\n        :func:`assert_index_equal`.\n    check_frame_type : bool, default True\n        Whether to check the DataFrame class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check that the `names` attribute for both the `index`\n        and `column` attributes of the DataFrame is identical.\n    by_blocks : bool, default False\n        Specify how to compare internal data. If False, compare by columns.\n        If True, compare by blocks.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_like : bool, default False\n        If True, ignore the order of index & columns.\n        Note: index labels must match their respective rows\n        (same as in columns) - same labels must be with the same data.\n    obj : str, default 'DataFrame'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n\n    See Also\n    --------\n    assert_series_equal : Equivalent method for asserting Series equality.\n    DataFrame.equals : Check DataFrame equality.\n\n    Examples\n    --------\n    This example shows comparing two DataFrames that are equal\n    but with columns of differing dtypes.\n\n    >>> from pandas.util.testing import assert_frame_equal\n    >>> df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n    >>> df2 = pd.DataFrame({'a': [1, 2], 'b': [3.0, 4.0]})\n\n    df1 equals itself.\n\n    >>> assert_frame_equal(df1, df1)\n\n    df1 differs from df2 as column 'b' is of a different type.\n\n    >>> assert_frame_equal(df1, df2)\n    Traceback (most recent call last):\n    ...\n    AssertionError: Attributes of DataFrame.iloc[:, 1] are different\n\n    Attribute \"dtype\" are different\n    [left]:  int64\n    [right]: float64\n\n    Ignore differing dtypes in columns with check_dtype.\n\n    >>> assert_frame_equal(df1, df2, check_dtype=False)\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, DataFrame)\n\n    if check_frame_type:\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # shape comparison\n    if left.shape != right.shape:\n        raise_assert_detail(\n            obj,\n            \"{obj} shape mismatch\".format(obj=obj),\n            \"{shape!r}\".format(shape=left.shape),\n            \"{shape!r}\".format(shape=right.shape),\n        )\n\n    if check_like:\n        left, right = left.reindex_like(right), right\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"{obj}.index\".format(obj=obj),\n    )\n\n    # column comparison\n    assert_index_equal(\n        left.columns,\n        right.columns,\n        exact=check_column_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"{obj}.columns\".format(obj=obj),\n    )\n\n    # compare by blocks\n    if by_blocks:\n        rblocks = right._to_dict_of_blocks()\n        lblocks = left._to_dict_of_blocks()\n        for dtype in list(set(list(lblocks.keys()) + list(rblocks.keys()))):\n            assert dtype in lblocks\n            assert dtype in rblocks\n            assert_frame_equal(\n                lblocks[dtype], rblocks[dtype], check_dtype=check_dtype, obj=obj\n            )\n\n    # compare by columns\n    else:\n        for i, col in enumerate(left.columns):\n            assert col in right\n            lcol = left.iloc[:, i]\n            rcol = right.iloc[:, i]\n            assert_series_equal(\n                lcol,\n                rcol,\n                check_dtype=check_dtype,\n                check_index_type=check_index_type,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                check_names=check_names,\n                check_datetimelike_compat=check_datetimelike_compat,\n                check_categorical=check_categorical,\n                obj=\"{obj}.iloc[:, {idx}]\".format(obj=obj, idx=i),\n            )",
        "begin_line": 1223,
        "end_line": 1400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 7.869058860560277e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_equal#1403",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_equal(left, right, **kwargs)",
        "snippet": "def assert_equal(left, right, **kwargs):\n    \"\"\"\n    Wrapper for tm.assert_*_equal to dispatch to the appropriate test function.\n\n    Parameters\n    ----------\n    left : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n    right : Index, Series, DataFrame, ExtensionArray, or np.ndarray\n    **kwargs\n    \"\"\"\n    __tracebackhide__ = True\n\n    if isinstance(left, pd.Index):\n        assert_index_equal(left, right, **kwargs)\n    elif isinstance(left, pd.Series):\n        assert_series_equal(left, right, **kwargs)\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(left, right, **kwargs)\n    elif isinstance(left, IntervalArray):\n        assert_interval_array_equal(left, right, **kwargs)\n    elif isinstance(left, PeriodArray):\n        assert_period_array_equal(left, right, **kwargs)\n    elif isinstance(left, DatetimeArray):\n        assert_datetime_array_equal(left, right, **kwargs)\n    elif isinstance(left, TimedeltaArray):\n        assert_timedelta_array_equal(left, right, **kwargs)\n    elif isinstance(left, ExtensionArray):\n        assert_extension_array_equal(left, right, **kwargs)\n    elif isinstance(left, np.ndarray):\n        assert_numpy_array_equal(left, right, **kwargs)\n    elif isinstance(left, str):\n        assert kwargs == {}\n        return left == right\n    else:\n        raise NotImplementedError(type(left))",
        "begin_line": 1403,
        "end_line": 1437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.getCols#1586",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.getCols(k)",
        "snippet": "def getCols(k):\n    return string.ascii_uppercase[:k]",
        "begin_line": 1586,
        "end_line": 1587,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010056315366049879,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeStringIndex#1591",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeStringIndex(k=10, name=None)",
        "snippet": "def makeStringIndex(k=10, name=None):\n    return Index(rands_array(nchars=10, size=k), name=name)",
        "begin_line": 1591,
        "end_line": 1592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeDateIndex#1638",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeDateIndex(k=10, freq='B', name=None, **kwargs)",
        "snippet": "def makeDateIndex(k=10, freq=\"B\", name=None, **kwargs):\n    dt = datetime(2000, 1, 1)\n    dr = bdate_range(dt, periods=k, freq=freq, name=name)\n    return DatetimeIndex(dr, name=name, **kwargs)",
        "begin_line": 1638,
        "end_line": 1641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.getSeriesData#1809",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.getSeriesData()",
        "snippet": "def getSeriesData():\n    index = makeStringIndex(N)\n    return {c: Series(randn(N), index=index) for c in getCols(K)}",
        "begin_line": 1809,
        "end_line": 1811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00014473874656245476,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeTimeSeries#1814",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeTimeSeries(nper=None, freq='B', name=None)",
        "snippet": "def makeTimeSeries(nper=None, freq=\"B\", name=None):\n    if nper is None:\n        nper = N\n    return Series(randn(nper), index=makeDateIndex(nper, freq=freq), name=name)",
        "begin_line": 1814,
        "end_line": 1817,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010463534581981794,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.getTimeSeriesData#1826",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.getTimeSeriesData(nper=None, freq='B')",
        "snippet": "def getTimeSeriesData(nper=None, freq=\"B\"):\n    return {c: makeTimeSeries(nper, freq) for c in getCols(K)}",
        "begin_line": 1826,
        "end_line": 1827,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeTimeDataFrame#1835",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeTimeDataFrame(nper=None, freq='B')",
        "snippet": "def makeTimeDataFrame(nper=None, freq=\"B\"):\n    data = getTimeSeriesData(nper, freq)\n    return DataFrame(data)",
        "begin_line": 1835,
        "end_line": 1837,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00010848340203948796,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.getMixedTypeDict#1845",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.getMixedTypeDict()",
        "snippet": "def getMixedTypeDict():\n    index = Index([\"a\", \"b\", \"c\", \"d\", \"e\"])\n\n    data = {\n        \"A\": [0.0, 1.0, 2.0, 3.0, 4.0],\n        \"B\": [0.0, 1.0, 0.0, 1.0, 0.0],\n        \"C\": [\"foo1\", \"foo2\", \"foo3\", \"foo4\", \"foo5\"],\n        \"D\": bdate_range(\"1/1/2009\", periods=5),\n    }\n\n    return index, data",
        "begin_line": 1845,
        "end_line": 1855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeCustomIndex#1867",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeCustomIndex(nentries, nlevels, prefix='#', names=False, ndupe_l=None, idx_type=None)",
        "snippet": "def makeCustomIndex(\n    nentries, nlevels, prefix=\"#\", names=False, ndupe_l=None, idx_type=None\n):\n    \"\"\"Create an index/multindex with given dimensions, levels, names, etc'\n\n    nentries - number of entries in index\n    nlevels - number of levels (> 1 produces multindex)\n    prefix - a string prefix for labels\n    names - (Optional), bool or list of strings. if True will use default\n       names, if false will use no names, if a list is given, the name of\n       each level in the index will be taken from the list.\n    ndupe_l - (Optional), list of ints, the number of rows for which the\n       label will repeated at the corresponding level, you can specify just\n       the first few, the rest will use the default ndupe_l of 1.\n       len(ndupe_l) <= nlevels.\n    idx_type - \"i\"/\"f\"/\"s\"/\"u\"/\"dt\"/\"p\"/\"td\".\n       If idx_type is not None, `idx_nlevels` must be 1.\n       \"i\"/\"f\" creates an integer/float index,\n       \"s\"/\"u\" creates a string/unicode index\n       \"dt\" create a datetime index.\n       \"td\" create a datetime index.\n\n        if unspecified, string labels will be generated.\n    \"\"\"\n\n    if ndupe_l is None:\n        ndupe_l = [1] * nlevels\n    assert is_sequence(ndupe_l) and len(ndupe_l) <= nlevels\n    assert names is None or names is False or names is True or len(names) is nlevels\n    assert idx_type is None or (\n        idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and nlevels == 1\n    )\n\n    if names is True:\n        # build default names\n        names = [prefix + str(i) for i in range(nlevels)]\n    if names is False:\n        # pass None to index constructor for no name\n        names = None\n\n    # make singleton case uniform\n    if isinstance(names, str) and nlevels == 1:\n        names = [names]\n\n    # specific 1D index type requested?\n    idx_func = dict(\n        i=makeIntIndex,\n        f=makeFloatIndex,\n        s=makeStringIndex,\n        u=makeUnicodeIndex,\n        dt=makeDateIndex,\n        td=makeTimedeltaIndex,\n        p=makePeriodIndex,\n    ).get(idx_type)\n    if idx_func:\n        idx = idx_func(nentries)\n        # but we need to fill in the name\n        if names:\n            idx.name = names[0]\n        return idx\n    elif idx_type is not None:\n        raise ValueError(\n            '\"{idx_type}\" is not a legal value for `idx_type`, '\n            'use  \"i\"/\"f\"/\"s\"/\"u\"/\"dt/\"p\"/\"td\".'.format(idx_type=idx_type)\n        )\n\n    if len(ndupe_l) < nlevels:\n        ndupe_l.extend([1] * (nlevels - len(ndupe_l)))\n    assert len(ndupe_l) == nlevels\n\n    assert all(x > 0 for x in ndupe_l)\n\n    tuples = []\n    for i in range(nlevels):\n\n        def keyfunc(x):\n            import re\n\n            numeric_tuple = re.sub(r\"[^\\d_]_?\", \"\", x).split(\"_\")\n            return [int(num) for num in numeric_tuple]\n\n        # build a list of lists to create the index from\n        div_factor = nentries // ndupe_l[i] + 1\n        cnt = Counter()\n        for j in range(div_factor):\n            label = \"{prefix}_l{i}_g{j}\".format(prefix=prefix, i=i, j=j)\n            cnt[label] = ndupe_l[i]\n        # cute Counter trick\n        result = sorted(cnt.elements(), key=keyfunc)[:nentries]\n        tuples.append(result)\n\n    tuples = list(zip(*tuples))\n\n    # convert tuples to index\n    if nentries == 1:\n        # we have a single level of tuples, i.e. a regular Index\n        index = Index(tuples[0], name=names[0])\n    elif nlevels == 1:\n        name = None if names is None else names[0]\n        index = Index((x[0] for x in tuples), name=name)\n    else:\n        index = MultiIndex.from_tuples(tuples, names=names)\n    return index",
        "begin_line": 1867,
        "end_line": 1969,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.keyfunc#1942",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.keyfunc(x)",
        "snippet": "        def keyfunc(x):\n            import re\n\n            numeric_tuple = re.sub(r\"[^\\d_]_?\", \"\", x).split(\"_\")\n            return [int(num) for num in numeric_tuple]",
        "begin_line": 1942,
        "end_line": 1946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.makeCustomDataframe#1972",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeCustomDataframe(nrows, ncols, c_idx_names=True, r_idx_names=True, c_idx_nlevels=1, r_idx_nlevels=1, data_gen_f=None, c_ndupe_l=None, r_ndupe_l=None, dtype=None, c_idx_type=None, r_idx_type=None)",
        "snippet": "def makeCustomDataframe(\n    nrows,\n    ncols,\n    c_idx_names=True,\n    r_idx_names=True,\n    c_idx_nlevels=1,\n    r_idx_nlevels=1,\n    data_gen_f=None,\n    c_ndupe_l=None,\n    r_ndupe_l=None,\n    dtype=None,\n    c_idx_type=None,\n    r_idx_type=None,\n):\n    \"\"\"\n   nrows,  ncols - number of data rows/cols\n   c_idx_names, idx_names  - False/True/list of strings,  yields No names ,\n        default names or uses the provided names for the levels of the\n        corresponding index. You can provide a single string when\n        c_idx_nlevels ==1.\n   c_idx_nlevels - number of levels in columns index. > 1 will yield MultiIndex\n   r_idx_nlevels - number of levels in rows index. > 1 will yield MultiIndex\n   data_gen_f - a function f(row,col) which return the data value\n        at that position, the default generator used yields values of the form\n        \"RxCy\" based on position.\n   c_ndupe_l, r_ndupe_l - list of integers, determines the number\n        of duplicates for each label at a given level of the corresponding\n        index. The default `None` value produces a multiplicity of 1 across\n        all levels, i.e. a unique index. Will accept a partial list of length\n        N < idx_nlevels, for just the first N levels. If ndupe doesn't divide\n        nrows/ncol, the last label might have lower multiplicity.\n   dtype - passed to the DataFrame constructor as is, in case you wish to\n        have more control in conjunction with a custom `data_gen_f`\n   r_idx_type, c_idx_type -  \"i\"/\"f\"/\"s\"/\"u\"/\"dt\"/\"td\".\n       If idx_type is not None, `idx_nlevels` must be 1.\n       \"i\"/\"f\" creates an integer/float index,\n       \"s\"/\"u\" creates a string/unicode index\n       \"dt\" create a datetime index.\n       \"td\" create a timedelta index.\n\n        if unspecified, string labels will be generated.\n\n    Examples:\n\n    # 5 row, 3 columns, default names on both, single index on both axis\n    >> makeCustomDataframe(5,3)\n\n    # make the data a random int between 1 and 100\n    >> mkdf(5,3,data_gen_f=lambda r,c:randint(1,100))\n\n    # 2-level multiindex on rows with each label duplicated\n    # twice on first level, default names on both axis, single\n    # index on both axis\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=2,r_ndupe_l=[2])\n\n    # DatetimeIndex on row, index with unicode labels on columns\n    # no names on either axis\n    >> a=makeCustomDataframe(5,3,c_idx_names=False,r_idx_names=False,\n                             r_idx_type=\"dt\",c_idx_type=\"u\")\n\n    # 4-level multindex on rows with names provided, 2-level multindex\n    # on columns with default labels and default names.\n    >> a=makeCustomDataframe(5,3,r_idx_nlevels=4,\n                             r_idx_names=[\"FEE\",\"FI\",\"FO\",\"FAM\"],\n                             c_idx_nlevels=2)\n\n    >> a=mkdf(5,3,r_idx_nlevels=2,c_idx_nlevels=4)\n    \"\"\"\n\n    assert c_idx_nlevels > 0\n    assert r_idx_nlevels > 0\n    assert r_idx_type is None or (\n        r_idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and r_idx_nlevels == 1\n    )\n    assert c_idx_type is None or (\n        c_idx_type in (\"i\", \"f\", \"s\", \"u\", \"dt\", \"p\", \"td\") and c_idx_nlevels == 1\n    )\n\n    columns = makeCustomIndex(\n        ncols,\n        nlevels=c_idx_nlevels,\n        prefix=\"C\",\n        names=c_idx_names,\n        ndupe_l=c_ndupe_l,\n        idx_type=c_idx_type,\n    )\n    index = makeCustomIndex(\n        nrows,\n        nlevels=r_idx_nlevels,\n        prefix=\"R\",\n        names=r_idx_names,\n        ndupe_l=r_ndupe_l,\n        idx_type=r_idx_type,\n    )\n\n    # by default, generate data based on location\n    if data_gen_f is None:\n        data_gen_f = lambda r, c: \"R{rows}C{cols}\".format(rows=r, cols=c)\n\n    data = [[data_gen_f(r, c) for c in range(ncols)] for r in range(nrows)]\n\n    return DataFrame(data, index, columns, dtype=dtype)",
        "begin_line": 1972,
        "end_line": 2073,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util.testing.assert_produces_warning#2404",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_produces_warning(expected_warning=Warning, filter_level='always', clear=None, check_stacklevel=True, raise_on_extra_warnings=True)",
        "snippet": "def assert_produces_warning(\n    expected_warning=Warning,\n    filter_level=\"always\",\n    clear=None,\n    check_stacklevel=True,\n    raise_on_extra_warnings=True,\n):\n    \"\"\"\n    Context manager for running code expected to either raise a specific\n    warning, or not raise any warnings. Verifies that the code raises the\n    expected warning, and that it does not raise any other unexpected\n    warnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\n    Parameters\n    ----------\n    expected_warning : {Warning, False, None}, default Warning\n        The type of Exception raised. ``exception.Warning`` is the base\n        class for all warnings. To check that no warning is returned,\n        specify ``False`` or ``None``.\n    filter_level : str or None, default \"always\"\n        Specifies whether warnings are ignored, displayed, or turned\n        into errors.\n        Valid values are:\n\n        * \"error\" - turns matching warnings into exceptions\n        * \"ignore\" - discard the warning\n        * \"always\" - always emit a warning\n        * \"default\" - print the warning the first time it is generated\n          from each location\n        * \"module\" - print the warning the first time it is generated\n          from each module\n        * \"once\" - print the warning the first time it is generated\n\n    clear : str, default None\n        If not ``None`` then remove any previously raised warnings from\n        the ``__warningsregistry__`` to ensure that no warning messages are\n        suppressed by this context manager. If ``None`` is specified,\n        the ``__warningsregistry__`` keeps track of which warnings have been\n        shown, and does not show them again.\n    check_stacklevel : bool, default True\n        If True, displays the line that called the function containing\n        the warning to show were the function is called. Otherwise, the\n        line that implements the function is displayed.\n    raise_on_extra_warnings : bool, default True\n        Whether extra warnings not of the type `expected_warning` should\n        cause the test to fail.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with assert_produces_warning():\n    ...     warnings.warn(UserWarning())\n    ...\n    >>> with assert_produces_warning(False):\n    ...     warnings.warn(RuntimeWarning())\n    ...\n    Traceback (most recent call last):\n        ...\n    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n    >>> with assert_produces_warning(UserWarning):\n    ...     warnings.warn(RuntimeWarning())\n    Traceback (most recent call last):\n        ...\n    AssertionError: Did not see expected warning of class 'UserWarning'.\n\n    ..warn:: This is *not* thread-safe.\n    \"\"\"\n    __tracebackhide__ = True\n\n    with warnings.catch_warnings(record=True) as w:\n\n        if clear is not None:\n            # make sure that we are clearing these warnings\n            # if they have happened before\n            # to guarantee that we will catch them\n            if not is_list_like(clear):\n                clear = [clear]\n            for m in clear:\n                try:\n                    m.__warningregistry__.clear()\n                except AttributeError:\n                    # module may not have __warningregistry__\n                    pass\n\n        saw_warning = False\n        warnings.simplefilter(filter_level)\n        yield w\n        extra_warnings = []\n\n        for actual_warning in w:\n            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n\n                if check_stacklevel and issubclass(\n                    actual_warning.category, (FutureWarning, DeprecationWarning)\n                ):\n                    from inspect import getframeinfo, stack\n\n                    caller = getframeinfo(stack()[2][0])\n                    msg = (\n                        \"Warning not set with correct stacklevel. \"\n                        \"File where warning is raised: {actual} != \"\n                        \"{caller}. Warning message: {message}\"\n                    ).format(\n                        actual=actual_warning.filename,\n                        caller=caller.filename,\n                        message=actual_warning.message,\n                    )\n                    assert actual_warning.filename == caller.filename, msg\n            else:\n                extra_warnings.append(\n                    (\n                        actual_warning.category.__name__,\n                        actual_warning.message,\n                        actual_warning.filename,\n                        actual_warning.lineno,\n                    )\n                )\n        if expected_warning:\n            msg = \"Did not see expected warning of class {name!r}.\".format(\n                name=expected_warning.__name__\n            )\n            assert saw_warning, msg\n        if raise_on_extra_warnings and extra_warnings:\n            raise AssertionError(\n                \"Caused unexpected warning(s): {!r}.\".format(extra_warnings)\n            )",
        "begin_line": 2404,
        "end_line": 2532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.tools.numeric.to_numeric#19",
        "src_path": "pandas/core/tools/numeric.py",
        "class_name": "pandas.core.tools.numeric",
        "signature": "pandas.core.tools.numeric.to_numeric(arg, errors='raise', downcast=None)",
        "snippet": "def to_numeric(arg, errors=\"raise\", downcast=None):\n    \"\"\"\n    Convert argument to a numeric type.\n\n    The default return dtype is `float64` or `int64`\n    depending on the data supplied. Use the `downcast` parameter\n    to obtain other dtypes.\n\n    Please note that precision loss may occur if really large numbers\n    are passed in. Due to the internal limitations of `ndarray`, if\n    numbers smaller than `-9223372036854775808` (np.iinfo(np.int64).min)\n    or larger than `18446744073709551615` (np.iinfo(np.uint64).max) are\n    passed in, it is very likely they will be converted to float so that\n    they can stored in an `ndarray`. These warnings apply similarly to\n    `Series` since it internally leverages `ndarray`.\n\n    Parameters\n    ----------\n    arg : scalar, list, tuple, 1-d array, or Series\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaN.\n        - If 'ignore', then invalid parsing will return the input.\n    downcast : {'integer', 'signed', 'unsigned', 'float'}, default None\n        If not None, and if the data has been successfully cast to a\n        numerical dtype (or if the data was numeric to begin with),\n        downcast that resulting data to the smallest numerical dtype\n        possible according to the following rules:\n\n        - 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n        - 'unsigned': smallest unsigned int dtype (min.: np.uint8)\n        - 'float': smallest float dtype (min.: np.float32)\n\n        As this behaviour is separate from the core conversion to\n        numeric values, any errors raised during the downcasting\n        will be surfaced regardless of the value of the 'errors' input.\n\n        In addition, downcasting will only occur if the size\n        of the resulting data's dtype is strictly larger than\n        the dtype it is to be cast to, so if none of the dtypes\n        checked satisfy that specification, no downcasting will be\n        performed on the data.\n\n    Returns\n    -------\n    ret : numeric if parsing succeeded.\n        Return type depends on input.  Series if Series, otherwise ndarray.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n    Examples\n    --------\n    Take separate series and convert to numeric, coercing when told to\n\n    >>> s = pd.Series(['1.0', '2', -3])\n    >>> pd.to_numeric(s)\n    0    1.0\n    1    2.0\n    2   -3.0\n    dtype: float64\n    >>> pd.to_numeric(s, downcast='float')\n    0    1.0\n    1    2.0\n    2   -3.0\n    dtype: float32\n    >>> pd.to_numeric(s, downcast='signed')\n    0    1\n    1    2\n    2   -3\n    dtype: int8\n    >>> s = pd.Series(['apple', '1.0', '2', -3])\n    >>> pd.to_numeric(s, errors='ignore')\n    0    apple\n    1      1.0\n    2        2\n    3       -3\n    dtype: object\n    >>> pd.to_numeric(s, errors='coerce')\n    0    NaN\n    1    1.0\n    2    2.0\n    3   -3.0\n    dtype: float64\n    \"\"\"\n    if downcast not in (None, \"integer\", \"signed\", \"unsigned\", \"float\"):\n        raise ValueError(\"invalid downcasting method provided\")\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"invalid error value specified\")\n\n    is_series = False\n    is_index = False\n    is_scalars = False\n\n    if isinstance(arg, ABCSeries):\n        is_series = True\n        values = arg.values\n    elif isinstance(arg, ABCIndexClass):\n        is_index = True\n        values = arg.asi8\n        if values is None:\n            values = arg.values\n    elif isinstance(arg, (list, tuple)):\n        values = np.array(arg, dtype=\"O\")\n    elif is_scalar(arg):\n        if is_decimal(arg):\n            return float(arg)\n        if is_number(arg):\n            return arg\n        is_scalars = True\n        values = np.array([arg], dtype=\"O\")\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\"arg must be a list, tuple, 1-d array, or Series\")\n    else:\n        values = arg\n\n    if is_numeric_dtype(values):\n        pass\n    elif is_datetime_or_timedelta_dtype(values):\n        values = values.astype(np.int64)\n    else:\n        values = ensure_object(values)\n        coerce_numeric = errors not in (\"ignore\", \"raise\")\n        try:\n            values = lib.maybe_convert_numeric(\n                values, set(), coerce_numeric=coerce_numeric\n            )\n        except (ValueError, TypeError):\n            if errors == \"raise\":\n                raise\n\n    # attempt downcast only if the data has been successfully converted\n    # to a numerical dtype and if a downcast method has been specified\n    if downcast is not None and is_numeric_dtype(values):\n        typecodes = None\n\n        if downcast in (\"integer\", \"signed\"):\n            typecodes = np.typecodes[\"Integer\"]\n        elif downcast == \"unsigned\" and np.min(values) >= 0:\n            typecodes = np.typecodes[\"UnsignedInteger\"]\n        elif downcast == \"float\":\n            typecodes = np.typecodes[\"Float\"]\n\n            # pandas support goes only to np.float32,\n            # as float dtypes smaller than that are\n            # extremely rare and not well supported\n            float_32_char = np.dtype(np.float32).char\n            float_32_ind = typecodes.index(float_32_char)\n            typecodes = typecodes[float_32_ind:]\n\n        if typecodes is not None:\n            # from smallest to largest\n            for dtype in typecodes:\n                if np.dtype(dtype).itemsize <= values.dtype.itemsize:\n                    values = maybe_downcast_to_dtype(values, dtype)\n\n                    # successful conversion\n                    if values.dtype == dtype:\n                        break\n\n    if is_series:\n        return pd.Series(values, index=arg.index, name=arg.name)\n    elif is_index:\n        # because we want to coerce to numeric if possible,\n        # do not use _shallow_copy_with_infer\n        return pd.Index(values, name=arg.name)\n    elif is_scalars:\n        return values[0]\n    else:\n        return values",
        "begin_line": 19,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00019837333862328903,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators._check_arg_length#13",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_arg_length(fname, args, max_fname_arg_count, compat_args)",
        "snippet": "def _check_arg_length(fname, args, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether 'args' has length of at most 'compat_args'. Raises\n    a TypeError if that is not the case, similar to in Python when a\n    function is called with too many arguments.\n\n    \"\"\"\n    if max_fname_arg_count < 0:\n        raise ValueError(\"'max_fname_arg_count' must be non-negative\")\n\n    if len(args) > len(compat_args):\n        max_arg_count = len(compat_args) + max_fname_arg_count\n        actual_arg_count = len(args) + max_fname_arg_count\n        argument = \"argument\" if max_arg_count == 1 else \"arguments\"\n\n        raise TypeError(\n            \"{fname}() takes at most {max_arg} {argument} \"\n            \"({given_arg} given)\".format(\n                fname=fname,\n                max_arg=max_arg_count,\n                argument=argument,\n                given_arg=actual_arg_count,\n            )\n        )",
        "begin_line": 13,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators._check_for_default_values#39",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_default_values(fname, arg_val_dict, compat_args)",
        "snippet": "def _check_for_default_values(fname, arg_val_dict, compat_args):\n    \"\"\"\n    Check that the keys in `arg_val_dict` are mapped to their\n    default values as specified in `compat_args`.\n\n    Note that this function is to be called only when it has been\n    checked that arg_val_dict.keys() is a subset of compat_args\n\n    \"\"\"\n    for key in arg_val_dict:\n        # try checking equality directly with '=' operator,\n        # as comparison may have been overridden for the left\n        # hand object\n        try:\n            v1 = arg_val_dict[key]\n            v2 = compat_args[key]\n\n            # check for None-ness otherwise we could end up\n            # comparing a numpy array vs None\n            if (v1 is not None and v2 is None) or (v1 is None and v2 is not None):\n                match = False\n            else:\n                match = v1 == v2\n\n            if not is_bool(match):\n                raise ValueError(\"'match' is not a boolean\")\n\n        # could not compare them directly, so try comparison\n        # using the 'is' operator\n        except ValueError:\n            match = arg_val_dict[key] is compat_args[key]\n\n        if not match:\n            raise ValueError(\n                (\n                    \"the '{arg}' parameter is not \"\n                    \"supported in the pandas \"\n                    \"implementation of {fname}()\".format(fname=fname, arg=key)\n                )\n            )",
        "begin_line": 39,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators._check_for_invalid_keys#123",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_invalid_keys(fname, kwargs, compat_args)",
        "snippet": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.\n\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError(\n            (\n                \"{fname}() got an unexpected \"\n                \"keyword argument '{arg}'\".format(fname=fname, arg=bad_arg)\n            )\n        )",
        "begin_line": 123,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators.validate_kwargs#142",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_kwargs(fname, kwargs, compat_args)",
        "snippet": "def validate_kwargs(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to have and their\n        associated default values\n\n    Raises\n    ------\n    TypeError if `kwargs` contains keys not in `compat_args`\n    ValueError if `kwargs` contains keys in `compat_args` that do not\n    map to the default values specified in `compat_args`\n\n    \"\"\"\n    kwds = kwargs.copy()\n    _check_for_invalid_keys(fname, kwargs, compat_args)\n    _check_for_default_values(fname, kwds, compat_args)",
        "begin_line": 142,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001277139208173691,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators.validate_args_and_kwargs#172",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args)",
        "snippet": "def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the *args and **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n\n    args: tuple\n        The `*args` parameter passed into a function\n\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n\n    max_fname_arg_count: int\n        The minimum number of arguments that the function `fname`\n        requires, excluding those in `args`. Used for displaying\n        appropriate error messages. Must be non-negative.\n\n    compat_args: OrderedDict\n        A ordered dictionary of keys that `kwargs` is allowed to\n        have and their associated default values. Note that if there\n        is only one key, a generic dict can be passed in as well.\n\n    Raises\n    ------\n    TypeError if `args` contains more values than there are\n    `compat_args` OR `kwargs` contains keys not in `compat_args`\n    ValueError if `args` contains values not at the default value (`None`)\n    `kwargs` contains keys in `compat_args` that do not map to the default\n    value as specified in `compat_args`\n\n    See Also\n    --------\n    validate_args : Purely args validation.\n    validate_kwargs : Purely kwargs validation.\n\n    \"\"\"\n    # Check that the total number of arguments passed in (i.e.\n    # args and kwargs) does not exceed the length of compat_args\n    _check_arg_length(\n        fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args\n    )\n\n    # Check there is no overlap with the positional and keyword\n    # arguments, similar to what is done in actual Python functions\n    args_dict = dict(zip(compat_args, args))\n\n    for key in args_dict:\n        if key in kwargs:\n            raise TypeError(\n                \"{fname}() got multiple values for keyword \"\n                \"argument '{arg}'\".format(fname=fname, arg=key)\n            )\n\n    kwargs.update(args_dict)\n    validate_kwargs(fname, kwargs, compat_args)",
        "begin_line": 172,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#234",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            'For argument \"{arg}\" expected type bool, received '\n            \"type {typ}.\".format(arg=arg_name, typ=type(value).__name__)\n        )\n    return value",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0003872966692486445,
            "pseudo_dstar_susp": 0.0003872966692486445,
            "pseudo_tarantula_susp": 0.00038819875776397513,
            "pseudo_op2_susp": 0.0003872966692486445,
            "pseudo_barinel_susp": 0.00038819875776397513
        }
    },
    {
        "name": "pandas.util._validators.validate_axis_style_args#244",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_axis_style_args(data, args, kwargs, arg_name, method_name)",
        "snippet": "def validate_axis_style_args(data, args, kwargs, arg_name, method_name):\n    \"\"\"Argument handler for mixed index, columns / axis functions\n\n    In an attempt to handle both `.method(index, columns)`, and\n    `.method(arg, axis=.)`, we have to do some bad things to argument\n    parsing. This translates all arguments to `{index=., columns=.}` style.\n\n    Parameters\n    ----------\n    data : DataFrame\n    args : tuple\n        All positional arguments from the user\n    kwargs : dict\n        All keyword arguments from the user\n    arg_name, method_name : str\n        Used for better error messages\n\n    Returns\n    -------\n    kwargs : dict\n        A dictionary of keyword arguments. Doesn't modify ``kwargs``\n        inplace, so update them with the return value here.\n\n    Examples\n    --------\n    >>> df._validate_axis_style_args((str.upper,), {'columns': id},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n\n    This emits a warning\n    >>> df._validate_axis_style_args((str.upper, id), {},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n    \"\"\"\n    # TODO: Change to keyword-only args and remove all this\n\n    out = {}\n    # Goal: fill 'out' with index/columns-style arguments\n    # like out = {'index': foo, 'columns': bar}\n\n    # Start by validating for consistency\n    if \"axis\" in kwargs and any(x in kwargs for x in data._AXIS_NUMBERS):\n        msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'.\"\n        raise TypeError(msg)\n\n    # First fill with explicit values provided by the user...\n    if arg_name in kwargs:\n        if args:\n            msg = \"{} got multiple values for argument '{}'\".format(\n                method_name, arg_name\n            )\n            raise TypeError(msg)\n\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = kwargs[arg_name]\n\n    # More user-provided arguments, now from kwargs\n    for k, v in kwargs.items():\n        try:\n            ax = data._get_axis_name(k)\n        except ValueError:\n            pass\n        else:\n            out[ax] = v\n\n    # All user-provided kwargs have been handled now.\n    # Now we supplement with positional arguments, emitting warnings\n    # when there's ambiguity and raising when there's conflicts\n\n    if len(args) == 0:\n        pass  # It's up to the function to decide if this is valid\n    elif len(args) == 1:\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = args[0]\n    elif len(args) == 2:\n        if \"axis\" in kwargs:\n            # Unambiguously wrong\n            msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n            raise TypeError(msg)\n\n        msg = (\n            \"Interpreting call\\n\\t'.{method_name}(a, b)' as \"\n            \"\\n\\t'.{method_name}(index=a, columns=b)'.\\nUse named \"\n            \"arguments to remove any ambiguity. In the future, using \"\n            \"positional arguments for 'index' or 'columns' will raise \"\n            \" a 'TypeError'.\"\n        )\n        warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)\n        out[data._AXIS_NAMES[0]] = args[0]\n        out[data._AXIS_NAMES[1]] = args[1]\n    else:\n        msg = \"Cannot specify all of '{}', 'index', 'columns'.\"\n        raise TypeError(msg.format(arg_name))\n    return out",
        "begin_line": 244,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.util._validators.validate_fillna_kwargs#340",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_fillna_kwargs(value, method, validate_scalar_dict_value=True)",
        "snippet": "def validate_fillna_kwargs(value, method, validate_scalar_dict_value=True):\n    \"\"\"Validate the keyword arguments to 'fillna'.\n\n    This checks that exactly one of 'value' and 'method' is specified.\n    If 'method' is specified, this validates that it's a valid method.\n\n    Parameters\n    ----------\n    value, method : object\n        The 'value' and 'method' keyword arguments for 'fillna'.\n    validate_scalar_dict_value : bool, default True\n        Whether to validate that 'value' is a scalar or dict. Specifically,\n        validate that it is not a list or tuple.\n\n    Returns\n    -------\n    value, method : object\n    \"\"\"\n    from pandas.core.missing import clean_fill_method\n\n    if value is None and method is None:\n        raise ValueError(\"Must specify a fill 'value' or 'method'.\")\n    elif value is None and method is not None:\n        method = clean_fill_method(method)\n\n    elif value is not None and method is None:\n        if validate_scalar_dict_value and isinstance(value, (list, tuple)):\n            raise TypeError(\n                '\"value\" parameter must be a scalar or dict, but '\n                'you passed a \"{0}\"'.format(type(value).__name__)\n            )\n\n    elif value is not None and method is not None:\n        raise ValueError(\"Cannot specify both 'value' and 'method'.\")\n\n    return value, method",
        "begin_line": 340,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.737098344693281e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.construct_from_string#76",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"string\":\n            return cls()\n        return super().construct_from_string(string)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004506534474988734,
            "pseudo_dstar_susp": 0.00045045045045045046,
            "pseudo_tarantula_susp": 0.0005878894767783657,
            "pseudo_op2_susp": 0.00045045045045045046,
            "pseudo_barinel_susp": 0.0005878894767783657
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__#67",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__(self, dtype: Dtype=np.float64, fill_value: Any=None)",
        "snippet": "    def __init__(self, dtype: Dtype = np.float64, fill_value: Any = None) -> None:\n\n        if isinstance(dtype, type(self)):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        dtype = pandas_dtype(dtype)\n        if is_string_dtype(dtype):\n            dtype = np.dtype(\"object\")\n\n        if fill_value is None:\n            fill_value = na_value_for_dtype(dtype)\n\n        if not is_scalar(fill_value):\n            raise ValueError(\n                \"fill_value must be a scalar. Got {} instead\".format(fill_value)\n            )\n        self._dtype = dtype\n        self._fill_value = fill_value",
        "begin_line": 67,
        "end_line": 86,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__hash__#88",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__hash__(self)",
        "snippet": "    def __hash__(self):\n        # Python3 doesn't inherit __hash__ when a base class overrides\n        # __eq__, so we explicitly do it here.\n        return super().__hash__()",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0001497678598172832,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__#93",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other) -> bool:\n        # We have to override __eq__ to handle NA values in _metadata.\n        # The base class does simple == checks, which fail for NA.\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n\n        if isinstance(other, type(self)):\n            subtype = self.subtype == other.subtype\n            if self._is_na_fill_value:\n                # this case is complicated by two things:\n                # SparseDtype(float, float(nan)) == SparseDtype(float, np.nan)\n                # SparseDtype(float, np.nan)     != SparseDtype(float, pd.NaT)\n                # i.e. we want to treat any floating-point NaN as equal, but\n                # not a floating-point NaN and a datetime NaT.\n                fill_value = (\n                    other._is_na_fill_value\n                    and isinstance(self.fill_value, type(other.fill_value))\n                    or isinstance(other.fill_value, type(self.fill_value))\n                )\n            else:\n                fill_value = self.fill_value == other.fill_value\n\n            return subtype and fill_value\n        return False",
        "begin_line": 93,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value#122",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        The fill value of the array.\n\n        Converting the SparseArray to a dense ndarray will fill the\n        array with this value.\n\n        .. warning::\n\n           It's possible to end up with a SparseArray that has ``fill_value``\n           values in ``sp_values``. This can occur, for example, when setting\n           ``SparseArray.fill_value`` directly.\n        \"\"\"\n        return self._fill_value",
        "begin_line": 122,
        "end_line": 135,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value#138",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value(self)",
        "snippet": "    def _is_na_fill_value(self):\n        return isna(self.fill_value)",
        "begin_line": 138,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._is_numeric#142",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self):\n        return not is_object_dtype(self.subtype)",
        "begin_line": 142,
        "end_line": 143,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00017313019390581717,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.kind#150",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.kind(self)",
        "snippet": "    def kind(self):\n        \"\"\"\n        The sparse kind. Either 'integer', or 'block'.\n        \"\"\"\n        return self.subtype.kind",
        "begin_line": 150,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.type#157",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.type(self)",
        "snippet": "    def type(self):\n        return self.subtype.type",
        "begin_line": 157,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype#161",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        return self._dtype",
        "begin_line": 161,
        "end_line": 162,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 8.911067545891998e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.name#165",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.name(self)",
        "snippet": "    def name(self):\n        return \"Sparse[{}, {}]\".format(self.subtype.name, self.fill_value)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.187798603454613e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_array_type#172",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        from .array import SparseArray\n\n        return SparseArray",
        "begin_line": 172,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.00015913430935709738,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#178",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        msg = \"Could not construct SparseDtype from '{}'\".format(string)\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError:\n                raise TypeError(msg)\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    \"Could not construct SparseDtype from '{}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg.format(string))\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 178,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0004506534474988734,
            "pseudo_dstar_susp": 0.00045045045045045046,
            "pseudo_tarantula_susp": 0.0005878894767783657,
            "pseudo_op2_susp": 0.00045045045045045046,
            "pseudo_barinel_susp": 0.0005878894767783657
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._parse_subtype#226",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._parse_subtype(dtype: str)",
        "snippet": "    def _parse_subtype(dtype: str) -> Tuple[str, bool]:\n        \"\"\"\n        Parse a string to get the subtype\n\n        Parameters\n        ----------\n        dtype : str\n            A string like\n\n            * Sparse[subtype]\n            * Sparse[subtype, fill_value]\n\n        Returns\n        -------\n        subtype : str\n\n        Raises\n        ------\n        ValueError\n            When the subtype cannot be extracted.\n        \"\"\"\n        xpr = re.compile(r\"Sparse\\[(?P<subtype>[^,]*)(, )?(?P<fill_value>.*?)?\\]$\")\n        m = xpr.match(dtype)\n        has_fill_value = False\n        if m:\n            subtype = m.groupdict()[\"subtype\"]\n            has_fill_value = bool(m.groupdict()[\"fill_value\"])\n        elif dtype == \"Sparse\":\n            subtype = \"float64\"\n        else:\n            raise ValueError(\"Cannot parse {}\".format(dtype))\n        return subtype, has_fill_value",
        "begin_line": 226,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 0.0002678810608090008,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.update_dtype#269",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.update_dtype(self, dtype)",
        "snippet": "    def update_dtype(self, dtype):\n        \"\"\"\n        Convert the SparseDtype to a new dtype.\n\n        This takes care of converting the ``fill_value``.\n\n        Parameters\n        ----------\n        dtype : Union[str, numpy.dtype, SparseDtype]\n            The new dtype to use.\n\n            * For a SparseDtype, it is simply returned\n            * For a NumPy dtype (or str), the current fill value\n              is converted to the new dtype, and a SparseDtype\n              with `dtype` and the new fill value is returned.\n\n        Returns\n        -------\n        SparseDtype\n            A new SparseDtype with the corret `dtype` and fill value\n            for that `dtype`.\n\n        Raises\n        ------\n        ValueError\n            When the current fill value cannot be converted to the\n            new `dtype` (e.g. trying to convert ``np.nan`` to an\n            integer dtype).\n\n\n        Examples\n        --------\n        >>> SparseDtype(int, 0).update_dtype(float)\n        Sparse[float64, 0.0]\n\n        >>> SparseDtype(int, 1).update_dtype(SparseDtype(float, np.nan))\n        Sparse[float64, nan]\n        \"\"\"\n        cls = type(self)\n        dtype = pandas_dtype(dtype)\n\n        if not isinstance(dtype, cls):\n            fill_value = astype_nansafe(np.array(self.fill_value), dtype).item()\n            dtype = cls(dtype, fill_value=fill_value)\n\n        return dtype",
        "begin_line": 269,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._subtype_with_str#317",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._subtype_with_str(self)",
        "snippet": "    def _subtype_with_str(self):\n        \"\"\"\n        Whether the SparseDtype's subtype should be considered ``str``.\n\n        Typically, pandas will store string data in an object-dtype array.\n        When converting values to a dtype, e.g. in ``.astype``, we need to\n        be more specific, we need the actual underlying type.\n\n        Returns\n        -------\n\n        >>> SparseDtype(int, 1)._subtype_with_str\n        dtype('int64')\n\n        >>> SparseDtype(object, 1)._subtype_with_str\n        dtype('O')\n\n        >>> dtype = SparseDtype(str, '')\n        >>> dtype.subtype\n        dtype('O')\n\n        >>> dtype._subtype_with_str\n        str\n        \"\"\"\n        if isinstance(self.fill_value, str):\n            return type(self.fill_value)\n        return self.subtype",
        "begin_line": 317,
        "end_line": 343,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00010223903486351089,
            "pseudo_dstar_susp": 0.00010223903486351089,
            "pseudo_tarantula_susp": 0.00010223903486351089,
            "pseudo_op2_susp": 9.01144453455889e-05,
            "pseudo_barinel_susp": 0.00010223903486351089
        }
    }
]