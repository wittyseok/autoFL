coverage run -m pytest tests/test_multi_body_errors.py::test_jsonable_encoder_requiring_error
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/fastapi
plugins: cov-2.9.0
collected 1 item

tests/test_multi_body_errors.py F                                        [100%]

=================================== FAILURES ===================================
____________________ test_jsonable_encoder_requiring_error _____________________

    def test_jsonable_encoder_requiring_error():
>       response = client.post("/items/", json=[{"name": "Foo", "age": -1.0}])

tests/test_multi_body_errors.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/requests/sessions.py:578: in post
    return self.request('POST', url, data=data, json=json, **kwargs)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/testclient.py:405: in request
    return super().request(
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/requests/sessions.py:530: in request
    resp = self.send(prep, **send_kwargs)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/requests/sessions.py:643: in send
    r = adapter.send(request, **kwargs)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/testclient.py:238: in send
    raise exc from None
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/testclient.py:235: in send
    loop.run_until_complete(self.app(scope, receive, send))
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/asyncio/base_events.py:616: in run_until_complete
    return future.result()
fastapi/applications.py:140: in __call__
    await super().__call__(scope, receive, send)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/applications.py:134: in __call__
    await self.error_middleware(scope, receive, send)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/middleware/errors.py:178: in __call__
    raise exc from None
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/middleware/errors.py:156: in __call__
    await self.app(scope, receive, _send)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/exceptions.py:81: in __call__
    response = await handler(request, exc)
fastapi/exception_handlers.py:21: in request_validation_exception_handler
    return JSONResponse(
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/responses.py:42: in __init__
    self.body = self.render(content)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/starlette/responses.py:146: in render
    return json.dumps(
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/json/__init__.py:234: in dumps
    return cls(
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/json/encoder.py:199: in encode
    chunks = self.iterencode(o, _one_shot=True)
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/json/encoder.py:257: in iterencode
    return _iterencode(o, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x7fb75e839c70>, o = Decimal('0')

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Decimal is not JSON serializable

/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/json/encoder.py:179: TypeError
=============================== warnings summary ===============================
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
/opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10
  /opt/conda/envs/e22995067de84b5655026e5ebb62b5bf/lib/python3.8/site-packages/aiofiles/os.py:10: DeprecationWarning: "@coroutine" decorator is deprecated since Python 3.8, use "async def" instead
    def run(*args, loop=None, executor=None, **kwargs):

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED tests/test_multi_body_errors.py::test_jsonable_encoder_requiring_error
======================== 1 failed, 6 warnings in 0.84s =========================
