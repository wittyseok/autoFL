[
    {
        "name": "tornado.test.httpclient_test.HelloWorldHandler.get#37",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HelloWorldHandler",
        "signature": "tornado.test.httpclient_test.HelloWorldHandler.get(self)",
        "snippet": "    def get(self):\n        name = self.get_argument(\"name\", \"world\")\n        self.set_header(\"Content-Type\", \"text/plain\")\n        self.finish(\"Hello %s!\" % name)",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.PostHandler.post#44",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.PostHandler",
        "signature": "tornado.test.httpclient_test.PostHandler.post(self)",
        "snippet": "    def post(self):\n        self.finish(\n            \"Post arg1: %s, arg2: %s\"\n            % (self.get_argument(\"arg1\"), self.get_argument(\"arg2\"))\n        )",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.PutHandler.put#52",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.PutHandler",
        "signature": "tornado.test.httpclient_test.PutHandler.put(self)",
        "snippet": "    def put(self):\n        self.write(\"Put body: \")\n        self.write(self.request.body)",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RedirectHandler.prepare#58",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RedirectHandler",
        "signature": "tornado.test.httpclient_test.RedirectHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.write(\"redirects can have bodies too\")\n        self.redirect(\n            self.get_argument(\"url\"), status=int(self.get_argument(\"status\", \"302\"))\n        )",
        "begin_line": 58,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.ChunkHandler.get#67",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.ChunkHandler",
        "signature": "tornado.test.httpclient_test.ChunkHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(\"asdf\")\n        self.flush()\n        # Wait a bit to ensure the chunks are sent and received separately.\n        yield gen.sleep(0.01)\n        self.write(\"qwer\")",
        "begin_line": 67,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.AuthHandler.get#76",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.AuthHandler",
        "signature": "tornado.test.httpclient_test.AuthHandler.get(self)",
        "snippet": "    def get(self):\n        self.finish(self.request.headers[\"Authorization\"])",
        "begin_line": 76,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.CountdownHandler.get#81",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.CountdownHandler",
        "signature": "tornado.test.httpclient_test.CountdownHandler.get(self, count)",
        "snippet": "    def get(self, count):\n        count = int(count)\n        if count > 0:\n            self.redirect(self.reverse_url(\"countdown\", count - 1))\n        else:\n            self.write(\"Zero\")",
        "begin_line": 81,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.EchoPostHandler.post#90",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.EchoPostHandler",
        "signature": "tornado.test.httpclient_test.EchoPostHandler.post(self)",
        "snippet": "    def post(self):\n        self.write(self.request.body)",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.UserAgentHandler.get#95",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.UserAgentHandler",
        "signature": "tornado.test.httpclient_test.UserAgentHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(self.request.headers.get(\"User-Agent\", \"User agent not set\"))",
        "begin_line": 95,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.ContentLength304Handler.get#100",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.ContentLength304Handler",
        "signature": "tornado.test.httpclient_test.ContentLength304Handler.get(self)",
        "snippet": "    def get(self):\n        self.set_status(304)\n        self.set_header(\"Content-Length\", 42)",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.ContentLength304Handler._clear_headers_for_304#104",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.ContentLength304Handler",
        "signature": "tornado.test.httpclient_test.ContentLength304Handler._clear_headers_for_304(self)",
        "snippet": "    def _clear_headers_for_304(self):\n        # Tornado strips content-length from 304 responses, but here we\n        # want to simulate servers that include the headers anyway.\n        pass",
        "begin_line": 104,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.PatchHandler.patch#111",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.PatchHandler",
        "signature": "tornado.test.httpclient_test.PatchHandler.patch(self)",
        "snippet": "    def patch(self):\n        \"Return the request payload - so we can check it is being kept\"\n        self.write(self.request.body)",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.AllMethodsHandler.method#119",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.AllMethodsHandler",
        "signature": "tornado.test.httpclient_test.AllMethodsHandler.method(self)",
        "snippet": "    def method(self):\n        self.write(self.request.method)",
        "begin_line": 119,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SetHeaderHandler.get#126",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SetHeaderHandler",
        "signature": "tornado.test.httpclient_test.SetHeaderHandler.get(self)",
        "snippet": "    def get(self):\n        # Use get_arguments for keys to get strings, but\n        # request.arguments for values to get bytes.\n        for k, v in zip(self.get_arguments(\"k\"), self.request.arguments[\"v\"]):\n            self.set_header(k, v)",
        "begin_line": 126,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.get_app#139",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application(\n            [\n                url(\"/hello\", HelloWorldHandler),\n                url(\"/post\", PostHandler),\n                url(\"/put\", PutHandler),\n                url(\"/redirect\", RedirectHandler),\n                url(\"/chunk\", ChunkHandler),\n                url(\"/auth\", AuthHandler),\n                url(\"/countdown/([0-9]+)\", CountdownHandler, name=\"countdown\"),\n                url(\"/echopost\", EchoPostHandler),\n                url(\"/user_agent\", UserAgentHandler),\n                url(\"/304_with_content_length\", ContentLength304Handler),\n                url(\"/all_methods\", AllMethodsHandler),\n                url(\"/patch\", PatchHandler),\n                url(\"/set_header\", SetHeaderHandler),\n            ],\n            gzip=True,\n        )",
        "begin_line": 139,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_patch_receives_payload#159",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_patch_receives_payload(self)",
        "snippet": "    def test_patch_receives_payload(self):\n        body = b\"some patch data\"\n        response = self.fetch(\"/patch\", method=\"PATCH\", body=body)\n        self.assertEqual(response.code, 200)\n        self.assertEqual(response.body, body)",
        "begin_line": 159,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_hello_world#166",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_hello_world(self)",
        "snippet": "    def test_hello_world(self):\n        response = self.fetch(\"/hello\")\n        self.assertEqual(response.code, 200)\n        self.assertEqual(response.headers[\"Content-Type\"], \"text/plain\")\n        self.assertEqual(response.body, b\"Hello world!\")\n        self.assertEqual(int(response.request_time), 0)\n\n        response = self.fetch(\"/hello?name=Ben\")\n        self.assertEqual(response.body, b\"Hello Ben!\")",
        "begin_line": 166,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_callback#176",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_streaming_callback(self)",
        "snippet": "    def test_streaming_callback(self):\n        # streaming_callback is also tested in test_chunked\n        chunks = []  # type: typing.List[bytes]\n        response = self.fetch(\"/hello\", streaming_callback=chunks.append)\n        # with streaming_callback, data goes to the callback and not response.body\n        self.assertEqual(chunks, [b\"Hello world!\"])\n        self.assertFalse(response.body)",
        "begin_line": 176,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_post#184",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_post(self)",
        "snippet": "    def test_post(self):\n        response = self.fetch(\"/post\", method=\"POST\", body=\"arg1=foo&arg2=bar\")\n        self.assertEqual(response.code, 200)\n        self.assertEqual(response.body, b\"Post arg1: foo, arg2: bar\")",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked#189",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked(self)",
        "snippet": "    def test_chunked(self):\n        response = self.fetch(\"/chunk\")\n        self.assertEqual(response.body, b\"asdfqwer\")\n\n        chunks = []  # type: typing.List[bytes]\n        response = self.fetch(\"/chunk\", streaming_callback=chunks.append)\n        self.assertEqual(chunks, [b\"asdf\", b\"qwer\"])\n        self.assertFalse(response.body)",
        "begin_line": 189,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked_close#198",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_chunked_close(self)",
        "snippet": "    def test_chunked_close(self):\n        # test case in which chunks spread read-callback processing\n        # over several ioloop iterations, but the connection is already closed.\n        sock, port = bind_unused_port()\n        with closing(sock):\n\n            @gen.coroutine\n            def accept_callback(conn, address):\n                # fake an HTTP server using chunked encoding where the final chunks\n                # and connection close all happen at once\n                stream = IOStream(conn)\n                request_data = yield stream.read_until(b\"\\r\\n\\r\\n\")\n                if b\"HTTP/1.\" not in request_data:\n                    self.skipTest(\"requires HTTP/1.x\")\n                yield stream.write(\n                    b\"\"\"\\\nHTTP/1.1 200 OK\nTransfer-Encoding: chunked\n\n1\n1\n1\n2\n0\n\n\"\"\".replace(\n                        b\"\\n\", b\"\\r\\n\"\n                    )\n                )\n                stream.close()\n\n            netutil.add_accept_handler(sock, accept_callback)  # type: ignore\n            resp = self.fetch(\"http://127.0.0.1:%d/\" % port)\n            resp.rethrow()\n            self.assertEqual(resp.body, b\"12\")\n            self.io_loop.remove_handler(sock.fileno())",
        "begin_line": 198,
        "end_line": 233,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.accept_callback#205",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.accept_callback(conn, address)",
        "snippet": "            def accept_callback(conn, address):\n                # fake an HTTP server using chunked encoding where the final chunks\n                # and connection close all happen at once\n                stream = IOStream(conn)\n                request_data = yield stream.read_until(b\"\\r\\n\\r\\n\")\n                if b\"HTTP/1.\" not in request_data:\n                    self.skipTest(\"requires HTTP/1.x\")\n                yield stream.write(\n                    b\"\"\"\\\nHTTP/1.1 200 OK\nTransfer-Encoding: chunked\n\n1\n1\n1\n2\n0\n\n\"\"\".replace(\n                        b\"\\n\", b\"\\r\\n\"\n                    )\n                )\n                stream.close()",
        "begin_line": 205,
        "end_line": 227,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth#235",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth(self)",
        "snippet": "    def test_basic_auth(self):\n        # This test data appears in section 2 of RFC 7617.\n        self.assertEqual(\n            self.fetch(\n                \"/auth\", auth_username=\"Aladdin\", auth_password=\"open sesame\"\n            ).body,\n            b\"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n        )",
        "begin_line": 235,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_explicit_mode#244",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_explicit_mode(self)",
        "snippet": "    def test_basic_auth_explicit_mode(self):\n        self.assertEqual(\n            self.fetch(\n                \"/auth\",\n                auth_username=\"Aladdin\",\n                auth_password=\"open sesame\",\n                auth_mode=\"basic\",\n            ).body,\n            b\"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n        )",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_unicode#255",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_basic_auth_unicode(self)",
        "snippet": "    def test_basic_auth_unicode(self):\n        # This test data appears in section 2.1 of RFC 7617.\n        self.assertEqual(\n            self.fetch(\"/auth\", auth_username=\"test\", auth_password=\"123\u00a3\").body,\n            b\"Basic dGVzdDoxMjPCow==\",\n        )\n\n        # The standard mandates NFC. Give it a decomposed username\n        # and ensure it is normalized to composed form.\n        username = unicodedata.normalize(\"NFD\", u\"jos\u00e9\")\n        self.assertEqual(\n            self.fetch(\"/auth\", auth_username=username, auth_password=\"s\u0259cr\u0259t\").body,\n            b\"Basic am9zw6k6c8mZY3LJmXQ=\",\n        )",
        "begin_line": 255,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_unsupported_auth_mode#270",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_unsupported_auth_mode(self)",
        "snippet": "    def test_unsupported_auth_mode(self):\n        # curl and simple clients handle errors a bit differently; the\n        # important thing is that they don't fall back to basic auth\n        # on an unknown mode.\n        with ExpectLog(gen_log, \"uncaught exception\", required=False):\n            with self.assertRaises((ValueError, HTTPError)):\n                self.fetch(\n                    \"/auth\",\n                    auth_username=\"Aladdin\",\n                    auth_password=\"open sesame\",\n                    auth_mode=\"asdf\",\n                    raise_error=True,\n                )",
        "begin_line": 270,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_follow_redirect#284",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_follow_redirect(self)",
        "snippet": "    def test_follow_redirect(self):\n        response = self.fetch(\"/countdown/2\", follow_redirects=False)\n        self.assertEqual(302, response.code)\n        self.assertTrue(response.headers[\"Location\"].endswith(\"/countdown/1\"))\n\n        response = self.fetch(\"/countdown/2\")\n        self.assertEqual(200, response.code)\n        self.assertTrue(response.effective_url.endswith(\"/countdown/0\"))\n        self.assertEqual(b\"Zero\", response.body)",
        "begin_line": 284,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_credentials_in_url#294",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_credentials_in_url(self)",
        "snippet": "    def test_credentials_in_url(self):\n        url = self.get_url(\"/auth\").replace(\"http://\", \"http://me:secret@\")\n        response = self.fetch(url)\n        self.assertEqual(b\"Basic \" + base64.b64encode(b\"me:secret\"), response.body)",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_encoding#299",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_encoding(self)",
        "snippet": "    def test_body_encoding(self):\n        unicode_body = u\"\\xe9\"\n        byte_body = binascii.a2b_hex(b\"e9\")\n\n        # unicode string in body gets converted to utf8\n        response = self.fetch(\n            \"/echopost\",\n            method=\"POST\",\n            body=unicode_body,\n            headers={\"Content-Type\": \"application/blah\"},\n        )\n        self.assertEqual(response.headers[\"Content-Length\"], \"2\")\n        self.assertEqual(response.body, utf8(unicode_body))\n\n        # byte strings pass through directly\n        response = self.fetch(\n            \"/echopost\",\n            method=\"POST\",\n            body=byte_body,\n            headers={\"Content-Type\": \"application/blah\"},\n        )\n        self.assertEqual(response.headers[\"Content-Length\"], \"1\")\n        self.assertEqual(response.body, byte_body)\n\n        # Mixing unicode in headers and byte string bodies shouldn't\n        # break anything\n        response = self.fetch(\n            \"/echopost\",\n            method=\"POST\",\n            body=byte_body,\n            headers={\"Content-Type\": \"application/blah\"},\n            user_agent=u\"foo\",\n        )\n        self.assertEqual(response.headers[\"Content-Length\"], \"1\")\n        self.assertEqual(response.body, byte_body)",
        "begin_line": 299,
        "end_line": 333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_types#335",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_types(self)",
        "snippet": "    def test_types(self):\n        response = self.fetch(\"/hello\")\n        self.assertEqual(type(response.body), bytes)\n        self.assertEqual(type(response.headers[\"Content-Type\"]), str)\n        self.assertEqual(type(response.code), int)\n        self.assertEqual(type(response.effective_url), str)",
        "begin_line": 335,
        "end_line": 340,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_callback#342",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_callback(self)",
        "snippet": "    def test_header_callback(self):\n        first_line = []\n        headers = {}\n        chunks = []\n\n        def header_callback(header_line):\n            if header_line.startswith(\"HTTP/1.1 101\"):\n                # Upgrading to HTTP/2\n                pass\n            elif header_line.startswith(\"HTTP/\"):\n                first_line.append(header_line)\n            elif header_line != \"\\r\\n\":\n                k, v = header_line.split(\":\", 1)\n                headers[k.lower()] = v.strip()\n\n        def streaming_callback(chunk):\n            # All header callbacks are run before any streaming callbacks,\n            # so the header data is available to process the data as it\n            # comes in.\n            self.assertEqual(headers[\"content-type\"], \"text/html; charset=UTF-8\")\n            chunks.append(chunk)\n\n        self.fetch(\n            \"/chunk\",\n            header_callback=header_callback,\n            streaming_callback=streaming_callback,\n        )\n        self.assertEqual(len(first_line), 1, first_line)\n        self.assertRegexpMatches(first_line[0], \"HTTP/[0-9]\\\\.[0-9] 200.*\\r\\n\")\n        self.assertEqual(chunks, [b\"asdf\", b\"qwer\"])",
        "begin_line": 342,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.header_callback#347",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.header_callback(header_line)",
        "snippet": "        def header_callback(header_line):\n            if header_line.startswith(\"HTTP/1.1 101\"):\n                # Upgrading to HTTP/2\n                pass\n            elif header_line.startswith(\"HTTP/\"):\n                first_line.append(header_line)\n            elif header_line != \"\\r\\n\":\n                k, v = header_line.split(\":\", 1)\n                headers[k.lower()] = v.strip()",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.streaming_callback#357",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.streaming_callback(chunk)",
        "snippet": "        def streaming_callback(chunk):\n            # All header callbacks are run before any streaming callbacks,\n            # so the header data is available to process the data as it\n            # comes in.\n            self.assertEqual(headers[\"content-type\"], \"text/html; charset=UTF-8\")\n            chunks.append(chunk)",
        "begin_line": 357,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_configure_defaults#374",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_configure_defaults(self)",
        "snippet": "    def test_configure_defaults(self):\n        defaults = dict(user_agent=\"TestDefaultUserAgent\", allow_ipv6=False)\n        # Construct a new instance of the configured client class\n        client = self.http_client.__class__(force_instance=True, defaults=defaults)\n        try:\n            response = yield client.fetch(self.get_url(\"/user_agent\"))\n            self.assertEqual(response.body, b\"TestDefaultUserAgent\")\n        finally:\n            client.close()",
        "begin_line": 374,
        "end_line": 382,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_types#384",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_header_types(self)",
        "snippet": "    def test_header_types(self):\n        # Header values may be passed as character or utf8 byte strings,\n        # in a plain dictionary or an HTTPHeaders object.\n        # Keys must always be the native str type.\n        # All combinations should have the same results on the wire.\n        for value in [u\"MyUserAgent\", b\"MyUserAgent\"]:\n            for container in [dict, HTTPHeaders]:\n                headers = container()\n                headers[\"User-Agent\"] = value\n                resp = self.fetch(\"/user_agent\", headers=headers)\n                self.assertEqual(\n                    resp.body,\n                    b\"MyUserAgent\",\n                    \"response=%r, value=%r, container=%r\"\n                    % (resp.body, value, container),\n                )",
        "begin_line": 384,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_multi_line_headers#401",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_multi_line_headers(self)",
        "snippet": "    def test_multi_line_headers(self):\n        # Multi-line http headers are rare but rfc-allowed\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n        sock, port = bind_unused_port()\n        with closing(sock):\n\n            @gen.coroutine\n            def accept_callback(conn, address):\n                stream = IOStream(conn)\n                request_data = yield stream.read_until(b\"\\r\\n\\r\\n\")\n                if b\"HTTP/1.\" not in request_data:\n                    self.skipTest(\"requires HTTP/1.x\")\n                yield stream.write(\n                    b\"\"\"\\\nHTTP/1.1 200 OK\nX-XSS-Protection: 1;\n\\tmode=block\n\n\"\"\".replace(\n                        b\"\\n\", b\"\\r\\n\"\n                    )\n                )\n                stream.close()\n\n            netutil.add_accept_handler(sock, accept_callback)  # type: ignore\n            resp = self.fetch(\"http://127.0.0.1:%d/\" % port)\n            resp.rethrow()\n            self.assertEqual(resp.headers[\"X-XSS-Protection\"], \"1; mode=block\")\n            self.io_loop.remove_handler(sock.fileno())",
        "begin_line": 401,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.accept_callback#408",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.accept_callback(conn, address)",
        "snippet": "            def accept_callback(conn, address):\n                stream = IOStream(conn)\n                request_data = yield stream.read_until(b\"\\r\\n\\r\\n\")\n                if b\"HTTP/1.\" not in request_data:\n                    self.skipTest(\"requires HTTP/1.x\")\n                yield stream.write(\n                    b\"\"\"\\\nHTTP/1.1 200 OK\nX-XSS-Protection: 1;\n\\tmode=block\n\n\"\"\".replace(\n                        b\"\\n\", b\"\\r\\n\"\n                    )\n                )\n                stream.close()",
        "begin_line": 408,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_304_with_content_length#431",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_304_with_content_length(self)",
        "snippet": "    def test_304_with_content_length(self):\n        # According to the spec 304 responses SHOULD NOT include\n        # Content-Length or other entity headers, but some servers do it\n        # anyway.\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5\n        response = self.fetch(\"/304_with_content_length\")\n        self.assertEqual(response.code, 304)\n        self.assertEqual(response.headers[\"Content-Length\"], \"42\")",
        "begin_line": 431,
        "end_line": 438,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_interface#441",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_interface(self)",
        "snippet": "    def test_future_interface(self):\n        response = yield self.http_client.fetch(self.get_url(\"/hello\"))\n        self.assertEqual(response.body, b\"Hello world!\")",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error#446",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error(self)",
        "snippet": "    def test_future_http_error(self):\n        with self.assertRaises(HTTPError) as context:\n            yield self.http_client.fetch(self.get_url(\"/notfound\"))\n        self.assertEqual(context.exception.code, 404)\n        self.assertEqual(context.exception.response.code, 404)",
        "begin_line": 446,
        "end_line": 450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error_no_raise#453",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_future_http_error_no_raise(self)",
        "snippet": "    def test_future_http_error_no_raise(self):\n        response = yield self.http_client.fetch(\n            self.get_url(\"/notfound\"), raise_error=False\n        )\n        self.assertEqual(response.code, 404)",
        "begin_line": 453,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_reuse_request_from_response#460",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_reuse_request_from_response(self)",
        "snippet": "    def test_reuse_request_from_response(self):\n        # The response.request attribute should be an HTTPRequest, not\n        # a _RequestProxy.\n        # This test uses self.http_client.fetch because self.fetch calls\n        # self.get_url on the input unconditionally.\n        url = self.get_url(\"/hello\")\n        response = yield self.http_client.fetch(url)\n        self.assertEqual(response.request.url, url)\n        self.assertTrue(isinstance(response.request, HTTPRequest))\n        response2 = yield self.http_client.fetch(response.request)\n        self.assertEqual(response2.body, b\"Hello world!\")",
        "begin_line": 460,
        "end_line": 470,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_bind_source_ip#473",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_bind_source_ip(self)",
        "snippet": "    def test_bind_source_ip(self):\n        url = self.get_url(\"/hello\")\n        request = HTTPRequest(url, network_interface=\"127.0.0.1\")\n        response = yield self.http_client.fetch(request)\n        self.assertEqual(response.code, 200)\n\n        with self.assertRaises((ValueError, HTTPError)) as context:\n            request = HTTPRequest(url, network_interface=\"not-interface-or-ip\")\n            yield self.http_client.fetch(request)\n        self.assertIn(\"not-interface-or-ip\", str(context.exception))",
        "begin_line": 473,
        "end_line": 482,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_all_methods#484",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_all_methods(self)",
        "snippet": "    def test_all_methods(self):\n        for method in [\"GET\", \"DELETE\", \"OPTIONS\"]:\n            response = self.fetch(\"/all_methods\", method=method)\n            self.assertEqual(response.body, utf8(method))\n        for method in [\"POST\", \"PUT\", \"PATCH\"]:\n            response = self.fetch(\"/all_methods\", method=method, body=b\"\")\n            self.assertEqual(response.body, utf8(method))\n        response = self.fetch(\"/all_methods\", method=\"HEAD\")\n        self.assertEqual(response.body, b\"\")\n        response = self.fetch(\n            \"/all_methods\", method=\"OTHER\", allow_nonstandard_methods=True\n        )\n        self.assertEqual(response.body, b\"OTHER\")",
        "begin_line": 484,
        "end_line": 496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_sanity_checks#498",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_body_sanity_checks(self)",
        "snippet": "    def test_body_sanity_checks(self):\n        # These methods require a body.\n        for method in (\"POST\", \"PUT\", \"PATCH\"):\n            with self.assertRaises(ValueError) as context:\n                self.fetch(\"/all_methods\", method=method, raise_error=True)\n            self.assertIn(\"must not be None\", str(context.exception))\n\n            resp = self.fetch(\n                \"/all_methods\", method=method, allow_nonstandard_methods=True\n            )\n            self.assertEqual(resp.code, 200)\n\n        # These methods don't allow a body.\n        for method in (\"GET\", \"DELETE\", \"OPTIONS\"):\n            with self.assertRaises(ValueError) as context:\n                self.fetch(\n                    \"/all_methods\", method=method, body=b\"asdf\", raise_error=True\n                )\n            self.assertIn(\"must be None\", str(context.exception))\n\n            # In most cases this can be overridden, but curl_httpclient\n            # does not allow body with a GET at all.\n            if method != \"GET\":\n                self.fetch(\n                    \"/all_methods\",\n                    method=method,\n                    body=b\"asdf\",\n                    allow_nonstandard_methods=True,\n                    raise_error=True,\n                )\n                self.assertEqual(resp.code, 200)",
        "begin_line": 498,
        "end_line": 528,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_put_307#546",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_put_307(self)",
        "snippet": "    def test_put_307(self):\n        response = self.fetch(\n            \"/redirect?status=307&url=/put\", method=\"PUT\", body=b\"hello\"\n        )\n        response.rethrow()\n        self.assertEqual(response.body, b\"Put body: hello\")",
        "begin_line": 546,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_non_ascii_header#553",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_non_ascii_header(self)",
        "snippet": "    def test_non_ascii_header(self):\n        # Non-ascii headers are sent as latin1.\n        response = self.fetch(\"/set_header?k=foo&v=%E9\")\n        response.rethrow()\n        self.assertEqual(response.headers[\"Foo\"], native_str(u\"\\u00e9\"))",
        "begin_line": 553,
        "end_line": 557,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_response_times#559",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPClientCommonTestCase",
        "signature": "tornado.test.httpclient_test.HTTPClientCommonTestCase.test_response_times(self)",
        "snippet": "    def test_response_times(self):\n        # A few simple sanity checks of the response time fields to\n        # make sure they're using the right basis (between the\n        # wall-time and monotonic clocks).\n        start_time = time.time()\n        response = self.fetch(\"/hello\")\n        response.rethrow()\n        self.assertGreaterEqual(response.request_time, 0)\n        self.assertLess(response.request_time, 1.0)\n        # A very crude check to make sure that start_time is based on\n        # wall time and not the monotonic clock.\n        self.assertLess(abs(response.start_time - start_time), 1.0)\n\n        for k, v in response.time_info.items():\n            self.assertTrue(0 <= v < 1.0, \"time_info[%s] out of bounds: %s\" % (k, v))",
        "begin_line": 559,
        "end_line": 573,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_request_set#577",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_request_set(self)",
        "snippet": "    def test_request_set(self):\n        proxy = _RequestProxy(\n            HTTPRequest(\"http://example.com/\", user_agent=\"foo\"), dict()\n        )\n        self.assertEqual(proxy.user_agent, \"foo\")",
        "begin_line": 577,
        "end_line": 581,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_default_set#583",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_default_set(self)",
        "snippet": "    def test_default_set(self):\n        proxy = _RequestProxy(\n            HTTPRequest(\"http://example.com/\"), dict(network_interface=\"foo\")\n        )\n        self.assertEqual(proxy.network_interface, \"foo\")",
        "begin_line": 583,
        "end_line": 587,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_both_set#589",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_both_set(self)",
        "snippet": "    def test_both_set(self):\n        proxy = _RequestProxy(\n            HTTPRequest(\"http://example.com/\", proxy_host=\"foo\"), dict(proxy_host=\"bar\")\n        )\n        self.assertEqual(proxy.proxy_host, \"foo\")",
        "begin_line": 589,
        "end_line": 593,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_neither_set#595",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_neither_set(self)",
        "snippet": "    def test_neither_set(self):\n        proxy = _RequestProxy(HTTPRequest(\"http://example.com/\"), dict())\n        self.assertIs(proxy.auth_username, None)",
        "begin_line": 595,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_bad_attribute#599",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_bad_attribute(self)",
        "snippet": "    def test_bad_attribute(self):\n        proxy = _RequestProxy(HTTPRequest(\"http://example.com/\"), dict())\n        with self.assertRaises(AttributeError):\n            proxy.foo",
        "begin_line": 599,
        "end_line": 602,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.RequestProxyTest.test_defaults_none#604",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.RequestProxyTest",
        "signature": "tornado.test.httpclient_test.RequestProxyTest.test_defaults_none(self)",
        "snippet": "    def test_defaults_none(self):\n        proxy = _RequestProxy(HTTPRequest(\"http://example.com/\"), None)\n        self.assertIs(proxy.auth_username, None)",
        "begin_line": 604,
        "end_line": 606,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPResponseTestCase.test_str#610",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPResponseTestCase",
        "signature": "tornado.test.httpclient_test.HTTPResponseTestCase.test_str(self)",
        "snippet": "    def test_str(self):\n        response = HTTPResponse(  # type: ignore\n            HTTPRequest(\"http://example.com\"), 200, headers={}, buffer=BytesIO()\n        )\n        s = str(response)\n        self.assertTrue(s.startswith(\"HTTPResponse(\"))\n        self.assertIn(\"code=200\", s)",
        "begin_line": 610,
        "end_line": 616,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.setUp#620",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.server_ioloop = IOLoop()\n        event = threading.Event()\n\n        @gen.coroutine\n        def init_server():\n            sock, self.port = bind_unused_port()\n            app = Application([(\"/\", HelloWorldHandler)])\n            self.server = HTTPServer(app)\n            self.server.add_socket(sock)\n            event.set()\n\n        def start():\n            self.server_ioloop.run_sync(init_server)\n            self.server_ioloop.start()\n\n        self.server_thread = threading.Thread(target=start)\n        self.server_thread.start()\n        event.wait()\n\n        self.http_client = HTTPClient()",
        "begin_line": 620,
        "end_line": 640,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.init_server#625",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.init_server()",
        "snippet": "        def init_server():\n            sock, self.port = bind_unused_port()\n            app = Application([(\"/\", HelloWorldHandler)])\n            self.server = HTTPServer(app)\n            self.server.add_socket(sock)\n            event.set()",
        "begin_line": 625,
        "end_line": 630,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.start#632",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.start()",
        "snippet": "        def start():\n            self.server_ioloop.run_sync(init_server)\n            self.server_ioloop.start()",
        "begin_line": 632,
        "end_line": 634,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.tearDown#642",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        def stop_server():\n            self.server.stop()\n            # Delay the shutdown of the IOLoop by several iterations because\n            # the server may still have some cleanup work left when\n            # the client finishes with the response (this is noticeable\n            # with http/2, which leaves a Future with an unexamined\n            # StreamClosedError on the loop).\n\n            @gen.coroutine\n            def slow_stop():\n                # The number of iterations is difficult to predict. Typically,\n                # one is sufficient, although sometimes it needs more.\n                for i in range(5):\n                    yield\n                self.server_ioloop.stop()\n\n            self.server_ioloop.add_callback(slow_stop)\n\n        self.server_ioloop.add_callback(stop_server)\n        self.server_thread.join()\n        self.http_client.close()\n        self.server_ioloop.close(all_fds=True)",
        "begin_line": 642,
        "end_line": 664,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.stop_server#643",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.stop_server()",
        "snippet": "        def stop_server():\n            self.server.stop()\n            # Delay the shutdown of the IOLoop by several iterations because\n            # the server may still have some cleanup work left when\n            # the client finishes with the response (this is noticeable\n            # with http/2, which leaves a Future with an unexamined\n            # StreamClosedError on the loop).\n\n            @gen.coroutine\n            def slow_stop():\n                # The number of iterations is difficult to predict. Typically,\n                # one is sufficient, although sometimes it needs more.\n                for i in range(5):\n                    yield\n                self.server_ioloop.stop()\n\n            self.server_ioloop.add_callback(slow_stop)",
        "begin_line": 643,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.slow_stop#652",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.slow_stop()",
        "snippet": "            def slow_stop():\n                # The number of iterations is difficult to predict. Typically,\n                # one is sufficient, although sometimes it needs more.\n                for i in range(5):\n                    yield\n                self.server_ioloop.stop()",
        "begin_line": 652,
        "end_line": 657,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.get_url#666",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.get_url(self, path)",
        "snippet": "    def get_url(self, path):\n        return \"http://127.0.0.1:%d%s\" % (self.port, path)",
        "begin_line": 666,
        "end_line": 667,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client#669",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client(self)",
        "snippet": "    def test_sync_client(self):\n        response = self.http_client.fetch(self.get_url(\"/\"))\n        self.assertEqual(b\"Hello world!\", response.body)",
        "begin_line": 669,
        "end_line": 671,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client_error#673",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientTest.test_sync_client_error(self)",
        "snippet": "    def test_sync_client_error(self):\n        # Synchronous HTTPClient raises errors directly; no need for\n        # response.rethrow()\n        with self.assertRaises(HTTPError) as assertion:\n            self.http_client.fetch(self.get_url(\"/notfound\"))\n        self.assertEqual(assertion.exception.code, 404)",
        "begin_line": 673,
        "end_line": 678,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.SyncHTTPClientSubprocessTest.test_destructor_log#682",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.SyncHTTPClientSubprocessTest",
        "signature": "tornado.test.httpclient_test.SyncHTTPClientSubprocessTest.test_destructor_log(self)",
        "snippet": "    def test_destructor_log(self):\n        # Regression test for\n        # https://github.com/tornadoweb/tornado/issues/2539\n        #\n        # In the past, the following program would log an\n        # \"inconsistent AsyncHTTPClient cache\" error from a destructor\n        # when the process is shutting down. The shutdown process is\n        # subtle and I don't fully understand it; the failure does not\n        # manifest if that lambda isn't there or is a simpler object\n        # like an int (nor does it manifest in the tornado test suite\n        # as a whole, which is why we use this subprocess).\n        proc = subprocess.run(\n            [\n                sys.executable,\n                \"-c\",\n                \"from tornado.httpclient import HTTPClient; f = lambda: None; c = HTTPClient()\",\n            ],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            check=True,\n        )\n        if proc.stdout:\n            print(\"STDOUT:\")\n            print(to_unicode(proc.stdout))\n        if proc.stdout:\n            self.fail(\"subprocess produced unexpected output\")",
        "begin_line": 682,
        "end_line": 707,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_headers#711",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_headers(self)",
        "snippet": "    def test_headers(self):\n        request = HTTPRequest(\"http://example.com\", headers={\"foo\": \"bar\"})\n        self.assertEqual(request.headers, {\"foo\": \"bar\"})",
        "begin_line": 711,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_headers_setter#715",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_headers_setter(self)",
        "snippet": "    def test_headers_setter(self):\n        request = HTTPRequest(\"http://example.com\")\n        request.headers = {\"bar\": \"baz\"}  # type: ignore\n        self.assertEqual(request.headers, {\"bar\": \"baz\"})",
        "begin_line": 715,
        "end_line": 718,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_null_headers_setter#720",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_null_headers_setter(self)",
        "snippet": "    def test_null_headers_setter(self):\n        request = HTTPRequest(\"http://example.com\")\n        request.headers = None  # type: ignore\n        self.assertEqual(request.headers, {})",
        "begin_line": 720,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_body#725",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_body(self)",
        "snippet": "    def test_body(self):\n        request = HTTPRequest(\"http://example.com\", body=\"foo\")\n        self.assertEqual(request.body, utf8(\"foo\"))",
        "begin_line": 725,
        "end_line": 727,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_body_setter#729",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_body_setter(self)",
        "snippet": "    def test_body_setter(self):\n        request = HTTPRequest(\"http://example.com\")\n        request.body = \"foo\"  # type: ignore\n        self.assertEqual(request.body, utf8(\"foo\"))",
        "begin_line": 729,
        "end_line": 732,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPRequestTestCase.test_if_modified_since#734",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPRequestTestCase",
        "signature": "tornado.test.httpclient_test.HTTPRequestTestCase.test_if_modified_since(self)",
        "snippet": "    def test_if_modified_since(self):\n        http_date = datetime.datetime.utcnow()\n        request = HTTPRequest(\"http://example.com\", if_modified_since=http_date)\n        self.assertEqual(\n            request.headers, {\"If-Modified-Since\": format_timestamp(http_date)}\n        )",
        "begin_line": 734,
        "end_line": 739,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPErrorTestCase.test_copy#743",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPErrorTestCase",
        "signature": "tornado.test.httpclient_test.HTTPErrorTestCase.test_copy(self)",
        "snippet": "    def test_copy(self):\n        e = HTTPError(403)\n        e2 = copy.copy(e)\n        self.assertIsNot(e, e2)\n        self.assertEqual(e.code, e2.code)",
        "begin_line": 743,
        "end_line": 747,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPErrorTestCase.test_plain_error#749",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPErrorTestCase",
        "signature": "tornado.test.httpclient_test.HTTPErrorTestCase.test_plain_error(self)",
        "snippet": "    def test_plain_error(self):\n        e = HTTPError(403)\n        self.assertEqual(str(e), \"HTTP 403: Forbidden\")\n        self.assertEqual(repr(e), \"HTTP 403: Forbidden\")",
        "begin_line": 749,
        "end_line": 752,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpclient_test.HTTPErrorTestCase.test_error_with_response#754",
        "src_path": "tornado/test/httpclient_test.py",
        "class_name": "tornado.test.httpclient_test.HTTPErrorTestCase",
        "signature": "tornado.test.httpclient_test.HTTPErrorTestCase.test_error_with_response(self)",
        "snippet": "    def test_error_with_response(self):\n        resp = HTTPResponse(HTTPRequest(\"http://example.com/\"), 403)\n        with self.assertRaises(HTTPError) as cm:\n            resp.rethrow()\n        e = cm.exception\n        self.assertEqual(str(e), \"HTTP 403: Forbidden\")\n        self.assertEqual(repr(e), \"HTTP 403: Forbidden\")",
        "begin_line": 754,
        "end_line": 760,
        "comment": "",
        "is_bug": false
    }
]