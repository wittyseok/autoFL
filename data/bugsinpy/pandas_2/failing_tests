coverage run -m pytest pandas/tests/indexing/test_scalar.py::test_at_with_tuple_index_get
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_scalar.py F                                   [100%]

=================================== FAILURES ===================================
_________________________ test_at_with_tuple_index_get _________________________

    def test_at_with_tuple_index_get():
        # GH 26989
        # DataFrame.at getter works with Index of tuples
        df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
        assert df.index.nlevels == 1
        assert df.at[(1, 2), "a"] == 1
    
        # Series.at getter works with Index of tuples
        series = df["a"]
        assert series.index.nlevels == 1
>       assert series.at[(1, 2)] == 1

pandas/tests/indexing/test_scalar.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:2055: in __getitem__
    return super().__getitem__(key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._AtIndexer object at 0x7f13238695e0>, key = (1, 2)

    def __getitem__(self, key):
        if not isinstance(key, tuple):
    
            # we could have a convertible item here (e.g. Timestamp)
            if not is_list_like_indexer(key):
                key = tuple([key])
            else:
                raise ValueError("Invalid call for scalar access (getting)!")
    
        key = self._convert_key(key)
>       return self.obj._get_value(*key, takeable=self._takeable)
E       TypeError: _get_value() got multiple values for argument 'takeable'

pandas/core/indexing.py:2008: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_scalar.py::test_at_with_tuple_index_get - T...
============================== 1 failed in 0.21s ===============================

coverage run -m pytest pandas/tests/indexing/test_scalar.py::test_at_with_tuple_index_set
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_scalar.py F                                   [100%]

=================================== FAILURES ===================================
_________________________ test_at_with_tuple_index_set _________________________

    def test_at_with_tuple_index_set():
        # GH 26989
        # DataFrame.at setter works with Index of tuples
        df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
        assert df.index.nlevels == 1
        df.at[(1, 2), "a"] = 2
        assert df.at[(1, 2), "a"] == 2
    
        # Series.at setter works with Index of tuples
        series = df["a"]
        assert series.index.nlevels == 1
>       series.at[1, 2] = 3

pandas/tests/indexing/test_scalar.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:2066: in __setitem__
    return super().__setitem__(key, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._AtIndexer object at 0x7f0c2a27b450>, key = (1, 2)
value = 3

    def __setitem__(self, key, value):
        if isinstance(key, tuple):
            key = tuple(com.apply_if_callable(x, self.obj) for x in key)
        else:
            # scalar callable may return tuple
            key = com.apply_if_callable(key, self.obj)
    
        if not isinstance(key, tuple):
            key = _tuplify(self.ndim, key)
        if len(key) != self.ndim:
>           raise ValueError("Not enough indexers for scalar access (setting)!")
E           ValueError: Not enough indexers for scalar access (setting)!

pandas/core/indexing.py:2020: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_scalar.py::test_at_with_tuple_index_set - V...
============================== 1 failed in 0.21s ===============================

coverage run -m pytest pandas/tests/indexing/test_scalar.py::test_multiindex_at_get
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_scalar.py F                                   [100%]

=================================== FAILURES ===================================
____________________________ test_multiindex_at_get ____________________________

    def test_multiindex_at_get():
        # GH 26989
        # DataFrame.at and DataFrame.loc getter works with MultiIndex
        df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
        assert df.index.nlevels == 2
        assert df.at[(1, 3), "a"] == 1
        assert df.loc[(1, 3), "a"] == 1
    
        # Series.at and Series.loc getter works with MultiIndex
        series = df["a"]
        assert series.index.nlevels == 2
>       assert series.at[1, 3] == 1

pandas/tests/indexing/test_scalar.py:395: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:2055: in __getitem__
    return super().__getitem__(key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._AtIndexer object at 0x7ff42da77860>, key = (1, 3)

    def __getitem__(self, key):
        if not isinstance(key, tuple):
    
            # we could have a convertible item here (e.g. Timestamp)
            if not is_list_like_indexer(key):
                key = tuple([key])
            else:
                raise ValueError("Invalid call for scalar access (getting)!")
    
        key = self._convert_key(key)
>       return self.obj._get_value(*key, takeable=self._takeable)
E       TypeError: _get_value() got multiple values for argument 'takeable'

pandas/core/indexing.py:2008: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_scalar.py::test_multiindex_at_get - TypeErr...
============================== 1 failed in 0.21s ===============================

coverage run -m pytest pandas/tests/indexing/test_scalar.py::test_multiindex_at_set
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_scalar.py F                                   [100%]

=================================== FAILURES ===================================
____________________________ test_multiindex_at_set ____________________________

    def test_multiindex_at_set():
        # GH 26989
        # DataFrame.at and DataFrame.loc setter works with MultiIndex
        df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
        assert df.index.nlevels == 2
        df.at[(1, 3), "a"] = 3
        assert df.at[(1, 3), "a"] == 3
        df.loc[(1, 3), "a"] = 4
        assert df.loc[(1, 3), "a"] == 4
    
        # Series.at and Series.loc setter works with MultiIndex
        series = df["a"]
        assert series.index.nlevels == 2
>       series.at[1, 3] = 5

pandas/tests/indexing/test_scalar.py:412: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:2066: in __setitem__
    return super().__setitem__(key, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pandas.core.indexing._AtIndexer object at 0x7f0c8d2eb2c0>, key = (1, 3)
value = 5

    def __setitem__(self, key, value):
        if isinstance(key, tuple):
            key = tuple(com.apply_if_callable(x, self.obj) for x in key)
        else:
            # scalar callable may return tuple
            key = com.apply_if_callable(key, self.obj)
    
        if not isinstance(key, tuple):
            key = _tuplify(self.ndim, key)
        if len(key) != self.ndim:
>           raise ValueError("Not enough indexers for scalar access (setting)!")
E           ValueError: Not enough indexers for scalar access (setting)!

pandas/core/indexing.py:2020: ValueError
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_scalar.py::test_multiindex_at_set - ValueEr...
============================== 1 failed in 0.22s ===============================
