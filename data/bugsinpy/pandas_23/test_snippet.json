[
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union2#36",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union2(self, sort)",
        "snippet": "    def test_union2(self, sort):\n        everything = tm.makeDateIndex(10)\n        first = everything[:5]\n        second = everything[5:]\n        union = first.union(second, sort=sort)\n        tm.assert_index_equal(union, everything)",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union3#44",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union3(self, sort, box)",
        "snippet": "    def test_union3(self, sort, box):\n        everything = tm.makeDateIndex(10)\n        first = everything[:5]\n        second = everything[5:]\n\n        # GH 10149\n        expected = (\n            first.astype(\"O\").union(pd.Index(second.values, dtype=\"O\")).astype(\"O\")\n        )\n        case = box(second.values)\n        result = first.union(case, sort=sort)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 44,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union#58",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union(self, tz, sort)",
        "snippet": "    def test_union(self, tz, sort):\n        rng1 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=5, tz=tz)\n        other1 = pd.date_range(\"1/6/2000\", freq=\"D\", periods=5, tz=tz)\n        expected1 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=10, tz=tz)\n        expected1_notsorted = pd.DatetimeIndex(list(other1) + list(rng1))\n\n        rng2 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=5, tz=tz)\n        other2 = pd.date_range(\"1/4/2000\", freq=\"D\", periods=5, tz=tz)\n        expected2 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=8, tz=tz)\n        expected2_notsorted = pd.DatetimeIndex(list(other2) + list(rng2[:3]))\n\n        rng3 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=5, tz=tz)\n        other3 = pd.DatetimeIndex([], tz=tz)\n        expected3 = pd.date_range(\"1/1/2000\", freq=\"D\", periods=5, tz=tz)\n        expected3_notsorted = rng3\n\n        for rng, other, exp, exp_notsorted in [\n            (rng1, other1, expected1, expected1_notsorted),\n            (rng2, other2, expected2, expected2_notsorted),\n            (rng3, other3, expected3, expected3_notsorted),\n        ]:\n\n            result_union = rng.union(other, sort=sort)\n            tm.assert_index_equal(result_union, exp)\n\n            result_union = other.union(rng, sort=sort)\n            if sort is None:\n                tm.assert_index_equal(result_union, exp)\n            else:\n                tm.assert_index_equal(result_union, exp_notsorted)",
        "begin_line": 58,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_coverage#89",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_coverage(self, sort)",
        "snippet": "    def test_union_coverage(self, sort):\n        idx = DatetimeIndex([\"2000-01-03\", \"2000-01-01\", \"2000-01-02\"])\n        ordered = DatetimeIndex(idx.sort_values(), freq=\"infer\")\n        result = ordered.union(idx, sort=sort)\n        tm.assert_index_equal(result, ordered)\n\n        result = ordered[:0].union(ordered, sort=sort)\n        tm.assert_index_equal(result, ordered)\n        assert result.freq == ordered.freq",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1730#99",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1730(self, sort)",
        "snippet": "    def test_union_bug_1730(self, sort):\n        rng_a = date_range(\"1/1/2012\", periods=4, freq=\"3H\")\n        rng_b = date_range(\"1/1/2012\", periods=4, freq=\"4H\")\n\n        result = rng_a.union(rng_b, sort=sort)\n        exp = list(rng_a) + list(rng_b[1:])\n        if sort is None:\n            exp = DatetimeIndex(sorted(exp))\n        else:\n            exp = DatetimeIndex(exp)\n        tm.assert_index_equal(result, exp)",
        "begin_line": 99,
        "end_line": 109,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1745#111",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_1745(self, sort)",
        "snippet": "    def test_union_bug_1745(self, sort):\n        left = DatetimeIndex([\"2012-05-11 15:19:49.695000\"])\n        right = DatetimeIndex(\n            [\n                \"2012-05-29 13:04:21.322000\",\n                \"2012-05-11 15:27:24.873000\",\n                \"2012-05-11 15:31:05.350000\",\n            ]\n        )\n\n        result = left.union(right, sort=sort)\n        exp = DatetimeIndex(\n            [\n                \"2012-05-11 15:19:49.695000\",\n                \"2012-05-29 13:04:21.322000\",\n                \"2012-05-11 15:27:24.873000\",\n                \"2012-05-11 15:31:05.350000\",\n            ]\n        )\n        if sort is None:\n            exp = exp.sort_values()\n        tm.assert_index_equal(result, exp)",
        "begin_line": 111,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_4564#134",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_bug_4564(self, sort)",
        "snippet": "    def test_union_bug_4564(self, sort):\n        from pandas import DateOffset\n\n        left = date_range(\"2013-01-01\", \"2013-02-01\")\n        right = left + DateOffset(minutes=15)\n\n        result = left.union(right, sort=sort)\n        exp = list(left) + list(right)\n        if sort is None:\n            exp = DatetimeIndex(sorted(exp))\n        else:\n            exp = DatetimeIndex(exp)\n        tm.assert_index_equal(result, exp)",
        "begin_line": 134,
        "end_line": 146,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_both_none#148",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_both_none(self, sort)",
        "snippet": "    def test_union_freq_both_none(self, sort):\n        # GH11086\n        expected = bdate_range(\"20150101\", periods=10)\n        expected._data.freq = None\n\n        result = expected.union(expected, sort=sort)\n        tm.assert_index_equal(result, expected)\n        assert result.freq is None",
        "begin_line": 148,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_infer#157",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_freq_infer(self)",
        "snippet": "    def test_union_freq_infer(self):\n        # When taking the union of two DatetimeIndexes, we infer\n        #  a freq even if the arguments don't have freq.  This matches\n        #  TimedeltaIndex behavior.\n        dti = pd.date_range(\"2016-01-01\", periods=5)\n        left = dti[[0, 1, 3, 4]]\n        right = dti[[2, 3, 1]]\n\n        assert left.freq is None\n        assert right.freq is None\n\n        result = left.union(right)\n        tm.assert_index_equal(result, dti)\n        assert result.freq == \"D\"",
        "begin_line": 157,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_dataframe_index#172",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_dataframe_index(self)",
        "snippet": "    def test_union_dataframe_index(self):\n        rng1 = date_range(\"1/1/1999\", \"1/1/2012\", freq=\"MS\")\n        s1 = Series(np.random.randn(len(rng1)), rng1)\n\n        rng2 = date_range(\"1/1/1980\", \"12/1/2001\", freq=\"MS\")\n        s2 = Series(np.random.randn(len(rng2)), rng2)\n        df = DataFrame({\"s1\": s1, \"s2\": s2})\n\n        exp = pd.date_range(\"1/1/1980\", \"1/1/2012\", freq=\"MS\")\n        tm.assert_index_equal(df.index, exp)",
        "begin_line": 172,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_with_DatetimeIndex#183",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_union_with_DatetimeIndex(self, sort)",
        "snippet": "    def test_union_with_DatetimeIndex(self, sort):\n        i1 = Int64Index(np.arange(0, 20, 2))\n        i2 = date_range(start=\"2012-01-03 00:00:00\", periods=10, freq=\"D\")\n        # Works\n        i1.union(i2, sort=sort)\n        # Fails with \"AttributeError: can't set attribute\"\n        i2.union(i1, sort=sort)",
        "begin_line": 183,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection2#192",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection2(self)",
        "snippet": "    def test_intersection2(self):\n        first = tm.makeDateIndex(10)\n        second = first[5:]\n        intersect = first.intersection(second)\n        assert tm.equalContents(intersect, second)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.intersection(case)\n            assert tm.equalContents(result, second)\n\n        third = Index([\"a\", \"b\", \"c\"])\n        result = first.intersection(third)\n        expected = pd.Index([], dtype=object)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 192,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection#212",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection(self, tz, sort)",
        "snippet": "    def test_intersection(self, tz, sort):\n        # GH 4690 (with tz)\n        base = date_range(\"6/1/2000\", \"6/30/2000\", freq=\"D\", name=\"idx\")\n\n        # if target has the same name, it is preserved\n        rng2 = date_range(\"5/15/2000\", \"6/20/2000\", freq=\"D\", name=\"idx\")\n        expected2 = date_range(\"6/1/2000\", \"6/20/2000\", freq=\"D\", name=\"idx\")\n\n        # if target name is different, it will be reset\n        rng3 = date_range(\"5/15/2000\", \"6/20/2000\", freq=\"D\", name=\"other\")\n        expected3 = date_range(\"6/1/2000\", \"6/20/2000\", freq=\"D\", name=None)\n\n        rng4 = date_range(\"7/1/2000\", \"7/31/2000\", freq=\"D\", name=\"idx\")\n        expected4 = DatetimeIndex([], name=\"idx\")\n\n        for (rng, expected) in [\n            (rng2, expected2),\n            (rng3, expected3),\n            (rng4, expected4),\n        ]:\n            result = base.intersection(rng)\n            tm.assert_index_equal(result, expected)\n            assert result.name == expected.name\n            assert result.freq == expected.freq\n            assert result.tz == expected.tz\n\n        # non-monotonic\n        base = DatetimeIndex(\n            [\"2011-01-05\", \"2011-01-04\", \"2011-01-02\", \"2011-01-03\"], tz=tz, name=\"idx\"\n        )\n\n        rng2 = DatetimeIndex(\n            [\"2011-01-04\", \"2011-01-02\", \"2011-02-02\", \"2011-02-03\"], tz=tz, name=\"idx\"\n        )\n        expected2 = DatetimeIndex([\"2011-01-04\", \"2011-01-02\"], tz=tz, name=\"idx\")\n\n        rng3 = DatetimeIndex(\n            [\"2011-01-04\", \"2011-01-02\", \"2011-02-02\", \"2011-02-03\"],\n            tz=tz,\n            name=\"other\",\n        )\n        expected3 = DatetimeIndex([\"2011-01-04\", \"2011-01-02\"], tz=tz, name=None)\n\n        # GH 7880\n        rng4 = date_range(\"7/1/2000\", \"7/31/2000\", freq=\"D\", tz=tz, name=\"idx\")\n        expected4 = DatetimeIndex([], tz=tz, name=\"idx\")\n\n        for (rng, expected) in [\n            (rng2, expected2),\n            (rng3, expected3),\n            (rng4, expected4),\n        ]:\n            result = base.intersection(rng, sort=sort)\n            if sort is None:\n                expected = expected.sort_values()\n            tm.assert_index_equal(result, expected)\n            assert result.name == expected.name\n            assert result.freq is None\n            assert result.tz == expected.tz",
        "begin_line": 212,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_empty#275",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_empty(self, tz_aware_fixture, freq)",
        "snippet": "    def test_intersection_empty(self, tz_aware_fixture, freq):\n        # empty same freq GH2129\n        tz = tz_aware_fixture\n        rng = date_range(\"6/1/2000\", \"6/15/2000\", freq=freq, tz=tz)\n        result = rng[0:0].intersection(rng)\n        assert len(result) == 0\n        assert result.freq == rng.freq\n\n        result = rng.intersection(rng[0:0])\n        assert len(result) == 0\n        assert result.freq == rng.freq\n\n        # no overlap GH#33604\n        result = rng[:3].intersection(rng[-3:])\n        tm.assert_index_equal(result, rng[:0])\n        if freq != \"T\":\n            # We don't preserve freq on non-anchored offsets\n            assert result.freq == rng.freq\n\n        # swapped left and right\n        result = rng[-3:].intersection(rng[:3])\n        tm.assert_index_equal(result, rng[:0])\n        if freq != \"T\":\n            # We don't preserve freq on non-anchored offsets\n            assert result.freq == rng.freq",
        "begin_line": 275,
        "end_line": 299,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_bug_1708#301",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_intersection_bug_1708(self)",
        "snippet": "    def test_intersection_bug_1708(self):\n        from pandas import DateOffset\n\n        index_1 = date_range(\"1/1/2012\", periods=4, freq=\"12H\")\n        index_2 = index_1 + DateOffset(hours=1)\n\n        result = index_1 & index_2\n        assert len(result) == 0",
        "begin_line": 301,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference#311",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference(self, tz, sort)",
        "snippet": "    def test_difference(self, tz, sort):\n        rng_dates = [\"1/2/2000\", \"1/3/2000\", \"1/1/2000\", \"1/4/2000\", \"1/5/2000\"]\n\n        rng1 = pd.DatetimeIndex(rng_dates, tz=tz)\n        other1 = pd.date_range(\"1/6/2000\", freq=\"D\", periods=5, tz=tz)\n        expected1 = pd.DatetimeIndex(rng_dates, tz=tz)\n\n        rng2 = pd.DatetimeIndex(rng_dates, tz=tz)\n        other2 = pd.date_range(\"1/4/2000\", freq=\"D\", periods=5, tz=tz)\n        expected2 = pd.DatetimeIndex(rng_dates[:3], tz=tz)\n\n        rng3 = pd.DatetimeIndex(rng_dates, tz=tz)\n        other3 = pd.DatetimeIndex([], tz=tz)\n        expected3 = pd.DatetimeIndex(rng_dates, tz=tz)\n\n        for rng, other, expected in [\n            (rng1, other1, expected1),\n            (rng2, other2, expected2),\n            (rng3, other3, expected3),\n        ]:\n            result_diff = rng.difference(other, sort)\n            if sort is None:\n                expected = expected.sort_values()\n            tm.assert_index_equal(result_diff, expected)",
        "begin_line": 311,
        "end_line": 334,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference_freq#336",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_difference_freq(self, sort)",
        "snippet": "    def test_difference_freq(self, sort):\n        # GH14323: difference of DatetimeIndex should not preserve frequency\n\n        index = date_range(\"20160920\", \"20160925\", freq=\"D\")\n        other = date_range(\"20160921\", \"20160924\", freq=\"D\")\n        expected = DatetimeIndex([\"20160920\", \"20160925\"], freq=None)\n        idx_diff = index.difference(other, sort)\n        tm.assert_index_equal(idx_diff, expected)\n        tm.assert_attr_equal(\"freq\", idx_diff, expected)\n\n        other = date_range(\"20160922\", \"20160925\", freq=\"D\")\n        idx_diff = index.difference(other, sort)\n        expected = DatetimeIndex([\"20160920\", \"20160921\"], freq=None)\n        tm.assert_index_equal(idx_diff, expected)\n        tm.assert_attr_equal(\"freq\", idx_diff, expected)",
        "begin_line": 336,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_datetimeindex_diff#352",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_datetimeindex_diff(self, sort)",
        "snippet": "    def test_datetimeindex_diff(self, sort):\n        dti1 = date_range(freq=\"Q-JAN\", start=datetime(1997, 12, 31), periods=100)\n        dti2 = date_range(freq=\"Q-JAN\", start=datetime(1997, 12, 31), periods=98)\n        assert len(dti1.difference(dti2, sort)) == 2",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_setops_preserve_freq#358",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps.test_setops_preserve_freq(self, tz)",
        "snippet": "    def test_setops_preserve_freq(self, tz):\n        rng = date_range(\"1/1/2000\", \"1/1/2002\", name=\"idx\", tz=tz)\n\n        result = rng[:50].union(rng[50:100])\n        assert result.name == rng.name\n        assert result.freq == rng.freq\n        assert result.tz == rng.tz\n\n        result = rng[:50].union(rng[30:100])\n        assert result.name == rng.name\n        assert result.freq == rng.freq\n        assert result.tz == rng.tz\n\n        result = rng[:50].union(rng[60:100])\n        assert result.name == rng.name\n        assert result.freq is None\n        assert result.tz == rng.tz\n\n        result = rng[:50].intersection(rng[25:75])\n        assert result.name == rng.name\n        assert result.freqstr == \"D\"\n        assert result.tz == rng.tz\n\n        nofreq = DatetimeIndex(list(rng[25:75]), name=\"other\")\n        result = rng[:50].union(nofreq)\n        assert result.name is None\n        assert result.freq == rng.freq\n        assert result.tz == rng.tz\n\n        result = rng[:50].intersection(nofreq)\n        assert result.name is None\n        assert result.freq == rng.freq\n        assert result.tz == rng.tz",
        "begin_line": 358,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.setup_method#394",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.rng = bdate_range(START, END)",
        "begin_line": 394,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union#397",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union(self, sort)",
        "snippet": "    def test_union(self, sort):\n        # overlapping\n        left = self.rng[:10]\n        right = self.rng[5:10]\n\n        the_union = left.union(right, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)\n\n        # non-overlapping, gap in middle\n        left = self.rng[:5]\n        right = self.rng[10:]\n\n        the_union = left.union(right, sort=sort)\n        assert isinstance(the_union, Index)\n\n        # non-overlapping, no gap\n        left = self.rng[:5]\n        right = self.rng[5:10]\n\n        the_union = left.union(right, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)\n\n        # order does not matter\n        if sort is None:\n            tm.assert_index_equal(right.union(left, sort=sort), the_union)\n        else:\n            expected = pd.DatetimeIndex(list(right) + list(left))\n            tm.assert_index_equal(right.union(left, sort=sort), expected)\n\n        # overlapping, but different offset\n        rng = date_range(START, END, freq=BMonthEnd())\n\n        the_union = self.rng.union(rng, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)",
        "begin_line": 397,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union_not_cacheable#432",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union_not_cacheable(self, sort)",
        "snippet": "    def test_union_not_cacheable(self, sort):\n        rng = date_range(\"1/1/2000\", periods=50, freq=Minute())\n        rng1 = rng[10:]\n        rng2 = rng[:25]\n        the_union = rng1.union(rng2, sort=sort)\n        if sort is None:\n            tm.assert_index_equal(the_union, rng)\n        else:\n            expected = pd.DatetimeIndex(list(rng[10:]) + list(rng[:10]))\n            tm.assert_index_equal(the_union, expected)\n\n        rng1 = rng[10:]\n        rng2 = rng[15:35]\n        the_union = rng1.union(rng2, sort=sort)\n        expected = rng[10:]\n        tm.assert_index_equal(the_union, expected)",
        "begin_line": 432,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection#449",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection(self)",
        "snippet": "    def test_intersection(self):\n        rng = date_range(\"1/1/2000\", periods=50, freq=Minute())\n        rng1 = rng[10:]\n        rng2 = rng[:25]\n        the_int = rng1.intersection(rng2)\n        expected = rng[10:25]\n        tm.assert_index_equal(the_int, expected)\n        assert isinstance(the_int, DatetimeIndex)\n        assert the_int.freq == rng.freq\n\n        the_int = rng1.intersection(rng2.view(DatetimeIndex))\n        tm.assert_index_equal(the_int, expected)\n\n        # non-overlapping\n        the_int = rng[:10].intersection(rng[10:])\n        expected = DatetimeIndex([])\n        tm.assert_index_equal(the_int, expected)",
        "begin_line": 449,
        "end_line": 465,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection_bug#467",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection_bug(self)",
        "snippet": "    def test_intersection_bug(self):\n        # GH #771\n        a = bdate_range(\"11/30/2011\", \"12/31/2011\")\n        b = bdate_range(\"12/10/2011\", \"12/20/2011\")\n        result = a.intersection(b)\n        tm.assert_index_equal(result, b)\n        assert result.freq == b.freq",
        "begin_line": 467,
        "end_line": 473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_pytz#475",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_pytz(self, sort)",
        "snippet": "    def test_month_range_union_tz_pytz(self, sort):\n        from pytz import timezone\n\n        tz = timezone(\"US/Eastern\")\n\n        early_start = datetime(2011, 1, 1)\n        early_end = datetime(2011, 3, 1)\n\n        late_start = datetime(2011, 3, 1)\n        late_end = datetime(2011, 5, 1)\n\n        early_dr = date_range(start=early_start, end=early_end, tz=tz, freq=MonthEnd())\n        late_dr = date_range(start=late_start, end=late_end, tz=tz, freq=MonthEnd())\n\n        early_dr.union(late_dr, sort=sort)",
        "begin_line": 475,
        "end_line": 489,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_dateutil#492",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_dateutil(self, sort)",
        "snippet": "    def test_month_range_union_tz_dateutil(self, sort):\n        from pandas._libs.tslibs.timezones import dateutil_gettz\n\n        tz = dateutil_gettz(\"US/Eastern\")\n\n        early_start = datetime(2011, 1, 1)\n        early_end = datetime(2011, 3, 1)\n\n        late_start = datetime(2011, 3, 1)\n        late_end = datetime(2011, 5, 1)\n\n        early_dr = date_range(start=early_start, end=early_end, tz=tz, freq=MonthEnd())\n        late_dr = date_range(start=late_start, end=late_end, tz=tz, freq=MonthEnd())\n\n        early_dr.union(late_dr, sort=sort)",
        "begin_line": 492,
        "end_line": 506,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.setup_method#510",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.rng = bdate_range(START, END, freq=\"C\")",
        "begin_line": 510,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_union#513",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_union(self, sort)",
        "snippet": "    def test_union(self, sort):\n        # overlapping\n        left = self.rng[:10]\n        right = self.rng[5:10]\n\n        the_union = left.union(right, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)\n\n        # non-overlapping, gap in middle\n        left = self.rng[:5]\n        right = self.rng[10:]\n\n        the_union = left.union(right, sort)\n        assert isinstance(the_union, Index)\n\n        # non-overlapping, no gap\n        left = self.rng[:5]\n        right = self.rng[5:10]\n\n        the_union = left.union(right, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)\n\n        # order does not matter\n        if sort is None:\n            tm.assert_index_equal(right.union(left, sort=sort), the_union)\n\n        # overlapping, but different offset\n        rng = date_range(START, END, freq=BMonthEnd())\n\n        the_union = self.rng.union(rng, sort=sort)\n        assert isinstance(the_union, DatetimeIndex)",
        "begin_line": 513,
        "end_line": 543,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_intersection_bug#545",
        "src_path": "pandas/tests/indexes/datetimes/test_setops.py",
        "class_name": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex",
        "signature": "pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_intersection_bug(self)",
        "snippet": "    def test_intersection_bug(self):\n        # GH #771\n        a = bdate_range(\"11/30/2011\", \"12/31/2011\", freq=\"C\")\n        b = bdate_range(\"12/10/2011\", \"12/20/2011\", freq=\"C\")\n        result = a.intersection(b)\n        tm.assert_index_equal(result, b)\n        assert result.freq == b.freq",
        "begin_line": 545,
        "end_line": 551,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.conftest.sort#5",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.sort(request)",
        "snippet": "def sort(request):\n    \"\"\"\n    Valid values for the 'sort' parameter used in the Index\n    setops methods (intersection, union, etc.)\n\n    Caution:\n        Don't confuse this one with the \"sort\" fixture used\n        for DataFrame.append or concat. That one has\n        parameters [True, False].\n\n        We can't combine them as sort=True is not permitted\n        in in the Index setops methods.\n    \"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.conftest.freq_sample#22",
        "src_path": "pandas/tests/indexes/conftest.py",
        "class_name": "pandas.tests.indexes.conftest",
        "signature": "pandas.tests.indexes.conftest.freq_sample(request)",
        "snippet": "def freq_sample(request):\n    \"\"\"\n    Valid values for 'freq' parameter used to create date_range and\n    timedelta_range..\n    \"\"\"\n    return request.param",
        "begin_line": 22,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_pickle_compat_construction#41",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)",
        "snippet": "    def test_pickle_compat_construction(self):\n        # need an object to create with\n        msg = (\n            r\"Index\\(\\.\\.\\.\\) must be called with a collection of some \"\n            r\"kind, None was passed|\"\n            r\"__new__\\(\\) missing 1 required positional argument: 'data'|\"\n            r\"__new__\\(\\) takes at least 2 arguments \\(1 given\\)\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            self._holder()",
        "begin_line": 41,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_to_frame#53",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_to_frame(self, name)",
        "snippet": "    def test_to_frame(self, name):\n        # see GH-15230, GH-22580\n        idx = self.create_index()\n\n        if name:\n            idx_name = name\n        else:\n            idx_name = idx.name or 0\n\n        df = idx.to_frame(name=idx_name)\n\n        assert df.index is idx\n        assert len(df.columns) == 1\n        assert df.columns[0] == idx_name\n        assert df[idx_name].values is not idx.values\n\n        df = idx.to_frame(index=False, name=idx_name)\n        assert df.index is not idx",
        "begin_line": 53,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shift#72",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shift(self)",
        "snippet": "    def test_shift(self):\n\n        # GH8083 test the base class for shift\n        idx = self.create_index()\n        msg = f\"Not supported for type {type(idx).__name__}\"\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1)\n        with pytest.raises(NotImplementedError, match=msg):\n            idx.shift(1, 2)",
        "begin_line": 72,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable#82",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_constructor_name_unhashable(self)",
        "snippet": "    def test_constructor_name_unhashable(self):\n        # GH#29069 check that name is hashable\n        # See also same-named test in tests.series.test_constructors\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"Index.name must be a hashable type\"):\n            type(idx)(idx, name=[])",
        "begin_line": 82,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_create_index_existing_name#89",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_create_index_existing_name(self)",
        "snippet": "    def test_create_index_existing_name(self):\n\n        # GH11193, when an existing index is passed, and a new name is not\n        # specified, the new index should inherit the previous object name\n        expected = self.create_index()\n        if not isinstance(expected, MultiIndex):\n            expected.name = \"foo\"\n            result = pd.Index(expected)\n            tm.assert_index_equal(result, expected)\n\n            result = pd.Index(expected, name=\"bar\")\n            expected.name = \"bar\"\n            tm.assert_index_equal(result, expected)\n        else:\n            expected.names = [\"foo\", \"bar\"]\n            result = pd.Index(expected)\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"foo\", \"bar\"],\n                ),\n            )\n\n            result = pd.Index(expected, names=[\"A\", \"B\"])\n            tm.assert_index_equal(\n                result,\n                Index(\n                    Index(\n                        [\n                            (\"foo\", \"one\"),\n                            (\"foo\", \"two\"),\n                            (\"bar\", \"one\"),\n                            (\"baz\", \"two\"),\n                            (\"qux\", \"one\"),\n                            (\"qux\", \"two\"),\n                        ],\n                        dtype=\"object\",\n                    ),\n                    names=[\"A\", \"B\"],\n                ),\n            )",
        "begin_line": 89,
        "end_line": 140,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numeric_compat#142",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numeric_compat(self)",
        "snippet": "    def test_numeric_compat(self):\n\n        idx = self.create_index()\n        # Check that this doesn't cover MultiIndex case, if/when it does,\n        #  we can remove multi.test_compat.test_numeric_compat\n        assert not isinstance(idx, MultiIndex)\n\n        with pytest.raises(TypeError, match=\"cannot perform __mul__\"):\n            idx * 1\n        with pytest.raises(TypeError, match=\"cannot perform __rmul__\"):\n            1 * idx\n\n        div_err = \"cannot perform __truediv__\"\n        with pytest.raises(TypeError, match=div_err):\n            idx / 1\n\n        div_err = div_err.replace(\" __\", \" __r\")\n        with pytest.raises(TypeError, match=div_err):\n            1 / idx\n        with pytest.raises(TypeError, match=\"cannot perform __floordiv__\"):\n            idx // 1\n        with pytest.raises(TypeError, match=\"cannot perform __rfloordiv__\"):\n            1 // idx",
        "begin_line": 142,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_logical_compat#166",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_logical_compat(self)",
        "snippet": "    def test_logical_compat(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"cannot perform all\"):\n            idx.all()\n        with pytest.raises(TypeError, match=\"cannot perform any\"):\n            idx.any()",
        "begin_line": 166,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_reindex_base#173",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_reindex_base(self)",
        "snippet": "    def test_reindex_base(self):\n        idx = self.create_index()\n        expected = np.arange(idx.size, dtype=np.intp)\n\n        actual = idx.get_indexer(idx)\n        tm.assert_numpy_array_equal(expected, actual)\n\n        with pytest.raises(ValueError, match=\"Invalid fill method\"):\n            idx.get_indexer(idx, method=\"invalid\")",
        "begin_line": 173,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_get_indexer_consistency#183",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_get_indexer_consistency(self, indices)",
        "snippet": "    def test_get_indexer_consistency(self, indices):\n        # See GH 16819\n        if isinstance(indices, IntervalIndex):\n            return\n\n        if indices.is_unique or isinstance(indices, CategoricalIndex):\n            indexer = indices.get_indexer(indices[0:2])\n            assert isinstance(indexer, np.ndarray)\n            assert indexer.dtype == np.intp\n        else:\n            e = \"Reindexing only valid with uniquely valued Index objects\"\n            with pytest.raises(InvalidIndexError, match=e):\n                indices.get_indexer(indices[0:2])\n\n        indexer, _ = indices.get_indexer_non_unique(indices[0:2])\n        assert isinstance(indexer, np.ndarray)\n        assert indexer.dtype == np.intp",
        "begin_line": 183,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties#201",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)",
        "snippet": "    def test_ndarray_compat_properties(self):\n        idx = self.create_index()\n        assert idx.T.equals(idx)\n        assert idx.transpose().equals(idx)\n\n        values = idx.values\n        for prop in self._compat_props:\n            assert getattr(idx, prop) == getattr(values, prop)\n\n        # test for validity\n        idx.nbytes\n        idx.values.nbytes",
        "begin_line": 201,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_roundtrip#214",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_roundtrip(self)",
        "snippet": "    def test_repr_roundtrip(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(eval(repr(idx)), idx)",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting#219",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)",
        "snippet": "    def test_repr_max_seq_item_setting(self):\n        # GH10182\n        idx = self.create_index()\n        idx = idx.repeat(50)\n        with pd.option_context(\"display.max_seq_items\", None):\n            repr(idx)\n            assert \"...\" not in str(idx)",
        "begin_line": 219,
        "end_line": 225,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_name#227",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_name(self, indices)",
        "snippet": "    def test_copy_name(self, indices):\n        # gh-12309: Check that the \"name\" argument\n        # passed at initialization is honored.\n        if isinstance(indices, MultiIndex):\n            return\n\n        first = type(indices)(indices, copy=True, name=\"mario\")\n        second = type(first)(first, copy=False)\n\n        # Even though \"copy=False\", we want a new object.\n        assert first is not second\n\n        # Not using tm.assert_index_equal() since names differ.\n        assert indices.equals(first)\n\n        assert first.name == \"mario\"\n        assert second.name == \"mario\"\n\n        s1 = Series(2, index=first)\n        s2 = Series(3, index=second[:-1])\n\n        if not isinstance(indices, CategoricalIndex):\n            # See gh-13365\n            s3 = s1 * s2\n            assert s3.index.name == \"mario\"",
        "begin_line": 227,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_ensure_copied_data#253",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_ensure_copied_data(self, indices)",
        "snippet": "    def test_ensure_copied_data(self, indices):\n        # Check the \"copy\" argument of each Index.__new__ is honoured\n        # GH12309\n        init_kwargs = {}\n        if isinstance(indices, PeriodIndex):\n            # Needs \"freq\" specification:\n            init_kwargs[\"freq\"] = indices.freq\n        elif isinstance(indices, (RangeIndex, MultiIndex, CategoricalIndex)):\n            # RangeIndex cannot be initialized from data\n            # MultiIndex and CategoricalIndex are tested separately\n            return\n\n        index_type = type(indices)\n        result = index_type(indices.values, copy=True, **init_kwargs)\n        if is_datetime64tz_dtype(indices.dtype):\n            result = result.tz_localize(\"UTC\").tz_convert(indices.tz)\n\n        tm.assert_index_equal(indices, result)\n\n        if isinstance(indices, PeriodIndex):\n            # .values an object array of Period, thus copied\n            result = index_type(ordinal=indices.asi8, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(indices.asi8, result.asi8, check_same=\"same\")\n        elif isinstance(indices, IntervalIndex):\n            # checked in test_interval.py\n            pass\n        else:\n            result = index_type(indices.values, copy=False, **init_kwargs)\n            tm.assert_numpy_array_equal(\n                indices.values, result.values, check_same=\"same\"\n            )",
        "begin_line": 253,
        "end_line": 283,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_memory_usage#285",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_memory_usage(self, indices)",
        "snippet": "    def test_memory_usage(self, indices):\n        indices._engine.clear_mapping()\n        result = indices.memory_usage()\n        if indices.empty:\n            # we report 0 for no-length\n            assert result == 0\n            return\n\n        # non-zero length\n        indices.get_loc(indices[0])\n        result2 = indices.memory_usage()\n        result3 = indices.memory_usage(deep=True)\n\n        # RangeIndex, IntervalIndex\n        # don't have engines\n        if not isinstance(indices, (RangeIndex, IntervalIndex)):\n            assert result2 > result\n\n        if indices.inferred_type == \"object\":\n            assert result3 > result2",
        "begin_line": 285,
        "end_line": 304,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_argsort#306",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_argsort(self, request, indices)",
        "snippet": "    def test_argsort(self, request, indices):\n        # separately tested\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        result = indices.argsort()\n        expected = np.array(indices).argsort()\n        tm.assert_numpy_array_equal(result, expected, check_dtype=False)",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_argsort#315",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_argsort(self, indices)",
        "snippet": "    def test_numpy_argsort(self, indices):\n        result = np.argsort(indices)\n        expected = indices.argsort()\n        tm.assert_numpy_array_equal(result, expected)\n\n        # these are the only two types that perform\n        # pandas compatibility input validation - the\n        # rest already perform separate (or no) such\n        # validation via their 'values' attribute as\n        # defined in pandas.core.indexes/base.py - they\n        # cannot be changed at the moment due to\n        # backwards compatibility concerns\n        if isinstance(type(indices), (CategoricalIndex, RangeIndex)):\n            msg = \"the 'axis' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, axis=1)\n\n            msg = \"the 'kind' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, kind=\"mergesort\")\n\n            msg = \"the 'order' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argsort(indices, order=(\"a\", \"b\"))",
        "begin_line": 315,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take#340",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take(self, indices)",
        "snippet": "    def test_take(self, indices):\n        indexer = [4, 3, 0, 2]\n        if len(indices) < 5:\n            # not enough elements; ignore\n            return\n\n        result = indices.take(indexer)\n        expected = indices[indexer]\n        assert result.equals(expected)\n\n        if not isinstance(indices, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n            # GH 10791\n            with pytest.raises(AttributeError):\n                indices.freq",
        "begin_line": 340,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs#355",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)",
        "snippet": "    def test_take_invalid_kwargs(self):\n        idx = self.create_index()\n        indices = [1, 2]\n\n        msg = r\"take\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            idx.take(indices, foo=2)\n\n        msg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, out=indices)\n\n        msg = \"the 'mode' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            idx.take(indices, mode=\"clip\")",
        "begin_line": 355,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_repeat#371",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_repeat(self)",
        "snippet": "    def test_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)\n\n        i = self.create_index()\n        rep = np.arange(len(i))\n        expected = pd.Index(i.values.repeat(rep), name=i.name)\n        tm.assert_index_equal(i.repeat(rep), expected)",
        "begin_line": 371,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_numpy_repeat#382",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_numpy_repeat(self)",
        "snippet": "    def test_numpy_repeat(self):\n        rep = 2\n        i = self.create_index()\n        expected = i.repeat(rep)\n        tm.assert_index_equal(np.repeat(i, rep), expected)\n\n        msg = \"the 'axis' parameter is not supported\"\n        with pytest.raises(ValueError, match=msg):\n            np.repeat(i, rep, axis=0)",
        "begin_line": 382,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_where#393",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_where(self, klass)",
        "snippet": "    def test_where(self, klass):\n        i = self.create_index()\n\n        cond = [True] * len(i)\n        result = i.where(klass(cond))\n        expected = i\n        tm.assert_index_equal(result, expected)\n\n        cond = [False] + [True] * len(i[1:])\n        expected = pd.Index([i._na_value] + i[1:].tolist(), dtype=i.dtype)\n        result = i.where(klass(cond))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 393,
        "end_line": 404,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_set_ops_error_cases#410",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_set_ops_error_cases(self, case, method, indices)",
        "snippet": "    def test_set_ops_error_cases(self, case, method, indices):\n        # non-iterable input\n        msg = \"Input must be Index or array-like\"\n        with pytest.raises(TypeError, match=msg):\n            getattr(indices, method)(case)",
        "begin_line": 410,
        "end_line": 414,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_intersection_base#416",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_intersection_base(self, indices)",
        "snippet": "    def test_intersection_base(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[:5]\n        second = indices[:3]\n        intersect = first.intersection(second)\n        assert tm.equalContents(intersect, second)\n\n        if is_datetime64tz_dtype(indices.dtype):\n            # The second.values below will drop tz, so the rest of this test\n            #  is not applicable.\n            return\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.intersection(case)\n            assert tm.equalContents(result, second)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.intersection([1, 2, 3])",
        "begin_line": 416,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_union_base#441",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_union_base(self, indices)",
        "snippet": "    def test_union_base(self, indices):\n        first = indices[3:]\n        second = indices[:5]\n        everything = indices\n        union = first.union(second)\n        assert tm.equalContents(union, everything)\n\n        if is_datetime64tz_dtype(indices.dtype):\n            # The second.values below will drop tz, so the rest of this test\n            #  is not applicable.\n            return\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if not isinstance(indices, CategoricalIndex):\n                result = first.union(case)\n                assert tm.equalContents(result, everything)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.union([1, 2, 3])",
        "begin_line": 441,
        "end_line": 463,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_difference_base#465",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_difference_base(self, sort, indices)",
        "snippet": "    def test_difference_base(self, sort, indices):\n        first = indices[2:]\n        second = indices[:4]\n        if isinstance(indices, CategoricalIndex) or indices.is_boolean():\n            answer = []\n        else:\n            answer = indices[4:]\n        result = first.difference(second, sort)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            if isinstance(indices, (DatetimeIndex, TimedeltaIndex)):\n                assert type(result) == type(answer)\n                tm.assert_numpy_array_equal(\n                    result.sort_values().asi8, answer.sort_values().asi8\n                )\n            else:\n                result = first.difference(case, sort)\n                assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.difference([1, 2, 3], sort)",
        "begin_line": 465,
        "end_line": 490,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_symmetric_difference#492",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_symmetric_difference(self, indices)",
        "snippet": "    def test_symmetric_difference(self, indices):\n        if isinstance(indices, CategoricalIndex):\n            return\n\n        first = indices[1:]\n        second = indices[:-1]\n        answer = indices[[0, -1]]\n        result = first.symmetric_difference(second)\n        assert tm.equalContents(result, answer)\n\n        # GH 10149\n        cases = [klass(second.values) for klass in [np.array, Series, list]]\n        for case in cases:\n            result = first.symmetric_difference(case)\n            assert tm.equalContents(result, answer)\n\n        if isinstance(indices, MultiIndex):\n            msg = \"other must be a MultiIndex or a list of tuples\"\n            with pytest.raises(TypeError, match=msg):\n                first.symmetric_difference([1, 2, 3])",
        "begin_line": 492,
        "end_line": 511,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_insert_base#513",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_insert_base(self, indices)",
        "snippet": "    def test_insert_base(self, indices):\n        result = indices[1:4]\n\n        if not len(indices):\n            return\n\n        # test 0th element\n        assert indices[0:4].equals(result.insert(0, indices[0]))",
        "begin_line": 513,
        "end_line": 520,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_delete_base#522",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_delete_base(self, indices)",
        "snippet": "    def test_delete_base(self, indices):\n        if not len(indices):\n            return\n\n        if isinstance(indices, RangeIndex):\n            # tested in class\n            return\n\n        expected = indices[1:]\n        result = indices.delete(0)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        expected = indices[:-1]\n        result = indices.delete(-1)\n        assert result.equals(expected)\n        assert result.name == expected.name\n\n        with pytest.raises((IndexError, ValueError)):\n            # either depending on numpy version\n            indices.delete(len(indices))",
        "begin_line": 522,
        "end_line": 542,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals#544",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals(self, indices)",
        "snippet": "    def test_equals(self, indices):\n        if isinstance(indices, IntervalIndex):\n            # IntervalIndex tested separately\n            return\n\n        assert indices.equals(indices)\n        assert indices.equals(indices.copy())\n        assert indices.equals(indices.astype(object))\n\n        assert not indices.equals(list(indices))\n        assert not indices.equals(np.array(indices))\n\n        # Cannot pass in non-int64 dtype to RangeIndex\n        if not isinstance(indices, (RangeIndex, CategoricalIndex)):\n            # TODO: CategoricalIndex can be re-allowed following GH#32167\n            same_values = Index(indices, dtype=object)\n            assert indices.equals(same_values)\n            assert same_values.equals(indices)\n\n        if indices.nlevels == 1:\n            # do not test MultiIndex\n            assert not indices.equals(Series(indices))",
        "begin_line": 544,
        "end_line": 565,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_equals_op#567",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_equals_op(self)",
        "snippet": "    def test_equals_op(self):\n        # GH9947, GH10637\n        index_a = self.create_index()\n        if isinstance(index_a, PeriodIndex):\n            pytest.skip(\"Skip check for PeriodIndex\")\n\n        n = len(index_a)\n        index_b = index_a[0:-1]\n        index_c = index_a[0:-1].append(index_a[-2:-1])\n        index_d = index_a[0:1]\n\n        msg = \"Lengths must match|could not be broadcast\"\n        with pytest.raises(ValueError, match=msg):\n            index_a == index_b\n        expected1 = np.array([True] * n)\n        expected2 = np.array([True] * (n - 1) + [False])\n        tm.assert_numpy_array_equal(index_a == index_a, expected1)\n        tm.assert_numpy_array_equal(index_a == index_c, expected2)\n\n        # test comparisons with numpy arrays\n        array_a = np.array(index_a)\n        array_b = np.array(index_a[0:-1])\n        array_c = np.array(index_a[0:-1].append(index_a[-2:-1]))\n        array_d = np.array(index_a[0:1])\n        with pytest.raises(ValueError, match=msg):\n            index_a == array_b\n        tm.assert_numpy_array_equal(index_a == array_a, expected1)\n        tm.assert_numpy_array_equal(index_a == array_c, expected2)\n\n        # test comparisons with Series\n        series_a = Series(array_a)\n        series_b = Series(array_b)\n        series_c = Series(array_c)\n        series_d = Series(array_d)\n        with pytest.raises(ValueError, match=msg):\n            index_a == series_b\n\n        tm.assert_numpy_array_equal(index_a == series_a, expected1)\n        tm.assert_numpy_array_equal(index_a == series_c, expected2)\n\n        # cases where length is 1 for one of them\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == index_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            index_a == array_d\n        msg = \"Can only compare identically-labeled Series objects\"\n        with pytest.raises(ValueError, match=msg):\n            series_a == series_d\n        with pytest.raises(ValueError, match=\"Lengths must match\"):\n            series_a == array_d\n\n        # comparing with a scalar should broadcast; note that we are excluding\n        # MultiIndex because in this case each item in the index is a tuple of\n        # length 2, and therefore is considered an array of length 2 in the\n        # comparison instead of a scalar\n        if not isinstance(index_a, MultiIndex):\n            expected3 = np.array([False] * (len(index_a) - 2) + [True, False])\n            # assuming the 2nd to last item is unique in the data\n            item = index_a[-2]\n            tm.assert_numpy_array_equal(index_a == item, expected3)\n            tm.assert_series_equal(series_a == item, Series(expected3))",
        "begin_line": 567,
        "end_line": 629,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_hasnans_isnans#631",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_hasnans_isnans(self, indices)",
        "snippet": "    def test_hasnans_isnans(self, indices):\n        # GH 11343, added tests for hasnans / isnans\n        if isinstance(indices, MultiIndex):\n            return\n\n        # cases in indices doesn't include NaN\n        idx = indices.copy(deep=True)\n        expected = np.array([False] * len(idx), dtype=bool)\n        tm.assert_numpy_array_equal(idx._isnan, expected)\n        assert idx.hasnans is False\n\n        idx = indices.copy(deep=True)\n        values = np.asarray(idx.values)\n\n        if len(indices) == 0:\n            return\n        elif isinstance(indices, DatetimeIndexOpsMixin):\n            values[1] = iNaT\n        elif isinstance(indices, (Int64Index, UInt64Index)):\n            return\n        else:\n            values[1] = np.nan\n\n        if isinstance(indices, PeriodIndex):\n            idx = type(indices)(values, freq=indices.freq)\n        else:\n            idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 631,
        "end_line": 662,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_fillna#664",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_fillna(self, indices)",
        "snippet": "    def test_fillna(self, indices):\n        # GH 11343\n        if len(indices) == 0:\n            pass\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy(deep=True)\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.fillna(idx[0])\n        else:\n            idx = indices.copy(deep=True)\n            result = idx.fillna(idx[0])\n            tm.assert_index_equal(result, idx)\n            assert result is not idx\n\n            msg = \"'value' must be a scalar, passed: \"\n            with pytest.raises(TypeError, match=msg):\n                idx.fillna([idx[0]])\n\n            idx = indices.copy(deep=True)\n            values = np.asarray(idx.values)\n\n            if isinstance(indices, DatetimeIndexOpsMixin):\n                values[1] = iNaT\n            elif isinstance(indices, (Int64Index, UInt64Index)):\n                return\n            else:\n                values[1] = np.nan\n\n            if isinstance(indices, PeriodIndex):\n                idx = type(indices)(values, freq=indices.freq)\n            else:\n                idx = type(indices)(values)\n\n            expected = np.array([False] * len(idx), dtype=bool)\n            expected[1] = True\n            tm.assert_numpy_array_equal(idx._isnan, expected)\n            assert idx.hasnans is True",
        "begin_line": 664,
        "end_line": 701,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_nulls#703",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_nulls(self, indices)",
        "snippet": "    def test_nulls(self, indices):\n        # this is really a smoke test for the methods\n        # as these are adequately tested for function elsewhere\n        if len(indices) == 0:\n            tm.assert_numpy_array_equal(indices.isna(), np.array([], dtype=bool))\n        elif isinstance(indices, MultiIndex):\n            idx = indices.copy()\n            msg = \"isna is not defined for MultiIndex\"\n            with pytest.raises(NotImplementedError, match=msg):\n                idx.isna()\n        elif not indices.hasnans:\n            tm.assert_numpy_array_equal(\n                indices.isna(), np.zeros(len(indices), dtype=bool)\n            )\n            tm.assert_numpy_array_equal(\n                indices.notna(), np.ones(len(indices), dtype=bool)\n            )\n        else:\n            result = isna(indices)\n            tm.assert_numpy_array_equal(indices.isna(), result)\n            tm.assert_numpy_array_equal(indices.notna(), ~result)",
        "begin_line": 703,
        "end_line": 723,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_empty#725",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_empty(self)",
        "snippet": "    def test_empty(self):\n        # GH 15270\n        index = self.create_index()\n        assert not index.empty\n        assert index[:0].empty",
        "begin_line": 725,
        "end_line": 729,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_join_self_unique#731",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_join_self_unique(self, join_type)",
        "snippet": "    def test_join_self_unique(self, join_type):\n        index = self.create_index()\n        if index.is_unique:\n            joined = index.join(index, how=join_type)\n            assert (index == joined).all()",
        "begin_line": 731,
        "end_line": 735,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map#737",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map(self)",
        "snippet": "    def test_map(self):\n        # callable\n        index = self.create_index()\n\n        # we don't infer UInt64\n        if isinstance(index, pd.UInt64Index):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(lambda x: x)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 737,
        "end_line": 748,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_dictlike#757",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n\n        index = self.create_index()\n        if isinstance(index, (pd.CategoricalIndex, pd.IntervalIndex)):\n            pytest.skip(f\"skipping tests for {type(index)}\")\n\n        identity = mapper(index.values, index)\n\n        # we don't infer to UInt64 for a dict\n        if isinstance(index, pd.UInt64Index) and isinstance(identity, dict):\n            expected = index.astype(\"int64\")\n        else:\n            expected = index\n\n        result = index.map(identity)\n        tm.assert_index_equal(result, expected)\n\n        # empty mappable\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 757,
        "end_line": 777,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_map_str#779",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_map_str(self)",
        "snippet": "    def test_map_str(self):\n        # GH 31202\n        index = self.create_index()\n        result = index.map(str)\n        expected = Index([str(x) for x in index], dtype=object)\n        tm.assert_index_equal(result, expected)",
        "begin_line": 779,
        "end_line": 784,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask#786",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_putmask_with_wrong_mask(self)",
        "snippet": "    def test_putmask_with_wrong_mask(self):\n        # GH18368\n        index = self.create_index()\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) + 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(np.ones(len(index) - 1, np.bool), 1)\n\n        with pytest.raises(ValueError):\n            index.putmask(\"foo\", 1)",
        "begin_line": 786,
        "end_line": 797,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_astype_category#802",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_astype_category(self, copy, name, ordered)",
        "snippet": "    def test_astype_category(self, copy, name, ordered):\n        # GH 18630\n        index = self.create_index()\n        if name:\n            index = index.rename(name)\n\n        # standard categories\n        dtype = CategoricalDtype(ordered=ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, ordered=ordered)\n        tm.assert_index_equal(result, expected)\n\n        # non-standard categories\n        dtype = CategoricalDtype(index.unique().tolist()[:-1], ordered)\n        result = index.astype(dtype, copy=copy)\n        expected = CategoricalIndex(index.values, name=name, dtype=dtype)\n        tm.assert_index_equal(result, expected)\n\n        if ordered is False:\n            # dtype='category' defaults to ordered=False, so only test once\n            result = index.astype(\"category\", copy=copy)\n            expected = CategoricalIndex(index.values, name=name)\n            tm.assert_index_equal(result, expected)",
        "begin_line": 802,
        "end_line": 824,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_is_unique#826",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_is_unique(self)",
        "snippet": "    def test_is_unique(self):\n        # initialize a unique index\n        index = self.create_index().drop_duplicates()\n        assert index.is_unique is True\n\n        # empty index should be unique\n        index_empty = index[:0]\n        assert index_empty.is_unique is True\n\n        # test basic dupes\n        index_dup = index.insert(0, index[0])\n        assert index_dup.is_unique is False\n\n        # single NA should be unique\n        index_na = index.insert(0, np.nan)\n        assert index_na.is_unique is True\n\n        # multiple NA should not be unique\n        index_na_dup = index_na.insert(0, np.nan)\n        assert index_na_dup.is_unique is False",
        "begin_line": 826,
        "end_line": 845,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_engine_reference_cycle#847",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_engine_reference_cycle(self)",
        "snippet": "    def test_engine_reference_cycle(self):\n        # GH27585\n        index = self.create_index()\n        nrefs_pre = len(gc.get_referrers(index))\n        index._engine\n        assert len(gc.get_referrers(index)) == nrefs_pre",
        "begin_line": 847,
        "end_line": 852,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_getitem_2d_deprecated#854",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_getitem_2d_deprecated(self)",
        "snippet": "    def test_getitem_2d_deprecated(self):\n        # GH#30588\n        idx = self.create_index()\n        with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):\n            res = idx[:, None]\n\n        assert isinstance(res, np.ndarray), type(res)",
        "begin_line": 854,
        "end_line": 860,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_contains_requires_hashable_raises#862",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_contains_requires_hashable_raises(self)",
        "snippet": "    def test_contains_requires_hashable_raises(self):\n        idx = self.create_index()\n        with pytest.raises(TypeError, match=\"unhashable type\"):\n            [] in idx\n\n        with pytest.raises(TypeError):\n            {} in idx._engine",
        "begin_line": 862,
        "end_line": 868,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_copy_copies_cache#870",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_copy_copies_cache(self)",
        "snippet": "    def test_copy_copies_cache(self):\n        # GH32898\n        idx = self.create_index()\n        idx.get_loc(idx[0])  # populates the _cache.\n        copy = idx.copy()\n\n        # check that the copied cache is a copy of the original\n        assert idx._cache == copy._cache\n        assert idx._cache is not copy._cache\n        # cache values should reference the same object\n        for key, val in idx._cache.items():\n            assert copy._cache[key] is val, key",
        "begin_line": 870,
        "end_line": 881,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.common.Base.test_shallow_copy_copies_cache#883",
        "src_path": "pandas/tests/indexes/common.py",
        "class_name": "pandas.tests.indexes.common.Base",
        "signature": "pandas.tests.indexes.common.Base.test_shallow_copy_copies_cache(self)",
        "snippet": "    def test_shallow_copy_copies_cache(self):\n        # GH32669\n        idx = self.create_index()\n        idx.get_loc(idx[0])  # populates the _cache.\n        shallow_copy = idx._shallow_copy()\n\n        # check that the shallow_copied cache is a copy of the original\n        assert idx._cache == shallow_copy._cache\n        assert idx._cache is not shallow_copy._cache\n        # cache values should reference the same object\n        for key, val in idx._cache.items():\n            assert shallow_copy._cache[key] is val, key",
        "begin_line": 883,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx#9",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx()",
        "snippet": "def idx():\n    # a MultiIndex used to test the general functionality of the\n    # general functionality of this object\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 2, 3, 3])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 9,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.idx_dup#28",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.idx_dup()",
        "snippet": "def idx_dup():\n    # compare tests/indexes/multi/conftest.py\n    major_axis = Index([\"foo\", \"bar\", \"baz\", \"qux\"])\n    minor_axis = Index([\"one\", \"two\"])\n\n    major_codes = np.array([0, 0, 1, 0, 1, 1])\n    minor_codes = np.array([0, 1, 0, 1, 0, 1])\n    index_names = [\"first\", \"second\"]\n    mi = MultiIndex(\n        levels=[major_axis, minor_axis],\n        codes=[major_codes, minor_codes],\n        names=index_names,\n        verify_integrity=False,\n    )\n    return mi",
        "begin_line": 28,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.index_names#46",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.index_names()",
        "snippet": "def index_names():\n    # names that match those in the idx fixture for testing equality of\n    # names assigned to the idx\n    return [\"first\", \"second\"]",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.compat_props#53",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.compat_props()",
        "snippet": "def compat_props():\n    # a MultiIndex must have these properties associated with it\n    return [\"shape\", \"ndim\", \"size\"]",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.narrow_multi_index#59",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.narrow_multi_index()",
        "snippet": "def narrow_multi_index():\n    \"\"\"\n    Return a MultiIndex that is narrower than the display (<80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    return pd.MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=[\"a\", \"b\", \"dti\"])",
        "begin_line": 59,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.multi.conftest.wide_multi_index#70",
        "src_path": "pandas/tests/indexes/multi/conftest.py",
        "class_name": "pandas.tests.indexes.multi.conftest",
        "signature": "pandas.tests.indexes.multi.conftest.wide_multi_index()",
        "snippet": "def wide_multi_index():\n    \"\"\"\n    Return a MultiIndex that is wider than the display (>80 characters).\n    \"\"\"\n    n = 1000\n    ci = pd.CategoricalIndex(list(\"a\" * n) + ([\"abc\"] * n))\n    dti = pd.date_range(\"2000-01-01\", freq=\"s\", periods=n * 2)\n    levels = [ci, ci.codes + 9, dti, dti, dti]\n    names = [\"a\", \"b\", \"dti_1\", \"dti_2\", \"dti_3\"]\n    return pd.MultiIndex.from_arrays(levels, names=names)",
        "begin_line": 70,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid#12",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_argmax_axis_invalid(self)",
        "snippet": "    def test_argmax_axis_invalid(self):\n        # GH#23081\n        rng = self.create_index()\n        with pytest.raises(ValueError):\n            rng.argmax(axis=1)\n        with pytest.raises(ValueError):\n            rng.argmin(axis=2)\n        with pytest.raises(ValueError):\n            rng.min(axis=-2)\n        with pytest.raises(ValueError):\n            rng.max(axis=-3)",
        "begin_line": 12,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers#24",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_can_hold_identifiers(self)",
        "snippet": "    def test_can_hold_identifiers(self):\n        idx = self.create_index()\n        key = idx[0]\n        assert idx._can_hold_identifiers_and_holds_name(key) is False",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity#29",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)",
        "snippet": "    def test_shift_identity(self):\n\n        idx = self.create_index()\n        tm.assert_index_equal(idx, idx.shift(0))",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str#34",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)",
        "snippet": "    def test_str(self):\n\n        # test the string repr\n        idx = self.create_index()\n        idx.name = \"foo\"\n        assert not (f\"length={len(idx)}\" in str(idx))\n        assert \"'foo'\" in str(idx)\n        assert type(idx).__name__ in str(idx)\n\n        if hasattr(idx, \"tz\"):\n            if idx.tz is not None:\n                assert idx.tz in str(idx)\n        if hasattr(idx, \"freq\"):\n            assert f\"freq='{idx.freqstr}'\" in str(idx)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view#49",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)",
        "snippet": "    def test_view(self):\n        i = self.create_index()\n\n        i_view = i.view(\"i8\")\n        result = self._holder(i)\n        tm.assert_index_equal(result, i)\n\n        i_view = i.view(self._holder)\n        result = self._holder(i)\n        tm.assert_index_equal(result, i_view)",
        "begin_line": 49,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable#60",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_callable(self)",
        "snippet": "    def test_map_callable(self):\n        index = self.create_index()\n        expected = index + index.freq\n        result = index.map(lambda x: x + x.freq)\n        tm.assert_index_equal(result, expected)\n\n        # map to NaT\n        result = index.map(lambda x: pd.NaT if x == index[0] else x)\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        tm.assert_index_equal(result, expected)",
        "begin_line": 60,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike#78",
        "src_path": "pandas/tests/indexes/datetimelike.py",
        "class_name": "pandas.tests.indexes.datetimelike.DatetimeLike",
        "signature": "pandas.tests.indexes.datetimelike.DatetimeLike.test_map_dictlike(self, mapper)",
        "snippet": "    def test_map_dictlike(self, mapper):\n        index = self.create_index()\n        expected = index + index.freq\n\n        # don't compare the freqs\n        if isinstance(expected, pd.DatetimeIndex):\n            expected._data.freq = None\n\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        expected = pd.Index([pd.NaT] + index[1:].tolist())\n        result = index.map(mapper(expected, index))\n        tm.assert_index_equal(result, expected)\n\n        # empty map; these map to np.nan because we cannot know\n        # to re-infer things\n        expected = pd.Index([np.nan] * len(index))\n        result = index.map(mapper([], []))\n        tm.assert_index_equal(result, expected)",
        "begin_line": 78,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    }
]