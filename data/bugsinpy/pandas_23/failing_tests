coverage run -m pytest pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 26 items

pandas/tests/indexes/datetimes/test_setops.py .F.F.F.F.F.F.F.F.F.F.F.F.F [100%]

=================================== FAILURES ===================================
___________ TestDatetimeIndexSetOps.test_intersection_empty['UTC'-B] ___________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a67dd60>
tz_aware_fixture = 'UTC', freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, UTC]', freq='B'), obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, UTC]

pandas/_testing.py:611: AssertionError
_______ TestDatetimeIndexSetOps.test_intersection_empty['US/Eastern'-B] ________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a698f10>
tz_aware_fixture = 'US/Eastern', freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, US/Eastern]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, US/Eastern]

pandas/_testing.py:611: AssertionError
_______ TestDatetimeIndexSetOps.test_intersection_empty['Asia/Tokyo'-B] ________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a67d430>
tz_aware_fixture = 'Asia/Tokyo', freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, Asia/Tokyo]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, Asia/Tokyo]

pandas/_testing.py:611: AssertionError
___ TestDatetimeIndexSetOps.test_intersection_empty['dateutil/US/Pacific'-B] ___

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a698b20>
tz_aware_fixture = 'dateutil/US/Pacific', freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]

pandas/_testing.py:611: AssertionError
_ TestDatetimeIndexSetOps.test_intersection_empty['dateutil/Asia/Singapore'-B] _

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc52e5fe730>
tz_aware_fixture = 'dateutil/Asia/Singapore', freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]

pandas/_testing.py:611: AssertionError
__________ TestDatetimeIndexSetOps.test_intersection_empty[tzutc()-B] __________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a6bc6d0>
tz_aware_fixture = tzutc(), freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, tzutc()]', freq='B'), obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, tzutc()]

pandas/_testing.py:611: AssertionError
_________ TestDatetimeIndexSetOps.test_intersection_empty[tzlocal()-B] _________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a725f70>
tz_aware_fixture = tzlocal(), freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, tzlocal()]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, tzlocal()]

pandas/_testing.py:611: AssertionError
___ TestDatetimeIndexSetOps.test_intersection_empty[pytz.FixedOffset(300)-B] ___

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a5cef40>
tz_aware_fixture = pytz.FixedOffset(300), freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, pytz.FixedOffset(300)]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, pytz.FixedOffset(300)]

pandas/_testing.py:611: AssertionError
___________ TestDatetimeIndexSetOps.test_intersection_empty[<UTC>-B] ___________

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a56f850>
tz_aware_fixture = <UTC>, freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, UTC]', freq='B'), obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, UTC]

pandas/_testing.py:611: AssertionError
__ TestDatetimeIndexSetOps.test_intersection_empty[pytz.FixedOffset(-300)-B] ___

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a28e7f0>
tz_aware_fixture = pytz.FixedOffset(-300), freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, pytz.FixedOffset(-300)]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, pytz.FixedOffset(-300)]

pandas/_testing.py:611: AssertionError
___ TestDatetimeIndexSetOps.test_intersection_empty[datetime.timezone.utc-B] ___

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a42a3a0>
tz_aware_fixture = datetime.timezone.utc, freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, UTC]', freq='B'), obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, UTC]

pandas/_testing.py:611: AssertionError
_ TestDatetimeIndexSetOps.test_intersection_empty[datetime.timezone(datetime.timedelta(seconds=3600))-B] _

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a42a640>
tz_aware_fixture = datetime.timezone(datetime.timedelta(seconds=3600))
freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, UTC+01:00]', freq='B')
obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, UTC+01:00]

pandas/_testing.py:611: AssertionError
_ TestDatetimeIndexSetOps.test_intersection_empty[datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')-B] _

self = <pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndexSetOps object at 0x7fc51a42adf0>
tz_aware_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')
freq = 'B'

    @pytest.mark.parametrize("freq", ["T", "B"])
    def test_intersection_empty(self, tz_aware_fixture, freq):
        # empty same freq GH2129
        tz = tz_aware_fixture
        rng = date_range("6/1/2000", "6/15/2000", freq=freq, tz=tz)
        result = rng[0:0].intersection(rng)
        assert len(result) == 0
        assert result.freq == rng.freq
    
        result = rng.intersection(rng[0:0])
        assert len(result) == 0
        assert result.freq == rng.freq
    
        # no overlap GH#33604
        result = rng[:3].intersection(rng[-3:])
>       tm.assert_index_equal(result, rng[:0])

pandas/tests/indexes/datetimes/test_setops.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

l = DatetimeIndex([], dtype='datetime64[ns]', freq=None)
r = DatetimeIndex([], dtype='datetime64[ns, foo]', freq='B'), obj = 'Index'

    def _check_types(l, r, obj="Index"):
        if exact:
            assert_class_equal(l, r, exact=exact, obj=obj)
    
            # Skip exact dtype checking when `check_categorical` is False
            if check_categorical:
>               assert_attr_equal("dtype", l, r, obj=obj)
E               AssertionError: Index are different
E               
E               Attribute "dtype" are different
E               [left]:  datetime64[ns]
E               [right]: datetime64[ns, foo]

pandas/_testing.py:611: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty['UTC'-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty['US/Eastern'-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty['Asia/Tokyo'-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty['dateutil/US/Pacific'-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty['dateutil/Asia/Singapore'-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[tzutc()-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[tzlocal()-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[pytz.FixedOffset(300)-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[<UTC>-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[pytz.FixedOffset(-300)-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[datetime.timezone.utc-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[datetime.timezone(datetime.timedelta(seconds=3600))-B]
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestDatetimeIndexSetOps::test_intersection_empty[datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')-B]
======================== 13 failed, 13 passed in 1.66s =========================

coverage run -m pytest pandas/tests/indexes/datetimes/test_setops.py::TestBusinessDatetimeIndex::test_intersection_bug
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexes/datetimes/test_setops.py F                          [100%]

=================================== FAILURES ===================================
_______________ TestBusinessDatetimeIndex.test_intersection_bug ________________

self = <pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex object at 0x7f4c41745e50>

    def test_intersection_bug(self):
        # GH #771
        a = bdate_range("11/30/2011", "12/31/2011")
        b = bdate_range("12/10/2011", "12/20/2011")
        result = a.intersection(b)
        tm.assert_index_equal(result, b)
>       assert result.freq == b.freq
E       AssertionError: assert None == <BusinessDay>
E        +  where None = DatetimeIndex(['2011-12-12', '2011-12-13', '2011-12-14', '2011-12-15',\n               '2011-12-16', '2011-12-19', '2011-12-20'],\n              dtype='datetime64[ns]', freq=None).freq
E        +  and   <BusinessDay> = DatetimeIndex(['2011-12-12', '2011-12-13', '2011-12-14', '2011-12-15',\n               '2011-12-16', '2011-12-19', '2011-12-20'],\n              dtype='datetime64[ns]', freq='B').freq

pandas/tests/indexes/datetimes/test_setops.py:473: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestBusinessDatetimeIndex::test_intersection_bug
============================== 1 failed in 0.17s ===============================

coverage run -m pytest pandas/tests/indexes/datetimes/test_setops.py::TestCustomDatetimeIndex::test_intersection_bug
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexes/datetimes/test_setops.py F                          [100%]

=================================== FAILURES ===================================
________________ TestCustomDatetimeIndex.test_intersection_bug _________________

self = <pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex object at 0x7f355ebabca0>

    def test_intersection_bug(self):
        # GH #771
        a = bdate_range("11/30/2011", "12/31/2011", freq="C")
        b = bdate_range("12/10/2011", "12/20/2011", freq="C")
        result = a.intersection(b)
        tm.assert_index_equal(result, b)
>       assert result.freq == b.freq
E       AssertionError: assert None == <CustomBusinessDay>
E        +  where None = DatetimeIndex(['2011-12-12', '2011-12-13', '2011-12-14', '2011-12-15',\n               '2011-12-16', '2011-12-19', '2011-12-20'],\n              dtype='datetime64[ns]', freq=None).freq
E        +  and   <CustomBusinessDay> = DatetimeIndex(['2011-12-12', '2011-12-13', '2011-12-14', '2011-12-15',\n               '2011-12-16', '2011-12-19', '2011-12-20'],\n              dtype='datetime64[ns]', freq='C').freq

pandas/tests/indexes/datetimes/test_setops.py:551: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/indexes/datetimes/test_setops.py::TestCustomDatetimeIndex::test_intersection_bug
============================== 1 failed in 0.15s ===============================
