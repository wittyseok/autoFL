[
    {
        "name": "pandas.tests.reductions.test_reductions.get_objs#28",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions",
        "signature": "pandas.tests.reductions.test_reductions.get_objs()",
        "snippet": "def get_objs():\n    indexes = [\n        tm.makeBoolIndex(10, name=\"a\"),\n        tm.makeIntIndex(10, name=\"a\"),\n        tm.makeFloatIndex(10, name=\"a\"),\n        tm.makeDateIndex(10, name=\"a\"),\n        tm.makeDateIndex(10, name=\"a\").tz_localize(tz=\"US/Eastern\"),\n        tm.makePeriodIndex(10, name=\"a\"),\n        tm.makeStringIndex(10, name=\"a\"),\n        tm.makeUnicodeIndex(10, name=\"a\"),\n    ]\n\n    arr = np.random.randn(10)\n    series = [Series(arr, index=idx, name=\"a\") for idx in indexes]\n\n    objs = indexes + series\n    return objs",
        "begin_line": 28,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestReductions.test_ops#53",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestReductions.test_ops(self, opname, obj)",
        "snippet": "    def test_ops(self, opname, obj):\n        result = getattr(obj, opname)()\n        if not isinstance(obj, PeriodIndex):\n            expected = getattr(obj.values, opname)()\n        else:\n            expected = pd.Period(\n                ordinal=getattr(obj._ndarray_values, opname)(), freq=obj.freq\n            )\n        try:\n            assert result == expected\n        except TypeError:\n            # comparing tz-aware series with np.array results in\n            # TypeError\n            expected = expected.astype(\"M8[ns]\").astype(\"int64\")\n            assert result.value == expected",
        "begin_line": 53,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestReductions.test_nanops#69",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestReductions.test_nanops(self)",
        "snippet": "    def test_nanops(self):\n        # GH#7261\n        for opname in [\"max\", \"min\"]:\n            for klass in [Index, Series]:\n                arg_op = \"arg\" + opname if klass is Index else \"idx\" + opname\n\n                obj = klass([np.nan, 2.0])\n                assert getattr(obj, opname)() == 2.0\n\n                obj = klass([np.nan])\n                assert pd.isna(getattr(obj, opname)())\n                assert pd.isna(getattr(obj, opname)(skipna=False))\n\n                obj = klass([])\n                assert pd.isna(getattr(obj, opname)())\n                assert pd.isna(getattr(obj, opname)(skipna=False))\n\n                obj = klass([pd.NaT, datetime(2011, 11, 1)])\n                # check DatetimeIndex monotonic path\n                assert getattr(obj, opname)() == datetime(2011, 11, 1)\n                assert getattr(obj, opname)(skipna=False) is pd.NaT\n\n                assert getattr(obj, arg_op)() == 1\n                result = getattr(obj, arg_op)(skipna=False)\n                if klass is Series:\n                    assert np.isnan(result)\n                else:\n                    assert result == -1\n\n                obj = klass([pd.NaT, datetime(2011, 11, 1), pd.NaT])\n                # check DatetimeIndex non-monotonic path\n                assert getattr(obj, opname)(), datetime(2011, 11, 1)\n                assert getattr(obj, opname)(skipna=False) is pd.NaT\n\n                assert getattr(obj, arg_op)() == 1\n                result = getattr(obj, arg_op)(skipna=False)\n                if klass is Series:\n                    assert np.isnan(result)\n                else:\n                    assert result == -1\n\n                for dtype in [\"M8[ns]\", \"datetime64[ns, UTC]\"]:\n                    # cases with empty Series/DatetimeIndex\n                    obj = klass([], dtype=dtype)\n\n                    assert getattr(obj, opname)() is pd.NaT\n                    assert getattr(obj, opname)(skipna=False) is pd.NaT\n\n                    with pytest.raises(ValueError, match=\"empty sequence\"):\n                        getattr(obj, arg_op)()\n                    with pytest.raises(ValueError, match=\"empty sequence\"):\n                        getattr(obj, arg_op)(skipna=False)\n\n        # argmin/max\n        obj = Index(np.arange(5, dtype=\"int64\"))\n        assert obj.argmin() == 0\n        assert obj.argmax() == 4\n\n        obj = Index([np.nan, 1, np.nan, 2])\n        assert obj.argmin() == 1\n        assert obj.argmax() == 3\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([np.nan])\n        assert obj.argmin() == -1\n        assert obj.argmax() == -1\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([pd.NaT, datetime(2011, 11, 1), datetime(2011, 11, 2), pd.NaT])\n        assert obj.argmin() == 1\n        assert obj.argmax() == 2\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1\n\n        obj = Index([pd.NaT])\n        assert obj.argmin() == -1\n        assert obj.argmax() == -1\n        assert obj.argmin(skipna=False) == -1\n        assert obj.argmax(skipna=False) == -1",
        "begin_line": 69,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestReductions.test_same_tz_min_max_axis_1#152",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestReductions.test_same_tz_min_max_axis_1(self, op, expected_col)",
        "snippet": "    def test_same_tz_min_max_axis_1(self, op, expected_col):\n        # GH 10390\n        df = DataFrame(\n            pd.date_range(\"2016-01-01 00:00:00\", periods=3, tz=\"UTC\"), columns=[\"a\"]\n        )\n        df[\"b\"] = df.a.subtract(pd.Timedelta(seconds=3600))\n        result = getattr(df, op)(axis=1)\n        expected = df[expected_col].rename(None)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 152,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestReductions.test_numpy_reduction_with_tz_aware_dtype#163",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestReductions.test_numpy_reduction_with_tz_aware_dtype(self, tz_aware_fixture, func)",
        "snippet": "    def test_numpy_reduction_with_tz_aware_dtype(self, tz_aware_fixture, func):\n        # GH 15552\n        tz = tz_aware_fixture\n        arg = pd.to_datetime([\"2019\"]).tz_localize(tz)\n        expected = Series(arg)\n        result = getattr(np, func)(expected, expected)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 163,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_max_min_range#187",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_max_min_range(self, start, stop, step)",
        "snippet": "    def test_max_min_range(self, start, stop, step):\n        # GH#17607\n        idx = RangeIndex(start, stop, step)\n        expected = idx._int64index.max()\n        result = idx.max()\n        assert result == expected\n\n        # skipna should be irrelevant since RangeIndex should never have NAs\n        result2 = idx.max(skipna=False)\n        assert result2 == expected\n\n        expected = idx._int64index.min()\n        result = idx.min()\n        assert result == expected\n\n        # skipna should be irrelevant since RangeIndex should never have NAs\n        result2 = idx.min(skipna=False)\n        assert result2 == expected\n\n        # empty\n        idx = RangeIndex(start, stop, -step)\n        assert isna(idx.max())\n        assert isna(idx.min())",
        "begin_line": 187,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_timedelta64#211",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_timedelta64(self)",
        "snippet": "    def test_minmax_timedelta64(self):\n\n        # monotonic\n        idx1 = TimedeltaIndex([\"1 days\", \"2 days\", \"3 days\"])\n        assert idx1.is_monotonic\n\n        # non-monotonic\n        idx2 = TimedeltaIndex([\"1 days\", np.nan, \"3 days\", \"NaT\"])\n        assert not idx2.is_monotonic\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == Timedelta(\"1 days\")\n            assert idx.max() == Timedelta(\"3 days\")\n            assert idx.argmin() == 0\n            assert idx.argmax() == 2\n\n        for op in [\"min\", \"max\"]:\n            # Return NaT\n            obj = TimedeltaIndex([])\n            assert pd.isna(getattr(obj, op)())\n\n            obj = TimedeltaIndex([pd.NaT])\n            assert pd.isna(getattr(obj, op)())\n\n            obj = TimedeltaIndex([pd.NaT, pd.NaT, pd.NaT])\n            assert pd.isna(getattr(obj, op)())",
        "begin_line": 211,
        "end_line": 236,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_timedelta64#238",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_timedelta64(self)",
        "snippet": "    def test_numpy_minmax_timedelta64(self):\n        td = timedelta_range(\"16815 days\", \"16820 days\", freq=\"D\")\n\n        assert np.min(td) == Timedelta(\"16815 days\")\n        assert np.max(td) == Timedelta(\"16820 days\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(td, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(td, out=0)\n\n        assert np.argmin(td) == 0\n        assert np.argmax(td) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(td, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(td, out=0)",
        "begin_line": 238,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_timedelta_ops#259",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_timedelta_ops(self)",
        "snippet": "    def test_timedelta_ops(self):\n        # GH#4984\n        # make sure ops return Timedelta\n        s = Series(\n            [Timestamp(\"20130101\") + timedelta(seconds=i * i) for i in range(10)]\n        )\n        td = s.diff()\n\n        result = td.mean()\n        expected = to_timedelta(timedelta(seconds=9))\n        assert result == expected\n\n        result = td.to_frame().mean()\n        assert result[0] == expected\n\n        result = td.quantile(0.1)\n        expected = Timedelta(np.timedelta64(2600, \"ms\"))\n        assert result == expected\n\n        result = td.median()\n        expected = to_timedelta(\"00:00:09\")\n        assert result == expected\n\n        result = td.to_frame().median()\n        assert result[0] == expected\n\n        # GH#6462\n        # consistency in returned values for sum\n        result = td.sum()\n        expected = to_timedelta(\"00:01:21\")\n        assert result == expected\n\n        result = td.to_frame().sum()\n        assert result[0] == expected\n\n        # std\n        result = td.std()\n        expected = to_timedelta(Series(td.dropna().values).std())\n        assert result == expected\n\n        result = td.to_frame().std()\n        assert result[0] == expected\n\n        # invalid ops\n        for op in [\"skew\", \"kurt\", \"sem\", \"prod\", \"var\"]:\n            msg = \"reduction operation '{}' not allowed for this dtype\"\n            with pytest.raises(TypeError, match=msg.format(op)):\n                getattr(td, op)()\n\n            with pytest.raises(TypeError, match=msg.format(op)):\n                getattr(td.to_frame(), op)(numeric_only=False)\n\n        # GH#10040\n        # make sure NaT is properly handled by median()\n        s = Series([Timestamp(\"2015-02-03\"), Timestamp(\"2015-02-07\")])\n        assert s.diff().median() == timedelta(days=4)\n\n        s = Series(\n            [Timestamp(\"2015-02-03\"), Timestamp(\"2015-02-07\"), Timestamp(\"2015-02-15\")]\n        )\n        assert s.diff().median() == timedelta(days=6)",
        "begin_line": 259,
        "end_line": 319,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_tz#321",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_tz(self, tz_naive_fixture)",
        "snippet": "    def test_minmax_tz(self, tz_naive_fixture):\n        tz = tz_naive_fixture\n        # monotonic\n        idx1 = pd.DatetimeIndex([\"2011-01-01\", \"2011-01-02\", \"2011-01-03\"], tz=tz)\n        assert idx1.is_monotonic\n\n        # non-monotonic\n        idx2 = pd.DatetimeIndex(\n            [\"2011-01-01\", pd.NaT, \"2011-01-03\", \"2011-01-02\", pd.NaT], tz=tz\n        )\n        assert not idx2.is_monotonic\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == Timestamp(\"2011-01-01\", tz=tz)\n            assert idx.max() == Timestamp(\"2011-01-03\", tz=tz)\n            assert idx.argmin() == 0\n            assert idx.argmax() == 2",
        "begin_line": 321,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_nat_datetime64#340",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_nat_datetime64(self, op)",
        "snippet": "    def test_minmax_nat_datetime64(self, op):\n        # Return NaT\n        obj = DatetimeIndex([])\n        assert pd.isna(getattr(obj, op)())\n\n        obj = DatetimeIndex([pd.NaT])\n        assert pd.isna(getattr(obj, op)())\n\n        obj = DatetimeIndex([pd.NaT, pd.NaT, pd.NaT])\n        assert pd.isna(getattr(obj, op)())",
        "begin_line": 340,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_integer#351",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_integer(self)",
        "snippet": "    def test_numpy_minmax_integer(self):\n        # GH#26125\n        idx = Index([1, 2, 3])\n\n        expected = idx.values.max()\n        result = np.max(idx)\n        assert result == expected\n\n        expected = idx.values.min()\n        result = np.min(idx)\n        assert result == expected\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(idx, out=0)\n\n        expected = idx.values.argmax()\n        result = np.argmax(idx)\n        assert result == expected\n\n        expected = idx.values.argmin()\n        result = np.argmin(idx)\n        assert result == expected\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(idx, out=0)",
        "begin_line": 351,
        "end_line": 381,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_range#383",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_range(self)",
        "snippet": "    def test_numpy_minmax_range(self):\n        # GH#26125\n        idx = RangeIndex(0, 10, 3)\n\n        expected = idx._int64index.max()\n        result = np.max(idx)\n        assert result == expected\n\n        expected = idx._int64index.min()\n        result = np.min(idx)\n        assert result == expected\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(idx, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(idx, out=0)",
        "begin_line": 383,
        "end_line": 399,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_datetime64#404",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_datetime64(self)",
        "snippet": "    def test_numpy_minmax_datetime64(self):\n        dr = pd.date_range(start=\"2016-01-15\", end=\"2016-01-20\")\n\n        assert np.min(dr) == Timestamp(\"2016-01-15 00:00:00\", freq=\"D\")\n        assert np.max(dr) == Timestamp(\"2016-01-20 00:00:00\", freq=\"D\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(dr, out=0)\n\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(dr, out=0)\n\n        assert np.argmin(dr) == 0\n        assert np.argmax(dr) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(dr, out=0)\n\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(dr, out=0)",
        "begin_line": 404,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_period#427",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_minmax_period(self)",
        "snippet": "    def test_minmax_period(self):\n\n        # monotonic\n        idx1 = pd.PeriodIndex([NaT, \"2011-01-01\", \"2011-01-02\", \"2011-01-03\"], freq=\"D\")\n        assert idx1.is_monotonic\n\n        # non-monotonic\n        idx2 = pd.PeriodIndex(\n            [\"2011-01-01\", NaT, \"2011-01-03\", \"2011-01-02\", NaT], freq=\"D\"\n        )\n        assert not idx2.is_monotonic\n\n        for idx in [idx1, idx2]:\n            assert idx.min() == pd.Period(\"2011-01-01\", freq=\"D\")\n            assert idx.max() == pd.Period(\"2011-01-03\", freq=\"D\")\n        assert idx1.argmin() == 1\n        assert idx2.argmin() == 0\n        assert idx1.argmax() == 3\n        assert idx2.argmax() == 2\n\n        for op in [\"min\", \"max\"]:\n            # Return NaT\n            obj = PeriodIndex([], freq=\"M\")\n            result = getattr(obj, op)()\n            assert result is NaT\n\n            obj = PeriodIndex([NaT], freq=\"M\")\n            result = getattr(obj, op)()\n            assert result is NaT\n\n            obj = PeriodIndex([NaT, NaT, NaT], freq=\"M\")\n            result = getattr(obj, op)()\n            assert result is NaT",
        "begin_line": 427,
        "end_line": 459,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_period#461",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_numpy_minmax_period(self)",
        "snippet": "    def test_numpy_minmax_period(self):\n        pr = pd.period_range(start=\"2016-01-15\", end=\"2016-01-20\")\n\n        assert np.min(pr) == Period(\"2016-01-15\", freq=\"D\")\n        assert np.max(pr) == Period(\"2016-01-20\", freq=\"D\")\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.min(pr, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.max(pr, out=0)\n\n        assert np.argmin(pr) == 0\n        assert np.argmax(pr) == 5\n\n        errmsg = \"the 'out' parameter is not supported\"\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmin(pr, out=0)\n        with pytest.raises(ValueError, match=errmsg):\n            np.argmax(pr, out=0)",
        "begin_line": 461,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_min_max_categorical#482",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestIndexReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestIndexReductions.test_min_max_categorical(self)",
        "snippet": "    def test_min_max_categorical(self):\n\n        ci = pd.CategoricalIndex(list(\"aabbca\"), categories=list(\"cab\"), ordered=False)\n        with pytest.raises(TypeError):\n            ci.min()\n        with pytest.raises(TypeError):\n            ci.max()\n\n        ci = pd.CategoricalIndex(list(\"aabbca\"), categories=list(\"cab\"), ordered=True)\n        assert ci.min() == \"c\"\n        assert ci.max() == \"b\"",
        "begin_line": 482,
        "end_line": 492,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_inf#500",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_inf(self)",
        "snippet": "    def test_sum_inf(self):\n        s = Series(np.random.randn(10))\n        s2 = s.copy()\n\n        s[5:8] = np.inf\n        s2[5:8] = np.nan\n\n        assert np.isinf(s.sum())\n\n        arr = np.random.randn(100, 100).astype(\"f4\")\n        arr[:, 2] = np.inf\n\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            tm.assert_almost_equal(s.sum(), s2.sum())\n\n        res = nanops.nansum(arr, axis=1)\n        assert np.isinf(res).all()",
        "begin_line": 500,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty#520",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty(self, method, unit, use_bottleneck)",
        "snippet": "    def test_empty(self, method, unit, use_bottleneck):\n        with pd.option_context(\"use_bottleneck\", use_bottleneck):\n            # GH#9422 / GH#18921\n            # Entirely empty\n            s = Series([])\n            # NA by default\n            result = getattr(s, method)()\n            assert result == unit\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(min_count=1)\n            assert pd.isna(result)\n\n            # Skipna, default\n            result = getattr(s, method)(skipna=True)\n            result == unit\n\n            # Skipna, explicit\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(skipna=True, min_count=1)\n            assert pd.isna(result)\n\n            # All-NA\n            s = Series([np.nan])\n            # NA by default\n            result = getattr(s, method)()\n            assert result == unit\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(min_count=1)\n            assert pd.isna(result)\n\n            # Skipna, default\n            result = getattr(s, method)(skipna=True)\n            result == unit\n\n            # skipna, explicit\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == unit\n\n            result = getattr(s, method)(skipna=True, min_count=1)\n            assert pd.isna(result)\n\n            # Mix of valid, empty\n            s = Series([np.nan, 1])\n            # Default\n            result = getattr(s, method)()\n            assert result == 1.0\n\n            # Explicit\n            result = getattr(s, method)(min_count=0)\n            assert result == 1.0\n\n            result = getattr(s, method)(min_count=1)\n            assert result == 1.0\n\n            # Skipna\n            result = getattr(s, method)(skipna=True)\n            assert result == 1.0\n\n            result = getattr(s, method)(skipna=True, min_count=0)\n            assert result == 1.0\n\n            result = getattr(s, method)(skipna=True, min_count=1)\n            assert result == 1.0\n\n            # GH#844 (changed in GH#9422)\n            df = DataFrame(np.empty((10, 0)))\n            assert (getattr(df, method)(1) == unit).all()\n\n            s = pd.Series([1])\n            result = getattr(s, method)(min_count=2)\n            assert pd.isna(result)\n\n            s = pd.Series([np.nan])\n            result = getattr(s, method)(min_count=2)\n            assert pd.isna(result)\n\n            s = pd.Series([np.nan, 1])\n            result = getattr(s, method)(min_count=2)\n            assert pd.isna(result)",
        "begin_line": 520,
        "end_line": 608,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_multi#611",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_multi(self, method, unit)",
        "snippet": "    def test_empty_multi(self, method, unit):\n        s = pd.Series(\n            [1, np.nan, np.nan, np.nan],\n            index=pd.MultiIndex.from_product([(\"a\", \"b\"), (0, 1)]),\n        )\n        # 1 / 0 by default\n        result = getattr(s, method)(level=0)\n        expected = pd.Series([1, unit], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)\n\n        # min_count=0\n        result = getattr(s, method)(level=0, min_count=0)\n        expected = pd.Series([1, unit], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)\n\n        # min_count=1\n        result = getattr(s, method)(level=0, min_count=1)\n        expected = pd.Series([1, np.nan], index=[\"a\", \"b\"])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 611,
        "end_line": 629,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_ops_consistency_on_empty#632",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_ops_consistency_on_empty(self, method)",
        "snippet": "    def test_ops_consistency_on_empty(self, method):\n\n        # GH#7869\n        # consistency on empty\n\n        # float\n        result = getattr(Series(dtype=float), method)()\n        assert pd.isna(result)\n\n        # timedelta64[ns]\n        tdser = Series([], dtype=\"m8[ns]\")\n        if method == \"var\":\n            with pytest.raises(TypeError, match=\"operation 'var' not allowed\"):\n                getattr(tdser, method)()\n        else:\n            result = getattr(tdser, method)()\n            assert result is pd.NaT",
        "begin_line": 632,
        "end_line": 648,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_nansum_buglet#650",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_nansum_buglet(self)",
        "snippet": "    def test_nansum_buglet(self):\n        ser = Series([1.0, np.nan], index=[0, 1])\n        result = np.nansum(ser)\n        tm.assert_almost_equal(result, 1)",
        "begin_line": 650,
        "end_line": 653,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_overflow#656",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_sum_overflow(self, use_bottleneck)",
        "snippet": "    def test_sum_overflow(self, use_bottleneck):\n\n        with pd.option_context(\"use_bottleneck\", use_bottleneck):\n            # GH#6915\n            # overflowing on the smaller int dtypes\n            for dtype in [\"int32\", \"int64\"]:\n                v = np.arange(5000000, dtype=dtype)\n                s = Series(v)\n\n                result = s.sum(skipna=False)\n                assert int(result) == v.sum(dtype=\"int64\")\n                result = s.min(skipna=False)\n                assert int(result) == 0\n                result = s.max(skipna=False)\n                assert int(result) == v[-1]\n\n            for dtype in [\"float32\", \"float64\"]:\n                v = np.arange(5000000, dtype=dtype)\n                s = Series(v)\n\n                result = s.sum(skipna=False)\n                assert result == v.sum(dtype=dtype)\n                result = s.min(skipna=False)\n                assert np.allclose(float(result), 0.0)\n                result = s.max(skipna=False)\n                assert np.allclose(float(result), v[-1])",
        "begin_line": 656,
        "end_line": 681,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_timeseries_reductions_return_nat#683",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_empty_timeseries_reductions_return_nat(self)",
        "snippet": "    def test_empty_timeseries_reductions_return_nat(self):\n        # covers GH#11245\n        for dtype in (\"m8[ns]\", \"m8[ns]\", \"M8[ns]\", \"M8[ns, UTC]\"):\n            assert Series([], dtype=dtype).min() is pd.NaT\n            assert Series([], dtype=dtype).max() is pd.NaT\n            assert Series([], dtype=dtype).min(skipna=False) is pd.NaT\n            assert Series([], dtype=dtype).max(skipna=False) is pd.NaT",
        "begin_line": 683,
        "end_line": 689,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmin_deprecated#691",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmin_deprecated(self)",
        "snippet": "    def test_numpy_argmin_deprecated(self):\n        # See GH#16830\n        data = np.arange(1, 11)\n\n        s = Series(data, index=data)\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            # The deprecation of Series.argmin also causes a deprecation\n            # warning when calling np.argmin. This behavior is temporary\n            # until the implementation of Series.argmin is corrected.\n            result = np.argmin(s)\n\n        assert result == 1\n\n        with tm.assert_produces_warning(FutureWarning):\n            # argmin is aliased to idxmin\n            result = s.argmin()\n\n        assert result == 1\n\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            msg = \"the 'out' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argmin(s, out=data)",
        "begin_line": 691,
        "end_line": 713,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmax_deprecated#715",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_numpy_argmax_deprecated(self)",
        "snippet": "    def test_numpy_argmax_deprecated(self):\n        # See GH#16830\n        data = np.arange(1, 11)\n\n        s = Series(data, index=data)\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            # The deprecation of Series.argmax also causes a deprecation\n            # warning when calling np.argmax. This behavior is temporary\n            # until the implementation of Series.argmax is corrected.\n            result = np.argmax(s)\n        assert result == 10\n\n        with tm.assert_produces_warning(FutureWarning):\n            # argmax is aliased to idxmax\n            result = s.argmax()\n\n        assert result == 10\n\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            msg = \"the 'out' parameter is not supported\"\n            with pytest.raises(ValueError, match=msg):\n                np.argmax(s, out=data)",
        "begin_line": 715,
        "end_line": 736,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmin#738",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmin(self)",
        "snippet": "    def test_idxmin(self):\n        # test idxmin\n        # _check_stat_op approach can not be used here because of isna check.\n        string_series = tm.makeStringSeries().rename(\"series\")\n\n        # add some NaNs\n        string_series[5:15] = np.NaN\n\n        # skipna or no\n        assert string_series[string_series.idxmin()] == string_series.min()\n        assert pd.isna(string_series.idxmin(skipna=False))\n\n        # no NaNs\n        nona = string_series.dropna()\n        assert nona[nona.idxmin()] == nona.min()\n        assert nona.index.values.tolist().index(nona.idxmin()) == nona.values.argmin()\n\n        # all NaNs\n        allna = string_series * np.nan\n        assert pd.isna(allna.idxmin())\n\n        # datetime64[ns]\n        s = Series(pd.date_range(\"20130102\", periods=6))\n        result = s.idxmin()\n        assert result == 0\n\n        s[0] = np.nan\n        result = s.idxmin()\n        assert result == 1",
        "begin_line": 738,
        "end_line": 766,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmax#768",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxmax(self)",
        "snippet": "    def test_idxmax(self):\n        # test idxmax\n        # _check_stat_op approach can not be used here because of isna check.\n        string_series = tm.makeStringSeries().rename(\"series\")\n\n        # add some NaNs\n        string_series[5:15] = np.NaN\n\n        # skipna or no\n        assert string_series[string_series.idxmax()] == string_series.max()\n        assert pd.isna(string_series.idxmax(skipna=False))\n\n        # no NaNs\n        nona = string_series.dropna()\n        assert nona[nona.idxmax()] == nona.max()\n        assert nona.index.values.tolist().index(nona.idxmax()) == nona.values.argmax()\n\n        # all NaNs\n        allna = string_series * np.nan\n        assert pd.isna(allna.idxmax())\n\n        from pandas import date_range\n\n        s = Series(date_range(\"20130102\", periods=6))\n        result = s.idxmax()\n        assert result == 5\n\n        s[5] = np.nan\n        result = s.idxmax()\n        assert result == 4\n\n        # Float64Index\n        # GH#5914\n        s = pd.Series([1, 2, 3], [1.1, 2.1, 3.1])\n        result = s.idxmax()\n        assert result == 3.1\n        result = s.idxmin()\n        assert result == 1.1\n\n        s = pd.Series(s.index, s.index)\n        result = s.idxmax()\n        assert result == 3.1\n        result = s.idxmin()\n        assert result == 1.1",
        "begin_line": 768,
        "end_line": 811,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any#813",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any(self)",
        "snippet": "    def test_all_any(self):\n        ts = tm.makeTimeSeries()\n        bool_series = ts > 0\n        assert not bool_series.all()\n        assert bool_series.any()\n\n        # Alternative types, with implicit 'object' dtype.\n        s = Series([\"abc\", True])\n        assert \"abc\" == s.any()  # 'abc' || True => 'abc'",
        "begin_line": 813,
        "end_line": 821,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any_params#823",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_all_any_params(self)",
        "snippet": "    def test_all_any_params(self):\n        # Check skipna, with implicit 'object' dtype.\n        s1 = Series([np.nan, True])\n        s2 = Series([np.nan, False])\n        assert s1.all(skipna=False)  # nan && True => True\n        assert s1.all(skipna=True)\n        assert np.isnan(s2.any(skipna=False))  # nan || False => nan\n        assert not s2.any(skipna=True)\n\n        # Check level.\n        s = pd.Series([False, False, True, True, False, True], index=[0, 0, 1, 1, 2, 2])\n        tm.assert_series_equal(s.all(level=0), Series([False, True, False]))\n        tm.assert_series_equal(s.any(level=0), Series([False, True, True]))\n\n        # bool_only is not implemented with level option.\n        with pytest.raises(NotImplementedError):\n            s.any(bool_only=True, level=0)\n        with pytest.raises(NotImplementedError):\n            s.all(bool_only=True, level=0)\n\n        # bool_only is not implemented alone.\n        with pytest.raises(NotImplementedError):\n            s.any(bool_only=True)\n        with pytest.raises(NotImplementedError):\n            s.all(bool_only=True)",
        "begin_line": 823,
        "end_line": 847,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_timedelta64_analytics#849",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_timedelta64_analytics(self)",
        "snippet": "    def test_timedelta64_analytics(self):\n\n        # index min/max\n        dti = pd.date_range(\"2012-1-1\", periods=3, freq=\"D\")\n        td = Series(dti) - pd.Timestamp(\"20120101\")\n\n        result = td.idxmin()\n        assert result == 0\n\n        result = td.idxmax()\n        assert result == 2\n\n        # GH#2982\n        # with NaT\n        td[0] = np.nan\n\n        result = td.idxmin()\n        assert result == 1\n\n        result = td.idxmax()\n        assert result == 2\n\n        # abs\n        s1 = Series(pd.date_range(\"20120101\", periods=3))\n        s2 = Series(pd.date_range(\"20120102\", periods=3))\n        expected = Series(s2 - s1)\n\n        # FIXME: don't leave commented-out code\n        # this fails as numpy returns timedelta64[us]\n        # result = np.abs(s1-s2)\n        # assert_frame_equal(result,expected)\n\n        result = (s1 - s2).abs()\n        tm.assert_series_equal(result, expected)\n\n        # max/min\n        result = td.max()\n        expected = pd.Timedelta(\"2 days\")\n        assert result == expected\n\n        result = td.min()\n        expected = pd.Timedelta(\"1 days\")\n        assert result == expected",
        "begin_line": 849,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_assert_idxminmax_raises#904",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_assert_idxminmax_raises(self, test_input, error_type)",
        "snippet": "    def test_assert_idxminmax_raises(self, test_input, error_type):\n        \"\"\"\n        Cases where ``Series.argmax`` and related should raise an exception\n        \"\"\"\n        with pytest.raises(error_type):\n            test_input.idxmin()\n        with pytest.raises(error_type):\n            test_input.idxmin(skipna=False)\n        with pytest.raises(error_type):\n            test_input.idxmax()\n        with pytest.raises(error_type):\n            test_input.idxmax(skipna=False)",
        "begin_line": 904,
        "end_line": 915,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxminmax_with_inf#917",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesReductions.test_idxminmax_with_inf(self)",
        "snippet": "    def test_idxminmax_with_inf(self):\n        # For numeric data with NA and Inf (GH #13595)\n        s = pd.Series([0, -np.inf, np.inf, np.nan])\n\n        assert s.idxmin() == 1\n        assert np.isnan(s.idxmin(skipna=False))\n\n        assert s.idxmax() == 2\n        assert np.isnan(s.idxmax(skipna=False))\n\n        # Using old-style behavior that treats floating point nan, -inf, and\n        # +inf as missing\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            assert s.idxmin() == 0\n            assert np.isnan(s.idxmin(skipna=False))\n            assert s.idxmax() == 0\n            np.isnan(s.idxmax(skipna=False))",
        "begin_line": 917,
        "end_line": 933,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_series#949",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_series(self, nat_ser)",
        "snippet": "    def test_minmax_nat_series(self, nat_ser):\n        # GH#23282\n        assert nat_ser.min() is pd.NaT\n        assert nat_ser.max() is pd.NaT\n        assert nat_ser.min(skipna=False) is pd.NaT\n        assert nat_ser.max(skipna=False) is pd.NaT",
        "begin_line": 949,
        "end_line": 954,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_dataframe#964",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_minmax_nat_dataframe(self, nat_df)",
        "snippet": "    def test_minmax_nat_dataframe(self, nat_df):\n        # GH#23282\n        assert nat_df.min()[0] is pd.NaT\n        assert nat_df.max()[0] is pd.NaT\n        assert nat_df.min(skipna=False)[0] is pd.NaT\n        assert nat_df.max(skipna=False)[0] is pd.NaT",
        "begin_line": 964,
        "end_line": 969,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max#971",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max(self)",
        "snippet": "    def test_min_max(self):\n        rng = pd.date_range(\"1/1/2000\", \"12/31/2000\")\n        rng2 = rng.take(np.random.permutation(len(rng)))\n\n        the_min = rng2.min()\n        the_max = rng2.max()\n        assert isinstance(the_min, pd.Timestamp)\n        assert isinstance(the_max, pd.Timestamp)\n        assert the_min == rng[0]\n        assert the_max == rng[-1]\n\n        assert rng.min() == rng[0]\n        assert rng.max() == rng[-1]",
        "begin_line": 971,
        "end_line": 983,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max_series#985",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestDatetime64SeriesReductions.test_min_max_series(self)",
        "snippet": "    def test_min_max_series(self):\n        rng = pd.date_range(\"1/1/2000\", periods=10, freq=\"4h\")\n        lvls = [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\"]\n        df = DataFrame({\"TS\": rng, \"V\": np.random.randn(len(rng)), \"L\": lvls})\n\n        result = df.TS.max()\n        exp = pd.Timestamp(df.TS.iat[-1])\n        assert isinstance(result, pd.Timestamp)\n        assert result == exp\n\n        result = df.TS.min()\n        exp = pd.Timestamp(df.TS.iat[0])\n        assert isinstance(result, pd.Timestamp)\n        assert result == exp",
        "begin_line": 985,
        "end_line": 998,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max#1006",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max(self)",
        "snippet": "    def test_min_max(self):\n        # unordered cats have no min/max\n        cat = Series(Categorical([\"a\", \"b\", \"c\", \"d\"], ordered=False))\n        with pytest.raises(TypeError):\n            cat.min()\n        with pytest.raises(TypeError):\n            cat.max()\n\n        cat = Series(Categorical([\"a\", \"b\", \"c\", \"d\"], ordered=True))\n        _min = cat.min()\n        _max = cat.max()\n        assert _min == \"a\"\n        assert _max == \"d\"\n\n        cat = Series(\n            Categorical(\n                [\"a\", \"b\", \"c\", \"d\"], categories=[\"d\", \"c\", \"b\", \"a\"], ordered=True\n            )\n        )\n        _min = cat.min()\n        _max = cat.max()\n        assert _min == \"d\"\n        assert _max == \"a\"\n\n        cat = Series(\n            Categorical(\n                [np.nan, \"b\", \"c\", np.nan],\n                categories=[\"d\", \"c\", \"b\", \"a\"],\n                ordered=True,\n            )\n        )\n        _min = cat.min()\n        _max = cat.max()\n        assert np.isnan(_min)\n        assert _max == \"b\"\n\n        cat = Series(\n            Categorical(\n                [np.nan, 1, 2, np.nan], categories=[5, 4, 3, 2, 1], ordered=True\n            )\n        )\n        _min = cat.min()\n        _max = cat.max()\n        assert np.isnan(_min)\n        assert _max == 1",
        "begin_line": 1006,
        "end_line": 1050,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max_numeric_only#1052",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions",
        "signature": "pandas.tests.reductions.test_reductions.TestCategoricalSeriesReductions.test_min_max_numeric_only(self)",
        "snippet": "    def test_min_max_numeric_only(self):\n        # TODO deprecate numeric_only argument for Categorical and use\n        # skipna as well, see GH25303\n        cat = Series(\n            Categorical([\"a\", \"b\", np.nan, \"a\"], categories=[\"b\", \"a\"], ordered=True)\n        )\n\n        _min = cat.min()\n        _max = cat.max()\n        assert np.isnan(_min)\n        assert _max == \"a\"\n\n        _min = cat.min(numeric_only=True)\n        _max = cat.max(numeric_only=True)\n        assert _min == \"b\"\n        assert _max == \"a\"\n\n        _min = cat.min(numeric_only=False)\n        _max = cat.max(numeric_only=False)\n        assert np.isnan(_min)\n        assert _max == \"a\"",
        "begin_line": 1052,
        "end_line": 1072,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_empty#1084",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_empty(self, dropna, expected)",
        "snippet": "    def test_mode_empty(self, dropna, expected):\n        s = Series([], dtype=np.float64)\n        result = s.mode(dropna)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1084,
        "end_line": 1087,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical#1101",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical(self, dropna, data, expected, dt)",
        "snippet": "    def test_mode_numerical(self, dropna, data, expected, dt):\n        s = Series(data, dtype=dt)\n        result = s.mode(dropna)\n        expected = Series(expected, dtype=dt)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1101,
        "end_line": 1105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical_nan#1108",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_numerical_nan(self, dropna, expected)",
        "snippet": "    def test_mode_numerical_nan(self, dropna, expected):\n        s = Series([1, 1, 2, np.nan, np.nan])\n        result = s.mode(dropna)\n        expected = Series(expected)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1108,
        "end_line": 1112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_str_obj#1118",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_str_obj(self, dropna, expected1, expected2, expected3)",
        "snippet": "    def test_mode_str_obj(self, dropna, expected1, expected2, expected3):\n        # Test string and object types.\n        data = [\"a\"] * 2 + [\"b\"] * 3\n\n        s = Series(data, dtype=\"c\")\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"c\")\n        tm.assert_series_equal(result, expected1)\n\n        data = [\"foo\", \"bar\", \"bar\", np.nan, np.nan, np.nan]\n\n        s = Series(data, dtype=object)\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=object)\n        tm.assert_series_equal(result, expected2)\n\n        data = [\"foo\", \"bar\", \"bar\", np.nan, np.nan, np.nan]\n\n        s = Series(data, dtype=object).astype(str)\n        result = s.mode(dropna)\n        expected3 = Series(expected3, dtype=str)\n        tm.assert_series_equal(result, expected3)",
        "begin_line": 1118,
        "end_line": 1139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_mixeddtype#1145",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_mixeddtype(self, dropna, expected1, expected2)",
        "snippet": "    def test_mode_mixeddtype(self, dropna, expected1, expected2):\n        s = Series([1, \"foo\", \"foo\"])\n        result = s.mode(dropna)\n        expected = Series(expected1)\n        tm.assert_series_equal(result, expected)\n\n        s = Series([1, \"foo\", \"foo\", np.nan, np.nan, np.nan])\n        result = s.mode(dropna)\n        expected = Series(expected2, dtype=object)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1145,
        "end_line": 1154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_datetime#1167",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_datetime(self, dropna, expected1, expected2)",
        "snippet": "    def test_mode_datetime(self, dropna, expected1, expected2):\n        s = Series(\n            [\"2011-01-03\", \"2013-01-02\", \"1900-05-03\", \"nan\", \"nan\"], dtype=\"M8[ns]\"\n        )\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"M8[ns]\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(\n            [\n                \"2011-01-03\",\n                \"2013-01-02\",\n                \"1900-05-03\",\n                \"2011-01-03\",\n                \"2013-01-02\",\n                \"nan\",\n                \"nan\",\n            ],\n            dtype=\"M8[ns]\",\n        )\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"M8[ns]\")\n        tm.assert_series_equal(result, expected2)",
        "begin_line": 1167,
        "end_line": 1189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_timedelta#1198",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_timedelta(self, dropna, expected1, expected2)",
        "snippet": "    def test_mode_timedelta(self, dropna, expected1, expected2):\n        # gh-5986: Test timedelta types.\n\n        s = Series(\n            [\"1 days\", \"-1 days\", \"0 days\", \"nan\", \"nan\"], dtype=\"timedelta64[ns]\"\n        )\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"timedelta64[ns]\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(\n            [\n                \"1 day\",\n                \"1 day\",\n                \"-1 day\",\n                \"-1 day 2 min\",\n                \"2 min\",\n                \"2 min\",\n                \"nan\",\n                \"nan\",\n            ],\n            dtype=\"timedelta64[ns]\",\n        )\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"timedelta64[ns]\")\n        tm.assert_series_equal(result, expected2)",
        "begin_line": 1198,
        "end_line": 1223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_category#1242",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_category(self, dropna, expected1, expected2, expected3)",
        "snippet": "    def test_mode_category(self, dropna, expected1, expected2, expected3):\n        s = Series(Categorical([1, 2, np.nan, np.nan]))\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=\"category\")\n        tm.assert_series_equal(result, expected1)\n\n        s = Series(Categorical([1, \"a\", \"a\", np.nan, np.nan]))\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=\"category\")\n        tm.assert_series_equal(result, expected2)\n\n        s = Series(\n            Categorical(\n                [1, 1, 2, 3, 3, np.nan, np.nan], categories=[3, 2, 1], ordered=True\n            )\n        )\n        result = s.mode(dropna)\n        expected3 = Series(expected3, dtype=\"category\")\n        tm.assert_series_equal(result, expected3)",
        "begin_line": 1242,
        "end_line": 1260,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_intoverflow#1266",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_intoverflow(self, dropna, expected1, expected2)",
        "snippet": "    def test_mode_intoverflow(self, dropna, expected1, expected2):\n        # Test for uint64 overflow.\n        s = Series([1, 2 ** 63, 2 ** 63], dtype=np.uint64)\n        result = s.mode(dropna)\n        expected1 = Series(expected1, dtype=np.uint64)\n        tm.assert_series_equal(result, expected1)\n\n        s = Series([1, 2 ** 63], dtype=np.uint64)\n        result = s.mode(dropna)\n        expected2 = Series(expected2, dtype=np.uint64)\n        tm.assert_series_equal(result, expected2)",
        "begin_line": 1266,
        "end_line": 1276,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_sortwarning#1278",
        "src_path": "pandas/tests/reductions/test_reductions.py",
        "class_name": "pandas.tests.reductions.test_reductions.TestSeriesMode",
        "signature": "pandas.tests.reductions.test_reductions.TestSeriesMode.test_mode_sortwarning(self)",
        "snippet": "    def test_mode_sortwarning(self):\n        # Check for the warning that is raised when the mode\n        # results cannot be sorted\n\n        expected = Series([\"foo\", np.nan])\n        s = Series([1, \"foo\", \"foo\", np.nan, np.nan])\n\n        with tm.assert_produces_warning(UserWarning, check_stacklevel=False):\n            result = s.mode(dropna=False)\n            result = result.sort_values().reset_index(drop=True)\n\n        tm.assert_series_equal(result, expected)",
        "begin_line": 1278,
        "end_line": 1289,
        "comment": "",
        "is_bug": false
    }
]