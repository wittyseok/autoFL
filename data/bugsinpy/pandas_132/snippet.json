[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#42",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None)",
        "snippet": "    def __call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method=None):\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(\n                    \"invalid validation method '{method}'\".format(method=method)\n                )",
        "begin_line": 42,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.003816793893129771,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.003816793893129771,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.compat.numpy.function.process_skipna#75",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.process_skipna(skipna, args)",
        "snippet": "def process_skipna(skipna, args):\n    if isinstance(skipna, ndarray) or skipna is None:\n        args = (skipna,) + args\n        skipna = True\n\n    return skipna, args",
        "begin_line": 75,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argmin_with_skipna#83",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argmin_with_skipna(skipna, args, kwargs)",
        "snippet": "def validate_argmin_with_skipna(skipna, args, kwargs):\n    \"\"\"\n    If 'Series.argmin' is called via the 'numpy' library,\n    the third parameter in its signature is 'out', which\n    takes either an ndarray or 'None', so check if the\n    'skipna' parameter is either an instance of ndarray or\n    is None, since 'skipna' itself should be a boolean\n    \"\"\"\n\n    skipna, args = process_skipna(skipna, args)\n    validate_argmin(args, kwargs)\n    return skipna",
        "begin_line": 83,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021640337589266391,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_argmax_with_skipna#97",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_argmax_with_skipna(skipna, args, kwargs)",
        "snippet": "def validate_argmax_with_skipna(skipna, args, kwargs):\n    \"\"\"\n    If 'Series.argmax' is called via the 'numpy' library,\n    the third parameter in its signature is 'out', which\n    takes either an ndarray or 'None', so check if the\n    'skipna' parameter is either an instance of ndarray or\n    is None, since 'skipna' itself should be a boolean\n    \"\"\"\n\n    skipna, args = process_skipna(skipna, args)\n    validate_argmax(args, kwargs)\n    return skipna",
        "begin_line": 97,
        "end_line": 108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021640337589266391,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.compat.numpy.function.validate_minmax_axis#404",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function",
        "signature": "pandas.compat.numpy.function.validate_minmax_axis(axis)",
        "snippet": "def validate_minmax_axis(axis):\n    \"\"\"\n    Ensure that the axis argument passed to min, max, argmin, or argmax is\n    zero or None, as otherwise it will be incorrectly ignored.\n\n    Parameters\n    ----------\n    axis : int or None\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    ndim = 1  # hard-coded for Index\n    if axis is None:\n        return\n    if axis >= ndim or (axis < 0 and ndim + axis < 0):\n        raise ValueError(\n            \"`axis` must be fewer than the number of \"\n            \"dimensions ({ndim})\".format(ndim=ndim)\n        )",
        "begin_line": 404,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018018018018018018,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__init__#343",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__init__(self, obj: NDFrame, keys=None, axis=0, level=None, grouper=None, exclusions=None, selection=None, as_index=True, sort=True, group_keys=True, squeeze=False, observed=False, **kwargs)",
        "snippet": "    def __init__(\n        self,\n        obj: NDFrame,\n        keys=None,\n        axis=0,\n        level=None,\n        grouper=None,\n        exclusions=None,\n        selection=None,\n        as_index=True,\n        sort=True,\n        group_keys=True,\n        squeeze=False,\n        observed=False,\n        **kwargs\n    ):\n\n        self._selection = selection\n\n        assert isinstance(obj, NDFrame), type(obj)\n        obj._consolidate_inplace()\n\n        self.level = level\n\n        if not as_index:\n            if not isinstance(obj, DataFrame):\n                raise TypeError(\"as_index=False only valid with DataFrame\")\n            if axis != 0:\n                raise ValueError(\"as_index=False only valid for axis=0\")\n\n        self.as_index = as_index\n        self.keys = keys\n        self.sort = sort\n        self.group_keys = group_keys\n        self.squeeze = squeeze\n        self.observed = observed\n        self.mutated = kwargs.pop(\"mutated\", False)\n\n        if grouper is None:\n            from pandas.core.groupby.grouper import _get_grouper\n\n            grouper, exclusions, obj = _get_grouper(\n                obj,\n                keys,\n                axis=axis,\n                level=level,\n                sort=sort,\n                observed=observed,\n                mutated=self.mutated,\n            )\n\n        self.obj = obj\n        self.axis = obj._get_axis_number(axis)\n        self.grouper = grouper\n        self.exclusions = set(exclusions) if exclusions else set()\n\n        # we accept no other args\n        validate_kwargs(\"group\", kwargs, {})",
        "begin_line": 343,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._selected_obj#494",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._selected_obj(self)",
        "snippet": "    def _selected_obj(self):\n\n        if self._selection is None or isinstance(self.obj, Series):\n            if self._group_selection is not None:\n                return self.obj[self._group_selection]\n            return self.obj\n        else:\n            return self.obj[self._selection]",
        "begin_line": 494,
        "end_line": 501,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._set_group_selection#515",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._set_group_selection(self)",
        "snippet": "    def _set_group_selection(self):\n        \"\"\"\n        Create group based selection.\n\n        Used when selection is not passed directly but instead via a grouper.\n\n        NOTE: this should be paired with a call to _reset_group_selection\n        \"\"\"\n        grp = self.grouper\n        if not (\n            self.as_index\n            and getattr(grp, \"groupings\", None) is not None\n            and self.obj.ndim > 1\n            and self._group_selection is None\n        ):\n            return\n\n        ax = self.obj._info_axis\n        groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n        if len(groupers):\n            # GH12839 clear selected obj cache when group selection changes\n            self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n            self._reset_cache(\"_selected_obj\")",
        "begin_line": 515,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy.__getattr__#557",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy.__getattr__(self, attr)",
        "snippet": "    def __getattr__(self, attr):\n        if attr in self._internal_names_set:\n            return object.__getattribute__(self, attr)\n        if attr in self.obj:\n            return self[attr]\n\n        raise AttributeError(\n            \"%r object has no attribute %r\" % (type(self).__name__, attr)\n        )",
        "begin_line": 557,
        "end_line": 565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._try_cast#789",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._try_cast(self, result, obj, numeric_only=False)",
        "snippet": "    def _try_cast(self, result, obj, numeric_only=False):\n        \"\"\"\n        Try to cast the result to our obj original type,\n        we may have roundtripped through object in the mean-time.\n\n        If numeric_only is True, then only try to cast numerics\n        and not datetimelikes.\n\n        \"\"\"\n        if obj.ndim > 1:\n            dtype = obj._values.dtype\n        else:\n            dtype = obj.dtype\n\n        if not is_scalar(result):\n            if is_datetime64tz_dtype(dtype):\n                # GH 23683\n                # Prior results _may_ have been generated in UTC.\n                # Ensure we localize to UTC first before converting\n                # to the target timezone\n                arr = extract_array(obj)\n                try:\n                    result = arr._from_sequence(result, dtype=\"datetime64[ns, UTC]\")\n                    result = result.astype(dtype)\n                except TypeError:\n                    # _try_cast was called at a point where the result\n                    # was already tz-aware\n                    pass\n            elif is_extension_array_dtype(dtype):\n                # The function can return something of any type, so check\n                # if the type is compatible with the calling EA.\n\n                # return the same type (Series) as our caller\n                try:\n                    result = obj._values._from_sequence(result, dtype=dtype)\n                except Exception:\n                    # https://github.com/pandas-dev/pandas/issues/22850\n                    # pandas has no control over what 3rd-party ExtensionArrays\n                    # do in _values_from_sequence. We still want ops to work\n                    # though, so we catch any regular Exception.\n                    pass\n            elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n                result = maybe_downcast_to_dtype(result, dtype)\n\n        return result",
        "begin_line": 789,
        "end_line": 833,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._cython_agg_general#881",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._cython_agg_general(self, how, alt=None, numeric_only=True, min_count=-1)",
        "snippet": "    def _cython_agg_general(self, how, alt=None, numeric_only=True, min_count=-1):\n        output = {}\n        for name, obj in self._iterate_slices():\n            is_numeric = is_numeric_dtype(obj.dtype)\n            if numeric_only and not is_numeric:\n                continue\n\n            result, names = self.grouper.aggregate(obj.values, how, min_count=min_count)\n            output[name] = self._try_cast(result, obj)\n\n        if len(output) == 0:\n            raise DataError(\"No numeric types to aggregate\")\n\n        return self._wrap_aggregated_output(output, names)",
        "begin_line": 881,
        "end_line": 894,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby._GroupBy._python_agg_general#896",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby._GroupBy",
        "signature": "pandas.core.groupby.groupby._GroupBy._python_agg_general(self, func, *args, **kwargs)",
        "snippet": "    def _python_agg_general(self, func, *args, **kwargs):\n        func = self._is_builtin_func(func)\n        f = lambda x: func(x, *args, **kwargs)\n\n        # iterate through \"columns\" ex exclusions to populate output dict\n        output = {}\n        for name, obj in self._iterate_slices():\n            try:\n                result, counts = self.grouper.agg_series(obj, f)\n            except TypeError:\n                continue\n            else:\n                output[name] = self._try_cast(result, obj, numeric_only=True)\n\n        if len(output) == 0:\n            return self._python_apply_general(f)\n\n        if self.grouper._filter_empty_groups:\n\n            mask = counts.ravel() > 0\n            for name, result in output.items():\n\n                # since we are masking, make sure that we have a float object\n                values = result\n                if is_numeric_dtype(values.dtype):\n                    values = ensure_float(values)\n\n                output[name] = self._try_cast(values[mask], result)\n\n        return self._wrap_aggregated_output(output)",
        "begin_line": 896,
        "end_line": 925,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._bool_agg#1081",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._bool_agg(self, val_test, skipna)",
        "snippet": "    def _bool_agg(self, val_test, skipna):\n        \"\"\"\n        Shared func to call any / all Cython GroupBy implementations.\n        \"\"\"\n\n        def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n            if is_object_dtype(vals):\n                vals = np.array([bool(x) for x in vals])\n            else:\n                vals = vals.astype(np.bool)\n\n            return vals.view(np.uint8), np.bool\n\n        def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n            return result.astype(inference, copy=False)\n\n        return self._get_cythonized_result(\n            \"group_any_all\",\n            self.grouper,\n            aggregate=True,\n            cython_dtype=np.uint8,\n            needs_values=True,\n            needs_mask=True,\n            pre_processing=objs_to_bool,\n            post_processing=result_to_bool,\n            val_test=val_test,\n            skipna=skipna,\n        )",
        "begin_line": 1081,
        "end_line": 1108,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.objs_to_bool#1086",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.objs_to_bool(vals: np.ndarray)",
        "snippet": "        def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n            if is_object_dtype(vals):\n                vals = np.array([bool(x) for x in vals])\n            else:\n                vals = vals.astype(np.bool)\n\n            return vals.view(np.uint8), np.bool",
        "begin_line": 1086,
        "end_line": 1092,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.result_to_bool#1094",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.result_to_bool(result: np.ndarray, inference: Type)",
        "snippet": "        def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n            return result.astype(inference, copy=False)",
        "begin_line": 1094,
        "end_line": 1095,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.any#1112",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.any(self, skipna=True)",
        "snippet": "    def any(self, skipna=True):\n        \"\"\"\n        Return True if any value in the group is truthful, else False.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Flag to ignore nan values during truth testing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._bool_agg(\"any\", skipna)",
        "begin_line": 1112,
        "end_line": 1125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.all#1129",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.all(self, skipna=True)",
        "snippet": "    def all(self, skipna=True):\n        \"\"\"\n        Return True if all values in the group are truthful, else False.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Flag to ignore nan values during truth testing.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self._bool_agg(\"all\", skipna)",
        "begin_line": 1129,
        "end_line": 1142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.groupby_function#1321",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.groupby_function(name, alias, npfunc, numeric_only=True, min_count=-1)",
        "snippet": "        def groupby_function(name, alias, npfunc, numeric_only=True, min_count=-1):\n\n            _local_template = \"\"\"\n            Compute %(f)s of group values.\n\n            Returns\n            -------\n            Series or DataFrame\n                Computed %(f)s of values within each group.\n            \"\"\"\n\n            @Substitution(name=\"groupby\", f=name)\n            @Appender(_common_see_also)\n            @Appender(_local_template)\n            def f(self, **kwargs):\n                if \"numeric_only\" not in kwargs:\n                    kwargs[\"numeric_only\"] = numeric_only\n                if \"min_count\" not in kwargs:\n                    kwargs[\"min_count\"] = min_count\n\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    elif \"decimal does not support skipna=True\" in str(err):\n                        # FIXME: kludge for test_decimal:test_in_numeric_groupby\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n\n                # coerce the resulting columns if we can\n                if isinstance(result, DataFrame):\n                    for col in result.columns:\n                        result[col] = self._try_cast(result[col], self.obj[col])\n                else:\n                    result = self._try_cast(result, self.obj)\n\n                return result\n\n            set_function_name(f, name, cls)\n\n            return f",
        "begin_line": 1321,
        "end_line": 1373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy.f#1335",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy.f(self, **kwargs)",
        "snippet": "            def f(self, **kwargs):\n                if \"numeric_only\" not in kwargs:\n                    kwargs[\"numeric_only\"] = numeric_only\n                if \"min_count\" not in kwargs:\n                    kwargs[\"min_count\"] = min_count\n\n                self._set_group_selection()\n\n                # try a cython aggregation if we can\n                try:\n                    return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n                except DataError:\n                    pass\n                except NotImplementedError as err:\n                    if \"function is not implemented for this dtype\" in str(err):\n                        # raised in _get_cython_function, in some cases can\n                        #  be trimmed by implementing cython funcs for more dtypes\n                        pass\n                    elif \"decimal does not support skipna=True\" in str(err):\n                        # FIXME: kludge for test_decimal:test_in_numeric_groupby\n                        pass\n                    else:\n                        raise\n\n                # apply a non-cython aggregation\n                result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n\n                # coerce the resulting columns if we can\n                if isinstance(result, DataFrame):\n                    for col in result.columns:\n                        result[col] = self._try_cast(result[col], self.obj[col])\n                else:\n                    result = self._try_cast(result, self.obj)\n\n                return result",
        "begin_line": 1335,
        "end_line": 1369,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._get_cythonized_result#2172",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._get_cythonized_result(self, how, grouper, aggregate=False, cython_dtype=None, needs_values=False, needs_mask=False, needs_ngroups=False, result_is_index=False, pre_processing=None, post_processing=None, **kwargs)",
        "snippet": "    def _get_cythonized_result(\n        self,\n        how,\n        grouper,\n        aggregate=False,\n        cython_dtype=None,\n        needs_values=False,\n        needs_mask=False,\n        needs_ngroups=False,\n        result_is_index=False,\n        pre_processing=None,\n        post_processing=None,\n        **kwargs\n    ):\n        \"\"\"\n        Get result for Cythonized functions.\n\n        Parameters\n        ----------\n        how : str, Cythonized function name to be called\n        grouper : Grouper object containing pertinent group info\n        aggregate : bool, default False\n            Whether the result should be aggregated to match the number of\n            groups\n        cython_dtype : default None\n            Type of the array that will be modified by the Cython call. If\n            `None`, the type will be inferred from the values of each slice\n        needs_values : bool, default False\n            Whether the values should be a part of the Cython call\n            signature\n        needs_mask : bool, default False\n            Whether boolean mask needs to be part of the Cython call\n            signature\n        needs_ngroups : bool, default False\n            Whether number of groups is part of the Cython call signature\n        result_is_index : bool, default False\n            Whether the result of the Cython operation is an index of\n            values to be retrieved, instead of the actual values themselves\n        pre_processing : function, default None\n            Function to be applied to `values` prior to passing to Cython.\n            Function should return a tuple where the first element is the\n            values to be passed to Cython and the second element is an optional\n            type which the values should be converted to after being returned\n            by the Cython operation. Raises if `needs_values` is False.\n        post_processing : function, default None\n            Function to be applied to result of Cython function. Should accept\n            an array of values as the first argument and type inferences as its\n            second argument, i.e. the signature should be\n            (ndarray, Type).\n        **kwargs : dict\n            Extra arguments to be passed back to Cython funcs\n\n        Returns\n        -------\n        `Series` or `DataFrame`  with filled values\n        \"\"\"\n        if result_is_index and aggregate:\n            raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n        if post_processing:\n            if not callable(pre_processing):\n                raise ValueError(\"'post_processing' must be a callable!\")\n        if pre_processing:\n            if not callable(pre_processing):\n                raise ValueError(\"'pre_processing' must be a callable!\")\n            if not needs_values:\n                raise ValueError(\n                    \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n                )\n\n        labels, _, ngroups = grouper.group_info\n        output = collections.OrderedDict()\n        base_func = getattr(libgroupby, how)\n\n        for name, obj in self._iterate_slices():\n            values = obj._data._values\n\n            if aggregate:\n                result_sz = ngroups\n            else:\n                result_sz = len(values)\n\n            if not cython_dtype:\n                cython_dtype = values.dtype\n\n            result = np.zeros(result_sz, dtype=cython_dtype)\n            func = partial(base_func, result, labels)\n            inferences = None\n\n            if needs_values:\n                vals = values\n                if pre_processing:\n                    vals, inferences = pre_processing(vals)\n                func = partial(func, vals)\n\n            if needs_mask:\n                mask = isna(values).view(np.uint8)\n                func = partial(func, mask)\n\n            if needs_ngroups:\n                func = partial(func, ngroups)\n\n            func(**kwargs)  # Call func to modify indexer values in place\n\n            if result_is_index:\n                result = algorithms.take_nd(values, result)\n\n            if post_processing:\n                result = post_processing(result, inferences)\n\n            output[name] = result\n\n        if aggregate:\n            return self._wrap_aggregated_output(output)\n        else:\n            return self._wrap_transformed_output(output)",
        "begin_line": 2172,
        "end_line": 2286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.GroupBy._reindex_output#2404",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby.GroupBy",
        "signature": "pandas.core.groupby.groupby.GroupBy._reindex_output(self, output)",
        "snippet": "    def _reindex_output(self, output):\n        \"\"\"\n        If we have categorical groupers, then we might want to make sure that\n        we have a fully re-indexed output to the levels. This means expanding\n        the output space to accommodate all values in the cartesian product of\n        our groups, regardless of whether they were observed in the data or\n        not. This will expand the output space if there are missing groups.\n\n        The method returns early without modifying the input if the number of\n        groupings is less than 2, self.observed == True or none of the groupers\n        are categorical.\n\n        Parameters\n        ----------\n        output: Series or DataFrame\n            Object resulting from grouping and applying an operation.\n\n        Returns\n        -------\n        Series or DataFrame\n            Object (potentially) re-indexed to include all possible groups.\n        \"\"\"\n        groupings = self.grouper.groupings\n        if groupings is None:\n            return output\n        elif len(groupings) == 1:\n            return output\n\n        # if we only care about the observed values\n        # we are done\n        elif self.observed:\n            return output\n\n        # reindexing only applies to a Categorical grouper\n        elif not any(\n            isinstance(ping.grouper, (Categorical, CategoricalIndex))\n            for ping in groupings\n        ):\n            return output\n\n        levels_list = [ping.group_index for ping in groupings]\n        index, _ = MultiIndex.from_product(\n            levels_list, names=self.grouper.names\n        ).sortlevel()\n\n        if self.as_index:\n            d = {self.obj._get_axis_name(self.axis): index, \"copy\": False}\n            return output.reindex(**d)\n\n        # GH 13204\n        # Here, the categorical in-axis groupers, which need to be fully\n        # expanded, are columns in `output`. An idea is to do:\n        # output = output.set_index(self.grouper.names)\n        #                .reindex(index).reset_index()\n        # but special care has to be taken because of possible not-in-axis\n        # groupers.\n        # So, we manually select and drop the in-axis grouper columns,\n        # reindex `output`, and then reset the in-axis grouper columns.\n\n        # Select in-axis groupers\n        in_axis_grps = (\n            (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n        )\n        g_nums, g_names = zip(*in_axis_grps)\n\n        output = output.drop(labels=list(g_names), axis=1)\n\n        # Set a temp index and reindex (possibly expanding)\n        output = output.set_index(self.grouper.result_index).reindex(index, copy=False)\n\n        # Reset in-axis grouper columns\n        # (using level numbers `g_nums` because level names may not be unique)\n        output = output.reset_index(level=g_nums)\n\n        return output.reset_index(drop=True)",
        "begin_line": 2404,
        "end_line": 2478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.groupby.groupby#2485",
        "src_path": "pandas/core/groupby/groupby.py",
        "class_name": "pandas.core.groupby.groupby",
        "signature": "pandas.core.groupby.groupby.groupby(obj, by, **kwds)",
        "snippet": "def groupby(obj, by, **kwds):\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(\"invalid type: {}\".format(obj))\n\n    return klass(obj, by, **kwds)",
        "begin_line": 2485,
        "end_line": 2497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#82",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 82,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006949270326615705,
            "pseudo_dstar_susp": 0.0021008403361344537,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0021008403361344537,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#224",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Union[Ordered, object]=ordered_sentinel)",
        "snippet": "    def __init__(\n        self, categories=None, ordered: Union[Ordered, object] = ordered_sentinel\n    ):\n        # TODO(GH26403): Set type of ordered to Ordered\n        ordered = cast(Ordered, ordered)\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 224,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#252",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> CategoricalDtype._from_values_or_dtype(categories=['a', 'b'],\n        ...                                        ordered=True)\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> CategoricalDtype._from_values_or_dtype(c, ['x', 'y'], ordered=True,\n        ...                                        dtype=dtype2)\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(['x', 'y'], ordered=False)\n        \"\"\"\n        from pandas.core.dtypes.common import is_categorical\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    msg = \"Unknown dtype {dtype!r}\"\n                    raise ValueError(msg.format(dtype=dtype))\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 252,
        "end_line": 340,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#342",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None and ordered is not ordered_sentinel:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered if ordered is not ordered_sentinel else None\n        self._ordered_from_sentinel = ordered is ordered_sentinel",
        "begin_line": 342,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#373",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"_ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self._ordered or other._ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self._ordered == other._ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 373,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#479",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 479,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#498",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            msg = \"Parameter 'categories' must be list-like, was {!r}\"\n            raise TypeError(msg.format(categories))\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorial categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 498,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#533",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            msg = (\n                \"a CategoricalDtype must be passed to perform an update, \"\n                \"got {dtype!r}\"\n            ).format(dtype=dtype)\n            raise ValueError(msg)\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # dtype is CDT: keep current categories/ordered if None\n        new_categories = dtype.categories\n        if new_categories is None:\n            new_categories = self.categories\n\n        new_ordered = dtype._ordered\n        new_ordered_from_sentinel = dtype._ordered_from_sentinel\n        if new_ordered is None:\n            # maintain existing ordered if new dtype has ordered=None\n            new_ordered = self._ordered\n            if self._ordered and new_ordered_from_sentinel:\n                # only warn if we'd actually change the existing behavior\n                msg = (\n                    \"Constructing a CategoricalDtype without specifying \"\n                    \"`ordered` will default to `ordered=False` in a future \"\n                    \"version, which will cause the resulting categorical's \"\n                    \"`ordered` attribute to change to False; `ordered=True`\"\n                    \" must be explicitly passed in order to be retained\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=3)\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 533,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#585",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 585,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#663",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    \"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is deprecated. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 663,
        "end_line": 692,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017085255424568598,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit#695",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.unit(self)",
        "snippet": "    def unit(self):\n        \"\"\"\n        The precision of the datetime data.\n        \"\"\"\n        return self._unit",
        "begin_line": 695,
        "end_line": 699,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#702",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 702,
        "end_line": 706,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017061934823408976,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#722",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if isinstance(string, str):\n            msg = \"Could not construct DatetimeTZDtype from '{}'\"\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                try:\n                    return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n                except (KeyError, TypeError, ValueError) as err:\n                    # KeyError if maybe_get_tz tries and fails to get a\n                    #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                    # TypeError if we pass a nonsense tz;\n                    # ValueError if we pass a unit other than \"ns\"\n                    raise TypeError(msg.format(string)) from err\n            raise TypeError(msg.format(string))\n\n        raise TypeError(\"Could not construct DatetimeTZDtype\")",
        "begin_line": 722,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__#755",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__str__(self)",
        "snippet": "    def __str__(self):\n        return \"datetime64[{unit}, {tz}]\".format(unit=self.unit, tz=self.tz)",
        "begin_line": 755,
        "end_line": 756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name#759",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)",
        "snippet": "    def name(self):\n        \"\"\"A string representation of the dtype.\"\"\"\n        return str(self)",
        "begin_line": 759,
        "end_line": 761,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#768",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 768,
        "end_line": 776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#824",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 824,
        "end_line": 849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#852",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 852,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#874",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        raise TypeError(\"could not construct PeriodDtype\")",
        "begin_line": 874,
        "end_line": 890,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#920",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype):\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 920,
        "end_line": 939,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007047216349541931,
            "pseudo_dstar_susp": 0.0021929824561403508,
            "pseudo_tarantula_susp": 0.0006273525721455458,
            "pseudo_op2_susp": 0.0021929824561403508,
            "pseudo_barinel_susp": 0.0006273525721455458
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1048",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            msg = \"a string needs to be passed, got type {typ}\"\n            raise TypeError(msg.format(typ=type(string)))\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1048,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007127583749109052,
            "pseudo_dstar_susp": 0.0006578947368421052,
            "pseudo_tarantula_susp": 0.0008628127696289905,
            "pseudo_op2_susp": 0.0006578947368421052,
            "pseudo_barinel_susp": 0.0008628127696289905
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1100",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype):\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1100,
        "end_line": 1117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008203445447087777,
            "pseudo_dstar_susp": 0.0025188916876574307,
            "pseudo_tarantula_susp": 0.0007087172218284905,
            "pseudo_op2_susp": 0.0025188916876574307,
            "pseudo_barinel_susp": 0.0007087172218284905
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.method#58",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike",
        "signature": "pandas.core.indexes.datetimelike.method(self, *args, **kwargs)",
        "snippet": "    def method(self, *args, **kwargs):\n        return array_method(self._data, *args, **kwargs)",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001040582726326743,
            "pseudo_dstar_susp": 0.0007547169811320754,
            "pseudo_tarantula_susp": 0.0011507479861910242,
            "pseudo_op2_susp": 0.0007547169811320754,
            "pseudo_barinel_susp": 0.0011507479861910242
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq#102",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._data.freq",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018053800324968405,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values#151",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data._ndarray_values",
        "begin_line": 151,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018733608092918696,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#158",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 158,
        "end_line": 160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8#164",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asi8(self)",
        "snippet": "    def asi8(self):\n        return self._data.asi8",
        "begin_line": 164,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017006802721088434,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take#311",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_int64(indices)\n\n        maybe_slice = lib.maybe_indices_to_slice(indices, len(self))\n        if isinstance(maybe_slice, slice):\n            return self[maybe_slice]\n\n        taken = self._assert_take_fillable(\n            self.asi8,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=iNaT,\n        )\n\n        # keep freq in PeriodArray/Index, reset otherwise\n        freq = self.freq if is_period_dtype(self) else None\n        return self._shallow_copy(taken, freq=freq)",
        "begin_line": 311,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min#366",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Index or minimum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.min\n        Series.min : Return the minimum value in a Series.\n        \"\"\"\n        nv.validate_min(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[0] != iNaT:\n                    return self._box_func(i8[0])\n\n            if self.hasnans:\n                if skipna:\n                    min_stamp = self[~self._isnan].asi8.min()\n                else:\n                    return self._na_value\n            else:\n                min_stamp = i8.min()\n            return self._box_func(min_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 366,
        "end_line": 398,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmin#400",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmin(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def argmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Returns the indices of the minimum values along an axis.\n\n        See `numpy.ndarray.argmin` for more information on the\n        `axis` parameter.\n\n        See Also\n        --------\n        numpy.ndarray.argmin\n        \"\"\"\n        nv.validate_argmin(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        i8 = self.asi8\n        if self.hasnans:\n            mask = self._isnan\n            if mask.all() or not skipna:\n                return -1\n            i8 = i8.copy()\n            i8[mask] = np.iinfo(\"int64\").max\n        return i8.argmin()",
        "begin_line": 400,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max#423",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        if not len(self):\n            return self._na_value\n\n        i8 = self.asi8\n        try:\n            # quick check\n            if len(i8) and self.is_monotonic:\n                if i8[-1] != iNaT:\n                    return self._box_func(i8[-1])\n\n            if self.hasnans:\n                if skipna:\n                    max_stamp = self[~self._isnan].asi8.max()\n                else:\n                    return self._na_value\n            else:\n                max_stamp = i8.max()\n            return self._box_func(max_stamp)\n        except ValueError:\n            return self._na_value",
        "begin_line": 423,
        "end_line": 455,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmax#457",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmax(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def argmax(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Returns the indices of the maximum values along an axis.\n\n        See `numpy.ndarray.argmax` for more information on the\n        `axis` parameter.\n\n        See Also\n        --------\n        numpy.ndarray.argmax\n        \"\"\"\n        nv.validate_argmax(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        i8 = self.asi8\n        if self.hasnans:\n            mask = self._isnan\n            if mask.all() or not skipna:\n                return -1\n            i8 = i8.copy()\n            i8[mask] = 0\n        return i8.argmax()",
        "begin_line": 457,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method#854",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimelikeDelegateMixin._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        result = operator.methodcaller(name, *args, **kwargs)(self._data)\n        if name not in self._raw_methods:\n            result = Index(result, name=self.name)\n        return result",
        "begin_line": 854,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#346",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 346,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.ndim#353",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Extension Arrays are only allowed to be 1-dimensional.\n        \"\"\"\n        return 1",
        "begin_line": 353,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__new__#167",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None, fastpath=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        categories=None,\n        ordered=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        fastpath=None,\n    ):\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(data, name=name, dtype=dtype)\n\n        dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if not is_categorical_dtype(data):\n            # don't allow scalars\n            # if data is None, then categories must be provided\n            if is_scalar(data):\n                if data is not None or categories is None:\n                    raise cls._scalar_data_error(data)\n                data = []\n\n        data = cls._create_categorical(data, dtype=dtype)\n\n        data = data.copy() if copy else data\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 167,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._create_categorical#232",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._create_categorical(cls, data, dtype=None)",
        "snippet": "    def _create_categorical(cls, data, dtype=None):\n        \"\"\"\n        *this is an internal non-public method*\n\n        create the correct categorical from data and the properties\n\n        Parameters\n        ----------\n        data : data for new Categorical\n        dtype : CategoricalDtype, defaults to existing\n\n        Returns\n        -------\n        Categorical\n        \"\"\"\n        if isinstance(data, (cls, ABCSeries)) and is_categorical_dtype(data):\n            data = data.values\n\n        if not isinstance(data, ABCCategorical):\n            return Categorical(data, dtype=dtype)\n\n        if isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n            # we want to silently ignore dtype='category'\n            data = data._set_dtype(dtype)\n        return data",
        "begin_line": 232,
        "end_line": 256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._simple_new#259",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        result = object.__new__(cls)\n\n        values = cls._create_categorical(values, dtype=dtype)\n        result._data = values\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n\n        result._reset_identity()\n        return result",
        "begin_line": 259,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._delegate_method#919",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        \"\"\" method delegation to the ._values \"\"\"\n        method = getattr(self._values, name)\n        if \"inplace\" in kwargs:\n            raise ValueError(\"cannot use inplace with CategoricalIndex\")\n        res = method(*args, **kwargs)\n        if is_scalar(res):\n            return res\n        return CategoricalIndex(res, name=self.name)",
        "begin_line": 919,
        "end_line": 927,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#126",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks = tuple(blocks)  # type: Tuple[Block, ...]\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    \"Number of Block dimensions ({block}) must equal \"\n                    \"number of axes ({self})\".format(block=block.ndim, self=self.ndim)\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        self._consolidate_check()\n\n        self._rebuild_blknos_and_blklocs()",
        "begin_line": 126,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.00909090909090909,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.00909090909090909,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#168",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self):\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.00909090909090909,
            "pseudo_tarantula_susp": 0.0016129032258064516,
            "pseudo_op2_susp": 0.00909090909090909,
            "pseudo_barinel_susp": 0.0016129032258064516
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#172",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self):\n        return len(self.axes)",
        "begin_line": 172,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017211703958691911,
            "pseudo_dstar_susp": 0.0009578544061302681,
            "pseudo_tarantula_susp": 0.001736111111111111,
            "pseudo_op2_susp": 0.0009578544061302681,
            "pseudo_barinel_susp": 0.001736111111111111
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._is_single_block#204",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._is_single_block(self)",
        "snippet": "    def _is_single_block(self):\n        if self.ndim == 1:\n            return True\n\n        if len(self.blocks) != 1:\n            return False\n\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1\n        )",
        "begin_line": 204,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#216",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self):\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 216,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#237",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self):\n        return self.axes[0]",
        "begin_line": 237,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0005824111822947001,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0005824111822947001,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#325",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self.items)",
        "begin_line": 325,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005865102639296188,
            "pseudo_dstar_susp": 0.0005865102639296188,
            "pseudo_tarantula_susp": 0.0006305170239596469,
            "pseudo_op2_susp": 0.0005865102639296188,
            "pseudo_barinel_susp": 0.0006305170239596469
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#340",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self):\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                \"block items\\n# manager items: {0}, # \"\n                \"tot_items: {1}\".format(len(self.items), tot_items)\n            )",
        "begin_line": 340,
        "end_line": 351,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.00909090909090909,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.00909090909090909,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#353",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
        "snippet": "    def apply(\n        self,\n        f,\n        axes=None,\n        filter=None,\n        do_integrity_check=False,\n        consolidate=True,\n        **kwargs\n    ):\n        \"\"\"\n        iterate over the blocks, collect and create a new block manager\n\n        Parameters\n        ----------\n        f : the callable or function name to operate on at the block level\n        axes : optional (if not supplied, use self.axes)\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n        do_integrity_check : boolean, default False. Do the block manager\n            integrity check\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n\n        Returns\n        -------\n        Block Manager (new object)\n\n        \"\"\"\n\n        result_blocks = []\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        if consolidate:\n            self._consolidate_inplace()\n\n        if f == \"where\":\n            align_copy = True\n            if kwargs.get(\"align\", True):\n                align_keys = [\"other\", \"cond\"]\n            else:\n                align_keys = [\"cond\"]\n        elif f == \"putmask\":\n            align_copy = False\n            if kwargs.get(\"align\", True):\n                align_keys = [\"new\", \"mask\"]\n            else:\n                align_keys = [\"mask\"]\n        elif f == \"fillna\":\n            # fillna internally does putmask, maybe it's better to do this\n            # at mgr, not block level?\n            align_copy = False\n            align_keys = [\"value\"]\n        else:\n            align_keys = []\n\n        # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n        # with a .values attribute.\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if not isinstance(kwargs[k], ABCExtensionArray)\n            and hasattr(kwargs[k], \"values\")\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = obj._info_axis_number\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(axes or self.axes)\n        bm = self.__class__(\n            result_blocks, axes or self.axes, do_integrity_check=do_integrity_check\n        )\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 353,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001825150574922431,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.quantile#449",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None)",
        "snippet": "    def quantile(\n        self,\n        axis=0,\n        consolidate=True,\n        transposed=False,\n        interpolation=\"linear\",\n        qs=None,\n        numeric_only=None,\n    ):\n        \"\"\"\n        Iterate over blocks applying quantile reduction.\n        This routine is intended for reduction type operations and\n        will do inference on the generated blocks.\n\n        Parameters\n        ----------\n        axis: reduction axis, default 0\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n        transposed: boolean, default False\n            we are holding transposed data\n        interpolation : type of interpolation, default 'linear'\n        qs : a scalar or list of the quantiles to be computed\n        numeric_only : ignored\n\n        Returns\n        -------\n        Block Manager (new object)\n        \"\"\"\n\n        # Series dispatches to DataFrame for quantile, which allows us to\n        #  simplify some of the code here and in the blocks\n        assert self.ndim >= 2\n\n        if consolidate:\n            self._consolidate_inplace()\n\n        def get_axe(block, qs, axes):\n            # Because Series dispatches to DataFrame, we will always have\n            #  block.ndim == 2\n            from pandas import Float64Index\n\n            if is_list_like(qs):\n                ax = Float64Index(qs)\n            else:\n                ax = axes[0]\n            return ax\n\n        axes, blocks = [], []\n        for b in self.blocks:\n            block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n            axe = get_axe(b, qs, axes=self.axes)\n\n            axes.append(axe)\n            blocks.append(block)\n\n        # note that some DatetimeTZ, Categorical are always ndim==1\n        ndim = {b.ndim for b in blocks}\n        assert 0 not in ndim, ndim\n\n        if 2 in ndim:\n\n            new_axes = list(self.axes)\n\n            # multiple blocks that are reduced\n            if len(blocks) > 1:\n                new_axes[1] = axes[0]\n\n                # reset the placement to the original\n                for b, sb in zip(blocks, self.blocks):\n                    b.mgr_locs = sb.mgr_locs\n\n            else:\n                new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n\n            if transposed:\n                new_axes = new_axes[::-1]\n                blocks = [\n                    b.make_block(b.values.T, placement=np.arange(b.shape[1]))\n                    for b in blocks\n                ]\n\n            return self.__class__(blocks, new_axes)\n\n        # single block, i.e. ndim == {1}\n        values = concat_compat([b.values for b in blocks])\n\n        # compute the orderings of our original data\n        if len(self.blocks) > 1:\n\n            indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n            i = 0\n            for b in self.blocks:\n                for j in b.mgr_locs:\n                    indexer[j] = i\n                    i = i + 1\n\n            values = values.take(indexer)\n\n        return SingleBlockManager(\n            [make_block(values, ndim=1, placement=np.arange(len(values)))], axes[0]\n        )",
        "begin_line": 449,
        "end_line": 551,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get_axe#486",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get_axe(block, qs, axes)",
        "snippet": "        def get_axe(block, qs, axes):\n            # Because Series dispatches to DataFrame, we will always have\n            #  block.ndim == 2\n            from pandas import Float64Index\n\n            if is_list_like(qs):\n                ax = Float64Index(qs)\n            else:\n                ax = axes[0]\n            return ax",
        "begin_line": 486,
        "end_line": 495,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#559",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, **kwargs)",
        "snippet": "    def setitem(self, **kwargs):\n        return self.apply(\"setitem\", **kwargs)",
        "begin_line": 559,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#580",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, **kwargs)",
        "snippet": "    def astype(self, dtype, **kwargs):\n        return self.apply(\"astype\", dtype=dtype, **kwargs)",
        "begin_line": 580,
        "end_line": 581,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#646",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 646,
        "end_line": 652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#654",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self):\n        ftypes = [blk.ftype for blk in self.blocks]\n        self._is_consolidated = len(ftypes) == len(set(ftypes))\n        self._known_consolidated = True",
        "begin_line": 654,
        "end_line": 657,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.00909090909090909,
            "pseudo_tarantula_susp": 0.0016129032258064516,
            "pseudo_op2_susp": 0.00909090909090909,
            "pseudo_barinel_susp": 0.0016129032258064516
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#660",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self):\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 660,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#683",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 683,
        "end_line": 695,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#765",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : boolean o rstring, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        copy : BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            if deep == \"all\":\n                copy = lambda ax: ax.copy(deep=True)\n            else:\n                copy = lambda ax: ax.view()\n            new_axes = [copy(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n        return self.apply(\"copy\", axes=new_axes, deep=deep, do_integrity_check=False)",
        "begin_line": 765,
        "end_line": 788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018556318426424197,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.as_array#790",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.as_array(self, transpose=False, items=None)",
        "snippet": "    def as_array(self, transpose=False, items=None):\n        \"\"\"Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : boolean, default False\n            If True, transpose the return array\n        items : list of strings or None\n            Names of block items that will be included in the returned\n            array. ``None`` means that all block items will be used\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n\n        if items is not None:\n            mgr = self.reindex_axis(items, axis=0)\n        else:\n            mgr = self\n\n        if self._is_single_block and mgr.blocks[0].is_datetimetz:\n            # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n            # always be object dtype. Some callers seem to want the\n            # DatetimeArray (previously DTI)\n            arr = mgr.blocks[0].get_values(dtype=object)\n        elif self._is_single_block or not self.is_mixed_type:\n            arr = np.asarray(mgr.blocks[0].get_values())\n        else:\n            arr = mgr._interleave()\n\n        return arr.transpose() if transpose else arr",
        "begin_line": 790,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._interleave#826",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._interleave(self)",
        "snippet": "    def _interleave(self):\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n\n        # TODO: https://github.com/pandas-dev/pandas/issues/22791\n        # Give EAs some input on what happens here. Sparse needs this.\n        if is_sparse(dtype):\n            dtype = dtype.subtype\n        elif is_extension_array_dtype(dtype):\n            dtype = \"object\"\n\n        result = np.empty(self.shape, dtype=dtype)\n\n        itemmask = np.zeros(self.shape[0])\n\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n\n        if not itemmask.all():\n            raise AssertionError(\"Some items were not contained in blocks\")\n\n        return result",
        "begin_line": 826,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#919",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self):\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = self.__class__(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 919,
        "end_line": 933,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009337068160597573,
            "pseudo_dstar_susp": 0.0007246376811594203,
            "pseudo_tarantula_susp": 0.0010204081632653062,
            "pseudo_op2_susp": 0.0007246376811594203,
            "pseudo_barinel_susp": 0.0010204081632653062
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#935",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 935,
        "end_line": 940,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0009208103130755065,
            "pseudo_tarantula_susp": 0.0016129032258064516,
            "pseudo_op2_susp": 0.0009208103130755065,
            "pseudo_barinel_susp": 0.0016129032258064516
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get#942",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get(self, item)",
        "snippet": "    def get(self, item):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n\n                # allow a single nan location indexer\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError(\"cannot label index with a null key\")\n\n            return self.iget(loc)\n        else:\n\n            if isna(item):\n                raise TypeError(\"cannot label index with a null key\")\n\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(\n                new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n            )",
        "begin_line": 942,
        "end_line": 969,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#971",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i)",
        "snippet": "    def iget(self, i):\n        \"\"\"\n        Return the data as a SingleBlockManager if possible\n\n        Otherwise return as a ndarray\n        \"\"\"\n        block = self.blocks[self._blknos[i]]\n        values = block.iget(self._blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            [\n                block.make_block_same_class(\n                    values, placement=slice(0, len(values)), ndim=1\n                )\n            ],\n            self.axes[1],\n        )",
        "begin_line": 971,
        "end_line": 988,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set#1029",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set(self, item, value)",
        "snippet": "    def set(self, item, value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n\n        # TODO(EA): Remove an is_extension_ when all extension types satisfy\n        # the interface\n        value_is_extension_type = is_extension_type(value) or is_extension_array_dtype(\n            value\n        )\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self.insert(len(self.items), item, value)\n            return\n\n        if isinstance(loc, int):\n            loc = [loc]\n\n        blknos = self._blknos[loc]\n        blklocs = self._blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = algos.take_1d(\n                new_blknos, self._blknos, axis=0, allow_fill=False\n            )\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only\n                # one item.\n                new_blocks.extend(\n                    make_block(\n                        values=value.copy(),\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1029,
        "end_line": 1152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1046",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "            def value_getitem(placement):\n                return value",
        "begin_line": 1046,
        "end_line": 1047,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.insert#1154",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.insert(self, loc: int, item, value, allow_duplicates: bool=False)",
        "snippet": "    def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            # Should this be a different kind of error??\n            raise ValueError(\"cannot insert {}, already exists\".format(item))\n\n        if not isinstance(loc, int):\n            raise TypeError(\"loc must be int\")\n\n        # insert to the axis; this could possibly raise a TypeError\n        new_axis = self.items.insert(loc, item)\n\n        block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n        for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n\n        if loc == self._blklocs.shape[0]:\n            # np.append is a lot faster, let's use it if we can.\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n        self.axes[0] = new_axis\n        self.blocks += (block,)\n        self._shape = None\n\n        self._known_consolidated = False\n\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()",
        "begin_line": 1154,
        "end_line": 1203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1463",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n            if isinstance(block, list):\n\n                # empty block\n                if len(block) == 0:\n                    block = [np.array([])]\n                elif len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n        else:\n            self.axes = [ensure_index(axis)]\n\n            # create the block here\n            if isinstance(block, list):\n\n                # provide consolidation to the interleaved_dtype\n                if len(block) > 1:\n                    dtype = _interleaved_dtype(block)\n                    block = [b.astype(dtype) for b in block]\n                    block = _consolidate(block)\n\n                if len(block) != 1:\n                    raise ValueError(\n                        \"Cannot create SingleBlockManager with more than 1 block\"\n                    )\n                block = block[0]\n\n        if not isinstance(block, Block):\n            block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n        self.blocks = tuple([block])",
        "begin_line": 1463,
        "end_line": 1511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008818342151675485,
            "pseudo_dstar_susp": 0.003205128205128205,
            "pseudo_tarantula_susp": 0.0009354536950420954,
            "pseudo_op2_susp": 0.003205128205128205,
            "pseudo_barinel_susp": 0.0009354536950420954
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1517",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self):\n        return self.blocks[0]",
        "begin_line": 1517,
        "end_line": 1518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007849293563579278,
            "pseudo_dstar_susp": 0.0024154589371980675,
            "pseudo_tarantula_susp": 0.0006770480704129993,
            "pseudo_op2_susp": 0.0024154589371980675,
            "pseudo_barinel_susp": 0.0006770480704129993
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._values#1521",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._values(self)",
        "snippet": "    def _values(self):\n        return self._block.values",
        "begin_line": 1521,
        "end_line": 1522,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1534",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj, axis=0)",
        "snippet": "    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        return self.__class__(\n            self._block._slice(slobj), self.index[slobj], fastpath=True\n        )",
        "begin_line": 1534,
        "end_line": 1540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1543",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self):\n        return self.axes[0]",
        "begin_line": 1543,
        "end_line": 1544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000774593338497289,
            "pseudo_dstar_susp": 0.0006925207756232687,
            "pseudo_tarantula_susp": 0.0009267840593141798,
            "pseudo_op2_susp": 0.0006925207756232687,
            "pseudo_barinel_susp": 0.0009267840593141798
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.convert#1546",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.convert(self, **kwargs)",
        "snippet": "    def convert(self, **kwargs):\n        \"\"\" convert the whole block as one \"\"\"\n        return self.apply(\"convert\", **kwargs)",
        "begin_line": 1546,
        "end_line": 1548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1551",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._block.dtype",
        "begin_line": 1551,
        "end_line": 1552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005743825387708214,
            "pseudo_dstar_susp": 0.0005743825387708214,
            "pseudo_tarantula_susp": 0.0005959475566150178,
            "pseudo_op2_susp": 0.0005743825387708214,
            "pseudo_barinel_susp": 0.0005959475566150178
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.external_values#1574",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.external_values(self)",
        "snippet": "    def external_values(self):\n        return self._block.external_values()",
        "begin_line": 1574,
        "end_line": 1575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009718172983479105,
            "pseudo_dstar_susp": 0.0007288629737609329,
            "pseudo_tarantula_susp": 0.0010526315789473684,
            "pseudo_op2_susp": 0.0007288629737609329,
            "pseudo_barinel_susp": 0.0010526315789473684
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1577",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        return self._block.internal_values()",
        "begin_line": 1577,
        "end_line": 1578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008045052292839903,
            "pseudo_dstar_susp": 0.0024390243902439024,
            "pseudo_tarantula_susp": 0.0006983240223463687,
            "pseudo_op2_susp": 0.0024390243902439024,
            "pseudo_barinel_susp": 0.0006983240223463687
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_values#1580",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_values(self)",
        "snippet": "    def get_values(self):\n        \"\"\" return a dense type view \"\"\"\n        return np.array(self._block.to_dense(), copy=False)",
        "begin_line": 1580,
        "end_line": 1582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005934718100890207,
            "pseudo_dstar_susp": 0.0005934718100890207,
            "pseudo_tarantula_susp": 0.0006422607578676942,
            "pseudo_op2_susp": 0.0005934718100890207,
            "pseudo_barinel_susp": 0.0006422607578676942
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._can_hold_na#1585",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return self._block._can_hold_na",
        "begin_line": 1585,
        "end_line": 1586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1588",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self):\n        return True",
        "begin_line": 1588,
        "end_line": 1589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1594",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1594,
        "end_line": 1595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001825150574922431,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_blocks#1655",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_blocks(blocks, axes)",
        "snippet": "def create_block_manager_from_blocks(blocks, axes):\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        construction_error(tot_items, blocks[0].shape[1:], axes, e)",
        "begin_line": 1655,
        "end_line": 1676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1679",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names, axes)",
        "snippet": "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1679,
        "end_line": 1687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1714",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names, axes)",
        "snippet": "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1714,
        "end_line": 1808,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1811",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype):\n    \"\"\" return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1811,
        "end_line": 1822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1825",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1825,
        "end_line": 1839,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1842",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1842,
        "end_line": 1866,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1845",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1845,
        "end_line": 1849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1851",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1851,
        "end_line": 1855,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._interleaved_dtype#1869",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._interleaved_dtype(blocks: List[Block])",
        "snippet": "def _interleaved_dtype(\n    blocks: List[Block]\n) -> Optional[Union[np.dtype, ExtensionDtype]]:\n    \"\"\"Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : Optional[Union[np.dtype, ExtensionDtype]]\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
        "begin_line": 1869,
        "end_line": 1886,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._consolidate#1889",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._consolidate(blocks)",
        "snippet": "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
        "begin_line": 1889,
        "end_line": 1904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.managers._fast_count_smallints#1983",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._fast_count_smallints(arr)",
        "snippet": "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
        "begin_line": 1983,
        "end_line": 1987,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#136",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 136,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#85",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value)",
        "snippet": "def maybe_box_datetimelike(value):\n    # turn a datetime like into a Timestamp/timedelta as needed\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 85,
        "end_line": 93,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#99",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n    \"\"\"\n    na_msg = \"cannot index with vector containing NA / NaN values\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(values_from_object(key))\n\n            if not lib.is_bool_array(key):\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            # an ndarray with bool-dtype by definition has no missing values.\n            # So we only need to check for NAs in ExtensionArrays\n            if is_extension_array_dtype(key.dtype):\n                if np.any(key.isna()):\n                    raise ValueError(na_msg)\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 99,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011312217194570137,
            "pseudo_dstar_susp": 0.0007763975155279503,
            "pseudo_tarantula_susp": 0.0012121212121212121,
            "pseudo_op2_susp": 0.0007763975155279503,
            "pseudo_barinel_susp": 0.0012121212121212121
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#150",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val == int(val):\n        return int(val)\n    return val",
        "begin_line": 150,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021640337589266391,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.any_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args):\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017885888034340904,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.all_none#182",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args):\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 182,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001088139281828074,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.common.count_not_none#203",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args):\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 203,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017522340984755565,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.dict_keys_to_ordered_list#218",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.dict_keys_to_ordered_list(mapping)",
        "snippet": "def dict_keys_to_ordered_list(mapping):\n    # when pandas drops support for Python < 3.6, this function\n    # can be replaced by a simple list(mapping.keys())\n    if PY36 or isinstance(mapping, OrderedDict):\n        keys = list(mapping.keys())\n    else:\n        keys = try_sort(mapping)\n    return keys",
        "begin_line": 218,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#228",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 228,
        "end_line": 248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008090614886731392,
            "pseudo_dstar_susp": 0.0007142857142857143,
            "pseudo_tarantula_susp": 0.0009775171065493646,
            "pseudo_op2_susp": 0.0007142857142857143,
            "pseudo_barinel_susp": 0.0009775171065493646
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#284",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable, Any])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable, Any]) -> Union[list, Any]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 284,
        "end_line": 290,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009765625,
            "pseudo_dstar_susp": 0.0044444444444444444,
            "pseudo_tarantula_susp": 0.0008417508417508417,
            "pseudo_op2_susp": 0.0044444444444444444,
            "pseudo_barinel_susp": 0.0008417508417508417
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#339",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 339,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00102880658436214,
            "pseudo_dstar_susp": 0.0007501875468867217,
            "pseudo_tarantula_susp": 0.0011337868480725624,
            "pseudo_op2_susp": 0.0007501875468867217,
            "pseudo_barinel_susp": 0.0011337868480725624
        }
    },
    {
        "name": "pandas.core.tools.datetimes.should_cache#71",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.should_cache(arg: ArrayConvertible, unique_share: float=0.7, check_count: Optional[int]=None)",
        "snippet": "def should_cache(\n    arg: ArrayConvertible, unique_share: float = 0.7, check_count: Optional[int] = None\n) -> bool:\n    \"\"\"\n    Decides whether to do caching.\n\n    If the percent of unique elements among `check_count` elements less\n    than `unique_share * 100` then we can do caching.\n\n    Parameters\n    ----------\n    arg: listlike, tuple, 1-d array, Series\n    unique_share: float, default=0.7, optional\n        0 < unique_share < 1\n    check_count: int, optional\n        0 <= check_count <= len(arg)\n\n    Returns\n    -------\n    do_caching: bool\n\n    Notes\n    -----\n    By default for a sequence of less than 50 items in size, we don't do\n    caching; for the number of elements less than 5000, we take ten percent of\n    all elements to check for a uniqueness share; if the sequence size is more\n    than 5000, then we check only the first 500 elements.\n    All constants were chosen empirically by.\n    \"\"\"\n    do_caching = True\n\n    # default realization\n    if check_count is None:\n        # in this case, the gain from caching is negligible\n        if len(arg) <= 50:\n            return False\n\n        if len(arg) <= 5000:\n            check_count = int(len(arg) * 0.1)\n        else:\n            check_count = 500\n    else:\n        assert (\n            0 <= check_count <= len(arg)\n        ), \"check_count must be in next bounds: [0; len(arg)]\"\n        if check_count == 0:\n            return False\n\n    assert 0 < unique_share < 1, \"unique_share must be in next bounds: (0; 1)\"\n\n    unique_elements = unique(arg[:check_count])\n    if len(unique_elements) > check_count * unique_share:\n        do_caching = False\n    return do_caching",
        "begin_line": 71,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.tools.datetimes._maybe_cache#127",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._maybe_cache(arg, format, cache, convert_listlike)",
        "snippet": "def _maybe_cache(arg, format, cache, convert_listlike):\n    \"\"\"\n    Create a cache of unique dates from an array of dates\n\n    Parameters\n    ----------\n    arg : listlike, tuple, 1-d array, Series\n    format : string\n        Strftime format to parse time\n    cache : boolean\n        True attempts to create a cache of converted values\n    convert_listlike : function\n        Conversion function to apply on dates\n\n    Returns\n    -------\n    cache_array : Series\n        Cache of converted, unique dates. Can be empty\n    \"\"\"\n    from pandas import Series\n\n    cache_array = Series()\n    if cache:\n        # Perform a quicker unique check\n        if not should_cache(arg):\n            return cache_array\n\n        unique_dates = unique(arg)\n        if len(unique_dates) < len(arg):\n            cache_dates = convert_listlike(unique_dates, True, format)\n            cache_array = Series(cache_dates, index=unique_dates)\n    return cache_array",
        "begin_line": 127,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.tools.datetimes._box_as_indexlike#161",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._box_as_indexlike(dt_array: ArrayLike, utc: Optional[bool]=None, name: Optional[str]=None)",
        "snippet": "def _box_as_indexlike(\n    dt_array: ArrayLike, utc: Optional[bool] = None, name: Optional[str] = None\n) -> Union[ABCIndex, ABCDatetimeIndex]:\n    \"\"\"\n    Properly boxes the ndarray of datetimes to DatetimeIndex\n    if it is possible or to generic Index instead\n\n    Parameters\n    ----------\n    dt_array: 1-d array\n        array of datetimes to be boxed\n    tz : object\n        None or 'utc'\n    name : string, default None\n        Name for a resulting index\n\n    Returns\n    -------\n    result : datetime of converted dates\n        - DatetimeIndex if convertible to sole datetime64 type\n        - general Index otherwise\n    \"\"\"\n    from pandas import DatetimeIndex, Index\n\n    if is_datetime64_dtype(dt_array):\n        tz = \"utc\" if utc else None\n        return DatetimeIndex(dt_array, tz=tz, name=name)\n    return Index(dt_array, name=name)",
        "begin_line": 161,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.tools.datetimes._convert_listlike_datetimes#265",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes._convert_listlike_datetimes(arg, box, format, name=None, tz=None, unit=None, errors=None, infer_datetime_format=None, dayfirst=None, yearfirst=None, exact=None)",
        "snippet": "def _convert_listlike_datetimes(\n    arg,\n    box,\n    format,\n    name=None,\n    tz=None,\n    unit=None,\n    errors=None,\n    infer_datetime_format=None,\n    dayfirst=None,\n    yearfirst=None,\n    exact=None,\n):\n    \"\"\"\n    Helper function for to_datetime. Performs the conversions of 1D listlike\n    of dates\n\n    Parameters\n    ----------\n    arg : list, tuple, ndarray, Series, Index\n        date to be parced\n    box : boolean\n        True boxes result as an Index-like, False returns an ndarray\n    name : object\n        None or string for the Index name\n    tz : object\n        None or 'utc'\n    unit : string\n        None or string of the frequency of the passed data\n    errors : string\n        error handing behaviors from to_datetime, 'raise', 'coerce', 'ignore'\n    infer_datetime_format : boolean\n        inferring format behavior from to_datetime\n    dayfirst : boolean\n        dayfirst parsing behavior from to_datetime\n    yearfirst : boolean\n        yearfirst parsing behavior from to_datetime\n    exact : boolean\n        exact format matching behavior from to_datetime\n\n    Returns\n    -------\n    ndarray of parsed dates\n        Returns:\n\n        - Index-like if box=True\n        - ndarray of Timestamps if box=False\n    \"\"\"\n    from pandas import DatetimeIndex\n    from pandas.core.arrays import DatetimeArray\n    from pandas.core.arrays.datetimes import (\n        maybe_convert_dtype,\n        objects_to_datetime64ns,\n    )\n\n    if isinstance(arg, (list, tuple)):\n        arg = np.array(arg, dtype=\"O\")\n\n    # these are shortcutable\n    if is_datetime64tz_dtype(arg):\n        if not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            return DatetimeIndex(arg, tz=tz, name=name)\n        if tz == \"utc\":\n            arg = arg.tz_convert(None).tz_localize(tz)\n        return arg\n\n    elif is_datetime64_ns_dtype(arg):\n        if box and not isinstance(arg, (DatetimeArray, DatetimeIndex)):\n            try:\n                return DatetimeIndex(arg, tz=tz, name=name)\n            except ValueError:\n                pass\n        elif tz:\n            # DatetimeArray, DatetimeIndex\n            return arg.tz_localize(tz)\n\n        return arg\n\n    elif unit is not None:\n        if format is not None:\n            raise ValueError(\"cannot specify both format and unit\")\n        arg = getattr(arg, \"values\", arg)\n        result, tz_parsed = tslib.array_with_unit_to_datetime(arg, unit, errors=errors)\n        if box:\n            if errors == \"ignore\":\n                from pandas import Index\n\n                result = Index(result, name=name)\n            else:\n                result = DatetimeIndex(result, name=name)\n            # GH 23758: We may still need to localize the result with tz\n            # GH 25546: Apply tz_parsed first (from arg), then tz (from caller)\n            # result will be naive but in UTC\n            try:\n                result = result.tz_localize(\"UTC\").tz_convert(tz_parsed)\n            except AttributeError:\n                # Regular Index from 'ignore' path\n                return result\n            if tz is not None:\n                if result.tz is None:\n                    result = result.tz_localize(tz)\n                else:\n                    result = result.tz_convert(tz)\n        return result\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, datetime, list, tuple, 1-d array, or Series\"\n        )\n\n    # warn if passing timedelta64, raise for PeriodDtype\n    # NB: this must come after unit transformation\n    orig_arg = arg\n    arg, _ = maybe_convert_dtype(arg, copy=False)\n\n    arg = ensure_object(arg)\n    require_iso8601 = False\n\n    if infer_datetime_format and format is None:\n        format = _guess_datetime_format_for_array(arg, dayfirst=dayfirst)\n\n    if format is not None:\n        # There is a special fast-path for iso8601 formatted\n        # datetime strings, so in those cases don't use the inferred\n        # format because this path makes process slower in this\n        # special case\n        format_is_iso8601 = _format_is_iso(format)\n        if format_is_iso8601:\n            require_iso8601 = not infer_datetime_format\n            format = None\n\n    tz_parsed = None\n    result = None\n\n    if format is not None:\n        try:\n            # shortcut formatting here\n            if format == \"%Y%m%d\":\n                try:\n                    # pass orig_arg as float-dtype may have been converted to\n                    # datetime64[ns]\n                    orig_arg = ensure_object(orig_arg)\n                    result = _attempt_YYYYMMDD(orig_arg, errors=errors)\n                except (ValueError, TypeError, tslibs.OutOfBoundsDatetime):\n                    raise ValueError(\"cannot convert the input to '%Y%m%d' date format\")\n\n            # fallback\n            if result is None:\n                try:\n                    result, timezones = array_strptime(\n                        arg, format, exact=exact, errors=errors\n                    )\n                    if \"%Z\" in format or \"%z\" in format:\n                        return _return_parsed_timezone_results(\n                            result, timezones, box, tz, name\n                        )\n                except tslibs.OutOfBoundsDatetime:\n                    if errors == \"raise\":\n                        raise\n                    elif errors == \"coerce\":\n                        result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                        iresult = result.view(\"i8\")\n                        iresult.fill(tslibs.iNaT)\n                    else:\n                        result = arg\n                except ValueError:\n                    # if format was inferred, try falling back\n                    # to array_to_datetime - terminate here\n                    # for specified formats\n                    if not infer_datetime_format:\n                        if errors == \"raise\":\n                            raise\n                        elif errors == \"coerce\":\n                            result = np.empty(arg.shape, dtype=\"M8[ns]\")\n                            iresult = result.view(\"i8\")\n                            iresult.fill(tslibs.iNaT)\n                        else:\n                            result = arg\n        except ValueError as e:\n            # Fallback to try to convert datetime objects if timezone-aware\n            #  datetime objects are found without passing `utc=True`\n            try:\n                values, tz = conversion.datetime_to_datetime64(arg)\n                return DatetimeIndex._simple_new(values, name=name, tz=tz)\n            except (ValueError, TypeError):\n                raise e\n\n    if result is None:\n        assert format is None or infer_datetime_format\n        utc = tz == \"utc\"\n        result, tz_parsed = objects_to_datetime64ns(\n            arg,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            utc=utc,\n            errors=errors,\n            require_iso8601=require_iso8601,\n            allow_object=True,\n        )\n\n    if tz_parsed is not None:\n        if box:\n            # We can take a shortcut since the datetime64 numpy array\n            # is in UTC\n            return DatetimeIndex._simple_new(result, name=name, tz=tz_parsed)\n        else:\n            # Convert the datetime64 numpy array to an numpy array\n            # of datetime objects\n            result = [Timestamp(ts, tz=tz_parsed).to_pydatetime() for ts in result]\n            return np.array(result, dtype=object)\n\n    if box:\n        utc = tz == \"utc\"\n        return _box_as_indexlike(result, utc=utc, name=name)\n    return result",
        "begin_line": 265,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.tools.datetimes.to_datetime#561",
        "src_path": "pandas/core/tools/datetimes.py",
        "class_name": "pandas.core.tools.datetimes",
        "signature": "pandas.core.tools.datetimes.to_datetime(arg, errors='raise', dayfirst=False, yearfirst=False, utc=None, box=True, format=None, exact=True, unit=None, infer_datetime_format=False, origin='unix', cache=True)",
        "snippet": "def to_datetime(\n    arg,\n    errors=\"raise\",\n    dayfirst=False,\n    yearfirst=False,\n    utc=None,\n    box=True,\n    format=None,\n    exact=True,\n    unit=None,\n    infer_datetime_format=False,\n    origin=\"unix\",\n    cache=True,\n):\n    \"\"\"\n    Convert argument to datetime.\n\n    Parameters\n    ----------\n    arg : int, float, str, datetime, list, tuple, 1-d array, Series\n           or DataFrame/dict-like\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n\n        - If 'raise', then invalid parsing will raise an exception\n        - If 'coerce', then invalid parsing will be set as NaT\n        - If 'ignore', then invalid parsing will return the input\n    dayfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n        If True, parses dates with the day first, eg 10/11/12 is parsed as\n        2012-11-10.\n        Warning: dayfirst=True is not strict, but will prefer to parse\n        with day first (this is a known bug, based on dateutil behavior).\n    yearfirst : bool, default False\n        Specify a date parse order if `arg` is str or its list-likes.\n\n        - If True parses dates with the year first, eg 10/11/12 is parsed as\n          2010-11-12.\n        - If both dayfirst and yearfirst are True, yearfirst is preceded (same\n          as dateutil).\n\n        Warning: yearfirst=True is not strict, but will prefer to parse\n        with year first (this is a known bug, based on dateutil behavior).\n    utc : bool, default None\n        Return UTC DatetimeIndex if True (converting any tz-aware\n        datetime.datetime objects as well).\n    box : bool, default True\n\n        - If True returns a DatetimeIndex or Index-like object\n        - If False returns ndarray of values.\n\n        .. deprecated:: 0.25.0\n            Use :meth:`Series.to_numpy` or :meth:`Timestamp.to_datetime64`\n            instead to get an ndarray of values or numpy.datetime64,\n            respectively.\n\n    format : str, default None\n        strftime to parse time, eg \"%d/%m/%Y\", note that \"%f\" will parse\n        all the way up to nanoseconds.\n        See strftime documentation for more information on choices:\n        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\n    exact : bool, True by default\n\n        - If True, require an exact format match.\n        - If False, allow the format to match anywhere in the target string.\n\n    unit : str, default 'ns'\n        unit of the arg (D,s,ms,us,ns) denote the unit, which is an\n        integer or float number. This will be based off the origin.\n        Example, with unit='ms' and origin='unix' (the default), this\n        would calculate the number of milliseconds to the unix epoch start.\n    infer_datetime_format : bool, default False\n        If True and no `format` is given, attempt to infer the format of the\n        datetime strings, and if it can be inferred, switch to a faster\n        method of parsing them. In some cases this can increase the parsing\n        speed by ~5-10x.\n    origin : scalar, default 'unix'\n        Define the reference date. The numeric values would be parsed as number\n        of units (defined by `unit`) since this reference date.\n\n        - If 'unix' (or POSIX) time; origin is set to 1970-01-01.\n        - If 'julian', unit must be 'D', and origin is set to beginning of\n          Julian Calendar. Julian day number 0 is assigned to the day starting\n          at noon on January 1, 4713 BC.\n        - If Timestamp convertible, origin is set to Timestamp identified by\n          origin.\n    cache : bool, default True\n        If True, use a cache of unique, converted dates to apply the datetime\n        conversion. May produce significant speed-up when parsing duplicate\n        date strings, especially ones with timezone offsets.\n\n        .. versionadded:: 0.23.0\n\n        .. versionchanged:: 0.25.0\n            - changed default value from False to True\n\n    Returns\n    -------\n    ret : datetime if parsing succeeded.\n        Return type depends on input:\n\n        - list-like: DatetimeIndex\n        - Series: Series of datetime64 dtype\n        - scalar: Timestamp\n\n        In case when it is not possible to return designated types (e.g. when\n        any element of input is before Timestamp.min or after Timestamp.max)\n        return will have datetime.datetime type (or corresponding\n        array/Series).\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_timedelta : Convert argument to timedelta.\n\n    Examples\n    --------\n    Assembling a datetime from multiple columns of a DataFrame. The keys can be\n    common abbreviations like ['year', 'month', 'day', 'minute', 'second',\n    'ms', 'us', 'ns']) or plurals of the same\n\n    >>> df = pd.DataFrame({'year': [2015, 2016],\n    ...                    'month': [2, 3],\n    ...                    'day': [4, 5]})\n    >>> pd.to_datetime(df)\n    0   2015-02-04\n    1   2016-03-05\n    dtype: datetime64[ns]\n\n    If a date does not meet the `timestamp limitations\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\n    #timeseries-timestamp-limits>`_, passing errors='ignore'\n    will return the original input instead of raising any exception.\n\n    Passing errors='coerce' will force an out-of-bounds date to NaT,\n    in addition to forcing non-dates (or non-parseable dates) to NaT.\n\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='ignore')\n    datetime.datetime(1300, 1, 1, 0, 0)\n    >>> pd.to_datetime('13000101', format='%Y%m%d', errors='coerce')\n    NaT\n\n    Passing infer_datetime_format=True can often-times speedup a parsing\n    if its not an ISO8601 format exactly, but in a regular format.\n\n    >>> s = pd.Series(['3/11/2000', '3/12/2000', '3/13/2000'] * 1000)\n    >>> s.head()\n    0    3/11/2000\n    1    3/12/2000\n    2    3/13/2000\n    3    3/11/2000\n    4    3/12/2000\n    dtype: object\n\n    >>> %timeit pd.to_datetime(s,infer_datetime_format=True)  # doctest: +SKIP\n    100 loops, best of 3: 10.4 ms per loop\n\n    >>> %timeit pd.to_datetime(s,infer_datetime_format=False)  # doctest: +SKIP\n    1 loop, best of 3: 471 ms per loop\n\n    Using a unix epoch time\n\n    >>> pd.to_datetime(1490195805, unit='s')\n    Timestamp('2017-03-22 15:16:45')\n    >>> pd.to_datetime(1490195805433502912, unit='ns')\n    Timestamp('2017-03-22 15:16:45.433502912')\n\n    .. warning:: For float arg, precision rounding might happen. To prevent\n        unexpected behavior use a fixed-width exact type.\n\n    Using a non-unix epoch origin\n\n    >>> pd.to_datetime([1, 2, 3], unit='D',\n    ...                origin=pd.Timestamp('1960-01-01'))\n    DatetimeIndex(['1960-01-02', '1960-01-03', '1960-01-04'], \\\ndtype='datetime64[ns]', freq=None)\n    \"\"\"\n    if arg is None:\n        return None\n\n    if origin != \"unix\":\n        arg = _adjust_to_origin(arg, origin, unit)\n\n    tz = \"utc\" if utc else None\n    convert_listlike = partial(\n        _convert_listlike_datetimes,\n        tz=tz,\n        unit=unit,\n        dayfirst=dayfirst,\n        yearfirst=yearfirst,\n        errors=errors,\n        exact=exact,\n        infer_datetime_format=infer_datetime_format,\n    )\n\n    if isinstance(arg, Timestamp):\n        result = arg\n        if tz is not None:\n            if arg.tz is not None:\n                result = result.tz_convert(tz)\n            else:\n                result = result.tz_localize(tz)\n    elif isinstance(arg, ABCSeries):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = arg.map(cache_array)\n        else:\n            values = convert_listlike(arg._values, True, format)\n            result = arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, (ABCDataFrame, abc.MutableMapping)):\n        result = _assemble_from_unit_mappings(arg, errors, box, tz)\n    elif isinstance(arg, ABCIndexClass):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box, name=arg.name)\n        else:\n            convert_listlike = partial(convert_listlike, name=arg.name)\n            result = convert_listlike(arg, box, format)\n    elif is_list_like(arg):\n        cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n        if not cache_array.empty:\n            result = _convert_and_box_cache(arg, cache_array, box)\n        else:\n            result = convert_listlike(arg, box, format)\n    else:\n        result = convert_listlike(np.array([arg]), box, format)[0]\n\n    return result",
        "begin_line": 561,
        "end_line": 788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#90",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019312475859405175,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#29",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj):\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 29,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016452780519907864,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_string_like#70",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_string_like(obj)",
        "snippet": "def is_string_like(obj):\n    \"\"\"\n    Check if the object is a string.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Examples\n    --------\n    >>> is_string_like(\"foo\")\n    True\n    >>> is_string_like(1)\n    False\n\n    Returns\n    -------\n    is_str_like : bool\n        Whether `obj` is a string or not.\n    \"\"\"\n\n    return isinstance(obj, str)",
        "begin_line": 70,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_iterator#120",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_iterator(obj)",
        "snippet": "def is_iterator(obj):\n    \"\"\"\n    Check if the object is an iterator.\n\n    For example, lists are considered iterators\n    but not strings or datetime objects.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_iter : bool\n        Whether `obj` is an iterator.\n\n    Examples\n    --------\n    >>> is_iterator([1, 2, 3])\n    True\n    >>> is_iterator(datetime(2017, 1, 1))\n    False\n    >>> is_iterator(\"foo\")\n    False\n    >>> is_iterator(1)\n    False\n    \"\"\"\n\n    if not hasattr(obj, \"__iter__\"):\n        return False\n\n    return hasattr(obj, \"__next__\")",
        "begin_line": 120,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00125,
            "pseudo_dstar_susp": 0.007751937984496124,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.007751937984496124,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#244",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj):\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 244,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006035003017501509,
            "pseudo_dstar_susp": 0.0006035003017501509,
            "pseudo_tarantula_susp": 0.0006613756613756613,
            "pseudo_op2_susp": 0.0006035003017501509,
            "pseudo_barinel_susp": 0.0006613756613756613
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#323",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj):\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 323,
        "end_line": 352,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002044153720359771,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#382",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj):\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 382,
        "end_line": 416,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#419",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj):\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 419,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#83",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None, fastpath=None)",
        "snippet": "    def __new__(\n        cls,\n        start=None,\n        stop=None,\n        step=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        fastpath=None,\n    ):\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(range(start, stop, step), name=name)\n\n        cls._validate_dtype(dtype)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            name = start.name if name is None else name\n            start = start._range\n            return cls._simple_new(start, dtype=dtype, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, dtype=dtype, name=name)",
        "begin_line": 83,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.from_range#131",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.from_range(cls, data, name=None, dtype=None)",
        "snippet": "    def from_range(cls, data, name=None, dtype=None):\n        \"\"\"\n        Create RangeIndex from a range object.\n\n        Returns\n        -------\n        RangeIndex\n        \"\"\"\n        if not isinstance(data, range):\n            raise TypeError(\n                \"{0}(...) must be called with object coercible to a \"\n                \"range, {1} was passed\".format(cls.__name__, repr(data))\n            )\n\n        cls._validate_dtype(dtype)\n        return cls._simple_new(data, dtype=dtype, name=name)",
        "begin_line": 131,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#149",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        result = object.__new__(cls)\n\n        # handle passed None, non-integers\n        if values is None:\n            # empty\n            values = range(0, 0, 1)\n        elif not isinstance(values, range):\n            return Index(values, dtype=dtype, name=name, **kwargs)\n\n        result._range = values\n\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n\n        result._reset_identity()\n        return result",
        "begin_line": 149,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._validate_dtype#171",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._validate_dtype(dtype)",
        "snippet": "    def _validate_dtype(dtype):\n        \"\"\" require dtype to be None or int64 \"\"\"\n        if not (dtype is None or is_int64_dtype(dtype)):\n            raise TypeError(\"Invalid to pass a non-int64 dtype to RangeIndex\")",
        "begin_line": 171,
        "end_line": 174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#182",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 182,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0005824111822947001,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0005824111822947001,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._int64index#197",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._int64index(self)",
        "snippet": "    def _int64index(self):\n        return Int64Index._simple_new(self._data, name=self.name)",
        "begin_line": 197,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0009208103130755065,
            "pseudo_tarantula_susp": 0.0016129032258064516,
            "pseudo_op2_susp": 0.0009208103130755065,
            "pseudo_barinel_susp": 0.0016129032258064516
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#237",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0005824111822947001,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0005824111822947001,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#260",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 260,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0005824111822947001,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0005824111822947001,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#283",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 283,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005824111822947001,
            "pseudo_dstar_susp": 0.0005824111822947001,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0005824111822947001,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#343",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        return np.dtype(np.int64)",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005871990604815032,
            "pseudo_dstar_susp": 0.0005871990604815032,
            "pseudo_tarantula_susp": 0.0006313131313131314,
            "pseudo_op2_susp": 0.0005871990604815032,
            "pseudo_barinel_susp": 0.0006313131313131314
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._shallow_copy#414",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            name = kwargs.get(\"name\", self.name)\n            return self._simple_new(self._range, name=name)\n        else:\n            kwargs.setdefault(\"name\", self.name)\n            return self._int64index._shallow_copy(values, **kwargs)",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0011210762331838565,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0011210762331838565,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._minmax#429",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._minmax(self, meth)",
        "snippet": "    def _minmax(self, meth):\n        no_steps = len(self) - 1\n        if no_steps == -1:\n            return np.nan\n        elif (meth == \"min\" and self.step > 0) or (meth == \"max\" and self.step < 0):\n            return self.start\n\n        return self.start + self.step * no_steps",
        "begin_line": 429,
        "end_line": 436,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.min#438",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"The minimum value of the RangeIndex\"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_min(args, kwargs)\n        return self._minmax(\"min\")",
        "begin_line": 438,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.max#444",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"The maximum value of the RangeIndex\"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_max(args, kwargs)\n        return self._minmax(\"max\")",
        "begin_line": 444,
        "end_line": 448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#470",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 470,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018811136192626034,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._union#575",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Form the union of two Index objects and sorts if possible\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        sort : False or None, default None\n            Whether to sort resulting index. ``sort=None`` returns a\n            monotonically increasing ``RangeIndex`` if possible or a sorted\n            ``Int64Index`` if not. ``sort=False`` always returns an\n            unsorted ``Int64Index``\n\n            .. versionadded:: 0.25.0\n\n        Returns\n        -------\n        union : Index\n        \"\"\"\n        if not len(other) or self.equals(other) or not len(self):\n            return super()._union(other, sort=sort)\n\n        if isinstance(other, RangeIndex) and sort is None:\n            start_s, step_s = self.start, self.step\n            end_s = self.start + self.step * (len(self) - 1)\n            start_o, step_o = other.start, other.step\n            end_o = other.start + other.step * (len(other) - 1)\n            if self.step < 0:\n                start_s, step_s, end_s = end_s, -step_s, start_s\n            if other.step < 0:\n                start_o, step_o, end_o = end_o, -step_o, start_o\n            if len(self) == 1 and len(other) == 1:\n                step_s = step_o = abs(self.start - other.start)\n            elif len(self) == 1:\n                step_s = step_o\n            elif len(other) == 1:\n                step_o = step_s\n            start_r = min(start_s, start_o)\n            end_r = max(end_s, end_o)\n            if step_o == step_s:\n                if (\n                    (start_s - start_o) % step_s == 0\n                    and (start_s - end_o) <= step_s\n                    and (start_o - end_s) <= step_s\n                ):\n                    return self.__class__(start_r, end_r + step_s, step_s)\n                if (\n                    (step_s % 2 == 0)\n                    and (abs(start_s - start_o) <= step_s / 2)\n                    and (abs(end_s - end_o) <= step_s / 2)\n                ):\n                    return self.__class__(start_r, end_r + step_s / 2, step_s / 2)\n            elif step_o % step_s == 0:\n                if (\n                    (start_o - start_s) % step_s == 0\n                    and (start_o + step_s >= start_s)\n                    and (end_o - step_s <= end_s)\n                ):\n                    return self.__class__(start_r, end_r + step_s, step_s)\n            elif step_s % step_o == 0:\n                if (\n                    (start_s - start_o) % step_o == 0\n                    and (start_s + step_o >= start_o)\n                    and (end_s - step_o <= end_o)\n                ):\n                    return self.__class__(start_r, end_r + step_o, step_o)\n        return self._int64index._union(other, sort=sort)",
        "begin_line": 575,
        "end_line": 642,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#701",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 701,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008203445447087777,
            "pseudo_dstar_susp": 0.0025188916876574307,
            "pseudo_tarantula_susp": 0.0007087172218284905,
            "pseudo_op2_susp": 0.0025188916876574307,
            "pseudo_barinel_susp": 0.0007087172218284905
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__getitem__#711",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Conserve RangeIndex type for scalar and slice keys.\n        \"\"\"\n        if isinstance(key, slice):\n            new_range = self._range[key]\n            return self._simple_new(new_range, name=self.name)\n        elif is_integer(key):\n            new_key = int(key)\n            try:\n                return self._range[new_key]\n            except IndexError:\n                raise IndexError(\n                    \"index {key} is out of bounds for axis 0 \"\n                    \"with size {size}\".format(key=key, size=len(self))\n                )\n        elif is_scalar(key):\n            raise IndexError(\n                \"only integers, slices (`:`), \"\n                \"ellipsis (`...`), numpy.newaxis (`None`) \"\n                \"and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n        # fall back to Int64Index\n        return super().__getitem__(key)",
        "begin_line": 711,
        "end_line": 735,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0011210762331838565,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0011210762331838565,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.util._decorators.deprecate#24",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.deprecate(name: str, alternative: Callable[..., Any], version: str, alt_name: Optional[str]=None, klass: Optional[Type[Warning]]=None, stacklevel: int=2, msg: Optional[str]=None)",
        "snippet": "def deprecate(\n    name: str,\n    alternative: Callable[..., Any],\n    version: str,\n    alt_name: Optional[str] = None,\n    klass: Optional[Type[Warning]] = None,\n    stacklevel: int = 2,\n    msg: Optional[str] = None,\n) -> Callable[..., Any]:\n    \"\"\"\n    Return a new function that emits a deprecation warning on use.\n\n    To use this method for a deprecated function, another function\n    `alternative` with the same signature must exist. The deprecated\n    function will emit a deprecation warning, and in the docstring\n    it will contain the deprecation directive with the provided version\n    so it can be detected for future removal.\n\n    Parameters\n    ----------\n    name : str\n        Name of function to deprecate.\n    alternative : func\n        Function to use instead.\n    version : str\n        Version of pandas in which the method has been deprecated.\n    alt_name : str, optional\n        Name to use in preference of alternative.__name__.\n    klass : Warning, default FutureWarning\n    stacklevel : int, default 2\n    msg : str\n        The message to display in the warning.\n        Default is '{name} is deprecated. Use {alt_name} instead.'\n    \"\"\"\n\n    alt_name = alt_name or alternative.__name__\n    klass = klass or FutureWarning\n    warning_msg = msg or \"{} is deprecated, use {} instead\".format(name, alt_name)\n\n    @wraps(alternative)\n    def wrapper(*args, **kwargs) -> Callable[..., Any]:\n        warnings.warn(warning_msg, klass, stacklevel=stacklevel)\n        return alternative(*args, **kwargs)\n\n    # adding deprecated directive to the docstring\n    msg = msg or \"Use `{alt_name}` instead.\".format(alt_name=alt_name)\n    doc_error_msg = (\n        \"deprecate needs a correctly formatted docstring in \"\n        \"the target function (should have a one liner short \"\n        \"summary, and opening quotes should be in their own \"\n        \"line). Found:\\n{}\".format(alternative.__doc__)\n    )\n\n    # when python is running in optimized mode (i.e. `-OO`), docstrings are\n    # removed, so we check that a docstring with correct formatting is used\n    # but we allow empty docstrings\n    if alternative.__doc__:\n        if alternative.__doc__.count(\"\\n\") < 3:\n            raise AssertionError(doc_error_msg)\n        empty1, summary, empty2, doc = alternative.__doc__.split(\"\\n\", 3)\n        if empty1 or empty2 and not summary:\n            raise AssertionError(doc_error_msg)\n        wrapper.__doc__ = dedent(\n            \"\"\"\n        {summary}\n\n        .. deprecated:: {depr_version}\n            {depr_msg}\n\n        {rest_of_docstring}\"\"\"\n        ).format(\n            summary=summary.strip(),\n            depr_version=version,\n            depr_msg=msg,\n            rest_of_docstring=dedent(doc),\n        )\n\n    return wrapper",
        "begin_line": 24,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#64",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "    def wrapper(*args, **kwargs) -> Callable[..., Any]:\n        warnings.warn(warning_msg, klass, stacklevel=stacklevel)\n        return alternative(*args, **kwargs)",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014044943820224719,
            "pseudo_dstar_susp": 0.00819672131147541,
            "pseudo_tarantula_susp": 0.001145475372279496,
            "pseudo_op2_susp": 0.00819672131147541,
            "pseudo_barinel_susp": 0.001145475372279496
        }
    },
    {
        "name": "pandas.util._decorators._deprecate_kwarg#177",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators._deprecate_kwarg(func: F)",
        "snippet": "    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)",
        "begin_line": 177,
        "end_line": 224,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014044943820224719,
            "pseudo_dstar_susp": 0.00819672131147541,
            "pseudo_tarantula_susp": 0.001145475372279496,
            "pseudo_op2_susp": 0.00819672131147541,
            "pseudo_barinel_susp": 0.001145475372279496
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#179",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated and will be \"\n                        \"removed in a future version. \"\n                        \"Please take steps to stop the use of '{old_name}'\"\n                    ).format(old_name=old_arg_name)\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        \"the {old_name}={old_val!r} keyword is deprecated, \"\n                        \"use {new_name}={new_val!r} instead\"\n                    ).format(\n                        old_name=old_arg_name,\n                        old_val=old_arg_value,\n                        new_name=new_arg_name,\n                        new_val=new_arg_value,\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        \"the '{old_name}' keyword is deprecated, \"\n                        \"use '{new_name}' instead\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        \"Can only specify '{old_name}' or '{new_name}', not both\"\n                    ).format(old_name=old_arg_name, new_name=new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)",
        "begin_line": 179,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014044943820224719,
            "pseudo_dstar_susp": 0.00819672131147541,
            "pseudo_tarantula_susp": 0.001145475372279496,
            "pseudo_op2_susp": 0.00819672131147541,
            "pseudo_barinel_susp": 0.001145475372279496
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#112",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                \"Wrong number of items passed {val}, placement implies \"\n                \"{mgr}\".format(val=len(self.values), mgr=len(self.mgr_locs))\n            )",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#123",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            msg = \"Wrong number of dimensions. values.ndim != ndim [{} != {}]\"\n            raise ValueError(msg.format(values.ndim, ndim))\n\n        return ndim",
        "begin_line": 123,
        "end_line": 151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._consolidate_key#163",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._consolidate_key(self)",
        "snippet": "    def _consolidate_key(self):\n        return (self._can_consolidate, self.dtype.name)",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#171",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self):\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_datelike#176",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_datelike(self)",
        "snippet": "    def is_datelike(self):\n        \"\"\" return True if I am a non-datelike \"\"\"\n        return self.is_datetime or self.is_timedelta",
        "begin_line": 176,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_categorical_astype#180",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_categorical_astype(self, dtype)",
        "snippet": "    def is_categorical_astype(self, dtype):\n        \"\"\"\n        validate that we have a astypeable to categorical,\n        returns a boolean if we are a categorical\n        \"\"\"\n        if dtype is Categorical or dtype is CategoricalDtype:\n            # this is a pd.Categorical, but is not\n            # a valid type for astypeing\n            raise TypeError(\"invalid type {0} for astype\".format(dtype))\n\n        elif is_categorical_dtype(dtype):\n            return True\n\n        return False",
        "begin_line": 180,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.external_values#195",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        \"\"\" return an outside world format, currently just the ndarray \"\"\"\n        return self.values",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001876172607879925,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#199",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self, dtype=None)",
        "snippet": "    def internal_values(self, dtype=None):\n        \"\"\" return an internal format, currently just the ndarray\n        this should be the pure internal API format\n        \"\"\"\n        return self.values",
        "begin_line": 199,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008045052292839903,
            "pseudo_dstar_susp": 0.0024390243902439024,
            "pseudo_tarantula_susp": 0.0006983240223463687,
            "pseudo_op2_susp": 0.0024390243902439024,
            "pseudo_barinel_susp": 0.0006983240223463687
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#205",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.to_dense#220",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.to_dense(self)",
        "snippet": "    def to_dense(self):\n        return self.values.view()",
        "begin_line": 220,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006009615384615385,
            "pseudo_dstar_susp": 0.0006009615384615385,
            "pseudo_tarantula_susp": 0.0006510416666666666,
            "pseudo_op2_susp": 0.0006009615384615385,
            "pseudo_barinel_susp": 0.0006510416666666666
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#228",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 228,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009478672985781991,
            "pseudo_dstar_susp": 0.004048582995951417,
            "pseudo_tarantula_susp": 0.0008149959250203749,
            "pseudo_op2_susp": 0.004048582995951417,
            "pseudo_barinel_susp": 0.0008149959250203749
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#232",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 232,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009505703422053232,
            "pseudo_dstar_susp": 0.004081632653061225,
            "pseudo_tarantula_susp": 0.0008210180623973727,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.0008210180623973727
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#245",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None):\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 245,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#255",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None, dtype=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None, dtype=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if dtype is not None:\n            # issue 19431 fastparquet is passing this\n            warnings.warn(\n                \"dtype argument is deprecated, will be removed in a future release.\",\n                FutureWarning,\n            )\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(\n            values, placement=placement, ndim=ndim, klass=self.__class__, dtype=dtype\n        )",
        "begin_line": 255,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018429782528566163,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#303",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 303,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#328",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 328,
        "end_line": 329,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#332",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 332,
        "end_line": 333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005717552887364208,
            "pseudo_dstar_susp": 0.0005717552887364208,
            "pseudo_tarantula_susp": 0.0005931198102016608,
            "pseudo_op2_susp": 0.0005717552887364208,
            "pseudo_barinel_susp": 0.0005931198102016608
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.ftype#336",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.ftype(self)",
        "snippet": "    def ftype(self):\n        if getattr(self.values, \"_pandas_ftype\", False):\n            dtype = self.dtype.subtype\n        else:\n            dtype = self.dtype\n        return \"{dtype}:{ftype}\".format(dtype=dtype, ftype=self._ftype)",
        "begin_line": 336,
        "end_line": 341,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#357",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 357,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#538",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy=False, errors='raise', **kwargs)",
        "snippet": "    def astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n        return self._astype(dtype, copy=copy, errors=errors, **kwargs)",
        "begin_line": 538,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._astype#541",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._astype(self, dtype, copy=False, errors='raise', **kwargs)",
        "snippet": "    def _astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n        \"\"\"Coerce to the new type\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : boolean, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of {}. \"\n                \"Supplied value is '{}'\".format(list(errors_legal_values), errors)\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                \"Expected an instance of {}, but got the class instead. \"\n                \"Try instantiating 'dtype'.\".format(dtype.__name__)\n            )\n            raise TypeError(msg)\n\n        # may need to convert to categorical\n        if self.is_categorical_astype(dtype):\n\n            if is_categorical_dtype(self.values):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    values = self.get_values()\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(extension)\n        # should we make this attribute?\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    \"cannot set astype for copy = [{copy}] for dtype \"\n                    \"({dtype} [{shape}]) to different shape \"\n                    \"({newb_dtype} [{newb_shape}])\".format(\n                        copy=copy,\n                        dtype=self.dtype.name,\n                        shape=self.shape,\n                        newb_dtype=newb.dtype.name,\n                        newb_shape=newb.shape,\n                    )\n                )\n        return newb",
        "begin_line": 541,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.convert#642",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
        "snippet": "    def convert(\n        self,\n        copy: bool = True,\n        datetime: bool = True,\n        numeric: bool = True,\n        timedelta: bool = True,\n        coerce: bool = False,\n    ):\n        \"\"\" attempt to coerce any object types to better types return a copy\n        of the block (if copy = True) by definition we are not an ObjectBlock\n        here!\n        \"\"\"\n\n        return self.copy() if copy else self",
        "begin_line": 642,
        "end_line": 655,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#683",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 683,
        "end_line": 688,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018429782528566163,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#796",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar(values, value)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n\n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n\n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        ):\n            values[indexer] = value\n            try:\n                values = values.astype(arr_value.dtype)\n            except ValueError:\n                pass\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 796,
        "end_line": 897,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.quantile#1464",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.quantile(self, qs, interpolation='linear', axis=0)",
        "snippet": "    def quantile(self, qs, interpolation=\"linear\", axis=0):\n        \"\"\"\n        compute the quantiles of the\n\n        Parameters\n        ----------\n        qs: a scalar or list of the quantiles to be computed\n        interpolation: type of interpolation, default 'linear'\n        axis: axis to compute, default 0\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        # We should always have ndim == 2 becase Series dispatches to DataFrame\n        assert self.ndim == 2\n\n        values = self.get_values()\n\n        is_empty = values.shape[axis] == 0\n        orig_scalar = not is_list_like(qs)\n        if orig_scalar:\n            # make list-like, unpack later\n            qs = [qs]\n\n        if is_empty:\n            # create the array of na_values\n            # 2d len(values) * len(qs)\n            result = np.repeat(\n                np.array([self.fill_value] * len(qs)), len(values)\n            ).reshape(len(values), len(qs))\n        else:\n            # asarray needed for Sparse, see GH#24600\n            mask = np.asarray(isna(values))\n            result = nanpercentile(\n                values,\n                np.array(qs) * 100,\n                axis=axis,\n                na_value=self.fill_value,\n                mask=mask,\n                ndim=values.ndim,\n                interpolation=interpolation,\n            )\n\n            result = np.array(result, copy=False)\n            result = result.T\n\n        if orig_scalar and not lib.is_scalar(result):\n            # result could be scalar in case with is_empty and self.ndim == 1\n            assert result.shape[-1] == 1, result.shape\n            result = result[..., 0]\n            result = lib.item_from_zerodim(result)\n\n        ndim = np.ndim(result)\n        return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
        "begin_line": 1464,
        "end_line": 1518,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__#1570",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)",
        "begin_line": 1570,
        "end_line": 1589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget#1597",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.NonConsolidatableMixIn",
        "signature": "pandas.core.internals.blocks.NonConsolidatableMixIn.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(\"{0} only contains one item\".format(self))\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(\"{0} only contains one item\".format(self))\n            return self.values",
        "begin_line": 1597,
        "end_line": 1611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1698",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement, ndim)",
        "begin_line": 1698,
        "end_line": 1700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018099547511312217,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1702",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1702,
        "end_line": 1717,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._ftype#1943",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._ftype(self)",
        "snippet": "    def _ftype(self):\n        return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
        "begin_line": 1943,
        "end_line": 1944,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.FloatBlock._can_hold_element#2003",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.FloatBlock",
        "signature": "pandas.core.internals.blocks.FloatBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        tipo = maybe_infer_dtype_type(element)\n        if tipo is not None:\n            return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n                tipo.type, (np.datetime64, np.timedelta64)\n            )\n        return isinstance(\n            element, (float, int, np.floating, np.int_)\n        ) and not isinstance(\n            element,\n            (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n        )",
        "begin_line": 2003,
        "end_line": 2014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values#2109",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return object dtype as boxed values, such as Timestamps/Timedelta\n        \"\"\"\n        if is_object_dtype(dtype):\n            values = self.values.ravel()\n            result = self._holder(values).astype(object)\n            return result.reshape(self.values.shape)\n        return self.values",
        "begin_line": 2109,
        "end_line": 2117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0011210762331838565,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0011210762331838565,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2124",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2124,
        "end_line": 2126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000689655172413793,
            "pseudo_dstar_susp": 0.0006514657980456026,
            "pseudo_tarantula_susp": 0.0008496176720475786,
            "pseudo_op2_susp": 0.0006514657980456026,
            "pseudo_barinel_susp": 0.0008496176720475786
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2132",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2132,
        "end_line": 2155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010638297872340426,
            "pseudo_dstar_susp": 0.0007604562737642585,
            "pseudo_tarantula_susp": 0.0011655011655011655,
            "pseudo_op2_susp": 0.0007604562737642585,
            "pseudo_barinel_susp": 0.0011655011655011655
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.external_values#2238",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
        "begin_line": 2238,
        "end_line": 2239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._holder#2254",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._holder(self)",
        "snippet": "    def _holder(self):\n        return DatetimeArray",
        "begin_line": 2254,
        "end_line": 2255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018463810930576072,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values#2257",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"Input validation for values passed to __init__. Ensure that\n        we have datetime64TZ, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : DatetimeArray\n        \"\"\"\n        if not isinstance(values, self._holder):\n            values = self._holder(values)\n\n        if values.tz is None:\n            raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n        return values",
        "begin_line": 2257,
        "end_line": 2276,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.get_values#2284",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        Returns an ndarray of values.\n\n        Parameters\n        ----------\n        dtype : np.dtype\n            Only `object`-like dtypes are respected here (not sure\n            why).\n\n        Returns\n        -------\n        values : ndarray\n            When ``dtype=object``, then and object-dtype ndarray of\n            boxed values is returned. Otherwise, an M8[ns] ndarray\n            is returned.\n\n            DatetimeArray is always 1-d. ``get_values`` will reshape\n            the return value to be the same dimensionality as the\n            block.\n        \"\"\"\n        values = self.values\n        if is_object_dtype(dtype):\n            values = values.astype(object)\n\n        values = np.asarray(values)\n\n        if self.ndim == 2:\n            # Ensure that our shape is correct for DataFrame.\n            # ExtensionArrays are always 1-D, even in a DataFrame when\n            # the analogous NumPy-backed column would be a 2-D ndarray.\n            values = values.reshape(1, -1)\n        return values",
        "begin_line": 2284,
        "end_line": 2316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeTZBlock.to_dense#2318",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeTZBlock",
        "signature": "pandas.core.internals.blocks.DatetimeTZBlock.to_dense(self)",
        "snippet": "    def to_dense(self):\n        # we request M8[ns] dtype here, even though it discards tzinfo,\n        # as lots of code (e.g. anything using values_from_object)\n        # expects that behavior.\n        return np.asarray(self.values, dtype=_NS_DTYPE)",
        "begin_line": 2318,
        "end_line": 2322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.__init__#2431",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        if values.dtype != _TD_DTYPE:\n            values = conversion.ensure_timedelta64ns(values)\n        if isinstance(values, TimedeltaArray):\n            values = values._data\n        assert isinstance(values, np.ndarray), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2431,
        "end_line": 2437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035087719298245615,
            "pseudo_dstar_susp": 0.023809523809523808,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.023809523809523808,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.external_values#2499",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.external_values(self, dtype=None)",
        "snippet": "    def external_values(self, dtype=None):\n        return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
        "begin_line": 2499,
        "end_line": 2500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2541",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2541,
        "end_line": 2545,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020563438206868187,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2846",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2846,
        "end_line": 2850,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.to_dense#2863",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.to_dense(self)",
        "snippet": "    def to_dense(self):\n        # Categorical.get_values returns a DatetimeIndex for datetime\n        # categories, so we can't simply use `np.asarray(self.values)` like\n        # other types.\n        return self.values._internal_get_values()",
        "begin_line": 2863,
        "end_line": 2867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2940",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2940,
        "end_line": 2983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035087719298245615,
            "pseudo_dstar_susp": 0.023809523809523808,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.023809523809523808,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#2986",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if fastpath is not None:\n        # GH#19265 pyarrow is passing this\n        warnings.warn(\n            \"fastpath argument is deprecated, will be removed in a future release.\",\n            FutureWarning,\n        )\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 2986,
        "end_line": 3012,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#3018",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, givin the result \"\"\"\n    from pandas.core.internals import BlockManager\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    elif isinstance(result, BlockManager):\n        blocks.extend(result.blocks)\n    else:\n        blocks.append(result)\n    return blocks",
        "begin_line": 3018,
        "end_line": 3034,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.blocks._merge_blocks#3050",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._merge_blocks(blocks, dtype=None, _can_consolidate=True)",
        "snippet": "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n            dtype = blocks[0].dtype\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
        "begin_line": 3050,
        "end_line": 3074,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#24",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 24,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.dispatch.dispatch_to_extension_op#99",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.dispatch_to_extension_op(op, left: Union[ABCExtensionArray, np.ndarray], right: Any, keep_null_freq: bool=False)",
        "snippet": "def dispatch_to_extension_op(\n    op,\n    left: Union[ABCExtensionArray, np.ndarray],\n    right: Any,\n    keep_null_freq: bool = False,\n):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n\n    Parameters\n    ----------\n    op : binary operator\n    left : ExtensionArray or np.ndarray\n    right : object\n    keep_null_freq : bool, default False\n        Whether to re-raise a NullFrequencyError unchanged, as opposed to\n        catching and raising TypeError.\n\n    Returns\n    -------\n    ExtensionArray or np.ndarray\n        2-tuple of these if op is divmod or rdivmod\n    \"\"\"\n    # NB: left and right should already be unboxed, so neither should be\n    #  a Series or Index.\n\n    if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n        # We need to cast datetime64 and timedelta64 ndarrays to\n        #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n        #  PandasArray as that behaves poorly with e.g. IntegerArray.\n        left = array(left)\n\n    # The op calls will raise TypeError if the op is not defined\n    # on the ExtensionArray\n\n    try:\n        res_values = op(left, right)\n    except NullFrequencyError:\n        # DatetimeIndex and TimedeltaIndex with freq == None raise ValueError\n        # on add/sub of integers (or int-like).  We re-raise as a TypeError.\n        if keep_null_freq:\n            # TODO: remove keep_null_freq after Timestamp+int deprecation\n            #  GH#22535 is enforced\n            raise\n        raise TypeError(\n            \"incompatible type for a datetime/timedelta \"\n            \"operation [{name}]\".format(name=op.__name__)\n        )\n    return res_values",
        "begin_line": 99,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.dispatch.maybe_dispatch_ufunc_to_dunder_op#151",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.maybe_dispatch_ufunc_to_dunder_op(self: ArrayLike, ufunc: Callable, method: str, *inputs: ArrayLike, **kwargs: Any)",
        "snippet": "def maybe_dispatch_ufunc_to_dunder_op(\n    self: ArrayLike, ufunc: Callable, method: str, *inputs: ArrayLike, **kwargs: Any\n):\n    \"\"\"\n    Dispatch a ufunc to the equivalent dunder method.\n\n    Parameters\n    ----------\n    self : ArrayLike\n        The array whose dunder method we dispatch to\n    ufunc : Callable\n        A NumPy ufunc\n    method : {'reduce', 'accumulate', 'reduceat', 'outer', 'at', '__call__'}\n    inputs : ArrayLike\n        The input arrays.\n    kwargs : Any\n        The additional keyword arguments, e.g. ``out``.\n\n    Returns\n    -------\n    result : Any\n        The result of applying the ufunc\n    \"\"\"\n    # special has the ufuncs we dispatch to the dunder op on\n    special = {\n        \"add\",\n        \"sub\",\n        \"mul\",\n        \"pow\",\n        \"mod\",\n        \"floordiv\",\n        \"truediv\",\n        \"divmod\",\n        \"eq\",\n        \"ne\",\n        \"lt\",\n        \"gt\",\n        \"le\",\n        \"ge\",\n        \"remainder\",\n        \"matmul\",\n    }\n    aliases = {\n        \"subtract\": \"sub\",\n        \"multiply\": \"mul\",\n        \"floor_divide\": \"floordiv\",\n        \"true_divide\": \"truediv\",\n        \"power\": \"pow\",\n        \"remainder\": \"mod\",\n        \"divide\": \"div\",\n        \"equal\": \"eq\",\n        \"not_equal\": \"ne\",\n        \"less\": \"lt\",\n        \"less_equal\": \"le\",\n        \"greater\": \"gt\",\n        \"greater_equal\": \"ge\",\n    }\n\n    # For op(., Array) -> Array.__r{op}__\n    flipped = {\n        \"lt\": \"__gt__\",\n        \"le\": \"__ge__\",\n        \"gt\": \"__lt__\",\n        \"ge\": \"__le__\",\n        \"eq\": \"__eq__\",\n        \"ne\": \"__ne__\",\n    }\n\n    op_name = ufunc.__name__\n    op_name = aliases.get(op_name, op_name)\n\n    def not_implemented(*args, **kwargs):\n        return NotImplemented\n\n    if method == \"__call__\" and op_name in special and kwargs.get(\"out\") is None:\n        if isinstance(inputs[0], type(self)):\n            name = \"__{}__\".format(op_name)\n            return getattr(self, name, not_implemented)(inputs[1])\n        else:\n            name = flipped.get(op_name, \"__r{}__\".format(op_name))\n            return getattr(self, name, not_implemented)(inputs[0])\n    else:\n        return NotImplemented",
        "begin_line": 151,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019312475859405175,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.dispatch.not_implemented#222",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.not_implemented(*args, **kwargs)",
        "snippet": "    def not_implemented(*args, **kwargs):\n        return NotImplemented",
        "begin_line": 222,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019312475859405175,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    # deprecated.\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\" check if we're running in an interactive shell\n\n    returns True if running under python/ipython interactive shell\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 70,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#60",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = (\n        \"Cannot generate range with {side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError:\n            raise OutOfBoundsDatetime(msg)\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017943656917279743,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#156",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            assert endpoint >= 0\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        \"Cannot generate range with \"\n        \"{side}={endpoint} and \"\n        \"periods={periods}\".format(side=side, endpoint=endpoint, periods=periods)\n    )",
        "begin_line": 156,
        "end_line": 196,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017943656917279743,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.names#161",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.names(self)",
        "snippet": "    def names(self) -> Optional[List[str]]:\n        \"\"\"Ordered list of field names, or None if there are no fields.\n\n        This is for compatibility with NumPy arrays, and may be removed in the\n        future.\n        \"\"\"\n        return None",
        "begin_line": 161,
        "end_line": 167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#181",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\"Cannot construct a '{}' from \"\n        ...                         \"'{}'\".format(cls.__name__, string))\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\"Expects a string, got {}\".format(type(string)))\n        if string != cls.name:\n            raise TypeError(\n                \"Cannot construct a '{}' from '{}'\".format(cls.__name__, string)\n            )\n        return cls()",
        "begin_line": 181,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#232",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        is_dtype : bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        try:\n            return cls.construct_from_string(dtype) is not None\n        except TypeError:\n            return False",
        "begin_line": 232,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006844626967830253,
            "pseudo_dstar_susp": 0.00202020202020202,
            "pseudo_tarantula_susp": 0.0006049606775559589,
            "pseudo_op2_susp": 0.00202020202020202,
            "pseudo_barinel_susp": 0.0006049606775559589
        }
    },
    {
        "name": "pandas.tseries.offsets.as_timestamp#84",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.as_timestamp(obj)",
        "snippet": "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
        "begin_line": 84,
        "end_line": 91,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.apply_wraps#94",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.apply_wraps(func)",
        "snippet": "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
        "begin_line": 94,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.wrapper#96",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result",
        "begin_line": 96,
        "end_line": 148,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rollforward#410",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rollforward(self, dt)",
        "snippet": "    def rollforward(self, dt):\n        \"\"\"\n        Roll provided date forward to next offset only if not on offset.\n\n        Returns\n        -------\n        TimeStamp\n            Rolled timestamp if not on offset, otherwise unchanged timestamp.\n        \"\"\"\n        dt = as_timestamp(dt)\n        if not self.onOffset(dt):\n            dt = dt + self.__class__(1, normalize=self.normalize, **self.kwds)\n        return dt",
        "begin_line": 410,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#444",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self):\n        return self._prefix",
        "begin_line": 444,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#448",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self):\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = \"{n}{code}\".format(n=self.n, code=code)\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 448,
        "end_line": 466,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.SingleConstructorOffset._from_name#478",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.SingleConstructorOffset",
        "signature": "pandas.tseries.offsets.SingleConstructorOffset._from_name(cls, suffix=None)",
        "snippet": "    def _from_name(cls, suffix=None):\n        # default _from_name calls cls with no args\n        if suffix:\n            raise ValueError(\"Bad freq suffix {suffix}\".format(suffix=suffix))\n        return cls()",
        "begin_line": 478,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessMixin.offset#510",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessMixin",
        "signature": "pandas.tseries.offsets.BusinessMixin.offset(self)",
        "snippet": "    def offset(self):\n        \"\"\"\n        Alias for self._offset.\n        \"\"\"\n        # Alias for backward compat\n        return self._offset",
        "begin_line": 510,
        "end_line": 515,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.__init__#537",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.__init__(self, n=1, normalize=False, offset=timedelta(0))",
        "snippet": "    def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n        BaseOffset.__init__(self, n, normalize)\n        object.__setattr__(self, \"_offset\", offset)",
        "begin_line": 537,
        "end_line": 539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.apply#573",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.apply(self, other)",
        "snippet": "    def apply(self, other):\n        if isinstance(other, datetime):\n            n = self.n\n            wday = other.weekday()\n\n            # avoid slowness below by operating on weeks first\n            weeks = n // 5\n            if n <= 0 and wday > 4:\n                # roll forward\n                n += 1\n\n            n -= 5 * weeks\n\n            # n is always >= 0 at this point\n            if n == 0 and wday > 4:\n                # roll back\n                days = 4 - wday\n            elif wday > 4:\n                # roll forward\n                days = (7 - wday) + (n - 1)\n            elif wday + n <= 4:\n                # shift by n days without leaving the current week\n                days = n\n            else:\n                # shift by n days plus 2 to get past the weekend\n                days = n + 2\n\n            result = other + timedelta(days=7 * weeks + days)\n            if self.offset:\n                result = result + self.offset\n            return result\n\n        elif isinstance(other, (timedelta, Tick)):\n            return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n        else:\n            raise ApplyTypeError(\n                \"Only know how to combine business day with datetime or timedelta.\"\n            )",
        "begin_line": 573,
        "end_line": 610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.BusinessDay.onOffset#637",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.BusinessDay",
        "signature": "pandas.tseries.offsets.BusinessDay.onOffset(self, dt)",
        "snippet": "    def onOffset(self, dt):\n        if self.normalize and not _is_normalized(dt):\n            return False\n        return dt.weekday() < 5",
        "begin_line": 637,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2552",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2552,
        "end_line": 2557,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017497812773403323,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__eq__#2582",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return False\n\n        if isinstance(other, Tick):\n            return self.delta == other.delta\n        else:\n            return False",
        "begin_line": 2582,
        "end_line": 2597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001784121320249777,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2604",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2604,
        "end_line": 2619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2622",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self):\n        return self.n * self._inc",
        "begin_line": 2622,
        "end_line": 2623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017497812773403323,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2626",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2626,
        "end_line": 2627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001755926251097454,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.offsets.generate_range#2727",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets",
        "signature": "pandas.tseries.offsets.generate_range(start=None, end=None, periods=None, offset=BDay())",
        "snippet": "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = to_datetime(start)\n    end = to_datetime(end)\n\n    if start and not offset.onOffset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.onOffset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(\n                    \"Offset {offset} did not increment date\".format(offset=offset)\n                )\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(\n                    \"Offset {offset} did not decrement date\".format(offset=offset)\n                )\n            cur = next_date",
        "begin_line": 2727,
        "end_line": 2806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#64",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009900990099009901,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0010741138560687433,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0010741138560687433
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_to_dtype#94",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_to_dtype(result, dtype)",
        "snippet": "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\" try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result.ravel()), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
        "begin_line": 94,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_numeric#161",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_numeric(result, dtype, do_round: bool=False)",
        "snippet": "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupoby.agg _ohlc; really this should be handled\n        #  earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
        "begin_line": 161,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.trans#184",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.trans(x)",
        "snippet": "    def trans(x):\n        if do_round:\n            return x.round()\n        return x",
        "begin_line": 184,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_upcast_putmask#235",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_upcast_putmask(result, mask, other)",
        "snippet": "def maybe_upcast_putmask(result, mask, other):\n    \"\"\"\n    A safe version of putmask that potentially upcasts the result.\n    The result is replaced with the first N elements of other,\n    where N is the number of True values in mask.\n    If the length of other is shorter than N, other will be repeated.\n\n    Parameters\n    ----------\n    result : ndarray\n        The destination array. This will be mutated in-place if no upcasting is\n        necessary.\n    mask : boolean ndarray\n    other : ndarray or scalar\n        The source array or value\n\n    Returns\n    -------\n    result : ndarray\n    changed : boolean\n        Set to true if the result array was upcasted\n\n    Examples\n    --------\n    >>> result, _ = maybe_upcast_putmask(np.arange(1,6),\n    np.array([False, True, False, True, True]), np.arange(21,23))\n    >>> result\n    array([1, 21, 3, 22, 21])\n    \"\"\"\n\n    if not isinstance(result, np.ndarray):\n        raise ValueError(\"The result input must be a ndarray.\")\n\n    if mask.any():\n        # Two conversions for date-like dtypes that can't be done automatically\n        # in np.place:\n        #   NaN -> NaT\n        #   integer or integer array -> date-like array\n        if is_datetimelike(result.dtype):\n            if is_scalar(other):\n                if isna(other):\n                    other = result.dtype.type(\"nat\")\n                elif is_integer(other):\n                    other = np.array(other, dtype=result.dtype)\n            elif is_integer_dtype(other):\n                other = np.array(other, dtype=result.dtype)\n\n        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True\n\n        # we want to decide whether place will work\n        # if we have nans in the False portion of our mask then we need to\n        # upcast (possibly), otherwise we DON't want to upcast (e.g. if we\n        # have values, say integers, in the success portion then it's ok to not\n        # upcast)\n        new_dtype, _ = maybe_promote(result.dtype, other)\n        if new_dtype != result.dtype:\n\n            # we have a scalar or len 0 ndarray\n            # and its nan and we are changing some values\n            if is_scalar(other) or (isinstance(other, np.ndarray) and other.ndim < 1):\n                if isna(other):\n                    return changeit()\n\n            # we have an ndarray and the masking has nans in it\n            else:\n\n                if isna(other).any():\n                    return changeit()\n\n        try:\n            np.place(result, mask, other)\n        except TypeError:\n            # e.g. int-dtype result and float-dtype other\n            return changeit()\n\n    return result, False",
        "begin_line": 235,
        "end_line": 334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018018018018018018,
            "pseudo_dstar_susp": 0.0009823182711198428,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0009823182711198428,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.dtypes.cast.changeit#282",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.changeit()",
        "snippet": "        def changeit():\n\n            # try to directly set by expanding our array to full\n            # length of the boolean\n            try:\n                om = other[mask]\n            except (IndexError, TypeError):\n                # IndexError occurs in test_upcast when we have a boolean\n                #  mask of the wrong shape\n                # TypeError occurs in test_upcast when `other` is a bool\n                pass\n            else:\n                om_at = om.astype(result.dtype)\n                if (om == om_at).all():\n                    new_result = result.values.copy()\n                    new_result[mask] = om_at\n                    result[:] = new_result\n                    return result, False\n\n            # we are forced to change the dtype of the result as the input\n            # isn't compatible\n            r, _ = maybe_upcast(result, fill_value=other, copy=True)\n            np.place(r, mask, other)\n\n            return r, True",
        "begin_line": 282,
        "end_line": 306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018018018018018018,
            "pseudo_dstar_susp": 0.0009823182711198428,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0009823182711198428,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#337",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 337,
        "end_line": 462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#465",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 465,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_dtype_type#642",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_dtype_type(element)",
        "snippet": "def maybe_infer_dtype_type(element):\n    \"\"\"Try to infer an object's dtype, for use in arithmetic ops\n\n    Uses `element.dtype` if that's available.\n    Objects implementing the iterator protocol are cast to a NumPy array,\n    and from there the array's type is used.\n\n    Parameters\n    ----------\n    element : object\n        Possibly has a `.dtype` attribute, and possibly the iterator\n        protocol.\n\n    Returns\n    -------\n    tipo : type\n\n    Examples\n    --------\n    >>> from collections import namedtuple\n    >>> Foo = namedtuple(\"Foo\", \"dtype\")\n    >>> maybe_infer_dtype_type(Foo(np.dtype(\"i8\")))\n    numpy.int64\n    \"\"\"\n    tipo = None\n    if hasattr(element, \"dtype\"):\n        tipo = element.dtype\n    elif is_list_like(element):\n        element = np.asarray(element)\n        tipo = element.dtype\n    return tipo",
        "begin_line": 642,
        "end_line": 672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#710",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 710,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021915406530791147,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#752",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy=True, skipna=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(\n            \"cannot astype a datetimelike from [{from_dtype}] \"\n            \"to [{to_dtype}]\".format(from_dtype=arr.dtype, to_dtype=dtype)\n        )\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(\n            \"cannot astype a timedelta from [{from_dtype}] \"\n            \"to [{to_dtype}]\".format(from_dtype=arr.dtype, to_dtype=dtype)\n        )\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = \"The '{dtype}' dtype has no unit. Please pass in '{dtype}[ns]' instead.\"\n        raise ValueError(msg.format(dtype=dtype.name))\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 752,
        "end_line": 851,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#975",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr):\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 975,
        "end_line": 986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0011210762331838565,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0011210762331838565,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#989",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates=False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 989,
        "end_line": 1093,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010224948875255625,
            "pseudo_dstar_susp": 0.0007485029940119761,
            "pseudo_tarantula_susp": 0.0011273957158962795,
            "pseudo_op2_susp": 0.0007485029940119761,
            "pseudo_barinel_susp": 0.0011273957158962795
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1033",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1033,
        "end_line": 1056,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.00510204081632653,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.00510204081632653,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1058",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            return to_timedelta(v)._ndarray_values.reshape(shape)\n        except ValueError:\n            return v.reshape(shape)",
        "begin_line": 1058,
        "end_line": 1067,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007535795026375283,
            "pseudo_dstar_susp": 0.0006816632583503749,
            "pseudo_tarantula_susp": 0.0009049773755656109,
            "pseudo_op2_susp": 0.0006816632583503749,
            "pseudo_barinel_susp": 0.0009049773755656109
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1096",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors=\"raise\"):\n    \"\"\" try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                \"The '{dtype}' dtype has no unit. \"\n                \"Please pass in '{dtype}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert datetimelike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg.format(dtype=dtype.name))\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(\n                        \"cannot convert timedeltalike to \"\n                        \"dtype [{dtype}]\".format(dtype=dtype)\n                    )\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(\"Cannot cast datetime64 to {dtype}\".format(dtype=dtype))\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1096,
        "end_line": 1232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.004166666666666667,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.004166666666666667,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.dtypes.cast.find_common_type#1235",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.find_common_type(types)",
        "snippet": "def find_common_type(types):\n    \"\"\"\n    Find a common data type among the given dtypes.\n\n    Parameters\n    ----------\n    types : list of dtypes\n\n    Returns\n    -------\n    pandas extension or numpy dtype\n\n    See Also\n    --------\n    numpy.find_common_type\n\n    \"\"\"\n\n    if len(types) == 0:\n        raise ValueError(\"no types given\")\n\n    first = types[0]\n\n    # workaround for find_common_type([np.dtype('datetime64[ns]')] * 2)\n    # => object\n    if all(is_dtype_equal(first, t) for t in types[1:]):\n        return first\n\n    if any(isinstance(t, ExtensionDtype) for t in types):\n        return np.object\n\n    # take lowest unit\n    if all(is_datetime64_dtype(t) for t in types):\n        return np.dtype(\"datetime64[ns]\")\n    if all(is_timedelta64_dtype(t) for t in types):\n        return np.dtype(\"timedelta64[ns]\")\n\n    # don't mix bool / int or float or complex\n    # this is different from numpy, which casts bool with float/int as int\n    has_bools = any(is_bool_dtype(t) for t in types)\n    if has_bools:\n        for t in types:\n            if is_integer_dtype(t) or is_float_dtype(t) or is_complex_dtype(t):\n                return np.object\n\n    return np.find_common_type(types, [])",
        "begin_line": 1235,
        "end_line": 1280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1351",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1351,
        "end_line": 1373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011574074074074073,
            "pseudo_dstar_susp": 0.006211180124223602,
            "pseudo_tarantula_susp": 0.001040582726326743,
            "pseudo_op2_susp": 0.006211180124223602,
            "pseudo_barinel_susp": 0.001040582726326743
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1376",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy=False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1376,
        "end_line": 1414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005780346820809249,
            "pseudo_dstar_susp": 0.0005780346820809249,
            "pseudo_tarantula_susp": 0.0006049606775559589,
            "pseudo_op2_susp": 0.0005780346820809249,
            "pseudo_barinel_susp": 0.0006049606775559589
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1417",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy=False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    int_arr : ndarray\n        An array of integer or unsigned integer dtype\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            \"casted to the dtype {dtype}\".format(dtype=dtype)\n        )\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1417,
        "end_line": 1485,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001784121320249777,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#263",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, start=None, end=None, periods=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            dtarr = DatetimeArray._generate_range(\n                start,\n                end,\n                periods,\n                freq=freq,\n                tz=tz,\n                normalize=normalize,\n                closed=closed,\n                ambiguous=ambiguous,\n            )\n            warnings.warn(\n                \"Creating a DatetimeIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.date_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            return cls._simple_new(dtarr._data, freq=dtarr.freq, tz=dtarr.tz, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=True,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name, freq=dtarr.freq, tz=dtarr.tz)\n        return subarr",
        "begin_line": 263,
        "end_line": 338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#341",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values, name=None, freq=None, tz=None, dtype=None)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, tz=None, dtype=None):\n        \"\"\"\n        we require the we have a dtype compat for the values\n        if we are passed a non-dtype compat, then coerce using the constructor\n        \"\"\"\n        if isinstance(values, DatetimeArray):\n            if tz:\n                tz = validate_tz_from_dtype(dtype, tz)\n                dtype = DatetimeTZDtype(tz=tz)\n            elif dtype is None:\n                dtype = _NS_DTYPE\n\n            values = DatetimeArray(values, freq=freq, dtype=dtype)\n            tz = values.tz\n            freq = values.freq\n            values = values._data\n\n        # DatetimeArray._simple_new will accept either i8 or M8[ns] dtypes\n        if isinstance(values, DatetimeIndex):\n            values = values._data\n\n        dtype = tz_to_dtype(tz)\n        dtarr = DatetimeArray._simple_new(values, freq=freq, dtype=dtype)\n        assert isinstance(dtarr, DatetimeArray)\n\n        result = object.__new__(cls)\n        result._data = dtarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = dtarr._data\n        result._reset_identity()\n        return result",
        "begin_line": 341,
        "end_line": 372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001784121320249777,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.dtype#395",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._data.dtype",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001718213058419244,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.tz#399",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.tz(self)",
        "snippet": "    def tz(self):\n        # GH 18595\n        return self._data.tz",
        "begin_line": 399,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017385257301808066,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__#1208",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        elif result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            assert isinstance(result, np.ndarray), result\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 1208,
        "end_line": 1217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._box_func#1220",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, tz=self.tz)",
        "begin_line": 1220,
        "end_line": 1221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018099547511312217,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates#1245",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        return True",
        "begin_line": 1245,
        "end_line": 1246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#1417",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs\n):\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs\n    )\n    return DatetimeIndex._simple_new(dtarr, tz=dtarr.tz, freq=dtarr.freq, name=name)",
        "begin_line": 1417,
        "end_line": 1578,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017885888034340904,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.bdate_range#1581",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, closed=None, **kwargs)",
        "snippet": "def bdate_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=\"B\",\n    tz=None,\n    normalize=True,\n    name=None,\n    weekmask=None,\n    holidays=None,\n    closed=None,\n    **kwargs\n):\n    \"\"\"\n    Return a fixed frequency DatetimeIndex, with business day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or datetime-like, default None\n        Left bound for generating dates.\n    end : str or datetime-like, default None\n        Right bound for generating dates.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'B' (business daily)\n        Frequency strings can have multiples, e.g. '5H'.\n    tz : str or None\n        Time zone name for returning localized DatetimeIndex, for example\n        Asia/Beijing.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    weekmask : str or None, default None\n        Weekmask of valid business days, passed to ``numpy.busdaycalendar``,\n        only used when custom frequency strings are passed.  The default\n        value None is equivalent to 'Mon Tue Wed Thu Fri'.\n\n        .. versionadded:: 0.21.0\n\n    holidays : list-like or None, default None\n        Dates to exclude from the set of valid business days, passed to\n        ``numpy.busdaycalendar``, only used when custom frequency strings\n        are passed.\n\n        .. versionadded:: 0.21.0\n\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    DatetimeIndex\n\n    Notes\n    -----\n    Of the four parameters: ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified.  Specifying ``freq`` is a requirement\n    for ``bdate_range``.  Use ``date_range`` if specifying ``freq`` is not\n    desired.\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Note how the two weekend days are skipped in the result.\n\n    >>> pd.bdate_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n               '2018-01-05', '2018-01-08'],\n              dtype='datetime64[ns]', freq='B')\n    \"\"\"\n    if freq is None:\n        msg = \"freq must be specified for bdate_range; use date_range instead\"\n        raise TypeError(msg)\n\n    if is_string_like(freq) and freq.startswith(\"C\"):\n        try:\n            weekmask = weekmask or \"Mon Tue Wed Thu Fri\"\n            freq = prefix_mapping[freq](holidays=holidays, weekmask=weekmask)\n        except (KeyError, TypeError):\n            msg = \"invalid custom frequency string: {freq}\".format(freq=freq)\n            raise ValueError(msg)\n    elif holidays or weekmask:\n        msg = (\n            \"a custom frequency string is required when holidays or \"\n            \"weekmask are passed, got frequency {freq}\"\n        ).format(freq=freq)\n        raise ValueError(msg)\n\n    return date_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        name=name,\n        closed=closed,\n        **kwargs\n    )",
        "begin_line": 1581,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#64",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 64,
        "end_line": 84,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020173492031470649,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#87",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 87,
        "end_line": 119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019592476489028212,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__.maybe_upcast_for_op#122",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.maybe_upcast_for_op(obj, shape: Tuple[int, ...])",
        "snippet": "def maybe_upcast_for_op(obj, shape: Tuple[int, ...]):\n    \"\"\"\n    Cast non-pandas objects to pandas types to unify behavior of arithmetic\n    and comparison operations.\n\n    Parameters\n    ----------\n    obj: object\n    shape : tuple[int]\n\n    Returns\n    -------\n    out : object\n\n    Notes\n    -----\n    Be careful to call this *after* determining the `name` attribute to be\n    attached to the result of the arithmetic operation.\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray, TimedeltaArray\n\n    if type(obj) is datetime.timedelta:\n        # GH#22390  cast up to Timedelta to rely on Timedelta\n        # implementation; otherwise operation against numeric-dtype\n        # raises TypeError\n        return Timedelta(obj)\n    elif isinstance(obj, np.datetime64):\n        # GH#28080 numpy casts integer-dtype to datetime64 when doing\n        #  array[int] + datetime64, which we do not allow\n        if isna(obj):\n            # Avoid possible ambiguities with pd.NaT\n            obj = obj.astype(\"datetime64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return DatetimeArray(right)\n\n        return Timestamp(obj)\n\n    elif isinstance(obj, np.timedelta64):\n        if isna(obj):\n            # wrapping timedelta64(\"NaT\") in Timedelta returns NaT,\n            #  which would incorrectly be treated as a datetime-NaT, so\n            #  we broadcast and wrap in a TimedeltaArray\n            obj = obj.astype(\"timedelta64[ns]\")\n            right = np.broadcast_to(obj, shape)\n            return TimedeltaArray(right)\n\n        # In particular non-nanosecond timedelta64 needs to be cast to\n        #  nanoseconds, or else we get undesired behavior like\n        #  np.timedelta64(3, 'D') / 2 == np.timedelta64(1, 'D')\n        return Timedelta(obj)\n\n    elif isinstance(obj, np.ndarray) and is_timedelta64_dtype(obj.dtype):\n        # GH#22390 Unfortunately we need to special-case right-hand\n        # timedelta64 dtypes because numpy casts integer dtypes to\n        # timedelta64 when operating with timedelta64\n        return TimedeltaArray._from_sequence(obj)\n    return obj",
        "begin_line": 122,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020563438206868187,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__._align_method_SERIES#423",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._align_method_SERIES(left, right, align_asobject=False)",
        "snippet": "def _align_method_SERIES(left, right, align_asobject=False):\n    \"\"\" align lhs and rhs Series \"\"\"\n\n    # ToDo: Different from _align_method_FRAME, list, tuple and ndarray\n    # are not coerced here\n    # because Series has inconsistencies described in #13637\n\n    if isinstance(right, ABCSeries):\n        # avoid repeated alignment\n        if not left.index.equals(right.index):\n\n            if align_asobject:\n                # to keep original value's dtype for bool ops\n                left = left.astype(object)\n                right = right.astype(object)\n\n            left, right = left.align(right, copy=False)\n\n    return left, right",
        "begin_line": 423,
        "end_line": 441,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__._construct_result#444",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._construct_result(left: ABCSeries, result: Union[np.ndarray, ABCExtensionArray], index: ABCIndexClass, name)",
        "snippet": "def _construct_result(\n    left: ABCSeries,\n    result: Union[np.ndarray, ABCExtensionArray],\n    index: ABCIndexClass,\n    name,\n):\n    \"\"\"\n    Construct an appropriately-labelled Series from the result of an op.\n\n    Parameters\n    ----------\n    left : Series\n    result : ndarray or ExtensionArray\n    index : Index\n    name : object\n\n    Returns\n    -------\n    Series\n        In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n    \"\"\"\n    if isinstance(result, tuple):\n        # produced by divmod or rdivmod\n        return (\n            _construct_result(left, result[0], index=index, name=name),\n            _construct_result(left, result[1], index=index, name=name),\n        )\n\n    # We do not pass dtype to ensure that the Series constructor\n    #  does inference in the case where `result` has object-dtype.\n    out = left._constructor(result, index=index)\n    out = out.__finalize__(left)\n\n    # Set the result's name after __finalize__ is called because __finalize__\n    #  would set it back to self.name\n    out.name = name\n    return out",
        "begin_line": 444,
        "end_line": 480,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020173492031470649,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#492",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(left, right)",
        "snippet": "    def wrapper(left, right):\n        if isinstance(right, ABCDataFrame):\n            return NotImplemented\n\n        left, right = _align_method_SERIES(left, right)\n        res_name = get_op_result_name(left, right)\n\n        lvalues = extract_array(left, extract_numpy=True)\n        result = arithmetic_op(lvalues, right, op, str_rep, eval_kwargs)\n\n        return _construct_result(left, result, index=left.index, name=res_name)",
        "begin_line": 492,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020563438206868187,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#515",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)",
        "begin_line": 515,
        "end_line": 531,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__._flex_method_SERIES#562",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._flex_method_SERIES(cls, op, special)",
        "snippet": "def _flex_method_SERIES(cls, op, special):\n    name = _get_op_name(op, special)\n    doc = _make_flex_doc(name, \"series\")\n\n    @Appender(doc)\n    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)\n\n    flex_wrapper.__name__ = name\n    return flex_wrapper",
        "begin_line": 562,
        "end_line": 586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.__init__.flex_wrapper#567",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.flex_wrapper(self, other, level=None, fill_value=None, axis=0)",
        "snippet": "    def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n        # validate axis\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(other, ABCSeries):\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        elif isinstance(other, (np.ndarray, list, tuple)):\n            if len(other) != len(self):\n                raise ValueError(\"Lengths must be equal\")\n            other = self._constructor(other, self.index)\n            return self._binop(other, op, level=level, fill_value=fill_value)\n        else:\n            if fill_value is not None:\n                self = self.fillna(fill_value)\n\n            return op(self, other)",
        "begin_line": 567,
        "end_line": 583,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#58",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype=None)",
        "snippet": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 58,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.construction.init_ndarray#122",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_ndarray(values, index, columns, dtype=None, copy=False)",
        "snippet": "def init_ndarray(values, index, columns, dtype=None, copy=False):\n    # input must be a ndarray, list, Series, index\n\n    if isinstance(values, ABCSeries):\n        if columns is None:\n            if values.name is not None:\n                columns = [values.name]\n        if index is None:\n            index = values.index\n        else:\n            values = values.reindex(index)\n\n        # zero len case (GH #2234)\n        if not len(values) and columns is not None and len(columns):\n            values = np.empty((0, 1), dtype=object)\n\n    # we could have a categorical type passed or coerced to 'category'\n    # recast this to an arrays_to_mgr\n    if is_categorical_dtype(getattr(values, \"dtype\", None)) or is_categorical_dtype(\n        dtype\n    ):\n\n        if not hasattr(values, \"dtype\"):\n            values = prep_ndarray(values, copy=copy)\n            values = values.ravel()\n        elif copy:\n            values = values.copy()\n\n        index, columns = _get_axes(len(values), 1, index, columns)\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n    elif is_extension_array_dtype(values):\n        # GH#19157\n        if columns is None:\n            columns = [0]\n        return arrays_to_mgr([values], columns, index, columns, dtype=dtype)\n\n    # by definition an array here\n    # the dtypes will be coerced to a single dtype\n    values = prep_ndarray(values, copy=copy)\n\n    if dtype is not None:\n        if not is_dtype_equal(values.dtype, dtype):\n            try:\n                values = values.astype(dtype)\n            except Exception as orig:\n                raise ValueError(\n                    \"failed to cast to '{dtype}' (Exception \"\n                    \"was: {orig})\".format(dtype=dtype, orig=orig)\n                ) from orig\n\n    index, columns = _get_axes(*values.shape, index=index, columns=columns)\n    values = values.T\n\n    # if we don't have a dtype specified, then try to convert objects\n    # on the entire block; this is to convert if we have datetimelike's\n    # embedded in an object type\n    if dtype is None and is_object_dtype(values):\n\n        if values.ndim == 2 and values.shape[0] != 1:\n            # transpose and separate blocks\n\n            dvals_list = [maybe_infer_to_datetimelike(row) for row in values]\n            for n in range(len(dvals_list)):\n                if isinstance(dvals_list[n], np.ndarray):\n                    dvals_list[n] = dvals_list[n].reshape(1, -1)\n\n            from pandas.core.internals.blocks import make_block\n\n            # TODO: What about re-joining object columns?\n            block_values = [\n                make_block(dvals_list[n], placement=[n]) for n in range(len(dvals_list))\n            ]\n\n        else:\n            datelike_vals = maybe_infer_to_datetimelike(values)\n            block_values = [datelike_vals]\n    else:\n        block_values = [values]\n\n    return create_block_manager_from_blocks(block_values, [columns, index])",
        "begin_line": 122,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#204",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data, index, columns, dtype=None)",
        "snippet": "def init_dict(data, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if columns is not None:\n        from pandas.core.series import Series\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = object\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = com.dict_keys_to_ordered_list(data)\n        columns = data_names = Index(keys)\n        arrays = (com.maybe_iterable_to_list(data[k]) for k in keys)\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 204,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.construction.prep_ndarray#251",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.prep_ndarray(values, copy=True)",
        "snippet": "def prep_ndarray(values, copy=True):\n    if not isinstance(values, (np.ndarray, ABCSeries, Index)):\n        if len(values) == 0:\n            return np.empty((0, 0), dtype=object)\n\n        def convert(v):\n            return maybe_convert_platform(v)\n\n        # we could have a 1-dim or 2-dim list here\n        # this is equiv of np.asarray, but does object conversion\n        # and platform dtype preservation\n        try:\n            if is_list_like(values[0]) or hasattr(values[0], \"len\"):\n                values = np.array([convert(v) for v in values])\n            elif isinstance(values[0], np.ndarray) and values[0].ndim == 0:\n                # GH#21861\n                values = np.array([convert(v) for v in values])\n            else:\n                values = convert(values)\n        except (ValueError, TypeError):\n            values = convert(values)\n\n    else:\n\n        # drop subclass info, do not copy data\n        values = np.asarray(values)\n        if copy:\n            values = values.copy()\n\n    if values.ndim == 1:\n        values = values.reshape((values.shape[0], 1))\n    elif values.ndim != 2:\n        raise ValueError(\"Must pass 2-d input\")\n\n    return values",
        "begin_line": 251,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#288",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype=None)",
        "snippet": "def _homogenize(data, index, dtype=None):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 288,
        "end_line": 316,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#319",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data):\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n        have_ordered = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                if isinstance(val, OrderedDict):\n                    have_ordered = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = _union_indexes(indexes)\n        elif have_dicts:\n            index = _union_indexes(indexes, sort=not (compat.PY36 or have_ordered))\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = (\n                        \"array length {length} does not match index \"\n                        \"length {idx_len}\".format(length=lengths[0], idx_len=len(index))\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 319,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.internals.construction._get_axes#408",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._get_axes(N, K, index, columns)",
        "snippet": "def _get_axes(N, K, index, columns):\n    # helper to create the axes as indexes\n    # return axes or defaults\n\n    if index is None:\n        index = ibase.default_index(N)\n    else:\n        index = ensure_index(index)\n\n    if columns is None:\n        columns = ibase.default_index(K)\n    else:\n        columns = ensure_index(columns)\n    return index, columns",
        "begin_line": 408,
        "end_line": 421,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#13",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 13,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.0011210762331838565,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.0011210762331838565,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#29",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, arr_value)",
        "snippet": "def is_scalar_indexer(indexer, arr_value) -> bool:\n    # return True if we are all scalar indexers\n\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n            return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#39",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 39,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#65",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        The key for the setitem\n    value : array-like\n        The value for the setitem\n    values : array-like\n        The values being set into\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't\n        match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 65,
        "end_line": 112,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexers.validate_indices#115",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.validate_indices(indices: np.ndarray, n: int)",
        "snippet": "def validate_indices(indices: np.ndarray, n: int) -> None:\n    \"\"\"\n    Perform bounds-checking for an indexer.\n\n    -1 is allowed for indicating missing values.\n\n    Parameters\n    ----------\n    indices : ndarray\n    n : int\n        length of the array being indexed\n\n    Raises\n    ------\n    ValueError\n\n    Examples\n    --------\n    >>> validate_indices([1, 2], 3)\n    # OK\n    >>> validate_indices([1, -2], 3)\n    ValueError\n    >>> validate_indices([1, 2, 3], 3)\n    IndexError\n    >>> validate_indices([-1, -1], 0)\n    # OK\n    >>> validate_indices([0, 1], 0)\n    IndexError\n    \"\"\"\n    if len(indices):\n        min_idx = indices.min()\n        if min_idx < -1:\n            msg = \"'indices' contains values less than allowed ({} < {})\".format(\n                min_idx, -1\n            )\n            raise ValueError(msg)\n\n        max_idx = indices.max()\n        if max_idx >= n:\n            raise IndexError(\"indices are out-of-bounds\")",
        "begin_line": 115,
        "end_line": 154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#162",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : False, int, default None\n        Pass thru to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = \"'{thing}'\".format(thing=as_escaped_string(thing))\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 162,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#194",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 194,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#281",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = obj.__class__.__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = \"\\n%s\" % (\" \" * (name_len + 1))\n        space2 = \"\\n%s\" % (\" \" * (name_len + 2))\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(s, line, value, display_width, next_line_prefix):\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values):\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = \"[]{}\".format(close)\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = \"[{}]{}\".format(first, close)\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = \"[{}, {}]{}\".format(first, last, close)\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 281,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#349",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s, line, value, display_width, next_line_prefix)",
        "snippet": "    def _extend_line(s, line, value, display_width, next_line_prefix):\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 349,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#357",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values)",
        "snippet": "    def best_len(values):\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#497",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs = []  # type: List[Tuple[str, Union[str, int]]]\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", \"'{}'\".format(obj.dtype)))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 497,
        "end_line": 530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#389",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 389,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#405",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, abc.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    \"incompatible data and dtype: {e}\".format(e=e)\n                )\n                raise exc from e\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr, fastpath=True)",
        "begin_line": 405,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017211703958691911,
            "pseudo_dstar_susp": 0.0009578544061302681,
            "pseudo_tarantula_susp": 0.001736111111111111,
            "pseudo_op2_susp": 0.0009578544061302681,
            "pseudo_barinel_susp": 0.001736111111111111
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1027",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1027,
        "end_line": 1031,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2815",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self.take(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2815,
        "end_line": 2870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2970",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2970,
        "end_line": 2986,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#3033",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 3033,
        "end_line": 3052,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#3091",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError):\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a \"\n                    \"Series\"\n                )\n\n            self._data = self._data.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 3091,
        "end_line": 3109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_item_values#3111",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_item_values(self, key, values)",
        "snippet": "    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)",
        "begin_line": 3111,
        "end_line": 3116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#3118",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, items)",
        "snippet": "    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)",
        "begin_line": 3118,
        "end_line": 3123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3601",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index, copy=False)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3601,
        "end_line": 3703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3621",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    )\n            return value",
        "begin_line": 3621,
        "end_line": 3641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reduce#7782",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        if axis is None and filter_type == \"bool\":\n            labels = None\n            constructor = None\n        else:\n            # TODO: Make other agg func handle axis=None properly\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n\n        if numeric_only is None:\n            values = self.values\n            try:\n                result = f(values)\n\n                if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                    # work around https://github.com/numpy/numpy/issues/10489\n                    # TODO: combine with hasattr(result, 'dtype') further down\n                    # hard since we don't have `values` down there.\n                    result = np.bool_(result)\n            except TypeError as err:\n                # e.g. in nanops trying to convert strs to float\n\n                # try by-column first\n                if filter_type is None and axis == 0:\n                    # this can end up with a non-reduction\n                    # but not always. if the types are mixed\n                    # with datelike then need to make sure a series\n\n                    # we only end up here if we have not specified\n                    # numeric_only and yet we have tried a\n                    # column-by-column reduction, where we have mixed type.\n                    # So let's just do what we can\n                    from pandas.core.apply import frame_apply\n\n                    opa = frame_apply(\n                        self, func=f, result_type=\"expand\", ignore_failures=True\n                    )\n                    result = opa.get_result()\n                    if result.ndim == self.ndim:\n                        result = result.iloc[0]\n                    return result\n\n                if filter_type is None or filter_type == \"numeric\":\n                    data = self._get_numeric_data()\n                elif filter_type == \"bool\":\n                    data = self._get_bool_data()\n                else:  # pragma: no cover\n                    raise NotImplementedError(\n                        \"Handling exception with filter_type {f} not\"\n                        \"implemented.\".format(f=filter_type)\n                    ) from err\n                with np.errstate(all=\"ignore\"):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == \"numeric\":\n                    data = self._get_numeric_data()\n                elif filter_type == \"bool\":\n                    # GH 25101, # GH 24434\n                    data = self._get_bool_data() if axis == 0 else self\n                else:  # pragma: no cover\n                    msg = (\n                        \"Generating numeric_only data with filter_type {f}\"\n                        \"not supported.\".format(f=filter_type)\n                    )\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n\n        if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == \"numeric\":\n                    result = result.astype(np.float64)\n                elif filter_type == \"bool\" and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n\n                # try to coerce to the original dtypes item by item if we can\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result",
        "begin_line": 7782,
        "end_line": 7875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.f#7794",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.f(x)",
        "snippet": "        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)",
        "begin_line": 7794,
        "end_line": 7795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.008849557522123894,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.008849557522123894,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._get_agg_axis#7993",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._get_agg_axis(self, axis_num)",
        "snippet": "    def _get_agg_axis(self, axis_num):\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError(\"Axis must be 0 or 1 (got %r)\" % axis_num)",
        "begin_line": 7993,
        "end_line": 8002,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.quantile#8091",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
        "snippet": "    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n        \"\"\"\n        Return values at the given quantile over requested axis.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value between 0 <= q <= 1, the quantile(s) to compute.\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        numeric_only : bool, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        Series or DataFrame\n\n            If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        See Also\n        --------\n        core.window.Rolling.quantile: Rolling quantile.\n        numpy.percentile: Numpy function to compute the percentile.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n        ...                   columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        Name: 0.1, dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n        ...                    'B': [pd.Timestamp('2010'),\n        ...                          pd.Timestamp('2011')],\n        ...                    'C': [pd.Timedelta('1 days'),\n        ...                          pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n        \"\"\"\n        validate_percentile(q)\n\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n\n        if is_transposed:\n            data = data.T\n\n        if len(data.columns) == 0:\n            # GH#23925 _get_numeric_data may have dropped all columns\n            cols = Index([], name=self.columns.name)\n            if is_list_like(q):\n                return self._constructor([], index=q, columns=cols)\n            return self._constructor_sliced([], index=cols, name=q)\n\n        result = data._data.quantile(\n            qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n        )\n\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n\n        if is_transposed:\n            result = result.T\n\n        return result",
        "begin_line": 8091,
        "end_line": 8185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#205",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                # GH 26336: explicitly handle 'category' to avoid warning\n                # TODO: Remove after CategoricalDtype defaults to ordered=False\n                if (\n                    isinstance(dtype, str)\n                    and dtype == \"category\"\n                    and is_categorical(data)\n                ):\n                    dtype = data.dtype\n\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n                if name is None:\n                    name = data.name\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, ABCSeries):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument.  `copy` must \"\n                        \"be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(\n                    \"{0!r} type is unordered\".format(data.__class__.__name__)\n                )\n            elif isinstance(data, ABCSparseArray):\n                # handle sparse passed here (and force conversion)\n                data = data.to_dense()\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            \"Length of passed values is {val}, \"\n                            \"index implies {ind}\".format(val=len(data), ind=len(index))\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager(data, index, fastpath=True)\n\n        generic.NDFrame.__init__(self, data, fastpath=True)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 205,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001326259946949602,
            "pseudo_dstar_susp": 0.007936507936507936,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.007936507936507936,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#330",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n        s = Series(values, index=keys, dtype=dtype)\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        elif not PY36 and not isinstance(data, OrderedDict) and data:\n            # Need the `and data` to avoid sorting Series(None, index=[...])\n            # since that isn't really dict-like\n            try:\n                s = s.sort_index()\n            except TypeError:\n                pass\n        return s._data, s.index",
        "begin_line": 330,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009900990099009901,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0010741138560687433,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0010741138560687433
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#406",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self):\n        return Series",
        "begin_line": 406,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007320644216691069,
            "pseudo_dstar_susp": 0.0006711409395973154,
            "pseudo_tarantula_susp": 0.0008857395925597874,
            "pseudo_op2_susp": 0.0006711409395973154,
            "pseudo_barinel_susp": 0.0008857395925597874
        }
    },
    {
        "name": "pandas.core.series.Series._constructor_expanddim#410",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor_expanddim(self)",
        "snippet": "    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n\n        return DataFrame",
        "begin_line": 410,
        "end_line": 413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series._can_hold_na#417",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._can_hold_na(self)",
        "snippet": "    def _can_hold_na(self):\n        return self._data._can_hold_na",
        "begin_line": 417,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#422",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis, labels, fastpath=False)",
        "snippet": "    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\"\n        Override generic, we want to set the _typ here.\n        \"\"\"\n\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        self._set_subtyp(is_all_dates)\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)",
        "begin_line": 422,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.series.Series._set_subtyp#449",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_subtyp(self, is_all_dates)",
        "snippet": "    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, \"_subtyp\", \"time_series\")\n        else:\n            object.__setattr__(self, \"_subtyp\", \"series\")",
        "begin_line": 449,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#461",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 461,
        "end_line": 465,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005743825387708214,
            "pseudo_dstar_susp": 0.0005743825387708214,
            "pseudo_tarantula_susp": 0.0005959475566150178,
            "pseudo_op2_susp": 0.0005743825387708214,
            "pseudo_barinel_susp": 0.0005959475566150178
        }
    },
    {
        "name": "pandas.core.series.Series.name#475",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Optional[Hashable]:\n        return self.attrs.get(\"name\", None)",
        "begin_line": 475,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.series.Series.name#479",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Optional[Hashable])",
        "snippet": "    def name(self, value: Optional[Hashable]) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        self.attrs[\"name\"] = value",
        "begin_line": 479,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.series.Series.values#521",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._data.external_values()",
        "begin_line": 521,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009718172983479105,
            "pseudo_dstar_susp": 0.0007288629737609329,
            "pseudo_tarantula_susp": 0.0010526315789473684,
            "pseudo_op2_susp": 0.0007288629737609329,
            "pseudo_barinel_susp": 0.0010526315789473684
        }
    },
    {
        "name": "pandas.core.series.Series._values#563",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data.\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 563,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008045052292839903,
            "pseudo_dstar_susp": 0.0024390243902439024,
            "pseudo_tarantula_susp": 0.0006983240223463687,
            "pseudo_op2_susp": 0.0024390243902439024,
            "pseudo_barinel_susp": 0.0006983240223463687
        }
    },
    {
        "name": "pandas.core.series.Series._internal_get_values#589",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        return self._data.get_values()",
        "begin_line": 589,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005934718100890207,
            "pseudo_dstar_susp": 0.0005934718100890207,
            "pseudo_tarantula_susp": 0.0006422607578676942,
            "pseudo_op2_susp": 0.0005934718100890207,
            "pseudo_barinel_susp": 0.0006422607578676942
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#716",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 716,
        "end_line": 720,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005896226415094339,
            "pseudo_dstar_susp": 0.0005896226415094339,
            "pseudo_tarantula_susp": 0.0006365372374283895,
            "pseudo_op2_susp": 0.0005896226415094339,
            "pseudo_barinel_susp": 0.0006365372374283895
        }
    },
    {
        "name": "pandas.core.series.Series.__array_ufunc__#796",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array_ufunc__(self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any)",
        "snippet": "    def __array_ufunc__(\n        self, ufunc: Callable, method: str, *inputs: Any, **kwargs: Any\n    ):\n        # TODO: handle DataFrame\n        cls = type(self)\n\n        # for binary ops, use our custom dunder methods\n        result = ops.maybe_dispatch_ufunc_to_dunder_op(\n            self, ufunc, method, *inputs, **kwargs\n        )\n        if result is not NotImplemented:\n            return result\n\n        # Determine if we should defer.\n        no_defer = (np.ndarray.__array_ufunc__, cls.__array_ufunc__)\n\n        for item in inputs:\n            higher_priority = (\n                hasattr(item, \"__array_priority__\")\n                and item.__array_priority__ > self.__array_priority__\n            )\n            has_array_ufunc = (\n                hasattr(item, \"__array_ufunc__\")\n                and type(item).__array_ufunc__ not in no_defer\n                and not isinstance(item, self._HANDLED_TYPES)\n            )\n            if higher_priority or has_array_ufunc:\n                return NotImplemented\n\n        # align all the inputs.\n        names = [getattr(x, \"name\") for x in inputs if hasattr(x, \"name\")]\n        types = tuple(type(x) for x in inputs)\n        # TODO: dataframe\n        alignable = [x for x, t in zip(inputs, types) if issubclass(t, Series)]\n\n        if len(alignable) > 1:\n            # This triggers alignment.\n            # At the moment, there aren't any ufuncs with more than two inputs\n            # so this ends up just being x1.index | x2.index, but we write\n            # it to handle *args.\n            index = alignable[0].index\n            for s in alignable[1:]:\n                index |= s.index\n            inputs = tuple(\n                x.reindex(index) if issubclass(t, Series) else x\n                for x, t in zip(inputs, types)\n            )\n        else:\n            index = self.index\n\n        inputs = tuple(extract_array(x, extract_numpy=True) for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n        if len(set(names)) == 1:\n            # we require names to be hashable, right?\n            name = names[0]  # type: Any\n        else:\n            name = None\n\n        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    msg = (\n                        \"outer method for ufunc {} is not implemented on \"\n                        \"pandas objects. Returning an ndarray, but in the \"\n                        \"future this will raise a 'NotImplementedError'. \"\n                        \"Consider explicitly converting the Series \"\n                        \"to an array with '.array' first.\"\n                    )\n                    warnings.warn(msg.format(ufunc), FutureWarning, stacklevel=3)\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)\n\n        if type(result) is tuple:\n            # multiple return values\n            return tuple(construct_return(x) for x in result)\n        elif method == \"at\":\n            # no return value\n            return None\n        else:\n            return construct_return(result)",
        "begin_line": 796,
        "end_line": 878,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.construct_return#854",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.construct_return(result)",
        "snippet": "        def construct_return(result):\n            if lib.is_scalar(result):\n                return result\n            elif result.ndim > 1:\n                # e.g. np.subtract.outer\n                if method == \"outer\":\n                    msg = (\n                        \"outer method for ufunc {} is not implemented on \"\n                        \"pandas objects. Returning an ndarray, but in the \"\n                        \"future this will raise a 'NotImplementedError'. \"\n                        \"Consider explicitly converting the Series \"\n                        \"to an array with '.array' first.\"\n                    )\n                    warnings.warn(msg.format(ufunc), FutureWarning, stacklevel=3)\n                return result\n            return self._constructor(result, index=index, name=name, copy=False)",
        "begin_line": 854,
        "end_line": 869,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019312475859405175,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#880",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarary`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discared with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if (\n            dtype is None\n            and isinstance(self.array, ABCDatetimeArray)\n            and getattr(self.dtype, \"tz\", None)\n        ):\n            msg = (\n                \"Converting timezone-aware DatetimeArray to timezone-naive \"\n                \"ndarray with 'datetime64[ns]' dtype. In the future, this \"\n                \"will return an ndarray with 'object' dtype where each \"\n                \"element is a 'pandas.Timestamp' with the correct 'tz'.\\n\\t\"\n                \"To accept the future behavior, pass 'dtype=object'.\\n\\t\"\n                \"To keep the old behavior, pass 'dtype=\\\"datetime64[ns]\\\"'.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n            dtype = \"M8[ns]\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 880,
        "end_line": 942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018018018018018018,
            "pseudo_dstar_susp": 0.0009823182711198428,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0009823182711198428,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.series.Series.axes#1025",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.axes(self)",
        "snippet": "    def axes(self):\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]",
        "begin_line": 1025,
        "end_line": 1029,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.take#1035",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.take(self, indices, axis=0, is_copy=False, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, is_copy=False, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n\n        indices = ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n\n        if is_categorical_dtype(self):\n            # https://github.com/pandas-dev/pandas/issues/20664\n            # TODO: remove when the default Categorical.take behavior changes\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n            kwargs = {\"allow_fill\": False}\n        else:\n            kwargs = {}\n        new_values = self._values.take(indices, **kwargs)\n\n        result = self._constructor(\n            new_values, index=new_index, fastpath=True\n        ).__finalize__(self)\n\n        # Maybe set copy if we didn't actually change the index.\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n\n        return result",
        "begin_line": 1035,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._ixs#1061",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n\n        # dispatch to the values if we need\n        values = self._values\n        if isinstance(values, np.ndarray):\n            return libindex.get_value_at(values, i)\n        else:\n            return values[i]",
        "begin_line": 1061,
        "end_line": 1079,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#1085",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n\n                    # we need to box if loc of the key isn't scalar here\n                    # otherwise have inline ndarray/lists\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(\n                                result, index=[key] * len(result), dtype=self.dtype\n                            ).__finalize__(self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                # kludge\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n\n                # we can try to coerce the indexer (or this will raise)\n                new_key = self.index._convert_scalar_indexer(key, kind=\"getitem\")\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n\n        if is_iterator(key):\n            key = list(key)\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n\n        return self._get_with(key)",
        "begin_line": 1085,
        "end_line": 1127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.series.Series._get_with#1129",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_with(self, key)",
        "snippet": "    def _get_with(self, key):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            return self._slice(key)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                \"Indexing a Series with DataFrame is not \"\n                \"supported, use the appropriate DataFrame column\"\n            )\n        elif isinstance(key, tuple):\n            try:\n                return self._get_values_tuple(key)\n            except ValueError:\n                # if we don't have a MultiIndex, we may still be able to handle\n                #  a 1-tuple.  see test_1tuple_without_multiindex\n                if len(key) == 1:\n                    key = key[0]\n                    if isinstance(key, slice):\n                        return self._get_values(key)\n                raise\n\n        if not isinstance(key, (list, np.ndarray, Series, Index)):\n            key = list(key)\n\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n\n        if key_type == \"integer\":\n            if self.index.is_integer() or self.index.is_floating():\n                return self.loc[key]\n            else:\n                return self._get_values(key)\n        elif key_type == \"boolean\":\n            return self._get_values(key)\n\n        if isinstance(key, (list, tuple)):\n            # TODO: de-dup with tuple case handled above?\n            # handle the dup indexing case GH#4246\n            if len(key) == 1 and isinstance(key[0], slice):\n                # [slice(0, 5, None)] will break if you convert to ndarray,\n                # e.g. as requested by np.median\n                # FIXME: hack\n                return self._get_values(key)\n\n            return self.loc[key]\n\n        return self.reindex(key)",
        "begin_line": 1129,
        "end_line": 1177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#1193",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(\n                self._data.get_slice(indexer), fastpath=True\n            ).__finalize__(self)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 1193,
        "end_line": 1201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.series.Series._get_value#1203",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_value(self, label, takeable: bool=False)",
        "snippet": "    def _get_value(self, label, takeable: bool = False):\n        \"\"\"\n        Quickly retrieve single value at passed index label.\n\n        Parameters\n        ----------\n        label : object\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        scalar value\n        \"\"\"\n        if takeable:\n            return com.maybe_box_datetimelike(self._values[label])\n        return self.index.get_value(self._values, label)",
        "begin_line": 1203,
        "end_line": 1218,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.__setitem__#1220",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n\n        try:\n            self._set_with_engine(key, value)\n        except com.SettingWithCopyError:\n            raise\n        except (KeyError, ValueError):\n            values = self._values\n            if is_integer(key) and not self.index.inferred_type == \"integer\":\n                values[key] = value\n            elif key is Ellipsis:\n                self[:] = value\n            else:\n                self.loc[key] = value\n\n        except TypeError as e:\n            if isinstance(key, tuple) and not isinstance(self.index, MultiIndex):\n                raise ValueError(\"Can only tuple-index with a MultiIndex\")\n\n            # python 3 type errors should be raised\n            if _is_unorderable_exception(e):\n                raise IndexError(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n\n            self._set_with(key, value)\n\n        if cacher_needs_updating:\n            self._maybe_update_cacher()",
        "begin_line": 1220,
        "end_line": 1256,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._set_with_engine#1258",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with_engine(self, key, value)",
        "snippet": "    def _set_with_engine(self, key, value):\n        values = self._values\n        if is_extension_array_dtype(values.dtype):\n            # The cython indexing engine does not support ExtensionArrays.\n            values[self.index.get_loc(key)] = value\n            return\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return",
        "begin_line": 1258,
        "end_line": 1269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._set_with#1271",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_with(self, key, value)",
        "snippet": "    def _set_with(self, key, value):\n        # other: fancy integer or otherwise\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind=\"getitem\")\n            return self._set_values(indexer, value)\n\n        elif is_scalar(key) and not is_integer(key) and key not in self.index:\n            # GH#12862 adding an new key to the Series\n            # Note: have to exclude integers because that is ambiguously\n            #  position-based\n            self.loc[key] = value\n            return\n\n        else:\n            if isinstance(key, tuple):\n                try:\n                    # TODO: no test cases that get here\n                    self._set_values(key, value)\n                except Exception:\n                    pass\n\n            if is_scalar(key):\n                key = [key]\n\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n                key = key._values\n            else:\n                key_type = lib.infer_dtype(key, skipna=False)\n\n            if key_type == \"integer\":\n                if self.index.inferred_type == \"integer\":\n                    self._set_labels(key, value)\n                else:\n                    return self._set_values(key, value)\n            elif key_type == \"boolean\":\n                self._set_values(key.astype(np.bool_), value)\n            else:\n                self._set_labels(key, value)",
        "begin_line": 1271,
        "end_line": 1309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._set_values#1319",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_values(self, key, value)",
        "snippet": "    def _set_values(self, key, value):\n        if isinstance(key, Series):\n            key = key._values\n        self._data = self._data.setitem(indexer=key, value=value)\n        self._maybe_update_cacher()",
        "begin_line": 1319,
        "end_line": 1323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.reset_index#1422",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reset_index(self, level=None, drop=False, name=None, inplace=False)",
        "snippet": "    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Generate a new DataFrame or Series with the index reset.\n\n        This is useful when the index needs to be treated as a column, or\n        when the index is meaningless and needs to be reset to the default\n        before another operation.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default optional\n            For a Series with a MultiIndex, only remove the specified levels\n            from the index. Removes all levels by default.\n        drop : bool, default False\n            Just reset the index, without inserting it as a column in\n            the new DataFrame.\n        name : object, optional\n            The name to use for the column containing the original Series\n            values. Uses ``self.name`` by default. This argument is ignored\n            when `drop` is True.\n        inplace : bool, default False\n            Modify the Series in place (do not create a new object).\n\n        Returns\n        -------\n        Series or DataFrame\n            When `drop` is False (the default), a DataFrame is returned.\n            The newly created columns will come first in the DataFrame,\n            followed by the original Series values.\n            When `drop` is True, a `Series` is returned.\n            In either case, if ``inplace=True``, no value is returned.\n\n        See Also\n        --------\n        DataFrame.reset_index: Analogous function for DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4], name='foo',\n        ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n        Generate a DataFrame with default index.\n\n        >>> s.reset_index()\n          idx  foo\n        0   a    1\n        1   b    2\n        2   c    3\n        3   d    4\n\n        To specify the name of the new column use `name`.\n\n        >>> s.reset_index(name='values')\n          idx  values\n        0   a       1\n        1   b       2\n        2   c       3\n        3   d       4\n\n        To generate a new Series with the default set `drop` to True.\n\n        >>> s.reset_index(drop=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        To update the Series in place, without generating a new one\n        set `inplace` to True. Note that it also requires ``drop=True``.\n\n        >>> s.reset_index(inplace=True, drop=True)\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        The `level` parameter is interesting for Series with a multi-level\n        index.\n\n        >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n        ...           np.array(['one', 'two', 'one', 'two'])]\n        >>> s2 = pd.Series(\n        ...     range(4), name='foo',\n        ...     index=pd.MultiIndex.from_arrays(arrays,\n        ...                                     names=['a', 'b']))\n\n        To remove a specific level from the Index, use `level`.\n\n        >>> s2.reset_index(level='a')\n               a  foo\n        b\n        one  bar    0\n        two  bar    1\n        one  baz    2\n        two  baz    3\n\n        If `level` is not set, all levels are removed from the Index.\n\n        >>> s2.reset_index()\n             a    b  foo\n        0  bar  one    0\n        1  bar  two    1\n        2  baz  one    2\n        3  baz  two    3\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if drop:\n            new_index = ibase.default_index(len(self))\n            if level is not None:\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n\n            if inplace:\n                self.index = new_index\n                # set name if it was passed, otherwise, keep the previous name\n                self.name = name or self.name\n            else:\n                return self._constructor(\n                    self._values.copy(), index=new_index\n                ).__finalize__(self)\n        elif inplace:\n            raise TypeError(\n                \"Cannot reset_index inplace on a Series to create a DataFrame\"\n            )\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)",
        "begin_line": 1422,
        "end_line": 1554,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.to_frame#1752",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.to_frame(self, name=None)",
        "snippet": "    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame.\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([\"a\", \"b\", \"c\"],\n        ...               name=\"vals\")\n        >>> s.to_frame()\n          vals\n        0    a\n        1    b\n        2    c\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n\n        return df",
        "begin_line": 1752,
        "end_line": 1782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series._set_name#1784",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_name(self, name, inplace=False)",
        "snippet": "    def _set_name(self, name, inplace=False):\n        \"\"\"\n        Set the Series name.\n\n        Parameters\n        ----------\n        name : str\n        inplace : bool\n            Whether to modify `self` directly or return a copy.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        ser = self if inplace else self.copy()\n        ser.name = name\n        return ser",
        "begin_line": 1784,
        "end_line": 1797,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.mode#1843",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.mode(self, dropna=True)",
        "snippet": "    def mode(self, dropna=True):\n        \"\"\"\n        Return the mode(s) of the dataset.\n\n        Always returns Series even if only one value is returned.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Series\n            Modes of the Series in sorted order.\n        \"\"\"\n        # TODO: Add option for bins like value_counts()\n        return algorithms.mode(self, dropna=dropna)",
        "begin_line": 1843,
        "end_line": 1862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017123287671232877,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.idxmin#2083",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.idxmin(self, axis=0, skipna=True, *args, **kwargs)",
        "snippet": "    def idxmin(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the minimum value.\n\n        If multiple values equal the minimum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            For compatibility with DataFrame.idxmin. Redundant for application\n            on Series.\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the minimum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmin : Return indices of the minimum values\n            along the given axis.\n        DataFrame.idxmin : Return index of first occurrence of minimum\n            over requested axis.\n        Series.idxmax : Return index *label* of the first occurrence\n            of maximum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmin``. This method\n        returns the label of the minimum, while ``ndarray.argmin`` returns\n        the position. To get the position, use ``series.values.argmin()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 1],\n        ...               index=['A', 'B', 'C', 'D'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    1.0\n        dtype: float64\n\n        >>> s.idxmin()\n        'A'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmin(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmin(com.values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]",
        "begin_line": 2083,
        "end_line": 2151,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.idxmax#2153",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.idxmax(self, axis=0, skipna=True, *args, **kwargs)",
        "snippet": "    def idxmax(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the maximum value.\n\n        If multiple values equal the maximum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            For compatibility with DataFrame.idxmax. Redundant for application\n            on Series.\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the maximum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmax : Return indices of the maximum values\n            along the given axis.\n        DataFrame.idxmax : Return index of first occurrence of maximum\n            over requested axis.\n        Series.idxmin : Return index *label* of the first occurrence\n            of minimum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmax``. This method\n        returns the label of the maximum, while ``ndarray.argmax`` returns\n        the position. To get the position, use ``series.values.argmax()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 3, 4],\n        ...               index=['A', 'B', 'C', 'D', 'E'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    3.0\n        E    4.0\n        dtype: float64\n\n        >>> s.idxmax()\n        'C'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmax(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmax(com.values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]",
        "begin_line": 2153,
        "end_line": 2222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.quantile#2289",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.quantile(self, q=0.5, interpolation='linear')",
        "snippet": "    def quantile(self, q=0.5, interpolation=\"linear\"):\n        \"\"\"\n        Return value at the given quantile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            The quantile(s) to compute, which can lie in range: 0 <= q <= 1.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n                * linear: `i + (j - i) * fraction`, where `fraction` is the\n                  fractional part of the index surrounded by `i` and `j`.\n                * lower: `i`.\n                * higher: `j`.\n                * nearest: `i` or `j` whichever is nearest.\n                * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        float or Series\n            If ``q`` is an array, a Series will be returned where the\n            index is ``q`` and the values are the quantiles, otherwise\n            a float will be returned.\n\n        See Also\n        --------\n        core.window.Rolling.quantile\n        numpy.percentile\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.quantile(.5)\n        2.5\n        >>> s.quantile([.25, .5, .75])\n        0.25    1.75\n        0.50    2.50\n        0.75    3.25\n        dtype: float64\n        \"\"\"\n\n        validate_percentile(q)\n\n        # We dispatch to DataFrame so that core.internals only has to worry\n        #  about 2D cases.\n        df = self.to_frame()\n\n        result = df.quantile(q=q, interpolation=interpolation, numeric_only=False)\n        if result.ndim == 2:\n            result = result.iloc[:, 0]\n\n        if is_list_like(q):\n            result.name = self.name\n            return self._constructor(result, index=Float64Index(q), name=self.name)\n        else:\n            # scalar\n            return result.iloc[0]",
        "begin_line": 2289,
        "end_line": 2347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series.diff#2431",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.diff(self, periods=1)",
        "snippet": "    def diff(self, periods=1):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a Series element compared with another\n        element in the Series (default is element in previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n\n        Returns\n        -------\n        Series\n            First differences of the Series.\n\n        See Also\n        --------\n        Series.pct_change: Percent change over given number of periods.\n        Series.shift: Shift index by desired number of periods with an\n            optional time freq.\n        DataFrame.diff: First discrete difference of object.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> s = pd.Series([1, 1, 2, 3, 5, 8])\n        >>> s.diff()\n        0    NaN\n        1    0.0\n        2    1.0\n        3    1.0\n        4    2.0\n        5    3.0\n        dtype: float64\n\n        Difference with 3rd previous row\n\n        >>> s.diff(periods=3)\n        0    NaN\n        1    NaN\n        2    NaN\n        3    2.0\n        4    4.0\n        5    6.0\n        dtype: float64\n\n        Difference with following row\n\n        >>> s.diff(periods=-1)\n        0    0.0\n        1   -1.0\n        2   -1.0\n        3   -2.0\n        4   -3.0\n        5    NaN\n        dtype: float64\n        \"\"\"\n        result = algorithms.diff(com.values_from_object(self), periods)\n        return self._constructor(result, index=self.index).__finalize__(self)",
        "begin_line": 2431,
        "end_line": 2493,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.series.Series.sort_values#2957",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.sort_values(self, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
        "snippet": "    def sort_values(\n        self,\n        axis=0,\n        ascending=True,\n        inplace=False,\n        kind=\"quicksort\",\n        na_position=\"last\",\n    ):\n        \"\"\"\n        Sort by the values.\n\n        Sort a Series in ascending or descending order by some\n        criterion.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            Axis to direct sorting. The value 'index' is accepted for\n            compatibility with DataFrame.sort_values.\n        ascending : bool, default True\n            If True, sort values in ascending order, otherwise descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information. 'mergesort' is the only stable  algorithm.\n        na_position : {'first' or 'last'}, default 'last'\n            Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n            the end.\n\n        Returns\n        -------\n        Series\n            Series ordered by values.\n\n        See Also\n        --------\n        Series.sort_index : Sort by the Series indices.\n        DataFrame.sort_values : Sort DataFrame by the values along either axis.\n        DataFrame.sort_index : Sort DataFrame by indices.\n\n        Examples\n        --------\n        >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n        >>> s\n        0     NaN\n        1     1.0\n        2     3.0\n        3     10.0\n        4     5.0\n        dtype: float64\n\n        Sort values ascending order (default behaviour)\n\n        >>> s.sort_values(ascending=True)\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        0     NaN\n        dtype: float64\n\n        Sort values descending order\n\n        >>> s.sort_values(ascending=False)\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values inplace\n\n        >>> s.sort_values(ascending=False, inplace=True)\n        >>> s\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values putting NAs first\n\n        >>> s.sort_values(na_position='first')\n        0     NaN\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        dtype: float64\n\n        Sort a series of strings\n\n        >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n        >>> s\n        0    z\n        1    b\n        2    d\n        3    a\n        4    c\n        dtype: object\n\n        >>> s.sort_values()\n        3    a\n        1    b\n        4    c\n        2    d\n        0    z\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        # Validate the axis parameter\n        self._get_axis_number(axis)\n\n        # GH 5856/5853\n        if inplace and self._is_cached:\n            raise ValueError(\n                \"This Series is a view of some other array, to \"\n                \"sort in-place you must create a copy\"\n            )\n\n        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")\n\n        arr = self._values\n        sortedIdx = np.empty(len(self), dtype=np.int32)\n\n        bad = isna(arr)\n\n        good = ~bad\n        idx = ibase.default_index(len(self))\n\n        argsorted = _try_kind_sort(arr[good])\n\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError(\n                    \"Length of ascending (%d) must be 1 \"\n                    \"for Series\" % (len(ascending))\n                )\n            ascending = ascending[0]\n\n        if not is_bool(ascending):\n            raise ValueError(\"ascending must be boolean\")\n\n        if not ascending:\n            argsorted = argsorted[::-1]\n\n        if na_position == \"last\":\n            n = good.sum()\n            sortedIdx[:n] = idx[good][argsorted]\n            sortedIdx[n:] = idx[bad]\n        elif na_position == \"first\":\n            n = bad.sum()\n            sortedIdx[n:] = idx[good][argsorted]\n            sortedIdx[:n] = idx[bad]\n        else:\n            raise ValueError(\"invalid na_position: {!r}\".format(na_position))\n\n        result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])\n\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)",
        "begin_line": 2957,
        "end_line": 3130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._try_kind_sort#3080",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._try_kind_sort(arr)",
        "snippet": "        def _try_kind_sort(arr):\n            # easier to ask forgiveness than permission\n            try:\n                # if kind==mergesort, it can fail for object dtype\n                return arr.argsort(kind=kind)\n            except TypeError:\n                # stable sort not available for object dtype\n                # uses the argsort default quicksort\n                return arr.argsort(kind=\"quicksort\")",
        "begin_line": 3080,
        "end_line": 3088,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#3982",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, Categorical):\n            # TODO deprecate numeric_only argument for Categorical and use\n            # skipna as well, see GH25303\n            return delegate._reduce(name, numeric_only=numeric_only, **kwds)\n        elif isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif is_datetime64_dtype(delegate):\n            # use DatetimeIndex implementation to handle skipna correctly\n            delegate = DatetimeIndex(delegate)\n        elif is_timedelta64_dtype(delegate) and hasattr(TimedeltaIndex, name):\n            # use TimedeltaIndex to handle skipna correctly\n            # TODO: remove hasattr check after TimedeltaIndex has `std` method\n            delegate = TimedeltaIndex(delegate)\n\n        # dispatch to numpy arrays\n        elif isinstance(delegate, np.ndarray):\n            if numeric_only:\n                raise NotImplementedError(\n                    \"Series.{0} does not implement numeric_only.\".format(name)\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)\n\n        # TODO(EA) dispatch to Index\n        # remove once all internals extension types are\n        # moved to ExtensionArrays\n        return delegate._reduce(\n            op=op,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            filter_type=filter_type,\n            **kwds\n        )",
        "begin_line": 3982,
        "end_line": 4031,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.008547008547008548,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.008547008547008548,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.series.Series.rename#4078",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.rename(self, index=None, **kwargs)",
        "snippet": "    def rename(self, index=None, **kwargs):\n        \"\"\"\n        Alter Series index labels or name.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        Alternatively, change ``Series.name`` with a scalar value.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        index : scalar, hashable sequence, dict-like or function, optional\n            Functions or dict-like are transformations to apply to\n            the index.\n            Scalar or hashable sequence-like will alter the ``Series.name``\n            attribute.\n        copy : bool, default True\n            Whether to copy underlying data.\n        inplace : bool, default False\n            Whether to return a new Series. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        Series\n            Series with index labels or name altered.\n\n        See Also\n        --------\n        Series.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\")  # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n        \"\"\"\n        kwargs[\"inplace\"] = validate_bool_kwarg(kwargs.get(\"inplace\", False), \"inplace\")\n\n        if callable(index) or is_dict_like(index):\n            return super().rename(index=index, **kwargs)\n        else:\n            return self._set_name(index, inplace=kwargs.get(\"inplace\"))",
        "begin_line": 4078,
        "end_line": 4144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.reindex#4148",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.reindex(self, index=None, **kwargs)",
        "snippet": "    def reindex(self, index=None, **kwargs):\n        return super().reindex(index=index, **kwargs)",
        "begin_line": 4148,
        "end_line": 4149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.isnull#4593",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isnull(self)",
        "snippet": "    def isnull(self):\n        return super().isnull()",
        "begin_line": 4593,
        "end_line": 4594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.series.Series.dropna#4604",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dropna(self, axis=0, inplace=False, **kwargs)",
        "snippet": "    def dropna(self, axis=0, inplace=False, **kwargs):\n        \"\"\"\n        Return a new Series with missing values removed.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            There is only one axis to drop values from.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        **kwargs\n            Not in use.\n\n        Returns\n        -------\n        Series\n            Series with NA entries dropped from it.\n\n        See Also\n        --------\n        Series.isna: Indicate missing values.\n        Series.notna : Indicate existing (non-missing) values.\n        Series.fillna : Replace missing values.\n        DataFrame.dropna : Drop rows or columns which contain NA values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1., 2., np.nan])\n        >>> ser\n        0    1.0\n        1    2.0\n        2    NaN\n        dtype: float64\n\n        Drop NA values from a Series.\n\n        >>> ser.dropna()\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Keep the Series with valid entries in the same variable.\n\n        >>> ser.dropna(inplace=True)\n        >>> ser\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Empty strings are not considered NA values. ``None`` is considered an\n        NA value.\n\n        >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n        >>> ser\n        0       NaN\n        1         2\n        2       NaT\n        3\n        4      None\n        5    I stay\n        dtype: object\n        >>> ser.dropna()\n        1         2\n        3\n        5    I stay\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        kwargs.pop(\"how\", None)\n        if kwargs:\n            raise TypeError(\n                \"dropna() got an unexpected keyword \"\n                'argument \"{0}\"'.format(list(kwargs.keys())[0])\n            )\n        # Validate the axis parameter\n        self._get_axis_number(axis or 0)\n\n        if self._can_hold_na:\n            result = remove_na_arraylike(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        else:\n            if inplace:\n                # do nothing\n                pass\n            else:\n                return self.copy()",
        "begin_line": 4604,
        "end_line": 4696,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.indexing._NDFrameIndexer._get_loc#163",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._NDFrameIndexer",
        "signature": "pandas.core.indexing._NDFrameIndexer._get_loc(self, key: int, axis: int)",
        "snippet": "    def _get_loc(self, key: int, axis: int):\n        return self.obj._ixs(key, axis=axis)",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#1390",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self._getitem_scalar(key)\n                except (KeyError, IndexError, AttributeError):\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 1390,
        "end_line": 1404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#2045",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 2045,
        "end_line": 2068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._get_list_axis#2098",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._get_list_axis(self, key, axis: int)",
        "snippet": "    def _get_list_axis(self, key, axis: int):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        try:\n            return self.obj.take(key, axis=axis)\n        except IndexError:\n            # re-raise with different error message\n            raise IndexError(\"positional indexers are out-of-bounds\")",
        "begin_line": 2098,
        "end_line": 2115,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#2117",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self._get_loc(key, axis=axis)",
        "begin_line": 2117,
        "end_line": 2141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.indexing._ScalarAccessIndexer.__getitem__#2170",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._ScalarAccessIndexer",
        "signature": "pandas.core.indexing._ScalarAccessIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n\n            # we could have a convertible item here (e.g. Timestamp)\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n\n        key = self._convert_key(key)\n        return self.obj._get_value(*key, takeable=self._takeable)",
        "begin_line": 2170,
        "end_line": 2180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexing._iAtIndexer._convert_key#2321",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iAtIndexer",
        "signature": "pandas.core.indexing._iAtIndexer._convert_key(self, key, is_setter: bool=False)",
        "snippet": "    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\" require integer args (and convert to label arguments) \"\"\"\n        for a, i in zip(self.obj.axes, key):\n            if not is_integer(i):\n                raise ValueError(\"iAt based indexing can only have integer indexers\")\n        return key",
        "begin_line": 2321,
        "end_line": 2326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2348",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj, key)",
        "snippet": "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    if we are index sliceable, then return my slicer, otherwise return None\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2348,
        "end_line": 2370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexing.check_bool_indexer#2373",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.check_bool_indexer(index: Index, key)",
        "snippet": "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done\n    key : list-like\n        Boolean indexer to check\n\n    Returns\n    -------\n    result: np.array\n        Resulting key\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index\n\n    IndexingError\n        If the index of the key is unalignable to index\n\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    else:\n        if is_sparse(result):\n            result = result.to_dense()\n        result = np.asarray(result, dtype=bool)\n\n        # GH26658\n        if len(result) != len(index):\n            raise IndexError(\n                \"Item wrong length {} instead of {}.\".format(len(result), len(index))\n            )\n\n    return result",
        "begin_line": 2373,
        "end_line": 2423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#75",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        msg = \"Invalid fill method. Expecting {expecting}. Got {method}\".format(\n            expecting=expecting, method=method\n        )\n        raise ValueError(msg)\n    return method",
        "begin_line": 75,
        "end_line": 97,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#579",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 579,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#184",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, start=None, end=None, periods=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None, verify_integrity=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n        verify_integrity=None,\n    ):\n\n        if verify_integrity is not None:\n            warnings.warn(\n                \"The 'verify_integrity' argument is deprecated, \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n        else:\n            verify_integrity = True\n\n        if data is None:\n            freq, freq_infer = dtl.maybe_infer_freq(freq)\n            warnings.warn(\n                \"Creating a TimedeltaIndex by passing range \"\n                \"endpoints is deprecated.  Use \"\n                \"`pandas.timedelta_range` instead.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            result = TimedeltaArray._generate_range(\n                start, end, periods, freq, closed=closed\n            )\n            return cls._simple_new(result._data, freq=freq, name=name)\n\n        if is_scalar(data):\n            raise TypeError(\n                \"{cls}() must be called with a \"\n                \"collection of some kind, {data} was passed\".format(\n                    cls=cls.__name__, data=repr(data)\n                )\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            warnings.warn(\n                \"M and Y units are deprecated and \"\n                \"will be removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n\n        if isinstance(data, TimedeltaArray):\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name, freq=freq)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 184,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00267379679144385,
            "pseudo_dstar_susp": 0.015151515151515152,
            "pseudo_tarantula_susp": 0.002331002331002331,
            "pseudo_op2_susp": 0.015151515151515152,
            "pseudo_barinel_susp": 0.002331002331002331
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#258",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE):\n        # `dtype` is passed by _shallow_copy in corner cases, should always\n        #  be timedelta64[ns] if present\n        if not isinstance(values, TimedeltaArray):\n            values = TimedeltaArray._simple_new(values, dtype=dtype, freq=freq)\n        else:\n            if freq is None:\n                freq = values.freq\n        assert isinstance(values, TimedeltaArray), type(values)\n        assert dtype == _TD_DTYPE, dtype\n        assert values.dtype == \"m8[ns]\", values.dtype\n\n        tdarr = TimedeltaArray._simple_new(values._data, freq=freq)\n        result = object.__new__(cls)\n        result._data = tdarr\n        result.name = name\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = tdarr._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 258,
        "end_line": 278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024752475247524753,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.010416666666666666,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._box_func#318",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 318,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__#321",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        result = self._data.__getitem__(key)\n        if is_scalar(result):\n            return result\n        return type(self)(result, name=self.name)",
        "begin_line": 321,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.timedelta_range#714",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas",
        "signature": "pandas.core.indexes.timedeltas.timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None)",
        "snippet": "def timedelta_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=None\n):\n    \"\"\"\n    Return a fixed frequency TimedeltaIndex, with day as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or timedelta-like, default None\n        Left bound for generating timedeltas.\n    end : str or timedelta-like, default None\n        Right bound for generating timedeltas.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'.\n    name : str, default None\n        Name of the resulting TimedeltaIndex.\n    closed : str, default None\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None).\n\n    Returns\n    -------\n    rng : TimedeltaIndex\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.timedelta_range(start='1 day', periods=4)\n    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``closed`` parameter specifies which endpoint is included.  The default\n    behavior is to include both endpoints.\n\n    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')\n    TimedeltaIndex(['2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq='D')\n\n    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.\n    Only fixed frequencies can be passed, non-fixed frequencies such as\n    'M' (month end) will raise.\n\n    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')\n    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',\n                    '1 days 18:00:00', '2 days 00:00:00'],\n                   dtype='timedelta64[ns]', freq='6H')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)\n    TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',\n                '5 days 00:00:00'],\n               dtype='timedelta64[ns]', freq=None)\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    freq, freq_infer = dtl.maybe_infer_freq(freq)\n    tdarr = TimedeltaArray._generate_range(start, end, periods, freq, closed=closed)\n    return TimedeltaIndex._simple_new(tdarr._data, freq=tdarr.freq, name=name)",
        "begin_line": 714,
        "end_line": 787,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#65",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b, reversed=False)",
        "snippet": "def _evaluate_standard(op, op_str, a, b, reversed=False):\n    \"\"\" standard evaluation \"\"\"\n    # `reversed` kwarg is included for compatibility with _evaluate_numexpr\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 65,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#160",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 160,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#169",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                \"evaluating in Python space because the {op!r} \"\n                \"operator is not supported by numexpr for \"\n                \"the bool dtype, use {alt_op!r} instead\".format(\n                    op=op_str, alt_op=unsupported[op_str]\n                )\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                \"operator {op!r} not implemented for bool dtypes\".format(op=op_str)\n            )\n    return True",
        "begin_line": 169,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#193",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True, reversed=False)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True, reversed=False):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    reversed : bool, default False\n    \"\"\"\n\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b, reversed=reversed)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 193,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#202",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        axes: Optional[List[Index]] = None,\n        copy: bool = False,\n        dtype: Optional[Dtype] = None,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n        fastpath: bool = False,\n    ):\n\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 202,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#251",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 251,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#286",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(self, dtype)",
        "snippet": "    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented\"\n                    \" in the {0} constructor\".format(self.__class__.__name__)\n                )\n\n        return dtype",
        "begin_line": 286,
        "end_line": 299,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#393",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 393,
        "end_line": 397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#406",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(self, args, kwargs, require_all=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        self, args, kwargs, require_all=False, sentinel=None\n    ):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n\n        # construct the args\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n\n            # if we have an alias for this axis\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\n                            \"arguments are mutually exclusive \"\n                            \"for [%s,%s]\" % (a, alias)\n                        )\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\"not enough/duplicate arguments specified!\")\n\n        axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 406,
        "end_line": 446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#461",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 461,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011441647597254005,
            "pseudo_dstar_susp": 0.005917159763313609,
            "pseudo_tarantula_susp": 0.0010298661174047373,
            "pseudo_op2_susp": 0.005917159763313609,
            "pseudo_barinel_susp": 0.0010298661174047373
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#474",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(\"No axis named {0} for object type {1}\".format(axis, cls))",
        "begin_line": 474,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.0011086474501108647,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.0011086474501108647,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#486",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 486,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010090817356205853,
            "pseudo_dstar_susp": 0.000744047619047619,
            "pseudo_tarantula_susp": 0.0011013215859030838,
            "pseudo_op2_susp": 0.000744047619047619,
            "pseudo_barinel_susp": 0.0011013215859030838
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#547",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self):\n        return getattr(self, self._info_axis_name)",
        "begin_line": 547,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1566",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        arr = operator.inv(com.values_from_object(self))\n        return self.__array_wrap__(arr)",
        "begin_line": 1566,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1957",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1957,
        "end_line": 1959,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__array_wrap__#2020",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__array_wrap__(self, result, context=None)",
        "snippet": "    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)",
        "begin_line": 2020,
        "end_line": 2022,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3328",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3328,
        "end_line": 3332,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_cached#3345",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_cached(self)",
        "snippet": "    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, \"_cacher\", None) is not None",
        "begin_line": 3345,
        "end_line": 3347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3356",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear=False, verify_is_copy=True)",
        "snippet": "    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                # Note: we need to call ref._maybe_cache_changed even in the\n                #  case where it will raise.  (Uh, not clear why)\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except AssertionError:\n                    # ref._data.setitem can raise\n                    #  AssertionError because of shape mismatch\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3356,
        "end_line": 3391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3393",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self):\n        self._item_cache.clear()",
        "begin_line": 3393,
        "end_line": 3394,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3656",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3656,
        "end_line": 3668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3698",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()",
        "begin_line": 3698,
        "end_line": 3700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3711",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3711,
        "end_line": 3729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3731",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3731,
        "end_line": 3806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020563438206868187,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3865",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view",
        "begin_line": 3865,
        "end_line": 3867,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002072538860103627,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4354",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs):\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                'argument \"{0}\"'.format(list(kwargs.keys())[0])\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self)",
        "begin_line": 4354,
        "end_line": 4601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5228",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5228,
        "end_line": 5246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007320644216691069,
            "pseudo_dstar_susp": 0.0006711409395973154,
            "pseudo_tarantula_susp": 0.0008857395925597874,
            "pseudo_op2_susp": 0.0006711409395973154,
            "pseudo_barinel_susp": 0.0008857395925597874
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5248",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5248,
        "end_line": 5265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006238303181534623,
            "pseudo_dstar_susp": 0.0006238303181534623,
            "pseudo_tarantula_susp": 0.0006934812760055479,
            "pseudo_op2_susp": 0.0006238303181534623,
            "pseudo_barinel_susp": 0.0006934812760055479
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5267",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name, value)",
        "snippet": "    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5267,
        "end_line": 5306,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000851063829787234,
            "pseudo_dstar_susp": 0.0028328611898017,
            "pseudo_tarantula_susp": 0.0007369196757553427,
            "pseudo_op2_susp": 0.0028328611898017,
            "pseudo_barinel_susp": 0.0007369196757553427
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5322",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5322,
        "end_line": 5330,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0007209805335255948,
            "pseudo_tarantula_susp": 0.000992063492063492,
            "pseudo_op2_susp": 0.0007209805335255948,
            "pseudo_barinel_susp": 0.000992063492063492
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5332",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5332,
        "end_line": 5338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0007209805335255948,
            "pseudo_tarantula_susp": 0.000992063492063492,
            "pseudo_op2_susp": 0.0007209805335255948,
            "pseudo_barinel_susp": 0.000992063492063492
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5335",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5335,
        "end_line": 5336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001088139281828074,
            "pseudo_dstar_susp": 0.00510204081632653,
            "pseudo_tarantula_susp": 0.000992063492063492,
            "pseudo_op2_susp": 0.00510204081632653,
            "pseudo_barinel_susp": 0.000992063492063492
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.values#5452",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        .. warning::\n\n           We recommend using :meth:`DataFrame.to_numpy` instead.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_numpy : Recommended alternative to this method.\n        DataFrame.index : Retrieve the index labels.\n        DataFrame.columns : Retrieving the column names.\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]], dtype=int64)\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)",
        "begin_line": 5452,
        "end_line": 5526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.astype#5814",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.astype(self, dtype, copy=True, errors='raise')",
        "snippet": "    def astype(self, dtype, copy=True, errors=\"raise\"):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> cat_dtype = pd.api.types.CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument.\"\n                    )\n            results = []\n            for col_name, col in self.items():\n                if col_name in dtype:\n                    results.append(\n                        col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                    )\n                else:\n                    results.append(col.copy() if copy else col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            results = (\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            )\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n            return self._constructor(new_data).__finalize__(self)\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result",
        "begin_line": 5814,
        "end_line": 5953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.copy#5955",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.copy(self, deep=True)",
        "snippet": "    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series or DataFrame\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)",
        "begin_line": 5955,
        "end_line": 6061,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018556318426424197,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._convert#6077",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._convert(self, datetime=False, numeric=False, timedelta=False, coerce=False, copy=True)",
        "snippet": "    def _convert(\n        self, datetime=False, numeric=False, timedelta=False, coerce=False, copy=True\n    ):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : bool, default False\n            If True, convert to date where possible.\n        numeric : bool, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : bool, default False\n            If True, convert to timedelta where possible.\n        coerce : bool, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT).\n        copy : bool, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        validate_bool_kwarg(datetime, \"datetime\")\n        validate_bool_kwarg(numeric, \"numeric\")\n        validate_bool_kwarg(timedelta, \"timedelta\")\n        validate_bool_kwarg(coerce, \"coerce\")\n        validate_bool_kwarg(copy, \"copy\")\n        return self._constructor(\n            self._data.convert(\n                datetime=datetime,\n                numeric=numeric,\n                timedelta=timedelta,\n                coerce=coerce,\n                copy=copy,\n            )\n        ).__finalize__(self)",
        "begin_line": 6077,
        "end_line": 6117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isnull#7371",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isnull(self)",
        "snippet": "    def isnull(self):\n        return isna(self).__finalize__(self)",
        "begin_line": 7371,
        "end_line": 7372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.groupby#7808",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.groupby(self, by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True, squeeze=False, observed=False, **kwargs)",
        "snippet": "    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index=True,\n        sort=True,\n        group_keys=True,\n        squeeze=False,\n        observed=False,\n        **kwargs\n    ):\n        \"\"\"\n        Group DataFrame or Series using a mapper or by a Series of columns.\n\n        A groupby operation involves some combination of splitting the\n        object, applying a function, and combining the results. This can be\n        used to group large amounts of data and compute operations on these\n        groups.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it's called on each value of the object's\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted as a (single) key.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Split along rows (0) or columns (1).\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels.\n        as_index : bool, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output.\n        sort : bool, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group. Groupby preserves the order of rows within each group.\n        group_keys : bool, default True\n            When calling apply, add group keys to index to identify pieces.\n        squeeze : bool, default False\n            Reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type.\n        observed : bool, default False\n            This only applies if any of the groupers are Categoricals.\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionadded:: 0.23.0\n\n        **kwargs\n            Optional, only accepts keyword argument 'mutated' and is passed\n            to groupby.\n\n        Returns\n        -------\n        DataFrameGroupBy or SeriesGroupBy\n            Depends on the calling object and returns groupby object that\n            contains information about the groups.\n\n        See Also\n        --------\n        resample : Convenience method for frequency conversion and resampling\n            of time series.\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n        ...                               'Parrot', 'Parrot'],\n        ...                    'Max Speed': [380., 370., 24., 26.]})\n        >>> df\n           Animal  Max Speed\n        0  Falcon      380.0\n        1  Falcon      370.0\n        2  Parrot       24.0\n        3  Parrot       26.0\n        >>> df.groupby(['Animal']).mean()\n                Max Speed\n        Animal\n        Falcon      375.0\n        Parrot       25.0\n\n        **Hierarchical Indexes**\n\n        We can groupby different levels of a hierarchical index\n        using the `level` parameter:\n\n        >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n        ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n        >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n        >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n        ...                   index=index)\n        >>> df\n                        Max Speed\n        Animal Type\n        Falcon Captive      390.0\n               Wild         350.0\n        Parrot Captive       30.0\n               Wild          20.0\n        >>> df.groupby(level=0).mean()\n                Max Speed\n        Animal\n        Falcon      370.0\n        Parrot       25.0\n        >>> df.groupby(level=1).mean()\n                 Max Speed\n        Type\n        Captive      210.0\n        Wild         185.0\n        \"\"\"\n        from pandas.core.groupby.groupby import groupby\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n        return groupby(\n            self,\n            by=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n            **kwargs\n        )",
        "begin_line": 7808,
        "end_line": 7945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.abs#9899",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.abs(self)",
        "snippet": "    def abs(self):\n        \"\"\"\n        Return a Series/DataFrame with absolute numeric value of each element.\n\n        This function only applies to elements that are all numeric.\n\n        Returns\n        -------\n        abs\n            Series/DataFrame containing the absolute value of each element.\n\n        See Also\n        --------\n        numpy.absolute : Calculate the absolute value element-wise.\n\n        Notes\n        -----\n        For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n        :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n        Examples\n        --------\n        Absolute numeric values in a Series.\n\n        >>> s = pd.Series([-1.10, 2, -3.33, 4])\n        >>> s.abs()\n        0    1.10\n        1    2.00\n        2    3.33\n        3    4.00\n        dtype: float64\n\n        Absolute numeric values in a Series with complex numbers.\n\n        >>> s = pd.Series([1.2 + 1j])\n        >>> s.abs()\n        0    1.56205\n        dtype: float64\n\n        Absolute numeric values in a Series with a Timedelta element.\n\n        >>> s = pd.Series([pd.Timedelta('1 days')])\n        >>> s.abs()\n        0   1 days\n        dtype: timedelta64[ns]\n\n        Select rows with data closest to certain value using argsort (from\n        `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n        >>> df = pd.DataFrame({\n        ...     'a': [4, 5, 6, 7],\n        ...     'b': [10, 20, 30, 40],\n        ...     'c': [100, 50, -30, -50]\n        ... })\n        >>> df\n             a    b    c\n        0    4   10  100\n        1    5   20   50\n        2    6   30  -30\n        3    7   40  -50\n        >>> df.loc[(df.c - 43).abs().argsort()]\n             a    b    c\n        1    5   20   50\n        0    4   10  100\n        2    6   30  -30\n        3    7   40  -50\n        \"\"\"\n        return np.abs(self)",
        "begin_line": 9899,
        "end_line": 9966,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._agg_by_level#10448",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
        "snippet": "    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        if axis is None:\n            raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)",
        "begin_line": 10448,
        "end_line": 10457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#11567",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also='', examples='')",
        "snippet": "def _make_min_count_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also=\"\", examples=\"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11567,
        "end_line": 11612,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11580",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 11580,
        "end_line": 11610,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.0011086474501108647,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.0011086474501108647,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function#11615",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also='', examples='')",
        "snippet": "def _make_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also=\"\", examples=\"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11615,
        "end_line": 11645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007097232079489,
            "pseudo_dstar_susp": 0.000655307994757536,
            "pseudo_tarantula_susp": 0.0008583690987124463,
            "pseudo_op2_susp": 0.000655307994757536,
            "pseudo_barinel_susp": 0.0008583690987124463
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11628",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )",
        "begin_line": 11628,
        "end_line": 11643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.generic._make_stat_function_ddof#11648",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f)",
        "snippet": "def _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11648,
        "end_line": 11667,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004310344827586207,
            "pseudo_dstar_susp": 0.047619047619047616,
            "pseudo_tarantula_susp": 0.003787878787878788,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.003787878787878788
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11651",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs)",
        "snippet": "    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )",
        "begin_line": 11651,
        "end_line": 11665,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004310344827586207,
            "pseudo_dstar_susp": 0.047619047619047616,
            "pseudo_tarantula_susp": 0.003787878787878788,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.003787878787878788
        }
    },
    {
        "name": "pandas.core.generic._make_logical_function#11720",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_logical_function(cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value)",
        "snippet": "def _make_logical_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
        "begin_line": 11720,
        "end_line": 11750,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021915406530791147,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.generic.logical_func#11733",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
        "snippet": "    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )",
        "begin_line": 11733,
        "end_line": 11748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#48",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 48,
        "end_line": 64,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.000588235294117647,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.000588235294117647
        }
    },
    {
        "name": "pandas.conftest.configure_tests#71",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 71,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.000588235294117647,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.000588235294117647
        }
    },
    {
        "name": "pandas.conftest.add_imports#79",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.000588235294117647,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.000588235294117647
        }
    },
    {
        "name": "pandas.conftest.tz_naive_fixture#458",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_naive_fixture(request)",
        "snippet": "def tz_naive_fixture(request):\n    \"\"\"\n    Fixture for trying timezones including default (None): {0}\n    \"\"\"\n    return request.param",
        "begin_line": 458,
        "end_line": 462,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018001800180018,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.conftest.tz_aware_fixture#467",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.tz_aware_fixture(request)",
        "snippet": "def tz_aware_fixture(request):\n    \"\"\"\n    Fixture for trying explicit timezones: {0}\n    \"\"\"\n    return request.param",
        "begin_line": 467,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas._config.config._get_single_key#83",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat, silent)",
        "snippet": "def _get_single_key(pat, silent):\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(\"No such keys(s): {pat!r}\".format(pat=pat))\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 83,
        "end_line": 98,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config._get_option#101",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat, silent=False)",
        "snippet": "def _get_option(pat, silent=False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020048115477145148,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas._config.config._set_option#109",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs):\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        msg = '_set_option() got an unexpected keyword argument \"{kwarg}\"'\n        raise TypeError(msg.format(list(kwargs.keys())[0]))\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 109,
        "end_line": 138,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006697923643670462,
            "pseudo_dstar_susp": 0.0019120458891013384,
            "pseudo_tarantula_susp": 0.0005813953488372093,
            "pseudo_op2_susp": 0.0019120458891013384,
            "pseudo_barinel_susp": 0.0005813953488372093
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#232",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config.option_context.__init__#395",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__init__(self, *args)",
        "snippet": "    def __init__(self, *args):\n        if not (len(args) % 2 == 0 and len(args) >= 2):\n            raise ValueError(\n                \"Need to invoke as option_context(pat, val, [(pat, val), ...]).\"\n            )\n\n        self.ops = list(zip(args[::2], args[1::2]))",
        "begin_line": 395,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020267531414673692,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas._config.config.option_context.__enter__#403",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__enter__(self)",
        "snippet": "    def __enter__(self):\n        self.undo = [(pat, _get_option(pat, silent=True)) for pat, val in self.ops]\n\n        for pat, val in self.ops:\n            _set_option(pat, val, silent=True)",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020267531414673692,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas._config.config.option_context.__exit__#409",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.option_context",
        "signature": "pandas._config.config.option_context.__exit__(self, *args)",
        "snippet": "    def __exit__(self, *args):\n        if self.undo:\n            for pat, val in self.undo:\n                _set_option(pat, val, silent=True)",
        "begin_line": 409,
        "end_line": 412,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020267531414673692,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas._config.config._select_options#535",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat)",
        "snippet": "def _select_options(pat):\n    \"\"\"returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 535,
        "end_line": 550,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009671179883945841,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.0005813953488372093,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.0005813953488372093
        }
    },
    {
        "name": "pandas._config.config._get_root#553",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key)",
        "snippet": "def _get_root(key):\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 553,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#568",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key)",
        "snippet": "def _get_deprecated_option(key):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 568,
        "end_line": 582,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#585",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key)",
        "snippet": "def _get_registered_option(key):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 585,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006653359946773121,
            "pseudo_dstar_susp": 0.0018832391713747645,
            "pseudo_tarantula_susp": 0.000578368999421631,
            "pseudo_op2_susp": 0.0018832391713747645,
            "pseudo_barinel_susp": 0.000578368999421631
        }
    },
    {
        "name": "pandas._config.config._translate_key#596",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key)",
        "snippet": "def _translate_key(key):\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 596,
        "end_line": 606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#609",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key)",
        "snippet": "def _warn_if_deprecated(key):\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = \"'{key}' is deprecated\".format(key=key)\n            if d.removal_ver:\n                msg += \" and will be removed in {version}\".format(version=d.removal_ver)\n            if d.rkey:\n                msg += \", please use '{rkey}' instead.\".format(rkey=d.rkey)\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 609,
        "end_line": 634,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006544502617801048,
            "pseudo_dstar_susp": 0.0018050541516245488,
            "pseudo_tarantula_susp": 0.0005707762557077625,
            "pseudo_op2_susp": 0.0018050541516245488,
            "pseudo_barinel_susp": 0.0005707762557077625
        }
    },
    {
        "name": "pandas._config.config.inner#769",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x):\n        if type(x) != _type:\n            msg = \"Value must have type '{typ!s}'\"\n            raise ValueError(msg.format(typ=_type))",
        "begin_line": 769,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.000588235294117647,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.000588235294117647
        }
    },
    {
        "name": "pandas._config.config.inner#810",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x):\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = \"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg.format(pp_values=pp_values))",
        "begin_line": 810,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006743088334457181,
            "pseudo_dstar_susp": 0.001941747572815534,
            "pseudo_tarantula_susp": 0.000588235294117647,
            "pseudo_op2_susp": 0.001941747572815534,
            "pseudo_barinel_susp": 0.000588235294117647
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#338",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 338,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#348",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 348,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005743825387708214,
            "pseudo_dstar_susp": 0.0005743825387708214,
            "pseudo_tarantula_susp": 0.0005959475566150178,
            "pseudo_op2_susp": 0.0005743825387708214,
            "pseudo_barinel_susp": 0.0005959475566150178
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values#361",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self):\n        return self._data",
        "begin_line": 361,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018733608092918696,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__#388",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        # used for Timedelta/DatetimeArray, overwritten by PeriodArray\n        if is_object_dtype(dtype):\n            return np.array(list(self), dtype=object)\n        return self._data",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 0.009259259259259259,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.009259259259259259,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#399",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self._data)",
        "begin_line": 399,
        "end_line": 400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005717552887364208,
            "pseudo_dstar_susp": 0.0005717552887364208,
            "pseudo_tarantula_susp": 0.0005931198102016608,
            "pseudo_op2_susp": 0.0005717552887364208,
            "pseudo_barinel_susp": 0.0005931198102016608
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#402",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            return self._box_func(val)\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            if is_period:\n                return self._simple_new(result, dtype=self.dtype, freq=freq)\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 402,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007127583749109052,
            "pseudo_dstar_susp": 0.0006578947368421052,
            "pseudo_tarantula_susp": 0.0008628127696289905,
            "pseudo_op2_susp": 0.0006578947368421052,
            "pseudo_barinel_susp": 0.0008628127696289905
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__#453",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__setitem__(self, key: Union[int, Sequence[int], Sequence[bool], slice], value: Union[NaTType, Any, Sequence[Any]])",
        "snippet": "    def __setitem__(\n        self,\n        key: Union[int, Sequence[int], Sequence[bool], slice],\n        value: Union[NaTType, Any, Sequence[Any]],\n    ) -> None:\n        # I'm fudging the types a bit here. \"Any\" above really depends\n        # on type(self). For PeriodArray, it's Period (or stuff coercible\n        # to a period in from_sequence). For DatetimeArray, it's Timestamp...\n        # I don't know if mypy can do that, possibly with Generics.\n        # https://mypy.readthedocs.io/en/latest/generics.html\n        if lib.is_scalar(value) and not isna(value):\n            value = com.maybe_box_datetimelike(value)\n\n        if is_list_like(value):\n            is_slice = isinstance(key, slice)\n\n            if lib.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n\n            if not is_slice:\n                key = cast(Sequence, key)\n                if len(key) != len(value) and not com.is_bool_indexer(key):\n                    msg = (\n                        \"shape mismatch: value array of length '{}' does \"\n                        \"not match indexing result of length '{}'.\"\n                    )\n                    raise ValueError(msg.format(len(key), len(value)))\n                elif not len(key):\n                    return\n\n            value = type(self)._from_sequence(value, dtype=self.dtype)\n            self._check_compatible_with(value)\n            value = value.asi8\n        elif isinstance(value, self._scalar_type):\n            self._check_compatible_with(value)\n            value = self._unbox_scalar(value)\n        elif is_valid_nat_for_dtype(value, self.dtype):\n            value = iNaT\n        else:\n            msg = (\n                \"'value' should be a '{scalar}', 'NaT', or array of those. \"\n                \"Got '{typ}' instead.\"\n            )\n            raise TypeError(\n                msg.format(scalar=self._scalar_type.__name__, typ=type(value).__name__)\n            )\n        self._data[key] = value\n        self._maybe_clear_freq()",
        "begin_line": 453,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018099547511312217,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_clear_freq#502",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        # inplace operations like __setitem__ may invalidate the freq of\n        # DatetimeArray and TimedeltaArray\n        pass",
        "begin_line": 502,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#507",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 507,
        "end_line": 543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#545",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000774593338497289,
            "pseudo_dstar_susp": 0.0006925207756232687,
            "pseudo_tarantula_susp": 0.0009267840593141798,
            "pseudo_op2_susp": 0.0006925207756232687,
            "pseudo_barinel_susp": 0.0009267840593141798
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy#595",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.copy(self)",
        "snippet": "    def copy(self):\n        values = self.asi8.copy()\n        return type(self)._simple_new(values, dtype=self.dtype, freq=self.freq)",
        "begin_line": 595,
        "end_line": 597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018621973929236498,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna#708",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.isna(self)",
        "snippet": "    def isna(self):\n        return self._isnan",
        "begin_line": 708,
        "end_line": 709,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000774593338497289,
            "pseudo_dstar_susp": 0.0006925207756232687,
            "pseudo_tarantula_susp": 0.0009267840593141798,
            "pseudo_op2_susp": 0.0006925207756232687,
            "pseudo_barinel_susp": 0.0009267840593141798
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#712",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 712,
        "end_line": 716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000641025641025641,
            "pseudo_dstar_susp": 0.000641025641025641,
            "pseudo_tarantula_susp": 0.0008045052292839903,
            "pseudo_op2_susp": 0.000641025641025641,
            "pseudo_barinel_susp": 0.0008045052292839903
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#719",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 719,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019312475859405175,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results#725",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._maybe_mask_results(self, result, fill_value=iNaT, convert=None)",
        "snippet": "    def _maybe_mask_results(self, result, fill_value=iNaT, convert=None):\n        \"\"\"\n        Parameters\n        ----------\n        result : a ndarray\n        fill_value : object, default iNaT\n        convert : str, dtype or None\n\n        Returns\n        -------\n        result : ndarray with values replace by the fill_value\n\n        mask the result if needed, convert to the provided dtype if its not\n        None\n\n        This is an internal routine.\n        \"\"\"\n\n        if self._hasnans:\n            if convert:\n                result = result.astype(convert)\n            if fill_value is None:\n                fill_value = np.nan\n            result[self._isnan] = fill_value\n        return result",
        "begin_line": 725,
        "end_line": 749,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#802",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 802,
        "end_line": 806,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010183299389002036,
            "pseudo_dstar_susp": 0.004651162790697674,
            "pseudo_tarantula_susp": 0.0008525149190110827,
            "pseudo_op2_susp": 0.004651162790697674,
            "pseudo_barinel_susp": 0.0008525149190110827
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq#826",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.inferred_freq(self)",
        "snippet": "    def inferred_freq(self):\n        \"\"\"\n        Tryies to return a string representing a frequency guess,\n        generated by infer_freq.  Returns None if it can't autodetect the\n        frequency.\n        \"\"\"\n        try:\n            return frequencies.infer_freq(self)\n        except ValueError:\n            return None",
        "begin_line": 826,
        "end_line": 835,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta#953",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_delta(self, other)",
        "snippet": "    def _add_delta(self, other):\n        \"\"\"\n        Add a timedelta-like, Tick or TimedeltaIndex-like object\n        to self, yielding an int64 numpy array\n\n        Parameters\n        ----------\n        delta : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : ndarray[int64]\n\n        Notes\n        -----\n        The result's name is set outside of _add_delta by the calling\n        method (__add__ or __sub__), if necessary (i.e. for Indexes).\n        \"\"\"\n        if isinstance(other, (Tick, timedelta, np.timedelta64)):\n            new_values = self._add_timedeltalike_scalar(other)\n        elif is_timedelta64_dtype(other):\n            # ndarray[timedelta64] or TimedeltaArray/index\n            new_values = self._add_delta_tdi(other)\n\n        return new_values",
        "begin_line": 953,
        "end_line": 978,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar#980",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._add_timedeltalike_scalar(self, other)",
        "snippet": "    def _add_timedeltalike_scalar(self, other):\n        \"\"\"\n        Add a delta of a timedeltalike\n        return the i8 result view\n        \"\"\"\n        if isna(other):\n            # i.e np.timedelta64(\"NaT\"), not recognized by delta_to_nanoseconds\n            new_values = np.empty(len(self), dtype=\"i8\")\n            new_values[:] = iNaT\n            return new_values\n\n        inc = delta_to_nanoseconds(other)\n        new_values = checked_add_with_arr(self.asi8, inc, arr_mask=self._isnan).view(\n            \"i8\"\n        )\n        new_values = self._maybe_mask_results(new_values)\n        return new_values.view(\"i8\")",
        "begin_line": 980,
        "end_line": 996,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__#1250",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__sub__(self, other)",
        "snippet": "    def __sub__(self, other):\n        other = lib.item_from_zerodim(other)\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCIndexClass)):\n            return NotImplemented\n\n        # scalar others\n        elif other is NaT:\n            result = self._sub_nat()\n        elif isinstance(other, (Tick, timedelta, np.timedelta64)):\n            result = self._add_delta(-other)\n        elif isinstance(other, DateOffset):\n            # specifically _not_ a Tick\n            result = self._add_offset(-other)\n        elif isinstance(other, (datetime, np.datetime64)):\n            result = self._sub_datetimelike_scalar(other)\n        elif lib.is_integer(other):\n            # This check must come after the check for np.timedelta64\n            # as is_integer returns True for these\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._time_shift(-other)\n\n        elif isinstance(other, Period):\n            result = self._sub_period(other)\n\n        # array-like others\n        elif is_timedelta64_dtype(other):\n            # TimedeltaIndex, ndarray[timedelta64]\n            result = self._add_delta(-other)\n        elif is_offsetlike(other):\n            # Array/Index of DateOffset objects\n            result = self._addsub_offset_array(other, operator.sub)\n        elif is_datetime64_dtype(other) or is_datetime64tz_dtype(other):\n            # DatetimeIndex, ndarray[datetime64]\n            result = self._sub_datetime_arraylike(other)\n        elif is_period_dtype(other):\n            # PeriodIndex\n            result = self._sub_period_array(other)\n        elif is_integer_dtype(other):\n            if not is_period_dtype(self):\n                maybe_integer_op_deprecated(self)\n            result = self._addsub_int_array(other, operator.sub)\n        else:\n            # Includes ExtensionArrays, float_dtype\n            return NotImplemented\n\n        if is_timedelta64_dtype(result) and isinstance(result, np.ndarray):\n            from pandas.core.arrays import TimedeltaArray\n\n            return TimedeltaArray(result)\n        return result",
        "begin_line": 1250,
        "end_line": 1300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._reduce#1392",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._reduce(self, name, axis=0, skipna=True, **kwargs)",
        "snippet": "    def _reduce(self, name, axis=0, skipna=True, **kwargs):\n        op = getattr(self, name, None)\n        if op:\n            return op(skipna=skipna, **kwargs)\n        else:\n            return super()._reduce(name, skipna, **kwargs)",
        "begin_line": 1392,
        "end_line": 1397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002044153720359771,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.min#1399",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Array or minimum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.min\n        Index.min : Return the minimum value in an Index.\n        Series.min : Return the minimum value in a Series.\n        \"\"\"\n        nv.validate_min(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        result = nanops.nanmin(self.asi8, skipna=skipna, mask=self.isna())\n        if isna(result):\n            # Period._from_ordinal does not handle np.nan gracefully\n            return NaT\n        return self._box_func(result)",
        "begin_line": 1399,
        "end_line": 1417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.max#1419",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Array or maximum along\n        an axis.\n\n        See Also\n        --------\n        numpy.ndarray.max\n        Index.max : Return the maximum value in an Index.\n        Series.max : Return the maximum value in a Series.\n        \"\"\"\n        # TODO: skipna is broken with max.\n        # See https://github.com/pandas-dev/pandas/issues/24265\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        mask = self.isna()\n        if skipna:\n            values = self[~mask].asi8\n        elif mask.any():\n            return NaT\n        else:\n            values = self.asi8\n\n        if not len(values):\n            # short-circuit for empty max / min\n            return NaT\n\n        result = nanops.nanmax(values, skipna=skipna)\n        # Don't have to worry about NA `result`, since no NA went in.\n        return self._box_func(result)",
        "begin_line": 1419,
        "end_line": 1449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.mean#1451",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.mean(self, skipna=True)",
        "snippet": "    def mean(self, skipna=True):\n        \"\"\"\n        Return the mean value of the Array.\n\n        .. versionadded:: 0.25.0\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Whether to ignore any NaT elements.\n\n        Returns\n        -------\n        scalar\n            Timestamp or Timedelta.\n\n        See Also\n        --------\n        numpy.ndarray.mean : Returns the average of array elements along a given axis.\n        Series.mean : Return the mean value in a Series.\n\n        Notes\n        -----\n        mean is only defined for Datetime and Timedelta dtypes, not for Period.\n        \"\"\"\n        if is_period_dtype(self):\n            # See discussion in GH#24757\n            raise TypeError(\n                \"mean is not implemented for {cls} since the meaning is \"\n                \"ambiguous.  An alternative is \"\n                \"obj.to_timestamp(how='start').mean()\".format(cls=type(self).__name__)\n            )\n\n        mask = self.isna()\n        if skipna:\n            values = self[~mask]\n        elif mask.any():\n            return NaT\n        else:\n            values = self\n\n        if not len(values):\n            # short-circut for empty max / min\n            return NaT\n\n        result = nanops.nanmean(values.view(\"i8\"), skipna=skipna)\n        # Don't have to worry about NA `result`, since no NA went in.\n        return self._box_func(result)",
        "begin_line": 1451,
        "end_line": 1498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007987220447284345,
            "pseudo_dstar_susp": 0.0007097232079489,
            "pseudo_tarantula_susp": 0.0009578544061302681,
            "pseudo_op2_susp": 0.0007097232079489,
            "pseudo_barinel_susp": 0.0009578544061302681
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1505",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(\n                \"periods must be a number, got {periods}\".format(periods=periods)\n            )\n    return periods",
        "begin_line": 1505,
        "end_line": 1530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001779676098949991,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1533",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1533,
        "end_line": 1563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001755926251097454,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1566",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                \"Inferred frequency {inferred} from passed \"\n                \"values does not conform to passed frequency \"\n                \"{passed}\".format(inferred=inferred_freq, passed=freq.freqstr)\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1566,
        "end_line": 1598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010515247108307045,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.0009718172983479105,
            "pseudo_op2_susp": 0.004975124378109453,
            "pseudo_barinel_susp": 0.0009718172983479105
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1601",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1601,
        "end_line": 1625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010460251046025104,
            "pseudo_dstar_susp": 0.0048543689320388345,
            "pseudo_tarantula_susp": 0.0009652509652509653,
            "pseudo_op2_susp": 0.0048543689320388345,
            "pseudo_barinel_susp": 0.0009652509652509653
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#71",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq):\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError):\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 71,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010515247108307045,
            "pseudo_dstar_susp": 0.004975124378109453,
            "pseudo_tarantula_susp": 0.0009718172983479105,
            "pseudo_op2_susp": 0.004975124378109453,
            "pseudo_barinel_susp": 0.0009718172983479105
        }
    },
    {
        "name": "pandas.tseries.frequencies.get_offset#182",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.get_offset(name)",
        "snippet": "def get_offset(name):\n    \"\"\"\n    Return DateOffset object associated with rule name\n\n    Examples\n    --------\n    get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError):\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name))\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 182,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies.infer_freq#217",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.infer_freq(index, warn=True)",
        "snippet": "def infer_freq(index, warn=True):\n    \"\"\"\n    Infer the most likely frequency given the input index. If the frequency is\n    uncertain, a warning will be printed.\n\n    Parameters\n    ----------\n    index : DatetimeIndex or TimedeltaIndex\n      if passed a Series will use the values of the series (NOT THE INDEX).\n    warn : bool, default True\n\n    Returns\n    -------\n    str or None\n        None if no discernible frequency\n        TypeError if the index is not datetime-like\n        ValueError if there are less than three values.\n    \"\"\"\n    import pandas as pd\n\n    if isinstance(index, ABCSeries):\n        values = index._values\n        if not (\n            is_datetime64_dtype(values)\n            or is_timedelta64_dtype(values)\n            or values.dtype == object\n        ):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible dtype \"\n                \"on a Series of {dtype}\".format(dtype=index.dtype)\n            )\n        index = values\n\n    if is_period_arraylike(index):\n        raise TypeError(\n            \"PeriodIndex given. Check the `freq` attribute \"\n            \"instead of using infer_freq.\"\n        )\n    elif is_timedelta64_dtype(index):\n        # Allow TimedeltaIndex and TimedeltaArray\n        inferer = _TimedeltaFrequencyInferer(index, warn=warn)\n        return inferer.get_freq()\n\n    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):\n        if isinstance(index, (pd.Int64Index, pd.Float64Index)):\n            raise TypeError(\n                \"cannot infer freq from a non-convertible index \"\n                \"type {type}\".format(type=type(index))\n            )\n        index = index.values\n\n    if not isinstance(index, pd.DatetimeIndex):\n        try:\n            index = pd.DatetimeIndex(index)\n        except AmbiguousTimeError:\n            index = pd.DatetimeIndex(index.asi8)\n\n    inferer = _FrequencyInferer(index, warn=warn)\n    return inferer.get_freq()",
        "begin_line": 217,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.__init__#283",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.__init__(self, index, warn=True)",
        "snippet": "    def __init__(self, index, warn=True):\n        self.index = index\n        self.values = index.asi8\n\n        # This moves the values, which are implicitly in UTC, to the\n        # the timezone so they are in local time\n        if hasattr(index, \"tz\"):\n            if index.tz is not None:\n                self.values = tz_convert(self.values, UTC, index.tz)\n\n        self.warn = warn\n\n        if len(index) < 3:\n            raise ValueError(\"Need at least 3 dates to infer frequency\")\n\n        self.is_monotonic = (\n            self.index._is_monotonic_increasing or self.index._is_monotonic_decreasing\n        )",
        "begin_line": 283,
        "end_line": 300,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.deltas#303",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.deltas(self)",
        "snippet": "    def deltas(self):\n        return unique_deltas(self.values)",
        "begin_line": 303,
        "end_line": 304,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.is_unique#311",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.is_unique(self)",
        "snippet": "    def is_unique(self):\n        return len(self.deltas) == 1",
        "begin_line": 311,
        "end_line": 312,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.get_freq#318",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.get_freq(self)",
        "snippet": "    def get_freq(self):\n        \"\"\"\n        Find the appropriate frequency string to describe the inferred\n        frequency of self.values\n\n        Returns\n        -------\n        str or None\n        \"\"\"\n        if not self.is_monotonic or not self.index._is_unique:\n            return None\n\n        delta = self.deltas[0]\n        if _is_multiple(delta, _ONE_DAY):\n            return self._infer_daily_rule()\n\n        # Business hourly, maybe. 17: one day / 65: one weekend\n        if self.hour_deltas in ([1, 17], [1, 65], [1, 17, 65]):\n            return \"BH\"\n        # Possibly intraday frequency.  Here we use the\n        # original .asi8 values as the modified values\n        # will not work around DST transitions.  See #8772\n        elif not self.is_unique_asi8:\n            return None\n\n        delta = self.deltas_asi8[0]\n        if _is_multiple(delta, _ONE_HOUR):\n            # Hours\n            return _maybe_add_count(\"H\", delta / _ONE_HOUR)\n        elif _is_multiple(delta, _ONE_MINUTE):\n            # Minutes\n            return _maybe_add_count(\"T\", delta / _ONE_MINUTE)\n        elif _is_multiple(delta, _ONE_SECOND):\n            # Seconds\n            return _maybe_add_count(\"S\", delta / _ONE_SECOND)\n        elif _is_multiple(delta, _ONE_MILLI):\n            # Milliseconds\n            return _maybe_add_count(\"L\", delta / _ONE_MILLI)\n        elif _is_multiple(delta, _ONE_MICRO):\n            # Microseconds\n            return _maybe_add_count(\"U\", delta / _ONE_MICRO)\n        else:\n            # Nanoseconds\n            return _maybe_add_count(\"N\", delta)",
        "begin_line": 318,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.fields#372",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.fields(self)",
        "snippet": "    def fields(self):\n        return build_field_sarray(self.values)",
        "begin_line": 372,
        "end_line": 373,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.mdiffs#383",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)",
        "snippet": "    def mdiffs(self):\n        nmonths = self.fields[\"Y\"] * 12 + self.fields[\"M\"]\n        return unique_deltas(nmonths.astype(\"i8\"))",
        "begin_line": 383,
        "end_line": 385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer.ydiffs#388",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)",
        "snippet": "    def ydiffs(self):\n        return unique_deltas(self.fields[\"Y\"].astype(\"i8\"))",
        "begin_line": 388,
        "end_line": 389,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule#391",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)",
        "snippet": "    def _infer_daily_rule(self):\n        annual_rule = self._get_annual_rule()\n        if annual_rule:\n            nyears = self.ydiffs[0]\n            month = MONTH_ALIASES[self.rep_stamp.month]\n            alias = \"{prefix}-{month}\".format(prefix=annual_rule, month=month)\n            return _maybe_add_count(alias, nyears)\n\n        quarterly_rule = self._get_quarterly_rule()\n        if quarterly_rule:\n            nquarters = self.mdiffs[0] / 3\n            mod_dict = {0: 12, 2: 11, 1: 10}\n            month = MONTH_ALIASES[mod_dict[self.rep_stamp.month % 3]]\n            alias = \"{prefix}-{month}\".format(prefix=quarterly_rule, month=month)\n            return _maybe_add_count(alias, nquarters)\n\n        monthly_rule = self._get_monthly_rule()\n        if monthly_rule:\n            return _maybe_add_count(monthly_rule, self.mdiffs[0])\n\n        if self.is_unique:\n            days = self.deltas[0] / _ONE_DAY\n            if days % 7 == 0:\n                # Weekly\n                day = int_to_weekday[self.rep_stamp.weekday()]\n                return _maybe_add_count(\"W-{day}\".format(day=day), days / 7)\n            else:\n                return _maybe_add_count(\"D\", days)\n\n        if self._is_business_daily():\n            return \"B\"\n\n        wom_rule = self._get_wom_rule()\n        if wom_rule:\n            return wom_rule",
        "begin_line": 391,
        "end_line": 425,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule#427",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)",
        "snippet": "    def _get_annual_rule(self):\n        if len(self.ydiffs) > 1:\n            return None\n\n        if len(unique(self.fields[\"M\"])) > 1:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"AS\", \"bs\": \"BAS\", \"ce\": \"A\", \"be\": \"BA\"}.get(pos_check)",
        "begin_line": 427,
        "end_line": 435,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule#437",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)",
        "snippet": "    def _get_quarterly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n\n        if not self.mdiffs[0] % 3 == 0:\n            return None\n\n        pos_check = self.month_position_check()\n        return {\"cs\": \"QS\", \"bs\": \"BQS\", \"ce\": \"Q\", \"be\": \"BQ\"}.get(pos_check)",
        "begin_line": 437,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule#447",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies._FrequencyInferer",
        "signature": "pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)",
        "snippet": "    def _get_monthly_rule(self):\n        if len(self.mdiffs) > 1:\n            return None\n        pos_check = self.month_position_check()\n        return {\"cs\": \"MS\", \"bs\": \"BMS\", \"ce\": \"M\", \"be\": \"BM\"}.get(pos_check)",
        "begin_line": 447,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._is_multiple#504",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._is_multiple(us, mult)",
        "snippet": "def _is_multiple(us, mult):\n    return us % mult == 0",
        "begin_line": 504,
        "end_line": 505,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.tseries.frequencies._maybe_add_count#508",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._maybe_add_count(base, count)",
        "snippet": "def _maybe_add_count(base, count):\n    if count != 1:\n        assert count == int(count)\n        count = int(count)\n        return \"{count}{base}\".format(count=count, base=base)\n    else:\n        return base",
        "begin_line": 508,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints#74",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndexUIntEngine",
        "signature": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self, codes)",
        "snippet": "    def _codes_to_ints(self, codes):\n        \"\"\"\n        Transform combination(s) of uint64 in one uint64 (each), in a strictly\n        monotonic way (i.e. respecting the lexicographic order of integer\n        combinations): see BaseMultiIndexCodesEngine documentation.\n\n        Parameters\n        ----------\n        codes : 1- or 2-dimensional array of dtype uint64\n            Combinations of integers (one per row)\n\n        Returns\n        -------\n        int_keys : scalar or 1-dimensional array, of dtype uint64\n            Integer(s) representing one combination (each).\n        \"\"\"\n        # Shift the representation of each level by the pre-calculated number\n        # of bits:\n        codes <<= self.offsets\n\n        # Now sum and OR are in fact interchangeable. This is a simple\n        # composition of the (disjunct) significant bits of each level (i.e.\n        # each column in \"codes\") in a single positive integer:\n        if codes.ndim == 1:\n            # Single key\n            return np.bitwise_or.reduce(codes)\n\n        # Multiple keys\n        return np.bitwise_or.reduce(codes, axis=1)",
        "begin_line": 74,
        "end_line": 102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__new__#248",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity=True, _set_identity=True)",
        "snippet": "    def __new__(\n        cls,\n        levels=None,\n        codes=None,\n        sortorder=None,\n        names=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity=True,\n        _set_identity=True,\n    ):\n\n        # compat with Index\n        if name is not None:\n            names = name\n        if levels is None or codes is None:\n            raise TypeError(\"Must pass both levels and codes\")\n        if len(levels) != len(codes):\n            raise ValueError(\"Length of levels and codes must be the same.\")\n        if len(levels) == 0:\n            raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n        result = object.__new__(MultiIndex)\n\n        # we've already validated levels and codes, so shortcut here\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_codes(codes, copy=copy, validate=False)\n\n        result._names = [None] * len(levels)\n        if names is not None:\n            # handles name validation\n            result._set_names(names)\n\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n\n        if verify_integrity:\n            new_codes = result._verify_integrity()\n            result._codes = new_codes\n\n        if _set_identity:\n            result._reset_identity()\n\n        return result",
        "begin_line": 248,
        "end_line": 294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._validate_codes#296",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._validate_codes(self, level: list, code: list)",
        "snippet": "    def _validate_codes(self, level: list, code: list):\n        \"\"\"\n        Reassign code values as -1 if their corresponding levels are NaN.\n\n        Parameters\n        ----------\n        code : list\n            Code to reassign.\n        level : list\n            Level to check for missing values (NaN, NaT, None).\n\n        Returns\n        -------\n        code : new code where code value = -1 if it corresponds\n        to a level with missing values (NaN, NaT, None).\n        \"\"\"\n        null_mask = isna(level)\n        if np.any(null_mask):\n            code = np.where(null_mask[code], -1, code)\n        return code",
        "begin_line": 296,
        "end_line": 315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._verify_integrity#317",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._verify_integrity(self, codes=None, levels=None)",
        "snippet": "    def _verify_integrity(self, codes=None, levels=None):\n        \"\"\"\n\n        Parameters\n        ----------\n        codes : optional list\n            Codes to check for validity. Defaults to current codes.\n        levels : optional list\n            Levels to check for validity. Defaults to current levels.\n\n        Raises\n        ------\n        ValueError\n            If length of levels and codes don't match, if the codes for any\n            level would exceed level bounds, or there are any duplicate levels.\n\n        Returns\n        -------\n        codes : new codes where code value = -1 if it corresponds to a\n        NaN level.\n        \"\"\"\n        # NOTE: Currently does not check, among other things, that cached\n        # nlevels matches nor that sortorder matches actually sortorder.\n        codes = codes or self.codes\n        levels = levels or self.levels\n\n        if len(levels) != len(codes):\n            raise ValueError(\n                \"Length of levels and codes must match. NOTE:\"\n                \" this index is in an inconsistent state.\"\n            )\n        codes_length = len(codes[0])\n        for i, (level, level_codes) in enumerate(zip(levels, codes)):\n            if len(level_codes) != codes_length:\n                raise ValueError(\n                    \"Unequal code lengths: %s\" % ([len(code_) for code_ in codes])\n                )\n            if len(level_codes) and level_codes.max() >= len(level):\n                msg = (\n                    \"On level {level}, code max ({max_code}) >= length of \"\n                    \"level ({level_len}). NOTE: this index is in an \"\n                    \"inconsistent state\".format(\n                        level=i, max_code=level_codes.max(), level_len=len(level)\n                    )\n                )\n                raise ValueError(msg)\n            if len(level_codes) and level_codes.min() < -1:\n                raise ValueError(\n                    \"On level {level}, code value ({code})\"\n                    \" < -1\".format(level=i, code=level_codes.min())\n                )\n            if not level.is_unique:\n                raise ValueError(\n                    \"Level values must be unique: {values} on \"\n                    \"level {level}\".format(values=[value for value in level], level=i)\n                )\n        if self.sortorder is not None:\n            if self.sortorder > self._lexsort_depth():\n                raise ValueError(\n                    \"Value for sortorder must be inferior or equal \"\n                    \"to actual lexsort_depth: \"\n                    \"sortorder {sortorder} with lexsort_depth {lexsort_depth}\".format(\n                        sortorder=self.sortorder, lexsort_depth=self._lexsort_depth()\n                    )\n                )\n\n        codes = [\n            self._validate_codes(level, code) for level, code in zip(levels, codes)\n        ]\n        new_codes = FrozenList(codes)\n        return new_codes",
        "begin_line": 317,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_product#515",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_product(cls, iterables, sortorder=None, names=_no_default_names)",
        "snippet": "    def from_product(cls, iterables, sortorder=None, names=_no_default_names):\n        \"\"\"\n        Make a MultiIndex from the cartesian product of multiple iterables.\n\n        Parameters\n        ----------\n        iterables : list / sequence of iterables\n            Each iterable has unique labels for each level of the index.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n            .. versionchanged:: 1.0.0\n\n               If not explicitly provided, names will be inferred from the\n               elements of iterables if an element has a name attribute\n\n        Returns\n        -------\n        index : MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> numbers = [0, 1, 2]\n        >>> colors = ['green', 'purple']\n        >>> pd.MultiIndex.from_product([numbers, colors],\n        ...                            names=['number', 'color'])\n        MultiIndex([(0,  'green'),\n                    (0, 'purple'),\n                    (1,  'green'),\n                    (1, 'purple'),\n                    (2,  'green'),\n                    (2, 'purple')],\n                   names=['number', 'color'])\n        \"\"\"\n        from pandas.core.reshape.util import cartesian_product\n\n        if not is_list_like(iterables):\n            raise TypeError(\"Input must be a list / sequence of iterables.\")\n        elif is_iterator(iterables):\n            iterables = list(iterables)\n\n        codes, levels = _factorize_from_iterables(iterables)\n        if names is _no_default_names:\n            names = [getattr(it, \"name\", None) for it in iterables]\n\n        codes = cartesian_product(codes)\n        return MultiIndex(levels, codes, sortorder=sortorder, names=names)",
        "begin_line": 515,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levels#641",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levels(self)",
        "snippet": "    def levels(self):\n        result = [\n            x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n        ]\n        return FrozenList(result)",
        "begin_line": 641,
        "end_line": 645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_levels#701",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_levels(\n        self, levels, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        # This is NOT part of the levels property because it should be\n        # externally not allowed to set levels. User beware if you change\n        # _levels directly\n        if validate:\n            if len(levels) == 0:\n                raise ValueError(\"Must set non-zero number of levels.\")\n            if level is None and len(levels) != self.nlevels:\n                raise ValueError(\"Length of levels must match number of levels.\")\n            if level is not None and len(levels) != len(level):\n                raise ValueError(\"Length of levels must match length of level.\")\n\n        if level is None:\n            new_levels = FrozenList(\n                ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_levels = list(self._levels)\n            for lev_num, lev in zip(level_numbers, levels):\n                new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(levels=new_levels)\n            self._codes = new_codes\n\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 701,
        "end_line": 736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.codes#814",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._codes",
        "begin_line": 814,
        "end_line": 815,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_codes#826",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_codes(\n        self, codes, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        if validate:\n            if level is None and len(codes) != self.nlevels:\n                raise ValueError(\"Length of codes must match number of levels\")\n            if level is not None and len(codes) != len(level):\n                raise ValueError(\"Length of codes must match length of levels.\")\n\n        if level is None:\n            new_codes = FrozenList(\n                _ensure_frozen(level_codes, lev, copy=copy)._shallow_copy()\n                for lev, level_codes in zip(self._levels, codes)\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_codes = list(self._codes)\n            for lev_num, level_codes in zip(level_numbers, codes):\n                lev = self.levels[lev_num]\n                new_codes[lev_num] = _ensure_frozen(\n                    level_codes, lev, copy=copy\n                )._shallow_copy()\n            new_codes = FrozenList(new_codes)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(codes=new_codes)\n\n        self._codes = new_codes\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 826,
        "end_line": 856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__contains__#1029",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__contains__(self, key)",
        "snippet": "    def __contains__(self, key):\n        hash(key)\n        try:\n            self.get_loc(key)\n            return True\n        except (LookupError, TypeError, ValueError):\n            return False",
        "begin_line": 1029,
        "end_line": 1035,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__len__#1221",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__len__(self)",
        "snippet": "    def __len__(self):\n        return len(self.codes[0])",
        "begin_line": 1221,
        "end_line": 1222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_names#1224",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList(self._names)",
        "begin_line": 1224,
        "end_line": 1225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_names#1227",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_names(self, names, level=None, validate=True)",
        "snippet": "    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110\n        # Don't allow a single string for names in a MultiIndex\n        if names is not None and not is_list_like(names):\n            raise ValueError(\"Names should be list-like for a MultiIndex\")\n        names = list(names)\n\n        if validate:\n            if level is not None and len(names) != len(level):\n                raise ValueError(\"Length of names must match length of level.\")\n            if level is None and len(names) != self.nlevels:\n                raise ValueError(\n                    \"Length of names must match number of levels in MultiIndex.\"\n                )\n\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(lev) for lev in level]\n\n        # set the name\n        for lev, name in zip(level, names):\n            if name is not None:\n                # GH 20527\n                # All items in 'names' need to be hashable:\n                if not is_hashable(name):\n                    raise TypeError(\n                        \"{}.name must be a hashable type\".format(\n                            self.__class__.__name__\n                        )\n                    )\n            self._names[lev] = name",
        "begin_line": 1227,
        "end_line": 1282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_number#1329",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_number(self, level)",
        "snippet": "    def _get_level_number(self, level):\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                \"The name %s occurs multiple times, use a level number\" % level\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n                raise KeyError(\"Level %s not found\" % str(level))\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        \"Too many levels: Index has only %d \"\n                        \"levels, %d is not a valid level number\"\n                        % (self.nlevels, orig_level)\n                    )\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n                raise IndexError(\n                    \"Too many levels: Index has only %d levels, \"\n                    \"not %d\" % (self.nlevels, level + 1)\n                )\n        return level",
        "begin_line": 1329,
        "end_line": 1355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._engine#1360",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_....\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n        # ... in order to obtain offsets such that sorting the combination of\n        # shifted codes (one for each level, resulting in a unique integer) is\n        # equivalent to sorting lexicographically the codes themselves. Notice\n        # that each level needs to be shifted by the number of bits needed to\n        # represent the _previous_ ones:\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n        # Check the total number of bits needed for our representation:\n        if lev_bits[0] > 64:\n            # The levels would overflow a 64 bit uint - use Python integers:\n            return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n        return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
        "begin_line": 1360,
        "end_line": 1379,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._has_complex_internals#1401",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._has_complex_internals(self)",
        "snippet": "    def _has_complex_internals(self):\n        # to disable groupby tricks\n        return True",
        "begin_line": 1401,
        "end_line": 1403,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_value#1515",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n        # Label-based\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        def _try_mi(k):\n            # TODO: what if a level contains tuples??\n            loc = self.get_loc(k)\n            new_values = series._values[loc]\n            new_index = self[loc]\n            new_index = maybe_droplevels(new_index, k)\n            return series._constructor(\n                new_values, index=new_index, name=series.name\n            ).__finalize__(self)\n\n        try:\n            return self._engine.get_value(s, k)\n        except KeyError as e1:\n            try:\n                return _try_mi(key)\n            except KeyError:\n                pass\n\n            try:\n                return libindex.get_value_at(s, k)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:  # pragma: no cover\n                raise e1\n        except TypeError:\n\n            # a Timestamp will raise a TypeError in a multi-index\n            # rather than a KeyError, try it here\n            # note that a string that 'looks' like a Timestamp will raise\n            # a KeyError! (GH5725)\n            if isinstance(key, (datetime.datetime, np.datetime64, str)):\n                try:\n                    return _try_mi(key)\n                except KeyError:\n                    raise\n                except (IndexError, ValueError, TypeError):\n                    pass\n\n                try:\n                    return _try_mi(Timestamp(key))\n                except (\n                    KeyError,\n                    TypeError,\n                    IndexError,\n                    ValueError,\n                    tslibs.OutOfBoundsDatetime,\n                ):\n                    pass\n\n            raise InvalidIndexError(key)",
        "begin_line": 1515,
        "end_line": 1575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._try_mi#1520",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._try_mi(k)",
        "snippet": "        def _try_mi(k):\n            # TODO: what if a level contains tuples??\n            loc = self.get_loc(k)\n            new_values = series._values[loc]\n            new_index = self[loc]\n            new_index = maybe_droplevels(new_index, k)\n            return series._constructor(\n                new_values, index=new_index, name=series.name\n            ).__finalize__(self)",
        "begin_line": 1520,
        "end_line": 1528,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_values#1577",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_values(self, level, unique=False)",
        "snippet": "    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n\n        lev = self.levels[level]\n        level_codes = self.codes[level]\n        name = self._names[level]\n        if unique:\n            level_codes = algos.unique(level_codes)\n        filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n        return lev._shallow_copy(filled, name=name)",
        "begin_line": 1577,
        "end_line": 1601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_level_values#1603",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_level_values(self, level)",
        "snippet": "    def get_level_values(self, level):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index.\n\n        Parameters\n        ----------\n        level : int or str\n            ``level`` is either the integer position of the level in the\n            MultiIndex, or the name of the level.\n\n        Returns\n        -------\n        values : Index\n            Values is a level of this MultiIndex converted to\n            a single :class:`Index` (or subclass thereof).\n\n        Examples\n        --------\n\n        Create a MultiIndex:\n\n        >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n        >>> mi.names = ['level_1', 'level_2']\n\n        Get level values by supplying level as either integer or name:\n\n        >>> mi.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object', name='level_1')\n        >>> mi.get_level_values('level_2')\n        Index(['d', 'e', 'f'], dtype='object', name='level_2')\n        \"\"\"\n        level = self._get_level_number(level)\n        values = self._get_level_values(level)\n        return values",
        "begin_line": 1603,
        "end_line": 1637,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_all_dates#1795",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        return False",
        "begin_line": 1795,
        "end_line": 1796,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.nlevels#1985",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.nlevels(self)",
        "snippet": "    def nlevels(self):\n        \"\"\"\n        Integer number of levels in this MultiIndex.\n        \"\"\"\n        return len(self.levels)",
        "begin_line": 1985,
        "end_line": 1989,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__getitem__#2030",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n\n            retval = []\n            for lev, level_codes in zip(self.levels, self.codes):\n                if level_codes[key] == -1:\n                    retval.append(np.nan)\n                else:\n                    retval.append(lev[level_codes[key]])\n\n            return tuple(retval)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key, dtype=bool)\n                sortorder = self.sortorder\n            else:\n                # cannot be sure whether the result will be sorted\n                sortorder = None\n\n                if isinstance(key, Index):\n                    key = np.asarray(key)\n\n            new_codes = [level_codes[key] for level_codes in self.codes]\n\n            return MultiIndex(\n                levels=self.levels,\n                codes=new_codes,\n                names=self.names,\n                sortorder=sortorder,\n                verify_integrity=False,\n            )",
        "begin_line": 2030,
        "end_line": 2061,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.take#2064",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(\n            self.codes,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=-1,\n        )\n        return MultiIndex(\n            levels=self.levels, codes=taken, names=self.names, verify_integrity=False\n        )",
        "begin_line": 2064,
        "end_line": 2076,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable#2078",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=None)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=None\n    ):\n        \"\"\" Internal method to handle NA filling of take \"\"\"\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = [lab.take(indices) for lab in self.codes]\n            mask = indices == -1\n            if mask.any():\n                masked = []\n                for new_label in taken:\n                    label_values = new_label.values()\n                    label_values[mask] = na_value\n                    masked.append(np.asarray(label_values))\n                taken = masked\n        else:\n            taken = [lab.take(indices) for lab in self.codes]\n        return taken",
        "begin_line": 2078,
        "end_line": 2101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.get_loc#2639",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.get_loc(self, key, method=None)",
        "snippet": "    def get_loc(self, key, method=None):\n        \"\"\"\n        Get location for a label or a tuple of labels as an integer, slice or\n        boolean mask.\n\n        Parameters\n        ----------\n        key : label or tuple of labels (one for each level)\n        method : None\n\n        Returns\n        -------\n        loc : int, slice object or boolean mask\n            If the key is past the lexsort depth, the return may be a\n            boolean mask array, otherwise it is always a slice or int.\n\n        See Also\n        --------\n        Index.get_loc : The get_loc method for (single-level) index.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n\n        Notes\n        -----\n        The key cannot be a slice, list of same-level labels, a boolean mask,\n        or a sequence of such. If you want to use those, use\n        :meth:`MultiIndex.get_locs` instead.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_loc('b')\n        slice(1, 3, None)\n\n        >>> mi.get_loc(('b', 'e'))\n        1\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                \"only the default get_loc method is \"\n                \"currently supported for MultiIndex\"\n            )\n\n        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask\n\n        if not isinstance(key, tuple):\n            loc = self._get_level_indexer(key, level=0)\n            return _maybe_to_slice(loc)\n\n        keylen = len(key)\n        if self.nlevels < keylen:\n            raise KeyError(\n                \"Key length ({0}) exceeds index depth ({1})\"\n                \"\".format(keylen, self.nlevels)\n            )\n\n        if keylen == self.nlevels and self.is_unique:\n            return self._engine.get_loc(key)\n\n        # -- partial selection or non-unique index\n        # break the key into 2 parts based on the lexsort_depth of the index;\n        # the first part returns a continuous slice of the index; the 2nd part\n        # needs linear search within the slice\n        i = self.lexsort_depth\n        lead_key, follow_key = key[:i], key[i:]\n        start, stop = (\n            self.slice_locs(lead_key, lead_key) if lead_key else (0, len(self))\n        )\n\n        if start == stop:\n            raise KeyError(key)\n\n        if not follow_key:\n            return slice(start, stop)\n\n        warnings.warn(\n            \"indexing past lexsort depth may impact performance.\",\n            PerformanceWarning,\n            stacklevel=10,\n        )\n\n        loc = np.arange(start, stop, dtype=\"int64\")\n\n        for i, k in enumerate(follow_key, len(lead_key)):\n            mask = self.codes[i][loc] == self.levels[i].get_loc(k)\n            if not mask.all():\n                loc = loc[mask]\n            if not len(loc):\n                raise KeyError(key)\n\n        return _maybe_to_slice(loc) if len(loc) != stop - start else slice(start, stop)",
        "begin_line": 2639,
        "end_line": 2744,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice#2685",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._maybe_to_slice(loc)",
        "snippet": "        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != \"int64\":\n                return loc\n\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n\n            mask = np.empty(len(self), dtype=\"bool\")\n            mask.fill(False)\n            mask[loc] = True\n            return mask",
        "begin_line": 2685,
        "end_line": 2697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_indexer#2886",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_indexer(self, key, level=0, indexer=None)",
        "snippet": "    def _get_level_indexer(self, key, level=0, indexer=None):\n        # return an indexer, boolean array or a slice showing where the key is\n        # in the totality of values\n        # if the indexer is provided, then use this\n\n        level_index = self.levels[level]\n        level_codes = self.codes[level]\n\n        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)._ndarray_values\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m\n\n        if isinstance(key, slice):\n            # handle a slice, returning a slice if we can\n            # otherwise a boolean indexer\n\n            try:\n                if key.start is not None:\n                    start = level_index.get_loc(key.start)\n                else:\n                    start = 0\n                if key.stop is not None:\n                    stop = level_index.get_loc(key.stop)\n                else:\n                    stop = len(level_index) - 1\n                step = key.step\n            except KeyError:\n\n                # we have a partial slice (like looking up a partial date\n                # string)\n                start = stop = level_index.slice_indexer(\n                    key.start, key.stop, key.step, kind=\"loc\"\n                )\n                step = start.step\n\n            if isinstance(start, slice) or isinstance(stop, slice):\n                # we have a slice for start and/or stop\n                # a partial date slicer on a DatetimeIndex generates a slice\n                # note that the stop ALREADY includes the stopped point (if\n                # it was a string sliced)\n                start = getattr(start, \"start\", start)\n                stop = getattr(stop, \"stop\", stop)\n                return convert_indexer(start, stop, step)\n\n            elif level > 0 or self.lexsort_depth == 0 or step is not None:\n                # need to have like semantics here to right\n                # searching as when we are using a slice\n                # so include the stop+1 (so we include stop)\n                return convert_indexer(start, stop + 1, step)\n            else:\n                # sorted, so can return slice object -> view\n                i = level_codes.searchsorted(start, side=\"left\")\n                j = level_codes.searchsorted(stop, side=\"right\")\n                return slice(i, j, step)\n\n        else:\n\n            code = level_index.get_loc(key)\n\n            if level > 0 or self.lexsort_depth == 0:\n                # Desired level is not sorted\n                locs = np.array(level_codes == code, dtype=bool, copy=False)\n                if not locs.any():\n                    # The label is present in self.levels[level] but unused:\n                    raise KeyError(key)\n                return locs\n\n            i = level_codes.searchsorted(code, side=\"left\")\n            j = level_codes.searchsorted(code, side=\"right\")\n            if i == j:\n                # The label is present in self.levels[level] but unused:\n                raise KeyError(key)\n            return slice(i, j)",
        "begin_line": 2886,
        "end_line": 2981,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.convert_indexer#2894",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.convert_indexer(start, stop, step, indexer=indexer, codes=level_codes)",
        "snippet": "        def convert_indexer(start, stop, step, indexer=indexer, codes=level_codes):\n            # given the inputs and the codes/indexer, compute an indexer set\n            # if we have a provided indexer, then this need not consider\n            # the entire labels set\n\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(codes):\n\n                # we have an indexer which maps the locations in the labels\n                # that we have already selected (and is not an indexer for the\n                # entire set) otherwise this is wasteful so we only need to\n                # examine locations that are in this set the only magic here is\n                # that the result are the mappings to the set that we have\n                # selected\n                from pandas import Series\n\n                mapper = Series(indexer)\n                indexer = codes.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)._ndarray_values\n\n            else:\n                m = np.zeros(len(codes), dtype=bool)\n                m[np.in1d(codes, r, assume_unique=Index(codes).is_unique)] = True\n\n            return m",
        "begin_line": 2894,
        "end_line": 2919,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#47",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None):\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(data, name=name)\n\n        # is_scalar, generators handled in coerce_to_ndarray\n        data = cls._coerce_to_ndarray(data)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 47,
        "end_line": 73,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011904761904761906,
            "pseudo_dstar_susp": 0.0007892659826361484,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.0007892659826361484,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#83",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None and not self._can_hold_na:\n            # Ensure we are not returning an Int64Index with float data:\n            return self._shallow_copy_with_infer(values=values, **kwargs)\n        return super()._shallow_copy(values=values, **kwargs)",
        "begin_line": 83,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0022935779816513763,
            "pseudo_dstar_susp": 0.0011086474501108647,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.0011086474501108647,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting#123",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls, data, subarr)",
        "snippet": "    def _assert_safe_casting(cls, data, subarr):\n        \"\"\"\n        Subclasses need to override this only if the process of casting data\n        from some accepted dtype to the internal dtype(s) bears the risk of\n        truncation (e.g. float to int).\n        \"\"\"\n        pass",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#136",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        \"\"\"\n        Checks that all the labels are datetime objects\n        \"\"\"\n        return False",
        "begin_line": 136,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._union#149",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        # Right now, we treat union(int, float) a bit special.\n        # See https://github.com/pandas-dev/pandas/issues/26778 for discussion\n        # We may change union(int, float) to go to object.\n        # float | [u]int -> float  (the special case)\n        # <T>   | <T>    -> T\n        # <T>   | <U>    -> object\n        needs_cast = (is_integer_dtype(self.dtype) and is_float_dtype(other.dtype)) or (\n            is_integer_dtype(other.dtype) and is_float_dtype(self.dtype)\n        )\n        if needs_cast:\n            first = self.astype(\"float\")\n            second = other.astype(\"float\")\n            return first._union(second, sort)\n        else:\n            return super()._union(other, sort)",
        "begin_line": 149,
        "end_line": 164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index.inferred_type#230",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"Always 'integer' for ``Int64Index``\"\"\"\n        return \"integer\"",
        "begin_line": 230,
        "end_line": 232,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016812373907195696,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer#240",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # don't coerce ilocs to integers\n        if kind != \"iloc\":\n            key = self._maybe_cast_indexer(key)\n        return super()._convert_scalar_indexer(key, kind=kind)",
        "begin_line": 240,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other#261",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Int64Index",
        "signature": "pandas.core.indexes.numeric.Int64Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        return super()._is_compatible_with_other(other) or all(\n            isinstance(type(obj), (ABCInt64Index, ABCFloat64Index, ABCRangeIndex))\n            for obj in [self, other]\n        )",
        "begin_line": 261,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#59",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall thru to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 59,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#166",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 166,
        "end_line": 192,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017021276595744682,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#195",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\", \"unicode\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 195,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017021276595744682,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#237",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021753317380900588,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#245",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021753317380900588,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#254",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 254,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#451",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None)",
        "snippet": "def _factorize_array(values, na_sentinel: int = -1, size_hint=None, na_value=None):\n    \"\"\"\n    Factorize an array-like to labels and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    labels : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, labels = table.factorize(\n        values, na_sentinel=na_sentinel, na_value=na_value\n    )\n\n    labels = ensure_platform_int(labels)\n    return labels, uniques",
        "begin_line": 451,
        "end_line": 482,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#612",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, order=None, na_sentinel=-1, size_hint=None)",
        "snippet": "def factorize(values, sort: bool = False, order=None, na_sentinel=-1, size_hint=None):\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing labels and uniques\n    # 3.) Maybe boxing the output in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = extract_array(values)\n        labels, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        labels, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        from pandas.core.sorting import safe_sort\n\n        uniques, labels = safe_sort(\n            uniques, labels, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return labels, uniques",
        "begin_line": 612,
        "end_line": 658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.mode#810",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.mode(values, dropna: bool=True)",
        "snippet": "def mode(values, dropna: bool = True) -> ABCSeries:\n    \"\"\"\n    Returns the mode(s) of an array.\n\n    Parameters\n    ----------\n    values : array-like\n        Array over which to check for duplicate values.\n    dropna : boolean, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    mode : Series\n    \"\"\"\n    from pandas import Series\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    # categorical is a fast-path\n    if is_categorical_dtype(values):\n        if isinstance(values, Series):\n            return Series(values.values.mode(dropna=dropna), name=values.name)\n        return values.mode(dropna=dropna)\n\n    if dropna and is_datetimelike(values):\n        mask = values.isnull()\n        values = values[~mask]\n\n    values, _ = _ensure_data(values)\n    ndtype = values.dtype.name\n\n    f = getattr(htable, \"mode_{dtype}\".format(dtype=ndtype))\n    result = f(values, dropna=dropna)\n    try:\n        result = np.sort(result)\n    except TypeError as e:\n        warn(\"Unable to sort modes: {error}\".format(error=e))\n\n    result = _reconstruct_data(result, original.dtype, original)\n    return Series(result)",
        "begin_line": 810,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.checked_add_with_arr#912",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.checked_add_with_arr(arr, b, arr_mask=None, b_mask=None)",
        "snippet": "def checked_add_with_arr(arr, b, arr_mask=None, b_mask=None):\n    \"\"\"\n    Perform array addition that checks for underflow and overflow.\n\n    Performs the addition of an int64 array and an int64 integer (or array)\n    but checks that they do not result in overflow first. For elements that\n    are indicated to be NaN, whether or not there is overflow for that element\n    is automatically ignored.\n\n    Parameters\n    ----------\n    arr : array addend.\n    b : array or scalar addend.\n    arr_mask : boolean array or None\n        array indicating which elements to exclude from checking\n    b_mask : boolean array or boolean or None\n        array or scalar indicating which element(s) to exclude from checking\n\n    Returns\n    -------\n    sum : An array for elements x + b for each element x in arr if b is\n          a scalar or an array for elements x + y for each element pair\n          (x, y) in (arr, b).\n\n    Raises\n    ------\n    OverflowError if any x + y exceeds the maximum or minimum int64 value.\n    \"\"\"\n    # For performance reasons, we broadcast 'b' to the new array 'b2'\n    # so that it has the same size as 'arr'.\n    b2 = np.broadcast_to(b, arr.shape)\n    if b_mask is not None:\n        # We do the same broadcasting for b_mask as well.\n        b2_mask = np.broadcast_to(b_mask, arr.shape)\n    else:\n        b2_mask = None\n\n    # For elements that are NaN, regardless of their value, we should\n    # ignore whether they overflow or not when doing the checked add.\n    if arr_mask is not None and b2_mask is not None:\n        not_nan = np.logical_not(arr_mask | b2_mask)\n    elif arr_mask is not None:\n        not_nan = np.logical_not(arr_mask)\n    elif b_mask is not None:\n        not_nan = np.logical_not(b2_mask)\n    else:\n        not_nan = np.empty(arr.shape, dtype=bool)\n        not_nan.fill(True)\n\n    # gh-14324: For each element in 'arr' and its corresponding element\n    # in 'b2', we check the sign of the element in 'b2'. If it is positive,\n    # we then check whether its sum with the element in 'arr' exceeds\n    # np.iinfo(np.int64).max. If so, we have an overflow error. If it\n    # it is negative, we then check whether its sum with the element in\n    # 'arr' exceeds np.iinfo(np.int64).min. If so, we have an overflow\n    # error as well.\n    mask1 = b2 > 0\n    mask2 = b2 < 0\n\n    if not mask1.any():\n        to_raise = ((np.iinfo(np.int64).min - b2 > arr) & not_nan).any()\n    elif not mask2.any():\n        to_raise = ((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()\n    else:\n        to_raise = (\n            ((np.iinfo(np.int64).max - b2[mask1] < arr[mask1]) & not_nan[mask1]).any()\n            or (\n                (np.iinfo(np.int64).min - b2[mask2] > arr[mask2]) & not_nan[mask2]\n            ).any()\n        )\n\n    if to_raise:\n        raise OverflowError(\"Overflow in int64 addition\")\n    return arr + b",
        "begin_line": 912,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1443",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(ndim, arr_dtype, out_dtype, axis: int = 0, mask_info=None):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1443,
        "end_line": 1474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.take#1477",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take(arr, indices, axis=0, allow_fill: bool=False, fill_value=None)",
        "snippet": "def take(arr, indices, axis=0, allow_fill: bool = False, fill_value=None):\n    \"\"\"\n    Take elements from an array.\n\n    .. versionadded:: 0.23.0\n\n    Parameters\n    ----------\n    arr : sequence\n        Non array-likes (sequences without a dtype) are coerced\n        to an ndarray.\n    indices : sequence of integers\n        Indices to be taken.\n    axis : int, default 0\n        The axis over which to select values.\n    allow_fill : bool, default False\n        How to handle negative values in `indices`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right (the default). This is similar to :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate\n          missing values. These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n    fill_value : any, optional\n        Fill value to use for NA-indices when `allow_fill` is True.\n        This may be ``None``, in which case the default NA value for\n        the type (``self.dtype.na_value``) is used.\n\n        For multi-dimensional `arr`, each *element* is filled with\n        `fill_value`.\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n        Same type as the input.\n\n    Raises\n    ------\n    IndexError\n        When `indices` is out of bounds for the array.\n    ValueError\n        When the indexer contains negative values other than ``-1``\n        and `allow_fill` is True.\n\n    Notes\n    -----\n    When `allow_fill` is False, `indices` may be whatever dimensionality\n    is accepted by NumPy for `arr`.\n\n    When `allow_fill` is True, `indices` should be 1-D.\n\n    See Also\n    --------\n    numpy.take\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import take\n\n    With the default ``allow_fill=False``, negative numbers indicate\n    positional indices from the right.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1])\n    array([10, 10, 30])\n\n    Setting ``allow_fill=True`` will place `fill_value` in those positions.\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True)\n    array([10., 10., nan])\n\n    >>> take(np.array([10, 20, 30]), [0, 0, -1], allow_fill=True,\n    ...      fill_value=-10)\n    array([ 10,  10, -10])\n    \"\"\"\n    if not is_array_like(arr):\n        arr = np.asarray(arr)\n\n    indices = np.asarray(indices, dtype=np.intp)\n\n    if allow_fill:\n        # Pandas style, -1 means NA\n        validate_indices(indices, arr.shape[axis])\n        result = take_1d(\n            arr, indices, axis=axis, allow_fill=True, fill_value=fill_value\n        )\n    else:\n        # NumPy style\n        result = arr.take(indices, axis=axis)\n    return result",
        "begin_line": 1477,
        "end_line": 1567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1570",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis=0, out=None, fill_value=np.nan, mask_info=None, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr,\n    indexer,\n    axis=0,\n    out=None,\n    fill_value=np.nan,\n    mask_info=None,\n    allow_fill: bool = True,\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    mask_info : tuple of (ndarray, boolean)\n        If provided, value should correspond to:\n            (indexer != -1, (indexer != -1).any())\n        If not provided, it will be computed internally if necessary\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                if mask_info is not None:\n                    mask, needs_masking = mask_info\n                else:\n                    mask = indexer == -1\n                    needs_masking = mask.any()\n                    mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1570,
        "end_line": 1683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.algorithms.diff#1839",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.diff(arr, n: int, axis: int=0)",
        "snippet": "def diff(arr, n: int, axis: int = 0):\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n\n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n\n    Returns\n    -------\n    shifted\n    \"\"\"\n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n\n    is_timedelta = False\n    is_bool = False\n    if needs_i8_conversion(arr):\n        dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n\n    elif is_bool_dtype(dtype):\n        dtype = np.object_\n        is_bool = True\n\n    elif is_integer_dtype(dtype):\n        dtype = np.float64\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2 and arr.dtype.name in _diff_special:\n        # TODO: can diff_2d dtype specialization troubles be fixed by defining\n        #  out_arr inside diff_2d?\n        algos.diff_2d(arr, out_arr, n, axis)\n    else:\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n\n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n\n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        elif is_bool:\n            out_arr[res_indexer] = arr[res_indexer] ^ arr[lag_indexer]\n        else:\n            out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"int64\").view(\"timedelta64[ns]\")\n\n    return out_arr",
        "begin_line": 1839,
        "end_line": 1922,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#65",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key=None)",
        "snippet": "    def _reset_cache(self, key=None):\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 65,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._get_cython_func#629",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._get_cython_func(self, arg: str)",
        "snippet": "    def _get_cython_func(self, arg: str) -> Optional[str]:\n        \"\"\"\n        if we define an internal function for this argument, return it\n        \"\"\"\n        return self._cython_table.get(arg)",
        "begin_line": 629,
        "end_line": 633,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.SelectionMixin._is_builtin_func#635",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.SelectionMixin",
        "signature": "pandas.core.base.SelectionMixin._is_builtin_func(self, arg)",
        "snippet": "    def _is_builtin_func(self, arg):\n        \"\"\"\n        if we define an builtin function for this argument, return it,\n        otherwise return the arg\n        \"\"\"\n        return self._builtin_table.get(arg, arg)",
        "begin_line": 635,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.shape#699",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        return self._values.shape",
        "begin_line": 699,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#706",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self):\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 706,
        "end_line": 710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009900990099009901,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0010741138560687433,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0010741138560687433
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#783",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self):\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 783,
        "end_line": 787,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018811136192626034,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.array#820",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        \"\"\"\n        The ExtensionArray of the data backing this Series or Index.\n\n        .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        ExtensionArray\n            An ExtensionArray of the values stored within. For extension\n            types, this is the actual array. For NumPy native types, this\n            is a thin (no copy) wrapper around :class:`numpy.ndarray`.\n\n            ``.array`` differs ``.values`` which may require converting the\n            data to a different form.\n\n        See Also\n        --------\n        Index.to_numpy : Similar method that always returns a NumPy array.\n        Series.to_numpy : Similar method that always returns a NumPy array.\n\n        Notes\n        -----\n        This table lays out the different array types for each extension\n        dtype within pandas.\n\n        ================== =============================\n        dtype              array type\n        ================== =============================\n        category           Categorical\n        period             PeriodArray\n        interval           IntervalArray\n        IntegerNA          IntegerArray\n        datetime64[ns, tz] DatetimeArray\n        ================== =============================\n\n        For any 3rd-party extension types, the array type will be an\n        ExtensionArray.\n\n        For all remaining dtypes ``.array`` will be a\n        :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray\n        stored within. If you absolutely need a NumPy array (possibly with\n        copying / coercing data), then use :meth:`Series.to_numpy` instead.\n\n        Examples\n        --------\n\n        For regular NumPy types like int, and float, a PandasArray\n        is returned.\n\n        >>> pd.Series([1, 2, 3]).array\n        <PandasArray>\n        [1, 2, 3]\n        Length: 3, dtype: int64\n\n        For extension types, like Categorical, the actual ExtensionArray\n        is returned\n\n        >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\n        >>> ser.array\n        [a, b, a]\n        Categories (2, object): [a, b]\n        \"\"\"\n        # As a mixin, we depend on the mixing class having _values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        result = self._values  # type: ignore\n\n        if is_datetime64_ns_dtype(result.dtype):\n            from pandas.arrays import DatetimeArray\n\n            result = DatetimeArray(result)\n        elif is_timedelta64_ns_dtype(result.dtype):\n            from pandas.arrays import TimedeltaArray\n\n            result = TimedeltaArray(result)\n\n        elif not is_extension_array_dtype(result.dtype):\n            from pandas.core.arrays.numpy_ import PandasArray\n\n            result = PandasArray(result)\n\n        return result",
        "begin_line": 820,
        "end_line": 902,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._ndarray_values#1001",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        \"\"\"\n        The data as an ndarray, possibly losing information.\n\n        The expectation is that this is cheap to compute, and is primarily\n        used for interacting with our indexers.\n\n        - categorical -> codes\n        \"\"\"\n        if is_extension_array_dtype(self):\n            return self.array._ndarray_values\n        # As a mixin, we depend on the mixing class having values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        return self.values  # type: ignore",
        "begin_line": 1001,
        "end_line": 1015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010183299389002036,
            "pseudo_dstar_susp": 0.0007468259895444362,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.0007468259895444362,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.empty#1018",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.empty(self)",
        "snippet": "    def empty(self):\n        return not self.size",
        "begin_line": 1018,
        "end_line": 1019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.max#1021",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.max(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def max(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the maximum value of the Index.\n\n        Parameters\n        ----------\n        axis : int, optional\n            For compatibility with NumPy. Only 0 or None are allowed.\n        skipna : bool, default True\n\n        Returns\n        -------\n        scalar\n            Maximum value.\n\n        See Also\n        --------\n        Index.min : Return the minimum value in an Index.\n        Series.max : Return the maximum value in a Series.\n        DataFrame.max : Return the maximum values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([3, 2, 1])\n        >>> idx.max()\n        3\n\n        >>> idx = pd.Index(['c', 'b', 'a'])\n        >>> idx.max()\n        'c'\n\n        For a MultiIndex, the maximum is determined lexicographically.\n\n        >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n        >>> idx.max()\n        ('b', 2)\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_max(args, kwargs)\n        return nanops.nanmax(self._values, skipna=skipna)",
        "begin_line": 1021,
        "end_line": 1060,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.argmax#1062",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.argmax(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def argmax(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return an ndarray of the maximum argument indexer.\n\n        Parameters\n        ----------\n        axis : {None}\n            Dummy argument for consistency with Series\n        skipna : bool, default True\n\n        Returns\n        -------\n        numpy.ndarray\n            Indices of the maximum values.\n\n        See Also\n        --------\n        numpy.ndarray.argmax\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        return nanops.nanargmax(self._values, skipna=skipna)",
        "begin_line": 1062,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.min#1085",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.min(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def min(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the minimum value of the Index.\n\n        Parameters\n        ----------\n        axis : {None}\n            Dummy argument for consistency with Series\n        skipna : bool, default True\n\n        Returns\n        -------\n        scalar\n            Minimum value.\n\n        See Also\n        --------\n        Index.max : Return the maximum value of the object.\n        Series.min : Return the minimum value in a Series.\n        DataFrame.min : Return the minimum values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([3, 2, 1])\n        >>> idx.min()\n        1\n\n        >>> idx = pd.Index(['c', 'b', 'a'])\n        >>> idx.min()\n        'a'\n\n        For a MultiIndex, the minimum is determined lexicographically.\n\n        >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\n        >>> idx.min()\n        ('a', 1)\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_min(args, kwargs)\n        return nanops.nanmin(self._values, skipna=skipna)",
        "begin_line": 1085,
        "end_line": 1124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.argmin#1126",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.argmin(self, axis=None, skipna=True, *args, **kwargs)",
        "snippet": "    def argmin(self, axis=None, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return a ndarray of the minimum argument indexer.\n\n        Parameters\n        ----------\n        axis : {None}\n            Dummy argument for consistency with Series\n        skipna : bool, default True\n\n        Returns\n        -------\n        numpy.ndarray\n\n        See Also\n        --------\n        numpy.ndarray.argmin\n        \"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        return nanops.nanargmin(self._values, skipna=skipna)",
        "begin_line": 1126,
        "end_line": 1146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1173",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if is_datetimelike(self._values):\n            return map(com.maybe_box_datetimelike, self._values)\n        elif is_extension_array_dtype(self._values):\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1173,
        "end_line": 1191,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._reduce#1200",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\" perform the reduction type operation if we can \"\"\"\n        func = getattr(self, name, None)\n        if func is None:\n            raise TypeError(\n                \"{klass} cannot perform the operation {op}\".format(\n                    klass=self.__class__.__name__, op=name\n                )\n            )\n        return func(skipna=skipna, **kwds)",
        "begin_line": 1200,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#41",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype)",
        "snippet": "    def __init__(self, dtype):\n        dtype = np.dtype(dtype)\n        self._dtype = dtype\n        self._name = dtype.name\n        self._type = dtype.type",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016960651289009497,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#124",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values, copy=False)",
        "snippet": "    def __init__(self, values, copy=False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                \"'values' must be a NumPy array, not {typ}\".format(\n                    typ=type(values).__name__\n                )\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 124,
        "end_line": 141,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016960651289009497,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#171",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001718213058419244,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#403",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy=False)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the PandasArray to a :class:`numpy.ndarray`.\n\n        By default, this requires no coercion or copying of data.\n\n        Parameters\n        ----------\n        dtype : numpy.dtype\n            The NumPy dtype to pass to :func:`numpy.asarray`.\n        copy : bool, default False\n            Whether to copy the underlying data.\n\n        Returns\n        -------\n        ndarray\n        \"\"\"\n        result = np.asarray(self._ndarray, dtype=dtype)\n        if copy and result is self._ndarray:\n            result = result.copy()\n\n        return result",
        "begin_line": 403,
        "end_line": 424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002035002035002035,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func#182",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timedelta(x, unit=\"ns\")",
        "begin_line": 182,
        "end_line": 183,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#186",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 186,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024752475247524753,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.010416666666666666,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__#205",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.__init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_TD_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            if freq is None:\n                freq = values.freq\n            elif freq and values.freq:\n                freq = to_offset(freq)\n                freq, _ = dtl.validate_inferred_freq(freq, values.freq, False)\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a TimedeltaArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_TD_DTYPE)\n\n        _validate_td64_dtype(values.dtype)\n        dtype = _validate_td64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in TimedeltaArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 205,
        "end_line": 254,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#257",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values.view(_TD_DTYPE)\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 257,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024752475247524753,
            "pseudo_dstar_susp": 0.010416666666666666,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.010416666666666666,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#268",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 268,
        "end_line": 287,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00267379679144385,
            "pseudo_dstar_susp": 0.015151515151515152,
            "pseudo_tarantula_susp": 0.002331002331002331,
            "pseudo_op2_susp": 0.015151515151515152,
            "pseudo_barinel_susp": 0.002331002331002331
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range#290",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._generate_range(cls, start, end, periods, freq, closed=None)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, closed=None):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n\n        if start is not None:\n            start = Timedelta(start)\n\n        if end is not None:\n            end = Timedelta(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of startand end are defined\"\n                )\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        if freq is not None:\n            index = _generate_regular_range(start, end, periods, freq)\n        else:\n            index = np.linspace(start.value, end.value, periods).astype(\"i8\")\n\n        if not left_closed:\n            index = index[1:]\n        if not right_closed:\n            index = index[:-1]\n\n        return cls._simple_new(index, freq=freq)",
        "begin_line": 290,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._maybe_clear_freq#344",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 344,
        "end_line": 345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.sum#389",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.sum(self, axis=None, dtype=None, out=None, keepdims: bool=False, initial=None, skipna: bool=True, min_count: int=0)",
        "snippet": "    def sum(\n        self,\n        axis=None,\n        dtype=None,\n        out=None,\n        keepdims: bool = False,\n        initial=None,\n        skipna: bool = True,\n        min_count: int = 0,\n    ):\n        nv.validate_sum(\n            (), dict(dtype=dtype, out=out, keepdims=keepdims, initial=initial)\n        )\n        if not len(self):\n            return NaT\n        if not skipna and self._hasnans:\n            return NaT\n\n        result = nanops.nansum(\n            self._data, axis=axis, skipna=skipna, min_count=min_count\n        )\n        return Timedelta(result)",
        "begin_line": 389,
        "end_line": 410,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.std#412",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.std(self, axis=None, dtype=None, out=None, ddof: int=1, keepdims: bool=False, skipna: bool=True)",
        "snippet": "    def std(\n        self,\n        axis=None,\n        dtype=None,\n        out=None,\n        ddof: int = 1,\n        keepdims: bool = False,\n        skipna: bool = True,\n    ):\n        nv.validate_stat_ddof_func(\n            (), dict(dtype=dtype, out=out, keepdims=keepdims), fname=\"std\"\n        )\n        if not len(self):\n            return NaT\n        if not skipna and self._hasnans:\n            return NaT\n\n        result = nanops.nanstd(self._data, axis=axis, skipna=skipna, ddof=ddof)\n        return Timedelta(result)",
        "begin_line": 412,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.median#432",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.median(self, axis=None, out=None, overwrite_input: bool=False, keepdims: bool=False, skipna: bool=True)",
        "snippet": "    def median(\n        self,\n        axis=None,\n        out=None,\n        overwrite_input: bool = False,\n        keepdims: bool = False,\n        skipna: bool = True,\n    ):\n        nv.validate_median(\n            (), dict(out=out, overwrite_input=overwrite_input, keepdims=keepdims)\n        )\n        return nanops.nanmedian(self._data, axis=axis, skipna=skipna)",
        "begin_line": 432,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#984",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    elif is_datetime64_dtype(data):\n        # GH#23539\n        warnings.warn(\n            \"Passing datetime64-dtype data to TimedeltaIndex is \"\n            \"deprecated, will raise a TypeError in a future \"\n            \"version\",\n            FutureWarning,\n            stacklevel=4,\n        )\n        data = ensure_int64(data).view(_TD_DTYPE)\n\n    else:\n        raise TypeError(\n            \"dtype {dtype} cannot be converted to timedelta64[ns]\".format(\n                dtype=data.dtype\n            )\n        )\n\n    data = np.array(data, copy=copy)\n    if data.ndim != 1:\n        raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 984,
        "end_line": 1083,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0035087719298245615,
            "pseudo_dstar_susp": 0.023809523809523808,
            "pseudo_tarantula_susp": 0.0027247956403269754,
            "pseudo_op2_susp": 0.023809523809523808,
            "pseudo_barinel_susp": 0.0027247956403269754
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.ints_to_td64ns#1086",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.ints_to_td64ns(data, unit='ns')",
        "snippet": "def ints_to_td64ns(data, unit=\"ns\"):\n    \"\"\"\n    Convert an ndarray with integer-dtype to timedelta64[ns] dtype, treating\n    the integers as multiples of the given timedelta unit.\n\n    Parameters\n    ----------\n    data : numpy.ndarray with integer-dtype\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n    bool : whether a copy was made\n    \"\"\"\n    copy_made = False\n    unit = unit if unit is not None else \"ns\"\n\n    if data.dtype != np.int64:\n        # converting to int64 makes a copy, so we can avoid\n        # re-copying later\n        data = data.astype(np.int64)\n        copy_made = True\n\n    if unit != \"ns\":\n        dtype_str = \"timedelta64[{unit}]\".format(unit=unit)\n        data = data.view(dtype_str)\n\n        # TODO: watch out for overflows when converting from lower-resolution\n        data = data.astype(\"timedelta64[ns]\")\n        # the astype conversion makes a copy, so we can avoid re-copying later\n        copy_made = True\n\n    else:\n        data = data.view(\"timedelta64[ns]\")\n\n    return data, copy_made",
        "begin_line": 1086,
        "end_line": 1123,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#1126",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 1126,
        "end_line": 1158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1161",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        dtype = _TD_DTYPE\n        msg = textwrap.dedent(\n            \"\"\"\\\n            Passing in 'timedelta' dtype with no precision is deprecated\n            and will raise in a future version. Please pass in\n            'timedelta64[ns]' instead.\"\"\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=4)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(_BAD_DTYPE.format(dtype=dtype))\n\n    return dtype",
        "begin_line": 1161,
        "end_line": 1176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00267379679144385,
            "pseudo_dstar_susp": 0.015151515151515152,
            "pseudo_tarantula_susp": 0.002331002331002331,
            "pseudo_op2_susp": 0.015151515151515152,
            "pseudo_barinel_susp": 0.002331002331002331
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._generate_regular_range#1179",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._generate_regular_range(start, end, periods, offset)",
        "snippet": "def _generate_regular_range(start, end, periods, offset):\n    stride = offset.nanos\n    if periods is None:\n        b = Timedelta(start).value\n        e = Timedelta(end).value\n        e += stride - e % stride\n    elif start is not None:\n        b = Timedelta(start).value\n        e = b + periods * stride\n    elif end is not None:\n        e = Timedelta(end).value + stride\n        b = e - periods * stride\n    else:\n        raise ValueError(\n            \"at least 'start' or 'end' should be specified if a 'period' is given.\"\n        )\n\n    data = np.arange(b, e, stride, dtype=np.int64)\n    return data",
        "begin_line": 1179,
        "end_line": 1197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#79",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017085255424568598,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__init__#333",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            values = values._values\n\n        inferred_freq = getattr(values, \"_freq\", None)\n\n        if isinstance(values, type(self)):\n            # validation\n            dtz = getattr(dtype, \"tz\", None)\n            if dtz and values.tz is None:\n                dtype = DatetimeTZDtype(tz=dtype.tz)\n            elif dtz and values.tz:\n                if not timezones.tz_compare(dtz, values.tz):\n                    msg = (\n                        \"Timezone of the array and 'dtype' do not match. \"\n                        \"'{}' != '{}'\"\n                    )\n                    raise TypeError(msg.format(dtz, values.tz))\n            elif values.tz:\n                dtype = values.dtype\n            # freq = validate_values_freq(values, freq)\n            if freq is None:\n                freq = values.freq\n            values = values._data\n\n        if not isinstance(values, np.ndarray):\n            msg = (\n                \"Unexpected type '{}'. 'values' must be a DatetimeArray \"\n                \"ndarray, or Series or Index containing one of those.\"\n            )\n            raise ValueError(msg.format(type(values).__name__))\n        if values.ndim != 1:\n            raise ValueError(\"Only 1-dimensional input arrays are supported.\")\n\n        if values.dtype == \"i8\":\n            # for compat with datetime/timedelta/period shared methods,\n            #  we can sometimes get here with int64 values.  These represent\n            #  nanosecond UTC (or tz-naive) unix timestamps\n            values = values.view(_NS_DTYPE)\n\n        if values.dtype != _NS_DTYPE:\n            msg = (\n                \"The dtype of 'values' is incorrect. Must be 'datetime64[ns]'.\"\n                \" Got {} instead.\"\n            )\n            raise ValueError(msg.format(values.dtype))\n\n        dtype = _validate_dt64_dtype(dtype)\n\n        if freq == \"infer\":\n            msg = (\n                \"Frequency inference not allowed in DatetimeArray.__init__. \"\n                \"Use 'pd.array()' instead.\"\n            )\n            raise ValueError(msg)\n\n        if copy:\n            values = values.copy()\n        if freq:\n            freq = to_offset(freq)\n        if getattr(dtype, \"tz\", None):\n            # https://github.com/pandas-dev/pandas/issues/18595\n            # Ensure that we have a standard timezone for pytz objects.\n            # Without this, things like adding an array of timedeltas and\n            # a  tz-aware Timestamp (with a tz specific to its datetime) will\n            # be incorrect(ish?) for the array as a whole\n            dtype = DatetimeTZDtype(tz=timezones.tz_standardize(dtype.tz))\n\n        self._data = values\n        self._dtype = dtype\n        self._freq = freq\n\n        if inferred_freq is None and freq is not None:\n            type(self)._validate_frequency(self, freq)",
        "begin_line": 333,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#409",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype == \"i8\":\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 409,
        "end_line": 418,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016986580601324953,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#421",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n        int_as_wall_time=False,\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n            int_as_wall_time=int_as_wall_time,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 421,
        "end_line": 461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#464",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n            # TODO: consider re-implementing _cached_range; GH#17914\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 464,
        "end_line": 568,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq#593",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._maybe_clear_freq(self)",
        "snippet": "    def _maybe_clear_freq(self):\n        self._freq = None",
        "begin_line": 593,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018487705675725643,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#600",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 600,
        "end_line": 601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001699235344095157,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#604",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 604,
        "end_line": 623,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016482610845557937,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#626",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 626,
        "end_line": 636,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016482610845557937,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo#647",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tzinfo(self)",
        "snippet": "    def tzinfo(self):\n        \"\"\"\n        Alias for tz attribute\n        \"\"\"\n        return self.tz",
        "begin_line": 647,
        "end_line": 651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._timezone#654",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._timezone(self)",
        "snippet": "    def _timezone(self):\n        \"\"\"\n        Comparable timezone both for pytz / dateutil\n        \"\"\"\n        return timezones.get_timezone(self.tzinfo)",
        "begin_line": 654,
        "end_line": 658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__array__#674",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        if dtype is None and self.tz:\n            # The default for tz-aware is object, to preserve tz info\n            dtype = object\n\n        return super().__array__(dtype=dtype)",
        "begin_line": 674,
        "end_line": 679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.__iter__#681",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator over the boxed values\n\n        Yields\n        ------\n        tstamp : Timestamp\n        \"\"\"\n\n        # convert in chunks of 10k for efficiency\n        data = self.asi8\n        length = len(self)\n        chunksize = 10000\n        chunks = int(length / chunksize) + 1\n        for i in range(chunks):\n            start_i = i * chunksize\n            end_i = min((i + 1) * chunksize, length)\n            converted = tslib.ints_to_pydatetime(\n                data[start_i:end_i], tz=self.tz, freq=self.freq, box=\"timestamp\"\n            )\n            for v in converted:\n                yield v",
        "begin_line": 681,
        "end_line": 702,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#704",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 704,
        "end_line": 729,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz#765",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._has_same_tz(self, other)",
        "snippet": "    def _has_same_tz(self, other):\n        zzone = self._timezone\n\n        # vzone shouldn't be None if value is non-datetime like\n        if isinstance(other, np.datetime64):\n            # convert to Timestamp as np.datetime64 doesn't have tz attr\n            other = Timestamp(other)\n        vzone = timezones.get_timezone(getattr(other, \"tzinfo\", \"__no_tz__\"))\n        return zzone == vzone",
        "begin_line": 765,
        "end_line": 773,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike#797",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetime_arraylike(self, other)",
        "snippet": "    def _sub_datetime_arraylike(self, other):\n        \"\"\"subtract DatetimeArray/Index or ndarray[datetime64]\"\"\"\n        if len(self) != len(other):\n            raise ValueError(\"cannot add indices of unequal length\")\n\n        if isinstance(other, np.ndarray):\n            assert is_datetime64_dtype(other)\n            other = type(self)(other)\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"{cls} subtraction must have the same \"\n                \"timezones or no timezones\".format(cls=type(self).__name__)\n            )\n\n        self_i8 = self.asi8\n        other_i8 = other.asi8\n        arr_mask = self._isnan | other._isnan\n        new_values = checked_add_with_arr(self_i8, -other_i8, arr_mask=arr_mask)\n        if self._hasnans or other._hasnans:\n            new_values[arr_mask] = iNaT\n        return new_values.view(\"timedelta64[ns]\")",
        "begin_line": 797,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar#841",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._sub_datetimelike_scalar(self, other)",
        "snippet": "    def _sub_datetimelike_scalar(self, other):\n        # subtract a datetime from myself, yielding a ndarray[timedelta64[ns]]\n        assert isinstance(other, (datetime, np.datetime64))\n        assert other is not NaT\n        other = Timestamp(other)\n        if other is NaT:\n            return self - NaT\n\n        if not self._has_same_tz(other):\n            # require tz compat\n            raise TypeError(\n                \"Timestamp subtraction must have the same timezones or no timezones\"\n            )\n\n        i8 = self.asi8\n        result = checked_add_with_arr(i8, -other.value, arr_mask=self._isnan)\n        result = self._maybe_mask_results(result)\n        return result.view(\"timedelta64[ns]\")",
        "begin_line": 841,
        "end_line": 858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._add_delta#860",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._add_delta(self, delta)",
        "snippet": "    def _add_delta(self, delta):\n        \"\"\"\n        Add a timedelta-like, Tick, or TimedeltaIndex-like object\n        to self, yielding a new DatetimeArray\n\n        Parameters\n        ----------\n        other : {timedelta, np.timedelta64, Tick,\n                 TimedeltaIndex, ndarray[timedelta64]}\n\n        Returns\n        -------\n        result : DatetimeArray\n        \"\"\"\n        new_values = super()._add_delta(delta)\n        return type(self)._from_sequence(new_values, tz=self.tz, freq=\"infer\")",
        "begin_line": 860,
        "end_line": 875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#889",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 889,
        "end_line": 963,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize#965",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_localize(self, tz, ambiguous='raise', nonexistent='raise', errors=None)",
        "snippet": "    def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\", errors=None):\n        \"\"\"\n        Localize tz-naive Datetime Array/Index to tz-aware\n        Datetime Array/Index.\n\n        This method takes a time zone (tz) naive Datetime Array/Index object\n        and makes this time zone aware. It does not move the time to another\n        time zone.\n        Time zone localization helps to switch from time zone aware to time\n        zone unaware objects.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone to convert timestamps to. Passing ``None`` will\n            remove the time zone information preserving local time.\n        ambiguous : 'infer', 'NaT', bool array, default 'raise'\n            When clocks moved backward due to DST, ambiguous times may arise.\n            For example in Central European Time (UTC+01), when going from\n            03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n            00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n            `ambiguous` parameter dictates how ambiguous times should be\n            handled.\n\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False signifies a\n              non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times.\n\n        nonexistent : 'shift_forward', 'shift_backward, 'NaT', timedelta, \\\ndefault 'raise'\n            A nonexistent time does not exist in a particular timezone\n            where clocks moved forward due to DST.\n\n            - 'shift_forward' will shift the nonexistent time forward to the\n              closest existing time\n            - 'shift_backward' will shift the nonexistent time backward to the\n              closest existing time\n            - 'NaT' will return NaT where there are nonexistent times\n            - timedelta objects will shift nonexistent times by the timedelta\n            - 'raise' will raise an NonExistentTimeError if there are\n              nonexistent times.\n\n            .. versionadded:: 0.24.0\n\n        errors : {'raise', 'coerce'}, default None\n            The method to handle errors:\n\n            - 'raise' will raise a NonExistentTimeError if a timestamp is not\n              valid in the specified time zone (e.g. due to a transition from\n              or to DST time). Use ``nonexistent='raise'`` instead.\n            - 'coerce' will return NaT if the timestamp can not be converted\n              to the specified time zone. Use ``nonexistent='NaT'`` instead.\n\n            .. deprecated:: 0.24.0\n\n        Returns\n        -------\n        Same type as self\n            Array/Index converted to the specified time zone.\n\n        Raises\n        ------\n        TypeError\n            If the Datetime Array/Index is tz-aware and tz is not None.\n\n        See Also\n        --------\n        DatetimeIndex.tz_convert : Convert tz-aware DatetimeIndex from\n            one time zone to another.\n\n        Examples\n        --------\n        >>> tz_naive = pd.date_range('2018-03-01 09:00', periods=3)\n        >>> tz_naive\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Localize DatetimeIndex in US/Eastern time zone:\n\n        >>> tz_aware = tz_naive.tz_localize(tz='US/Eastern')\n        >>> tz_aware\n        DatetimeIndex(['2018-03-01 09:00:00-05:00',\n                       '2018-03-02 09:00:00-05:00',\n                       '2018-03-03 09:00:00-05:00'],\n                      dtype='datetime64[ns, US/Eastern]', freq='D')\n\n        With the ``tz=None``, we can remove the time zone information\n        while keeping the local time (not converted to UTC):\n\n        >>> tz_aware.tz_localize(None)\n        DatetimeIndex(['2018-03-01 09:00:00', '2018-03-02 09:00:00',\n                       '2018-03-03 09:00:00'],\n                      dtype='datetime64[ns]', freq='D')\n\n        Be careful with DST changes. When there is sequential data, pandas can\n        infer the DST time:\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 02:00:00',\n        ...                               '2018-10-28 02:30:00',\n        ...                               '2018-10-28 03:00:00',\n        ...                               '2018-10-28 03:30:00']))\n        >>> s.dt.tz_localize('CET', ambiguous='infer')\n        0   2018-10-28 01:30:00+02:00\n        1   2018-10-28 02:00:00+02:00\n        2   2018-10-28 02:30:00+02:00\n        3   2018-10-28 02:00:00+01:00\n        4   2018-10-28 02:30:00+01:00\n        5   2018-10-28 03:00:00+01:00\n        6   2018-10-28 03:30:00+01:00\n        dtype: datetime64[ns, CET]\n\n        In some cases, inferring the DST is impossible. In such cases, you can\n        pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n        >>> s = pd.to_datetime(pd.Series(['2018-10-28 01:20:00',\n        ...                               '2018-10-28 02:36:00',\n        ...                               '2018-10-28 03:46:00']))\n        >>> s.dt.tz_localize('CET', ambiguous=np.array([True, True, False]))\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, Europe/Warsaw]\n\n        If the DST transition causes nonexistent times, you can shift these\n        dates forward or backwards with a timedelta object or `'shift_forward'`\n        or `'shift_backwards'`.\n\n        >>> s = pd.to_datetime(pd.Series(['2015-03-29 02:30:00',\n        ...                               '2015-03-29 03:30:00']))\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n        0   2015-03-29 03:00:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n        0   2015-03-29 01:59:59.999999999+01:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        >>> s.dt.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n        0   2015-03-29 03:30:00+02:00\n        1   2015-03-29 03:30:00+02:00\n        dtype: datetime64[ns, 'Europe/Warsaw']\n        \"\"\"\n        if errors is not None:\n            warnings.warn(\n                \"The errors argument is deprecated and will be \"\n                \"removed in a future release. Use \"\n                \"nonexistent='NaT' or nonexistent='raise' \"\n                \"instead.\",\n                FutureWarning,\n            )\n            if errors == \"coerce\":\n                nonexistent = \"NaT\"\n            elif errors == \"raise\":\n                nonexistent = \"raise\"\n            else:\n                raise ValueError(\n                    \"The errors argument must be either 'coerce' or 'raise'.\"\n                )\n\n        nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n        if nonexistent not in nonexistent_options and not isinstance(\n            nonexistent, timedelta\n        ):\n            raise ValueError(\n                \"The nonexistent argument must be one of 'raise',\"\n                \" 'NaT', 'shift_forward', 'shift_backward' or\"\n                \" a timedelta object\"\n            )\n\n        if self.tz is not None:\n            if tz is None:\n                new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n            else:\n                raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n        else:\n            tz = timezones.maybe_get_tz(tz)\n            # Convert to UTC\n\n            new_dates = conversion.tz_localize_to_utc(\n                self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n            )\n        new_dates = new_dates.view(_NS_DTYPE)\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(new_dates, dtype=dtype, freq=self.freq)",
        "begin_line": 965,
        "end_line": 1156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.to_period#1220",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.to_period(self, freq=None)",
        "snippet": "    def to_period(self, freq=None):\n        \"\"\"\n        Cast to PeriodArray/Index at a particular frequency.\n\n        Converts DatetimeArray/Index to PeriodArray/Index.\n\n        Parameters\n        ----------\n        freq : str or Offset, optional\n            One of pandas' :ref:`offset strings <timeseries.offset_aliases>`\n            or an Offset object. Will be inferred by default.\n\n        Returns\n        -------\n        PeriodArray/Index\n\n        Raises\n        ------\n        ValueError\n            When converting a DatetimeArray/Index with non-regular values,\n            so that a frequency cannot be inferred.\n\n        See Also\n        --------\n        PeriodIndex: Immutable ndarray holding ordinal values.\n        DatetimeIndex.to_pydatetime: Return DatetimeIndex as object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"y\": [1, 2, 3]},\n        ...                   index=pd.to_datetime([\"2000-03-31 00:00:00\",\n        ...                                         \"2000-05-31 00:00:00\",\n        ...                                         \"2000-08-31 00:00:00\"]))\n        >>> df.index.to_period(\"M\")\n        PeriodIndex(['2000-03', '2000-05', '2000-08'],\n                    dtype='period[M]', freq='M')\n\n        Infer the daily frequency\n\n        >>> idx = pd.date_range(\"2017-01-01\", periods=2)\n        >>> idx.to_period()\n        PeriodIndex(['2017-01-01', '2017-01-02'],\n                    dtype='period[D]', freq='D')\n        \"\"\"\n        from pandas.core.arrays import PeriodArray\n\n        if self.tz is not None:\n            warnings.warn(\n                \"Converting to PeriodArray/Index representation \"\n                \"will drop timezone information.\",\n                UserWarning,\n            )\n\n        if freq is None:\n            freq = self.freqstr or self.inferred_freq\n\n            if freq is None:\n                raise ValueError(\n                    \"You must pass a freq argument as current index has none.\"\n                )\n\n            freq = get_period_alias(freq)\n\n        return PeriodArray._from_datetime64(self._data, freq, tz=self.tz)",
        "begin_line": 1220,
        "end_line": 1283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1855",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise', int_as_wall_time=False)",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n    int_as_wall_time=False,\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n    int_as_wall_time : bool, default False\n        Whether to treat ints as wall time in specified timezone, or as\n        nanosecond-precision UNIX epoch (wall time in UTC).\n        This is used in DatetimeIndex.__init__ to deprecate the wall-time\n        behaviour.\n\n        ..versionadded:: 0.24.0\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n            # When a sequence of timestamp objects is passed, we always\n            # want to treat the (now i8-valued) data as UTC timestamps,\n            # not wall times.\n            int_as_wall_time = False\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        if int_as_wall_time and tz is not None and not timezones.is_utc(tz):\n            warnings.warn(_i8_message, FutureWarning, stacklevel=4)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1855,
        "end_line": 1998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#2001",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 2001,
        "end_line": 2081,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001825150574922431,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#2084",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if is_float_dtype(data):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data):\n        warnings.warn(\n            \"Passing timedelta64-dtype data is deprecated, will \"\n            \"raise a TypeError in a future version\",\n            FutureWarning,\n            stacklevel=5,\n        )\n        data = data.view(_NS_DTYPE)\n\n    elif is_period_dtype(data):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid.  Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_type(data) and not is_datetime64tz_dtype(data):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 2084,
        "end_line": 2140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#2147",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            \"data is already tz-aware {inferred_tz}, unable to \"\n            \"set specified tz: {tz}\".format(inferred_tz=inferred_tz, tz=tz)\n        )\n    return tz",
        "begin_line": 2147,
        "end_line": 2174,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#2177",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, warn\n            dtype = _NS_DTYPE\n            msg = textwrap.dedent(\n                \"\"\"\\\n                Passing in 'datetime64' dtype with no precision is deprecated\n                and will raise in a future version. Please pass in\n                'datetime64[ns]' instead.\"\"\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                \"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\".format(dtype=dtype)\n            )\n    return dtype",
        "begin_line": 2177,
        "end_line": 2219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016812373907195696,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2222",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2222,
        "end_line": 2266,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2269",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        )\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2269,
        "end_line": 2307,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00017670966601873123,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2310",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2310,
        "end_line": 2327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_localize_point#2330",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent)",
        "snippet": "def _maybe_localize_point(ts, is_none, is_not_none, freq, tz, ambiguous, nonexistent):\n    \"\"\"\n    Localize a start or end Timestamp to the timezone of the corresponding\n    start or end Timestamp\n\n    Parameters\n    ----------\n    ts : start or end Timestamp to potentially localize\n    is_none : argument that should be None\n    is_not_none : argument that should not be None\n    freq : Tick, DateOffset, or None\n    tz : str, timezone object or None\n    ambiguous: str, localization behavior for ambiguous times\n    nonexistent: str, localization behavior for nonexistent times\n\n    Returns\n    -------\n    ts : Timestamp\n    \"\"\"\n    # Make sure start and end are timezone localized if:\n    # 1) freq = a Timedelta-like frequency (Tick)\n    # 2) freq = None i.e. generating a linspaced range\n    if is_none is None and is_not_none is not None:\n        # Note: We can't ambiguous='infer' a singular ambiguous time; however,\n        # we have historically defaulted ambiguous=False\n        ambiguous = ambiguous if ambiguous != \"infer\" else False\n        localize_args = {\"ambiguous\": ambiguous, \"nonexistent\": nonexistent, \"tz\": None}\n        if isinstance(freq, Tick) or freq is None:\n            localize_args[\"tz\"] = tz\n        ts = ts.tz_localize(**localize_args)\n    return ts",
        "begin_line": 2330,
        "end_line": 2360,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018556318426424197,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#194",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                msg = DIFFERENT_FREQ.format(\n                    cls=type(self).__name__,\n                    own_freq=values.freq.freqstr,\n                    other_freq=freq.freqstr,\n                )\n                raise IncompatibleFrequency(msg)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 194,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._simple_new#225",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._simple_new(cls, values, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, freq=None, **kwargs):\n        # alias for PeriodArray.__init__\n        return cls(values, freq=freq, **kwargs)",
        "begin_line": 225,
        "end_line": 227,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#230",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls, scalars: Sequence[Optional[Period]], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        scalars: Sequence[Optional[Period]],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> ABCPeriodArray:\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 230,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_datetime64#260",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_datetime64(cls, data, freq, tz=None)",
        "snippet": "    def _from_datetime64(cls, data, freq, tz=None):\n        \"\"\"\n        Construct a PeriodArray from a datetime64 array\n\n        Parameters\n        ----------\n        data : ndarray[datetime64[ns], datetime64[ns, tz]]\n        freq : str or Tick\n        tz : tzinfo, optional\n\n        Returns\n        -------\n        PeriodArray[freq]\n        \"\"\"\n        data, freq = dt64arr_to_periodarr(data, freq, tz)\n        return cls(data, freq=freq)",
        "begin_line": 260,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._generate_range#278",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._generate_range(cls, start, end, periods, freq, fields)",
        "snippet": "    def _generate_range(cls, start, end, periods, freq, fields):\n        periods = dtl.validate_periods(periods)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        field_count = len(fields)\n        if start is not None or end is not None:\n            if field_count > 0:\n                raise ValueError(\n                    \"Can either instantiate from fields or endpoints, but not both\"\n                )\n            subarr, freq = _get_ordinal_range(start, end, periods, freq)\n        elif field_count > 0:\n            subarr, freq = _range_from_fields(freq=freq, **fields)\n        else:\n            raise ValueError(\"Not enough parameters to construct Period range\")\n\n        return subarr, freq",
        "begin_line": 278,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#326",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 326,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#331",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#833",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if isinstance(data, (ABCPeriodIndex, ABCSeries, PeriodArray)):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    if freq:\n        # typed Optional here because the else block below assigns None\n        dtype = PeriodDtype(freq)  # type: Optional[PeriodDtype]\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 833,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#915",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 915,
        "end_line": 945,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period.dt64arr_to_periodarr#948",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.dt64arr_to_periodarr(data, freq, tz=None)",
        "snippet": "def dt64arr_to_periodarr(data, freq, tz=None):\n    \"\"\"\n    Convert an datetime-like array to values Period ordinals.\n\n    Parameters\n    ----------\n    data : Union[Series[datetime64[ns]], DatetimeIndex, ndarray[datetime64ns]]\n    freq : Optional[Union[str, Tick]]\n        Must match the `freq` on the `data` if `data` is a DatetimeIndex\n        or Series.\n    tz : Optional[tzinfo]\n\n    Returns\n    -------\n    ordinals : ndarray[int]\n    freq : Tick\n        The frequency extracted from the Series or DatetimeIndex if that's\n        used.\n\n    \"\"\"\n    if data.dtype != np.dtype(\"M8[ns]\"):\n        raise ValueError(\"Wrong dtype: {dtype}\".format(dtype=data.dtype))\n\n    if freq is None:\n        if isinstance(data, ABCIndexClass):\n            data, freq = data._values, data.freq\n        elif isinstance(data, ABCSeries):\n            data, freq = data._values, data.dt.freq\n\n    freq = Period._maybe_convert_freq(freq)\n\n    if isinstance(data, (ABCIndexClass, ABCSeries)):\n        data = data._values\n\n    base, mult = libfrequencies.get_freq_code(freq)\n    return libperiod.dt64arr_to_periodarr(data.view(\"i8\"), base, tz), freq",
        "begin_line": 948,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.period._get_ordinal_range#986",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period._get_ordinal_range(start, end, periods, freq, mult=1)",
        "snippet": "def _get_ordinal_range(start, end, periods, freq, mult=1):\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n\n    if freq is not None:\n        _, mult = libfrequencies.get_freq_code(freq)\n\n    if start is not None:\n        start = Period(start, freq)\n    if end is not None:\n        end = Period(end, freq)\n\n    is_start_per = isinstance(start, Period)\n    is_end_per = isinstance(end, Period)\n\n    if is_start_per and is_end_per and start.freq != end.freq:\n        raise ValueError(\"start and end must have same freq\")\n    if start is NaT or end is NaT:\n        raise ValueError(\"start and end must not be NaT\")\n\n    if freq is None:\n        if is_start_per:\n            freq = start.freq\n        elif is_end_per:\n            freq = end.freq\n        else:  # pragma: no cover\n            raise ValueError(\"Could not infer freq from start/end\")\n\n    if periods is not None:\n        periods = periods * mult\n        if start is None:\n            data = np.arange(\n                end.ordinal - periods + mult, end.ordinal + 1, mult, dtype=np.int64\n            )\n        else:\n            data = np.arange(\n                start.ordinal, start.ordinal + periods, mult, dtype=np.int64\n            )\n    else:\n        data = np.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)\n\n    return data, freq",
        "begin_line": 986,
        "end_line": 1030,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#72",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return self.__class__(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 72,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#82",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other)",
        "snippet": "    def __eq__(self, other):\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenNDArray._shallow_copy#143",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenNDArray",
        "signature": "pandas.core.indexes.frozen.FrozenNDArray._shallow_copy(self)",
        "snippet": "    def _shallow_copy(self):\n        return self.view()",
        "begin_line": 143,
        "end_line": 144,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.frozen._ensure_frozen#185",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen",
        "signature": "pandas.core.indexes.frozen._ensure_frozen(array_like, categories, copy=False)",
        "snippet": "def _ensure_frozen(array_like, categories, copy=False):\n    array_like = coerce_indexer_dtype(array_like, categories)\n    array_like = array_like.view(FrozenNDArray)\n    if copy:\n        array_like = array_like.copy()\n    return array_like",
        "begin_line": 185,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.sorting.get_group_index_sorter#328",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.get_group_index_sorter(group_index, ngroups)",
        "snippet": "def get_group_index_sorter(group_index, ngroups):\n    \"\"\"\n    algos.groupsort_indexer implements `counting sort` and it is at least\n    O(ngroups), where\n        ngroups = prod(shape)\n        shape = map(len, keys)\n    that is, linear in the number of combinations (cartesian product) of unique\n    values of groupby keys. This can be huge when doing multi-key groupby.\n    np.argsort(kind='mergesort') is O(count x log(count)) where count is the\n    length of the data-frame;\n    Both algorithms are `stable` sort and that is necessary for correctness of\n    groupby operations. e.g. consider:\n        df.groupby(key)[col].transform('first')\n    \"\"\"\n    count = len(group_index)\n    alpha = 0.0  # taking complexities literally; there may be\n    beta = 1.0  # some room for fine-tuning these parameters\n    do_groupsort = count > 0 and ((alpha + beta * ngroups) < (count * np.log(count)))\n    if do_groupsort:\n        sorter, _ = algos.groupsort_indexer(ensure_int64(group_index), ngroups)\n        return ensure_platform_int(sorter)\n    else:\n        return group_index.argsort(kind=\"mergesort\")",
        "begin_line": 328,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.sorting.safe_sort#394",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.safe_sort(values, labels=None, na_sentinel=-1, assume_unique=False, verify=True)",
        "snippet": "def safe_sort(values, labels=None, na_sentinel=-1, assume_unique=False, verify=True):\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``labels``.\n    ``values`` should be unique if ``labels`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``labels`` is not None.\n    labels : list_like\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``labels`` to mark \"not found\".\n        Ignored when ``labels`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``labels`` is None.\n    verify : bool, default True\n        Check if labels are out of bound for the values and put out of bound\n        labels equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound labels. Ignored when ``labels`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_labels : ndarray\n        Reordered ``labels``; returned when ``labels`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``labels`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``labels`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # labels:\n\n    if labels is None:\n        return ordered\n\n    if not is_list_like(labels):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to be\"\n            \"passed to safe_sort as labels\"\n        )\n    labels = ensure_platform_int(np.asarray(labels))\n\n    from pandas import Index\n\n    if not assume_unique and not Index(values).is_unique:\n        raise ValueError(\"values should be unique if labels is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = algorithms._get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_labels = algorithms.take_1d(order2, labels, fill_value=-1)\n        if verify:\n            mask = (labels < -len(values)) | (labels >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_labels = reverse_indexer.take(labels, mode=\"wrap\")\n\n        mask = labels == na_sentinel\n        if verify:\n            mask = mask | (labels < -len(values)) | (labels >= len(values))\n\n    if mask is not None:\n        np.putmask(new_labels, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_labels)",
        "begin_line": 394,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.sorting.sort_mixed#446",
        "src_path": "pandas/core/sorting.py",
        "class_name": "pandas.core.sorting",
        "signature": "pandas.core.sorting.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 446,
        "end_line": 451,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#389",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 389,
        "end_line": 390,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#392",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 392,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#441",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 441,
        "end_line": 446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.__init__#79",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.__init__(self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None)",
        "snippet": "    def __init__(\n        self, axis, groupings, sort=True, group_keys=True, mutated=False, indexer=None\n    ):\n        self._filter_empty_groups = self.compressed = len(groupings) != 1\n        self.axis = axis\n        self.groupings = groupings\n        self.sort = sort\n        self.group_keys = group_keys\n        self.mutated = mutated\n        self.indexer = indexer",
        "begin_line": 79,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.nkeys#98",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.nkeys(self)",
        "snippet": "    def nkeys(self):\n        return len(self.groupings)",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.names#220",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.names(self)",
        "snippet": "    def names(self):\n        return [ping.name for ping in self.groupings]",
        "begin_line": 220,
        "end_line": 221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021915406530791147,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.group_info#252",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.group_info(self)",
        "snippet": "    def group_info(self):\n        comp_ids, obs_group_ids = self._get_compressed_labels()\n\n        ngroups = len(obs_group_ids)\n        comp_ids = ensure_int64(comp_ids)\n        return comp_ids, obs_group_ids, ngroups",
        "begin_line": 252,
        "end_line": 257,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_compressed_labels#268",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_compressed_labels(self)",
        "snippet": "    def _get_compressed_labels(self):\n        all_labels = [ping.labels for ping in self.groupings]\n        if len(all_labels) > 1:\n            group_index = get_group_index(all_labels, self.shape, sort=True, xnull=True)\n            return compress_group_index(group_index, sort=self.sort)\n\n        ping = self.groupings[0]\n        return ping.labels, np.arange(len(ping.group_index))",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.ngroups#278",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.ngroups(self)",
        "snippet": "    def ngroups(self):\n        return len(self.result_index)",
        "begin_line": 278,
        "end_line": 279,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.result_index#288",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.result_index(self)",
        "snippet": "    def result_index(self):\n        if not self.compressed and len(self.groupings) == 1:\n            return self.groupings[0].result_index.rename(self.names[0])\n\n        codes = self.recons_labels\n        levels = [ping.result_index for ping in self.groupings]\n        result = MultiIndex(\n            levels=levels, codes=codes, verify_integrity=False, names=self.names\n        )\n        return result",
        "begin_line": 288,
        "end_line": 297,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._get_cython_function#348",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._get_cython_function(self, kind, how, values, is_numeric)",
        "snippet": "    def _get_cython_function(self, kind, how, values, is_numeric):\n\n        dtype_str = values.dtype.name\n\n        def get_func(fname):\n            # see if there is a fused-type version of function\n            # only valid for numeric\n            f = getattr(libgroupby, fname, None)\n            if f is not None and is_numeric:\n                return f\n\n            # otherwise find dtype-specific version, falling back to object\n            for dt in [dtype_str, \"object\"]:\n                f2 = getattr(\n                    libgroupby,\n                    \"{fname}_{dtype_str}\".format(fname=fname, dtype_str=dt),\n                    None,\n                )\n                if f2 is not None:\n                    return f2\n\n            if hasattr(f, \"__signatures__\"):\n                # inspect what fused types are implemented\n                if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                    # return None so we get a NotImplementedError below\n                    #  instead of a TypeError at runtime\n                    return None\n            return f\n\n        ftype = self._cython_functions[kind][how]\n\n        func = get_func(ftype)\n\n        if func is None:\n            raise NotImplementedError(\n                \"function is not implemented for this dtype: \"\n                \"[how->{how},dtype->{dtype_str}]\".format(how=how, dtype_str=dtype_str)\n            )\n\n        return func",
        "begin_line": 348,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.get_func#352",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.get_func(fname)",
        "snippet": "        def get_func(fname):\n            # see if there is a fused-type version of function\n            # only valid for numeric\n            f = getattr(libgroupby, fname, None)\n            if f is not None and is_numeric:\n                return f\n\n            # otherwise find dtype-specific version, falling back to object\n            for dt in [dtype_str, \"object\"]:\n                f2 = getattr(\n                    libgroupby,\n                    \"{fname}_{dtype_str}\".format(fname=fname, dtype_str=dt),\n                    None,\n                )\n                if f2 is not None:\n                    return f2\n\n            if hasattr(f, \"__signatures__\"):\n                # inspect what fused types are implemented\n                if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n                    # return None so we get a NotImplementedError below\n                    #  instead of a TypeError at runtime\n                    return None\n            return f",
        "begin_line": 352,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._cython_operation#389",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs)",
        "snippet": "    def _cython_operation(self, kind, values, how, axis, min_count=-1, **kwargs):\n        assert kind in [\"transform\", \"aggregate\"]\n        orig_values = values\n\n        # can we do this operation with our cython functions\n        # if not raise NotImplementedError\n\n        # we raise NotImplemented if this is an invalid operation\n        # entirely, e.g. adding datetimes\n\n        # categoricals are only 1d, so we\n        # are not setup for dim transforming\n        if is_categorical_dtype(values) or is_sparse(values):\n            raise NotImplementedError(\"{} dtype not supported\".format(values.dtype))\n        elif is_datetime64_any_dtype(values):\n            if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n                raise NotImplementedError(\n                    \"datetime64 type does not support {} operations\".format(how)\n                )\n        elif is_timedelta64_dtype(values):\n            if how in [\"prod\", \"cumprod\"]:\n                raise NotImplementedError(\n                    \"timedelta64 type does not support {} operations\".format(how)\n                )\n\n        if is_datetime64tz_dtype(values.dtype):\n            # Cast to naive; we'll cast back at the end of the function\n            # TODO: possible need to reshape?  kludge can be avoided when\n            #  2D EA is allowed.\n            values = values.view(\"M8[ns]\")\n\n        is_datetimelike = needs_i8_conversion(values.dtype)\n        is_numeric = is_numeric_dtype(values.dtype)\n\n        if is_datetimelike:\n            values = values.view(\"int64\")\n            is_numeric = True\n        elif is_bool_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif is_integer_dtype(values):\n            # we use iNaT for the missing value on ints\n            # so pre-convert to guard this condition\n            if (values == iNaT).any():\n                values = ensure_float64(values)\n            else:\n                values = ensure_int_or_float(values)\n        elif is_numeric and not is_complex_dtype(values):\n            values = ensure_float64(values)\n        else:\n            values = values.astype(object)\n\n        arity = self._cython_arity.get(how, 1)\n\n        vdim = values.ndim\n        swapped = False\n        if vdim == 1:\n            values = values[:, None]\n            out_shape = (self.ngroups, arity)\n        else:\n            if axis > 0:\n                swapped = True\n                assert axis == 1, axis\n                values = values.T\n            if arity > 1:\n                raise NotImplementedError(\n                    \"arity of more than 1 is not supported for the 'how' argument\"\n                )\n            out_shape = (self.ngroups,) + values.shape[1:]\n\n        try:\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        except NotImplementedError:\n            if is_numeric:\n                try:\n                    values = ensure_float64(values)\n                except TypeError:\n                    if lib.infer_dtype(values, skipna=False) == \"complex\":\n                        values = values.astype(complex)\n                    else:\n                        raise\n                func = self._get_cython_function(kind, how, values, is_numeric)\n            else:\n                raise\n\n        if how == \"rank\":\n            out_dtype = \"float\"\n        else:\n            if is_numeric:\n                out_dtype = \"{kind}{itemsize}\".format(\n                    kind=values.dtype.kind, itemsize=values.dtype.itemsize\n                )\n            else:\n                out_dtype = \"object\"\n\n        labels, _, _ = self.group_info\n\n        if kind == \"aggregate\":\n            result = _maybe_fill(\n                np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n            )\n            counts = np.zeros(self.ngroups, dtype=np.int64)\n            result = self._aggregate(\n                result, counts, values, labels, func, is_datetimelike, min_count\n            )\n        elif kind == \"transform\":\n            result = _maybe_fill(\n                np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n            )\n\n            # TODO: min_count\n            result = self._transform(\n                result, values, labels, func, is_datetimelike, **kwargs\n            )\n\n        if is_integer_dtype(result) and not is_datetimelike:\n            mask = result == iNaT\n            if mask.any():\n                result = result.astype(\"float64\")\n                result[mask] = np.nan\n\n        if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n            assert result.ndim != 2\n            result = result[counts > 0]\n\n        if vdim == 1 and arity == 1:\n            result = result[:, 0]\n\n        if how in self._name_functions:\n            names = self._name_functions[how]()\n        else:\n            names = None\n\n        if swapped:\n            result = result.swapaxes(0, axis)\n\n        if is_datetime64tz_dtype(orig_values.dtype):\n            result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n        elif is_datetimelike and kind == \"aggregate\":\n            result = result.astype(orig_values.dtype)\n\n        return result, names",
        "begin_line": 389,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.aggregate#531",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.aggregate(self, values, how, axis=0, min_count=-1)",
        "snippet": "    def aggregate(self, values, how, axis=0, min_count=-1):\n        return self._cython_operation(\n            \"aggregate\", values, how, axis, min_count=min_count\n        )",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate#539",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike, min_count=-1)",
        "snippet": "    def _aggregate(\n        self, result, counts, values, comp_ids, agg_func, is_datetimelike, min_count=-1\n    ):\n        if values.ndim > 2:\n            # punting for now\n            raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n        elif agg_func is libgroupby.group_nth:\n            # different signature from the others\n            # TODO: should we be using min_count instead of hard-coding it?\n            agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n        else:\n            agg_func(result, counts, values, comp_ids, min_count)\n\n        return result",
        "begin_line": 539,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper.agg_series#567",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper.agg_series(self, obj, func)",
        "snippet": "    def agg_series(self, obj, func):\n        if is_extension_array_dtype(obj.dtype) and obj.dtype.kind != \"M\":\n            # _aggregate_series_fast would raise TypeError when\n            #  calling libreduction.Slider\n            # TODO: can we get a performant workaround for EAs backed by ndarray?\n            # TODO: is the datetime64tz case supposed to go through here?\n            return self._aggregate_series_pure_python(obj, func)\n\n        elif obj.index._has_complex_internals:\n            # MultiIndex; Pre-empt TypeError in _aggregate_series_fast\n            return self._aggregate_series_pure_python(obj, func)\n\n        try:\n            return self._aggregate_series_fast(obj, func)\n        except ValueError as err:\n            if \"No result.\" in str(err):\n                # raised in libreduction\n                pass\n            elif \"Function does not reduce\" in str(err):\n                # raised in libreduction\n                pass\n            else:\n                raise\n        return self._aggregate_series_pure_python(obj, func)",
        "begin_line": 567,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_pure_python#611",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.BaseGrouper",
        "signature": "pandas.core.groupby.ops.BaseGrouper._aggregate_series_pure_python(self, obj, func)",
        "snippet": "    def _aggregate_series_pure_python(self, obj, func):\n\n        group_index, _, ngroups = self.group_info\n\n        counts = np.zeros(ngroups, dtype=int)\n        result = None\n\n        splitter = get_splitter(obj, group_index, ngroups, axis=self.axis)\n\n        for label, group in splitter:\n            res = func(group)\n            if result is None:\n                if isinstance(res, (Series, Index, np.ndarray)):\n                    raise ValueError(\"Function does not reduce\")\n                result = np.empty(ngroups, dtype=\"O\")\n\n            counts[label] = group.shape[0]\n            result[label] = res\n\n        result = lib.maybe_convert_objects(result, try_float=0)\n        # TODO: try_cast back to EA?\n        return result, counts",
        "begin_line": 611,
        "end_line": 632,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__init__#804",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__init__(self, data, labels, ngroups, axis=0)",
        "snippet": "    def __init__(self, data, labels, ngroups, axis=0):\n        self.data = data\n        self.labels = ensure_int64(labels)\n        self.ngroups = ngroups\n\n        self.axis = axis",
        "begin_line": 804,
        "end_line": 809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.slabels#812",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.slabels(self)",
        "snippet": "    def slabels(self):\n        # Sorted labels\n        return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
        "begin_line": 812,
        "end_line": 814,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.sort_idx#817",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.sort_idx(self)",
        "snippet": "    def sort_idx(self):\n        # Counting sort indexer\n        return get_group_index_sorter(self.labels, self.ngroups)",
        "begin_line": 817,
        "end_line": 819,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter.__iter__#821",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter.__iter__(self)",
        "snippet": "    def __iter__(self):\n        sdata = self._get_sorted_data()\n\n        if self.ngroups == 0:\n            # we are inside a generator, rather than raise StopIteration\n            # we merely return signal the end\n            return\n\n        starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n        for i, (start, end) in enumerate(zip(starts, ends)):\n            # Since I'm now compressing the group ids, it's now not \"possible\"\n            # to produce empty slices because such groups would not be observed\n            # in the data\n            # if start >= end:\n            #     raise AssertionError('Start %s must be less than end %s'\n            #                          % (str(start), str(end)))\n            yield i, self._chop(sdata, slice(start, end))",
        "begin_line": 821,
        "end_line": 838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.DataSplitter._get_sorted_data#840",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.DataSplitter",
        "signature": "pandas.core.groupby.ops.DataSplitter._get_sorted_data(self)",
        "snippet": "    def _get_sorted_data(self):\n        return self.data.take(self.sort_idx, axis=self.axis)",
        "begin_line": 840,
        "end_line": 841,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.SeriesSplitter._chop#851",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops.SeriesSplitter",
        "signature": "pandas.core.groupby.ops.SeriesSplitter._chop(self, sdata, slice_obj)",
        "snippet": "    def _chop(self, sdata, slice_obj):\n        return sdata._get_values(slice_obj)",
        "begin_line": 851,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.ops.get_splitter#870",
        "src_path": "pandas/core/groupby/ops.py",
        "class_name": "pandas.core.groupby.ops",
        "signature": "pandas.core.groupby.ops.get_splitter(data, *args, **kwargs)",
        "snippet": "def get_splitter(data, *args, **kwargs):\n    if isinstance(data, Series):\n        klass = SeriesSplitter\n    elif isinstance(data, DataFrame):\n        klass = FrameSplitter\n\n    return klass(data, *args, **kwargs)",
        "begin_line": 870,
        "end_line": 876,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices#145",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._iterate_slices(self)",
        "snippet": "    def _iterate_slices(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n        yield self._selection_name, self._selected_obj",
        "begin_line": 145,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._selection_name#149",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._selection_name(self)",
        "snippet": "    def _selection_name(self):\n        \"\"\"\n        since we are a series, we by definition only have\n        a single name, but may be the result of a selection or\n        the name of our object\n        \"\"\"\n        if self._selection is None:\n            return self.obj.name\n        else:\n            return self._selection",
        "begin_line": 149,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy.aggregate#227",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy.aggregate(self, func=None, *args, **kwargs)",
        "snippet": "    def aggregate(self, func=None, *args, **kwargs):\n        _level = kwargs.pop(\"_level\", None)\n\n        relabeling = func is None\n        columns = None\n        no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n        if relabeling:\n            columns = list(kwargs)\n            if not PY36:\n                # sort for 3.5 and earlier\n                columns = list(sorted(columns))\n\n            func = [kwargs[col] for col in columns]\n            kwargs = {}\n            if not columns:\n                raise TypeError(no_arg_message)\n\n        if isinstance(func, str):\n            return getattr(self, func)(*args, **kwargs)\n\n        if isinstance(func, abc.Iterable):\n            # Catch instances of lists / tuples\n            # but not the class list / tuple itself.\n            func = _maybe_mangle_lambdas(func)\n            ret = self._aggregate_multiple_funcs(func, (_level or 0) + 1)\n            if relabeling:\n                ret.columns = columns\n        else:\n            cyfunc = self._get_cython_func(func)\n            if cyfunc and not args and not kwargs:\n                return getattr(self, cyfunc)()\n\n            if self.grouper.nkeys > 1:\n                return self._python_agg_general(func, *args, **kwargs)\n\n            try:\n                return self._python_agg_general(func, *args, **kwargs)\n            except (AssertionError, TypeError):\n                raise\n            except (ValueError, KeyError, AttributeError, IndexError):\n                # TODO: IndexError can be removed here following GH#29106\n                # TODO: AttributeError is caused by _index_data hijinx in\n                #  libreduction, can be removed after GH#29160\n                # TODO: KeyError is raised in _python_agg_general,\n                #  see see test_groupby.test_basic\n                result = self._aggregate_named(func, *args, **kwargs)\n\n            index = Index(sorted(result), name=self.grouper.names[0])\n            ret = Series(result, index=index)\n\n        if not self.as_index:  # pragma: no cover\n            print(\"Warning, ignoring as_index=True\")\n\n        # _level handled at higher\n        if not _level and isinstance(ret, dict):\n            from pandas import concat\n\n            ret = concat(ret, axis=1)\n        return ret",
        "begin_line": 227,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output#346",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_series_output(self, output, index, names=None)",
        "snippet": "    def _wrap_series_output(self, output, index, names=None):\n        \"\"\" common agg/transform wrapping logic \"\"\"\n        output = output[self._selection_name]\n\n        if names is not None:\n            return DataFrame(output, index=index, columns=names)\n        else:\n            name = self._selection_name\n            if name is None:\n                name = self._selected_obj.name\n            return Series(output, index=index, name=name)",
        "begin_line": 346,
        "end_line": 356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output#358",
        "src_path": "pandas/core/groupby/generic.py",
        "class_name": "pandas.core.groupby.generic.SeriesGroupBy",
        "signature": "pandas.core.groupby.generic.SeriesGroupBy._wrap_aggregated_output(self, output, names=None)",
        "snippet": "    def _wrap_aggregated_output(self, output, names=None):\n        result = self._wrap_series_output(\n            output=output, index=self.grouper.result_index, names=names\n        )\n        return self._reindex_output(result)._convert(datetime=True)",
        "begin_line": 358,
        "end_line": 362,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#332",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype._ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                if len(values) == 0:\n                    sanitize_dtype = \"object\"\n                else:\n                    sanitize_dtype = None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError:\n                codes, categories = factorize(values, sort=False)\n                if dtype._ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    )\n            except ValueError:\n\n                # FIXME\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                )\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype._ordered)\n\n        elif is_categorical_dtype(values):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = _recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 332,
        "end_line": 414,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#417",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 417,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#460",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype._ordered",
        "begin_line": 460,
        "end_line": 464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#467",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 467,
        "end_line": 471,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._constructor#478",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Categorical\"]:\n        return Categorical",
        "begin_line": 478,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.astype#497",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.astype(self, dtype: Dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Coerce this type to another dtype\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = cast(Union[str, CategoricalDtype], dtype)\n\n            # GH 10696/18593\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        if is_extension_array_dtype(dtype):\n            return array(self, dtype=dtype, copy=copy)  # type: ignore # GH 28770\n        if is_integer_dtype(dtype) and self.isna().any():\n            msg = \"Cannot convert float NaN to integer\"\n            raise ValueError(msg)\n        return np.array(self, dtype=dtype, copy=copy)",
        "begin_line": 497,
        "end_line": 523,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_codes#699",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_codes(self)",
        "snippet": "    def _get_codes(self):\n        \"\"\"\n        Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 699,
        "end_line": 710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__array__#1314",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        numpy.array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype.\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            # When we're a Categorical[ExtensionArray], like Interval,\n            # we need to ensure __array__ get's all the way to an\n            # ndarray.\n            ret = np.asarray(ret)\n        return ret",
        "begin_line": 1314,
        "end_line": 1333,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._internal_get_values#1534",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        # if we are a datetime and period index, return Index to keep metadata\n        if is_datetimelike(self.categories):\n            return self.categories.take(self._codes, fill_value=np.nan)\n        elif is_integer_dtype(self.categories) and -1 in self._codes:\n            return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n        return np.array(self)",
        "begin_line": 1534,
        "end_line": 1540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.check_for_ordered#1542",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.check_for_ordered(self, op)",
        "snippet": "    def check_for_ordered(self, op):\n        \"\"\" assert that we are ordered \"\"\"\n        if not self.ordered:\n            raise TypeError(\n                \"Categorical is not ordered for operation {op}\\n\"\n                \"you can use .as_ordered() to change the \"\n                \"Categorical to an ordered one\\n\".format(op=op)\n            )",
        "begin_line": 1542,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__len__#1943",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        The length of this Categorical.\n        \"\"\"\n        return len(self._codes)",
        "begin_line": 1943,
        "end_line": 1947,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._reduce#2190",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._reduce(self, name, axis=0, **kwargs)",
        "snippet": "    def _reduce(self, name, axis=0, **kwargs):\n        func = getattr(self, name, None)\n        if func is None:\n            msg = \"Categorical cannot perform the operation {op}\"\n            raise TypeError(msg.format(op=name))\n        return func(**kwargs)",
        "begin_line": 2190,
        "end_line": 2195,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.min#2197",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.min(self, numeric_only=None, **kwargs)",
        "snippet": "    def min(self, numeric_only=None, **kwargs):\n        \"\"\"\n        The minimum value of the object.\n\n        Only ordered `Categoricals` have a minimum!\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        min : the minimum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered(\"min\")\n        if numeric_only:\n            good = self._codes != -1\n            pointer = self._codes[good].min(**kwargs)\n        else:\n            pointer = self._codes.min(**kwargs)\n        if pointer == -1:\n            return np.nan\n        else:\n            return self.categories[pointer]",
        "begin_line": 2197,
        "end_line": 2221,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.max#2223",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.max(self, numeric_only=None, **kwargs)",
        "snippet": "    def max(self, numeric_only=None, **kwargs):\n        \"\"\"\n        The maximum value of the object.\n\n        Only ordered `Categoricals` have a maximum!\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        max : the maximum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered(\"max\")\n        if numeric_only:\n            good = self._codes != -1\n            pointer = self._codes[good].max(**kwargs)\n        else:\n            pointer = self._codes.max(**kwargs)\n        if pointer == -1:\n            return np.nan\n        else:\n            return self.categories[pointer]",
        "begin_line": 2223,
        "end_line": 2247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.mode#2249",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.mode(self, dropna=True)",
        "snippet": "    def mode(self, dropna=True):\n        \"\"\"\n        Returns the mode(s) of the Categorical.\n\n        Always returns `Categorical` even if only one value.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : `Categorical` (sorted)\n        \"\"\"\n        codes = self._codes\n        if dropna:\n            good = self._codes != -1\n            codes = self._codes[good]\n        codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n        return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
        "begin_line": 2249,
        "end_line": 2271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical._get_codes_for_values#2601",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._get_codes_for_values(values, categories)",
        "snippet": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        try:\n            values = categories.dtype.construct_array_type()._from_sequence(values)\n        except Exception:\n            # but that may fail for any reason, so fall back to object\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
        "begin_line": 2601,
        "end_line": 2630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical._convert_to_list_like#2667",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._convert_to_list_like(list_like)",
        "snippet": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
        "begin_line": 2667,
        "end_line": 2678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical._factorize_from_iterable#2681",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._factorize_from_iterable(values)",
        "snippet": "def _factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
        "begin_line": 2681,
        "end_line": 2716,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.arrays.categorical._factorize_from_iterables#2719",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._factorize_from_iterables(iterables)",
        "snippet": "def _factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `_factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `_factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(_factorize_from_iterable(it) for it in iterables)))",
        "begin_line": 2719,
        "end_line": 2741,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.__init__#246",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.__init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False)",
        "snippet": "    def __init__(\n        self,\n        index,\n        grouper=None,\n        obj=None,\n        name=None,\n        level=None,\n        sort=True,\n        observed=False,\n        in_axis=False,\n    ):\n\n        self.name = name\n        self.level = level\n        self.grouper = _convert_grouper(index, grouper)\n        self.all_grouper = None\n        self.index = index\n        self.sort = sort\n        self.obj = obj\n        self.observed = observed\n        self.in_axis = in_axis\n\n        # right place for this?\n        if isinstance(grouper, (Series, Index)) and name is None:\n            self.name = grouper.name\n\n        if isinstance(grouper, MultiIndex):\n            self.grouper = grouper.values\n\n        # we have a single grouper which may be a myriad of things,\n        # some of which are dependent on the passing in level\n\n        if level is not None:\n            if not isinstance(level, int):\n                if level not in index.names:\n                    raise AssertionError(\"Level {} not in index\".format(level))\n                level = index.names.index(level)\n\n            if self.name is None:\n                self.name = index.names[level]\n\n            self.grouper, self._labels, self._group_index = index._get_grouper_for_level(  # noqa: E501\n                self.grouper, level\n            )\n\n        # a passed Grouper like, directly get the grouper in the same way\n        # as single grouper groupby, use the group_info to get labels\n        elif isinstance(self.grouper, Grouper):\n            # get the new grouper; we already have disambiguated\n            # what key/level refer to exactly, don't need to\n            # check again as we have by this point converted these\n            # to an actual value (rather than a pd.Grouper)\n            _, grouper, _ = self.grouper._get_grouper(self.obj, validate=False)\n            if self.name is None:\n                self.name = grouper.result_index.name\n            self.obj = self.grouper.obj\n            self.grouper = grouper._get_grouper()\n\n        else:\n            if self.grouper is None and self.name is not None:\n                self.grouper = self.obj[self.name]\n\n            elif isinstance(self.grouper, (list, tuple)):\n                self.grouper = com.asarray_tuplesafe(self.grouper)\n\n            # a passed Categorical\n            elif is_categorical_dtype(self.grouper):\n\n                self.grouper, self.all_grouper = recode_for_groupby(\n                    self.grouper, self.sort, observed\n                )\n                categories = self.grouper.categories\n\n                # we make a CategoricalIndex out of the cat grouper\n                # preserving the categories / ordered attributes\n                self._labels = self.grouper.codes\n                if observed:\n                    codes = algorithms.unique1d(self.grouper.codes)\n                    codes = codes[codes != -1]\n                    if sort or self.grouper.ordered:\n                        codes = np.sort(codes)\n                else:\n                    codes = np.arange(len(categories))\n\n                self._group_index = CategoricalIndex(\n                    Categorical.from_codes(\n                        codes=codes, categories=categories, ordered=self.grouper.ordered\n                    ),\n                    name=self.name,\n                )\n\n            # we are done\n            if isinstance(self.grouper, Grouping):\n                self.grouper = self.grouper.grouper\n\n            # no level passed\n            elif not isinstance(\n                self.grouper, (Series, Index, ExtensionArray, np.ndarray)\n            ):\n                if getattr(self.grouper, \"ndim\", 1) != 1:\n                    t = self.name or str(type(self.grouper))\n                    raise ValueError(\"Grouper for '{}' not 1-dimensional\".format(t))\n                self.grouper = self.index.map(self.grouper)\n                if not (\n                    hasattr(self.grouper, \"__len__\")\n                    and len(self.grouper) == len(self.index)\n                ):\n                    errmsg = (\n                        \"Grouper result violates len(labels) == \"\n                        \"len(data)\\nresult: %s\" % pprint_thing(self.grouper)\n                    )\n                    self.grouper = None  # Try for sanity\n                    raise AssertionError(errmsg)\n\n        # if we have a date/time-like grouper, make sure that we have\n        # Timestamps like\n        if getattr(self.grouper, \"dtype\", None) is not None:\n            if is_datetime64_dtype(self.grouper):\n                self.grouper = self.grouper.astype(\"datetime64[ns]\")\n            elif is_timedelta64_dtype(self.grouper):\n\n                self.grouper = self.grouper.astype(\"timedelta64[ns]\")",
        "begin_line": 246,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.labels#392",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.labels(self)",
        "snippet": "    def labels(self):\n        if self._labels is None:\n            self._make_labels()\n        return self._labels",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.result_index#398",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.result_index(self)",
        "snippet": "    def result_index(self):\n        if self.all_grouper is not None:\n            return recode_from_groupby(self.all_grouper, self.sort, self.group_index)\n        return self.group_index",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping.group_index#404",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping.group_index(self)",
        "snippet": "    def group_index(self):\n        if self._group_index is None:\n            self._make_labels()\n        return self._group_index",
        "begin_line": 404,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.Grouping._make_labels#409",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper.Grouping",
        "signature": "pandas.core.groupby.grouper.Grouping._make_labels(self)",
        "snippet": "    def _make_labels(self):\n        if self._labels is None or self._group_index is None:\n            # we have a list of groupers\n            if isinstance(self.grouper, BaseGrouper):\n                labels = self.grouper.label_info\n                uniques = self.grouper.result_index\n            else:\n                labels, uniques = algorithms.factorize(self.grouper, sort=self.sort)\n                uniques = Index(uniques, name=self.name)\n            self._labels = labels\n            self._group_index = uniques",
        "begin_line": 409,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper._get_grouper#426",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._get_grouper(obj: NDFrame, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True)",
        "snippet": "def _get_grouper(\n    obj: NDFrame,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # TODO: These if-block and else-block are almost same.\n        # MultiIndex instance check is removable, but it seems that there are\n        # some processes only for non-MultiIndex in else-block,\n        # eg. `obj.index.name != level`. We have to consider carefully whether\n        # these are applicable for MultiIndex. Even if these are applicable,\n        # we need to check if it makes no side effect to subsequent processes\n        # on the outside of this condition.\n        # (GH 17621)\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            # allow level to be a length-one list-like object\n            # (e.g., level=[0])\n            # GH 13901\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n            # are same in this section.\n            level = None\n            key = group_axis\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # In the future, a tuple key will always mean an actual key,\n    # not an iterable of keys. In the meantime, we attempt to provide\n    # a warning. We can assume that the user wanted a list of keys when\n    # the key is not in the index. We just have to be careful with\n    # unhashable elements of `key`. Any unhashable elements implies that\n    # they wanted a list of keys.\n    # https://github.com/pandas-dev/pandas/issues/18314\n    is_tuple = isinstance(key, tuple)\n    all_hashable = is_tuple and is_hashable(key)\n\n    if is_tuple:\n        if (\n            all_hashable and key not in obj and set(key).issubset(obj)\n        ) or not all_hashable:\n            # column names ('a', 'b') -> ['a', 'b']\n            # arrays like (a, b) -> [a, b]\n            msg = (\n                \"Interpreting tuple 'by' as a list of keys, rather than \"\n                \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    # is this an index replacement?\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    # if the actual grouper should be obj[key]\n    def is_in_axis(key):\n        if not _is_label_like(key):\n            items = obj._data.items\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True\n\n    # if the grouper is obj[name]\n    def is_in_obj(gpr):\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n\n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr, axis=axis)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr, axis=axis):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n        elif isinstance(gpr, Grouper) and gpr.key is not None:\n            # Add key to exclusions\n            exclusions.append(gpr.key)\n            in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                (\n                    \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                    \" must be same length\".format(\n                        len_gpr=len(gpr), len_axis=obj.shape[axis]\n                    )\n                )\n            )\n\n        # create the Grouping\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj",
        "begin_line": 426,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_axis#585",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_axis(key)",
        "snippet": "    def is_in_axis(key):\n        if not _is_label_like(key):\n            items = obj._data.items\n            try:\n                items.get_loc(key)\n            except (KeyError, TypeError):\n                # TypeError shows up here if we pass e.g. Int64Index\n                return False\n\n        return True",
        "begin_line": 585,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper.is_in_obj#597",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper.is_in_obj(gpr)",
        "snippet": "    def is_in_obj(gpr):\n        if not hasattr(gpr, \"name\"):\n            return False\n        try:\n            return gpr is obj[gpr.name]\n        except (KeyError, IndexError):\n            return False",
        "begin_line": 597,
        "end_line": 603,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper._is_label_like#667",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._is_label_like(val)",
        "snippet": "def _is_label_like(val):\n    return isinstance(val, (str, tuple)) or (val is not None and is_scalar(val))",
        "begin_line": 667,
        "end_line": 668,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.groupby.grouper._convert_grouper#671",
        "src_path": "pandas/core/groupby/grouper.py",
        "class_name": "pandas.core.groupby.grouper",
        "signature": "pandas.core.groupby.grouper._convert_grouper(axis, grouper)",
        "snippet": "def _convert_grouper(axis, grouper):\n    if isinstance(grouper, dict):\n        return grouper.get\n    elif isinstance(grouper, Series):\n        if grouper.index.equals(axis):\n            return grouper._values\n        else:\n            return grouper.reindex(axis)._values\n    elif isinstance(grouper, (list, Series, Index, np.ndarray)):\n        if len(grouper) != len(axis):\n            raise ValueError(\"Grouper and axis must be same length\")\n        return grouper\n    else:\n        return grouper",
        "begin_line": 671,
        "end_line": 684,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#128",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: str, eval_kwargs)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: str, eval_kwargs):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    eval_kwargs : kwargs to pass to expressions\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right, **eval_kwargs)\n    except TypeError:\n        result = masked_arith_op(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 128,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.array_ops.arithmetic_op#159",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.arithmetic_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str, eval_kwargs: Mapping[str, bool])",
        "snippet": "def arithmetic_op(\n    left: Union[np.ndarray, ABCExtensionArray],\n    right: Any,\n    op,\n    str_rep: str,\n    eval_kwargs: Mapping[str, bool],\n):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    from pandas.core.ops import maybe_upcast_for_op\n\n    keep_null_freq = isinstance(\n        right,\n        (\n            ABCDatetimeIndex,\n            ABCDatetimeArray,\n            ABCTimedeltaIndex,\n            ABCTimedeltaArray,\n            Timestamp,\n        ),\n    )\n\n    # NB: We assume that extract_array has already been called on `left`, but\n    #  cannot make the same assumption about `right`.  This is because we need\n    #  to define `keep_null_freq` before calling extract_array on it.\n    lvalues = left\n    rvalues = extract_array(right, extract_numpy=True)\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues, keep_null_freq)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep, eval_kwargs)\n\n    return res_values",
        "begin_line": 159,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comparison_op#220",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comparison_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op)",
        "snippet": "def comparison_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray, ABCIndexClass)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            raise ValueError(\"Lengths must match to compare\")\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(len(lvalues), dtype=bool)\n        else:\n            res_values = np.zeros(len(lvalues), dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        op_name = \"__{op}__\".format(op=op.__name__)\n        method = getattr(lvalues, op_name)\n        with np.errstate(all=\"ignore\"):\n            res_values = method(rvalues)\n\n        if res_values is NotImplemented:\n            res_values = invalid_comparison(lvalues, rvalues, op)\n        if is_scalar(res_values):\n            raise TypeError(\n                \"Could not compare {typ} type with Series\".format(typ=type(rvalues))\n            )\n\n    return res_values",
        "begin_line": 220,
        "end_line": 280,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.tools.timedeltas.to_timedelta#20",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas.to_timedelta(arg, unit='ns', box=True, errors='raise')",
        "snippet": "def to_timedelta(arg, unit=\"ns\", box=True, errors=\"raise\"):\n    \"\"\"\n    Convert argument to timedelta.\n\n    Timedeltas are absolute differences in times, expressed in difference\n    units (e.g. days, hours, minutes, seconds). This method converts\n    an argument from a recognized timedelta format / value into\n    a Timedelta type.\n\n    Parameters\n    ----------\n    arg : str, timedelta, list-like or Series\n        The data to be converted to timedelta.\n    unit : str, default 'ns'\n        Denotes the unit of the arg. Possible values:\n        ('Y', 'M', 'W', 'D', 'days', 'day', 'hours', hour', 'hr',\n        'h', 'm', 'minute', 'min', 'minutes', 'T', 'S', 'seconds',\n        'sec', 'second', 'ms', 'milliseconds', 'millisecond',\n        'milli', 'millis', 'L', 'us', 'microseconds', 'microsecond',\n        'micro', 'micros', 'U', 'ns', 'nanoseconds', 'nano', 'nanos',\n        'nanosecond', 'N').\n    box : bool, default True\n        - If True returns a Timedelta/TimedeltaIndex of the results.\n        - If False returns a numpy.timedelta64 or numpy.darray of\n          values of dtype timedelta64[ns].\n\n        .. deprecated:: 0.25.0\n            Use :meth:`Series.to_numpy` or :meth:`Timedelta.to_timedelta64`\n            instead to get an ndarray of values or numpy.timedelta64,\n            respectively.\n\n    errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n        - If 'raise', then invalid parsing will raise an exception.\n        - If 'coerce', then invalid parsing will be set as NaT.\n        - If 'ignore', then invalid parsing will return the input.\n\n    Returns\n    -------\n    timedelta64 or numpy.array of timedelta64\n        Output type returned if parsing succeeded.\n\n    See Also\n    --------\n    DataFrame.astype : Cast argument to a specified dtype.\n    to_datetime : Convert argument to datetime.\n\n    Examples\n    --------\n\n    Parsing a single string to a Timedelta:\n\n    >>> pd.to_timedelta('1 days 06:05:01.00003')\n    Timedelta('1 days 06:05:01.000030')\n    >>> pd.to_timedelta('15.5us')\n    Timedelta('0 days 00:00:00.000015')\n\n    Parsing a list or array of strings:\n\n    >>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])\n    TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015', NaT],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Converting numbers by specifying the `unit` keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), unit='s')\n    TimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',\n                    '00:00:03', '00:00:04'],\n                   dtype='timedelta64[ns]', freq=None)\n    >>> pd.to_timedelta(np.arange(5), unit='d')\n    TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],\n                   dtype='timedelta64[ns]', freq=None)\n\n    Returning an ndarray by using the 'box' keyword argument:\n\n    >>> pd.to_timedelta(np.arange(5), box=False)\n    array([0, 1, 2, 3, 4], dtype='timedelta64[ns]')\n    \"\"\"\n    unit = parse_timedelta_unit(unit)\n\n    if errors not in (\"ignore\", \"raise\", \"coerce\"):\n        raise ValueError(\"errors must be one of 'ignore', 'raise', or 'coerce'}\")\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        warnings.warn(\n            \"M and Y units are deprecated and will be removed in a future version.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n\n    if arg is None:\n        return arg\n    elif isinstance(arg, ABCSeries):\n        values = _convert_listlike(arg._values, unit=unit, box=False, errors=errors)\n        return arg._constructor(values, index=arg.index, name=arg.name)\n    elif isinstance(arg, ABCIndexClass):\n        return _convert_listlike(arg, unit=unit, box=box, errors=errors, name=arg.name)\n    elif isinstance(arg, np.ndarray) and arg.ndim == 0:\n        # extract array scalar and process below\n        arg = arg.item()\n    elif is_list_like(arg) and getattr(arg, \"ndim\", 1) == 1:\n        return _convert_listlike(arg, unit=unit, box=box, errors=errors)\n    elif getattr(arg, \"ndim\", 1) > 1:\n        raise TypeError(\n            \"arg must be a string, timedelta, list, tuple, 1-d array, or Series\"\n        )\n\n    # ...so it must be a scalar value. Return scalar.\n    return _coerce_scalar_to_timedelta_type(arg, unit=unit, box=box, errors=errors)",
        "begin_line": 20,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.03225806451612903,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.03225806451612903,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type#130",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type(r, unit='ns', box=True, errors='raise')",
        "snippet": "def _coerce_scalar_to_timedelta_type(r, unit=\"ns\", box=True, errors=\"raise\"):\n    \"\"\"Convert string 'r' to a timedelta object.\"\"\"\n\n    try:\n        result = Timedelta(r, unit)\n        if not box:\n            # explicitly view as timedelta64 for case when result is pd.NaT\n            result = result.asm8.view(\"timedelta64[ns]\")\n    except ValueError:\n        if errors == \"raise\":\n            raise\n        elif errors == \"ignore\":\n            return r\n\n        # coerce\n        result = NaT\n\n    return result",
        "begin_line": 130,
        "end_line": 147,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.tools.timedeltas._convert_listlike#150",
        "src_path": "pandas/core/tools/timedeltas.py",
        "class_name": "pandas.core.tools.timedeltas",
        "signature": "pandas.core.tools.timedeltas._convert_listlike(arg, unit='ns', box=True, errors='raise', name=None)",
        "snippet": "def _convert_listlike(arg, unit=\"ns\", box=True, errors=\"raise\", name=None):\n    \"\"\"Convert a list of objects to a timedelta index object.\"\"\"\n\n    if isinstance(arg, (list, tuple)) or not hasattr(arg, \"dtype\"):\n        # This is needed only to ensure that in the case where we end up\n        #  returning arg (errors == \"ignore\"), and where the input is a\n        #  generator, we return a useful list-like instead of a\n        #  used-up generator\n        arg = np.array(list(arg), dtype=object)\n\n    try:\n        value = sequence_to_td64ns(arg, unit=unit, errors=errors, copy=False)[0]\n    except ValueError:\n        if errors == \"ignore\":\n            return arg\n        else:\n            # This else-block accounts for the cases when errors='raise'\n            # and errors='coerce'. If errors == 'raise', these errors\n            # should be raised. If errors == 'coerce', we shouldn't\n            # expect any errors to be raised, since all parsing errors\n            # cause coercion to pd.NaT. However, if an error / bug is\n            # introduced that causes an Exception to be raised, we would\n            # like to surface it.\n            raise\n\n    if box:\n        from pandas import TimedeltaIndex\n\n        value = TimedeltaIndex(value, unit=\"ns\", name=name)\n    return value",
        "begin_line": 150,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#185",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, start=None, end=None, periods=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        start=None,\n        end=None,\n        periods=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            raise TypeError(\n                \"__new__() got an unexpected keyword argument {}\".format(\n                    list(set(fields) - valid_field_set)[0]\n                )\n            )\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(start, end, periods, freq, fields)\n            # PeriodArray._generate range does validate that fields is\n            # empty when really using the range-based constructor.\n            if not fields:\n                msg = (\n                    \"Creating a PeriodIndex by passing range \"\n                    \"endpoints is deprecated.  Use \"\n                    \"`pandas.period_range` instead.\"\n                )\n                # period_range differs from PeriodIndex for cases like\n                # start=\"2000\", periods=4\n                # PeriodIndex interprets that as A-DEC freq.\n                # period_range interprets it as 'D' freq.\n                cond = freq is None and (\n                    (start and not isinstance(start, Period))\n                    or (end and not isinstance(end, Period))\n                )\n                if cond:\n                    msg += (\n                        \" Note that the default `freq` may differ. Pass \"\n                        \"'freq=\\\"{}\\\"' to ensure the same output.\"\n                    ).format(freq2.freqstr)\n                warnings.warn(msg, FutureWarning, stacklevel=2)\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 185,
        "end_line": 270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#273",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values, name=None, freq=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, freq=None, **kwargs):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n\n        \"\"\"\n        # TODO: raising on floats is tested, but maybe not useful.\n        # Should the callers know not to pass floats?\n        # At the very least, I think we can ensure that lists aren't passed.\n        if isinstance(values, list):\n            values = np.asarray(values)\n        if is_float_dtype(values):\n            raise TypeError(\"PeriodIndex._simple_new does not accept floats.\")\n        if freq:\n            freq = Period._maybe_convert_freq(freq)\n        values = PeriodArray(values, freq=freq)\n\n        if not isinstance(values, PeriodArray):\n            raise TypeError(\"PeriodIndex._simple_new only accepts PeriodArray\")\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._reset_identity()\n        return result",
        "begin_line": 273,
        "end_line": 303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.freq#313",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.freq(self)",
        "snippet": "    def freq(self):\n        return self._data.freq",
        "begin_line": 313,
        "end_line": 314,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._shallow_copy#331",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        # TODO: simplify, figure out type of values\n        if values is None:\n            values = self._data\n\n        if isinstance(values, type(self)):\n            values = values._values\n\n        if not isinstance(values, PeriodArray):\n            if isinstance(values, np.ndarray) and is_integer_dtype(values.dtype):\n                values = PeriodArray(values, freq=self.freq)\n            else:\n                # in particular, I would like to avoid period_array here.\n                # Some people seem to be calling use with unexpected types\n                # Index.difference -> ndarray[Period]\n                # DatetimelikeIndexOpsMixin.repeat -> ndarray[ordinal]\n                # I think that once all of Datetime* are EAs, we can simplify\n                # this quite a bit.\n                values = period_array(values, freq=self.freq)\n\n        # We don't allow changing `freq` in _shallow_copy.\n        validate_dtype_freq(self.dtype, kwargs.get(\"freq\"))\n        attributes = self._get_attributes_dict()\n\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        return self._simple_new(values, **attributes)",
        "begin_line": 331,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.func#372",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.func(x)",
        "snippet": "        def func(x):\n            if isinstance(x, Period) or x is NaT:\n                return x\n            else:\n                return Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 372,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._box_func#365",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._box_func(self)",
        "snippet": "    def _box_func(self):\n        \"\"\"Maybe box an ordinal or Period\"\"\"\n        # TODO(DatetimeArray): Avoid double-boxing\n        # PeriodArray takes care of boxing already, so we need to check\n        # whether we're given an ordinal or a Period. It seems like some\n        # places outside of indexes/period.py are calling this _box_func,\n        # but passing data that's already boxed.\n        def func(x):\n            if isinstance(x, Period) or x is NaT:\n                return x\n            else:\n                return Period._from_ordinal(ordinal=x, freq=self.freq)\n\n        return func",
        "begin_line": 365,
        "end_line": 378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._engine#444",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # To avoid a reference cycle, pass a weakref of self to _engine_type.\n        period = weakref.ref(self)\n        return self._engine_type(period, len(self))",
        "begin_line": 444,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.period.period_range#998",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period",
        "signature": "pandas.core.indexes.period.period_range(start=None, end=None, periods=None, freq=None, name=None)",
        "snippet": "def period_range(start=None, end=None, periods=None, freq=None, name=None):\n    \"\"\"\n    Return a fixed frequency PeriodIndex, with day (calendar) as the default\n    frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods\n    end : str or period-like, default None\n        Right bound for generating periods\n    periods : int, default None\n        Number of periods to generate\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n\n    name : str, default None\n        Name of the resulting PeriodIndex\n\n    Returns\n    -------\n    prng : PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
        "begin_line": 998,
        "end_line": 1059,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.config_init.use_bottleneck_cb#33",
        "src_path": "pandas/core/config_init.py",
        "class_name": "pandas.core.config_init",
        "signature": "pandas.core.config_init.use_bottleneck_cb(key)",
        "snippet": "def use_bottleneck_cb(key):\n    from pandas.core import nanops\n\n    nanops.set_use_bottleneck(cf.get_option(key))",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002044153720359771,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.config_init.use_inf_as_na_cb#437",
        "src_path": "pandas/core/config_init.py",
        "class_name": "pandas.core.config_init",
        "signature": "pandas.core.config_init.use_inf_as_na_cb(key)",
        "snippet": "def use_inf_as_na_cb(key):\n    from pandas.core.dtypes.missing import _use_inf_as_na\n\n    _use_inf_as_na(key)",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#181",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(\n            \"Value needs to be a scalar value, was type {}\".format(type(value))\n        )\n    msg = \"Wrong type {} for value {}\"\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError):\n        raise TypeError(msg.format(type(value), value))\n    return new_value",
        "begin_line": 181,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009041591320072332,
            "pseudo_dstar_susp": 0.0034602076124567475,
            "pseudo_tarantula_susp": 0.00078064012490242,
            "pseudo_op2_susp": 0.0034602076124567475,
            "pseudo_barinel_susp": 0.00078064012490242
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#210",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 210,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010131712259371835,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.0006075334143377885,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.0006075334143377885
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#215",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 215,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010245901639344263,
            "pseudo_dstar_susp": 0.25,
            "pseudo_tarantula_susp": 0.0007042253521126761,
            "pseudo_op2_susp": 0.25,
            "pseudo_barinel_susp": 0.0007042253521126761
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#226",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 226,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007836990595611285,
            "pseudo_dstar_susp": 0.002403846153846154,
            "pseudo_tarantula_susp": 0.0006738544474393531,
            "pseudo_op2_susp": 0.002403846153846154,
            "pseudo_barinel_susp": 0.0006738544474393531
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#256",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr):\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    See Also\n    --------\n    Series.to_dense : Return dense representation of a Series.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 256,
        "end_line": 305,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007686395080707148,
            "pseudo_dstar_susp": 0.002369668246445498,
            "pseudo_tarantula_susp": 0.00066711140760507,
            "pseudo_op2_susp": 0.002369668246445498,
            "pseudo_barinel_susp": 0.00066711140760507
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#346",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 346,
        "end_line": 376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007662835249042146,
            "pseudo_dstar_susp": 0.002352941176470588,
            "pseudo_tarantula_susp": 0.000664451827242525,
            "pseudo_op2_susp": 0.002352941176470588,
            "pseudo_barinel_susp": 0.000664451827242525
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_offsetlike#429",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_offsetlike(arr_or_obj)",
        "snippet": "def is_offsetlike(arr_or_obj):\n    \"\"\"\n    Check if obj or all elements of list-like is DateOffset\n\n    Parameters\n    ----------\n    arr_or_obj : object\n\n    Returns\n    -------\n    boolean\n        Whether the object is a DateOffset or listlike of DatetOffsets\n\n    Examples\n    --------\n    >>> is_offsetlike(pd.DateOffset(days=1))\n    True\n    >>> is_offsetlike('offset')\n    False\n    >>> is_offsetlike([pd.offsets.Minute(4), pd.offsets.MonthEnd()])\n    True\n    >>> is_offsetlike(np.array([pd.DateOffset(months=3), pd.Timestamp.now()]))\n    False\n    \"\"\"\n    if isinstance(arr_or_obj, ABCDateOffset):\n        return True\n    elif is_list_like(arr_or_obj) and len(arr_or_obj) and is_object_dtype(arr_or_obj):\n        return all(isinstance(x, ABCDateOffset) for x in arr_or_obj)\n    return False",
        "begin_line": 429,
        "end_line": 457,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#497",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 497,
        "end_line": 525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006997900629811056,
            "pseudo_dstar_susp": 0.002145922746781116,
            "pseudo_tarantula_susp": 0.0006184291898577613,
            "pseudo_op2_susp": 0.002145922746781116,
            "pseudo_barinel_susp": 0.0006184291898577613
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#528",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 528,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006949270326615705,
            "pseudo_dstar_susp": 0.0021008403361344537,
            "pseudo_tarantula_susp": 0.0006146281499692685,
            "pseudo_op2_susp": 0.0021008403361344537,
            "pseudo_barinel_susp": 0.0006146281499692685
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#566",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 566,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007027406886858749,
            "pseudo_dstar_susp": 0.002173913043478261,
            "pseudo_tarantula_susp": 0.0006257822277847309,
            "pseudo_op2_susp": 0.002173913043478261,
            "pseudo_barinel_susp": 0.0006257822277847309
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#597",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 597,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007047216349541931,
            "pseudo_dstar_susp": 0.0021929824561403508,
            "pseudo_tarantula_susp": 0.0006273525721455458,
            "pseudo_op2_susp": 0.0021929824561403508,
            "pseudo_barinel_susp": 0.0006273525721455458
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#631",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 631,
        "end_line": 664,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011025358324145535,
            "pseudo_dstar_susp": 0.005405405405405406,
            "pseudo_tarantula_susp": 0.0010090817356205853,
            "pseudo_op2_susp": 0.005405405405405406,
            "pseudo_barinel_susp": 0.0010090817356205853
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#667",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 667,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001081081081081081,
            "pseudo_dstar_susp": 0.005050505050505051,
            "pseudo_tarantula_susp": 0.0009832841691248771,
            "pseudo_op2_susp": 0.005050505050505051,
            "pseudo_barinel_susp": 0.0009832841691248771
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#700",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype):\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 700,
        "end_line": 733,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007496251874062968,
            "pseudo_dstar_susp": 0.0023148148148148147,
            "pseudo_tarantula_susp": 0.0006596306068601583,
            "pseudo_op2_susp": 0.0023148148148148147,
            "pseudo_barinel_susp": 0.0006596306068601583
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#730",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype):\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_period_dtype(dtype)",
        "begin_line": 730,
        "end_line": 731,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010256410256410256,
            "pseudo_dstar_susp": 0.3333333333333333,
            "pseudo_tarantula_susp": 0.0006596306068601583,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.0006596306068601583
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_arraylike#736",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_arraylike(arr)",
        "snippet": "def is_period_arraylike(arr):\n    \"\"\"\n    Check whether an array-like is a periodical array-like or PeriodIndex.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a periodical array-like or\n        PeriodIndex instance.\n\n    Examples\n    --------\n    >>> is_period_arraylike([1, 2, 3])\n    False\n    >>> is_period_arraylike(pd.Index([1, 2, 3]))\n    False\n    >>> is_period_arraylike(pd.PeriodIndex([\"2017-01-01\"], freq=\"D\"))\n    True\n    \"\"\"\n\n    if isinstance(arr, (ABCPeriodIndex, ABCPeriodArray)):\n        return True\n    elif isinstance(arr, (np.ndarray, ABCSeries)):\n        return is_period_dtype(arr.dtype)\n    return getattr(arr, \"inferred_type\", None) == \"period\"",
        "begin_line": 736,
        "end_line": 765,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike#803",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike(arr)",
        "snippet": "def is_datetimelike(arr):\n    \"\"\"\n    Check whether an array-like is a datetime-like array-like.\n\n    Acceptable datetime-like objects are (but not limited to) datetime\n    indices, periodic indices, and timedelta indices.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is a datetime-like array-like.\n\n    Examples\n    --------\n    >>> is_datetimelike([1, 2, 3])\n    False\n    >>> is_datetimelike(pd.Index([1, 2, 3]))\n    False\n    >>> is_datetimelike(pd.DatetimeIndex([1, 2, 3]))\n    True\n    >>> is_datetimelike(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    >>> is_datetimelike(pd.PeriodIndex([], freq=\"A\"))\n    True\n    >>> is_datetimelike(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetimelike(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>>\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetimelike(s)\n    True\n    \"\"\"\n\n    return (\n        is_datetime64_dtype(arr)\n        or is_datetime64tz_dtype(arr)\n        or is_timedelta64_dtype(arr)\n        or isinstance(arr, ABCPeriodIndex)\n    )",
        "begin_line": 803,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007604562737642585,
            "pseudo_dstar_susp": 0.0006868131868131869,
            "pseudo_tarantula_susp": 0.0009140767824497258,
            "pseudo_op2_susp": 0.0006868131868131869,
            "pseudo_barinel_susp": 0.0009140767824497258
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#851",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target):\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(), \"datetime64\")\n    False\n    \"\"\"\n\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 851,
        "end_line": 887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007462686567164179,
            "pseudo_dstar_susp": 0.00228310502283105,
            "pseudo_tarantula_susp": 0.0006557377049180328,
            "pseudo_op2_susp": 0.00228310502283105,
            "pseudo_barinel_susp": 0.0006557377049180328
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_any_int_dtype#890",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_any_int_dtype(arr_or_dtype)",
        "snippet": "def is_any_int_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    In this function, timedelta64 instances are also considered \"any-integer\"\n    type objects and will return True.\n\n    This function is internal and should not be exposed in the public API.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype.\n\n    Examples\n    --------\n    >>> is_any_int_dtype(str)\n    False\n    >>> is_any_int_dtype(int)\n    True\n    >>> is_any_int_dtype(float)\n    False\n    >>> is_any_int_dtype(np.uint64)\n    True\n    >>> is_any_int_dtype(np.datetime64)\n    False\n    >>> is_any_int_dtype(np.timedelta64)\n    True\n    >>> is_any_int_dtype(np.array(['a', 'b']))\n    False\n    >>> is_any_int_dtype(pd.Series([1, 2]))\n    True\n    >>> is_any_int_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_any_int_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.integer, np.timedelta64))",
        "begin_line": 890,
        "end_line": 938,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#941",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 941,
        "end_line": 993,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007320644216691069,
            "pseudo_dstar_susp": 0.002242152466367713,
            "pseudo_tarantula_susp": 0.0006397952655150352,
            "pseudo_op2_susp": 0.002242152466367713,
            "pseudo_barinel_susp": 0.0006397952655150352
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#996",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 996,
        "end_line": 1050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001004016064257028,
            "pseudo_dstar_susp": 0.0045662100456621,
            "pseudo_tarantula_susp": 0.0008460236886632825,
            "pseudo_op2_susp": 0.0045662100456621,
            "pseudo_barinel_susp": 0.0008460236886632825
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#1053",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 1053,
        "end_line": 1099,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006024096385542169,
            "pseudo_dstar_susp": 0.0006024096385542169,
            "pseudo_tarantula_susp": 0.0006557377049180328,
            "pseudo_op2_susp": 0.0006024096385542169,
            "pseudo_barinel_susp": 0.0006557377049180328
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#1153",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3],\n                                dtype=np.datetime64))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 1153,
        "end_line": 1190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001215066828675577,
            "pseudo_dstar_susp": 0.007142857142857143,
            "pseudo_tarantula_susp": 0.0011013215859030838,
            "pseudo_op2_susp": 0.007142857142857143,
            "pseudo_barinel_susp": 0.0011013215859030838
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#1193",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=np.datetime64))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([],\n                               dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3],\n                               dtype=np.datetime64))  # has 'ns' unit\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 1193,
        "end_line": 1240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005701254275940707,
            "pseudo_dstar_susp": 0.0005701254275940707,
            "pseudo_tarantula_susp": 0.0005913660555884093,
            "pseudo_op2_susp": 0.0005701254275940707,
            "pseudo_barinel_susp": 0.0005913660555884093
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_ns_dtype#1243",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]'))  # Wrong frequency\n    False\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype == _TD_DTYPE)",
        "begin_line": 1243,
        "end_line": 1271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000774593338497289,
            "pseudo_dstar_susp": 0.0023923444976076554,
            "pseudo_tarantula_susp": 0.0006706908115358819,
            "pseudo_op2_susp": 0.0023923444976076554,
            "pseudo_barinel_susp": 0.0006706908115358819
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1274",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1274,
        "end_line": 1310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005574136008918618,
            "pseudo_dstar_susp": 0.0005574136008918618,
            "pseudo_tarantula_susp": 0.0005574136008918618,
            "pseudo_op2_susp": 0.0005574136008918618,
            "pseudo_barinel_susp": 0.0005574136008918618
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_unorderable_exception#1313",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_unorderable_exception(e: TypeError)",
        "snippet": "def _is_unorderable_exception(e: TypeError) -> bool:\n    \"\"\"\n    Check if the exception raised is an unorderable exception.\n\n    The error message differs for 3 <= PY <= 3.5 and PY >= 3.6, so\n    we need to condition based on Python version.\n\n    Parameters\n    ----------\n    e : Exception or sub-class\n        The exception object to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the exception raised is an unorderable exception.\n    \"\"\"\n\n    if PY36:\n        return \"'>' not supported between instances of\" in str(e)\n\n    return \"unorderable\" in str(e)",
        "begin_line": 1313,
        "end_line": 1334,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1397",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> dt = np.datetime64(pd.datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    is_datetimelike = needs_i8_conversion\n    return (is_datetimelike(a) and is_numeric(b)) or (\n        is_datetimelike(b) and is_numeric(a)\n    )",
        "begin_line": 1397,
        "end_line": 1453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016909029421711193,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1444",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1444,
        "end_line": 1448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1456",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype):\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1456,
        "end_line": 1497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005649717514124294,
            "pseudo_dstar_susp": 0.0005649717514124294,
            "pseudo_tarantula_susp": 0.0005649717514124294,
            "pseudo_op2_susp": 0.0005649717514124294,
            "pseudo_barinel_susp": 0.0005649717514124294
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric_dtype#1500",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)",
        "snippet": "def is_numeric_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a numeric dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a numeric dtype.\n\n    Examples\n    --------\n    >>> is_numeric_dtype(str)\n    False\n    >>> is_numeric_dtype(int)\n    True\n    >>> is_numeric_dtype(float)\n    True\n    >>> is_numeric_dtype(np.uint64)\n    True\n    >>> is_numeric_dtype(np.datetime64)\n    False\n    >>> is_numeric_dtype(np.timedelta64)\n    False\n    >>> is_numeric_dtype(np.array(['a', 'b']))\n    False\n    >>> is_numeric_dtype(pd.Series([1, 2]))\n    True\n    >>> is_numeric_dtype(pd.Index([1, 2.]))\n    True\n    >>> is_numeric_dtype(np.array([], dtype=np.timedelta64))\n    False\n    \"\"\"\n\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.number, np.bool_)\n    )",
        "begin_line": 1500,
        "end_line": 1540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1543",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1543,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019592476489028212,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1575",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1575,
        "end_line": 1606,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007429420505200594,
            "pseudo_dstar_susp": 0.0022522522522522522,
            "pseudo_tarantula_susp": 0.0006527415143603133,
            "pseudo_op2_susp": 0.0022522522522522522,
            "pseudo_barinel_susp": 0.0006527415143603133
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1609",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1609,
        "end_line": 1671,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006997900629811056,
            "pseudo_dstar_susp": 0.002145922746781116,
            "pseudo_tarantula_susp": 0.0006184291898577613,
            "pseudo_op2_susp": 0.002145922746781116,
            "pseudo_barinel_susp": 0.0006184291898577613
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_type#1674",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_type(arr)",
        "snippet": "def is_extension_type(arr):\n    \"\"\"\n    Check whether an array-like is of a pandas extension class instance.\n\n    Extension classes include categoricals, pandas sparse objects (i.e.\n    classes represented within the pandas library and not ones external\n    to it like scipy sparse matrices), and datetime-like arrays.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a pandas extension class instance.\n\n    Examples\n    --------\n    >>> is_extension_type([1, 2, 3])\n    False\n    >>> is_extension_type(np.array([1, 2, 3]))\n    False\n    >>>\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>>\n    >>> is_extension_type(cat)\n    True\n    >>> is_extension_type(pd.Series(cat))\n    True\n    >>> is_extension_type(pd.SparseArray([1, 2, 3]))\n    True\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_extension_type(bsr_matrix([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3]))\n    False\n    >>> is_extension_type(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    >>>\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_extension_type(s)\n    True\n    \"\"\"\n\n    if is_categorical(arr):\n        return True\n    elif is_sparse(arr):\n        return True\n    elif is_datetime64tz_dtype(arr):\n        return True\n    return False",
        "begin_line": 1674,
        "end_line": 1727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005649717514124294,
            "pseudo_dstar_susp": 0.0005649717514124294,
            "pseudo_tarantula_susp": 0.0005649717514124294,
            "pseudo_op2_susp": 0.0005649717514124294,
            "pseudo_barinel_susp": 0.0005649717514124294
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1730",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype):\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1730,
        "end_line": 1776,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000689655172413793,
            "pseudo_dstar_susp": 0.00205761316872428,
            "pseudo_tarantula_susp": 0.0006105006105006105,
            "pseudo_op2_susp": 0.00205761316872428,
            "pseudo_barinel_susp": 0.0006105006105006105
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1779",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1779,
        "end_line": 1809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1812",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1812,
        "end_line": 1834,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007462686567164179,
            "pseudo_dstar_susp": 0.00228310502283105,
            "pseudo_tarantula_susp": 0.0006557377049180328,
            "pseudo_op2_susp": 0.00228310502283105,
            "pseudo_barinel_susp": 0.0006557377049180328
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1837",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1837,
        "end_line": 1870,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008090614886731392,
            "pseudo_dstar_susp": 0.002457002457002457,
            "pseudo_tarantula_susp": 0.000847457627118644,
            "pseudo_op2_susp": 0.002457002457002457,
            "pseudo_barinel_susp": 0.000847457627118644
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1873",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1873,
        "end_line": 1915,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009372071227741331,
            "pseudo_dstar_susp": 0.003875968992248062,
            "pseudo_tarantula_susp": 0.0008045052292839903,
            "pseudo_op2_susp": 0.003875968992248062,
            "pseudo_barinel_susp": 0.0008045052292839903
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#2007",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype):\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(\"data type '{}' not understood\".format(dtype))\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(\"dtype '{}' not understood\".format(dtype))\n\n    return npdtype",
        "begin_line": 2007,
        "end_line": 2054,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006798096532970768,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0006752194463200541,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0006752194463200541
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#50",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 50,
        "end_line": 124,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009551098376313276,
            "pseudo_dstar_susp": 0.004166666666666667,
            "pseudo_tarantula_susp": 0.0008271298593879239,
            "pseudo_op2_susp": 0.004166666666666667,
            "pseudo_barinel_susp": 0.0008271298593879239
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#130",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 130,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001040582726326743,
            "pseudo_dstar_susp": 0.004761904761904762,
            "pseudo_tarantula_susp": 0.0009578544061302681,
            "pseudo_op2_susp": 0.004761904761904762,
            "pseudo_barinel_susp": 0.0009578544061302681
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_old#161",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_old(obj)",
        "snippet": "def _isna_old(obj):\n    \"\"\"Detect missing values. Treat None, NaN, INF, -INF as null.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    \"\"\"\n    if is_scalar(obj):\n        return libmissing.checknull_old(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass)):\n        return _isna_ndarraylike_old(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=_isna_old))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike_old(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike_old(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 161,
        "end_line": 188,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing._use_inf_as_na#194",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._use_inf_as_na(key)",
        "snippet": "def _use_inf_as_na(key):\n    \"\"\"Option change callback for na/inf behaviour\n    Choose which replacement for numpy.isnan / -numpy.isfinite is used.\n\n    Parameters\n    ----------\n    flag: bool\n        True means treat None, NaN, INF, -INF as null (old way),\n        False means None and NaN are null, but INF, -INF are not null\n        (new way).\n\n    Notes\n    -----\n    This approach to setting global module values is discussed and\n    approved here:\n\n    * http://stackoverflow.com/questions/4859217/\n      programmatically-creating-variables-in-python/4859312#4859312\n    \"\"\"\n    flag = get_option(key)\n    if flag:\n        globals()[\"_isna\"] = _isna_old\n    else:\n        globals()[\"_isna\"] = _isna_new",
        "begin_line": 194,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#220",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 220,
        "end_line": 263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016025641025641025,
            "pseudo_dstar_susp": 0.0009208103130755065,
            "pseudo_tarantula_susp": 0.0016129032258064516,
            "pseudo_op2_susp": 0.0009208103130755065,
            "pseudo_barinel_susp": 0.0016129032258064516
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike_old#266",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike_old(obj)",
        "snippet": "def _isna_ndarraylike_old(obj):\n    values = getattr(obj, \"values\", obj)\n    dtype = values.dtype\n\n    if is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj_old(values.ravel())\n            result[:] = vec.reshape(shape)\n\n    elif is_datetime64_dtype(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = ~np.isfinite(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 266,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#294",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 294,
        "end_line": 371,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_compat#377",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_compat(arr, fill_value=np.nan)",
        "snippet": "def _isna_compat(arr, fill_value=np.nan):\n    \"\"\"\n    Parameters\n    ----------\n    arr: a numpy array\n    fill_value: fill value, default to np.nan\n\n    Returns\n    -------\n    True if we can fill using this fill_value\n    \"\"\"\n    dtype = arr.dtype\n    if isna(fill_value):\n        return not (is_bool_dtype(dtype) or is_integer_dtype(dtype))\n    return True",
        "begin_line": 377,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#394",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan=False)",
        "snippet": "def array_equivalent(left, right, strict_nan=False):\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(left_value != right_value):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    # numpy will will not allow this type of datetimelike vs integer comparison\n    elif is_datetimelike_v_numeric(left, right):\n        return False\n\n    # M8/m8\n    elif needs_i8_conversion(left) and needs_i8_conversion(right):\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 394,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing._maybe_fill#508",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._maybe_fill(arr, fill_value=np.nan)",
        "snippet": "def _maybe_fill(arr, fill_value=np.nan):\n    \"\"\"\n    if we have a compatible fill_value and arr dtype, then fill\n    \"\"\"\n    if _isna_compat(arr, fill_value):\n        arr.fill(fill_value)\n    return arr",
        "begin_line": 508,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#517",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat=True)",
        "snippet": "def na_value_for_dtype(dtype, compat=True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 517,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.dtypes.missing.remove_na_arraylike#565",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.remove_na_arraylike(arr)",
        "snippet": "def remove_na_arraylike(arr):\n    \"\"\"\n    Return array-like containing only true/non-NaN values, possibly empty.\n    \"\"\"\n    if is_extension_array_dtype(arr):\n        return arr[notna(arr)]\n    else:\n        return arr[notna(lib.values_from_object(arr))]",
        "begin_line": 565,
        "end_line": 572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013698630136986301,
            "pseudo_dstar_susp": 0.000847457627118644,
            "pseudo_tarantula_susp": 0.001394700139470014,
            "pseudo_op2_susp": 0.000847457627118644,
            "pseudo_barinel_susp": 0.001394700139470014
        }
    },
    {
        "name": "pandas.core.dtypes.missing.is_valid_nat_for_dtype#575",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.is_valid_nat_for_dtype(obj, dtype)",
        "snippet": "def is_valid_nat_for_dtype(obj, dtype):\n    \"\"\"\n    isna check that excludes incompatible dtypes\n\n    Parameters\n    ----------\n    obj : object\n    dtype : np.datetime64, np.timedelta64, DatetimeTZDtype, or PeriodDtype\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if not lib.is_scalar(obj) or not isna(obj):\n        return False\n    if dtype.kind == \"M\":\n        return not isinstance(obj, np.timedelta64)\n    if dtype.kind == \"m\":\n        return not isinstance(obj, np.datetime64)\n\n    # must be PeriodDType\n    return not isinstance(obj, (np.datetime64, np.timedelta64))",
        "begin_line": 575,
        "end_line": 596,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.construction.extract_array#317",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy=False)",
        "snippet": "def extract_array(obj, extract_numpy=False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 317,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008203445447087777,
            "pseudo_dstar_susp": 0.0025188916876574307,
            "pseudo_tarantula_susp": 0.0007087172218284905,
            "pseudo_op2_susp": 0.0025188916876574307,
            "pseudo_barinel_susp": 0.0007087172218284905
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#368",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred == \"period\":\n                from pandas.core.arrays import period_array\n\n                try:\n                    subarr = period_array(subarr)\n                except IncompatibleFrequency:\n                    pass\n\n    return subarr",
        "begin_line": 368,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009900990099009901,
            "pseudo_dstar_susp": 0.0043859649122807015,
            "pseudo_tarantula_susp": 0.0010741138560687433,
            "pseudo_op2_susp": 0.0043859649122807015,
            "pseudo_barinel_susp": 0.0010741138560687433
        }
    },
    {
        "name": "pandas.core.construction._try_cast#491",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_type(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype._ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 491,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009615384615384616,
            "pseudo_dstar_susp": 0.004273504273504274,
            "pseudo_tarantula_susp": 0.0008968609865470852,
            "pseudo_op2_susp": 0.004273504273504274,
            "pseudo_barinel_susp": 0.0008968609865470852
        }
    },
    {
        "name": "pandas.core.reshape.util.cartesian_product#8",
        "src_path": "pandas/core/reshape/util.py",
        "class_name": "pandas.core.reshape.util",
        "signature": "pandas.core.reshape.util.cartesian_product(X)",
        "snippet": "def cartesian_product(X):\n    \"\"\"\n    Numpy version of itertools.product.\n    Sometimes faster (for large inputs)...\n\n    Parameters\n    ----------\n    X : list-like of list-likes\n\n    Returns\n    -------\n    product : list of ndarrays\n\n    Examples\n    --------\n    >>> cartesian_product([list('ABC'), [1, 2]])\n    [array(['A', 'A', 'B', 'B', 'C', 'C'], dtype='|S1'),\n    array([1, 2, 1, 2, 1, 2])]\n\n    See Also\n    --------\n    itertools.product : Cartesian product of input iterables.  Equivalent to\n        nested for-loops.\n    \"\"\"\n    msg = \"Input must be a list-like of list-likes\"\n    if not is_list_like(X):\n        raise TypeError(msg)\n    for x in X:\n        if not is_list_like(x):\n            raise TypeError(msg)\n\n    if len(X) == 0:\n        return []\n\n    lenX = np.fromiter((len(x) for x in X), dtype=np.intp)\n    cumprodX = np.cumproduct(lenX)\n\n    a = np.roll(cumprodX, 1)\n    a[0] = 1\n\n    if cumprodX[-1] != 0:\n        b = cumprodX[-1] / cumprodX\n    else:\n        # if any factor is empty, the cartesian product is empty\n        b = np.zeros_like(cumprodX)\n\n    return [\n        np.tile(\n            np.repeat(np.asarray(com.values_from_object(x)), b[i]), np.product(a[i])\n        )\n        for i, x in enumerate(X)\n    ]",
        "begin_line": 8,
        "end_line": 59,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#261",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, fastpath=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        fastpath=None,\n        tupleize_cols=True,\n        **kwargs\n    ) -> \"Index\":\n\n        from .range import RangeIndex\n        from pandas import PeriodIndex, DatetimeIndex, TimedeltaIndex\n        from .numeric import Float64Index, Int64Index, UInt64Index\n        from .interval import IntervalIndex\n        from .category import CategoricalIndex\n\n        if name is None and hasattr(data, \"name\"):\n            name = data.name\n\n        if fastpath is not None:\n            warnings.warn(\n                \"The 'fastpath' keyword is deprecated, and will be \"\n                \"removed in a future version.\",\n                FutureWarning,\n                stacklevel=2,\n            )\n            if fastpath:\n                return cls._simple_new(data, name)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n\n        # interval\n        elif (\n            is_interval_dtype(data) or is_interval_dtype(dtype)\n        ) and not is_object_dtype(dtype):\n            closed = kwargs.get(\"closed\", None)\n            return IntervalIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            if is_dtype_equal(_o_dtype, dtype):\n                # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n                #  will raise in the where `data` is already tz-aware.  So\n                #  we leave it out of this step and cast to object-dtype after\n                #  the DatetimeIndex construction.\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                result = DatetimeIndex(\n                    data, copy=False, name=name, **kwargs\n                )  # type: \"Index\"\n                return result.astype(object)\n            else:\n                return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            if is_dtype_equal(_o_dtype, dtype):\n                # Note we can pass copy=False because the .astype below\n                #  will always make a copy\n                result = TimedeltaIndex(data, copy=False, name=name, **kwargs)\n                return result.astype(object)\n            else:\n                return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n\n        elif is_period_dtype(data) and not is_object_dtype(dtype):\n            return PeriodIndex(data, copy=copy, name=name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            data = np.asarray(data)\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                if is_integer_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"integer\":\n                        data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n                    elif inferred in [\"floating\", \"mixed-integer-float\"]:\n                        if isna(data).any():\n                            raise ValueError(\"cannot convert float NaN to integer\")\n\n                        if inferred == \"mixed-integer-float\":\n                            data = maybe_cast_to_integer_array(data, dtype)\n\n                        # If we are actually all equal to integers,\n                        # then coerce to integer.\n                        try:\n                            return cls._try_convert_to_int_index(\n                                data, copy, name, dtype\n                            )\n                        except ValueError:\n                            pass\n\n                        # Return an actual float index.\n                        return Float64Index(data, copy=copy, dtype=dtype, name=name)\n\n                    elif inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                elif is_float_dtype(dtype):\n                    inferred = lib.infer_dtype(data, skipna=False)\n                    if inferred == \"string\":\n                        pass\n                    else:\n                        data = data.astype(dtype)\n                else:\n                    data = np.array(data, dtype=dtype, copy=copy)\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                inferred = lib.infer_dtype(subarr, skipna=False)\n                if inferred == \"integer\":\n                    try:\n                        return cls._try_convert_to_int_index(subarr, copy, name, dtype)\n                    except ValueError:\n                        pass\n\n                    return Index(subarr, copy=copy, dtype=object, name=name)\n                elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n                    # TODO: Returns IntegerArray for integer-na case in the future\n                    return Float64Index(subarr, copy=copy, name=name)\n                elif inferred == \"interval\":\n                    try:\n                        return IntervalIndex(subarr, name=name, copy=copy)\n                    except ValueError:\n                        # GH27172: mixed closed Intervals --> object dtype\n                        pass\n                elif inferred == \"boolean\":\n                    # don't support boolean explicitly ATM\n                    pass\n                elif inferred != \"string\":\n                    if inferred.startswith(\"datetime\"):\n                        try:\n                            return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)\n                        except (ValueError, OutOfBoundsDatetime):\n                            # GH 27011\n                            # If we have mixed timezones, just send it\n                            # down the base constructor\n                            pass\n\n                    elif inferred.startswith(\"timedelta\"):\n                        return TimedeltaIndex(subarr, copy=copy, name=name, **kwargs)\n                    elif inferred == \"period\":\n                        try:\n                            return PeriodIndex(subarr, name=name, **kwargs)\n                        except IncompatibleFrequency:\n                            pass\n            return cls._simple_new(subarr, name)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from .multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 261,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001326259946949602,
            "pseudo_dstar_susp": 0.007575757575757576,
            "pseudo_tarantula_susp": 0.0013513513513513514,
            "pseudo_op2_susp": 0.007575757575757576,
            "pseudo_barinel_susp": 0.0013513513513513514
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#510",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name=None, dtype=None, **kwargs)",
        "snippet": "    def _simple_new(cls, values, name=None, dtype=None, **kwargs):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        if isinstance(values, (ABCSeries, ABCIndexClass)):\n            # Index._data must always be an ndarray.\n            # This is no-copy for when _values is an ndarray,\n            # which should be always at this point.\n            values = np.asarray(values._values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides. We don't re-use `_ndarray_values`, since\n        # we actually set this value too.\n        result._index_data = values\n        result.name = name\n        for k, v in kwargs.items():\n            setattr(result, k, v)\n        return result._reset_identity()",
        "begin_line": 510,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011695906432748538,
            "pseudo_dstar_susp": 0.006493506493506494,
            "pseudo_tarantula_susp": 0.0010526315789473684,
            "pseudo_op2_susp": 0.006493506493506494,
            "pseudo_barinel_susp": 0.0010526315789473684
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_attributes_dict#543",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_attributes_dict(self)",
        "snippet": "    def _get_attributes_dict(self):\n        \"\"\"\n        Return an attributes dict for my class.\n        \"\"\"\n        return {k: getattr(self, k, None) for k in self._attributes}",
        "begin_line": 543,
        "end_line": 547,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009746588693957114,
            "pseudo_dstar_susp": 0.004405286343612335,
            "pseudo_tarantula_susp": 0.0008396305625524769,
            "pseudo_op2_susp": 0.004405286343612335,
            "pseudo_barinel_susp": 0.0008396305625524769
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#565",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, **kwargs)",
        "snippet": "    def _shallow_copy(self, values=None, **kwargs):\n        if values is None:\n            values = self.values\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n\n        # _simple_new expects an the type of self._data\n        values = getattr(values, \"_values\", values)\n        if isinstance(values, ABCDatetimeArray):\n            # `self.values` returns `self` for tz-aware, so we need to unwrap\n            #  more specifically\n            values = values.asi8\n\n        return self._simple_new(values, **attributes)",
        "begin_line": 565,
        "end_line": 580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00020563438206868187,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy_with_infer#582",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy_with_infer(self, values, **kwargs)",
        "snippet": "    def _shallow_copy_with_infer(self, values, **kwargs):\n        \"\"\"\n        Create a new Index inferring the class with passed value, don't copy\n        the data, use the same object attributes with passed in attributes\n        taking precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        kwargs : updates the default attributes for this Index\n        \"\"\"\n        attributes = self._get_attributes_dict()\n        attributes.update(kwargs)\n        attributes[\"copy\"] = False\n        if not len(values) and \"dtype\" not in kwargs:\n            attributes[\"dtype\"] = self.dtype\n        if self._infer_as_myclass:\n            try:\n                return self._constructor(values, **attributes)\n            except (TypeError, ValueError):\n                pass\n        return Index(values, **attributes)",
        "begin_line": 582,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00196078431372549,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.0020325203252032522,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.0020325203252032522
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#611",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other):\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 611,
        "end_line": 628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#630",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 630,
        "end_line": 635,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007215007215007215,
            "pseudo_dstar_susp": 0.0022271714922048997,
            "pseudo_tarantula_susp": 0.0006365372374283895,
            "pseudo_op2_susp": 0.0022271714922048997,
            "pseudo_barinel_susp": 0.0006365372374283895
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#641",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `_ndarray_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        _ndarray_values = self._ndarray_values\n        return self._engine_type(lambda: _ndarray_values, len(self))",
        "begin_line": 641,
        "end_line": 647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00102880658436214,
            "pseudo_dstar_susp": 0.004672897196261682,
            "pseudo_tarantula_susp": 0.0009049773755656109,
            "pseudo_op2_susp": 0.004672897196261682,
            "pseudo_barinel_susp": 0.0009049773755656109
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#653",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self):\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 653,
        "end_line": 657,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009689922480620155,
            "pseudo_dstar_susp": 0.004366812227074236,
            "pseudo_tarantula_susp": 0.0008375209380234506,
            "pseudo_op2_susp": 0.004366812227074236,
            "pseudo_barinel_susp": 0.0008375209380234506
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#659",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None):\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 659,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021915406530791147,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#677",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 677,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#713",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 713,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#751",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from .category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n        elif is_datetime64tz_dtype(dtype):\n            # TODO(GH-24559): Remove this block, use the following elif.\n            # avoid FutureWarning from DatetimeIndex constructor.\n            from pandas import DatetimeIndex\n\n            tz = pandas_dtype(dtype).tz\n            return DatetimeIndex(np.asarray(self)).tz_localize(\"UTC\").tz_convert(tz)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            if is_datetime64tz_dtype(dtype):\n                from pandas import DatetimeIndex\n\n                return DatetimeIndex(\n                    self.values, name=self.name, dtype=dtype, copy=copy\n                )\n            return Index(\n                self.values.astype(dtype, copy=copy), name=self.name, dtype=dtype\n            )\n        except (TypeError, ValueError):\n            msg = \"Cannot cast {name} to dtype {dtype}\"\n            raise TypeError(msg.format(name=type(self).__name__, dtype=dtype))",
        "begin_line": 751,
        "end_line": 782,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#813",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self.values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                msg = \"Unable to fill values because {0} cannot contain NA\"\n                raise ValueError(msg.format(self.__class__.__name__))\n            taken = self.values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 813,
        "end_line": 830,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#832",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n                raise ValueError(msg)\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 832,
        "end_line": 853,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#957",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self):\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass = self.__class__.__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n\n        prepr = (\",%s\" % space).join(\"%s=%s\" % (k, v) for k, v in attrs)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = \"%s(%s%s)\" % (klass, data, prepr)\n\n        return res",
        "begin_line": 957,
        "end_line": 974,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#976",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self):\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 976,
        "end_line": 984,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._formatter_func#987",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint",
        "begin_line": 987,
        "end_line": 991,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#993",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None):\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n\n        # do we want to justify (only do so for non-objects)\n        is_justify = not (\n            self.inferred_type in (\"string\", \"unicode\")\n            or (\n                self.inferred_type == \"categorical\" and is_object_dtype(self.categories)\n            )\n        )\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 993,
        "end_line": 1008,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#1010",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 1010,
        "end_line": 1014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1284",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1284,
        "end_line": 1285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016493485073396007,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1287",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(\"Length of new names must be 1, got %d\" % len(values))\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(\n                    \"{}.name must be a hashable type\".format(self.__class__.__name__)\n                )\n        self.name = values[0]",
        "begin_line": 1287,
        "end_line": 1315,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1319",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace=False)",
        "snippet": "    def set_names(self, names, level=None, inplace=False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            msg = \"Names must be a string when a single level is provided.\"\n            raise TypeError(msg)\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1319,
        "end_line": 1397,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.rename#1399",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.rename(self, name, inplace=False)",
        "snippet": "    def rename(self, name, inplace=False):\n        \"\"\"\n        Alter Index or MultiIndex name.\n\n        Able to set new names without level. Defaults to returning new index.\n        Length of names must match number of levels in MultiIndex.\n\n        Parameters\n        ----------\n        name : label or list of labels\n            Name(s) to set.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.set_names : Able to set new names partially and by level.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n        >>> idx.rename('grade')\n        Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]],\n        ...                                   names=['kind', 'year'])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.rename(['species', 'year'])\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        >>> idx.rename('species')\n        Traceback (most recent call last):\n        TypeError: Must pass list-like as `names`.\n        \"\"\"\n        return self.set_names([name], inplace=inplace)",
        "begin_line": 1399,
        "end_line": 1448,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1454",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self):\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1454,
        "end_line": 1458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016466326362588507,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic#1655",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic(self)",
        "snippet": "    def is_monotonic(self):\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing",
        "begin_line": 1655,
        "end_line": 1659,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001866368047779022,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1662",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self):\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1662,
        "end_line": 1676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00018642803877703205,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1733",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1733,
        "end_line": 1737,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021579628830384117,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1746",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self):\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1746,
        "end_line": 1747,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_object#1755",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_object(self)",
        "snippet": "    def is_object(self):\n        return is_object_dtype(self.dtype)",
        "begin_line": 1755,
        "end_line": 1756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_categorical#1758",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_categorical(self)",
        "snippet": "    def is_categorical(self):\n        \"\"\"\n        Check if the Index holds categorical data.\n\n        Returns\n        -------\n        boolean\n            True if the Index is categorical.\n\n        See Also\n        --------\n        CategoricalIndex : Index for categorical data.\n\n        Examples\n        --------\n        >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n        ...                 \"Watermelon\"]).astype(\"category\")\n        >>> idx.is_categorical()\n        True\n\n        >>> idx = pd.Index([1, 3, 5, 7])\n        >>> idx.is_categorical()\n        False\n\n        >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n        >>> s\n        0        Peter\n        1       Victor\n        2    Elisabeth\n        3          Mar\n        dtype: object\n        >>> s.index.is_categorical()\n        False\n        \"\"\"\n        return self.inferred_type in [\"categorical\"]",
        "begin_line": 1758,
        "end_line": 1792,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1807",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self):\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1807,
        "end_line": 1811,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002044153720359771,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1814",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self):\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1814,
        "end_line": 1815,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00078064012490242,
            "pseudo_dstar_susp": 0.000697350069735007,
            "pseudo_tarantula_susp": 0.0009354536950420954,
            "pseudo_op2_susp": 0.000697350069735007,
            "pseudo_barinel_susp": 0.0009354536950420954
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1861",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1861,
        "end_line": 1871,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#1882",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self):\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 1882,
        "end_line": 1889,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__or__#2310",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__or__(self, other)",
        "snippet": "    def __or__(self, other):\n        return self.union(other)",
        "begin_line": 2310,
        "end_line": 2311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_reconciled_name_object#2329",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_reconciled_name_object(self, other)",
        "snippet": "    def _get_reconciled_name_object(self, other):\n        \"\"\"\n        If the result of a set operation will be self,\n        return self, unless the name changes, in which\n        case make a shallow copy of self.\n        \"\"\"\n        name = get_op_result_name(self, other)\n        if self.name != name:\n            return self._shallow_copy(name=name)\n        return self",
        "begin_line": 2329,
        "end_line": 2338,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._is_compatible_with_other#2364",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._is_compatible_with_other(self, other)",
        "snippet": "    def _is_compatible_with_other(self, other):\n        \"\"\"\n        Check whether this and the other dtype are compatible with each other.\n        Meaning a union can be formed between them without needing to be cast\n        to dtype object.\n\n        Parameters\n        ----------\n        other : Index or array-like\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
        "begin_line": 2364,
        "end_line": 2378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_sort_keyword#2380",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_sort_keyword(self, sort)",
        "snippet": "    def _validate_sort_keyword(self, sort):\n        if sort not in [None, False]:\n            raise ValueError(\n                \"The 'sort' keyword only takes the values of \"\n                \"None or False; {0} was passed.\".format(sort)\n            )",
        "begin_line": 2380,
        "end_line": 2385,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.union#2387",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.union(self, other, sort=None)",
        "snippet": "    def union(self, other, sort=None):\n        \"\"\"\n        Form the union of two Index objects.\n\n        If the Index objects are incompatible, both Index objects will be\n        cast to dtype('object') first.\n\n            .. versionchanged:: 0.25.0\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : bool or None, default None\n            Whether to sort the resulting Index.\n\n            * None : Sort the result, except when\n\n              1. `self` and `other` are equal.\n              2. `self` or `other` has length 0.\n              3. Some values in `self` or `other` cannot be compared.\n                 A RuntimeWarning is issued in this case.\n\n            * False : do not sort the result.\n\n            .. versionadded:: 0.24.0\n\n            .. versionchanged:: 0.24.1\n\n               Changed the default value from ``True`` to ``None``\n               (without change in behaviour).\n\n        Returns\n        -------\n        union : Index\n\n        Examples\n        --------\n\n        Union matching dtypes\n\n        >>> idx1 = pd.Index([1, 2, 3, 4])\n        >>> idx2 = pd.Index([3, 4, 5, 6])\n        >>> idx1.union(idx2)\n        Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n        Union mismatched dtypes\n\n        >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n        >>> idx2 = pd.Index([1, 2, 3, 4])\n        >>> idx1.union(idx2)\n        Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n        \"\"\"\n        self._validate_sort_keyword(sort)\n        self._assert_can_do_setop(other)\n\n        if not self._is_compatible_with_other(other):\n            return self._union_incompatible_dtypes(other, sort=sort)\n\n        return self._union(other, sort=sort)",
        "begin_line": 2387,
        "end_line": 2445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._union#2447",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._union(self, other, sort)",
        "snippet": "    def _union(self, other, sort):\n        \"\"\"\n        Specific union logic should go here. In subclasses, union behavior\n        should be overwritten here rather than in `self.union`.\n\n        Parameters\n        ----------\n        other : Index or array-like\n        sort : False or None, default False\n            Whether to sort the resulting index.\n\n            * False : do not sort the result.\n            * None : sort the result, except when `self` and `other` are equal\n              or when the values cannot be compared.\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        if not len(other) or self.equals(other):\n            return self._get_reconciled_name_object(other)\n\n        if not len(self):\n            return other._get_reconciled_name_object(self)\n\n        # TODO(EA): setops-refactor, clean all this up\n        if is_period_dtype(self) or is_datetime64tz_dtype(self):\n            lvals = self._ndarray_values\n        else:\n            lvals = self._values\n        if is_period_dtype(other) or is_datetime64tz_dtype(other):\n            rvals = other._ndarray_values\n        else:\n            rvals = other._values\n\n        if sort is None and self.is_monotonic and other.is_monotonic:\n            try:\n                result = self._outer_indexer(lvals, rvals)[0]\n            except TypeError:\n                # incomparable objects\n                result = list(lvals)\n\n                # worth making this faster? a very unusual case\n                value_set = set(lvals)\n                result.extend([x for x in rvals if x not in value_set])\n        else:\n            # find indexes of things in \"other\" that are not in \"self\"\n            if self.is_unique:\n                indexer = self.get_indexer(other)\n                indexer = (indexer == -1).nonzero()[0]\n            else:\n                indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n            if len(indexer) > 0:\n                other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n                result = concat_compat((lvals, other_diff))\n\n            else:\n                result = lvals\n\n            if sort is None:\n                try:\n                    result = sorting.safe_sort(result)\n                except TypeError as e:\n                    warnings.warn(\n                        \"{}, sort order is undefined for \"\n                        \"incomparable objects\".format(e),\n                        RuntimeWarning,\n                        stacklevel=3,\n                    )\n\n        # for subclasses\n        return self._wrap_setop_result(other, result)",
        "begin_line": 2447,
        "end_line": 2520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_can_do_setop#2763",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_can_do_setop(self, other)",
        "snippet": "    def _assert_can_do_setop(self, other):\n        if not is_list_like(other):\n            raise TypeError(\"Input must be Index or array-like\")\n        return True",
        "begin_line": 2763,
        "end_line": 2766,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2820",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            try:\n                return self._engine.get_loc(key)\n            except KeyError:\n                return self._engine.get_loc(self._maybe_cast_indexer(key))\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2820,
        "end_line": 2837,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00023713540431586437,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_scalar_indexer#3036",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_scalar_indexer(self, key, kind=None)",
        "snippet": "    def _convert_scalar_indexer(self, key, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        if kind == \"iloc\":\n            return self._validate_indexer(\"positional\", key, kind)\n\n        if len(self) and not isinstance(self, ABCMultiIndex):\n\n            # we can raise here if we are definitive that this\n            # is positional indexing (eg. .ix on with a float)\n            # or label indexing if we are using a type able\n            # to be represented in the index\n\n            if kind in [\"getitem\", \"ix\"] and is_float(key):\n                if not self.is_floating():\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_float(key):\n\n                # we want to raise KeyError on string/mixed here\n                # technically we *could* raise a TypeError\n                # on anything but mixed though\n                if self.inferred_type not in [\n                    \"floating\",\n                    \"mixed-integer-float\",\n                    \"integer-na\",\n                    \"string\",\n                    \"unicode\",\n                    \"mixed\",\n                ]:\n                    return self._invalid_indexer(\"label\", key)\n\n            elif kind in [\"loc\"] and is_integer(key):\n                if not self.holds_integer():\n                    return self._invalid_indexer(\"label\", key)\n\n        return key",
        "begin_line": 3036,
        "end_line": 3072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011312217194570137,
            "pseudo_dstar_susp": 0.0007763975155279503,
            "pseudo_tarantula_susp": 0.0012121212121212121,
            "pseudo_op2_susp": 0.0007763975155279503,
            "pseudo_barinel_susp": 0.0012121212121212121
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._convert_slice_indexer#3089",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._convert_slice_indexer(self, key: slice, kind=None)",
        "snippet": "    def _convert_slice_indexer(self, key: slice, kind=None):\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\", None]\n\n        # validate iloc\n        if kind == \"iloc\":\n            return slice(\n                self._validate_indexer(\"slice\", key.start, kind),\n                self._validate_indexer(\"slice\", key.stop, kind),\n                self._validate_indexer(\"slice\", key.step, kind),\n            )\n\n        # potentially cast the bounds to integers\n        start, stop, step = key.start, key.stop, key.step\n\n        # figure out if this is a positional indexer\n        def is_int(v):\n            return v is None or is_integer(v)\n\n        is_null_slicer = start is None and stop is None\n        is_index_slice = is_int(start) and is_int(stop)\n        is_positional = is_index_slice and not self.is_integer()\n\n        if kind == \"getitem\":\n            \"\"\"\n            called from the getitem slicers, validate that we are in fact\n            integers\n            \"\"\"\n            if self.is_integer() or is_index_slice:\n                return slice(\n                    self._validate_indexer(\"slice\", key.start, kind),\n                    self._validate_indexer(\"slice\", key.stop, kind),\n                    self._validate_indexer(\"slice\", key.step, kind),\n                )\n\n        # convert the slice to an indexer here\n\n        # if we are mixed and have integers\n        try:\n            if is_positional and self.is_mixed():\n                # Validate start & stop\n                if start is not None:\n                    self.get_loc(start)\n                if stop is not None:\n                    self.get_loc(stop)\n                is_positional = False\n        except KeyError:\n            if self.inferred_type in [\"mixed-integer-float\", \"integer-na\"]:\n                raise\n\n        if is_null_slicer:\n            indexer = key\n        elif is_positional:\n            indexer = key\n        else:\n            indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n        return indexer",
        "begin_line": 3089,
        "end_line": 3145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_int#3104",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_int(v)",
        "snippet": "        def is_int(v):\n            return v is None or is_integer(v)",
        "begin_line": 3104,
        "end_line": 3105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3817",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3817,
        "end_line": 3836,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009416195856873823,
            "pseudo_dstar_susp": 0.003937007874015748,
            "pseudo_tarantula_susp": 0.0008084074373484236,
            "pseudo_op2_susp": 0.003937007874015748,
            "pseudo_barinel_susp": 0.0008084074373484236
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3839",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:\n        # TODO(EA): remove index types as they become extension arrays\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray, ExtensionArray, or Index subclass. This differs\n        from ``_ndarray_values``, which always returns an ndarray.\n\n        Both ``_values`` and ``_ndarray_values`` are consistent between\n        ``Series`` and ``Index``.\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       | _ndarray_values |\n        ----------------- | --------------- | ------------- | --------------- |\n        Index             | ndarray         | ndarray       | ndarray         |\n        CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n        DatetimeIndex     | ndarray[M8ns]   | ndarray[M8ns] | ndarray[M8ns]   |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DTI[tz]       | ndarray[M8ns]   |\n        PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n        IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n        See Also\n        --------\n        values\n        _ndarray_values\n        \"\"\"\n        return self._data",
        "begin_line": 3839,
        "end_line": 3866,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006430868167202572,
            "pseudo_dstar_susp": 0.0006430868167202572,
            "pseudo_tarantula_susp": 0.0008149959250203749,
            "pseudo_op2_susp": 0.0006430868167202572,
            "pseudo_barinel_susp": 0.0008149959250203749
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._internal_get_values#3921",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._internal_get_values(self)",
        "snippet": "    def _internal_get_values(self):\n        return self.values",
        "begin_line": 3921,
        "end_line": 3922,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._try_convert_to_int_index#3974",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._try_convert_to_int_index(cls, data, copy, name, dtype)",
        "snippet": "    def _try_convert_to_int_index(cls, data, copy, name, dtype):\n        \"\"\"\n        Attempt to convert an array of data into an integer index.\n\n        Parameters\n        ----------\n        data : The data to convert.\n        copy : Whether to copy the data or not.\n        name : The name of the index returned.\n\n        Returns\n        -------\n        int_index : data converted to either an Int64Index or a\n                    UInt64Index\n\n        Raises\n        ------\n        ValueError if the conversion was not successful.\n        \"\"\"\n\n        from .numeric import Int64Index, UInt64Index\n\n        if not is_unsigned_integer_dtype(dtype):\n            # skip int64 conversion attempt if uint-like dtype is passed, as\n            # this could return Int64Index when UInt64Index is what's desired\n            try:\n                res = data.astype(\"i8\", copy=False)\n                if (res == data).all():\n                    return Int64Index(res, copy=copy, name=name)\n            except (OverflowError, TypeError, ValueError):\n                pass\n\n        # Conversion to int64 failed (possibly due to overflow) or was skipped,\n        # so let's try now with uint64.\n        try:\n            res = data.astype(\"u8\", copy=False)\n            if (res == data).all():\n                return UInt64Index(res, copy=copy, name=name)\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n        raise ValueError",
        "begin_line": 3974,
        "end_line": 4015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002577319587628866,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_to_ndarray#4034",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_to_ndarray(cls, data)",
        "snippet": "    def _coerce_to_ndarray(cls, data):\n        \"\"\"\n        Coerces data to ndarray.\n\n        Converts other iterables to list first and then to array.\n        Does not touch ndarrays.\n\n        Raises\n        ------\n        TypeError\n            When the data passed in is a scalar.\n        \"\"\"\n\n        if not isinstance(data, (np.ndarray, Index)):\n            if data is None or is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n            data = np.asarray(data)\n        return data",
        "begin_line": 4034,
        "end_line": 4055,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011904761904761906,
            "pseudo_dstar_susp": 0.0007892659826361484,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.0007892659826361484,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._coerce_scalar_to_index#4057",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._coerce_scalar_to_index(self, item)",
        "snippet": "    def _coerce_scalar_to_index(self, item):\n        \"\"\"\n        We need to coerce a scalar to a compat for our index type.\n\n        Parameters\n        ----------\n        item : scalar item to coerce\n        \"\"\"\n        dtype = self.dtype\n\n        if self._is_numeric_dtype and isna(item):\n            # We can't coerce to the numeric dtype of \"self\" (unless\n            # it's float) if there are NaN values in our output.\n            dtype = None\n\n        return Index([item], dtype=dtype, **self._get_attributes_dict())",
        "begin_line": 4057,
        "end_line": 4072,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#4144",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key)",
        "snippet": "    def __contains__(self, key):\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 4144,
        "end_line": 4149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4177",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        key = com.values_from_object(key)\n        result = getitem(key)\n        if not is_scalar(result):\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4177,
        "end_line": 4210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011904761904761906,
            "pseudo_dstar_susp": 0.0007892659826361484,
            "pseudo_tarantula_susp": 0.0012437810945273632,
            "pseudo_op2_susp": 0.0007892659826361484,
            "pseudo_barinel_susp": 0.0012437810945273632
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name#4212",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_hold_identifiers_and_holds_name(self, name)",
        "snippet": "    def _can_hold_identifiers_and_holds_name(self, name):\n        \"\"\"\n        Faster check for ``name in self`` when we know `name` is a Python\n        identifier (e.g. in NDFrame.__getattr__, which hits this to support\n        . key lookup). For indexes that can't hold identifiers (everything\n        but object & categorical) we just return False.\n\n        https://github.com/pandas-dev/pandas/issues/19764\n        \"\"\"\n        if self.is_object() or self.is_categorical():\n            return name in self\n        return False",
        "begin_line": 4212,
        "end_line": 4223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4303",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other)",
        "snippet": "    def equals(self, other):\n        \"\"\"\n        Determine if two Index objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements as calling\n            index; False otherwise.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self) and not is_object_dtype(other):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        return array_equivalent(\n            com.values_from_object(self), com.values_from_object(other)\n        )",
        "begin_line": 4303,
        "end_line": 4325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4327",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other):\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4327,
        "end_line": 4347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019805902158843335,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_value#4624",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_value(self, series, key)",
        "snippet": "    def get_value(self, series, key):\n\n        # if we have something that is Index-like, then\n        # use this, e.g. DatetimeIndex\n        # Things like `Series._get_value` (via .at) pass the EA directly here.\n        s = getattr(series, \"_values\", series)\n        if isinstance(s, (ExtensionArray, Index)) and is_scalar(key):\n            # GH 20882, 21257\n            # Unify Index and ExtensionArray treatment\n            # First try to convert the key to a location\n            # If that fails, raise a KeyError if an integer\n            # index, otherwise, see if key is an integer, and\n            # try that\n            try:\n                iloc = self.get_loc(key)\n                return s[iloc]\n            except KeyError:\n                if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                    raise\n                elif is_integer(key):\n                    return s[key]\n\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        k = self._convert_scalar_indexer(k, kind=\"getitem\")\n        try:\n            return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n        except KeyError as e1:\n            if len(self) > 0 and (self.holds_integer() or self.is_boolean()):\n                raise\n\n            try:\n                return libindex.get_value_at(s, key)\n            except IndexError:\n                raise\n            except TypeError:\n                # generator/iterator-like\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:\n                raise e1\n        except TypeError:\n            # e.g. \"[False] is an invalid key\"\n            if is_scalar(key):\n                raise IndexError(key)\n            raise InvalidIndexError(key)",
        "begin_line": 4624,
        "end_line": 4672,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001282051282051282,
            "pseudo_dstar_susp": 0.0008143322475570033,
            "pseudo_tarantula_susp": 0.00130718954248366,
            "pseudo_op2_susp": 0.0008143322475570033,
            "pseudo_barinel_susp": 0.00130718954248366
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4970",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n\n        if is_float(key) and not self.is_floating():\n            try:\n                ckey = int(key)\n                if ckey == key:\n                    key = ckey\n            except (OverflowError, ValueError, TypeError):\n                pass\n        return key",
        "begin_line": 4970,
        "end_line": 4983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_indexer#4985",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_indexer(self, form, key, kind)",
        "snippet": "    def _validate_indexer(self, form, key, kind):\n        \"\"\"\n        If we are positional indexer, validate that we have appropriate\n        typed bounds must be an integer.\n        \"\"\"\n        assert kind in [\"ix\", \"loc\", \"getitem\", \"iloc\"]\n\n        if key is None:\n            pass\n        elif is_integer(key):\n            pass\n        elif kind in [\"iloc\", \"getitem\"]:\n            self._invalid_indexer(form, key)\n        return key",
        "begin_line": 4985,
        "end_line": 4998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021039343572480537,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.insert#5220",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.insert(self, loc, item)",
        "snippet": "    def insert(self, loc, item):\n        \"\"\"\n        Make new Index inserting new item at location.\n\n        Follows Python list.append semantics for negative values.\n\n        Parameters\n        ----------\n        loc : int\n        item : object\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        _self = np.asarray(self)\n        item = self._coerce_scalar_to_index(item)._ndarray_values\n        idx = np.concatenate((_self[:loc], item, _self[loc:]))\n        return self._shallow_copy_with_infer(idx)",
        "begin_line": 5220,
        "end_line": 5238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5541",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from .multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5541,
        "end_line": 5605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011695906432748538,
            "pseudo_dstar_susp": 0.006493506493506494,
            "pseudo_tarantula_susp": 0.0010526315789473684,
            "pseudo_op2_susp": 0.006493506493506494,
            "pseudo_barinel_susp": 0.0010526315789473684
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5635",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.index import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5635,
        "end_line": 5638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009285051067780873,
            "pseudo_dstar_susp": 0.003745318352059925,
            "pseudo_tarantula_susp": 0.0007980845969672786,
            "pseudo_op2_susp": 0.003745318352059925,
            "pseudo_barinel_susp": 0.0007980845969672786
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n    @classmethod\n    def _check(cls, inst):\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006798096532970768,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0005995203836930455,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0005995203836930455
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#8",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst):\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 8,
        "end_line": 9,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006798096532970768,
            "pseudo_dstar_susp": 0.0019801980198019802,
            "pseudo_tarantula_susp": 0.0005995203836930455,
            "pseudo_op2_susp": 0.0019801980198019802,
            "pseudo_barinel_susp": 0.0005995203836930455
        }
    },
    {
        "name": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__#77",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic._ABCGeneric",
        "signature": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls, inst)",
        "snippet": "    def __instancecheck__(cls, inst):\n        return hasattr(inst, \"_data\")",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021753317380900588,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.dtypes.concat.get_dtype_kinds#31",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.get_dtype_kinds(l)",
        "snippet": "def get_dtype_kinds(l):\n    \"\"\"\n    Parameters\n    ----------\n    l : list of arrays\n\n    Returns\n    -------\n    a set of kinds that exist in this list of arrays\n    \"\"\"\n\n    typs = set()\n    for arr in l:\n\n        dtype = arr.dtype\n        if is_categorical_dtype(dtype):\n            typ = \"category\"\n        elif is_sparse(arr):\n            typ = \"sparse\"\n        elif isinstance(arr, ABCRangeIndex):\n            typ = \"range\"\n        elif is_datetime64tz_dtype(arr):\n            # if to_concat contains different tz,\n            # the result must be object dtype\n            typ = str(arr.dtype)\n        elif is_datetime64_dtype(dtype):\n            typ = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            typ = \"timedelta\"\n        elif is_object_dtype(dtype):\n            typ = \"object\"\n        elif is_bool_dtype(dtype):\n            typ = \"bool\"\n        elif is_extension_array_dtype(dtype):\n            typ = str(arr.dtype)\n        else:\n            typ = dtype.kind\n        typs.add(typ)\n    return typs",
        "begin_line": 31,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_compat#72",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_compat(to_concat, axis=0)",
        "snippet": "def concat_compat(to_concat, axis=0):\n    \"\"\"\n    provide concatenation of an array of arrays each of which is a single\n    'normalized' dtypes (in that for example, if it's object, then it is a\n    non-datetimelike and provide a combined dtype for the resulting array that\n    preserves the overall dtype if possible)\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n\n    # filter empty arrays\n    # 1-d dtypes always are included here\n    def is_nonempty(x):\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0\n\n    # If all arrays are empty, there's nothing to convert, just short-cut to\n    # the concatenation, #3121.\n    #\n    # Creating an empty array directly is tempting, but the winnings would be\n    # marginal given that it would still require shape & dtype calculation and\n    # np.concatenate which has them both implemented is compiled.\n\n    typs = get_dtype_kinds(to_concat)\n    _contains_datetime = any(typ.startswith(\"datetime\") for typ in typs)\n    _contains_period = any(typ.startswith(\"period\") for typ in typs)\n\n    if \"category\" in typs:\n        # this must be prior to concat_datetime,\n        # to support Categorical + datetime-like\n        return concat_categorical(to_concat, axis=axis)\n\n    elif _contains_datetime or \"timedelta\" in typs or _contains_period:\n        return concat_datetime(to_concat, axis=axis, typs=typs)\n\n    # these are mandated to handle empties as well\n    elif \"sparse\" in typs:\n        return _concat_sparse(to_concat, axis=axis, typs=typs)\n\n    all_empty = all(not is_nonempty(x) for x in to_concat)\n    if any(is_extension_array_dtype(x) for x in to_concat) and axis == 1:\n        to_concat = [np.atleast_2d(x.astype(\"object\")) for x in to_concat]\n\n    if all_empty:\n        # we have all empties, but may need to coerce the result dtype to\n        # object if we have non-numeric type operands (numpy would otherwise\n        # cast this to float)\n        typs = get_dtype_kinds(to_concat)\n        if len(typs) != 1:\n\n            if not len(typs - {\"i\", \"u\", \"f\"}) or not len(typs - {\"bool\", \"i\", \"u\"}):\n                # let numpy coerce\n                pass\n            else:\n                # coerce to object\n                to_concat = [x.astype(\"object\") for x in to_concat]\n\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 72,
        "end_line": 137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.dtypes.concat.is_nonempty#91",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.is_nonempty(x)",
        "snippet": "    def is_nonempty(x):\n        if x.ndim <= axis:\n            return True\n        return x.shape[axis] > 0",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.dtypes.concat._concatenate_2d#357",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat._concatenate_2d(to_concat, axis)",
        "snippet": "def _concatenate_2d(to_concat, axis):\n    # coerce to 2d if needed & concatenate\n    if axis == 1:\n        to_concat = [np.atleast_2d(x) for x in to_concat]\n    return np.concatenate(to_concat, axis=axis)",
        "begin_line": 357,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.dtypes.concat.concat_datetime#364",
        "src_path": "pandas/core/dtypes/concat.py",
        "class_name": "pandas.core.dtypes.concat",
        "signature": "pandas.core.dtypes.concat.concat_datetime(to_concat, axis=0, typs=None)",
        "snippet": "def concat_datetime(to_concat, axis=0, typs=None):\n    \"\"\"\n    provide concatenation of an datetimelike array of arrays each of which is a\n    single M8[ns], datetimet64[ns, tz] or m8[ns] dtype\n\n    Parameters\n    ----------\n    to_concat : array of arrays\n    axis : axis to provide concatenation\n    typs : set of to_concat dtypes\n\n    Returns\n    -------\n    a single array, preserving the combined dtypes\n    \"\"\"\n\n    if typs is None:\n        typs = get_dtype_kinds(to_concat)\n\n    # multiple types, need to coerce to object\n    if len(typs) != 1:\n        return _concatenate_2d(\n            [_convert_datetimelike_to_object(x) for x in to_concat], axis=axis\n        )\n\n    # must be single dtype\n    if any(typ.startswith(\"datetime\") for typ in typs):\n\n        if \"datetime\" in typs:\n            to_concat = [x.astype(np.int64, copy=False) for x in to_concat]\n            return _concatenate_2d(to_concat, axis=axis).view(_NS_DTYPE)\n        else:\n            # when to_concat has different tz, len(typs) > 1.\n            # thus no need to care\n            return _concat_datetimetz(to_concat)\n\n    elif \"timedelta\" in typs:\n        return _concatenate_2d([x.view(np.int64) for x in to_concat], axis=axis).view(\n            _TD_DTYPE\n        )\n\n    elif any(typ.startswith(\"period\") for typ in typs):\n        assert len(typs) == 1\n        cls = to_concat[0]\n        new_values = cls._concat_same_type(to_concat)\n        return new_values",
        "begin_line": 364,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.set_use_bottleneck#41",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.set_use_bottleneck(v=True)",
        "snippet": "def set_use_bottleneck(v=True):\n    # set/unset to use bottleneck\n    global _USE_BOTTLENECK\n    if _BOTTLENECK_INSTALLED:\n        _USE_BOTTLENECK = v",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002044153720359771,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#56",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 56,
        "end_line": 57,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011185682326621924,
            "pseudo_dstar_susp": 0.005780346820809248,
            "pseudo_tarantula_susp": 0.0010235414534288639,
            "pseudo_op2_susp": 0.005780346820809248,
            "pseudo_barinel_susp": 0.0010235414534288639
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#59",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f)",
        "snippet": "    def __call__(self, f):\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                msg = \"reduction operation {name!r} not allowed for this dtype\"\n                raise TypeError(msg.format(name=f.__name__.replace(\"nan\", \"\")))\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise\n\n        return _f",
        "begin_line": 59,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011185682326621924,
            "pseudo_dstar_susp": 0.005780346820809248,
            "pseudo_tarantula_susp": 0.0010235414534288639,
            "pseudo_op2_susp": 0.005780346820809248,
            "pseudo_barinel_susp": 0.0010235414534288639
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#61",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                msg = \"reduction operation {name!r} not allowed for this dtype\"\n                raise TypeError(msg.format(name=f.__name__.replace(\"nan\", \"\")))\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e)\n                raise",
        "begin_line": 61,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002364066193853428,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.002881844380403458,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.002881844380403458
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.__call__#86",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.__call__(self, alt)",
        "snippet": "    def __call__(self, alt):\n        bn_name = self.name or alt.__name__\n\n        try:\n            bn_func = getattr(bn, bn_name)\n        except (AttributeError, NameError):  # pragma: no cover\n            bn_func = None\n\n        @functools.wraps(alt)\n        def f(values, axis=None, skipna=True, **kwds):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result\n\n        return f",
        "begin_line": 86,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001034126163391934,
            "pseudo_dstar_susp": 0.0047169811320754715,
            "pseudo_tarantula_susp": 0.0009199632014719411,
            "pseudo_op2_susp": 0.0047169811320754715,
            "pseudo_barinel_susp": 0.0009199632014719411
        }
    },
    {
        "name": "pandas.core.nanops.bottleneck_switch.f#95",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.bottleneck_switch",
        "signature": "pandas.core.nanops.bottleneck_switch.f(values, axis=None, skipna=True, **kwds)",
        "snippet": "        def f(values, axis=None, skipna=True, **kwds):\n            if len(self.kwargs) > 0:\n                for k, v in self.kwargs.items():\n                    if k not in kwds:\n                        kwds[k] = v\n\n            if values.size == 0 and kwds.get(\"min_count\") is None:\n                # We are empty, returning NA for our type\n                # Only applies for the default `min_count` of None\n                # since that affects how empty arrays are handled.\n                # TODO(GH-18976) update all the nanops methods to\n                # correctly handle empty inputs and remove this check.\n                # It *may* just be `var`\n                return _na_for_min_count(values, axis)\n\n            if _USE_BOTTLENECK and skipna and _bn_ok_dtype(values.dtype, bn_name):\n                if kwds.get(\"mask\", None) is None:\n                    # `mask` is not recognised by bottleneck, would raise\n                    #  TypeError if called\n                    kwds.pop(\"mask\", None)\n                    result = bn_func(values, axis=axis, **kwds)\n\n                    # prefer to treat inf/-inf as NA, but must compute the func\n                    # twice :(\n                    if _has_infs(result):\n                        result = alt(values, axis=axis, skipna=skipna, **kwds)\n                else:\n                    result = alt(values, axis=axis, skipna=skipna, **kwds)\n            else:\n                result = alt(values, axis=axis, skipna=skipna, **kwds)\n\n            return result",
        "begin_line": 95,
        "end_line": 126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004310344827586207,
            "pseudo_dstar_susp": 0.047619047619047616,
            "pseudo_tarantula_susp": 0.003787878787878788,
            "pseudo_op2_susp": 0.047619047619047616,
            "pseudo_barinel_susp": 0.003787878787878788
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#165",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype, fill_value=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(dtype, fill_value=None, fill_value_typ=None):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 165,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#188",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 188,
        "end_line": 230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007401924500370096,
            "pseudo_dstar_susp": 0.0006775067750677507,
            "pseudo_tarantula_susp": 0.0008968609865470852,
            "pseudo_op2_susp": 0.0006775067750677507,
            "pseudo_barinel_susp": 0.0008968609865470852
        }
    },
    {
        "name": "pandas.core.nanops._get_values#233",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : dtype\n        dtype for values\n    dtype_max : dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    if is_datetime64tz_dtype(values):\n        # lib.values_from_object returns M8[ns] dtype instead of tz-aware,\n        #  so this case must be handled separately from the rest\n        dtype = values.dtype\n        values = getattr(values, \"_values\", values)\n    else:\n        values = lib.values_from_object(values)\n        dtype = values.dtype\n\n    if is_datetime_or_timedelta_dtype(values) or is_datetime64tz_dtype(values):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = getattr(values, \"asi8\", values)\n        values = values.view(np.int64)\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    copy = (mask is not None) and (fill_value is not None)\n\n    if skipna and copy:\n        values = values.copy()\n        if dtype_ok:\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, changed = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.int64\n    elif is_float_dtype(dtype):\n        dtype_max = np.float64\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 233,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0018018018018018018,
            "pseudo_dstar_susp": 0.0009823182711198428,
            "pseudo_tarantula_susp": 0.0018181818181818182,
            "pseudo_op2_susp": 0.0009823182711198428,
            "pseudo_barinel_susp": 0.0018181818181818182
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#335",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype)",
        "snippet": "def _na_ok_dtype(dtype):\n    # TODO: what about datetime64tz?  PeriodDtype?\n    return not issubclass(dtype.type, (np.integer, np.timedelta64, np.datetime64))",
        "begin_line": 335,
        "end_line": 337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0005973715651135006,
            "pseudo_dstar_susp": 0.0005973715651135006,
            "pseudo_tarantula_susp": 0.000646830530401035,
            "pseudo_op2_susp": 0.0005973715651135006,
            "pseudo_barinel_susp": 0.000646830530401035
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#340",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n\n    if is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            result = result.view(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    return result",
        "begin_line": 340,
        "end_line": 368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops._na_for_min_count#371",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_for_min_count(values, axis: Optional[int])",
        "snippet": "def _na_for_min_count(values, axis: Optional[int]):\n    \"\"\"\n    Return the missing value for `values`.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int or None\n        axis for the reduction, required if values.ndim > 1.\n\n    Returns\n    -------\n    result : scalar or ndarray\n        For 1-D values, returns a scalar of the correct missing type.\n        For 2-D values, returns a 1-D array where each element is missing.\n    \"\"\"\n    # we either return np.nan or pd.NaT\n    if is_numeric_dtype(values):\n        values = values.astype(\"float64\")\n    fill_value = na_value_for_dtype(values.dtype)\n\n    if values.ndim == 1:\n        return fill_value\n    else:\n        assert axis is not None  # assertion to make mypy happy\n        result_shape = values.shape[:axis] + values.shape[axis + 1 :]\n        result = np.empty(result_shape, dtype=values.dtype)\n        result.fill(fill_value)\n        return result",
        "begin_line": 371,
        "end_line": 399,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002183406113537118,
            "pseudo_dstar_susp": 0.0010845986984815619,
            "pseudo_tarantula_susp": 0.0025380710659898475,
            "pseudo_op2_susp": 0.0010845986984815619,
            "pseudo_barinel_susp": 0.0025380710659898475
        }
    },
    {
        "name": "pandas.core.nanops.nanany#402",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanany(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanany(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if any elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2])\n    >>> nanops.nanany(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([np.nan])\n    >>> nanops.nanany(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=False, mask=mask)\n    return values.any(axis)",
        "begin_line": 402,
        "end_line": 431,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nanall#434",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanall(values, axis=None, skipna: bool=True, mask=None)",
        "snippet": "def nanall(values, axis=None, skipna: bool = True, mask=None):\n    \"\"\"\n    Check if all elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanall(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 0])\n    >>> nanops.nanall(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=True, mask=mask)\n    return values.all(axis)",
        "begin_line": 434,
        "end_line": 463,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021915406530791147,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nansum#467",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values, axis=None, skipna=True, min_count=0, mask=None)",
        "snippet": "def nansum(values, axis=None, skipna=True, min_count=0, mask=None):\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 467,
        "end_line": 502,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.nanmean#507",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanmean(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanmean(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Compute the mean of the element along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanmean(s)\n    1.5\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    dtype_count = np.float64\n    if (\n        is_integer_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n    ):\n        dtype_sum = np.float64\n    elif is_float_dtype(dtype):\n        dtype_sum = dtype\n        dtype_count = dtype\n    count = _get_counts(values.shape, mask, axis, dtype=dtype_count)\n    the_sum = _ensure_numeric(values.sum(axis, dtype=dtype_sum))\n\n    if axis is not None and getattr(the_sum, \"ndim\", False):\n        with np.errstate(all=\"ignore\"):\n            # suppress division by zero warnings\n            the_mean = the_sum / count\n        ct_mask = count == 0\n        if ct_mask.any():\n            the_mean[ct_mask] = np.nan\n    else:\n        the_mean = the_sum / count if count > 0 else np.nan\n\n    return _wrap_results(the_mean, dtype)",
        "begin_line": 507,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.get_median#589",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.get_median(x)",
        "snippet": "    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])",
        "begin_line": 589,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.06666666666666667,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.06666666666666667,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.nanops.nanmedian#565",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanmedian(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanmedian(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 2])\n    >>> nanops.nanmedian(s)\n    2.0\n    \"\"\"\n\n    def get_median(x):\n        mask = notna(x)\n        if not skipna and not mask.all():\n            return np.nan\n        return np.nanmedian(x[mask])\n\n    values, mask, dtype, dtype_max, _ = _get_values(values, skipna, mask=mask)\n    if not is_float_dtype(values):\n        values = values.astype(\"f8\")\n        if mask is not None:\n            values[mask] = np.nan\n\n    if axis is None:\n        values = values.ravel()\n\n    notempty = values.size\n\n    # an array from a frame\n    if values.ndim > 1:\n\n        # there's a non-empty array to apply over otherwise numpy raises\n        if notempty:\n            if not skipna:\n                return _wrap_results(\n                    np.apply_along_axis(get_median, axis, values), dtype\n                )\n\n            # fastpath for the skipna case\n            return _wrap_results(np.nanmedian(values, axis), dtype)\n\n        # must return the correct shape, but median is not defined for the\n        # empty set so return nans of shape \"everything but the passed axis\"\n        # since \"axis\" is where the reduction would occur if we had a nonempty\n        # array\n        shp = np.array(values.shape)\n        dims = np.arange(values.ndim)\n        ret = np.empty(shp[dims != axis])\n        ret.fill(np.nan)\n        return _wrap_results(ret, dtype)\n\n    # otherwise return a scalar value\n    return _wrap_results(get_median(values) if notempty else np.nan, dtype)",
        "begin_line": 565,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops._get_counts_nanvar#633",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts_nanvar(value_counts: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], ddof: int, dtype=float)",
        "snippet": "def _get_counts_nanvar(\n    value_counts: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    ddof: int,\n    dtype=float,\n) -> Tuple[Union[int, np.ndarray], Union[int, np.ndarray]]:\n    \"\"\" Get the count of non-null values along an axis, accounting\n    for degrees of freedom.\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    ddof : int\n        degrees of freedom\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    d : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    count = _get_counts(value_counts, mask, axis, dtype=dtype)\n    d = count - dtype.type(ddof)\n\n    # always return NaN, never inf\n    if is_scalar(count):\n        if count <= ddof:\n            count = np.nan\n            d = np.nan\n    else:\n        mask2 = count <= ddof  # type: np.ndarray\n        if mask2.any():\n            np.putmask(d, mask2, np.nan)\n            np.putmask(count, mask2, np.nan)\n    return count, d",
        "begin_line": 633,
        "end_line": 675,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.nanstd#680",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanstd(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanstd(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the standard deviation along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanstd(s)\n    1.0\n    \"\"\"\n    result = np.sqrt(nanvar(values, axis=axis, skipna=skipna, ddof=ddof, mask=mask))\n    return _wrap_results(result, values.dtype)",
        "begin_line": 680,
        "end_line": 709,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.003875968992248062,
            "pseudo_dstar_susp": 0.0012453300124533001,
            "pseudo_tarantula_susp": 0.004132231404958678,
            "pseudo_op2_susp": 0.0012453300124533001,
            "pseudo_barinel_susp": 0.004132231404958678
        }
    },
    {
        "name": "pandas.core.nanops.nanvar#714",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanvar(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nanvar(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the variance along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nanvar(s)\n    1.0\n    \"\"\"\n    values = lib.values_from_object(values)\n    dtype = values.dtype\n    mask = _maybe_get_mask(values, skipna, mask)\n    if is_any_int_dtype(values):\n        values = values.astype(\"f8\")\n        if mask is not None:\n            values[mask] = np.nan\n\n    if is_float_dtype(values):\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)\n    else:\n        count, d = _get_counts_nanvar(values.shape, mask, axis, ddof)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    # xref GH10242\n    # Compute variance via two-pass algorithm, which is stable against\n    # cancellation errors and relatively accurate for small numbers of\n    # observations.\n    #\n    # See https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    avg = _ensure_numeric(values.sum(axis=axis, dtype=np.float64)) / count\n    if axis is not None:\n        avg = np.expand_dims(avg, axis)\n    sqr = _ensure_numeric((avg - values) ** 2)\n    if mask is not None:\n        np.putmask(sqr, mask, 0)\n    result = sqr.sum(axis=axis, dtype=np.float64) / d\n\n    # Return variance as np.float64 (the datatype used in the accumulator),\n    # unless we were dealing with a float array, in which case use the same\n    # precision as the original values array.\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n    return _wrap_results(result, values.dtype)",
        "begin_line": 714,
        "end_line": 778,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.nansem#782",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansem(values, axis=None, skipna=True, ddof=1, mask=None)",
        "snippet": "def nansem(values, axis=None, skipna=True, ddof=1, mask=None):\n    \"\"\"\n    Compute the standard error in the mean along given axis while ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    ddof : int, default 1\n        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,\n        where N represents the number of elements.\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, np.nan, 2, 3])\n    >>> nanops.nansem(s)\n     0.5773502691896258\n    \"\"\"\n\n    # This checks if non-numeric-like data is passed with numeric_only=False\n    # and raises a TypeError otherwise\n    nanvar(values, axis, skipna, ddof=ddof, mask=mask)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n    if not is_float_dtype(values.dtype):\n        values = values.astype(\"f8\")\n\n    count, _ = _get_counts_nanvar(values.shape, mask, axis, ddof, values.dtype)\n    var = nanvar(values, axis, skipna, ddof=ddof)\n\n    return np.sqrt(var) / np.sqrt(count)",
        "begin_line": 782,
        "end_line": 822,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops._nanminmax#825",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._nanminmax(meth, fill_value_typ)",
        "snippet": "def _nanminmax(meth, fill_value_typ):\n    @bottleneck_switch(name=\"nan\" + meth)\n    def reduction(values, axis=None, skipna=True, mask=None):\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError, np.core._internal.AxisError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)\n\n    return reduction",
        "begin_line": 825,
        "end_line": 845,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001837897445322551,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.reduction#827",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.reduction(values, axis=None, skipna=True, mask=None)",
        "snippet": "    def reduction(values, axis=None, skipna=True, mask=None):\n\n        values, mask, dtype, dtype_max, fill_value = _get_values(\n            values, skipna, fill_value_typ=fill_value_typ, mask=mask\n        )\n\n        if (axis is not None and values.shape[axis] == 0) or values.size == 0:\n            try:\n                result = getattr(values, meth)(axis, dtype=dtype_max)\n                result.fill(np.nan)\n            except (AttributeError, TypeError, ValueError, np.core._internal.AxisError):\n                result = np.nan\n        else:\n            result = getattr(values, meth)(axis)\n\n        result = _wrap_results(result, dtype, fill_value)\n        return _maybe_null_out(result, axis, mask, values.shape)",
        "begin_line": 827,
        "end_line": 843,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0001837897445322551,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nanargmax#853",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanargmax(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanargmax(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : int\n        The index of max value in specified axis or -1 in the NA case\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, 3, np.nan, 4])\n    >>> nanops.nanargmax(s)\n    4\n    \"\"\"\n    values, mask, dtype, _, _ = _get_values(\n        values, True, fill_value_typ=\"-inf\", mask=mask\n    )\n    result = values.argmax(axis)\n    result = _maybe_arg_null_out(result, axis, mask, skipna)\n    return result",
        "begin_line": 853,
        "end_line": 880,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022893772893772894,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nanargmin#884",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanargmin(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanargmin(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : int\n        The index of min value in specified axis or -1 in the NA case\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, 3, np.nan, 4])\n    >>> nanops.nanargmin(s)\n    0\n    \"\"\"\n    values, mask, dtype, _, _ = _get_values(\n        values, True, fill_value_typ=\"+inf\", mask=mask\n    )\n    result = values.argmin(axis)\n    result = _maybe_arg_null_out(result, axis, mask, skipna)\n    return result",
        "begin_line": 884,
        "end_line": 911,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00022351363433169424,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nanskew#915",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanskew(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nanskew(values, axis=None, skipna=True, mask=None):\n    \"\"\" Compute the sample skewness.\n\n    The statistic computed here is the adjusted Fisher-Pearson standardized\n    moment coefficient G1. The algorithm computes this coefficient directly\n    from the second and third central moment.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1,np.nan, 1, 2])\n    >>> nanops.nanskew(s)\n    1.7320508075688787\n    \"\"\"\n    values = lib.values_from_object(values)\n    mask = _maybe_get_mask(values, skipna, mask)\n    if not is_float_dtype(values.dtype):\n        values = values.astype(\"f8\")\n        count = _get_counts(values.shape, mask, axis)\n    else:\n        count = _get_counts(values.shape, mask, axis, dtype=values.dtype)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    mean = values.sum(axis, dtype=np.float64) / count\n    if axis is not None:\n        mean = np.expand_dims(mean, axis)\n\n    adjusted = values - mean\n    if skipna and mask is not None:\n        np.putmask(adjusted, mask, 0)\n    adjusted2 = adjusted ** 2\n    adjusted3 = adjusted2 * adjusted\n    m2 = adjusted2.sum(axis, dtype=np.float64)\n    m3 = adjusted3.sum(axis, dtype=np.float64)\n\n    # floating point error\n    #\n    # #18044 in _libs/windows.pyx calc_skew follow this behavior\n    # to fix the fperr to treat m2 <1e-14 as zero\n    m2 = _zero_out_fperr(m2)\n    m3 = _zero_out_fperr(m3)\n\n    with np.errstate(invalid=\"ignore\", divide=\"ignore\"):\n        result = (count * (count - 1) ** 0.5 / (count - 2)) * (m3 / m2 ** 1.5)\n\n    dtype = values.dtype\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n\n    if isinstance(result, np.ndarray):\n        result = np.where(m2 == 0, 0, result)\n        result[count < 3] = np.nan\n        return result\n    else:\n        result = 0 if m2 == 0 else result\n        if count < 3:\n            return np.nan\n        return result",
        "begin_line": 915,
        "end_line": 989,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nankurt#993",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nankurt(values, axis=None, skipna=True, mask=None)",
        "snippet": "def nankurt(values, axis=None, skipna=True, mask=None):\n    \"\"\"\n    Compute the sample excess kurtosis\n\n    The statistic computed here is the adjusted Fisher-Pearson standardized\n    moment coefficient G2, computed directly from the second and fourth\n    central moment.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : float64\n        Unless input is a float array, in which case use the same\n        precision as the input array.\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1,np.nan, 1, 3, 2])\n    >>> nanops.nankurt(s)\n    -1.2892561983471076\n    \"\"\"\n    values = lib.values_from_object(values)\n    mask = _maybe_get_mask(values, skipna, mask)\n    if not is_float_dtype(values.dtype):\n        values = values.astype(\"f8\")\n        count = _get_counts(values.shape, mask, axis)\n    else:\n        count = _get_counts(values.shape, mask, axis, dtype=values.dtype)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        np.putmask(values, mask, 0)\n\n    mean = values.sum(axis, dtype=np.float64) / count\n    if axis is not None:\n        mean = np.expand_dims(mean, axis)\n\n    adjusted = values - mean\n    if skipna and mask is not None:\n        np.putmask(adjusted, mask, 0)\n    adjusted2 = adjusted ** 2\n    adjusted4 = adjusted2 ** 2\n    m2 = adjusted2.sum(axis, dtype=np.float64)\n    m4 = adjusted4.sum(axis, dtype=np.float64)\n\n    with np.errstate(invalid=\"ignore\", divide=\"ignore\"):\n        adj = 3 * (count - 1) ** 2 / ((count - 2) * (count - 3))\n        numer = count * (count + 1) * (count - 1) * m4\n        denom = (count - 2) * (count - 3) * m2 ** 2\n\n    # floating point error\n    #\n    # #18044 in _libs/windows.pyx calc_kurt follow this behavior\n    # to fix the fperr to treat denom <1e-14 as zero\n    numer = _zero_out_fperr(numer)\n    denom = _zero_out_fperr(denom)\n\n    if not isinstance(denom, np.ndarray):\n        # if ``denom`` is a scalar, check these corner cases first before\n        # doing division\n        if count < 4:\n            return np.nan\n        if denom == 0:\n            return 0\n\n    with np.errstate(invalid=\"ignore\", divide=\"ignore\"):\n        result = numer / denom - adj\n\n    dtype = values.dtype\n    if is_float_dtype(dtype):\n        result = result.astype(dtype)\n\n    if isinstance(result, np.ndarray):\n        result = np.where(denom == 0, 0, result)\n        result[count < 4] = np.nan\n\n    return result",
        "begin_line": 993,
        "end_line": 1077,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops.nanprod#1081",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanprod(values, axis=None, skipna=True, min_count=0, mask=None)",
        "snippet": "def nanprod(values, axis=None, skipna=True, min_count=0, mask=None):\n    \"\"\"\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, 3, np.nan])\n    >>> nanops.nanprod(s)\n    6.0\n\n    Returns\n    -------\n    The product of all elements on a given axis. ( NaNs are treated as 1)\n    \"\"\"\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    if skipna and mask is not None:\n        values = values.copy()\n        values[mask] = 1\n    result = values.prod(axis)\n    return _maybe_null_out(result, axis, mask, values.shape, min_count=min_count)",
        "begin_line": 1081,
        "end_line": 1113,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops._maybe_arg_null_out#1116",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_arg_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], skipna: bool)",
        "snippet": "def _maybe_arg_null_out(\n    result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], skipna: bool\n) -> Union[np.ndarray, int]:\n    # helper function for nanargmin/nanargmax\n    if mask is None:\n        return result\n\n    if axis is None or not getattr(result, \"ndim\", False):\n        if skipna:\n            if mask.all():\n                result = -1\n        else:\n            if mask.any():\n                result = -1\n    else:\n        if skipna:\n            na_mask = mask.all(axis)\n        else:\n            na_mask = mask.any(axis)\n        if na_mask.any():\n            result[na_mask] = -1\n    return result",
        "begin_line": 1116,
        "end_line": 1137,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops._get_counts#1140",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_counts(values_shape: Tuple[int], mask: Optional[np.ndarray], axis: Optional[int], dtype=float)",
        "snippet": "def _get_counts(\n    values_shape: Tuple[int],\n    mask: Optional[np.ndarray],\n    axis: Optional[int],\n    dtype=float,\n) -> Union[int, np.ndarray]:\n    \"\"\" Get the count of non-null values along an axis\n\n    Parameters\n    ----------\n    values_shape : Tuple[int]\n        shape tuple from values ndarray, used if mask is None\n    mask : Optional[ndarray[bool]]\n        locations in values that should be considered missing\n    axis : Optional[int]\n        axis to count along\n    dtype : type, optional\n        type to use for count\n\n    Returns\n    -------\n    count : scalar or array\n    \"\"\"\n    dtype = _get_dtype(dtype)\n    if axis is None:\n        if mask is not None:\n            n = mask.size - mask.sum()\n        else:\n            n = np.prod(values_shape)\n        return dtype.type(n)\n\n    if mask is not None:\n        count = mask.shape[axis] - mask.sum(axis)\n    else:\n        count = values_shape[axis]\n\n    if is_scalar(count):\n        return dtype.type(count)\n    try:\n        return count.astype(dtype)\n    except AttributeError:\n        return np.array(count, dtype=dtype)",
        "begin_line": 1140,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1184",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple, min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple,\n    min_count: int = 1,\n) -> np.ndarray:\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if mask is not None:\n            null_mask = mask.size - mask.sum()\n        else:\n            null_mask = np.prod(shape)\n        if null_mask < min_count:\n            result = np.nan\n\n    return result",
        "begin_line": 1184,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001519756838905775,
            "pseudo_dstar_susp": 0.0008976660682226212,
            "pseudo_tarantula_susp": 0.0015384615384615385,
            "pseudo_op2_susp": 0.0008976660682226212,
            "pseudo_barinel_susp": 0.0015384615384615385
        }
    },
    {
        "name": "pandas.core.nanops._zero_out_fperr#1214",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._zero_out_fperr(arg)",
        "snippet": "def _zero_out_fperr(arg):\n    # #18044 reference this behavior to fix rolling skew/kurt issue\n    if isinstance(arg, np.ndarray):\n        with np.errstate(invalid=\"ignore\"):\n            return np.where(np.abs(arg) < 1e-14, 0, arg)\n    else:\n        return arg.dtype.type(0) if np.abs(arg) < 1e-14 else arg",
        "begin_line": 1214,
        "end_line": 1220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.core.nanops._ensure_numeric#1287",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._ensure_numeric(x)",
        "snippet": "def _ensure_numeric(x):\n    if isinstance(x, np.ndarray):\n        if is_integer_dtype(x) or is_bool_dtype(x):\n            x = x.astype(np.float64)\n        elif is_object_dtype(x):\n            try:\n                x = x.astype(np.complex128)\n            except (TypeError, ValueError):\n                x = x.astype(np.float64)\n            else:\n                if not np.any(np.imag(x)):\n                    x = x.real\n    elif not (is_float(x) or is_integer(x) or is_complex(x)):\n        try:\n            x = float(x)\n        except ValueError:\n            # e.g. \"1+1j\" or \"foo\"\n            try:\n                x = complex(x)\n            except ValueError:\n                # e.g. \"foo\"\n                raise TypeError(\n                    \"Could not convert {value!s} to numeric\".format(value=x)\n                )\n    return x",
        "begin_line": 1287,
        "end_line": 1311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0030864197530864196,
            "pseudo_dstar_susp": 0.0011737089201877935,
            "pseudo_tarantula_susp": 0.0033112582781456954,
            "pseudo_op2_susp": 0.0011737089201877935,
            "pseudo_barinel_susp": 0.0033112582781456954
        }
    },
    {
        "name": "pandas.core.nanops._nanpercentile_1d#1344",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._nanpercentile_1d(values, mask, q, na_value, interpolation)",
        "snippet": "def _nanpercentile_1d(values, mask, q, na_value, interpolation):\n    \"\"\"\n    Wraper for np.percentile that skips missing values, specialized to\n    1-dimensional case.\n\n    Parameters\n    ----------\n    values : array over which to find quantiles\n    mask : ndarray[bool]\n        locations in values that should be considered missing\n    q : scalar or array of quantile indices to find\n    na_value : scalar\n        value to return for empty or all-null values\n    interpolation : str\n\n    Returns\n    -------\n    quantiles : scalar or array\n    \"\"\"\n    # mask is Union[ExtensionArray, ndarray]\n    values = values[~mask]\n\n    if len(values) == 0:\n        if lib.is_scalar(q):\n            return na_value\n        else:\n            return np.array([na_value] * len(q), dtype=values.dtype)\n\n    return np.percentile(values, q, interpolation=interpolation)",
        "begin_line": 1344,
        "end_line": 1372,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.nanops.nanpercentile#1375",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanpercentile(values, q, axis, na_value, mask, ndim, interpolation)",
        "snippet": "def nanpercentile(values, q, axis, na_value, mask, ndim, interpolation):\n    \"\"\"\n    Wraper for np.percentile that skips missing values.\n\n    Parameters\n    ----------\n    values : array over which to find quantiles\n    q : scalar or array of quantile indices to find\n    axis : {0, 1}\n    na_value : scalar\n        value to return for empty or all-null values\n    mask : ndarray[bool]\n        locations in values that should be considered missing\n    ndim : {1, 2}\n    interpolation : str\n\n    Returns\n    -------\n    quantiles : scalar or array\n    \"\"\"\n    if values.dtype.kind in [\"m\", \"M\"]:\n        # need to cast to integer to avoid rounding errors in numpy\n        result = nanpercentile(\n            values.view(\"i8\"), q, axis, na_value.view(\"i8\"), mask, ndim, interpolation\n        )\n\n        # Note: we have to do do `astype` and not view because in general we\n        #  have float result at this point, not i8\n        return result.astype(values.dtype)\n\n    if not lib.is_scalar(mask) and mask.any():\n        if ndim == 1:\n            return _nanpercentile_1d(\n                values, mask, q, na_value, interpolation=interpolation\n            )\n        else:\n            # for nonconsolidatable blocks mask is 1D, but values 2D\n            if mask.ndim < values.ndim:\n                mask = mask.reshape(values.shape)\n            if axis == 0:\n                values = values.T\n                mask = mask.T\n            result = [\n                _nanpercentile_1d(val, m, q, na_value, interpolation=interpolation)\n                for (val, m) in zip(list(values), list(mask))\n            ]\n            result = np.array(result, dtype=values.dtype, copy=False).T\n            return result\n    else:\n        return np.percentile(values, q, axis=axis, interpolation=interpolation)",
        "begin_line": 1375,
        "end_line": 1424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.25,
            "pseudo_dstar_susp": 0.1,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.1,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.util.testing.assert_almost_equal#283",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_almost_equal(left, right, check_dtype='equiv', check_less_precise=False, **kwargs)",
        "snippet": "def assert_almost_equal(\n    left, right, check_dtype=\"equiv\", check_less_precise=False, **kwargs\n):\n    \"\"\"\n    Check that the left and right objects are approximately equal.\n\n    By approximately equal, we refer to objects that are numbers or that\n    contain numbers which may be equivalent to specific levels of precision.\n\n    Parameters\n    ----------\n    left : object\n    right : object\n    check_dtype : bool or {'equiv'}, default 'equiv'\n        Check dtype if both a and b are the same type. If 'equiv' is passed in,\n        then `RangeIndex` and `Int64Index` are also considered equivalent\n        when doing type checking.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. 5 digits (False) or 3 digits (True)\n        after decimal points are compared. If int, then specify the number\n        of digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    \"\"\"\n\n    if isinstance(left, pd.Index):\n        assert_index_equal(\n            left,\n            right,\n            check_exact=False,\n            exact=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs\n        )\n\n    elif isinstance(left, pd.Series):\n        assert_series_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs\n        )\n\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs\n        )\n\n    else:\n        # Other sequences.\n        if check_dtype:\n            if is_number(left) and is_number(right):\n                # Do not compare numeric classes, like np.float64 and float.\n                pass\n            elif is_bool(left) and is_bool(right):\n                # Do not compare bool classes, like np.bool_ and bool.\n                pass\n            else:\n                if isinstance(left, np.ndarray) or isinstance(right, np.ndarray):\n                    obj = \"numpy array\"\n                else:\n                    obj = \"Input\"\n                assert_class_equal(left, right, obj=obj)\n        _testing.assert_almost_equal(\n            left,\n            right,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs\n        )",
        "begin_line": 283,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing._check_isinstance#366",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_isinstance(left, right, cls)",
        "snippet": "def _check_isinstance(left, right, cls):\n    \"\"\"\n    Helper method for our assert_* methods that ensures that\n    the two objects being compared have the right type before\n    proceeding with the comparison.\n\n    Parameters\n    ----------\n    left : The first object being compared.\n    right : The second object being compared.\n    cls : The class type to check against.\n\n    Raises\n    ------\n    AssertionError : Either `left` or `right` is not an instance of `cls`.\n    \"\"\"\n\n    err_msg = \"{name} Expected type {exp_type}, found {act_type} instead\"\n    cls_name = cls.__name__\n\n    if not isinstance(left, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))\n        )\n    if not isinstance(right, cls):\n        raise AssertionError(\n            err_msg.format(name=cls_name, exp_type=cls, act_type=type(right))\n        )",
        "begin_line": 366,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.rands_array#413",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.rands_array(nchars, size, dtype='O')",
        "snippet": "def rands_array(nchars, size, dtype=\"O\"):\n    \"\"\"Generate an array of byte strings.\"\"\"\n    retval = (\n        np.random.choice(RANDS_CHARS, size=nchars * np.prod(size))\n        .view((np.str_, nchars))\n        .reshape(size)\n    )\n    if dtype is None:\n        return retval\n    else:\n        return retval.astype(dtype)",
        "begin_line": 413,
        "end_line": 423,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_index_equal#570",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_index_equal(left: Index, right: Index, exact: Union[bool, str]='equiv', check_names: bool=True, check_less_precise: Union[bool, int]=False, check_exact: bool=True, check_categorical: bool=True, obj: str='Index')",
        "snippet": "def assert_index_equal(\n    left: Index,\n    right: Index,\n    exact: Union[bool, str] = \"equiv\",\n    check_names: bool = True,\n    check_less_precise: Union[bool, int] = False,\n    check_exact: bool = True,\n    check_categorical: bool = True,\n    obj: str = \"Index\",\n) -> None:\n    \"\"\"\n    Check that left and right Index are equal.\n\n    Parameters\n    ----------\n    left : Index\n    right : Index\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    check_names : bool, default True\n        Whether to check the names attribute.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)\n\n    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        labels = index.codes[level]\n        filled = take_1d(unique.values, labels, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values\n\n    # instance validation\n    _check_isinstance(left, right, Index)\n\n    # class / dtype comparison\n    _check_types(left, right, obj=obj)\n\n    # level comparison\n    if left.nlevels != right.nlevels:\n        msg1 = \"{obj} levels are different\".format(obj=obj)\n        msg2 = \"{nlevels}, {left}\".format(nlevels=left.nlevels, left=left)\n        msg3 = \"{nlevels}, {right}\".format(nlevels=right.nlevels, right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{obj} length are different\".format(obj=obj)\n        msg2 = \"{length}, {left}\".format(length=len(left), left=left)\n        msg3 = \"{length}, {right}\".format(length=len(right), right=right)\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # MultiIndex special comparison for little-friendly error messages\n    if left.nlevels > 1:\n        left = cast(MultiIndex, left)\n        right = cast(MultiIndex, right)\n\n        for level in range(left.nlevels):\n            # cannot use get_level_values here because it can change dtype\n            llevel = _get_ilevel_values(left, level)\n            rlevel = _get_ilevel_values(right, level)\n\n            lobj = \"MultiIndex level [{level}]\".format(level=level)\n            assert_index_equal(\n                llevel,\n                rlevel,\n                exact=exact,\n                check_names=check_names,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                obj=lobj,\n            )\n            # get_level_values may change dtype\n            _check_types(left.levels[level], right.levels[level], obj=obj)\n\n    # skip exact index checking when `check_categorical` is False\n    if check_exact and check_categorical:\n        if not left.equals(right):\n            diff = np.sum((left.values != right.values).astype(int)) * 100.0 / len(left)\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n    else:\n        _testing.assert_almost_equal(\n            left.values,\n            right.values,\n            check_less_precise=check_less_precise,\n            check_dtype=exact,\n            obj=obj,\n            lobj=left,\n            robj=right,\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"names\", left, right, obj=obj)\n    if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):\n        assert_attr_equal(\"freq\", left, right, obj=obj)\n    if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):\n        assert_interval_array_equal(left.values, right.values)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 570,
        "end_line": 703,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing._check_types#607",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._check_types(l, r, obj='Index')",
        "snippet": "    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\", \"unicode\"):\n                assert r.inferred_type in (\"string\", \"unicode\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)",
        "begin_line": 607,
        "end_line": 619,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing._get_ilevel_values#621",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_ilevel_values(index, level)",
        "snippet": "    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        labels = index.codes[level]\n        filled = take_1d(unique.values, labels, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values",
        "begin_line": 621,
        "end_line": 627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_class_equal#706",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_class_equal(left, right, exact=True, obj='Input')",
        "snippet": "def assert_class_equal(left, right, exact=True, obj=\"Input\"):\n    \"\"\"checks classes are equal.\"\"\"\n    __tracebackhide__ = True\n\n    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return x.__class__.__name__\n        except AttributeError:\n            return repr(type(x))\n\n    if exact == \"equiv\":\n        if type(left) != type(right):\n            # allow equivalence of Int64Index/RangeIndex\n            types = {type(left).__name__, type(right).__name__}\n            if len(types - {\"Int64Index\", \"RangeIndex\"}):\n                msg = \"{obj} classes are not equivalent\".format(obj=obj)\n                raise_assert_detail(obj, msg, repr_class(left), repr_class(right))\n    elif exact:\n        if type(left) != type(right):\n            msg = \"{obj} classes are different\".format(obj=obj)\n            raise_assert_detail(obj, msg, repr_class(left), repr_class(right))",
        "begin_line": 706,
        "end_line": 730,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00046992481203007516,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.repr_class#710",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.repr_class(x)",
        "snippet": "    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        try:\n            return x.__class__.__name__\n        except AttributeError:\n            return repr(type(x))",
        "begin_line": 710,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_attr_equal#733",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_attr_equal(attr, left, right, obj='Attributes')",
        "snippet": "def assert_attr_equal(attr, left, right, obj=\"Attributes\"):\n    \"\"\"checks attributes are equal. Both objects must have attribute.\n\n    Parameters\n    ----------\n    attr : str\n        Attribute name being compared.\n    left : object\n    right : object\n    obj : str, default 'Attributes'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    left_attr = getattr(left, attr)\n    right_attr = getattr(right, attr)\n\n    if left_attr is right_attr:\n        return True\n    elif (\n        is_number(left_attr)\n        and np.isnan(left_attr)\n        and is_number(right_attr)\n        and np.isnan(right_attr)\n    ):\n        # np.nan\n        return True\n\n    try:\n        result = left_attr == right_attr\n    except TypeError:\n        # datetimetz on rhs may raise TypeError\n        result = False\n    if not isinstance(result, bool):\n        result = result.all()\n\n    if result:\n        return True\n    else:\n        msg = 'Attribute \"{attr}\" are different'.format(attr=attr)\n        raise_assert_detail(obj, msg, left_attr, right_attr)",
        "begin_line": 733,
        "end_line": 774,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00016611295681063124,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_categorical_equal#808",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_categorical_equal(left, right, check_dtype=True, check_category_order=True, obj='Categorical')",
        "snippet": "def assert_categorical_equal(\n    left, right, check_dtype=True, check_category_order=True, obj=\"Categorical\"\n):\n    \"\"\"Test that Categoricals are equivalent.\n\n    Parameters\n    ----------\n    left : Categorical\n    right : Categorical\n    check_dtype : bool, default True\n        Check that integer dtype of the codes are the same\n    check_category_order : bool, default True\n        Whether the order of the categories should be compared, which\n        implies identical integer codes.  If False, only the resulting\n        values are compared.  The ordered attribute is\n        checked regardless.\n    obj : str, default 'Categorical'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, Categorical)\n\n    if check_category_order:\n        assert_index_equal(\n            left.categories, right.categories, obj=\"{obj}.categories\".format(obj=obj)\n        )\n        assert_numpy_array_equal(\n            left.codes,\n            right.codes,\n            check_dtype=check_dtype,\n            obj=\"{obj}.codes\".format(obj=obj),\n        )\n    else:\n        assert_index_equal(\n            left.categories.sort_values(),\n            right.categories.sort_values(),\n            obj=\"{obj}.categories\".format(obj=obj),\n        )\n        assert_index_equal(\n            left.categories.take(left.codes),\n            right.categories.take(right.codes),\n            obj=\"{obj}.values\".format(obj=obj),\n        )\n\n    assert_attr_equal(\"ordered\", left, right, obj=obj)",
        "begin_line": 808,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_numpy_array_equal#933",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_numpy_array_equal(left, right, strict_nan=False, check_dtype=True, err_msg=None, check_same=None, obj='numpy array')",
        "snippet": "def assert_numpy_array_equal(\n    left,\n    right,\n    strict_nan=False,\n    check_dtype=True,\n    err_msg=None,\n    check_same=None,\n    obj=\"numpy array\",\n):\n    \"\"\" Checks that 'np.ndarray' is equivalent\n\n    Parameters\n    ----------\n    left : np.ndarray or iterable\n    right : np.ndarray or iterable\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    check_dtype: bool, default True\n        check dtype if both a and b are np.ndarray\n    err_msg : str, default None\n        If provided, used as assertion message\n    check_same : None|'copy'|'same', default None\n        Ensure left and right refer/do not refer to the same memory area\n    obj : str, default 'numpy array'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    # Show a detailed error message when classes are different\n    assert_class_equal(left, right, obj=obj)\n    # both classes must be an np.ndarray\n    _check_isinstance(left, right, np.ndarray)\n\n    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj\n\n    left_base = _get_base(left)\n    right_base = _get_base(right)\n\n    if check_same == \"same\":\n        if left_base is not right_base:\n            msg = \"{left!r} is not {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n    elif check_same == \"copy\":\n        if left_base is right_base:\n            msg = \"{left!r} is {right!r}\".format(left=left_base, right=right_base)\n            raise AssertionError(msg)\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)\n\n    # compare shape and values\n    if not array_equivalent(left, right, strict_nan=strict_nan):\n        _raise(left, right, err_msg)\n\n    if check_dtype:\n        if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n            assert_attr_equal(\"dtype\", left, right, obj=obj)",
        "begin_line": 933,
        "end_line": 1013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing._get_base#968",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._get_base(obj)",
        "snippet": "    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj",
        "begin_line": 968,
        "end_line": 969,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing._raise#983",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing._raise(left, right, err_msg)",
        "snippet": "    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)",
        "begin_line": 983,
        "end_line": 1005,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019004180919802356,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_extension_array_equal#1016",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_extension_array_equal(left, right, check_dtype=True, check_less_precise=False, check_exact=False)",
        "snippet": "def assert_extension_array_equal(\n    left, right, check_dtype=True, check_less_precise=False, check_exact=False\n):\n    \"\"\"Check that left and right ExtensionArrays are equal.\n\n    Parameters\n    ----------\n    left, right : ExtensionArray\n        The two arrays to compare\n    check_dtype : bool, default True\n        Whether to check if the ExtensionArray dtypes are identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n\n    Notes\n    -----\n    Missing values are checked separately from valid values.\n    A mask of missing values is computed for each and checked to match.\n    The remaining all-valid values are cast to object dtype and checked.\n    \"\"\"\n    assert isinstance(left, ExtensionArray), \"left is not an ExtensionArray\"\n    assert isinstance(right, ExtensionArray), \"right is not an ExtensionArray\"\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"ExtensionArray\")\n\n    if hasattr(left, \"asi8\") and type(right) == type(left):\n        # Avoid slow object-dtype comparisons\n        assert_numpy_array_equal(left.asi8, right.asi8)\n        return\n\n    left_na = np.asarray(left.isna())\n    right_na = np.asarray(right.isna())\n    assert_numpy_array_equal(left_na, right_na, obj=\"ExtensionArray NA mask\")\n\n    left_valid = np.asarray(left[~left_na].astype(object))\n    right_valid = np.asarray(right[~right_na].astype(object))\n    if check_exact:\n        assert_numpy_array_equal(left_valid, right_valid, obj=\"ExtensionArray\")\n    else:\n        _testing.assert_almost_equal(\n            left_valid,\n            right_valid,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            obj=\"ExtensionArray\",\n        )",
        "begin_line": 1016,
        "end_line": 1065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00019508388607101054,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_series_equal#1069",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, obj='Series')",
        "snippet": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n        Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        # ToDo: There are some tests using rhs is sparse\n        # lhs is dense. Should use assert_class_equal in future\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = \"{len}, {left}\".format(len=len(left), left=left.index)\n        msg2 = \"{len}, {right}\".format(len=len(right), right=right.index)\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=\"{obj}.index\".format(obj=obj),\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left)\n            and is_categorical_dtype(right)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\n                \"dtype\", left, right, obj=\"Attributes of {obj}\".format(obj=obj)\n            )\n\n    if check_exact:\n        assert_numpy_array_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n    elif check_datetimelike_compat:\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n        if needs_i8_conversion(left) or needs_i8_conversion(right):\n\n            # datetimelike may have different objects (e.g. datetime.datetime\n            # vs Timestamp) but will compare equal\n            if not Index(left.values).equals(Index(right.values)):\n                msg = (\n                    \"[datetimelike_compat=True] {left} is not equal to {right}.\"\n                ).format(left=left.values, right=right.values)\n                raise AssertionError(msg)\n        else:\n            assert_numpy_array_equal(\n                left._internal_get_values(),\n                right._internal_get_values(),\n                check_dtype=check_dtype,\n            )\n    elif is_interval_dtype(left) or is_interval_dtype(right):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_extension_array_dtype(left.dtype) and is_datetime64tz_dtype(left.dtype):\n        # .values is an ndarray, but ._values is the ExtensionArray.\n        # TODO: Use .array\n        assert is_extension_array_dtype(right.dtype)\n        assert_extension_array_equal(left._values, right._values)\n    elif (\n        is_extension_array_dtype(left)\n        and not is_categorical_dtype(left)\n        and is_extension_array_dtype(right)\n        and not is_categorical_dtype(right)\n    ):\n        assert_extension_array_equal(left.array, right.array)\n    else:\n        _testing.assert_almost_equal(\n            left._internal_get_values(),\n            right._internal_get_values(),\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=\"{obj}\".format(obj=obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left.values, right.values, obj=\"{obj} category\".format(obj=obj)\n            )",
        "begin_line": 1069,
        "end_line": 1219,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.makeStringIndex#1594",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeStringIndex(k=10, name=None)",
        "snippet": "def makeStringIndex(k=10, name=None):\n    return Index(rands_array(nchars=10, size=k), name=name)",
        "begin_line": 1594,
        "end_line": 1595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.makeDateIndex#1641",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeDateIndex(k=10, freq='B', name=None, **kwargs)",
        "snippet": "def makeDateIndex(k=10, freq=\"B\", name=None, **kwargs):\n    dt = datetime(2000, 1, 1)\n    dr = bdate_range(dt, periods=k, freq=freq, name=name)\n    return DatetimeIndex(dr, name=name, **kwargs)",
        "begin_line": 1641,
        "end_line": 1644,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.makeStringSeries#1800",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeStringSeries(name=None)",
        "snippet": "def makeStringSeries(name=None):\n    index = makeStringIndex(N)\n    return Series(randn(N), index=index, name=name)",
        "begin_line": 1800,
        "end_line": 1802,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00021427040925648167,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.makeTimeSeries#1817",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.makeTimeSeries(nper=None, freq='B', name=None)",
        "snippet": "def makeTimeSeries(nper=None, freq=\"B\", name=None):\n    if nper is None:\n        nper = N\n    return Series(randn(nper), index=makeDateIndex(nper, freq=freq), name=name)",
        "begin_line": 1817,
        "end_line": 1820,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.0002942041776993233,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util.testing.assert_produces_warning#2407",
        "src_path": "pandas/util/testing.py",
        "class_name": "pandas.util.testing",
        "signature": "pandas.util.testing.assert_produces_warning(expected_warning=Warning, filter_level='always', clear=None, check_stacklevel=True, raise_on_extra_warnings=True)",
        "snippet": "def assert_produces_warning(\n    expected_warning=Warning,\n    filter_level=\"always\",\n    clear=None,\n    check_stacklevel=True,\n    raise_on_extra_warnings=True,\n):\n    \"\"\"\n    Context manager for running code expected to either raise a specific\n    warning, or not raise any warnings. Verifies that the code raises the\n    expected warning, and that it does not raise any other unexpected\n    warnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\n    Parameters\n    ----------\n    expected_warning : {Warning, False, None}, default Warning\n        The type of Exception raised. ``exception.Warning`` is the base\n        class for all warnings. To check that no warning is returned,\n        specify ``False`` or ``None``.\n    filter_level : str or None, default \"always\"\n        Specifies whether warnings are ignored, displayed, or turned\n        into errors.\n        Valid values are:\n\n        * \"error\" - turns matching warnings into exceptions\n        * \"ignore\" - discard the warning\n        * \"always\" - always emit a warning\n        * \"default\" - print the warning the first time it is generated\n          from each location\n        * \"module\" - print the warning the first time it is generated\n          from each module\n        * \"once\" - print the warning the first time it is generated\n\n    clear : str, default None\n        If not ``None`` then remove any previously raised warnings from\n        the ``__warningsregistry__`` to ensure that no warning messages are\n        suppressed by this context manager. If ``None`` is specified,\n        the ``__warningsregistry__`` keeps track of which warnings have been\n        shown, and does not show them again.\n    check_stacklevel : bool, default True\n        If True, displays the line that called the function containing\n        the warning to show were the function is called. Otherwise, the\n        line that implements the function is displayed.\n    raise_on_extra_warnings : bool, default True\n        Whether extra warnings not of the type `expected_warning` should\n        cause the test to fail.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with assert_produces_warning():\n    ...     warnings.warn(UserWarning())\n    ...\n    >>> with assert_produces_warning(False):\n    ...     warnings.warn(RuntimeWarning())\n    ...\n    Traceback (most recent call last):\n        ...\n    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n    >>> with assert_produces_warning(UserWarning):\n    ...     warnings.warn(RuntimeWarning())\n    Traceback (most recent call last):\n        ...\n    AssertionError: Did not see expected warning of class 'UserWarning'.\n\n    ..warn:: This is *not* thread-safe.\n    \"\"\"\n    __tracebackhide__ = True\n\n    with warnings.catch_warnings(record=True) as w:\n\n        if clear is not None:\n            # make sure that we are clearing these warnings\n            # if they have happened before\n            # to guarantee that we will catch them\n            if not is_list_like(clear):\n                clear = [clear]\n            for m in clear:\n                try:\n                    m.__warningregistry__.clear()\n                except AttributeError:\n                    # module may not have __warningregistry__\n                    pass\n\n        saw_warning = False\n        warnings.simplefilter(filter_level)\n        yield w\n        extra_warnings = []\n\n        for actual_warning in w:\n            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n\n                if check_stacklevel and issubclass(\n                    actual_warning.category, (FutureWarning, DeprecationWarning)\n                ):\n                    from inspect import getframeinfo, stack\n\n                    caller = getframeinfo(stack()[2][0])\n                    msg = (\n                        \"Warning not set with correct stacklevel. \"\n                        \"File where warning is raised: {actual} != \"\n                        \"{caller}. Warning message: {message}\"\n                    ).format(\n                        actual=actual_warning.filename,\n                        caller=caller.filename,\n                        message=actual_warning.message,\n                    )\n                    assert actual_warning.filename == caller.filename, msg\n            else:\n                extra_warnings.append(\n                    (\n                        actual_warning.category.__name__,\n                        actual_warning.message,\n                        actual_warning.filename,\n                        actual_warning.lineno,\n                    )\n                )\n        if expected_warning:\n            msg = \"Did not see expected warning of class {name!r}.\".format(\n                name=expected_warning.__name__\n            )\n            assert saw_warning, msg\n        if raise_on_extra_warnings and extra_warnings:\n            raise AssertionError(\n                \"Caused unexpected warning(s): {!r}.\".format(extra_warnings)\n            )",
        "begin_line": 2407,
        "end_line": 2535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0002538715410002539,
            "pseudo_dstar_susp": 0.0002538715410002539,
            "pseudo_tarantula_susp": 0.0002538715410002539,
            "pseudo_op2_susp": 0.00035688793718772306,
            "pseudo_barinel_susp": 0.0002538715410002539
        }
    },
    {
        "name": "pandas.util._validators._check_arg_length#13",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_arg_length(fname, args, max_fname_arg_count, compat_args)",
        "snippet": "def _check_arg_length(fname, args, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether 'args' has length of at most 'compat_args'. Raises\n    a TypeError if that is not the case, similar to in Python when a\n    function is called with too many arguments.\n\n    \"\"\"\n    if max_fname_arg_count < 0:\n        raise ValueError(\"'max_fname_arg_count' must be non-negative\")\n\n    if len(args) > len(compat_args):\n        max_arg_count = len(compat_args) + max_fname_arg_count\n        actual_arg_count = len(args) + max_fname_arg_count\n        argument = \"argument\" if max_arg_count == 1 else \"arguments\"\n\n        raise TypeError(\n            \"{fname}() takes at most {max_arg} {argument} \"\n            \"({given_arg} given)\".format(\n                fname=fname,\n                max_arg=max_arg_count,\n                argument=argument,\n                given_arg=actual_arg_count,\n            )\n        )",
        "begin_line": 13,
        "end_line": 36,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017211703958691911,
            "pseudo_dstar_susp": 0.0009578544061302681,
            "pseudo_tarantula_susp": 0.001736111111111111,
            "pseudo_op2_susp": 0.0009578544061302681,
            "pseudo_barinel_susp": 0.001736111111111111
        }
    },
    {
        "name": "pandas.util._validators._check_for_default_values#39",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_default_values(fname, arg_val_dict, compat_args)",
        "snippet": "def _check_for_default_values(fname, arg_val_dict, compat_args):\n    \"\"\"\n    Check that the keys in `arg_val_dict` are mapped to their\n    default values as specified in `compat_args`.\n\n    Note that this function is to be called only when it has been\n    checked that arg_val_dict.keys() is a subset of compat_args\n\n    \"\"\"\n    for key in arg_val_dict:\n        # try checking equality directly with '=' operator,\n        # as comparison may have been overridden for the left\n        # hand object\n        try:\n            v1 = arg_val_dict[key]\n            v2 = compat_args[key]\n\n            # check for None-ness otherwise we could end up\n            # comparing a numpy array vs None\n            if (v1 is not None and v2 is None) or (v1 is None and v2 is not None):\n                match = False\n            else:\n                match = v1 == v2\n\n            if not is_bool(match):\n                raise ValueError(\"'match' is not a boolean\")\n\n        # could not compare them directly, so try comparison\n        # using the 'is' operator\n        except ValueError:\n            match = arg_val_dict[key] is compat_args[key]\n\n        if not match:\n            raise ValueError(\n                (\n                    \"the '{arg}' parameter is not \"\n                    \"supported in the pandas \"\n                    \"implementation of {fname}()\".format(fname=fname, arg=key)\n                )\n            )",
        "begin_line": 39,
        "end_line": 78,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00145985401459854,
            "pseudo_dstar_susp": 0.0008771929824561404,
            "pseudo_tarantula_susp": 0.0014771048744460858,
            "pseudo_op2_susp": 0.0008771929824561404,
            "pseudo_barinel_susp": 0.0014771048744460858
        }
    },
    {
        "name": "pandas.util._validators._check_for_invalid_keys#123",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_invalid_keys(fname, kwargs, compat_args)",
        "snippet": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.\n\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError(\n            (\n                \"{fname}() got an unexpected \"\n                \"keyword argument '{arg}'\".format(fname=fname, arg=bad_arg)\n            )\n        )",
        "begin_line": 123,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012360939431396785,
            "pseudo_dstar_susp": 0.0007987220447284345,
            "pseudo_tarantula_susp": 0.0012674271229404308,
            "pseudo_op2_susp": 0.0007987220447284345,
            "pseudo_barinel_susp": 0.0012674271229404308
        }
    },
    {
        "name": "pandas.util._validators.validate_kwargs#142",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_kwargs(fname, kwargs, compat_args)",
        "snippet": "def validate_kwargs(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to have and their\n        associated default values\n\n    Raises\n    ------\n    TypeError if `kwargs` contains keys not in `compat_args`\n    ValueError if `kwargs` contains keys in `compat_args` that do not\n    map to the default values specified in `compat_args`\n\n    \"\"\"\n    kwds = kwargs.copy()\n    _check_for_invalid_keys(fname, kwargs, compat_args)\n    _check_for_default_values(fname, kwds, compat_args)",
        "begin_line": 142,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012360939431396785,
            "pseudo_dstar_susp": 0.0007987220447284345,
            "pseudo_tarantula_susp": 0.0012674271229404308,
            "pseudo_op2_susp": 0.0007987220447284345,
            "pseudo_barinel_susp": 0.0012674271229404308
        }
    },
    {
        "name": "pandas.util._validators.validate_args_and_kwargs#172",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args)",
        "snippet": "def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the *args and **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n\n    args: tuple\n        The `*args` parameter passed into a function\n\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n\n    max_fname_arg_count: int\n        The minimum number of arguments that the function `fname`\n        requires, excluding those in `args`. Used for displaying\n        appropriate error messages. Must be non-negative.\n\n    compat_args: OrderedDict\n        A ordered dictionary of keys that `kwargs` is allowed to\n        have and their associated default values. Note that if there\n        is only one key, a generic dict can be passed in as well.\n\n    Raises\n    ------\n    TypeError if `args` contains more values than there are\n    `compat_args` OR `kwargs` contains keys not in `compat_args`\n    ValueError if `args` contains values not at the default value (`None`)\n    `kwargs` contains keys in `compat_args` that do not map to the default\n    value as specified in `compat_args`\n\n    See Also\n    --------\n    validate_args : Purely args validation.\n    validate_kwargs : Purely kwargs validation.\n\n    \"\"\"\n    # Check that the total number of arguments passed in (i.e.\n    # args and kwargs) does not exceed the length of compat_args\n    _check_arg_length(\n        fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args\n    )\n\n    # Check there is no overlap with the positional and keyword\n    # arguments, similar to what is done in actual Python functions\n    args_dict = dict(zip(compat_args, args))\n\n    for key in args_dict:\n        if key in kwargs:\n            raise TypeError(\n                \"{fname}() got multiple values for keyword \"\n                \"argument '{arg}'\".format(fname=fname, arg=key)\n            )\n\n    kwargs.update(args_dict)\n    validate_kwargs(fname, kwargs, compat_args)",
        "begin_line": 172,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017211703958691911,
            "pseudo_dstar_susp": 0.0009578544061302681,
            "pseudo_tarantula_susp": 0.001736111111111111,
            "pseudo_op2_susp": 0.0009578544061302681,
            "pseudo_barinel_susp": 0.001736111111111111
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#234",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            'For argument \"{arg}\" expected type bool, received '\n            \"type {typ}.\".format(arg=arg_name, typ=type(value).__name__)\n        )\n    return value",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011312217194570137,
            "pseudo_dstar_susp": 0.0007763975155279503,
            "pseudo_tarantula_susp": 0.0012121212121212121,
            "pseudo_op2_susp": 0.0007763975155279503,
            "pseudo_barinel_susp": 0.0012121212121212121
        }
    },
    {
        "name": "pandas.util._validators.validate_percentile#378",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_percentile(q: Union[float, Iterable[float]])",
        "snippet": "def validate_percentile(q: Union[float, Iterable[float]]) -> np.ndarray:\n    \"\"\"\n    Validate percentiles (used by describe and quantile).\n\n    This function checks if the given float oriterable of floats is a valid percentile\n    otherwise raises a ValueError.\n\n    Parameters\n    ----------\n    q: float or iterable of floats\n        A single percentile or an iterable of percentiles.\n\n    Returns\n    -------\n    ndarray\n        An ndarray of the percentiles if valid.\n\n    Raises\n    ------\n    ValueError if percentiles are not in given interval([0, 1]).\n    \"\"\"\n    msg = \"percentiles should all be in the interval [0, 1]. Try {0} instead.\"\n    q_arr = np.asarray(q)\n    if q_arr.ndim == 0:\n        if not 0 <= q_arr <= 1:\n            raise ValueError(msg.format(q_arr / 100.0))\n    else:\n        if not all(0 <= qs <= 1 for qs in q_arr):\n            raise ValueError(msg.format(q_arr / 100.0))\n    return q_arr",
        "begin_line": 378,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008547008547008548,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.008849557522123894,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.008849557522123894
        }
    },
    {
        "name": "pandas.core.arrays.string_.StringDtype.construct_from_string#76",
        "src_path": "pandas/core/arrays/string_.py",
        "class_name": "pandas.core.arrays.string_.StringDtype",
        "signature": "pandas.core.arrays.string_.StringDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> ExtensionDtype:\n        if string == \"string\":\n            return cls()\n        return super().construct_from_string(string)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#178",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        msg = \"Could not construct SparseDtype from '{}'\".format(string)\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError:\n                raise TypeError(msg)\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    \"Could not construct SparseDtype from '{}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg.format(string))\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 178,
        "end_line": 223,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006172839506172839,
            "pseudo_dstar_susp": 0.0006172839506172839,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.0006172839506172839,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    }
]