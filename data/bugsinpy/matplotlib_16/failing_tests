coverage run -m pytest lib/matplotlib/tests/test_colorbar.py::test_colorbar_int
============================= test session starts ==============================
platform linux -- Python 3.8.1, pytest-7.4.0, pluggy-1.0.0
rootdir: /home/user/BugsInPy/temp/projects/matplotlib
configfile: pytest.ini
collected 2 items

lib/matplotlib/tests/test_colorbar.py FF                                 [100%]

=================================== FAILURES ===================================
___________________________ test_colorbar_int[clim0] ___________________________

clim = (-20000, 20000)

    @pytest.mark.parametrize("clim", [(-20000, 20000), (-32768, 0)])
    def test_colorbar_int(clim):
        # Check that we cast to float early enough to not
        # overflow ``int16(20000) - int16(-20000)`` or
        # run into ``abs(int16(-32768)) == -32768``.
        fig, ax = plt.subplots()
        im = ax.imshow([[*map(np.int16, clim)]])
>       fig.colorbar(im)

lib/matplotlib/tests/test_colorbar.py:592: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:2238: in colorbar
    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)
lib/matplotlib/colorbar.py:1681: in colorbar_factory
    cb = Colorbar(cax, mappable, **kwargs)
lib/matplotlib/colorbar.py:1226: in __init__
    ColorbarBase.__init__(self, ax, **kw)
lib/matplotlib/colorbar.py:505: in __init__
    self.draw_all()
lib/matplotlib/colorbar.py:528: in draw_all
    self._process_values()
lib/matplotlib/colorbar.py:965: in _process_values
    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vmin = -20000, vmax = 20000, expander = 0.1, tiny = 1e-15, increasing = True

    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):
        """
        Modify the endpoints of a range as needed to avoid singularities.
    
        Parameters
        ----------
        vmin, vmax : float
            The initial endpoints.
        expander : float, optional, default: 0.001
            Fractional amount by which *vmin* and *vmax* are expanded if
            the original interval is too small, based on *tiny*.
        tiny : float, optional, default: 1e-15
            Threshold for the ratio of the interval to the maximum absolute
            value of its endpoints.  If the interval is smaller than
            this, it will be expanded.  This value should be around
            1e-15 or larger; otherwise the interval will be approaching
            the double precision resolution limit.
        increasing : bool, optional, default: True
            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.
    
        Returns
        -------
        vmin, vmax : float
            Endpoints, expanded and/or swapped if necessary.
            If either input is inf or NaN, or if both inputs are 0 or very
            close to zero, it returns -*expander*, *expander*.
        """
    
        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):
            return -expander, expander
    
        swapped = False
        if vmax < vmin:
            vmin, vmax = vmax, vmin
            swapped = True
    
        maxabsvalue = max(abs(vmin), abs(vmax))
        if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:
            vmin = -expander
            vmax = expander
    
>       elif vmax - vmin <= maxabsvalue * tiny:
E       RuntimeWarning: overflow encountered in scalar subtract

lib/matplotlib/transforms.py:2820: RuntimeWarning
------------------------------ Captured log setup ------------------------------
WARNING  matplotlib.testing:__init__.py:41 Could not set locale to English/United States. Some date-related tests may fail.
___________________________ test_colorbar_int[clim1] ___________________________

clim = (-32768, 0)

    @pytest.mark.parametrize("clim", [(-20000, 20000), (-32768, 0)])
    def test_colorbar_int(clim):
        # Check that we cast to float early enough to not
        # overflow ``int16(20000) - int16(-20000)`` or
        # run into ``abs(int16(-32768)) == -32768``.
        fig, ax = plt.subplots()
        im = ax.imshow([[*map(np.int16, clim)]])
>       fig.colorbar(im)

lib/matplotlib/tests/test_colorbar.py:592: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:2238: in colorbar
    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)
lib/matplotlib/colorbar.py:1681: in colorbar_factory
    cb = Colorbar(cax, mappable, **kwargs)
lib/matplotlib/colorbar.py:1226: in __init__
    ColorbarBase.__init__(self, ax, **kw)
lib/matplotlib/colorbar.py:505: in __init__
    self.draw_all()
lib/matplotlib/colorbar.py:528: in draw_all
    self._process_values()
lib/matplotlib/colorbar.py:965: in _process_values
    self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vmin = -32768, vmax = 0, expander = 0.1, tiny = 1e-15, increasing = True

    def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):
        """
        Modify the endpoints of a range as needed to avoid singularities.
    
        Parameters
        ----------
        vmin, vmax : float
            The initial endpoints.
        expander : float, optional, default: 0.001
            Fractional amount by which *vmin* and *vmax* are expanded if
            the original interval is too small, based on *tiny*.
        tiny : float, optional, default: 1e-15
            Threshold for the ratio of the interval to the maximum absolute
            value of its endpoints.  If the interval is smaller than
            this, it will be expanded.  This value should be around
            1e-15 or larger; otherwise the interval will be approaching
            the double precision resolution limit.
        increasing : bool, optional, default: True
            If True, swap *vmin*, *vmax* if *vmin* > *vmax*.
    
        Returns
        -------
        vmin, vmax : float
            Endpoints, expanded and/or swapped if necessary.
            If either input is inf or NaN, or if both inputs are 0 or very
            close to zero, it returns -*expander*, *expander*.
        """
    
        if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):
            return -expander, expander
    
        swapped = False
        if vmax < vmin:
            vmin, vmax = vmax, vmin
            swapped = True
    
>       maxabsvalue = max(abs(vmin), abs(vmax))
E       RuntimeWarning: overflow encountered in scalar absolute

lib/matplotlib/transforms.py:2815: RuntimeWarning
------------------------------ Captured log setup ------------------------------
WARNING  matplotlib.testing:__init__.py:41 Could not set locale to English/United States. Some date-related tests may fail.
=============================== warnings summary ===============================
lib/matplotlib/__init__.py:201
lib/matplotlib/__init__.py:201
lib/matplotlib/__init__.py:201
lib/matplotlib/__init__.py:201
lib/matplotlib/__init__.py:201
  /home/user/BugsInPy/temp/projects/matplotlib/lib/matplotlib/__init__.py:201: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(module.__version__) < minver:

../../../../../../opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345
../../../../../../opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345
../../../../../../opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345
../../../../../../opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345
../../../../../../opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345
  /opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim0] - Runt...
FAILED lib/matplotlib/tests/test_colorbar.py::test_colorbar_int[clim1] - Runt...
======================== 2 failed, 10 warnings in 0.75s ========================
/home/user/BugsInPy/temp/projects/matplotlib/lib/matplotlib/backend_bases.py:59: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
  if LooseVersion(PILLOW_VERSION) >= "3.4":
/opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/setuptools/_distutils/version.py:345: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
  other = LooseVersion(other)
/opt/conda/envs/96e55cef081ba1a7fa5bef32944f9ae7/lib/python3.8/site-packages/coverage/inorout.py:523: CoverageWarning: Module mpl_toolkits was previously imported, but not measured (module-not-measured)
  self.warn(msg, slug="module-not-measured")
