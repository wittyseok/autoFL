coverage run -m pytest test/contrib/redshift_test.py::TestS3CopyToSchemaTable::test_s3_copy_to_table
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/BugsInPy/temp/projects/luigi
plugins: benchmark-3.2.3, sanic-1.6.1, sugar-0.9.3, cov-2.9.0
collected 1 item

test/contrib/redshift_test.py F                                          [100%]

=================================== FAILURES ===================================
________________ TestS3CopyToSchemaTable.test_s3_copy_to_table _________________

self = <contrib.redshift_test.TestS3CopyToSchemaTable testMethod=test_s3_copy_to_table>
mock_redshift_target = <MagicMock name='RedshiftTarget' id='139722888009136'>
mock_copy = <MagicMock name='copy' id='139722887332912'>

    @mock.patch("luigi.contrib.redshift.S3CopyToTable.copy")
    @mock.patch("luigi.contrib.redshift.RedshiftTarget")
    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):
        task = DummyS3CopyToTableKey(table='dummy_schema.dummy_table')
        task.run()
    
        # The mocked connection cursor passed to
        # S3CopyToTable.copy(self, cursor, f).
        mock_cursor = (mock_redshift_target.return_value
                                           .connect
                                           .return_value
                                           .cursor
                                           .return_value)
    
        # Check the SQL query in `S3CopyToTable.does_table_exist`.
>       mock_cursor.execute.assert_called_with(
            "select 1 as table_exists "
            "from information_schema.tables "
            "where table_schema = lower(%s) and "
            "table_name = lower(%s) limit 1",
            tuple(task.table.split('.')),
        )

test/contrib/redshift_test.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='RedshiftTarget().connect().cursor().execute' id='139722887455120'>
args = ('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))
kwargs = {}
expected = call('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))
actual = call('select 1 as table_exists from information_schema.tables where table_schema = %s and table_name = %s limit 1', ('dummy_schema', 'dummy_table'))
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f13c63805e0>
cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: execute('select 1 as table_exists from information_schema.tables where table_schema = lower(%s) and table_name = lower(%s) limit 1', ('dummy_schema', 'dummy_table'))
E           Actual: execute('select 1 as table_exists from information_schema.tables where table_schema = %s and table_name = %s limit 1', ('dummy_schema', 'dummy_table'))

/opt/conda/envs/eeca8181fd31e996f9b735051eb1284f/lib/python3.8/site-packages/mock/mock.py:913: AssertionError
=============================== warnings summary ===============================
luigi/parameter.py:28
  /home/user/BugsInPy/temp/projects/luigi/luigi/parameter.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    from collections import OrderedDict, Mapping

luigi/scheduler.py:208
  /home/user/BugsInPy/temp/projects/luigi/luigi/scheduler.py:208: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    class OrderedSet(collections.MutableSet):

luigi/scheduler.py:98: 26 tests with warnings
  /home/user/BugsInPy/temp/projects/luigi/luigi/scheduler.py:98: DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()
    fn_args = inspect.getargspec(fn)

luigi/postgres.py:25
  /home/user/BugsInPy/temp/projects/luigi/luigi/postgres.py:25: DeprecationWarning: luigi.postgres module has been moved to luigi.contrib.postgres
    warnings.warn("luigi.postgres module has been moved to luigi.contrib.postgres",

luigi/s3.py:25
  /home/user/BugsInPy/temp/projects/luigi/luigi/s3.py:25: DeprecationWarning: luigi.s3 module has been moved to luigi.contrib.s3
    warnings.warn("luigi.s3 module has been moved to luigi.contrib.s3",

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/contrib/redshift_test.py::TestS3CopyToSchemaTable::test_s3_copy_to_table
======================== 1 failed, 30 warnings in 0.33s ========================
