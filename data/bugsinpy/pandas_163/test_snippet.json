[
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.setup_method#17",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self._create_data()",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_doc_string#20",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_doc_string(self)",
        "snippet": "    def test_doc_string(self):\n\n        df = DataFrame({\"B\": [0, 1, 2, np.nan, 4]})\n        df\n        df.rolling(2).sum()\n        df.rolling(2, min_periods=1).sum()",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_constructor#28",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_constructor(self, which)",
        "snippet": "    def test_constructor(self, which):\n        # GH 12669\n\n        o = getattr(self, which)\n        c = o.rolling\n\n        # valid\n        c(window=2)\n        c(window=2, min_periods=1)\n        c(window=2, min_periods=1, center=True)\n        c(window=2, min_periods=1, center=False)\n\n        # GH 13383\n        with pytest.raises(ValueError):\n            c(0)\n            c(-1)\n\n        # not valid\n        for w in [2.0, \"foo\", np.array([2])]:\n            with pytest.raises(ValueError):\n                c(window=w)\n            with pytest.raises(ValueError):\n                c(window=2, min_periods=w)\n            with pytest.raises(ValueError):\n                c(window=2, min_periods=1, center=w)",
        "begin_line": 28,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_constructor_with_win_type#56",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_constructor_with_win_type(self, which)",
        "snippet": "    def test_constructor_with_win_type(self, which):\n        # GH 13383\n        o = getattr(self, which)\n        c = o.rolling\n        with pytest.raises(ValueError):\n            c(-1, win_type=\"boxcar\")",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_constructor_with_timedelta_window#64",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_constructor_with_timedelta_window(self, window)",
        "snippet": "    def test_constructor_with_timedelta_window(self, window):\n        # GH 15440\n        n = 10\n        df = DataFrame(\n            {\"value\": np.arange(n)},\n            index=pd.date_range(\"2015-12-24\", periods=n, freq=\"D\"),\n        )\n        expected_data = np.append([0.0, 1.0], np.arange(3.0, 27.0, 3))\n\n        result = df.rolling(window=window).sum()\n        expected = DataFrame(\n            {\"value\": expected_data},\n            index=pd.date_range(\"2015-12-24\", periods=n, freq=\"D\"),\n        )\n        tm.assert_frame_equal(result, expected)\n        expected = df.rolling(\"3D\").sum()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 64,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_constructor_timedelta_window_and_minperiods#83",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_constructor_timedelta_window_and_minperiods(self, window, raw)",
        "snippet": "    def test_constructor_timedelta_window_and_minperiods(self, window, raw):\n        # GH 15305\n        n = 10\n        df = DataFrame(\n            {\"value\": np.arange(n)},\n            index=pd.date_range(\"2017-08-08\", periods=n, freq=\"D\"),\n        )\n        expected = DataFrame(\n            {\"value\": np.append([np.NaN, 1.0], np.arange(3.0, 27.0, 3))},\n            index=pd.date_range(\"2017-08-08\", periods=n, freq=\"D\"),\n        )\n        result_roll_sum = df.rolling(window=window, min_periods=2).sum()\n        result_roll_generic = df.rolling(window=window, min_periods=2).apply(\n            sum, raw=raw\n        )\n        tm.assert_frame_equal(result_roll_sum, expected)\n        tm.assert_frame_equal(result_roll_generic, expected)",
        "begin_line": 83,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_numpy_compat#102",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_numpy_compat(self, method)",
        "snippet": "    def test_numpy_compat(self, method):\n        # see gh-12811\n        r = rwindow.Rolling(Series([2, 4, 6]), window=2)\n\n        msg = \"numpy operations are not valid with window objects\"\n\n        with pytest.raises(UnsupportedFunctionCall, match=msg):\n            getattr(r, method)(1, 2, 3)\n        with pytest.raises(UnsupportedFunctionCall, match=msg):\n            getattr(r, method)(dtype=np.float64)",
        "begin_line": 102,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed#113",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed(self)",
        "snippet": "    def test_closed(self):\n        df = DataFrame({\"A\": [0, 1, 2, 3, 4]})\n        # closed only allowed for datetimelike\n        with pytest.raises(ValueError):\n            df.rolling(window=3, closed=\"neither\")",
        "begin_line": 113,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_empty#120",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_empty(self, closed, arithmetic_win_operators)",
        "snippet": "    def test_closed_empty(self, closed, arithmetic_win_operators):\n        # GH 26005\n        func_name = arithmetic_win_operators\n        ser = pd.Series(\n            data=np.arange(5), index=pd.date_range(\"2000\", periods=5, freq=\"2D\")\n        )\n        roll = ser.rolling(\"1D\", closed=closed)\n\n        result = getattr(roll, func_name)()\n        expected = pd.Series([np.nan] * 5, index=ser.index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry#133",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry(self, func)",
        "snippet": "    def test_closed_one_entry(self, func):\n        # GH24718\n        ser = pd.Series(data=[2], index=pd.date_range(\"2000\", periods=1))\n        result = getattr(ser.rolling(\"10D\", closed=\"left\"), func)()\n        tm.assert_series_equal(result, pd.Series([np.nan], index=ser.index))",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry_groupby#140",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_one_entry_groupby(self, func)",
        "snippet": "    def test_closed_one_entry_groupby(self, func):\n        # GH24718\n        ser = pd.DataFrame(\n            data={\"A\": [1, 1, 2], \"B\": [3, 2, 1]},\n            index=pd.date_range(\"2000\", periods=3),\n        )\n        result = getattr(\n            ser.groupby(\"A\", sort=False)[\"B\"].rolling(\"10D\", closed=\"left\"), func\n        )()\n        exp_idx = pd.MultiIndex.from_arrays(\n            arrays=[[1, 1, 2], ser.index], names=(\"A\", None)\n        )\n        expected = pd.Series(data=[np.nan, 3, np.nan], index=exp_idx, name=\"B\")\n        tm.assert_series_equal(result, expected)",
        "begin_line": 140,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_datetime#169",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_datetime(self, input_dtype, func, closed, expected)",
        "snippet": "    def test_closed_min_max_datetime(self, input_dtype, func, closed, expected):\n        # see gh-21704\n        ser = pd.Series(\n            data=np.arange(10).astype(input_dtype),\n            index=pd.date_range(\"2000\", periods=10),\n        )\n\n        result = getattr(ser.rolling(\"3D\", closed=closed), func)()\n        expected = pd.Series(expected, index=ser.index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 169,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_uneven#180",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_uneven(self)",
        "snippet": "    def test_closed_uneven(self):\n        # see gh-21704\n        ser = pd.Series(data=np.arange(10), index=pd.date_range(\"2000\", periods=10))\n\n        # uneven\n        ser = ser.drop(index=ser.index[[1, 5]])\n        result = ser.rolling(\"3D\", closed=\"left\").min()\n        expected = pd.Series([np.nan, 0, 0, 2, 3, 4, 6, 6], index=ser.index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 180,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_minp#203",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_min_max_minp(self, func, closed, expected)",
        "snippet": "    def test_closed_min_max_minp(self, func, closed, expected):\n        # see gh-21704\n        ser = pd.Series(data=np.arange(10), index=pd.date_range(\"2000\", periods=10))\n        ser[ser.index[-3:]] = np.nan\n        result = getattr(ser.rolling(\"3D\", min_periods=2, closed=closed), func)()\n        expected = pd.Series(expected, index=ser.index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 203,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_closed_median_quantile#220",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_closed_median_quantile(self, closed, expected)",
        "snippet": "    def test_closed_median_quantile(self, closed, expected):\n        # GH 26005\n        ser = pd.Series(data=np.arange(10), index=pd.date_range(\"2000\", periods=10))\n        roll = ser.rolling(\"3D\", closed=closed)\n        expected = pd.Series(expected, index=ser.index)\n\n        result = roll.median()\n        tm.assert_series_equal(result, expected)\n\n        result = roll.quantile(0.5)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 220,
        "end_line": 230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.tests_empty_df_rolling#233",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.tests_empty_df_rolling(self, roller)",
        "snippet": "    def tests_empty_df_rolling(self, roller):\n        # GH 15819 Verifies that datetime and integer rolling windows can be\n        # applied to empty DataFrames\n        expected = DataFrame()\n        result = DataFrame().rolling(roller).sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Verifies that datetime and integer rolling windows can be applied to\n        # empty DataFrames with datetime index\n        expected = DataFrame(index=pd.DatetimeIndex([]))\n        result = DataFrame(index=pd.DatetimeIndex([])).rolling(roller).sum()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 233,
        "end_line": 244,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_empty_window_median_quantile#246",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_empty_window_median_quantile(self)",
        "snippet": "    def test_empty_window_median_quantile(self):\n        # GH 26005\n        expected = pd.Series([np.nan, np.nan, np.nan])\n        roll = pd.Series(np.arange(3)).rolling(0)\n\n        result = roll.median()\n        tm.assert_series_equal(result, expected)\n\n        result = roll.quantile(0.1)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 246,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero#257",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero(self)",
        "snippet": "    def test_missing_minp_zero(self):\n        # https://github.com/pandas-dev/pandas/pull/18921\n        # minp=0\n        x = pd.Series([np.nan])\n        result = x.rolling(1, min_periods=0).sum()\n        expected = pd.Series([0.0])\n        tm.assert_series_equal(result, expected)\n\n        # minp=1\n        result = x.rolling(1, min_periods=1).sum()\n        expected = pd.Series([np.nan])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 257,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero_variable#270",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_missing_minp_zero_variable(self)",
        "snippet": "    def test_missing_minp_zero_variable(self):\n        # https://github.com/pandas-dev/pandas/pull/18921\n        x = pd.Series(\n            [np.nan] * 4,\n            index=pd.DatetimeIndex(\n                [\"2017-01-01\", \"2017-01-04\", \"2017-01-06\", \"2017-01-07\"]\n            ),\n        )\n        result = x.rolling(pd.Timedelta(\"2d\"), min_periods=0).sum()\n        expected = pd.Series(0.0, index=x.index)\n        tm.assert_series_equal(result, expected)",
        "begin_line": 270,
        "end_line": 280,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_multi_index_names#282",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_multi_index_names(self)",
        "snippet": "    def test_multi_index_names(self):\n\n        # GH 16789, 16825\n        cols = pd.MultiIndex.from_product(\n            [[\"A\", \"B\"], [\"C\", \"D\", \"E\"]], names=[\"1\", \"2\"]\n        )\n        df = DataFrame(np.ones((10, 6)), columns=cols)\n        result = df.rolling(3).cov()\n\n        tm.assert_index_equal(result.columns, df.columns)\n        assert result.index.names == [None, \"1\", \"2\"]",
        "begin_line": 282,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_iter_raises#295",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_iter_raises(self, klass)",
        "snippet": "    def test_iter_raises(self, klass):\n        # https://github.com/pandas-dev/pandas/issues/11704\n        # Iteration over a Window\n        obj = klass([1, 2, 3, 4])\n        with pytest.raises(NotImplementedError):\n            iter(obj.rolling(2))",
        "begin_line": 295,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_sum#302",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_sum(self, axis_frame)",
        "snippet": "    def test_rolling_axis_sum(self, axis_frame):\n        # see gh-23372.\n        df = DataFrame(np.ones((10, 20)))\n        axis = df._get_axis_number(axis_frame)\n\n        if axis == 0:\n            expected = DataFrame({i: [np.nan] * 2 + [3.0] * 8 for i in range(20)})\n        else:\n            # axis == 1\n            expected = DataFrame([[np.nan] * 2 + [3.0] * 18] * 10)\n\n        result = df.rolling(3, axis=axis_frame).sum()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 302,
        "end_line": 314,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_count#316",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_rolling_axis_count(self, axis_frame)",
        "snippet": "    def test_rolling_axis_count(self, axis_frame):\n        # see gh-26055\n        df = DataFrame({\"x\": range(3), \"y\": range(3)})\n\n        axis = df._get_axis_number(axis_frame)\n\n        if axis in [0, \"index\"]:\n            expected = DataFrame({\"x\": [1.0, 2.0, 2.0], \"y\": [1.0, 2.0, 2.0]})\n        else:\n            expected = DataFrame({\"x\": [1.0, 1.0, 1.0], \"y\": [2.0, 2.0, 2.0]})\n\n        result = df.rolling(2, axis=axis_frame).count()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 316,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_rolling.TestRolling.test_readonly_array#330",
        "src_path": "pandas/tests/window/test_rolling.py",
        "class_name": "pandas.tests.window.test_rolling.TestRolling",
        "signature": "pandas.tests.window.test_rolling.TestRolling.test_readonly_array(self)",
        "snippet": "    def test_readonly_array(self):\n        # GH-27766\n        arr = np.array([1, 3, np.nan, 3, 5])\n        arr.setflags(write=False)\n        result = pd.Series(arr).rolling(2).mean()\n        expected = pd.Series([np.nan, 2, np.nan, np.nan, 4])\n        tm.assert_series_equal(result, expected)",
        "begin_line": 330,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.raw#5",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.raw(request)",
        "snippet": "def raw(request):\n    return request.param",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types#21",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types(request)",
        "snippet": "def win_types(request):\n    return request.param",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types_special#26",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types_special(request)",
        "snippet": "def win_types_special(request):\n    return request.param",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.arithmetic_win_operators#33",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.arithmetic_win_operators(request)",
        "snippet": "def arithmetic_win_operators(request):\n    return request.param",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.Base._create_data#16",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.Base",
        "signature": "pandas.tests.window.common.Base._create_data(self)",
        "snippet": "    def _create_data(self):\n        arr = randn(N)\n        arr[self._nan_locs] = np.NaN\n\n        self.arr = arr\n        self.rng = bdate_range(datetime(2009, 1, 1), periods=N)\n        self.series = Series(arr.copy(), index=self.rng)\n        self.frame = DataFrame(randn(N, K), index=self.rng, columns=np.arange(K))",
        "begin_line": 16,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    }
]