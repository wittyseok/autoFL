[
    {
        "name": "tests.test_logging.reset_logging#21",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.reset_logging()",
        "snippet": "def reset_logging():\n    logging.shutdown()\n    reload(logging)",
        "begin_line": 21,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.test_log#26",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.test_log(app)",
        "snippet": "def test_log(app):\n    log_stream = StringIO()\n    for handler in logging.root.handlers[:]:\n        logging.root.removeHandler(handler)\n    logging.basicConfig(\n        format=logging_format,\n        level=logging.DEBUG,\n        stream=log_stream\n    )\n    log = logging.getLogger()\n    rand_string = str(uuid.uuid4())\n\n    @app.route('/')\n    def handler(request):\n        log.info(rand_string)\n        return text('hello')\n\n    request, response = app.test_client.get('/')\n    log_text = log_stream.getvalue()\n    assert rand_string in log_text",
        "begin_line": 26,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.handler#39",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.handler(request)",
        "snippet": "    def handler(request):\n        log.info(rand_string)\n        return text('hello')",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.test_logging_defaults#48",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.test_logging_defaults()",
        "snippet": "def test_logging_defaults():\n    reset_logging()\n    app = Sanic(\"test_logging\")\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.root').handlers]:\n        assert fmt._fmt == LOGGING_CONFIG_DEFAULTS['formatters']['generic']['format']\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.error').handlers]:\n        assert fmt._fmt == LOGGING_CONFIG_DEFAULTS['formatters']['generic']['format']\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.access').handlers]:\n        assert fmt._fmt == LOGGING_CONFIG_DEFAULTS['formatters']['access']['format']",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.test_logging_pass_customer_logconfig#62",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.test_logging_pass_customer_logconfig()",
        "snippet": "def test_logging_pass_customer_logconfig():\n    reset_logging()\n\n    modified_config = LOGGING_CONFIG_DEFAULTS\n    modified_config['formatters']['generic']['format'] = '%(asctime)s - (%(name)s)[%(levelname)s]: %(message)s'\n    modified_config['formatters']['access']['format'] = '%(asctime)s - (%(name)s)[%(levelname)s]: %(message)s'\n\n    app = Sanic(\"test_logging\", log_config=modified_config)\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.root').handlers]:\n        assert fmt._fmt == modified_config['formatters']['generic']['format']\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.error').handlers]:\n        assert fmt._fmt == modified_config['formatters']['generic']['format']\n\n    for fmt in [h.formatter for h in logging.getLogger('sanic.access').handlers]:\n        assert fmt._fmt == modified_config['formatters']['access']['format']",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.test_log_connection_lost#82",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.test_log_connection_lost(app, debug, monkeypatch)",
        "snippet": "def test_log_connection_lost(app, debug, monkeypatch):\n    \"\"\" Should not log Connection lost exception on non debug \"\"\"\n    stream = StringIO()\n    root = logging.getLogger('sanic.root')\n    root.addHandler(logging.StreamHandler(stream))\n    monkeypatch.setattr(sanic.server, 'logger', root)\n\n    @app.route('/conn_lost')\n    async def conn_lost(request):\n        response = text('Ok')\n        response.output = Mock(side_effect=RuntimeError)\n        return response\n\n    with pytest.raises(ValueError):\n        # catch ValueError: Exception during request\n        app.test_client.get('/conn_lost', debug=debug)\n\n    log = stream.getvalue()\n\n    if debug:\n        assert 'Connection lost before response written @' in log\n    else:\n        assert 'Connection lost before response written @' not in log",
        "begin_line": 82,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.conn_lost#90",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.conn_lost(request)",
        "snippet": "    async def conn_lost(request):\n        response = text('Ok')\n        response.output = Mock(side_effect=RuntimeError)\n        return response",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_logging.test_logging_modified_root_logger_config#107",
        "src_path": "tests/test_logging.py",
        "class_name": "tests.test_logging",
        "signature": "tests.test_logging.test_logging_modified_root_logger_config()",
        "snippet": "def test_logging_modified_root_logger_config():\n    reset_logging()\n\n    modified_config = LOGGING_CONFIG_DEFAULTS\n    modified_config['loggers']['sanic.root']['level'] = 'DEBUG'\n\n    app = Sanic(\"test_logging\", log_config=modified_config)\n\n    assert logging.getLogger('sanic.root').getEffectiveLevel() == logging.DEBUG",
        "begin_line": 107,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    }
]