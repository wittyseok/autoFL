[
    {
        "name": "sanic.router.Router.__init__#82",
        "src_path": "sanic/router.py",
        "class_name": "sanic.router.Router",
        "signature": "sanic.router.Router.__init__(self)",
        "snippet": "    def __init__(self):\n        self.routes_all = {}\n        self.routes_names = {}\n        self.routes_static_files = {}\n        self.routes_static = {}\n        self.routes_dynamic = defaultdict(list)\n        self.routes_always_check = []\n        self.hosts = set()",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.config.Config.__init__#11",
        "src_path": "sanic/config.py",
        "class_name": "sanic.config.Config",
        "signature": "sanic.config.Config.__init__(self, defaults=None, load_env=True, keep_alive=True)",
        "snippet": "    def __init__(self, defaults=None, load_env=True, keep_alive=True):\n        super().__init__(defaults or {})\n        self.LOGO = \"\"\"\n                 \u2584\u2584\u2584\u2584\u2584\n        \u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584       _______________\n      \u2584\u2584\u2584\u2584\u2584  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584  /                 \\\\\n     \u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u258c \u2580\u2590\u2584 \u2580\u2590\u2588 |   Gotta go fast!  |\n   \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2584\u2584 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588 | _________________/\n   \u2580\u2584\u2584\u2584\u2584\u2584  \u2580\u2580\u2588\u2584\u2580\u2588\u2550\u2550\u2550\u2550\u2588\u2580 |/\n        \u2580\u2580\u2580\u2584  \u2580\u2580\u2588\u2588\u2588 \u2580       \u2584\u2584\n     \u2584\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u258c\n   \u2588\u2588\u2580\u2584\u2584\u2584\u2588\u2588\u2580\u2584\u2588\u2588\u2588\u2580 \u2580\u2580\u2588\u2588\u2588\u2588      \u2584\u2588\u2588\n\u2584\u2580\u2580\u2580\u2584\u2588\u2588\u2584\u2580\u2580\u258c\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588     \u258c\u2584\u2584\u2580\n\u258c    \u2590\u2580\u2588\u2588\u2588\u2588\u2590\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2590\u2588\u2588\u258c\n\u2580\u2584\u2584\u2584\u2584\u2580   \u2580\u2580\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2584\u2588\u2588\u2580\n          \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\n        \u2584\u2584\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2588\n      \u2584\u2588\u2588\u2580     \u2580\u2580\u2580  \u2588\n     \u2584\u2588             \u2590\u258c\n \u2584\u2584\u2584\u2584\u2588\u258c              \u2580\u2588\u2584\u2584\u2584\u2584\u2580\u2580\u2584\n\u258c     \u2590                \u2580\u2580\u2584\u2584\u2584\u2580\n \u2580\u2580\u2584\u2584\u2580\n\"\"\"\n        self.REQUEST_MAX_SIZE = 100000000  # 100 megabytes\n        self.REQUEST_TIMEOUT = 60  # 60 seconds\n        self.RESPONSE_TIMEOUT = 60  # 60 seconds\n        self.KEEP_ALIVE = keep_alive\n        self.KEEP_ALIVE_TIMEOUT = 5  # 5 seconds\n        self.WEBSOCKET_MAX_SIZE = 2 ** 20  # 1 megabytes\n        self.WEBSOCKET_MAX_QUEUE = 32\n        self.WEBSOCKET_READ_LIMIT = 2 ** 16\n        self.WEBSOCKET_WRITE_LIMIT = 2 ** 16\n        self.GRACEFUL_SHUTDOWN_TIMEOUT = 15.0  # 15 sec\n        self.ACCESS_LOG = True\n\n        if load_env:\n            prefix = SANIC_PREFIX if load_env is True else load_env\n            self.load_environment_vars(prefix=prefix)",
        "begin_line": 11,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.config.Config.__getattr__#50",
        "src_path": "sanic/config.py",
        "class_name": "sanic.config.Config",
        "signature": "sanic.config.Config.__getattr__(self, attr)",
        "snippet": "    def __getattr__(self, attr):\n        try:\n            return self[attr]\n        except KeyError as ke:\n            raise AttributeError(\"Config has no '{}'\".format(ke.args[0]))",
        "begin_line": 50,
        "end_line": 54,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.config.Config.load_environment_vars#118",
        "src_path": "sanic/config.py",
        "class_name": "sanic.config.Config",
        "signature": "sanic.config.Config.load_environment_vars(self, prefix=SANIC_PREFIX)",
        "snippet": "    def load_environment_vars(self, prefix=SANIC_PREFIX):\n        \"\"\"\n        Looks for prefixed environment variables and applies\n        them to the configuration if present.\n        \"\"\"\n        for k, v in os.environ.items():\n            if k.startswith(prefix):\n                _, config_key = k.split(prefix, 1)\n                try:\n                    self[config_key] = int(v)\n                except ValueError:\n                    try:\n                        self[config_key] = float(v)\n                    except ValueError:\n                        self[config_key] = v",
        "begin_line": 118,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.server.HttpProtocol.__init__#78",
        "src_path": "sanic/server.py",
        "class_name": "sanic.server.HttpProtocol",
        "signature": "sanic.server.HttpProtocol.__init__(self, *, loop, request_handler, error_handler, signal=Signal(), connections=set(), request_timeout=60, response_timeout=60, keep_alive_timeout=5, request_max_size=None, request_class=None, access_log=True, keep_alive=True, is_request_stream=False, router=None, state=None, debug=False, **kwargs)",
        "snippet": "    def __init__(\n        self,\n        *,\n        loop,\n        request_handler,\n        error_handler,\n        signal=Signal(),\n        connections=set(),\n        request_timeout=60,\n        response_timeout=60,\n        keep_alive_timeout=5,\n        request_max_size=None,\n        request_class=None,\n        access_log=True,\n        keep_alive=True,\n        is_request_stream=False,\n        router=None,\n        state=None,\n        debug=False,\n        **kwargs\n    ):\n        self.loop = loop\n        self.transport = None\n        self.request = None\n        self.parser = None\n        self.url = None\n        self.headers = None\n        self.router = router\n        self.signal = signal\n        self.access_log = access_log\n        self.connections = connections\n        self.request_handler = request_handler\n        self.error_handler = error_handler\n        self.request_timeout = request_timeout\n        self.response_timeout = response_timeout\n        self.keep_alive_timeout = keep_alive_timeout\n        self.request_max_size = request_max_size\n        self.request_class = request_class or Request\n        self.is_request_stream = is_request_stream\n        self._is_stream_handler = False\n        self._not_paused = asyncio.Event(loop=loop)\n        self._total_request_size = 0\n        self._request_timeout_handler = None\n        self._response_timeout_handler = None\n        self._keep_alive_timeout_handler = None\n        self._last_request_time = None\n        self._last_response_time = None\n        self._request_handler_task = None\n        self._request_stream_task = None\n        self._keep_alive = keep_alive\n        self._header_fragment = b\"\"\n        self.state = state if state else {}\n        if \"requests_count\" not in self.state:\n            self.state[\"requests_count\"] = 0\n        self._debug = debug\n        self._not_paused.set()",
        "begin_line": 78,
        "end_line": 133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.server.update_current_time#531",
        "src_path": "sanic/server.py",
        "class_name": "sanic.server",
        "signature": "sanic.server.update_current_time(loop)",
        "snippet": "def update_current_time(loop):\n    \"\"\"Cache the current time, since it is needed at the end of every\n    keep-alive request to update the request timeout time\n\n    :param loop:\n    :return:\n    \"\"\"\n    global current_time\n    current_time = time()\n    loop.call_later(1, partial(update_current_time, loop))",
        "begin_line": 531,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.server.trigger_events#543",
        "src_path": "sanic/server.py",
        "class_name": "sanic.server",
        "signature": "sanic.server.trigger_events(events, loop)",
        "snippet": "def trigger_events(events, loop):\n    \"\"\"Trigger event callbacks (functions or async)\n\n    :param events: one or more sync or async functions to execute\n    :param loop: event loop\n    \"\"\"\n    for event in events:\n        result = event(loop)\n        if isawaitable(result):\n            loop.run_until_complete(result)",
        "begin_line": 543,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.server.serve#555",
        "src_path": "sanic/server.py",
        "class_name": "sanic.server",
        "signature": "sanic.server.serve(host, port, request_handler, error_handler, before_start=None, after_start=None, before_stop=None, after_stop=None, debug=False, request_timeout=60, response_timeout=60, keep_alive_timeout=5, ssl=None, sock=None, request_max_size=None, reuse_port=False, loop=None, protocol=HttpProtocol, backlog=100, register_sys_signals=True, run_multiple=False, run_async=False, connections=None, signal=Signal(), request_class=None, access_log=True, keep_alive=True, is_request_stream=False, router=None, websocket_max_size=None, websocket_max_queue=None, websocket_read_limit=2 ** 16, websocket_write_limit=2 ** 16, state=None, graceful_shutdown_timeout=15.0)",
        "snippet": "def serve(\n    host,\n    port,\n    request_handler,\n    error_handler,\n    before_start=None,\n    after_start=None,\n    before_stop=None,\n    after_stop=None,\n    debug=False,\n    request_timeout=60,\n    response_timeout=60,\n    keep_alive_timeout=5,\n    ssl=None,\n    sock=None,\n    request_max_size=None,\n    reuse_port=False,\n    loop=None,\n    protocol=HttpProtocol,\n    backlog=100,\n    register_sys_signals=True,\n    run_multiple=False,\n    run_async=False,\n    connections=None,\n    signal=Signal(),\n    request_class=None,\n    access_log=True,\n    keep_alive=True,\n    is_request_stream=False,\n    router=None,\n    websocket_max_size=None,\n    websocket_max_queue=None,\n    websocket_read_limit=2 ** 16,\n    websocket_write_limit=2 ** 16,\n    state=None,\n    graceful_shutdown_timeout=15.0,\n):\n    \"\"\"Start asynchronous HTTP Server on an individual process.\n\n    :param host: Address to host on\n    :param port: Port to host on\n    :param request_handler: Sanic request handler with middleware\n    :param error_handler: Sanic error handler with middleware\n    :param before_start: function to be executed before the server starts\n                         listening. Takes arguments `app` instance and `loop`\n    :param after_start: function to be executed after the server starts\n                        listening. Takes  arguments `app` instance and `loop`\n    :param before_stop: function to be executed when a stop signal is\n                        received before it is respected. Takes arguments\n                        `app` instance and `loop`\n    :param after_stop: function to be executed when a stop signal is\n                       received after it is respected. Takes arguments\n                       `app` instance and `loop`\n    :param debug: enables debug output (slows server)\n    :param request_timeout: time in seconds\n    :param response_timeout: time in seconds\n    :param keep_alive_timeout: time in seconds\n    :param ssl: SSLContext\n    :param sock: Socket for the server to accept connections from\n    :param request_max_size: size in bytes, `None` for no limit\n    :param reuse_port: `True` for multiple workers\n    :param loop: asyncio compatible event loop\n    :param protocol: subclass of asyncio protocol class\n    :param request_class: Request class to use\n    :param access_log: disable/enable access log\n    :param websocket_max_size: enforces the maximum size for\n                               incoming messages in bytes.\n    :param websocket_max_queue: sets the maximum length of the queue\n                                that holds incoming messages.\n    :param websocket_read_limit: sets the high-water limit of the buffer for\n                                 incoming bytes, the low-water limit is half\n                                 the high-water limit.\n    :param websocket_write_limit: sets the high-water limit of the buffer for\n                                  outgoing bytes, the low-water limit is a\n                                  quarter of the high-water limit.\n    :param is_request_stream: disable/enable Request.stream\n    :param router: Router object\n    :param graceful_shutdown_timeout: How long take to Force close non-idle\n                                      connection\n    :return: Nothing\n    \"\"\"\n    if not run_async:\n        # create new event_loop after fork\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n\n    if debug:\n        loop.set_debug(debug)\n\n    connections = connections if connections is not None else set()\n    server = partial(\n        protocol,\n        loop=loop,\n        connections=connections,\n        signal=signal,\n        request_handler=request_handler,\n        error_handler=error_handler,\n        request_timeout=request_timeout,\n        response_timeout=response_timeout,\n        keep_alive_timeout=keep_alive_timeout,\n        request_max_size=request_max_size,\n        request_class=request_class,\n        access_log=access_log,\n        keep_alive=keep_alive,\n        is_request_stream=is_request_stream,\n        router=router,\n        websocket_max_size=websocket_max_size,\n        websocket_max_queue=websocket_max_queue,\n        websocket_read_limit=websocket_read_limit,\n        websocket_write_limit=websocket_write_limit,\n        state=state,\n        debug=debug,\n    )\n\n    server_coroutine = loop.create_server(\n        server,\n        host,\n        port,\n        ssl=ssl,\n        reuse_port=reuse_port,\n        sock=sock,\n        backlog=backlog,\n    )\n\n    # Instead of pulling time at the end of every request,\n    # pull it once per minute\n    loop.call_soon(partial(update_current_time, loop))\n\n    if run_async:\n        return server_coroutine\n\n    trigger_events(before_start, loop)\n\n    try:\n        http_server = loop.run_until_complete(server_coroutine)\n    except BaseException:\n        logger.exception(\"Unable to start server\")\n        return\n\n    trigger_events(after_start, loop)\n\n    # Ignore SIGINT when run_multiple\n    if run_multiple:\n        signal_func(SIGINT, SIG_IGN)\n\n    # Register signals for graceful termination\n    if register_sys_signals:\n        _singals = (SIGTERM,) if run_multiple else (SIGINT, SIGTERM)\n        for _signal in _singals:\n            try:\n                loop.add_signal_handler(_signal, loop.stop)\n            except NotImplementedError:\n                logger.warning(\n                    \"Sanic tried to use loop.add_signal_handler \"\n                    \"but it is not implemented on this platform.\"\n                )\n    pid = os.getpid()\n    try:\n        logger.info(\"Starting worker [%s]\", pid)\n        loop.run_forever()\n    finally:\n        logger.info(\"Stopping worker [%s]\", pid)\n\n        # Run the on_stop function if provided\n        trigger_events(before_stop, loop)\n\n        # Wait for event loop to finish and all connections to drain\n        http_server.close()\n        loop.run_until_complete(http_server.wait_closed())\n\n        # Complete all tasks on the loop\n        signal.stopped = True\n        for connection in connections:\n            connection.close_if_idle()\n\n        # Gracefully shutdown timeout.\n        # We should provide graceful_shutdown_timeout,\n        # instead of letting connection hangs forever.\n        # Let's roughly calcucate time.\n        start_shutdown = 0\n        while connections and (start_shutdown < graceful_shutdown_timeout):\n            loop.run_until_complete(asyncio.sleep(0.1))\n            start_shutdown = start_shutdown + 0.1\n\n        # Force close non-idle connection after waiting for\n        # graceful_shutdown_timeout\n        coros = []\n        for conn in connections:\n            if hasattr(conn, \"websocket\") and conn.websocket:\n                coros.append(conn.websocket.close_connection())\n            else:\n                conn.close()\n\n        _shutdown = asyncio.gather(*coros, loop=loop)\n        loop.run_until_complete(_shutdown)\n\n        trigger_events(after_stop, loop)\n\n        loop.close()",
        "begin_line": 555,
        "end_line": 753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.app.Sanic.__init__#31",
        "src_path": "sanic/app.py",
        "class_name": "sanic.app.Sanic",
        "signature": "sanic.app.Sanic.__init__(self, name=None, router=None, error_handler=None, load_env=True, request_class=None, strict_slashes=False, log_config=None, configure_logging=True)",
        "snippet": "    def __init__(\n        self,\n        name=None,\n        router=None,\n        error_handler=None,\n        load_env=True,\n        request_class=None,\n        strict_slashes=False,\n        log_config=None,\n        configure_logging=True,\n    ):\n\n        # Get name from previous stack frame\n        if name is None:\n            frame_records = stack()[1]\n            name = getmodulename(frame_records[1])\n\n        # logging\n        if configure_logging:\n            logging.config.dictConfig(log_config or LOGGING_CONFIG_DEFAULTS)\n\n        self.name = name\n        self.router = router or Router()\n        self.request_class = request_class\n        self.error_handler = error_handler or ErrorHandler()\n        self.config = Config(load_env=load_env)\n        self.request_middleware = deque()\n        self.response_middleware = deque()\n        self.blueprints = {}\n        self._blueprint_order = []\n        self.configure_logging = configure_logging\n        self.debug = None\n        self.sock = None\n        self.strict_slashes = strict_slashes\n        self.listeners = defaultdict(list)\n        self.is_running = False\n        self.is_request_stream = False\n        self.websocket_enabled = False\n        self.websocket_tasks = set()\n\n        # Register alternative method names\n        self.go_fast = self.run",
        "begin_line": 31,
        "end_line": 72,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.app.Sanic.listener#120",
        "src_path": "sanic/app.py",
        "class_name": "sanic.app.Sanic",
        "signature": "sanic.app.Sanic.listener(self, event)",
        "snippet": "    def listener(self, event):\n        \"\"\"Create a listener from a decorated function.\n\n        :param event: event to listen to\n        \"\"\"\n\n        def decorator(listener):\n            self.listeners[event].append(listener)\n            return listener\n\n        return decorator",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.app.Sanic.decorator#126",
        "src_path": "sanic/app.py",
        "class_name": "sanic.app.Sanic",
        "signature": "sanic.app.Sanic.decorator(listener)",
        "snippet": "        def decorator(listener):\n            self.listeners[event].append(listener)\n            return listener",
        "begin_line": 126,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.app.Sanic.run#823",
        "src_path": "sanic/app.py",
        "class_name": "sanic.app.Sanic",
        "signature": "sanic.app.Sanic.run(self, host=None, port=None, debug=False, ssl=None, sock=None, workers=1, protocol=None, backlog=100, stop_event=None, register_sys_signals=True, access_log=True, **kwargs)",
        "snippet": "    def run(\n        self,\n        host=None,\n        port=None,\n        debug=False,\n        ssl=None,\n        sock=None,\n        workers=1,\n        protocol=None,\n        backlog=100,\n        stop_event=None,\n        register_sys_signals=True,\n        access_log=True,\n        **kwargs\n    ):\n        if \"loop\" in kwargs:\n            raise TypeError(\n                \"loop is not a valid argument. To use an existing loop, \"\n                \"change to create_server().\\nSee more: \"\n                \"https://sanic.readthedocs.io/en/latest/sanic/deploying.html\"\n                \"#asynchronous-support\"\n            )\n\n        \"\"\"Run the HTTP Server and listen until keyboard interrupt or term\n        signal. On termination, drain connections before closing.\n\n        :param host: Address to host on\n        :param port: Port to host on\n        :param debug: Enables debug output (slows server)\n        :param ssl: SSLContext, or location of certificate and key\n                            for SSL encryption of worker(s)\n        :param sock: Socket for the server to accept connections from\n        :param workers: Number of processes\n                            received before it is respected\n        :param backlog:\n        :param stop_event:\n        :param register_sys_signals:\n        :param protocol: Subclass of asyncio protocol class\n        :return: Nothing\n        \"\"\"\n        # Default auto_reload to false\n        auto_reload = False\n        # If debug is set, default it to true (unless on windows)\n        if debug and os.name == \"posix\":\n            auto_reload = True\n        # Allow for overriding either of the defaults\n        auto_reload = kwargs.get(\"auto_reload\", auto_reload)\n\n        if sock is None:\n            host, port = host or \"127.0.0.1\", port or 8000\n\n        if protocol is None:\n            protocol = (\n                WebSocketProtocol if self.websocket_enabled else HttpProtocol\n            )\n        if stop_event is not None:\n            if debug:\n                warnings.simplefilter(\"default\")\n            warnings.warn(\n                \"stop_event will be removed from future versions.\",\n                DeprecationWarning,\n            )\n        # compatibility old access_log params\n        self.config.ACCESS_LOG = access_log\n        server_settings = self._helper(\n            host=host,\n            port=port,\n            debug=debug,\n            ssl=ssl,\n            sock=sock,\n            workers=workers,\n            protocol=protocol,\n            backlog=backlog,\n            register_sys_signals=register_sys_signals,\n            auto_reload=auto_reload,\n        )\n\n        try:\n            self.is_running = True\n            if workers == 1:\n                if auto_reload and os.name != \"posix\":\n                    # This condition must be removed after implementing\n                    # auto reloader for other operating systems.\n                    raise NotImplementedError\n\n                if (\n                    auto_reload\n                    and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\"\n                ):\n                    reloader_helpers.watchdog(2)\n                else:\n                    serve(**server_settings)\n            else:\n                serve_multiple(server_settings, workers)\n        except BaseException:\n            error_logger.exception(\n                \"Experienced exception while trying to serve\"\n            )\n            raise\n        finally:\n            self.is_running = False\n        logger.info(\"Server Stopped\")",
        "begin_line": 823,
        "end_line": 924,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.app.Sanic._helper#1020",
        "src_path": "sanic/app.py",
        "class_name": "sanic.app.Sanic",
        "signature": "sanic.app.Sanic._helper(self, host=None, port=None, debug=False, ssl=None, sock=None, workers=1, loop=None, protocol=HttpProtocol, backlog=100, stop_event=None, register_sys_signals=True, run_async=False, auto_reload=False)",
        "snippet": "    def _helper(\n        self,\n        host=None,\n        port=None,\n        debug=False,\n        ssl=None,\n        sock=None,\n        workers=1,\n        loop=None,\n        protocol=HttpProtocol,\n        backlog=100,\n        stop_event=None,\n        register_sys_signals=True,\n        run_async=False,\n        auto_reload=False,\n    ):\n        \"\"\"Helper function used by `run` and `create_server`.\"\"\"\n        if isinstance(ssl, dict):\n            # try common aliaseses\n            cert = ssl.get(\"cert\") or ssl.get(\"certificate\")\n            key = ssl.get(\"key\") or ssl.get(\"keyfile\")\n            if cert is None or key is None:\n                raise ValueError(\"SSLContext or certificate and key required.\")\n            context = create_default_context(purpose=Purpose.CLIENT_AUTH)\n            context.load_cert_chain(cert, keyfile=key)\n            ssl = context\n        if stop_event is not None:\n            if debug:\n                warnings.simplefilter(\"default\")\n            warnings.warn(\n                \"stop_event will be removed from future versions.\",\n                DeprecationWarning,\n            )\n\n        self.error_handler.debug = debug\n        self.debug = debug\n\n        server_settings = {\n            \"protocol\": protocol,\n            \"request_class\": self.request_class,\n            \"is_request_stream\": self.is_request_stream,\n            \"router\": self.router,\n            \"host\": host,\n            \"port\": port,\n            \"sock\": sock,\n            \"ssl\": ssl,\n            \"signal\": Signal(),\n            \"debug\": debug,\n            \"request_handler\": self.handle_request,\n            \"error_handler\": self.error_handler,\n            \"request_timeout\": self.config.REQUEST_TIMEOUT,\n            \"response_timeout\": self.config.RESPONSE_TIMEOUT,\n            \"keep_alive_timeout\": self.config.KEEP_ALIVE_TIMEOUT,\n            \"request_max_size\": self.config.REQUEST_MAX_SIZE,\n            \"keep_alive\": self.config.KEEP_ALIVE,\n            \"loop\": loop,\n            \"register_sys_signals\": register_sys_signals,\n            \"backlog\": backlog,\n            \"access_log\": self.config.ACCESS_LOG,\n            \"websocket_max_size\": self.config.WEBSOCKET_MAX_SIZE,\n            \"websocket_max_queue\": self.config.WEBSOCKET_MAX_QUEUE,\n            \"websocket_read_limit\": self.config.WEBSOCKET_READ_LIMIT,\n            \"websocket_write_limit\": self.config.WEBSOCKET_WRITE_LIMIT,\n            \"graceful_shutdown_timeout\": self.config.GRACEFUL_SHUTDOWN_TIMEOUT,\n        }\n\n        # -------------------------------------------- #\n        # Register start/stop events\n        # -------------------------------------------- #\n\n        for event_name, settings_name, reverse in (\n            (\"before_server_start\", \"before_start\", False),\n            (\"after_server_start\", \"after_start\", False),\n            (\"before_server_stop\", \"before_stop\", True),\n            (\"after_server_stop\", \"after_stop\", True),\n        ):\n            listeners = self.listeners[event_name].copy()\n            if reverse:\n                listeners.reverse()\n            # Prepend sanic to the arguments when listeners are triggered\n            listeners = [partial(listener, self) for listener in listeners]\n            server_settings[settings_name] = listeners\n\n        if self.configure_logging and debug:\n            logger.setLevel(logging.DEBUG)\n\n        if (\n            self.config.LOGO is not None\n            and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\"\n        ):\n            logger.debug(self.config.LOGO)\n\n        if run_async:\n            server_settings[\"run_async\"] = True\n\n        # Serve\n        if host and port and os.environ.get(\"SANIC_SERVER_RUNNING\") != \"true\":\n            proto = \"http\"\n            if ssl is not None:\n                proto = \"https\"\n            logger.info(\"Goin' Fast @ {}://{}:{}\".format(proto, host, port))\n\n        return server_settings",
        "begin_line": 1020,
        "end_line": 1122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    },
    {
        "name": "sanic.handlers.ErrorHandler.__init__#26",
        "src_path": "sanic/handlers.py",
        "class_name": "sanic.handlers.ErrorHandler",
        "signature": "sanic.handlers.ErrorHandler.__init__(self)",
        "snippet": "    def __init__(self):\n        self.handlers = []\n        self.cached_handlers = {}\n        self.debug = False",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.009708737864077669,
            "pseudo_dstar_susp": 0.009708737864077669,
            "pseudo_tarantula_susp": 0.009708737864077669,
            "pseudo_op2_susp": 0.010101010101010102,
            "pseudo_barinel_susp": 0.009708737864077669
        }
    }
]