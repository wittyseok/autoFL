[
    {
        "name": "tests.test_utils.test_wrap_settings#15",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_wrap_settings(override, old, new)",
        "snippet": "def test_wrap_settings(override, old, new):\n    fn = lambda _, settings: settings\n    assert wrap_settings(override)(fn)(None, Settings(old)) == new",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_memoize#20",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_memoize()",
        "snippet": "def test_memoize():\n    fn = Mock(__name__='fn')\n    memoized = memoize(fn)\n    memoized()\n    memoized()\n    fn.assert_called_once_with()",
        "begin_line": 20,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_no_memoize#29",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_no_memoize()",
        "snippet": "def test_no_memoize():\n    fn = Mock(__name__='fn')\n    memoized = memoize(fn)\n    memoized()\n    memoized()\n    assert fn.call_count == 2",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_when_can_match#38",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_when_can_match(self)",
        "snippet": "    def test_when_can_match(self):\n        assert 'branch' == get_closest('brnch', ['branch', 'status'])",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_when_cant_match#41",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_when_cant_match(self)",
        "snippet": "    def test_when_cant_match(self):\n        assert 'status' == get_closest('st', ['status', 'reset'])",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestGetClosest.test_without_fallback#44",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestGetClosest",
        "signature": "tests.test_utils.TestGetClosest.test_without_fallback(self)",
        "snippet": "    def test_without_fallback(self):\n        assert get_closest('st', ['status', 'reset'],\n                           fallback_to_first=False) is None",
        "begin_line": 44,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.get_aliases#50",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.get_aliases(mocker)",
        "snippet": "def get_aliases(mocker):\n    mocker.patch('thefuck.shells.get_aliases',\n                 return_value=['vim', 'apt-get', 'fsck', 'fuck'])",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_get_all_callables#56",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_get_all_callables()",
        "snippet": "def test_get_all_callables():\n    all_callables = get_all_executables()\n    assert 'vim' in all_callables\n    assert 'fsck' in all_callables\n    assert 'fuck' not in all_callables",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_replace_argument#66",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_replace_argument(args, result)",
        "snippet": "def test_replace_argument(args, result):\n    assert replace_argument(*args) == result",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_get_all_matched_commands#95",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_get_all_matched_commands(stderr, result)",
        "snippet": "def test_get_all_matched_commands(stderr, result):\n    assert list(get_all_matched_commands(stderr)) == result",
        "begin_line": 95,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_is_app#104",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_is_app(script, names, result)",
        "snippet": "def test_is_app(script, names, result):\n    assert is_app(Command(script), *names) == result",
        "begin_line": 104,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.test_for_app#113",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.test_for_app(script, names, result)",
        "snippet": "def test_for_app(script, names, result):\n    @for_app(*names)\n    def match(command, settings):\n        return True\n\n    assert match(Command(script), None) == result",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.match#115",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils",
        "signature": "tests.test_utils.match(command, settings)",
        "snippet": "    def match(command, settings):\n        return True",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.enable_cache#123",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.enable_cache(self, monkeypatch)",
        "snippet": "    def enable_cache(self, monkeypatch):\n        monkeypatch.setattr('thefuck.utils.cache.disabled', False)",
        "begin_line": 123,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.shelve#127",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.shelve(self, mocker)",
        "snippet": "    def shelve(self, mocker):\n        value = {}\n\n        class _Shelve(object):\n            def __init__(self, path):\n                pass\n\n            def __setitem__(self, k, v):\n                value[k] = v\n\n            def __getitem__(self, k):\n                return value[k]\n\n            def get(self, k, v=None):\n                return value.get(k, v)\n\n            def close(self):\n                return\n\n        mocker.patch('thefuck.utils.shelve.open', new_callable=lambda: _Shelve)\n        return value",
        "begin_line": 127,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.shelve#127",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.shelve(self, mocker)",
        "snippet": "    def shelve(self, mocker):\n        value = {}\n\n        class _Shelve(object):\n            def __init__(self, path):\n                pass\n\n            def __setitem__(self, k, v):\n                value[k] = v\n\n            def __getitem__(self, k):\n                return value[k]\n\n            def get(self, k, v=None):\n                return value.get(k, v)\n\n            def close(self):\n                return\n\n        mocker.patch('thefuck.utils.shelve.open', new_callable=lambda: _Shelve)\n        return value",
        "begin_line": 127,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__init__#131",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__init__(self, path)",
        "snippet": "            def __init__(self, path):\n                pass",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__setitem__#134",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__setitem__(self, k, v)",
        "snippet": "            def __setitem__(self, k, v):\n                value[k] = v",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.__getitem__#137",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.__getitem__(self, k)",
        "snippet": "            def __getitem__(self, k):\n                return value[k]",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.get#140",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.get(self, k, v=None)",
        "snippet": "            def get(self, k, v=None):\n                return value.get(k, v)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils._Shelve.close#143",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils._Shelve",
        "signature": "tests.test_utils._Shelve.close(self)",
        "snippet": "            def close(self):\n                return",
        "begin_line": 143,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.mtime#150",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.mtime(self, mocker)",
        "snippet": "    def mtime(self, mocker):\n        mocker.patch('thefuck.utils.os.path.getmtime', return_value=0)",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.fn#154",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.fn(self)",
        "snippet": "    def fn(self):\n        @cache('~/.bashrc')\n        def fn():\n            return 'test'\n\n        return fn",
        "begin_line": 154,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.fn#156",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.fn()",
        "snippet": "        def fn():\n            return 'test'",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.key#162",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.key(self)",
        "snippet": "    def key(self):\n        if six.PY3:\n            return 'tests.test_utils.<function TestCache.fn.<locals>.fn '\n        else:\n            return 'tests.test_utils.<function fn '",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_with_blank_cache#168",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_with_blank_cache(self, shelve, fn, key)",
        "snippet": "    def test_with_blank_cache(self, shelve, fn, key):\n        assert shelve == {}\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_with_filled_cache#173",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_with_filled_cache(self, shelve, fn, key)",
        "snippet": "    def test_with_filled_cache(self, shelve, fn, key):\n        cache_value = {key: {'etag': '0', 'value': 'new-value'}}\n        shelve.update(cache_value)\n        assert fn() == 'new-value'\n        assert shelve == cache_value",
        "begin_line": 173,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils.TestCache.test_when_etag_changed#179",
        "src_path": "tests/test_utils.py",
        "class_name": "tests.test_utils.TestCache",
        "signature": "tests.test_utils.TestCache.test_when_etag_changed(self, shelve, fn, key)",
        "snippet": "    def test_when_etag_changed(self, shelve, fn, key):\n        shelve.update({key: {'etag': '-1', 'value': 'old-value'}})\n        assert fn() == 'test'\n        assert shelve == {key: {'etag': '0', 'value': 'test'}}",
        "begin_line": 179,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#11",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings()",
        "snippet": "def settings():\n    return Mock(debug=False, no_colors=True)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#16",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 16,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Command(script='', stdout='', stderr='')",
        "snippet": "def Command(script='', stdout='', stderr=''):\n    return types.Command(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule#10",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Rule(name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "def Rule(name='', match=lambda *_: True,\n         get_new_command=lambda *_: '',\n         enabled_by_default=True,\n         side_effect=None,\n         priority=DEFAULT_PRIORITY,\n         requires_output=True):\n    return types.Rule(name, match, get_new_command,\n                      enabled_by_default, side_effect,\n                      priority, requires_output)",
        "begin_line": 10,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand#21",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "def CorrectedCommand(script='', side_effect=None, priority=DEFAULT_PRIORITY):\n    return types.CorrectedCommand(script, side_effect, priority)",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    }
]