[
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_na_flags_int_categories#14",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_na_flags_int_categories(self)",
        "snippet": "    def test_na_flags_int_categories(self):\n        # #1457\n\n        categories = list(range(10))\n        labels = np.random.randint(0, 10, 20)\n        labels[::5] = -1\n\n        cat = Categorical(labels, categories, fastpath=True)\n        repr(cat)\n\n        tm.assert_numpy_array_equal(isna(cat), labels == -1)",
        "begin_line": 14,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_nan_handling#26",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_nan_handling(self)",
        "snippet": "    def test_nan_handling(self):\n\n        # Nans are represented as -1 in codes\n        c = Categorical([\"a\", \"b\", np.nan, \"a\"])\n        tm.assert_index_equal(c.categories, Index([\"a\", \"b\"]))\n        tm.assert_numpy_array_equal(c._codes, np.array([0, 1, -1, 0], dtype=np.int8))\n        c[1] = np.nan\n        tm.assert_index_equal(c.categories, Index([\"a\", \"b\"]))\n        tm.assert_numpy_array_equal(c._codes, np.array([0, -1, -1, 0], dtype=np.int8))\n\n        # Adding nan to categories should make assigned nan point to the\n        # category!\n        c = Categorical([\"a\", \"b\", np.nan, \"a\"])\n        tm.assert_index_equal(c.categories, Index([\"a\", \"b\"]))\n        tm.assert_numpy_array_equal(c._codes, np.array([0, 1, -1, 0], dtype=np.int8))",
        "begin_line": 26,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_dtype_nans#42",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_dtype_nans(self)",
        "snippet": "    def test_set_dtype_nans(self):\n        c = Categorical([\"a\", \"b\", np.nan])\n        result = c._set_dtype(CategoricalDtype([\"a\", \"c\"]))\n        tm.assert_numpy_array_equal(result.codes, np.array([0, -1, -1], dtype=\"int8\"))",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_item_nan#47",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_set_item_nan(self)",
        "snippet": "    def test_set_item_nan(self):\n        cat = Categorical([1, 2, 3])\n        cat[1] = np.nan\n\n        exp = Categorical([1, np.nan, 3], categories=[1, 2, 3])\n        tm.assert_categorical_equal(cat, exp)",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_raises#66",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_raises(self, fillna_kwargs, msg)",
        "snippet": "    def test_fillna_raises(self, fillna_kwargs, msg):\n        # https://github.com/pandas-dev/pandas/issues/19682\n        # https://github.com/pandas-dev/pandas/issues/13628\n        cat = Categorical([1, 2, 3, None, None])\n\n        with pytest.raises(ValueError, match=msg):\n            cat.fillna(**fillna_kwargs)",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_iterable_category#75",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_iterable_category(self, named)",
        "snippet": "    def test_fillna_iterable_category(self, named):\n        # https://github.com/pandas-dev/pandas/issues/21097\n        if named:\n            Point = collections.namedtuple(\"Point\", \"x y\")\n        else:\n            Point = lambda *args: args  # tuple\n        cat = Categorical(np.array([Point(0, 0), Point(0, 1), None], dtype=object))\n        result = cat.fillna(Point(0, 0))\n        expected = Categorical([Point(0, 0), Point(0, 1), Point(0, 0)])\n\n        tm.assert_categorical_equal(result, expected)",
        "begin_line": 75,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_array#87",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_fillna_array(self)",
        "snippet": "    def test_fillna_array(self):\n        # accept Categorical or ndarray value if it holds appropriate values\n        cat = Categorical([\"A\", \"B\", \"C\", None, None])\n\n        other = cat.fillna(\"C\")\n        result = cat.fillna(other)\n        tm.assert_categorical_equal(result, other)\n        assert isna(cat[-1])  # didnt modify original inplace\n\n        other = np.array([\"A\", \"B\", \"C\", \"B\", \"A\"])\n        result = cat.fillna(other)\n        expected = Categorical([\"A\", \"B\", \"C\", \"B\", \"A\"], dtype=cat.dtype)\n        tm.assert_categorical_equal(result, expected)\n        assert isna(cat[-1])  # didnt modify original inplace",
        "begin_line": 87,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na#111",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na(self, values, expected)",
        "snippet": "    def test_use_inf_as_na(self, values, expected):\n        # https://github.com/pandas-dev/pandas/issues/33594\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            cat = Categorical(values)\n            result = cat.isna()\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = Series(cat).isna()\n            expected = Series(expected)\n            tm.assert_series_equal(result, expected)\n\n            result = DataFrame(cat).isna()\n            expected = DataFrame(expected)\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 111,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na_outside_context#135",
        "src_path": "pandas/tests/arrays/categorical/test_missing.py",
        "class_name": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing",
        "signature": "pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing.test_use_inf_as_na_outside_context(self, values, expected)",
        "snippet": "    def test_use_inf_as_na_outside_context(self, values, expected):\n        # https://github.com/pandas-dev/pandas/issues/33594\n        # Using isna directly for Categorical will fail in general here\n        cat = Categorical(values)\n\n        with pd.option_context(\"mode.use_inf_as_na\", True):\n            result = pd.isna(cat)\n            tm.assert_numpy_array_equal(result, expected)\n\n            result = pd.isna(Series(cat))\n            expected = Series(expected)\n            tm.assert_series_equal(result, expected)\n\n            result = pd.isna(DataFrame(cat))\n            expected = DataFrame(expected)\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 135,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.conftest.allow_fill#5",
        "src_path": "pandas/tests/arrays/categorical/conftest.py",
        "class_name": "pandas.tests.arrays.categorical.conftest",
        "signature": "pandas.tests.arrays.categorical.conftest.allow_fill(request)",
        "snippet": "def allow_fill(request):\n    \"\"\"Boolean 'allow_fill' parameter for Categorical.take\"\"\"\n    return request.param",
        "begin_line": 5,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal#12",
        "src_path": "pandas/tests/extension/base/base.py",
        "class_name": "pandas.tests.extension.base.base.BaseExtensionTests",
        "signature": "pandas.tests.extension.base.base.BaseExtensionTests.assert_series_equal(cls, left, right, *args, **kwargs)",
        "snippet": "    def assert_series_equal(cls, left, right, *args, **kwargs):\n        return tm.assert_series_equal(left, right, *args, **kwargs)",
        "begin_line": 12,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.dtype#29",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data#34",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(\n        list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100],\n        dtype=dtype,\n    )",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.data_missing#42",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.integer.conftest.all_data#47",
        "src_path": "pandas/tests/arrays/integer/conftest.py",
        "class_name": "pandas.tests.arrays.integer.conftest",
        "signature": "pandas.tests.arrays.integer.conftest.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method#5",
        "src_path": "pandas/tests/arrays/categorical/common.py",
        "class_name": "pandas.tests.arrays.categorical.common.TestCategorical",
        "signature": "pandas.tests.arrays.categorical.common.TestCategorical.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.factor = Categorical(\n            [\"a\", \"b\", \"b\", \"a\", \"a\", \"c\", \"c\", \"c\"], ordered=True\n        )",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#24",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#31",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"DecimalArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#49",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 49,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#65",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#111",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            # array, slice.\n            item = pd.api.indexers.check_array_indexer(self, item)\n            return type(self)(self._data[item])",
        "begin_line": 111,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#132",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#148",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 148,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#158",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 158,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    }
]