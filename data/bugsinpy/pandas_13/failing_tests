coverage run -m pytest pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 4 items

pandas/tests/arrays/categorical/test_missing.py FFFF                     [100%]

=================================== FAILURES ===================================
_________ TestCategoricalMissing.test_use_inf_as_na[values0-expected0] _________

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7fed808e0d60>
values = [1, 2, 3], expected = array([False, False, False])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        with pd.option_context("mode.use_inf_as_na", True):
            cat = Categorical(values)
            result = cat.isna()
            tm.assert_numpy_array_equal(result, expected)
    
>           result = Series(cat).isna()

pandas/tests/arrays/categorical/test_missing.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4537: in isna
    return super().isna()
pandas/core/generic.py:7183: in isna
    return isna(self).__finalize__(self, method="isna")
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, 3]
Categories (3, int64): [1, 2, 3]
dtype = CategoricalDtype(categories=[1, 2, 3], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_________ TestCategoricalMissing.test_use_inf_as_na[values1-expected1] _________

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7fed6c2a0040>
values = [1, 2, nan], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        with pd.option_context("mode.use_inf_as_na", True):
            cat = Categorical(values)
            result = cat.isna()
            tm.assert_numpy_array_equal(result, expected)
    
>           result = Series(cat).isna()

pandas/tests/arrays/categorical/test_missing.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4537: in isna
    return super().isna()
pandas/core/generic.py:7183: in isna
    return isna(self).__finalize__(self, method="isna")
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, NaN]
Categories (2, int64): [1, 2]
dtype = CategoricalDtype(categories=[1, 2], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_________ TestCategoricalMissing.test_use_inf_as_na[values2-expected2] _________

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7fed6c3625b0>
values = [1, 2, inf], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        with pd.option_context("mode.use_inf_as_na", True):
            cat = Categorical(values)
            result = cat.isna()
            tm.assert_numpy_array_equal(result, expected)
    
>           result = Series(cat).isna()

pandas/tests/arrays/categorical/test_missing.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4537: in isna
    return super().isna()
pandas/core/generic.py:7183: in isna
    return isna(self).__finalize__(self, method="isna")
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, NaN]
Categories (2, int64): [1, 2]
dtype = CategoricalDtype(categories=[1, 2], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_________ TestCategoricalMissing.test_use_inf_as_na[values3-expected3] _________

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7fed6c2e8ac0>
values = [1, 2, <NA>], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        with pd.option_context("mode.use_inf_as_na", True):
            cat = Categorical(values)
            result = cat.isna()
            tm.assert_numpy_array_equal(result, expected)
    
>           result = Series(cat).isna()

pandas/tests/arrays/categorical/test_missing.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:4537: in isna
    return super().isna()
pandas/core/generic.py:7183: in isna
    return isna(self).__finalize__(self, method="isna")
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, NaN]
Categories (2, int64): [1, 2]
dtype = CategoricalDtype(categories=[1, 2], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na[values0-expected0]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na[values1-expected1]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na[values2-expected2]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na[values3-expected3]
============================== 4 failed in 1.00s ===============================

coverage run -m pytest pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na_outside_context
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 4 items

pandas/tests/arrays/categorical/test_missing.py FFFF                     [100%]

=================================== FAILURES ===================================
_ TestCategoricalMissing.test_use_inf_as_na_outside_context[values0-expected0] _

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7f2818a99d60>
values = [1, 2, 3], expected = array([False, False, False])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na_outside_context(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        # Using isna directly for Categorical will fail in general here
        cat = Categorical(values)
    
        with pd.option_context("mode.use_inf_as_na", True):
>           result = pd.isna(cat)

pandas/tests/arrays/categorical/test_missing.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, 3]
Categories (3, int64): [1, 2, 3]
dtype = CategoricalDtype(categories=[1, 2, 3], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_ TestCategoricalMissing.test_use_inf_as_na_outside_context[values1-expected1] _

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7f2804bbc370>
values = [1, 2, nan], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na_outside_context(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        # Using isna directly for Categorical will fail in general here
        cat = Categorical(values)
    
        with pd.option_context("mode.use_inf_as_na", True):
>           result = pd.isna(cat)

pandas/tests/arrays/categorical/test_missing.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, NaN]
Categories (2, int64): [1, 2]
dtype = CategoricalDtype(categories=[1, 2], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_ TestCategoricalMissing.test_use_inf_as_na_outside_context[values2-expected2] _

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7f2804aa2160>
values = [1, 2, inf], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na_outside_context(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        # Using isna directly for Categorical will fail in general here
        cat = Categorical(values)
    
        with pd.option_context("mode.use_inf_as_na", True):
>           result = pd.isna(cat)

pandas/tests/arrays/categorical/test_missing.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1.0, 2.0, inf]
Categories (3, float64): [1.0, 2.0, inf]
dtype = CategoricalDtype(categories=[1.0, 2.0, inf], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
_ TestCategoricalMissing.test_use_inf_as_na_outside_context[values3-expected3] _

self = <pandas.tests.arrays.categorical.test_missing.TestCategoricalMissing object at 0x7f2804aae370>
values = [1, 2, <NA>], expected = array([False, False,  True])

    @pytest.mark.parametrize(
        "values, expected",
        [
            ([1, 2, 3], np.array([False, False, False])),
            ([1, 2, np.nan], np.array([False, False, True])),
            ([1, 2, np.inf], np.array([False, False, True])),
            ([1, 2, pd.NA], np.array([False, False, True])),
        ],
    )
    def test_use_inf_as_na_outside_context(self, values, expected):
        # https://github.com/pandas-dev/pandas/issues/33594
        # Using isna directly for Categorical will fail in general here
        cat = Categorical(values)
    
        with pd.option_context("mode.use_inf_as_na", True):
>           result = pd.isna(cat)

pandas/tests/arrays/categorical/test_missing.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/dtypes/missing.py:121: in isna
    return _isna(obj)
pandas/core/dtypes/missing.py:168: in _isna_old
    return _isna_ndarraylike_old(obj)
pandas/core/dtypes/missing.py:237: in _isna_ndarraylike_old
    result = _isna_string_dtype(values, dtype, old=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

values = [1, 2, NaN]
Categories (2, int64): [1, 2]
dtype = CategoricalDtype(categories=[1, 2], ordered=False), old = True

    def _isna_string_dtype(values: np.ndarray, dtype: np.dtype, old: bool) -> np.ndarray:
        # Working around NumPy ticket 1542
        shape = values.shape
    
        if is_string_like_dtype(dtype):
            result = np.zeros(values.shape, dtype=bool)
        else:
            result = np.empty(shape, dtype=bool)
            if old:
>               vec = libmissing.isnaobj_old(values.ravel())
E               TypeError: Argument 'arr' has incorrect type (expected numpy.ndarray, got Categorical)

pandas/core/dtypes/missing.py:261: TypeError
=========================== short test summary info ============================
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na_outside_context[values0-expected0]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na_outside_context[values1-expected1]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na_outside_context[values2-expected2]
FAILED pandas/tests/arrays/categorical/test_missing.py::TestCategoricalMissing::test_use_inf_as_na_outside_context[values3-expected3]
============================== 4 failed in 0.29s ===============================
