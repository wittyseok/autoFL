[
    {
        "name": "tests.rules.conftest.generic_shell#5",
        "src_path": "tests/rules/conftest.py",
        "class_name": "tests.rules.conftest",
        "signature": "tests.rules.conftest.generic_shell(monkeypatch)",
        "snippet": "def generic_shell(monkeypatch):\n    monkeypatch.setattr('thefuck.shells.and_', lambda *x: ' && '.join(x))",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_ls_lah.test_match#5",
        "src_path": "tests/rules/test_ls_lah.py",
        "class_name": "tests.rules.test_ls_lah",
        "signature": "tests.rules.test_ls_lah.test_match()",
        "snippet": "def test_match():\n    assert match(Mock(script='ls'), None)\n    assert match(Mock(script='ls file.py'), None)\n    assert match(Mock(script='ls /opt'), None)\n    assert not match(Mock(script='ls -lah /opt'), None)\n    assert not match(Mock(script='pacman -S binutils'), None)\n    assert not match(Mock(script='lsof'), None)",
        "begin_line": 5,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.rules.test_ls_lah.test_get_new_command#14",
        "src_path": "tests/rules/test_ls_lah.py",
        "class_name": "tests.rules.test_ls_lah",
        "signature": "tests.rules.test_ls_lah.test_get_new_command()",
        "snippet": "def test_get_new_command():\n    assert get_new_command(Mock(script='ls file.py'), None) == 'ls -lah file.py'\n    assert get_new_command(Mock(script='ls'), None) == 'ls -lah'",
        "begin_line": 14,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command#5",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Command(script='', stdout='', stderr='')",
        "snippet": "def Command(script='', stdout='', stderr=''):\n    return types.Command(script, stdout, stderr)",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule#9",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.Rule(name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "def Rule(name='', match=lambda *_: True,\n         get_new_command=lambda *_: '',\n         enabled_by_default=True,\n         side_effect=None,\n         priority=DEFAULT_PRIORITY):\n    return types.Rule(name, match, get_new_command,\n                      enabled_by_default, side_effect,\n                      priority)",
        "begin_line": 9,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    }
]