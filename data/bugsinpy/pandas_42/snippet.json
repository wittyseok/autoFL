[
    {
        "name": "pandas.compat.numpy.function.CompatValidator.__call__#48",
        "src_path": "pandas/compat/numpy/function.py",
        "class_name": "pandas.compat.numpy.function.CompatValidator",
        "signature": "pandas.compat.numpy.function.CompatValidator.__call__(self, args, kwargs, fname=None, max_fname_arg_count=None, method: Optional[str]=None)",
        "snippet": "    def __call__(\n        self,\n        args,\n        kwargs,\n        fname=None,\n        max_fname_arg_count=None,\n        method: Optional[str] = None,\n    ) -> None:\n        if args or kwargs:\n            fname = self.fname if fname is None else fname\n            max_fname_arg_count = (\n                self.max_fname_arg_count\n                if max_fname_arg_count is None\n                else max_fname_arg_count\n            )\n            method = self.method if method is None else method\n\n            if method == \"args\":\n                validate_args(fname, args, max_fname_arg_count, self.defaults)\n            elif method == \"kwargs\":\n                validate_kwargs(fname, kwargs, self.defaults)\n            elif method == \"both\":\n                validate_args_and_kwargs(\n                    fname, args, kwargs, max_fname_arg_count, self.defaults\n                )\n            else:\n                raise ValueError(f\"invalid validation method '{method}'\")",
        "begin_line": 48,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__init__#276",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__init__(self, data, sparse_index=None, index=None, fill_value=None, kind='integer', dtype=None, copy=False)",
        "snippet": "    def __init__(\n        self,\n        data,\n        sparse_index=None,\n        index=None,\n        fill_value=None,\n        kind=\"integer\",\n        dtype=None,\n        copy=False,\n    ):\n\n        if fill_value is None and isinstance(dtype, SparseDtype):\n            fill_value = dtype.fill_value\n\n        if isinstance(data, type(self)):\n            # disable normal inference on dtype, sparse_index, & fill_value\n            if sparse_index is None:\n                sparse_index = data.sp_index\n            if fill_value is None:\n                fill_value = data.fill_value\n            if dtype is None:\n                dtype = data.dtype\n            # TODO: make kind=None, and use data.kind?\n            data = data.sp_values\n\n        # Handle use-provided dtype\n        if isinstance(dtype, str):\n            # Two options: dtype='int', regular numpy dtype\n            # or dtype='Sparse[int]', a sparse dtype\n            try:\n                dtype = SparseDtype.construct_from_string(dtype)\n            except TypeError:\n                dtype = pandas_dtype(dtype)\n\n        if isinstance(dtype, SparseDtype):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        if index is not None and not is_scalar(data):\n            raise Exception(\"must only pass scalars with an index\")\n\n        if is_scalar(data):\n            if index is not None:\n                if data is None:\n                    data = np.nan\n\n            if index is not None:\n                npoints = len(index)\n            elif sparse_index is None:\n                npoints = 1\n            else:\n                npoints = sparse_index.length\n\n            dtype = infer_dtype_from_scalar(data)[0]\n            data = construct_1d_arraylike_from_scalar(data, npoints, dtype)\n\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n        # TODO: disentangle the fill_value dtype inference from\n        # dtype inference\n        if data is None:\n            # XXX: What should the empty dtype be? Object or float?\n            data = np.array([], dtype=dtype)\n\n        if not is_array_like(data):\n            try:\n                # probably shared code in sanitize_series\n\n                data = sanitize_array(data, index=None)\n            except ValueError:\n                # NumPy may raise a ValueError on data like [1, []]\n                # we retry with object dtype here.\n                if dtype is None:\n                    dtype = object\n                    data = np.atleast_1d(np.asarray(data, dtype=dtype))\n                else:\n                    raise\n\n        if copy:\n            # TODO: avoid double copy when dtype forces cast.\n            data = data.copy()\n\n        if fill_value is None:\n            fill_value_dtype = data.dtype if dtype is None else dtype\n            if fill_value_dtype is None:\n                fill_value = np.nan\n            else:\n                fill_value = na_value_for_dtype(fill_value_dtype)\n\n        if isinstance(data, type(self)) and sparse_index is None:\n            sparse_index = data._sparse_index\n            sparse_values = np.asarray(data.sp_values, dtype=dtype)\n        elif sparse_index is None:\n            data = extract_array(data, extract_numpy=True)\n            if not isinstance(data, np.ndarray):\n                # EA\n                if is_datetime64tz_dtype(data.dtype):\n                    warnings.warn(\n                        f\"Creating SparseArray from {data.dtype} data \"\n                        \"loses timezone information.  Cast to object before \"\n                        \"sparse to retain timezone information.\",\n                        UserWarning,\n                        stacklevel=2,\n                    )\n                    data = np.asarray(data, dtype=\"datetime64[ns]\")\n                data = np.asarray(data)\n            sparse_values, sparse_index, fill_value = make_sparse(\n                data, kind=kind, fill_value=fill_value, dtype=dtype\n            )\n        else:\n            sparse_values = np.asarray(data, dtype=dtype)\n            if len(sparse_values) != sparse_index.npoints:\n                raise AssertionError(\n                    f\"Non array-like type {type(sparse_values)} must \"\n                    \"have the same length as the index\"\n                )\n        self._sparse_index = sparse_index\n        self._sparse_values = sparse_values\n        self._dtype = SparseDtype(sparse_values.dtype, fill_value)",
        "begin_line": 276,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._simple_new#399",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._simple_new(cls, sparse_array: np.ndarray, sparse_index: SparseIndex, dtype: SparseDtype)",
        "snippet": "    def _simple_new(\n        cls, sparse_array: np.ndarray, sparse_index: SparseIndex, dtype: SparseDtype\n    ) -> \"SparseArray\":\n        new = cls([])\n        new._sparse_index = sparse_index\n        new._sparse_values = sparse_array\n        new._dtype = dtype\n        return new",
        "begin_line": 399,
        "end_line": 406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__array__#455",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__array__(self, dtype=None, copy=True)",
        "snippet": "    def __array__(self, dtype=None, copy=True) -> np.ndarray:\n        fill_value = self.fill_value\n\n        if self.sp_index.ngaps == 0:\n            # Compat for na dtype and int values.\n            return self.sp_values\n        if dtype is None:\n            # Can NumPy represent this type?\n            # If not, `np.result_type` will raise. We catch that\n            # and return object.\n            if is_datetime64_any_dtype(self.sp_values.dtype):\n                # However, we *do* special-case the common case of\n                # a datetime64 with pandas NaT.\n                if fill_value is NaT:\n                    # Can't put pd.NaT in a datetime64[ns]\n                    fill_value = np.datetime64(\"NaT\")\n            try:\n                dtype = np.result_type(self.sp_values.dtype, type(fill_value))\n            except TypeError:\n                dtype = object\n\n        out = np.full(self.shape, fill_value, dtype=dtype)\n        out[self.sp_index.to_int_index().indices] = self.sp_values\n        return out",
        "begin_line": 455,
        "end_line": 478,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_index#499",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_index(self)",
        "snippet": "    def sp_index(self):\n        \"\"\"\n        The SparseIndex containing the location of non- ``fill_value`` points.\n        \"\"\"\n        return self._sparse_index",
        "begin_line": 499,
        "end_line": 503,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.sp_values#506",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.sp_values(self)",
        "snippet": "    def sp_values(self) -> np.ndarray:\n        \"\"\"\n        An ndarray containing the non- ``fill_value`` values.\n\n        Examples\n        --------\n        >>> s = SparseArray([0, 0, 1, 0, 2], fill_value=0)\n        >>> s.sp_values\n        array([1, 2])\n        \"\"\"\n        return self._sparse_values",
        "begin_line": 506,
        "end_line": 516,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.dtype#519",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 519,
        "end_line": 520,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.fill_value#523",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        Elements in `data` that are `fill_value` are not stored.\n\n        For memory savings, this should be the most common value in the array.\n        \"\"\"\n        return self.dtype.fill_value",
        "begin_line": 523,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.kind#536",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.kind(self)",
        "snippet": "    def kind(self) -> str:\n        \"\"\"\n        The kind of sparse index for this array. One of {'integer', 'block'}.\n        \"\"\"\n        if isinstance(self.sp_index, IntIndex):\n            return \"integer\"\n        else:\n            return \"block\"",
        "begin_line": 536,
        "end_line": 543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__len__#551",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return self.sp_index.length",
        "begin_line": 551,
        "end_line": 552,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._null_fill_value#555",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._null_fill_value(self)",
        "snippet": "    def _null_fill_value(self):\n        return self._dtype._is_na_fill_value",
        "begin_line": 555,
        "end_line": 556,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.isna#595",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.isna(self)",
        "snippet": "    def isna(self):\n        # If null fill value, we want SparseDtype[bool, true]\n        # to preserve the same memory usage.\n        dtype = SparseDtype(bool, self._null_fill_value)\n        return type(self)._simple_new(isna(self.sp_values), self.sp_index, dtype)",
        "begin_line": 595,
        "end_line": 599,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018433179723502304,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.__getitem__#764",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        # avoid mypy issues when importing at the top-level\n        from pandas.core.indexing import check_bool_indexer\n\n        if isinstance(key, tuple):\n            if len(key) > 1:\n                raise IndexError(\"too many indices for array.\")\n            key = key[0]\n\n        if is_integer(key):\n            return self._get_val_at(key)\n        elif isinstance(key, tuple):\n            data_slice = self.to_dense()[key]\n        elif isinstance(key, slice):\n            # special case to preserve dtypes\n            if key == slice(None):\n                return self.copy()\n            # TODO: this logic is surely elsewhere\n            # TODO: this could be more efficient\n            indices = np.arange(len(self), dtype=np.int32)[key]\n            return self.take(indices)\n        else:\n            # TODO: I think we can avoid densifying when masking a\n            # boolean SparseArray with another. Need to look at the\n            # key's fill_value for True / False, and then do an intersection\n            # on the indicies of the sp_values.\n            if isinstance(key, SparseArray):\n                if is_bool_dtype(key):\n                    key = key.to_dense()\n                else:\n                    key = np.asarray(key)\n\n            key = check_array_indexer(self, key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self, key)\n\n                return self.take(np.arange(len(key), dtype=np.int32)[key])\n            elif hasattr(key, \"__len__\"):\n                return self.take(key)\n            else:\n                raise ValueError(f\"Cannot slice with '{key}'\")\n\n        return type(self)(data_slice, kind=self.kind)",
        "begin_line": 764,
        "end_line": 807,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.take#825",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.take(self, indices, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indices, allow_fill=False, fill_value=None) -> \"SparseArray\":\n        if is_scalar(indices):\n            raise ValueError(f\"'indices' must be an array, not a scalar '{indices}'.\")\n        indices = np.asarray(indices, dtype=np.int32)\n\n        if indices.size == 0:\n            result = np.array([], dtype=\"object\")\n            kwargs = {\"dtype\": self.dtype}\n        elif allow_fill:\n            result = self._take_with_fill(indices, fill_value=fill_value)\n            kwargs = {}\n        else:\n            result = self._take_without_fill(indices)\n            kwargs = {\"dtype\": self.dtype}\n\n        return type(self)(result, fill_value=self.fill_value, kind=self.kind, **kwargs)",
        "begin_line": 825,
        "end_line": 840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray._take_without_fill#905",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray._take_without_fill(self, indices)",
        "snippet": "    def _take_without_fill(self, indices) -> Union[np.ndarray, \"SparseArray\"]:\n        to_shift = indices < 0\n        indices = indices.copy()\n\n        n = len(self)\n\n        if (indices.max() >= n) or (indices.min() < -n):\n            if n == 0:\n                raise IndexError(\"cannot do a non-empty take from an empty axes.\")\n            else:\n                raise IndexError(\"out of bounds value in 'indices'.\")\n\n        if to_shift.any():\n            indices[to_shift] += n\n\n        if self.sp_index.npoints == 0:\n            # edge case in take...\n            # I think just return\n            out = np.full(\n                indices.shape,\n                self.fill_value,\n                dtype=np.result_type(type(self.fill_value)),\n            )\n            arr, sp_index, fill_value = make_sparse(out, fill_value=self.fill_value)\n            return type(self)(arr, sparse_index=sp_index, fill_value=fill_value)\n\n        sp_indexer = self.sp_index.lookup_array(indices)\n        taken = self.sp_values.take(sp_indexer)\n        fillable = sp_indexer < 0\n\n        if fillable.any():\n            # TODO: may need to coerce array to fill value\n            result_type = np.result_type(taken, type(self.fill_value))\n            taken = taken.astype(result_type)\n            taken[fillable] = self.fill_value\n\n        return taken",
        "begin_line": 905,
        "end_line": 941,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.SparseArray.astype#1027",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array.SparseArray",
        "signature": "pandas.core.arrays.sparse.array.SparseArray.astype(self, dtype=None, copy=True)",
        "snippet": "    def astype(self, dtype=None, copy=True):\n        \"\"\"\n        Change the dtype of a SparseArray.\n\n        The output will always be a SparseArray. To convert to a dense\n        ndarray with a certain dtype, use :meth:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : np.dtype or ExtensionDtype\n            For SparseDtype, this changes the dtype of\n            ``self.sp_values`` and the ``self.fill_value``.\n\n            For other dtypes, this only changes the dtype of\n            ``self.sp_values``.\n\n        copy : bool, default True\n            Whether to ensure a copy is made, even if not necessary.\n\n        Returns\n        -------\n        SparseArray\n\n        Examples\n        --------\n        >>> arr = SparseArray([0, 0, 1, 2])\n        >>> arr\n        [0, 0, 1, 2]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        >>> arr.astype(np.dtype('int32'))\n        [0, 0, 1, 2]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        Using a NumPy dtype with a different kind (e.g. float) will coerce\n        just ``self.sp_values``.\n\n        >>> arr.astype(np.dtype('float64'))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [0, 0, 1.0, 2.0]\n        Fill: 0\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n\n        Use a SparseDtype if you wish to be change the fill value as well.\n\n        >>> arr.astype(SparseDtype(\"float64\", fill_value=np.nan))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [nan, nan, 1.0, 2.0]\n        Fill: nan\n        IntIndex\n        Indices: array([2, 3], dtype=int32)\n        \"\"\"\n        dtype = self.dtype.update_dtype(dtype)\n        subtype = dtype._subtype_with_str\n        sp_values = astype_nansafe(self.sp_values, subtype, copy=copy)\n        if sp_values is self.sp_values and copy:\n            sp_values = sp_values.copy()\n\n        return self._simple_new(sp_values, self.sp_index, dtype)",
        "begin_line": 1027,
        "end_line": 1090,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array.make_sparse#1514",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array.make_sparse(arr: np.ndarray, kind='block', fill_value=None, dtype=None, copy=False)",
        "snippet": "def make_sparse(arr: np.ndarray, kind=\"block\", fill_value=None, dtype=None, copy=False):\n    \"\"\"\n    Convert ndarray to sparse format\n\n    Parameters\n    ----------\n    arr : ndarray\n    kind : {'block', 'integer'}\n    fill_value : NaN or another value\n    dtype : np.dtype, optional\n    copy : bool, default False\n\n    Returns\n    -------\n    (sparse_values, index, fill_value) : (ndarray, SparseIndex, Scalar)\n    \"\"\"\n    assert isinstance(arr, np.ndarray)\n\n    if arr.ndim > 1:\n        raise TypeError(\"expected dimension <= 1 data\")\n\n    if fill_value is None:\n        fill_value = na_value_for_dtype(arr.dtype)\n\n    if isna(fill_value):\n        mask = notna(arr)\n    else:\n        # cast to object comparison to be safe\n        if is_string_dtype(arr):\n            arr = arr.astype(object)\n\n        if is_object_dtype(arr.dtype):\n            # element-wise equality check method in numpy doesn't treat\n            # each element type, eg. 0, 0.0, and False are treated as\n            # same. So we have to check the both of its type and value.\n            mask = splib.make_mask_object_ndarray(arr, fill_value)\n        else:\n            mask = arr != fill_value\n\n    length = len(arr)\n    if length != len(mask):\n        # the arr is a SparseArray\n        indices = mask.sp_index.indices\n    else:\n        indices = mask.nonzero()[0].astype(np.int32)\n\n    index = _make_index(length, indices, kind)\n    sparsified_values = arr[mask]\n    if dtype is not None:\n        sparsified_values = astype_nansafe(sparsified_values, dtype=dtype)\n    # TODO: copy\n    return sparsified_values, index, fill_value",
        "begin_line": 1514,
        "end_line": 1565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.array._make_index#1568",
        "src_path": "pandas/core/arrays/sparse/array.py",
        "class_name": "pandas.core.arrays.sparse.array",
        "signature": "pandas.core.arrays.sparse.array._make_index(length, indices, kind)",
        "snippet": "def _make_index(length, indices, kind):\n\n    if kind == \"block\" or isinstance(kind, BlockIndex):\n        locs, lens = splib.get_blocks(indices)\n        index = BlockIndex(length, locs, lens)\n    elif kind == \"integer\" or isinstance(kind, IntIndex):\n        index = IntIndex(length, indices)\n    else:  # pragma: no cover\n        raise ValueError(\"must be block or integer type\")\n    return index",
        "begin_line": 1568,
        "end_line": 1577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018102824040550325,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.Registry.find#78",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.Registry",
        "signature": "pandas.core.dtypes.dtypes.Registry.find(self, dtype: Union[Type[ExtensionDtype], str])",
        "snippet": "    def find(\n        self, dtype: Union[Type[ExtensionDtype], str]\n    ) -> Optional[Type[ExtensionDtype]]:\n        \"\"\"\n        Parameters\n        ----------\n        dtype : Type[ExtensionDtype] or str\n\n        Returns\n        -------\n        return the first matching dtype, otherwise return None\n        \"\"\"\n        if not isinstance(dtype, str):\n            dtype_type = dtype\n            if not isinstance(dtype, type):\n                dtype_type = type(dtype)\n            if issubclass(dtype_type, ExtensionDtype):\n                return dtype\n\n            return None\n\n        for dtype_type in self.dtypes:\n            try:\n                return dtype_type.construct_from_string(dtype)\n            except TypeError:\n                pass\n\n        return None",
        "begin_line": 78,
        "end_line": 105,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008598452278589854,
            "pseudo_dstar_susp": 0.0025,
            "pseudo_tarantula_susp": 0.0008210180623973727,
            "pseudo_op2_susp": 0.0025,
            "pseudo_barinel_susp": 0.0008210180623973727
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__#232",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__init__(self, categories=None, ordered: Ordered=False)",
        "snippet": "    def __init__(self, categories=None, ordered: Ordered = False):\n        self._finalize(categories, ordered, fastpath=False)",
        "begin_line": 232,
        "end_line": 233,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016134236850596966,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype#244",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_categorical_dtype(cls, dtype: 'CategoricalDtype', categories=None, ordered: Ordered=None)",
        "snippet": "    def _from_categorical_dtype(\n        cls, dtype: \"CategoricalDtype\", categories=None, ordered: Ordered = None\n    ) -> \"CategoricalDtype\":\n        if categories is ordered is None:\n            return dtype\n        if categories is None:\n            categories = dtype.categories\n        if ordered is None:\n            ordered = dtype.ordered\n        return cls(categories, ordered)",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype#256",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None)",
        "snippet": "    def _from_values_or_dtype(\n        cls,\n        values=None,\n        categories=None,\n        ordered: Optional[bool] = None,\n        dtype: Optional[\"CategoricalDtype\"] = None,\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct dtype from the input parameters used in :class:`Categorical`.\n\n        This constructor method specifically does not do the factorization\n        step, if that is needed to find the categories. This constructor may\n        therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n        which may not be useful. Additional steps may therefore have to be\n        taken to create the final dtype.\n\n        The return dtype is specified from the inputs in this prioritized\n        order:\n        1. if dtype is a CategoricalDtype, return dtype\n        2. if dtype is the string 'category', create a CategoricalDtype from\n           the supplied categories and ordered parameters, and return that.\n        3. if values is a categorical, use value.dtype, but override it with\n           categories and ordered if either/both of those are not None.\n        4. if dtype is None and values is not a categorical, construct the\n           dtype from categories and ordered, even if either of those is None.\n\n        Parameters\n        ----------\n        values : list-like, optional\n            The list-like must be 1-dimensional.\n        categories : list-like, optional\n            Categories for the CategoricalDtype.\n        ordered : bool, optional\n            Designating if the categories are ordered.\n        dtype : CategoricalDtype or the string \"category\", optional\n            If ``CategoricalDtype``, cannot be used together with\n            `categories` or `ordered`.\n\n        Returns\n        -------\n        CategoricalDtype\n\n        Examples\n        --------\n        >>> pd.CategoricalDtype._from_values_or_dtype()\n        CategoricalDtype(categories=None, ordered=None)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     categories=['a', 'b'], ordered=True\n        ... )\n        CategoricalDtype(categories=['a', 'b'], ordered=True)\n        >>> dtype1 = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> dtype2 = pd.CategoricalDtype(['x', 'y'], ordered=False)\n        >>> c = pd.Categorical([0, 1], dtype=dtype1, fastpath=True)\n        >>> pd.CategoricalDtype._from_values_or_dtype(\n        ...     c, ['x', 'y'], ordered=True, dtype=dtype2\n        ... )\n        Traceback (most recent call last):\n            ...\n        ValueError: Cannot specify `categories` or `ordered` together with\n        `dtype`.\n\n        The supplied dtype takes precedence over values' dtype:\n\n        >>> pd.CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n        CategoricalDtype(categories=['x', 'y'], ordered=False)\n        \"\"\"\n        from pandas.core.dtypes.common import is_categorical\n\n        if dtype is not None:\n            # The dtype argument takes precedence over values.dtype (if any)\n            if isinstance(dtype, str):\n                if dtype == \"category\":\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    raise ValueError(f\"Unknown dtype {repr(dtype)}\")\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n                )\n            elif not isinstance(dtype, CategoricalDtype):\n                raise ValueError(f\"Cannot not construct CategoricalDtype from {dtype}\")\n        elif is_categorical(values):\n            # If no \"dtype\" was passed, use the one from \"values\", but honor\n            # the \"ordered\" and \"categories\" arguments\n            dtype = values.dtype._from_categorical_dtype(\n                values.dtype, categories, ordered\n            )\n        else:\n            # If dtype=None and values is not categorical, create a new dtype.\n            # Note: This could potentially have categories=None and\n            # ordered=None.\n            dtype = CategoricalDtype(categories, ordered)\n\n        return dtype",
        "begin_line": 256,
        "end_line": 349,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string#352",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type) -> \"CategoricalDtype\":\n        \"\"\"\n        Construct a CategoricalDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            Must be the string \"category\" in order to be successfully constructed.\n\n        Returns\n        -------\n        CategoricalDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a CategoricalDtype cannot be constructed from the input.\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a 'CategoricalDtype' from '{string}'\")\n\n        # need ordered=None to ensure that operations specifying dtype=\"category\" don't\n        # override the ordered value for existing categoricals\n        return cls(ordered=None)",
        "begin_line": 352,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008051529790660225,
            "pseudo_dstar_susp": 0.002105263157894737,
            "pseudo_tarantula_susp": 0.0007320644216691069,
            "pseudo_op2_susp": 0.002105263157894737,
            "pseudo_barinel_susp": 0.0007320644216691069
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize#382",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._finalize(self, categories, ordered: Ordered, fastpath: bool=False)",
        "snippet": "    def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n        if ordered is not None:\n            self.validate_ordered(ordered)\n\n        if categories is not None:\n            categories = self.validate_categories(categories, fastpath=fastpath)\n\n        self._categories = categories\n        self._ordered = ordered",
        "begin_line": 382,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016134236850596966,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__#400",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)",
        "snippet": "    def __hash__(self) -> int:\n        # _hash_categories returns a uint64, so use the negative\n        # space for when we have unknown categories to avoid a conflict\n        if self.categories is None:\n            if self.ordered:\n                return -1\n            else:\n                return -2\n        # We *do* want to include the real self.ordered here\n        return int(self._hash_categories(self.categories, self.ordered))",
        "begin_line": 400,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__#411",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Rules for CDT equality:\n        1) Any CDT is equal to the string 'category'\n        2) Any CDT is equal to itself\n        3) Any CDT is equal to a CDT with categories=None regardless of ordered\n        4) A CDT with ordered=True is only equal to another CDT with\n           ordered=True and identical categories in the same order\n        5) A CDT with ordered={False, None} is only equal to another CDT with\n           ordered={False, None} and identical categories, but same order is\n           not required. There is no distinction between False/None.\n        6) Any other comparison returns False\n        \"\"\"\n        if isinstance(other, str):\n            return other == self.name\n        elif other is self:\n            return True\n        elif not (hasattr(other, \"ordered\") and hasattr(other, \"categories\")):\n            return False\n        elif self.categories is None or other.categories is None:\n            # We're forced into a suboptimal corner thanks to math and\n            # backwards compatibility. We require that `CDT(...) == 'category'`\n            # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n            # CDT(., .) = CDT(None, False) and *all*\n            # CDT(., .) = CDT(None, True).\n            return True\n        elif self.ordered or other.ordered:\n            # At least one has ordered=True; equal if both have ordered=True\n            # and the same values for categories in the same order.\n            return (self.ordered == other.ordered) and self.categories.equals(\n                other.categories\n            )\n        else:\n            # Neither has ordered=True; equal if both have the same categories,\n            # but same order is not necessary.  There is no distinction between\n            # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n            # will be equal if they have the same categories.\n            if (\n                self.categories.dtype == other.categories.dtype\n                and self.categories.equals(other.categories)\n            ):\n                # Check and see if they happen to be identical categories\n                return True\n            return hash(self) == hash(other)",
        "begin_line": 411,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__#456",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_type:\n        if self.categories is None:\n            data = \"None, \"\n        else:\n            data = self.categories._format_data(name=type(self).__name__)\n        return f\"CategoricalDtype(categories={data}ordered={self.ordered})\"",
        "begin_line": 456,
        "end_line": 461,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories#464",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype._hash_categories(categories, ordered: Ordered=True)",
        "snippet": "    def _hash_categories(categories, ordered: Ordered = True) -> int:\n        from pandas.core.util.hashing import (\n            hash_array,\n            _combine_hash_arrays,\n            hash_tuples,\n        )\n        from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE\n\n        if len(categories) and isinstance(categories[0], tuple):\n            # assumes if any individual category is a tuple, then all our. ATM\n            # I don't really want to support just some of the categories being\n            # tuples.\n            categories = list(categories)  # breaks if a np.array of categories\n            cat_array = hash_tuples(categories)\n        else:\n            if categories.dtype == \"O\":\n                if len({type(x) for x in categories}) != 1:\n                    # TODO: hash_array doesn't handle mixed types. It casts\n                    # everything to a str first, which means we treat\n                    # {'1', '2'} the same as {'1', 2}\n                    # find a better solution\n                    hashed = hash((tuple(categories), ordered))\n                    return hashed\n\n            if is_datetime64tz_dtype(categories.dtype):\n                # Avoid future warning.\n                categories = categories.astype(_NS_DTYPE)\n\n            cat_array = hash_array(np.asarray(categories), categorize=False)\n        if ordered:\n            cat_array = np.vstack(\n                [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n            )\n        else:\n            cat_array = [cat_array]\n        hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n        return np.bitwise_xor.reduce(hashed)",
        "begin_line": 464,
        "end_line": 500,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered#516",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_ordered(ordered: Ordered)",
        "snippet": "    def validate_ordered(ordered: Ordered) -> None:\n        \"\"\"\n        Validates that we have a valid ordered parameter. If\n        it is not a boolean, a TypeError will be raised.\n\n        Parameters\n        ----------\n        ordered : object\n            The parameter to be verified.\n\n        Raises\n        ------\n        TypeError\n            If 'ordered' is not a boolean.\n        \"\"\"\n        if not is_bool(ordered):\n            raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
        "begin_line": 516,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016134236850596966,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories#535",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.validate_categories(categories, fastpath: bool=False)",
        "snippet": "    def validate_categories(categories, fastpath: bool = False):\n        \"\"\"\n        Validates that we have good categories\n\n        Parameters\n        ----------\n        categories : array-like\n        fastpath : bool\n            Whether to skip nan and uniqueness checks\n\n        Returns\n        -------\n        categories : Index\n        \"\"\"\n        from pandas.core.indexes.base import Index\n\n        if not fastpath and not is_list_like(categories):\n            raise TypeError(\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\n            )\n        elif not isinstance(categories, ABCIndexClass):\n            categories = Index(categories, tupleize_cols=False)\n\n        if not fastpath:\n\n            if categories.hasnans:\n                raise ValueError(\"Categorial categories cannot be null\")\n\n            if not categories.is_unique:\n                raise ValueError(\"Categorical categories must be unique\")\n\n        if isinstance(categories, ABCCategoricalIndex):\n            categories = categories.categories\n\n        return categories",
        "begin_line": 535,
        "end_line": 569,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype#571",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.update_dtype(self, dtype: Union[str_type, 'CategoricalDtype'])",
        "snippet": "    def update_dtype(\n        self, dtype: Union[str_type, \"CategoricalDtype\"]\n    ) -> \"CategoricalDtype\":\n        \"\"\"\n        Returns a CategoricalDtype with categories and ordered taken from dtype\n        if specified, otherwise falling back to self if unspecified\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Returns\n        -------\n        new_dtype : CategoricalDtype\n        \"\"\"\n        if isinstance(dtype, str) and dtype == \"category\":\n            # dtype='category' should not change anything\n            return self\n        elif not self.is_dtype(dtype):\n            raise ValueError(\n                f\"a CategoricalDtype must be passed to perform an update, \"\n                f\"got {repr(dtype)}\"\n            )\n        else:\n            # from here on, dtype is a CategoricalDtype\n            dtype = cast(CategoricalDtype, dtype)\n\n        # update categories/ordered unless they've been explicitly passed as None\n        new_categories = (\n            dtype.categories if dtype.categories is not None else self.categories\n        )\n        new_ordered = dtype.ordered if dtype.ordered is not None else self.ordered\n\n        return CategoricalDtype(new_categories, new_ordered)",
        "begin_line": 571,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016134236850596966,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.categories#607",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        An ``Index`` containing the unique categories allowed.\n        \"\"\"\n        return self._categories",
        "begin_line": 607,
        "end_line": 611,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016048788316482104,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered#614",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.CategoricalDtype",
        "signature": "pandas.core.dtypes.dtypes.CategoricalDtype.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self._ordered",
        "begin_line": 614,
        "end_line": 618,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001606941989394183,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__#675",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__init__(self, unit='ns', tz=None)",
        "snippet": "    def __init__(self, unit=\"ns\", tz=None):\n        if isinstance(unit, DatetimeTZDtype):\n            unit, tz = unit.unit, unit.tz\n\n        if unit != \"ns\":\n            if isinstance(unit, str) and tz is None:\n                # maybe a string like datetime64[ns, tz], which we support for\n                # now.\n                result = type(self).construct_from_string(unit)\n                unit = result.unit\n                tz = result.tz\n                msg = (\n                    f\"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                    \"to DatetimeTZDtype is no longer supported. Use \"\n                    \"'DatetimeTZDtype.construct_from_string()' instead.\"\n                )\n                raise ValueError(msg)\n            else:\n                raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n            tz = timezones.tz_standardize(tz)\n        elif tz is not None:\n            raise pytz.UnknownTimeZoneError(tz)\n        if tz is None:\n            raise TypeError(\"A 'tz' is required.\")\n\n        self._unit = unit\n        self._tz = tz",
        "begin_line": 675,
        "end_line": 704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz#714",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        The timezone.\n        \"\"\"\n        return self._tz",
        "begin_line": 714,
        "end_line": 718,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string#734",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls, string: str_type)",
        "snippet": "    def construct_from_string(cls, string: str_type):\n        \"\"\"\n        Construct a DatetimeTZDtype from a string.\n\n        Parameters\n        ----------\n        string : str\n            The string alias for this DatetimeTZDtype.\n            Should be formatted like ``datetime64[ns, <tz>]``,\n            where ``<tz>`` is the timezone name.\n\n        Examples\n        --------\n        >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n        datetime64[ns, UTC]\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        msg = f\"Cannot construct a 'DatetimeTZDtype' from '{string}'\"\n        match = cls._match.match(string)\n        if match:\n            d = match.groupdict()\n            try:\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n            except (KeyError, TypeError, ValueError) as err:\n                # KeyError if maybe_get_tz tries and fails to get a\n                #  pytz timezone (actually pytz.UnknownTimeZoneError).\n                # TypeError if we pass a nonsense tz;\n                # ValueError if we pass a unit other than \"ns\"\n                raise TypeError(msg) from err\n        raise TypeError(msg)",
        "begin_line": 734,
        "end_line": 767,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008598452278589854,
            "pseudo_dstar_susp": 0.0025,
            "pseudo_tarantula_susp": 0.0008210180623973727,
            "pseudo_op2_susp": 0.0025,
            "pseudo_barinel_susp": 0.0008210180623973727
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__#782",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.DatetimeTZDtype",
        "signature": "pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other == self.name\n\n        return (\n            isinstance(other, DatetimeTZDtype)\n            and self.unit == other.unit\n            and str(self.tz) == str(other.tz)\n        )",
        "begin_line": 782,
        "end_line": 790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.__new__#838",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls, freq=None)",
        "snippet": "    def __new__(cls, freq=None):\n        \"\"\"\n        Parameters\n        ----------\n        freq : frequency\n        \"\"\"\n        if isinstance(freq, PeriodDtype):\n            return freq\n\n        elif freq is None:\n            # empty constructor for pickle compat\n            u = object.__new__(cls)\n            u._freq = None\n            return u\n\n        if not isinstance(freq, ABCDateOffset):\n            freq = cls._parse_dtype_strict(freq)\n\n        try:\n            return cls._cache[freq.freqstr]\n        except KeyError:\n            u = object.__new__(cls)\n            u._freq = freq\n            cls._cache[freq.freqstr] = u\n            return u",
        "begin_line": 838,
        "end_line": 862,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.freq#865",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        The frequency object of this PeriodDtype.\n        \"\"\"\n        return self._freq",
        "begin_line": 865,
        "end_line": 869,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string#887",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        Strict construction from a string, raise a TypeError if not\n        possible\n        \"\"\"\n        if (\n            isinstance(string, str)\n            and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n            or isinstance(string, ABCDateOffset)\n        ):\n            # do not parse string like U as period[U]\n            # avoid tuple to be regarded as freq\n            try:\n                return cls(freq=string)\n            except ValueError:\n                pass\n        if isinstance(string, str):\n            msg = f\"Cannot construct a 'PeriodDtype' from '{string}'\"\n        else:\n            msg = f\"'construct_from_string' expects a string, got {type(string)}\"\n        raise TypeError(msg)",
        "begin_line": 887,
        "end_line": 907,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008598452278589854,
            "pseudo_dstar_susp": 0.0025,
            "pseudo_tarantula_susp": 0.0008210180623973727,
            "pseudo_op2_susp": 0.0025,
            "pseudo_barinel_susp": 0.0008210180623973727
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype#937",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.PeriodDtype",
        "signature": "pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            # PeriodDtype can be instantiated from freq string like \"U\",\n            # but doesn't regard freq str like \"U\" as dtype.\n            if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n                try:\n                    if cls._parse_dtype_strict(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except ValueError:\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 937,
        "end_line": 955,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006485084306095979,
            "pseudo_dstar_susp": 0.001652892561983471,
            "pseudo_tarantula_susp": 0.0006199628022318661,
            "pseudo_op2_susp": 0.001652892561983471,
            "pseudo_barinel_susp": 0.0006199628022318661
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__new__#1026",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls, subtype=None)",
        "snippet": "    def __new__(cls, subtype=None):\n        from pandas.core.dtypes.common import (\n            is_categorical_dtype,\n            is_string_dtype,\n            pandas_dtype,\n        )\n\n        if isinstance(subtype, IntervalDtype):\n            return subtype\n        elif subtype is None:\n            # we are called as an empty constructor\n            # generally for pickle compat\n            u = object.__new__(cls)\n            u._subtype = None\n            return u\n        elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n            subtype = None\n        else:\n            if isinstance(subtype, str):\n                m = cls._match.search(subtype)\n                if m is not None:\n                    subtype = m.group(\"subtype\")\n\n            try:\n                subtype = pandas_dtype(subtype)\n            except TypeError as err:\n                raise TypeError(\"could not construct IntervalDtype\") from err\n\n        if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalDtype\"\n            )\n            raise TypeError(msg)\n\n        try:\n            return cls._cache[str(subtype)]\n        except KeyError:\n            u = object.__new__(cls)\n            u._subtype = subtype\n            cls._cache[str(subtype)] = u\n            return u",
        "begin_line": 1026,
        "end_line": 1068,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.subtype#1071",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        \"\"\"\n        The dtype of the Interval bounds.\n        \"\"\"\n        return self._subtype",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type#1078",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        from pandas.core.arrays import IntervalArray\n\n        return IntervalArray",
        "begin_line": 1078,
        "end_line": 1088,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string#1091",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        \"\"\"\n        attempt to construct this type from a string, raise a TypeError\n        if its not possible\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n\n        if string.lower() == \"interval\" or cls._match.search(string) is not None:\n            return cls(string)\n\n        msg = (\n            f\"Cannot construct a 'IntervalDtype' from '{string}'.\\n\\n\"\n            \"Incorrectly formatted string passed to constructor. \"\n            \"Valid formats include Interval or Interval[dtype] \"\n            \"where dtype is numeric, datetime, or timedelta\"\n        )\n        raise TypeError(msg)",
        "begin_line": 1091,
        "end_line": 1110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.0025,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0025,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.type#1113",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.type(self)",
        "snippet": "    def type(self):\n        return Interval",
        "begin_line": 1113,
        "end_line": 1114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__str__#1116",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str_type:\n        if self.subtype is None:\n            return \"interval\"\n        return f\"interval[{self.subtype}]\"",
        "begin_line": 1116,
        "end_line": 1119,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__#1125",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, str):\n            return other.lower() in (self.name.lower(), str(self).lower())\n        elif not isinstance(other, IntervalDtype):\n            return False\n        elif self.subtype is None or other.subtype is None:\n            # None should match any subtype\n            return True\n        else:\n            from pandas.core.dtypes.common import is_dtype_equal\n\n            return is_dtype_equal(self.subtype, other.subtype)",
        "begin_line": 1125,
        "end_line": 1136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype#1145",
        "src_path": "pandas/core/dtypes/dtypes.py",
        "class_name": "pandas.core.dtypes.dtypes.IntervalDtype",
        "signature": "pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls, dtype)",
        "snippet": "    def is_dtype(cls, dtype) -> bool:\n        \"\"\"\n        Return a boolean if we if the passed type is an actual dtype that we\n        can match (via string or type)\n        \"\"\"\n        if isinstance(dtype, str):\n            if dtype.lower().startswith(\"interval\"):\n                try:\n                    if cls.construct_from_string(dtype) is not None:\n                        return True\n                    else:\n                        return False\n                except (ValueError, TypeError):\n                    return False\n            else:\n                return False\n        return super().is_dtype(dtype)",
        "begin_line": 1145,
        "end_line": 1161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006775067750677507,
            "pseudo_dstar_susp": 0.0018083182640144665,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.0018083182640144665,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.shape#404",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        \"\"\"\n        Return a tuple of the array dimensions.\n        \"\"\"\n        return (len(self),)",
        "begin_line": 404,
        "end_line": 408,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.ndim#418",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Extension Arrays are only allowed to be 1-dimensional.\n        \"\"\"\n        return 1",
        "begin_line": 418,
        "end_line": 422,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.0006101281269066504,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0006101281269066504,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray.__repr__#960",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        from pandas.io.formats.printing import format_object_summary\n\n        # the short repr has no trailing newline, while the truncated\n        # repr does. So we include a newline in our template, and strip\n        # any trailing newlines from format_object_summary\n        data = format_object_summary(\n            self, self._formatter(), indent_for_name=False\n        ).rstrip(\", \\n\")\n        class_name = f\"<{type(self).__name__}>\\n\"\n        return f\"{class_name}{data}\\nLength: {len(self)}, dtype: {self.dtype}\"",
        "begin_line": 960,
        "end_line": 970,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.base.ExtensionArray._formatter#972",
        "src_path": "pandas/core/arrays/base.py",
        "class_name": "pandas.core.arrays.base.ExtensionArray",
        "signature": "pandas.core.arrays.base.ExtensionArray._formatter(self, boxed: bool=False)",
        "snippet": "    def _formatter(self, boxed: bool = False) -> Callable[[Any], Optional[str]]:\n        \"\"\"\n        Formatting function for scalar values.\n\n        This is used in the default '__repr__'. The returned formatting\n        function receives instances of your scalar type.\n\n        Parameters\n        ----------\n        boxed : bool, default False\n            An indicated for whether or not your array is being printed\n            within a Series, DataFrame, or Index (True), or just by\n            itself (False). This may be useful if you want scalar values\n            to appear differently within a Series versus on its own (e.g.\n            quoted or not).\n\n        Returns\n        -------\n        Callable[[Any], str]\n            A callable that gets instances of the scalar type and\n            returns a string. By default, :func:`repr` is used\n            when ``boxed=False`` and :func:`str` is used when\n            ``boxed=True``.\n        \"\"\"\n        if boxed:\n            return str\n        return repr",
        "begin_line": 972,
        "end_line": 998,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates#102",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return True",
        "begin_line": 102,
        "end_line": 103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values#115",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.values(self)",
        "snippet": "    def values(self):\n        # Note: PeriodArray overrides this to return an ndarray of objects.\n        return self._data._data",
        "begin_line": 115,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001822821728034998,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals#135",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, ABCIndexClass):\n            return False\n        elif not isinstance(other, type(self)):\n            try:\n                other = type(self)(other)\n            except (ValueError, TypeError, OverflowError):\n                # e.g.\n                #  ValueError -> cannot parse str entry, or OutOfBoundsDatetime\n                #  TypeError  -> trying to convert IntervalIndex to DatetimeIndex\n                #  OverflowError -> Index([very_large_timedeltas])\n                return False\n\n        if not is_dtype_equal(self.dtype, other.dtype):\n            # have different timezone\n            return False\n\n        return np.array_equal(self.asi8, other.asi8)",
        "begin_line": 135,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy#640",
        "src_path": "pandas/core/indexes/datetimelike.py",
        "class_name": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin",
        "signature": "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        name = self.name if name is lib.no_default else name\n        cache = self._cache.copy() if values is None else {}\n\n        if values is None:\n            values = self._data\n\n        if isinstance(values, np.ndarray):\n            # TODO: We would rather not get here\n            values = type(self._data)(values, dtype=self.dtype)\n\n        result = type(self)._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 640,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.__new__#182",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n        name = maybe_extract_name(name, data, cls)\n\n        if not is_categorical_dtype(data):\n            # don't allow scalars\n            # if data is None, then categories must be provided\n            if is_scalar(data):\n                if data is not None or categories is None:\n                    raise cls._scalar_data_error(data)\n                data = []\n\n        assert isinstance(dtype, CategoricalDtype), dtype\n        if not isinstance(data, Categorical) or data.dtype != dtype:\n            data = Categorical(data, dtype=dtype)\n\n        data = data.copy() if copy else data\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 182,
        "end_line": 204,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._simple_new#230",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._simple_new(cls, values: Categorical, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: Categorical, name: Label = None):\n        assert isinstance(values, Categorical), type(values)\n        result = object.__new__(cls)\n\n        result._data = values\n        result.name = name\n        result._cache = {}\n\n        result._reset_identity()\n        result._no_setting_name = False\n        return result",
        "begin_line": 230,
        "end_line": 240,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.inferred_type#341",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"categorical\"",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex.values#345",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex.values(self)",
        "snippet": "    def values(self):\n        \"\"\" return the underlying data, which is a Categorical \"\"\"\n        return self._data",
        "begin_line": 345,
        "end_line": 347,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.category.CategoricalIndex._isnan#378",
        "src_path": "pandas/core/indexes/category.py",
        "class_name": "pandas.core.indexes.category.CategoricalIndex",
        "signature": "pandas.core.indexes.category.CategoricalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\" return if each value is nan\"\"\"\n        return self._data.codes == -1",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__init__#130",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
        "snippet": "    def __init__(\n        self,\n        blocks: Sequence[Block],\n        axes: Sequence[Index],\n        do_integrity_check: bool = True,\n    ):\n        self.axes = [ensure_index(ax) for ax in axes]\n        self.blocks: Tuple[Block, ...] = tuple(blocks)\n\n        for block in blocks:\n            if self.ndim != block.ndim:\n                raise AssertionError(\n                    f\"Number of Block dimensions ({block.ndim}) must equal \"\n                    f\"number of axes ({self.ndim})\"\n                )\n\n        if do_integrity_check:\n            self._verify_integrity()\n\n        # Populate known_consolidate, blknos, and blklocs lazily\n        self._known_consolidated = False\n        self._blknos = None\n        self._blklocs = None",
        "begin_line": 130,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002053388090349076,
            "pseudo_dstar_susp": 0.006060606060606061,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.006060606060606061,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.from_blocks#155",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(cls, blocks: List[Block], axes: List[Index]):\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        return cls(blocks, axes, do_integrity_check=False)",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blknos#162",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blknos(self)",
        "snippet": "    def blknos(self):\n        \"\"\"\n        Suppose we want to find the array corresponding to our i'th column.\n\n        blknos[i] identifies the block from self.blocks that contains this column.\n\n        blklocs[i] identifies the column of interest within\n        self.blocks[self.blknos[i]]\n        \"\"\"\n        if self._blknos is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blknos",
        "begin_line": 162,
        "end_line": 175,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012422360248447205,
            "pseudo_dstar_susp": 0.0007479431563201197,
            "pseudo_tarantula_susp": 0.0013605442176870747,
            "pseudo_op2_susp": 0.0007479431563201197,
            "pseudo_barinel_susp": 0.0013605442176870747
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.blklocs#178",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.blklocs(self)",
        "snippet": "    def blklocs(self):\n        \"\"\"\n        See blknos.__doc__\n        \"\"\"\n        if self._blklocs is None:\n            # Note: these can be altered by other BlockManager methods.\n            self._rebuild_blknos_and_blklocs()\n\n        return self._blklocs",
        "begin_line": 178,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.shape#211",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, ...]:\n        return tuple(len(ax) for ax in self.axes)",
        "begin_line": 211,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002,
            "pseudo_dstar_susp": 0.005988023952095809,
            "pseudo_tarantula_susp": 0.0012315270935960591,
            "pseudo_op2_susp": 0.005988023952095809,
            "pseudo_barinel_susp": 0.0012315270935960591
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.ndim#215",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        return len(self.axes)",
        "begin_line": 215,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011560693641618498,
            "pseudo_dstar_susp": 0.0007199424046076314,
            "pseudo_tarantula_susp": 0.0012674271229404308,
            "pseudo_op2_susp": 0.0007199424046076314,
            "pseudo_barinel_susp": 0.0012626262626262627
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs#244",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._rebuild_blknos_and_blklocs(self)",
        "snippet": "    def _rebuild_blknos_and_blklocs(self) -> None:\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n\n        if (new_blknos == -1).any():\n            # TODO: can we avoid this?  it isn't cheap\n            raise AssertionError(\"Gaps in blk ref_locs\")\n\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs",
        "begin_line": 244,
        "end_line": 263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012422360248447205,
            "pseudo_dstar_susp": 0.0007479431563201197,
            "pseudo_tarantula_susp": 0.0013605442176870747,
            "pseudo_op2_susp": 0.0007479431563201197,
            "pseudo_barinel_susp": 0.0013605442176870747
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.items#266",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.items(self)",
        "snippet": "    def items(self) -> Index:\n        return self.axes[0]",
        "begin_line": 266,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009049773755656109,
            "pseudo_dstar_susp": 0.002793296089385475,
            "pseudo_tarantula_susp": 0.0008561643835616438,
            "pseudo_op2_susp": 0.002793296089385475,
            "pseudo_barinel_susp": 0.0008561643835616438
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.__len__#324",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.items)",
        "begin_line": 324,
        "end_line": 325,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009389671361502347,
            "pseudo_dstar_susp": 0.0030864197530864196,
            "pseudo_tarantula_susp": 0.00089126559714795,
            "pseudo_op2_susp": 0.0030864197530864196,
            "pseudo_barinel_susp": 0.00089126559714795
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._verify_integrity#339",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._verify_integrity(self)",
        "snippet": "    def _verify_integrity(self) -> None:\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"Number of manager items must equal union of \"\n                f\"block items\\n# manager items: {len(self.items)}, # \"\n                f\"tot_items: {tot_items}\"\n            )",
        "begin_line": 339,
        "end_line": 350,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027397260273972603,
            "pseudo_dstar_susp": 0.008403361344537815,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.008403361344537815,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.apply#378",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.apply(self: T, f, filter=None, **kwargs)",
        "snippet": "    def apply(self: T, f, filter=None, **kwargs) -> T:\n        \"\"\"\n        Iterate over the blocks, collect and create a new BlockManager.\n\n        Parameters\n        ----------\n        f : str or callable\n            Name of the Block method to apply.\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        result_blocks = []\n        # fillna: Series/DataFrame is responsible for making sure value is aligned\n\n        # filter kwarg is used in replace-* family of methods\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                # All items are included, as if there were no filtering\n                filter = None\n            else:\n                kwargs[\"filter\"] = filter_locs\n\n        self._consolidate_inplace()\n\n        if f == \"where\":\n            align_copy = True\n            if kwargs.get(\"align\", True):\n                align_keys = [\"other\", \"cond\"]\n            else:\n                align_keys = [\"cond\"]\n        elif f == \"putmask\":\n            align_copy = False\n            if kwargs.get(\"align\", True):\n                align_keys = [\"new\", \"mask\"]\n            else:\n                align_keys = [\"mask\"]\n        else:\n            align_keys = []\n\n        # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n        # with a .values attribute.\n        aligned_args = {\n            k: kwargs[k]\n            for k in align_keys\n            if not isinstance(kwargs[k], ABCExtensionArray)\n            and hasattr(kwargs[k], \"values\")\n        }\n\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n\n                for k, obj in aligned_args.items():\n                    axis = obj._info_axis_number\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n            if callable(f):\n                applied = b.apply(f, **kwargs)\n            else:\n                applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n\n        if len(result_blocks) == 0:\n            return self.make_empty(self.axes)\n\n        return type(self).from_blocks(result_blocks, self.axes)",
        "begin_line": 378,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.029411764705882353,
            "pseudo_dstar_susp": 1.0,
            "pseudo_tarantula_susp": 0.002976190476190476,
            "pseudo_op2_susp": 1.0,
            "pseudo_barinel_susp": 0.002976190476190476
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.setitem#566",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value) -> \"BlockManager\":\n        return self.apply(\"setitem\", indexer=indexer, value=value)",
        "begin_line": 566,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.astype#587",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(\n        self, dtype, copy: bool = False, errors: str = \"raise\"\n    ) -> \"BlockManager\":\n        return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 587,
        "end_line": 590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.012345679012345678,
            "pseudo_tarantula_susp": 0.0033222591362126247,
            "pseudo_op2_susp": 0.012345679012345678,
            "pseudo_barinel_susp": 0.0033222591362126247
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_consolidated#670",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated",
        "begin_line": 670,
        "end_line": 676,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.0008748906386701663,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.0008748906386701663,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_check#678",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_check(self)",
        "snippet": "    def _consolidate_check(self) -> None:\n        ftypes = [blk.ftype for blk in self.blocks]\n        self._is_consolidated = len(ftypes) == len(set(ftypes))\n        self._known_consolidated = True",
        "begin_line": 678,
        "end_line": 681,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027397260273972603,
            "pseudo_dstar_susp": 0.008403361344537815,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.008403361344537815,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_mixed_type#684",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_mixed_type(self)",
        "snippet": "    def is_mixed_type(self) -> bool:\n        # Warning, consolidation needs to get checked upstairs\n        self._consolidate_inplace()\n        return len(self.blocks) > 1",
        "begin_line": 684,
        "end_line": 687,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.is_view#701",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n\n        # It is technically possible to figure out which blocks are views\n        # e.g. [ b.values.base is not None for b in self.blocks ]\n        # but then we have the case of possibly some blocks being a view\n        # and some blocks not. setting in theory is possible on the non-view\n        # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n        # complicated\n\n        return False",
        "begin_line": 701,
        "end_line": 713,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.combine#735",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.combine(self, blocks: List[Block], copy: bool=True)",
        "snippet": "    def combine(self, blocks: List[Block], copy: bool = True) -> \"BlockManager\":\n        \"\"\" return a new manager with the blocks \"\"\"\n        if len(blocks) == 0:\n            return self.make_empty()\n\n        # FIXME: optimization potential\n        indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n        inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n        new_blocks = []\n        for b in blocks:\n            b = b.copy(deep=copy)\n            b.mgr_locs = algos.take_1d(\n                inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False\n            )\n            new_blocks.append(b)\n\n        axes = list(self.axes)\n        axes[0] = self.items.take(indexer)\n\n        return type(self).from_blocks(new_blocks, axes)",
        "begin_line": 735,
        "end_line": 755,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy#782",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy(self: T, deep=True)",
        "snippet": "    def copy(self: T, deep=True) -> T:\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : bool or string, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        BlockManager\n        \"\"\"\n        # this preserves the notion of view copying of axes\n        if deep:\n            # hit in e.g. tests.io.json.test_pandas\n\n            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()\n\n            new_axes = [copy_func(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n\n        res = self.apply(\"copy\", deep=deep)\n        res.axes = new_axes\n        return res",
        "begin_line": 782,
        "end_line": 809,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.copy_func#800",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.copy_func(ax)",
        "snippet": "            def copy_func(ax):\n                return ax.copy(deep=True) if deep == \"all\" else ax.view()",
        "begin_line": 800,
        "end_line": 801,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.to_dict#870",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.to_dict(self, copy: bool=True)",
        "snippet": "    def to_dict(self, copy: bool = True):\n        \"\"\"\n        Return a dict of str(dtype) -> BlockManager\n\n        Parameters\n        ----------\n        copy : bool, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> BlockManager\n\n        Notes\n        -----\n        This consolidates based on str(dtype)\n        \"\"\"\n        self._consolidate_inplace()\n\n        bd: Dict[str, List[Block]] = {}\n        for b in self.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n\n        return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
        "begin_line": 870,
        "end_line": 892,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.consolidate#935",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.consolidate(self)",
        "snippet": "    def consolidate(self) -> \"BlockManager\":\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n\n        bm = type(self)(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm",
        "begin_line": 935,
        "end_line": 949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager._consolidate_inplace#951",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()",
        "begin_line": 951,
        "end_line": 956,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.get#958",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.get(self, item)",
        "snippet": "    def get(self, item):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n\n                # allow a single nan location indexer\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError(\"cannot label index with a null key\")\n\n            return self.iget(loc)\n        else:\n\n            if isna(item):\n                raise TypeError(\"cannot label index with a null key\")\n\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(\n                new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n            )",
        "begin_line": 958,
        "end_line": 985,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iget#987",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iget(self, i: int)",
        "snippet": "    def iget(self, i: int) -> \"SingleBlockManager\":\n        \"\"\"\n        Return the data as a SingleBlockManager.\n        \"\"\"\n        block = self.blocks[self.blknos[i]]\n        values = block.iget(self.blklocs[i])\n\n        # shortcut for select a single-dim from a 2-dim BM\n        return SingleBlockManager(\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            ),\n            self.axes[1],\n            fastpath=True,\n        )",
        "begin_line": 987,
        "end_line": 1001,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.set#1041",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.set(self, item: Label, value)",
        "snippet": "    def set(self, item: Label, value):\n        \"\"\"\n        Set new item in-place.\n\n        Notes\n        -----\n        Does not consolidate.\n        Adds new Block if not contained in the current items Index.\n        \"\"\"\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            # This item wasn't present, just insert at end\n            self.insert(len(self.items), item, value)\n            return\n\n        self.iset(loc, value)",
        "begin_line": 1041,
        "end_line": 1057,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.iset#1059",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.iset(self, loc: Union[int, slice, np.ndarray], value)",
        "snippet": "    def iset(self, loc: Union[int, slice, np.ndarray], value):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        \"\"\"\n        # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n        #        can prob also fix the various if tests for sparse/categorical\n        if self._blklocs is None and self.ndim > 1:\n            self._rebuild_blknos_and_blklocs()\n\n        value_is_extension_type = is_extension_array_dtype(value)\n\n        # categorical/sparse/datetimetz\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    \"Shape of new values must be compatible with manager shape\"\n                )\n\n        if lib.is_integer(loc):\n            # We have 6 tests where loc is _not_ an int.\n            # In this case, get_blkno_placements will yield only one tuple,\n            #  containing (self._blknos[loc], BlockPlacement(slice(0, 1, 1)))\n            loc = [loc]\n\n        # Accessing public blknos ensures the public versions are initialized\n        blknos = self.blknos[loc]\n        blklocs = self.blklocs[loc].copy()\n\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs))\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n\n                # If all block items are unfit, schedule the block for removal.\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n        if len(removed_blknos):\n            # Remove blocks & update blknos accordingly\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n            self._blknos = algos.take_1d(\n                new_blknos, self._blknos, axis=0, allow_fill=False\n            )\n            self.blocks = tuple(\n                blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n            )\n\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n\n            new_blocks: List[Block] = []\n            if value_is_extension_type:\n                # This code (ab-)uses the fact that sparse blocks contain only\n                # one item.\n                new_blocks.extend(\n                    make_block(\n                        values=value,\n                        ndim=self.ndim,\n                        placement=slice(mgr_loc, mgr_loc + 1),\n                    )\n                    for mgr_loc in unfit_mgr_locs\n                )\n\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n\n            else:\n                # unfit_val_locs contains BlockPlacement objects\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n                new_blocks.append(\n                    make_block(\n                        values=value_getitem(unfit_val_items),\n                        ndim=self.ndim,\n                        placement=unfit_mgr_locs,\n                    )\n                )\n\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n            self.blocks += tuple(new_blocks)\n\n            # Newly created block's dtype may already be present.\n            self._known_consolidated = False",
        "begin_line": 1059,
        "end_line": 1177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.value_getitem#1086",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.value_getitem(placement)",
        "snippet": "                def value_getitem(placement):\n                    return value[placement.indexer]",
        "begin_line": 1086,
        "end_line": 1087,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.BlockManager.reindex_indexer#1254",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.BlockManager",
        "signature": "pandas.core.internals.managers.BlockManager.reindex_indexer(self: T, new_axis, indexer, axis: int, fill_value=None, allow_dups: bool=False, copy: bool=True)",
        "snippet": "    def reindex_indexer(\n        self: T,\n        new_axis,\n        indexer,\n        axis: int,\n        fill_value=None,\n        allow_dups: bool = False,\n        copy: bool = True,\n    ) -> T:\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object, default None\n        allow_dups : bool, default False\n        copy : bool, default True\n\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n\n        self._consolidate_inplace()\n\n        # some axes don't allow reindexing with dups\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n        else:\n            new_blocks = [\n                blk.take_nd(\n                    indexer,\n                    axis=axis,\n                    fill_tuple=(\n                        fill_value if fill_value is not None else blk.fill_value,\n                    ),\n                )\n                for blk in self.blocks\n            ]\n\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n\n        return type(self).from_blocks(new_blocks, new_axes)",
        "begin_line": 1254,
        "end_line": 1311,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.__init__#1505",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
        "snippet": "    def __init__(\n        self,\n        block: Block,\n        axis: Union[Index, List[Index]],\n        do_integrity_check: bool = False,\n        fastpath: bool = False,\n    ):\n        assert isinstance(block, Block), type(block)\n\n        if isinstance(axis, list):\n            if len(axis) != 1:\n                raise ValueError(\n                    \"cannot create SingleBlockManager with more than 1 axis\"\n                )\n            axis = axis[0]\n\n        # passed from constructor, single block, single axis\n        if fastpath:\n            self.axes = [axis]\n        else:\n            self.axes = [ensure_index(axis)]\n\n        self.blocks = tuple([block])",
        "begin_line": 1505,
        "end_line": 1527,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000966183574879227,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_blocks#1530",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_blocks(cls, blocks: List[Block], axes: List[Index])",
        "snippet": "    def from_blocks(\n        cls, blocks: List[Block], axes: List[Index]\n    ) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for BlockManager and SingleBlockManager with same signature.\n        \"\"\"\n        assert len(blocks) == 1\n        assert len(axes) == 1\n        return cls(blocks[0], axes[0], do_integrity_check=False, fastpath=True)",
        "begin_line": 1530,
        "end_line": 1538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.from_array#1541",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.from_array(cls, array: ArrayLike, index: Index)",
        "snippet": "    def from_array(cls, array: ArrayLike, index: Index) -> \"SingleBlockManager\":\n        \"\"\"\n        Constructor for if we have an array that is not yet a Block.\n        \"\"\"\n        block = make_block(array, placement=slice(0, len(index)), ndim=1)\n        return cls(block, index, fastpath=True)",
        "begin_line": 1541,
        "end_line": 1546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006138735420503376,
            "pseudo_dstar_susp": 0.0006357279084551812,
            "pseudo_tarantula_susp": 0.0006743088334457181,
            "pseudo_op2_susp": 0.0006357279084551812,
            "pseudo_barinel_susp": 0.0006743088334457181
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._block#1552",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._block(self)",
        "snippet": "    def _block(self) -> Block:\n        return self.blocks[0]",
        "begin_line": 1552,
        "end_line": 1553,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009074410163339383,
            "pseudo_dstar_susp": 0.0028169014084507044,
            "pseudo_tarantula_susp": 0.0008583690987124463,
            "pseudo_op2_susp": 0.0028169014084507044,
            "pseudo_barinel_susp": 0.0008583690987124463
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.get_slice#1565",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.get_slice(self, slobj: slice, axis: int=0)",
        "snippet": "    def get_slice(self, slobj: slice, axis: int = 0) -> \"SingleBlockManager\":\n        if axis >= self.ndim:\n            raise IndexError(\"Requested axis not found in manager\")\n\n        blk = self._block\n        array = blk._slice(slobj)\n        block = blk.make_block_same_class(array, placement=range(len(array)))\n        return type(self)(block, self.index[slobj], fastpath=True)",
        "begin_line": 1565,
        "end_line": 1572,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.index#1575",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.index(self)",
        "snippet": "    def index(self) -> Index:\n        return self.axes[0]",
        "begin_line": 1575,
        "end_line": 1576,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.dtype#1579",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        return self._block.dtype",
        "begin_line": 1579,
        "end_line": 1580,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000999000999000999,
            "pseudo_dstar_susp": 0.0037735849056603774,
            "pseudo_tarantula_susp": 0.0009442870632672333,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.0009442870632672333
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.external_values#1588",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.external_values(self)",
        "snippet": "    def external_values(self):\n        \"\"\"The array that Series.values returns\"\"\"\n        return self._block.external_values()",
        "begin_line": 1588,
        "end_line": 1590,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016550810989738498,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.internal_values#1592",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"The array that Series._values returns\"\"\"\n        return self._block.internal_values()",
        "begin_line": 1592,
        "end_line": 1594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006049606775559589,
            "pseudo_dstar_susp": 0.0006261740763932373,
            "pseudo_tarantula_susp": 0.0006373486297004461,
            "pseudo_op2_susp": 0.0006261740763932373,
            "pseudo_barinel_susp": 0.0006373486297004461
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager.is_consolidated#1600",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager.is_consolidated(self)",
        "snippet": "    def is_consolidated(self) -> bool:\n        return True",
        "begin_line": 1600,
        "end_line": 1601,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace#1606",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers.SingleBlockManager",
        "signature": "pandas.core.internals.managers.SingleBlockManager._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self):\n        pass",
        "begin_line": 1606,
        "end_line": 1607,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.internals.managers.create_block_manager_from_arrays#1690",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.create_block_manager_from_arrays(arrays, names, axes)",
        "snippet": "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
        "begin_line": 1690,
        "end_line": 1698,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.0008748906386701663,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.0008748906386701663,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.managers.form_blocks#1723",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers.form_blocks(arrays, names, axes)",
        "snippet": "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
        "begin_line": 1723,
        "end_line": 1817,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.managers._simple_blockify#1820",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._simple_blockify(tuples, dtype)",
        "snippet": "def _simple_blockify(tuples, dtype):\n    \"\"\"\n    return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
        "begin_line": 1820,
        "end_line": 1832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers._multi_blockify#1835",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._multi_blockify(tuples, dtype=None)",
        "snippet": "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
        "begin_line": 1835,
        "end_line": 1848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers._stack_arrays#1851",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._stack_arrays(tuples, dtype)",
        "snippet": "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
        "begin_line": 1851,
        "end_line": 1875,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers._asarray_compat#1854",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._asarray_compat(x)",
        "snippet": "    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)",
        "begin_line": 1854,
        "end_line": 1858,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.managers._shape_compat#1860",
        "src_path": "pandas/core/internals/managers.py",
        "class_name": "pandas.core.internals.managers",
        "signature": "pandas.core.internals.managers._shape_compat(x)",
        "snippet": "    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape",
        "begin_line": 1860,
        "end_line": 1864,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.missing.dispatch_fill_zeros#133",
        "src_path": "pandas/core/ops/missing.py",
        "class_name": "pandas.core.ops.missing",
        "signature": "pandas.core.ops.missing.dispatch_fill_zeros(op, left, right, result)",
        "snippet": "def dispatch_fill_zeros(op, left, right, result):\n    \"\"\"\n    Call fill_zeros with the appropriate fill value depending on the operation,\n    with special logic for divmod and rdivmod.\n\n    Parameters\n    ----------\n    op : function (operator.add, operator.div, ...)\n    left : object (np.ndarray for non-reversed ops)\n    right : object (np.ndarray for reversed ops)\n    result : ndarray\n\n    Returns\n    -------\n    result : np.ndarray\n\n    Notes\n    -----\n    For divmod and rdivmod, the `result` parameter and returned `result`\n    is a 2-tuple of ndarray objects.\n    \"\"\"\n    if op is divmod:\n        result = (\n            mask_zero_div_zero(left, right, result[0]),\n            fill_zeros(result[1], left, right),\n        )\n    elif op is rdivmod:\n        result = (\n            mask_zero_div_zero(right, left, result[0]),\n            fill_zeros(result[1], right, left),\n        )\n    elif op is operator.floordiv:\n        # Note: no need to do this for truediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(left, right, result)\n    elif op is rfloordiv:\n        # Note: no need to do this for rtruediv; in py3 numpy behaves the way\n        #  we want.\n        result = mask_zero_div_zero(right, left, result)\n    elif op is operator.mod:\n        result = fill_zeros(result, left, right)\n    elif op is rmod:\n        result = fill_zeros(result, right, left)\n    return result",
        "begin_line": 133,
        "end_line": 176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.maybe_box_datetimelike#76",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_box_datetimelike(value, dtype=None)",
        "snippet": "def maybe_box_datetimelike(value, dtype=None):\n    # turn a datetime like into a Timestamp/timedelta as needed\n    if dtype == object:\n        # If we dont have datetime64/timedelta64 dtype, we dont want to\n        #  box datetimelike scalars\n        return value\n\n    if isinstance(value, (np.datetime64, datetime)):\n        value = tslibs.Timestamp(value)\n    elif isinstance(value, (np.timedelta64, timedelta)):\n        value = tslibs.Timedelta(value)\n\n    return value",
        "begin_line": 76,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.is_bool_indexer#91",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_bool_indexer(key: Any)",
        "snippet": "def is_bool_indexer(key: Any) -> bool:\n    \"\"\"\n    Check whether `key` is a valid boolean indexer.\n\n    Parameters\n    ----------\n    key : Any\n        Only list-likes may be considered boolean indexers.\n        All other types are not considered a boolean indexer.\n        For array-like input, boolean ndarrays or ExtensionArrays\n        with ``_is_boolean`` set are considered boolean indexers.\n\n    Returns\n    -------\n    bool\n        Whether `key` is a valid boolean indexer.\n\n    Raises\n    ------\n    ValueError\n        When the array is an object-dtype ndarray or ExtensionArray\n        and contains missing values.\n\n    See Also\n    --------\n    check_array_indexer : Check that `key` is a valid array to index,\n        and convert to an ndarray.\n    \"\"\"\n    if isinstance(key, (ABCSeries, np.ndarray, ABCIndex)) or (\n        is_array_like(key) and is_extension_array_dtype(key.dtype)\n    ):\n        if key.dtype == np.object_:\n            key = np.asarray(key)\n\n            if not lib.is_bool_array(key):\n                na_msg = \"Cannot mask with non-boolean array containing NA / NaN values\"\n                if isna(key).any():\n                    raise ValueError(na_msg)\n                return False\n            return True\n        elif is_bool_dtype(key.dtype):\n            return True\n    elif isinstance(key, list):\n        try:\n            arr = np.asarray(key)\n            return arr.dtype == np.bool_ and len(arr) == len(key)\n        except TypeError:  # pragma: no cover\n            return False\n\n    return False",
        "begin_line": 91,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015313935681470138,
            "pseudo_dstar_susp": 0.001488095238095238,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.001488095238095238,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.common.cast_scalar_indexer#143",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.cast_scalar_indexer(val)",
        "snippet": "def cast_scalar_indexer(val):\n    \"\"\"\n    To avoid numpy DeprecationWarnings, cast float to integer where valid.\n\n    Parameters\n    ----------\n    val : scalar\n\n    Returns\n    -------\n    outval : scalar\n    \"\"\"\n    # assumes lib.is_scalar(val)\n    if lib.is_float(val) and val.is_integer():\n        return int(val)\n    return val",
        "begin_line": 143,
        "end_line": 158,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016051364365971107,
            "pseudo_dstar_susp": 0.0014947683109118087,
            "pseudo_tarantula_susp": 0.001256281407035176,
            "pseudo_op2_susp": 0.0014947683109118087,
            "pseudo_barinel_susp": 0.0012626262626262627
        }
    },
    {
        "name": "pandas.core.common.not_none#161",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.not_none(*args)",
        "snippet": "def not_none(*args):\n    \"\"\"\n    Returns a generator consisting of the arguments that are not None.\n    \"\"\"\n    return (arg for arg in args if arg is not None)",
        "begin_line": 161,
        "end_line": 165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.any_none#168",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.any_none(*args)",
        "snippet": "def any_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if any argument is None.\n    \"\"\"\n    return any(arg is None for arg in args)",
        "begin_line": 168,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.all_none#175",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_none(*args)",
        "snippet": "def all_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are None.\n    \"\"\"\n    return all(arg is None for arg in args)",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027397260273972603,
            "pseudo_dstar_susp": 0.25,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.25,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.common.all_not_none#189",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.all_not_none(*args)",
        "snippet": "def all_not_none(*args) -> bool:\n    \"\"\"\n    Returns a boolean indicating if all arguments are not None.\n    \"\"\"\n    return all(arg is not None for arg in args)",
        "begin_line": 189,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.count_not_none#196",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.count_not_none(*args)",
        "snippet": "def count_not_none(*args) -> int:\n    \"\"\"\n    Returns the count of arguments that are not None.\n    \"\"\"\n    return sum(x is not None for x in args)",
        "begin_line": 196,
        "end_line": 200,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019968051118210862,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.common.asarray_tuplesafe#211",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.asarray_tuplesafe(values, dtype=None)",
        "snippet": "def asarray_tuplesafe(values, dtype=None):\n\n    if not (isinstance(values, (list, tuple)) or hasattr(values, \"__array__\")):\n        values = list(values)\n    elif isinstance(values, ABCIndexClass):\n        return values.values\n\n    if isinstance(values, list) and dtype in [np.object_, object]:\n        return construct_1d_object_array_from_listlike(values)\n\n    result = np.asarray(values, dtype=dtype)\n\n    if issubclass(result.dtype.type, str):\n        result = np.asarray(values, dtype=object)\n\n    if result.ndim == 2:\n        # Avoid building an array of arrays:\n        values = [tuple(x) for x in values]\n        result = construct_1d_object_array_from_listlike(values)\n\n    return result",
        "begin_line": 211,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008006405124099279,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0010471204188481676,
            "pseudo_op2_susp": 0.0013736263736263737,
            "pseudo_barinel_susp": 0.0010471204188481676
        }
    },
    {
        "name": "pandas.core.common.maybe_iterable_to_list#267",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.maybe_iterable_to_list(obj: Union[Iterable[T], T])",
        "snippet": "def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:\n    \"\"\"\n    If obj is Iterable but not list-like, consume into list.\n    \"\"\"\n    if isinstance(obj, abc.Iterable) and not isinstance(obj, abc.Sized):\n        return list(obj)\n    return obj",
        "begin_line": 267,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011173184357541898,
            "pseudo_dstar_susp": 0.0014727540500736377,
            "pseudo_tarantula_susp": 0.0010615711252653928,
            "pseudo_op2_susp": 0.0014727540500736377,
            "pseudo_barinel_susp": 0.0010615711252653928
        }
    },
    {
        "name": "pandas.core.common.is_null_slice#276",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.is_null_slice(obj)",
        "snippet": "def is_null_slice(obj) -> bool:\n    \"\"\"\n    We have a null slice.\n    \"\"\"\n    return (\n        isinstance(obj, slice)\n        and obj.start is None\n        and obj.stop is None\n        and obj.step is None\n    )",
        "begin_line": 276,
        "end_line": 285,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.common.apply_if_callable#322",
        "src_path": "pandas/core/common.py",
        "class_name": "pandas.core.common",
        "signature": "pandas.core.common.apply_if_callable(maybe_callable, obj, **kwargs)",
        "snippet": "def apply_if_callable(maybe_callable, obj, **kwargs):\n    \"\"\"\n    Evaluate possibly callable input using obj and kwargs if it is callable,\n    otherwise return as it is.\n\n    Parameters\n    ----------\n    maybe_callable : possibly a callable\n    obj : NDFrame\n    **kwargs\n    \"\"\"\n    if callable(maybe_callable):\n        return maybe_callable(obj, **kwargs)\n\n    return maybe_callable",
        "begin_line": 322,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011682242990654205,
            "pseudo_dstar_susp": 0.0007246376811594203,
            "pseudo_tarantula_susp": 0.001282051282051282,
            "pseudo_op2_susp": 0.0007246376811594203,
            "pseudo_barinel_susp": 0.001282051282051282
        }
    },
    {
        "name": "pandas.core.util.hashing._combine_hash_arrays#30",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._combine_hash_arrays(arrays, num_items: int)",
        "snippet": "def _combine_hash_arrays(arrays, num_items: int):\n    \"\"\"\n    Parameters\n    ----------\n    arrays : generator\n    num_items : int\n\n    Should be the same as CPython's tupleobject.c\n    \"\"\"\n    try:\n        first = next(arrays)\n    except StopIteration:\n        return np.array([], dtype=np.uint64)\n\n    arrays = itertools.chain([first], arrays)\n\n    mult = np.uint64(1000003)\n    out = np.zeros_like(first) + np.uint64(0x345678)\n    for i, a in enumerate(arrays):\n        inverse_i = num_items - i\n        out ^= a\n        out *= mult\n        mult += np.uint64(82520 + inverse_i + inverse_i)\n    assert i + 1 == num_items, \"Fed in wrong num_items\"\n    out += np.uint64(97531)\n    return out",
        "begin_line": 30,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_pandas_object#58",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_pandas_object(obj, index: bool=True, encoding: str='utf8', hash_key: Optional[str]=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_pandas_object(\n    obj,\n    index: bool = True,\n    encoding: str = \"utf8\",\n    hash_key: Optional[str] = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Return a data hash of the Index/Series/DataFrame.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include the index in the hash (if Series/DataFrame).\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    Series of uint64, same length as the object\n    \"\"\"\n    from pandas import Series\n\n    if hash_key is None:\n        hash_key = _default_hash_key\n\n    if isinstance(obj, ABCMultiIndex):\n        return Series(hash_tuples(obj, encoding, hash_key), dtype=\"uint64\", copy=False)\n\n    elif isinstance(obj, ABCIndexClass):\n        h = hash_array(obj.values, encoding, hash_key, categorize).astype(\n            \"uint64\", copy=False\n        )\n        h = Series(h, index=obj, dtype=\"uint64\", copy=False)\n\n    elif isinstance(obj, ABCSeries):\n        h = hash_array(obj.values, encoding, hash_key, categorize).astype(\n            \"uint64\", copy=False\n        )\n        if index:\n            index_iter = (\n                hash_pandas_object(\n                    obj.index,\n                    index=False,\n                    encoding=encoding,\n                    hash_key=hash_key,\n                    categorize=categorize,\n                ).values\n                for _ in [None]\n            )\n            arrays = itertools.chain([h], index_iter)\n            h = _combine_hash_arrays(arrays, 2)\n\n        h = Series(h, index=obj.index, dtype=\"uint64\", copy=False)\n\n    elif isinstance(obj, ABCDataFrame):\n        hashes = (hash_array(series.values) for _, series in obj.items())\n        num_items = len(obj.columns)\n        if index:\n            index_hash_generator = (\n                hash_pandas_object(\n                    obj.index,\n                    index=False,\n                    encoding=encoding,\n                    hash_key=hash_key,\n                    categorize=categorize,\n                ).values  # noqa\n                for _ in [None]\n            )\n            num_items += 1\n\n            # keep `hashes` specifically a generator to keep mypy happy\n            _hashes = itertools.chain(hashes, index_hash_generator)\n            hashes = (x for x in _hashes)\n        h = _combine_hash_arrays(hashes, num_items)\n\n        h = Series(h, index=obj.index, dtype=\"uint64\", copy=False)\n    else:\n        raise TypeError(f\"Unexpected type for hashing {type(obj)}\")\n    return h",
        "begin_line": 58,
        "end_line": 142,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_tuples#145",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_tuples(vals, encoding='utf8', hash_key: str=_default_hash_key)",
        "snippet": "def hash_tuples(vals, encoding=\"utf8\", hash_key: str = _default_hash_key):\n    \"\"\"\n    Hash an MultiIndex / list-of-tuples efficiently\n\n    Parameters\n    ----------\n    vals : MultiIndex, list-of-tuples, or single tuple\n    encoding : str, default 'utf8'\n    hash_key : str, default _default_hash_key\n\n    Returns\n    -------\n    ndarray of hashed values array\n    \"\"\"\n    is_tuple = False\n    if isinstance(vals, tuple):\n        vals = [vals]\n        is_tuple = True\n    elif not is_list_like(vals):\n        raise TypeError(\"must be convertible to a list-of-tuples\")\n\n    from pandas import Categorical, MultiIndex\n\n    if not isinstance(vals, ABCMultiIndex):\n        vals = MultiIndex.from_tuples(vals)\n\n    # create a list-of-Categoricals\n    vals = [\n        Categorical(vals.codes[level], vals.levels[level], ordered=False, fastpath=True)\n        for level in range(vals.nlevels)\n    ]\n\n    # hash the list-of-ndarrays\n    hashes = (\n        _hash_categorical(cat, encoding=encoding, hash_key=hash_key) for cat in vals\n    )\n    h = _combine_hash_arrays(hashes, len(vals))\n    if is_tuple:\n        h = h[0]\n\n    return h",
        "begin_line": 145,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_tuple#188",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_tuple(val, encoding: str='utf8', hash_key: str=_default_hash_key)",
        "snippet": "def hash_tuple(val, encoding: str = \"utf8\", hash_key: str = _default_hash_key):\n    \"\"\"\n    Hash a single tuple efficiently\n\n    Parameters\n    ----------\n    val : single tuple\n    encoding : str, default 'utf8'\n    hash_key : str, default _default_hash_key\n\n    Returns\n    -------\n    hash\n\n    \"\"\"\n    hashes = (_hash_scalar(v, encoding=encoding, hash_key=hash_key) for v in val)\n\n    h = _combine_hash_arrays(hashes, len(val))[0]\n\n    return h",
        "begin_line": 188,
        "end_line": 207,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing._hash_categorical#210",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._hash_categorical(c, encoding: str, hash_key: str)",
        "snippet": "def _hash_categorical(c, encoding: str, hash_key: str):\n    \"\"\"\n    Hash a Categorical by hashing its categories, and then mapping the codes\n    to the hashes\n\n    Parameters\n    ----------\n    c : Categorical\n    encoding : str\n    hash_key : str\n\n    Returns\n    -------\n    ndarray of hashed values array, same size as len(c)\n    \"\"\"\n    # Convert ExtensionArrays to ndarrays\n    values = np.asarray(c.categories.values)\n    hashed = hash_array(values, encoding, hash_key, categorize=False)\n\n    # we have uint64, as we don't directly support missing values\n    # we don't want to use take_nd which will coerce to float\n    # instead, directly construct the result with a\n    # max(np.uint64) as the missing value indicator\n    #\n    # TODO: GH 15362\n\n    mask = c.isna()\n    if len(hashed):\n        result = hashed.take(c.codes)\n    else:\n        result = np.zeros(len(mask), dtype=\"uint64\")\n\n    if mask.any():\n        result[mask] = np.iinfo(np.uint64).max\n\n    return result",
        "begin_line": 210,
        "end_line": 245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019968051118210862,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing.hash_array#248",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing.hash_array(vals, encoding: str='utf8', hash_key: str=_default_hash_key, categorize: bool=True)",
        "snippet": "def hash_array(\n    vals,\n    encoding: str = \"utf8\",\n    hash_key: str = _default_hash_key,\n    categorize: bool = True,\n):\n    \"\"\"\n    Given a 1d array, return an array of deterministic integers.\n\n    Parameters\n    ----------\n    vals : ndarray, Categorical\n    encoding : str, default 'utf8'\n        Encoding for data & key when strings.\n    hash_key : str, default _default_hash_key\n        Hash_key for string key to encode.\n    categorize : bool, default True\n        Whether to first categorize object arrays before hashing. This is more\n        efficient when the array contains duplicate values.\n\n    Returns\n    -------\n    1d uint64 numpy array of hash values, same length as the vals\n    \"\"\"\n    if not hasattr(vals, \"dtype\"):\n        raise TypeError(\"must pass a ndarray-like\")\n    dtype = vals.dtype\n\n    # For categoricals, we hash the categories, then remap the codes to the\n    # hash values. (This check is above the complex check so that we don't ask\n    # numpy if categorical is a subdtype of complex, as it will choke).\n    if is_categorical_dtype(dtype):\n        return _hash_categorical(vals, encoding, hash_key)\n    elif is_extension_array_dtype(dtype):\n        vals, _ = vals._values_for_factorize()\n        dtype = vals.dtype\n\n    # we'll be working with everything as 64-bit values, so handle this\n    # 128-bit value early\n    if np.issubdtype(dtype, np.complex128):\n        return hash_array(np.real(vals)) + 23 * hash_array(np.imag(vals))\n\n    # First, turn whatever array this is into unsigned 64-bit ints, if we can\n    # manage it.\n    elif isinstance(dtype, np.bool):\n        vals = vals.astype(\"u8\")\n    elif issubclass(dtype.type, (np.datetime64, np.timedelta64)):\n        vals = vals.view(\"i8\").astype(\"u8\", copy=False)\n    elif issubclass(dtype.type, np.number) and dtype.itemsize <= 8:\n        vals = vals.view(f\"u{vals.dtype.itemsize}\").astype(\"u8\")\n    else:\n        # With repeated values, its MUCH faster to categorize object dtypes,\n        # then hash and rename categories. We allow skipping the categorization\n        # when the values are known/likely to be unique.\n        if categorize:\n            from pandas import factorize, Categorical, Index\n\n            codes, categories = factorize(vals, sort=False)\n            cat = Categorical(codes, Index(categories), ordered=False, fastpath=True)\n            return _hash_categorical(cat, encoding, hash_key)\n\n        try:\n            vals = hashing.hash_object_array(vals, hash_key, encoding)\n        except TypeError:\n            # we have mixed types\n            vals = hashing.hash_object_array(\n                vals.astype(str).astype(object), hash_key, encoding\n            )\n\n    # Then, redistribute these 64-bit ints within the space of 64-bit ints\n    vals ^= vals >> 30\n    vals *= np.uint64(0xBF58476D1CE4E5B9)\n    vals ^= vals >> 27\n    vals *= np.uint64(0x94D049BB133111EB)\n    vals ^= vals >> 31\n    return vals",
        "begin_line": 248,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.util.hashing._hash_scalar#326",
        "src_path": "pandas/core/util/hashing.py",
        "class_name": "pandas.core.util.hashing",
        "signature": "pandas.core.util.hashing._hash_scalar(val, encoding: str='utf8', hash_key: str=_default_hash_key)",
        "snippet": "def _hash_scalar(\n    val, encoding: str = \"utf8\", hash_key: str = _default_hash_key\n) -> np.ndarray:\n    \"\"\"\n    Hash scalar value.\n\n    Parameters\n    ----------\n    val : scalar\n    encoding : str, default \"utf8\"\n    hash_key : str, default _default_hash_key\n\n    Returns\n    -------\n    1d uint64 numpy array of hash value, of length 1\n    \"\"\"\n    if isna(val):\n        # this is to be consistent with the _hash_categorical implementation\n        return np.array([np.iinfo(np.uint64).max], dtype=\"u8\")\n\n    if getattr(val, \"tzinfo\", None) is not None:\n        # for tz-aware datetimes, we need the underlying naive UTC value and\n        # not the tz aware object or pd extension type (as\n        # infer_dtype_from_scalar would do)\n        if not isinstance(val, Timestamp):\n            val = Timestamp(val)\n        val = val.tz_convert(None)\n\n    dtype, val = infer_dtype_from_scalar(val)\n    vals = np.array([val], dtype=dtype)\n\n    return hash_array(vals, hash_key=hash_key, encoding=encoding, categorize=False)",
        "begin_line": 326,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.accessor.PandasDelegate.f#98",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.PandasDelegate",
        "signature": "pandas.core.accessor.PandasDelegate.f(self, *args, **kwargs)",
        "snippet": "            def f(self, *args, **kwargs):\n                return self._delegate_method(name, *args, **kwargs)",
        "begin_line": 98,
        "end_line": 99,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.accessor.CachedAccessor.__get__#183",
        "src_path": "pandas/core/accessor.py",
        "class_name": "pandas.core.accessor.CachedAccessor",
        "signature": "pandas.core.accessor.CachedAccessor.__get__(self, obj, cls)",
        "snippet": "    def __get__(self, obj, cls):\n        if obj is None:\n            # we're accessing the attribute of the class, i.e., Dataset.geo\n            return self._accessor\n        accessor_obj = self._accessor(obj)\n        # Replace the property with the accessor object. Inspired by:\n        # https://www.pydanny.com/cached-property.html\n        # We need to use object.__setattr__ because we overwrite __setattr__ on\n        # NDFrame\n        object.__setattr__(obj, self._name, accessor_obj)\n        return accessor_obj",
        "begin_line": 183,
        "end_line": 193,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_number#31",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_number(obj)",
        "snippet": "def is_number(obj) -> bool:\n    \"\"\"\n    Check if the object is a number.\n\n    Returns True when the object is a number, and False if is not.\n\n    Parameters\n    ----------\n    obj : any type\n        The object to check if is a number.\n\n    Returns\n    -------\n    is_number : bool\n        Whether `obj` is a number or not.\n\n    See Also\n    --------\n    api.types.is_integer: Checks a subgroup of numbers.\n\n    Examples\n    --------\n    >>> pd.api.types.is_number(1)\n    True\n    >>> pd.api.types.is_number(7.15)\n    True\n\n    Booleans are valid because they are int subclass.\n\n    >>> pd.api.types.is_number(False)\n    True\n\n    >>> pd.api.types.is_number(\"foo\")\n    False\n    >>> pd.api.types.is_number(\"5\")\n    False\n    \"\"\"\n    return isinstance(obj, (Number, np.number))",
        "begin_line": 31,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007132667617689016,
            "pseudo_dstar_susp": 0.001890359168241966,
            "pseudo_tarantula_susp": 0.0006854009595613434,
            "pseudo_op2_susp": 0.001890359168241966,
            "pseudo_barinel_susp": 0.0006854009595613434
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_array_like#185",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_array_like(obj)",
        "snippet": "def is_array_like(obj) -> bool:\n    \"\"\"\n    Check if the object is array-like.\n\n    For an object to be considered array-like, it must be list-like and\n    have a `dtype` attribute.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_array_like : bool\n        Whether `obj` has array-like properties.\n\n    Examples\n    --------\n    >>> is_array_like(np.array([1, 2, 3]))\n    True\n    >>> is_array_like(pd.Series([\"a\", \"b\"]))\n    True\n    >>> is_array_like(pd.Index([\"2016-01-01\"]))\n    True\n    >>> is_array_like([1, 2, 3])\n    False\n    >>> is_array_like((\"a\", \"b\"))\n    False\n    \"\"\"\n    return is_list_like(obj) and hasattr(obj, \"dtype\")",
        "begin_line": 185,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006049606775559589,
            "pseudo_dstar_susp": 0.0006261740763932373,
            "pseudo_tarantula_susp": 0.0006373486297004461,
            "pseudo_op2_susp": 0.0006261740763932373,
            "pseudo_barinel_susp": 0.0006373486297004461
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_dict_like#263",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_dict_like(obj)",
        "snippet": "def is_dict_like(obj) -> bool:\n    \"\"\"\n    Check if the object is dict-like.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_dict_like : bool\n        Whether `obj` has dict-like properties.\n\n    Examples\n    --------\n    >>> is_dict_like({1: 2})\n    True\n    >>> is_dict_like([1, 2, 3])\n    False\n    >>> is_dict_like(dict)\n    False\n    >>> is_dict_like(dict())\n    True\n    \"\"\"\n    dict_like_attrs = (\"__getitem__\", \"keys\", \"__contains__\")\n    return (\n        all(hasattr(obj, attr) for attr in dict_like_attrs)\n        # [GH 25196] exclude classes\n        and not isinstance(obj, type)\n    )",
        "begin_line": 263,
        "end_line": 292,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027548209366391185,
            "pseudo_dstar_susp": 0.3333333333333333,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.3333333333333333,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_hashable#322",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_hashable(obj)",
        "snippet": "def is_hashable(obj) -> bool:\n    \"\"\"\n    Return True if hash(obj) will succeed, False otherwise.\n\n    Some types will pass a test against collections.abc.Hashable but fail when\n    they are actually hashed with hash().\n\n    Distinguish between these and other types by trying the call to hash() and\n    seeing if they raise TypeError.\n\n    Returns\n    -------\n    bool\n\n    Examples\n    --------\n    >>> import collections\n    >>> a = ([],)\n    >>> isinstance(a, collections.abc.Hashable)\n    True\n    >>> is_hashable(a)\n    False\n    \"\"\"\n    # Unfortunately, we can't use isinstance(obj, collections.abc.Hashable),\n    # which can be faster than calling hash. That is because numpy scalars\n    # fail this test.\n\n    # Reconsider this decision once this numpy bug is fixed:\n    # https://github.com/numpy/numpy/issues/5562\n\n    try:\n        hash(obj)\n    except TypeError:\n        return False\n    else:\n        return True",
        "begin_line": 322,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007092198581560284,
            "pseudo_dstar_susp": 0.0018656716417910447,
            "pseudo_tarantula_susp": 0.0006821282401091405,
            "pseudo_op2_susp": 0.0018656716417910447,
            "pseudo_barinel_susp": 0.0006821282401091405
        }
    },
    {
        "name": "pandas.core.dtypes.inference.is_sequence#360",
        "src_path": "pandas/core/dtypes/inference.py",
        "class_name": "pandas.core.dtypes.inference",
        "signature": "pandas.core.dtypes.inference.is_sequence(obj)",
        "snippet": "def is_sequence(obj) -> bool:\n    \"\"\"\n    Check if the object is a sequence of objects.\n    String types are not included as sequences here.\n\n    Parameters\n    ----------\n    obj : The object to check\n\n    Returns\n    -------\n    is_sequence : bool\n        Whether `obj` is a sequence of objects.\n\n    Examples\n    --------\n    >>> l = [1, 2, 3]\n    >>>\n    >>> is_sequence(l)\n    True\n    >>> is_sequence(iter(l))\n    False\n    \"\"\"\n    try:\n        iter(obj)  # Can iterate over it.\n        len(obj)  # Has a length associated with it.\n        return not isinstance(obj, (str, bytes))\n    except (TypeError, AttributeError):\n        return False",
        "begin_line": 360,
        "end_line": 388,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001668613382279326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__new__#88",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None,\n    ):\n\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, start, cls)\n\n        # RangeIndex\n        if isinstance(start, RangeIndex):\n            start = start._range\n            return cls._simple_new(start, name=name)\n\n        # validate the arguments\n        if com.all_none(start, stop, step):\n            raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n        start = ensure_python_int(start) if start is not None else 0\n\n        if stop is None:\n            start, stop = 0, start\n        else:\n            stop = ensure_python_int(stop)\n\n        step = ensure_python_int(step) if step is not None else 1\n        if step == 0:\n            raise ValueError(\"Step must not be zero\")\n\n        rng = range(start, stop, step)\n        return cls._simple_new(rng, name=name)",
        "begin_line": 88,
        "end_line": 116,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.005154639175257732,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.005154639175257732,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._simple_new#137",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._simple_new(cls, values: range, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: range, name: Label = None) -> \"RangeIndex\":\n        result = object.__new__(cls)\n\n        assert isinstance(values, range)\n\n        result._range = values\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 137,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.005154639175257732,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.005154639175257732,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._data#156",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._data(self)",
        "snippet": "    def _data(self):\n        \"\"\"\n        An int array that for performance reasons is created only when needed.\n\n        The constructed array is saved in ``_cached_data``. This allows us to\n        check if the array has been created without accessing ``_data`` and\n        triggering the construction.\n        \"\"\"\n        if self._cached_data is None:\n            self._cached_data = np.arange(\n                self.start, self.stop, self.step, dtype=np.int64\n            )\n        return self._cached_data",
        "begin_line": 156,
        "end_line": 168,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001287001287001287,
            "pseudo_dstar_susp": 0.0045871559633027525,
            "pseudo_tarantula_susp": 0.0010706638115631692,
            "pseudo_op2_susp": 0.0045871559633027525,
            "pseudo_barinel_susp": 0.0010706638115631692
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._get_data_as_items#174",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._get_data_as_items(self)",
        "snippet": "    def _get_data_as_items(self):\n        \"\"\" return a list of tuples of start, stop, step \"\"\"\n        rng = self._range\n        return [(\"start\", rng.start), (\"stop\", rng.stop), (\"step\", rng.step)]",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_attrs#187",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr, formatted_value)\n        \"\"\"\n        attrs = self._get_data_as_items()\n        if self.name is not None:\n            attrs.append((\"name\", ibase.default_pprint(self.name)))\n        return attrs",
        "begin_line": 187,
        "end_line": 194,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex._format_data#196",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None):\n        # we are formatting thru the attributes\n        return None",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.start#211",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.start(self)",
        "snippet": "    def start(self):\n        \"\"\"\n        The value of the `start` parameter (``0`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.start",
        "begin_line": 211,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001287001287001287,
            "pseudo_dstar_susp": 0.0045871559633027525,
            "pseudo_tarantula_susp": 0.0010706638115631692,
            "pseudo_op2_susp": 0.0045871559633027525,
            "pseudo_barinel_susp": 0.0010706638115631692
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.stop#234",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.stop(self)",
        "snippet": "    def stop(self):\n        \"\"\"\n        The value of the `stop` parameter.\n        \"\"\"\n        return self._range.stop",
        "begin_line": 234,
        "end_line": 238,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001287001287001287,
            "pseudo_dstar_susp": 0.0045871559633027525,
            "pseudo_tarantula_susp": 0.0010706638115631692,
            "pseudo_op2_susp": 0.0045871559633027525,
            "pseudo_barinel_susp": 0.0010706638115631692
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.step#257",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.step(self)",
        "snippet": "    def step(self):\n        \"\"\"\n        The value of the `step` parameter (``1`` if this was not supplied).\n        \"\"\"\n        # GH 25710\n        return self._range.step",
        "begin_line": 257,
        "end_line": 262,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001287001287001287,
            "pseudo_dstar_susp": 0.0045871559633027525,
            "pseudo_tarantula_susp": 0.0010706638115631692,
            "pseudo_op2_susp": 0.0045871559633027525,
            "pseudo_barinel_susp": 0.0010706638115631692
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.dtype#317",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(np.int64)",
        "begin_line": 317,
        "end_line": 318,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011312217194570137,
            "pseudo_dstar_susp": 0.00425531914893617,
            "pseudo_tarantula_susp": 0.0010070493454179255,
            "pseudo_op2_susp": 0.00425531914893617,
            "pseudo_barinel_susp": 0.0010070493454179255
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.get_loc#346",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        if method is None and tolerance is None:\n            if is_integer(key) or (is_float(key) and key.is_integer()):\n                new_key = int(key)\n                try:\n                    return self._range.index(new_key)\n                except ValueError as err:\n                    raise KeyError(key) from err\n            raise KeyError(key)\n        return super().get_loc(key, method=method, tolerance=tolerance)",
        "begin_line": 346,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.equals#448",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)",
        "begin_line": 448,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017412502176562773,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.range.RangeIndex.__len__#679",
        "src_path": "pandas/core/indexes/range.py",
        "class_name": "pandas.core.indexes.range.RangeIndex",
        "signature": "pandas.core.indexes.range.RangeIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        return the length of the RangeIndex\n        \"\"\"\n        return len(self._range)",
        "begin_line": 679,
        "end_line": 683,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011123470522803114,
            "pseudo_dstar_susp": 0.004081632653061225,
            "pseudo_tarantula_susp": 0.0009727626459143969,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.0009727626459143969
        }
    },
    {
        "name": "pandas.util._decorators.deprecate#24",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.deprecate(name: str, alternative: Callable[..., Any], version: str, alt_name: Optional[str]=None, klass: Optional[Type[Warning]]=None, stacklevel: int=2, msg: Optional[str]=None)",
        "snippet": "def deprecate(\n    name: str,\n    alternative: Callable[..., Any],\n    version: str,\n    alt_name: Optional[str] = None,\n    klass: Optional[Type[Warning]] = None,\n    stacklevel: int = 2,\n    msg: Optional[str] = None,\n) -> Callable[..., Any]:\n    \"\"\"\n    Return a new function that emits a deprecation warning on use.\n\n    To use this method for a deprecated function, another function\n    `alternative` with the same signature must exist. The deprecated\n    function will emit a deprecation warning, and in the docstring\n    it will contain the deprecation directive with the provided version\n    so it can be detected for future removal.\n\n    Parameters\n    ----------\n    name : str\n        Name of function to deprecate.\n    alternative : func\n        Function to use instead.\n    version : str\n        Version of pandas in which the method has been deprecated.\n    alt_name : str, optional\n        Name to use in preference of alternative.__name__.\n    klass : Warning, default FutureWarning\n    stacklevel : int, default 2\n    msg : str\n        The message to display in the warning.\n        Default is '{name} is deprecated. Use {alt_name} instead.'\n    \"\"\"\n    alt_name = alt_name or alternative.__name__\n    klass = klass or FutureWarning\n    warning_msg = msg or f\"{name} is deprecated, use {alt_name} instead\"\n\n    @wraps(alternative)\n    def wrapper(*args, **kwargs) -> Callable[..., Any]:\n        warnings.warn(warning_msg, klass, stacklevel=stacklevel)\n        return alternative(*args, **kwargs)\n\n    # adding deprecated directive to the docstring\n    msg = msg or f\"Use `{alt_name}` instead.\"\n    doc_error_msg = (\n        \"deprecate needs a correctly formatted docstring in \"\n        \"the target function (should have a one liner short \"\n        \"summary, and opening quotes should be in their own \"\n        f\"line). Found:\\n{alternative.__doc__}\"\n    )\n\n    # when python is running in optimized mode (i.e. `-OO`), docstrings are\n    # removed, so we check that a docstring with correct formatting is used\n    # but we allow empty docstrings\n    if alternative.__doc__:\n        if alternative.__doc__.count(\"\\n\") < 3:\n            raise AssertionError(doc_error_msg)\n        empty1, summary, empty2, doc = alternative.__doc__.split(\"\\n\", 3)\n        if empty1 or empty2 and not summary:\n            raise AssertionError(doc_error_msg)\n        wrapper.__doc__ = dedent(\n            f\"\"\"\n        {summary.strip()}\n\n        .. deprecated:: {version}\n            {msg}\n\n        {dedent(doc)}\"\"\"\n        )\n\n    return wrapper",
        "begin_line": 24,
        "end_line": 95,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#63",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "    def wrapper(*args, **kwargs) -> Callable[..., Any]:\n        warnings.warn(warning_msg, klass, stacklevel=stacklevel)\n        return alternative(*args, **kwargs)",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006188118811881188,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0006891798759476223,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0006891798759476223
        }
    },
    {
        "name": "pandas.util._decorators.deprecate_kwarg#98",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.deprecate_kwarg(old_arg_name: str, new_arg_name: Optional[str], mapping: Optional[Union[Mapping[Any, Any], Callable[[Any], Any]]]=None, stacklevel: int=2)",
        "snippet": "def deprecate_kwarg(\n    old_arg_name: str,\n    new_arg_name: Optional[str],\n    mapping: Optional[Union[Mapping[Any, Any], Callable[[Any], Any]]] = None,\n    stacklevel: int = 2,\n) -> Callable[..., Any]:\n    \"\"\"\n    Decorator to deprecate a keyword argument of a function.\n\n    Parameters\n    ----------\n    old_arg_name : str\n        Name of argument in function to deprecate\n    new_arg_name : str or None\n        Name of preferred argument in function. Use None to raise warning that\n        ``old_arg_name`` keyword is deprecated.\n    mapping : dict or callable\n        If mapping is present, use it to translate old arguments to\n        new arguments. A callable must do its own value checking;\n        values not found in a dict will be forwarded unchanged.\n\n    Examples\n    --------\n    The following deprecates 'cols', using 'columns' instead\n\n    >>> @deprecate_kwarg(old_arg_name='cols', new_arg_name='columns')\n    ... def f(columns=''):\n    ...     print(columns)\n    ...\n    >>> f(columns='should work ok')\n    should work ok\n\n    >>> f(cols='should raise warning')\n    FutureWarning: cols is deprecated, use columns instead\n      warnings.warn(msg, FutureWarning)\n    should raise warning\n\n    >>> f(cols='should error', columns=\"can\\'t pass do both\")\n    TypeError: Can only specify 'cols' or 'columns', not both\n\n    >>> @deprecate_kwarg('old', 'new', {'yes': True, 'no': False})\n    ... def f(new=False):\n    ...     print('yes!' if new else 'no!')\n    ...\n    >>> f(old='yes')\n    FutureWarning: old='yes' is deprecated, use new=True instead\n      warnings.warn(msg, FutureWarning)\n    yes!\n\n    To raise a warning that a keyword will be removed entirely in the future\n\n    >>> @deprecate_kwarg(old_arg_name='cols', new_arg_name=None)\n    ... def f(cols='', another_param=''):\n    ...     print(cols)\n    ...\n    >>> f(cols='should raise warning')\n    FutureWarning: the 'cols' keyword is deprecated and will be removed in a\n    future version please takes steps to stop use of 'cols'\n    should raise warning\n    >>> f(another_param='should not raise warning')\n    should not raise warning\n\n    >>> f(cols='should raise warning', another_param='')\n    FutureWarning: the 'cols' keyword is deprecated and will be removed in a\n    future version please takes steps to stop use of 'cols'\n    should raise warning\n    \"\"\"\n    if mapping is not None and not hasattr(mapping, \"get\") and not callable(mapping):\n        raise TypeError(\n            \"mapping from old to new argument values must be dict or callable!\"\n        )\n\n    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        f\"the {repr(old_arg_name)} keyword is deprecated and \"\n                        \"will be removed in a future version. Please take \"\n                        f\"steps to stop the use of {repr(old_arg_name)}\"\n                    )\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        f\"the {old_arg_name}={repr(old_arg_value)} keyword is \"\n                        \"deprecated, use \"\n                        f\"{new_arg_name}={repr(new_arg_value)} instead\"\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        f\"the {repr(old_arg_name)}' keyword is deprecated, \"\n                        f\"use {repr(new_arg_name)} instead\"\n                    )\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        f\"Can only specify {repr(old_arg_name)} \"\n                        f\"or {repr(new_arg_name)}, not both\"\n                    )\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)\n\n    return _deprecate_kwarg",
        "begin_line": 98,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._decorators._deprecate_kwarg#170",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators._deprecate_kwarg(func: F)",
        "snippet": "    def _deprecate_kwarg(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        f\"the {repr(old_arg_name)} keyword is deprecated and \"\n                        \"will be removed in a future version. Please take \"\n                        f\"steps to stop the use of {repr(old_arg_name)}\"\n                    )\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        f\"the {old_arg_name}={repr(old_arg_value)} keyword is \"\n                        \"deprecated, use \"\n                        f\"{new_arg_name}={repr(new_arg_value)} instead\"\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        f\"the {repr(old_arg_name)}' keyword is deprecated, \"\n                        f\"use {repr(new_arg_name)} instead\"\n                    )\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        f\"Can only specify {repr(old_arg_name)} \"\n                        f\"or {repr(new_arg_name)}, not both\"\n                    )\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n\n        return cast(F, wrapper)",
        "begin_line": 170,
        "end_line": 214,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#172",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            old_arg_value = kwargs.pop(old_arg_name, None)\n\n            if old_arg_value is not None:\n                if new_arg_name is None:\n                    msg = (\n                        f\"the {repr(old_arg_name)} keyword is deprecated and \"\n                        \"will be removed in a future version. Please take \"\n                        f\"steps to stop the use of {repr(old_arg_name)}\"\n                    )\n                    warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                    kwargs[old_arg_name] = old_arg_value\n                    return func(*args, **kwargs)\n\n                elif mapping is not None:\n                    if callable(mapping):\n                        new_arg_value = mapping(old_arg_value)\n                    else:\n                        new_arg_value = mapping.get(old_arg_value, old_arg_value)\n                    msg = (\n                        f\"the {old_arg_name}={repr(old_arg_value)} keyword is \"\n                        \"deprecated, use \"\n                        f\"{new_arg_name}={repr(new_arg_value)} instead\"\n                    )\n                else:\n                    new_arg_value = old_arg_value\n                    msg = (\n                        f\"the {repr(old_arg_name)}' keyword is deprecated, \"\n                        f\"use {repr(new_arg_name)} instead\"\n                    )\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name) is not None:\n                    msg = (\n                        f\"Can only specify {repr(old_arg_name)} \"\n                        f\"or {repr(new_arg_name)}, not both\"\n                    )\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)",
        "begin_line": 172,
        "end_line": 212,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006188118811881188,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0006891798759476223,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0006891798759476223
        }
    },
    {
        "name": "pandas.util._decorators.decorate#222",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorate(func: F)",
        "snippet": "    def decorate(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)\n\n        kind = inspect.Parameter.POSITIONAL_OR_KEYWORD\n        params = [\n            inspect.Parameter(\"self\", kind),\n            inspect.Parameter(name, kind, default=None),\n            inspect.Parameter(\"index\", kind, default=None),\n            inspect.Parameter(\"columns\", kind, default=None),\n            inspect.Parameter(\"axis\", kind, default=None),\n        ]\n\n        for pname, default in extra_params:\n            params.append(inspect.Parameter(pname, kind, default=default))\n\n        sig = inspect.Signature(params)\n\n        # https://github.com/python/typing/issues/598\n        func.__signature__ = sig  # type: ignore\n        return cast(F, wrapper)",
        "begin_line": 222,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#224",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable[..., Any]:\n            return func(*args, **kwargs)",
        "begin_line": 224,
        "end_line": 225,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006188118811881188,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0006891798759476223,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0006891798759476223
        }
    },
    {
        "name": "pandas.util._decorators.decorator#268",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.decorator(func: F)",
        "snippet": "    def decorator(func: F) -> F:\n        @wraps(func)\n        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)\n\n        # collecting docstring and docstring templates\n        docstring_components: List[Union[str, Callable]] = []\n        if func.__doc__:\n            docstring_components.append(dedent(func.__doc__))\n\n        for arg in args:\n            if hasattr(arg, \"_docstring_components\"):\n                docstring_components.extend(arg._docstring_components)  # type: ignore\n            elif isinstance(arg, str) or arg.__doc__:\n                docstring_components.append(arg)\n\n        # formatting templates and concatenating docstring\n        wrapper.__doc__ = \"\".join(\n            [\n                arg.format(**kwargs)\n                if isinstance(arg, str)\n                else dedent(arg.__doc__ or \"\")\n                for arg in docstring_components\n            ]\n        )\n\n        wrapper._docstring_components = docstring_components  # type: ignore\n\n        return cast(F, wrapper)",
        "begin_line": 268,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006188118811881188,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0006891798759476223,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0006891798759476223
        }
    },
    {
        "name": "pandas.util._decorators.wrapper#270",
        "src_path": "pandas/util/_decorators.py",
        "class_name": "pandas.util._decorators",
        "signature": "pandas.util._decorators.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs) -> Callable:\n            return func(*args, **kwargs)",
        "begin_line": 270,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006188118811881188,
            "pseudo_dstar_susp": 0.0006402048655569782,
            "pseudo_tarantula_susp": 0.0006891798759476223,
            "pseudo_op2_susp": 0.0006402048655569782,
            "pseudo_barinel_susp": 0.0006891798759476223
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__init__#116",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        self.ndim = self._check_ndim(values, ndim)\n        self.mgr_locs = placement\n        self.values = values\n\n        if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n            raise ValueError(\n                f\"Wrong number of items passed {len(self.values)}, \"\n                f\"placement implies {len(self.mgr_locs)}\"\n            )",
        "begin_line": 116,
        "end_line": 125,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009182736455463728,
            "pseudo_dstar_susp": 0.0029239766081871343,
            "pseudo_tarantula_susp": 0.0008680555555555555,
            "pseudo_op2_susp": 0.0029239766081871343,
            "pseudo_barinel_susp": 0.0008680555555555555
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._check_ndim#127",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._check_ndim(self, values, ndim)",
        "snippet": "    def _check_ndim(self, values, ndim):\n        \"\"\"\n        ndim inference and validation.\n\n        Infers ndim from 'values' if not provided to __init__.\n        Validates that values.ndim and ndim are consistent if and only if\n        the class variable '_validate_ndim' is True.\n\n        Parameters\n        ----------\n        values : array-like\n        ndim : int or None\n\n        Returns\n        -------\n        ndim : int\n\n        Raises\n        ------\n        ValueError : the number of dimensions do not match\n        \"\"\"\n        if ndim is None:\n            ndim = values.ndim\n\n        if self._validate_ndim and values.ndim != ndim:\n            raise ValueError(\n                \"Wrong number of dimensions. \"\n                f\"values.ndim != ndim [{values.ndim} != {ndim}]\"\n            )\n        return ndim",
        "begin_line": 127,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009182736455463728,
            "pseudo_dstar_susp": 0.0029239766081871343,
            "pseudo_tarantula_susp": 0.0008680555555555555,
            "pseudo_op2_susp": 0.0029239766081871343,
            "pseudo_barinel_susp": 0.0008680555555555555
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_view#177",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_view(self)",
        "snippet": "    def is_view(self) -> bool:\n        \"\"\" return a boolean if I am possibly a view \"\"\"\n        return self.values.base is not None",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.is_categorical_astype#186",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.is_categorical_astype(self, dtype)",
        "snippet": "    def is_categorical_astype(self, dtype) -> bool:\n        \"\"\"\n        validate that we have a astypeable to categorical,\n        returns a boolean if we are a categorical\n        \"\"\"\n        if dtype is Categorical or dtype is CategoricalDtype:\n            # this is a pd.Categorical, but is not\n            # a valid type for astypeing\n            raise TypeError(f\"invalid type {dtype} for astype\")\n\n        elif is_categorical_dtype(dtype):\n            return True\n\n        return False",
        "begin_line": 186,
        "end_line": 199,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.034482758620689655,
            "pseudo_dstar_susp": 0.015384615384615385,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.015384615384615385,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.external_values#201",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.external_values(self)",
        "snippet": "    def external_values(self):\n        \"\"\"\n        The array that Series.values returns (public attribute).\n\n        This has some historical constraints, and is overridden in block\n        subclasses to return the correct array (e.g. period returns\n        object ndarray and datetimetz a datetime64[ns] ndarray instead of\n        proper extension array).\n        \"\"\"\n        return self.values",
        "begin_line": 201,
        "end_line": 210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016572754391779913,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.internal_values#212",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.internal_values(self)",
        "snippet": "    def internal_values(self):\n        \"\"\"\n        The array that Series._values returns (internal values).\n        \"\"\"\n        return self.values",
        "begin_line": 212,
        "end_line": 216,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006049606775559589,
            "pseudo_dstar_susp": 0.0006261740763932373,
            "pseudo_tarantula_susp": 0.0006373486297004461,
            "pseudo_op2_susp": 0.0006261740763932373,
            "pseudo_barinel_susp": 0.0006373486297004461
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.array_values#218",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        \"\"\"\n        The array that Series.array returns. Always an ExtensionArray.\n        \"\"\"\n        return PandasArray(self.values)",
        "begin_line": 218,
        "end_line": 222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.0006706908115358819,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0006706908115358819,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.get_values#224",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.get_values(self, dtype=None)",
        "snippet": "    def get_values(self, dtype=None):\n        \"\"\"\n        return an internal format, currently just the ndarray\n        this is often overridden to handle to_dense like operations\n        \"\"\"\n        if is_object_dtype(dtype):\n            return self.values.astype(object)\n        return self.values",
        "begin_line": 224,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.fill_value#241",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.fill_value(self)",
        "snippet": "    def fill_value(self):\n        return np.nan",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#245",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self)",
        "snippet": "    def mgr_locs(self):\n        return self._mgr_locs",
        "begin_line": 245,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000931098696461825,
            "pseudo_dstar_susp": 0.00303951367781155,
            "pseudo_tarantula_susp": 0.000877963125548727,
            "pseudo_op2_susp": 0.00303951367781155,
            "pseudo_barinel_susp": 0.000877963125548727
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.mgr_locs#249",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.mgr_locs(self, new_mgr_locs)",
        "snippet": "    def mgr_locs(self, new_mgr_locs):\n        if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n            new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n        self._mgr_locs = new_mgr_locs",
        "begin_line": 249,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009182736455463728,
            "pseudo_dstar_susp": 0.0029239766081871343,
            "pseudo_tarantula_susp": 0.0008680555555555555,
            "pseudo_op2_susp": 0.0029239766081871343,
            "pseudo_barinel_susp": 0.0008680555555555555
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block#255",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block(self, values, placement=None)",
        "snippet": "    def make_block(self, values, placement=None) -> \"Block\":\n        \"\"\"\n        Create a new block, with type inference propagate any values that are\n        not specified\n        \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n\n        return make_block(values, placement=placement, ndim=self.ndim)",
        "begin_line": 255,
        "end_line": 263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.make_block_same_class#265",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.make_block_same_class(self, values, placement=None, ndim=None)",
        "snippet": "    def make_block_same_class(self, values, placement=None, ndim=None):\n        \"\"\" Wrap given values in a block of same type as self. \"\"\"\n        if placement is None:\n            placement = self.mgr_locs\n        if ndim is None:\n            ndim = self.ndim\n        return make_block(values, placement=placement, ndim=ndim, klass=type(self))",
        "begin_line": 265,
        "end_line": 271,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.__len__#285",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.values)",
        "begin_line": 285,
        "end_line": 286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._slice#296",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._slice(self, slicer)",
        "snippet": "    def _slice(self, slicer):\n        \"\"\" return a slice of my values \"\"\"\n        return self.values[slicer]",
        "begin_line": 296,
        "end_line": 298,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.shape#318",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.shape(self)",
        "snippet": "    def shape(self):\n        return self.values.shape",
        "begin_line": 318,
        "end_line": 319,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.0008748906386701663,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.0008748906386701663,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.dtype#322",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.dtype(self)",
        "snippet": "    def dtype(self):\n        return self.values.dtype",
        "begin_line": 322,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009478672985781991,
            "pseudo_dstar_susp": 0.0031446540880503146,
            "pseudo_tarantula_susp": 0.0008960573476702509,
            "pseudo_op2_susp": 0.0031446540880503146,
            "pseudo_barinel_susp": 0.0008960573476702509
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.ftype#326",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.ftype(self)",
        "snippet": "    def ftype(self) -> str:\n        if getattr(self.values, \"_pandas_ftype\", False):\n            dtype = self.dtype.subtype\n        else:\n            dtype = self.dtype\n        return f\"{dtype}:{self._ftype}\"",
        "begin_line": 326,
        "end_line": 331,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.0008748906386701663,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.0008748906386701663,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.iget#347",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.iget(self, i)",
        "snippet": "    def iget(self, i):\n        return self.values[i]",
        "begin_line": 347,
        "end_line": 348,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.delete#360",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.delete(self, loc)",
        "snippet": "    def delete(self, loc) -> None:\n        \"\"\"\n        Delete given loc(-s) from block in-place.\n        \"\"\"\n        self.values = np.delete(self.values, loc, 0)\n        self.mgr_locs = self.mgr_locs.delete(loc)",
        "begin_line": 360,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.apply#367",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.apply(self, func, **kwargs)",
        "snippet": "    def apply(self, func, **kwargs) -> List[\"Block\"]:\n        \"\"\"\n        apply the function to my values; return a block if we are not\n        one\n        \"\"\"\n        with np.errstate(all=\"ignore\"):\n            result = func(self.values, **kwargs)\n\n        return self._split_op_result(result)",
        "begin_line": 367,
        "end_line": 375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block._split_op_result#377",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block._split_op_result(self, result)",
        "snippet": "    def _split_op_result(self, result) -> List[\"Block\"]:\n        # See also: split_and_operate\n        if is_extension_array_dtype(result) and result.ndim > 1:\n            # if we get a 2D ExtensionArray, we need to split it into 1D pieces\n            nbs = []\n            for i, loc in enumerate(self.mgr_locs):\n                vals = result[i]\n                nv = _block_shape(vals, ndim=self.ndim)\n                block = self.make_block(values=nv, placement=[loc])\n                nbs.append(block)\n            return nbs\n\n        if not isinstance(result, Block):\n            result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n        return [result]",
        "begin_line": 377,
        "end_line": 392,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.astype#542",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        Coerce to the new dtype.\n\n        Parameters\n        ----------\n        dtype : str, dtype convertible\n        copy : bool, default False\n            copy if indicated\n        errors : str, {'raise', 'ignore'}, default 'ignore'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n        Returns\n        -------\n        Block\n        \"\"\"\n        errors_legal_values = (\"raise\", \"ignore\")\n\n        if errors not in errors_legal_values:\n            invalid_arg = (\n                \"Expected value of kwarg 'errors' to be one of \"\n                f\"{list(errors_legal_values)}. Supplied value is '{errors}'\"\n            )\n            raise ValueError(invalid_arg)\n\n        if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n            msg = (\n                f\"Expected an instance of {dtype.__name__}, \"\n                \"but got the class instead. Try instantiating 'dtype'.\"\n            )\n            raise TypeError(msg)\n\n        # may need to convert to categorical\n        if self.is_categorical_astype(dtype):\n\n            if is_categorical_dtype(self.values):\n                # GH 10696/18593: update an existing categorical efficiently\n                return self.make_block(self.values.astype(dtype, copy=copy))\n\n            return self.make_block(Categorical(self.values, dtype=dtype))\n\n        dtype = pandas_dtype(dtype)\n\n        # astype processing\n        if is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n\n        # force the copy here\n        if self.is_extension:\n            # TODO: Should we try/except this astype?\n            values = self.values.astype(dtype)\n        else:\n            if issubclass(dtype.type, str):\n\n                # use native type formatting for datetime/tz/timedelta\n                if self.is_datelike:\n                    values = self.to_native_types()\n\n                # astype formatting\n                else:\n                    # Because we have neither is_extension nor is_datelike,\n                    #  self.values already has the correct shape\n                    values = self.values\n\n            else:\n                values = self.get_values(dtype=dtype)\n\n            # _astype_nansafe works fine with 1-d only\n            vals1d = values.ravel()\n            try:\n                values = astype_nansafe(vals1d, dtype, copy=True)\n            except (ValueError, TypeError):\n                # e.g. astype_nansafe can fail on object-dtype of strings\n                #  trying to convert to float\n                if errors == \"raise\":\n                    raise\n                newb = self.copy() if copy else self\n                return newb\n\n        # TODO(extension)\n        # should we make this attribute?\n        if isinstance(values, np.ndarray):\n            values = values.reshape(self.shape)\n\n        newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n        if newb.is_numeric and self.is_numeric:\n            if newb.shape != self.shape:\n                raise TypeError(\n                    f\"cannot set astype for copy = [{copy}] for dtype \"\n                    f\"({self.dtype.name} [{self.shape}]) to different shape \"\n                    f\"({newb.dtype.name} [{newb.shape}])\"\n                )\n        return newb",
        "begin_line": 542,
        "end_line": 638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.copy#684",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.copy(self, deep: bool=True)",
        "snippet": "    def copy(self, deep: bool = True):\n        \"\"\" copy constructor \"\"\"\n        values = self.values\n        if deep:\n            values = values.copy()\n        return self.make_block_same_class(values, ndim=self.ndim)",
        "begin_line": 684,
        "end_line": 689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.setitem#803",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.setitem(self, indexer, value)",
        "snippet": "    def setitem(self, indexer, value):\n        \"\"\"\n        Set the value inplace, returning a a maybe different typed block.\n\n        Parameters\n        ----------\n        indexer : tuple, list-like, array-like, slice\n            The subset of self.values to set\n        value : object\n            The value being set\n\n        Returns\n        -------\n        Block\n\n        Notes\n        -----\n        `indexer` is a direct slice/positional indexer. `value` must\n        be a compatible shape.\n        \"\"\"\n        transpose = self.ndim == 2\n\n        if isinstance(indexer, np.ndarray) and indexer.ndim > self.ndim:\n            raise ValueError(f\"Cannot set values with ndim > {self.ndim}\")\n\n        # coerce None values, if appropriate\n        if value is None:\n            if self.is_numeric:\n                value = np.nan\n\n        # coerce if block dtype can store value\n        values = self.values\n        if self._can_hold_element(value):\n            # We only get here for non-Extension Blocks, so _try_coerce_args\n            #  is only relevant for DatetimeBlock and TimedeltaBlock\n            if lib.is_scalar(value):\n                value = convert_scalar_for_putitemlike(value, values.dtype)\n\n        else:\n            # current dtype cannot store value, coerce to common dtype\n            find_dtype = False\n\n            if hasattr(value, \"dtype\"):\n                dtype = value.dtype\n                find_dtype = True\n\n            elif lib.is_scalar(value) and not isna(value):\n                dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n                find_dtype = True\n\n            if find_dtype:\n                dtype = find_common_type([values.dtype, dtype])\n                if not is_dtype_equal(self.dtype, dtype):\n                    b = self.astype(dtype)\n                    return b.setitem(indexer, value)\n\n        # value must be storeable at this moment\n        if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n            # We need to be careful not to allow through strings that\n            #  can be parsed to EADtypes\n            arr_value = value\n        else:\n            arr_value = np.array(value)\n\n        # cast the values to a type that can hold nan (if necessary)\n        if not self._can_hold_element(value):\n            dtype, _ = maybe_promote(arr_value.dtype)\n            values = values.astype(dtype)\n\n        if transpose:\n            values = values.T\n\n        # length checking\n        check_setitem_lengths(indexer, value, values)\n        exact_match = (\n            len(arr_value.shape)\n            and arr_value.shape[0] == values.shape[0]\n            and arr_value.size == values.size\n        )\n        if is_empty_indexer(indexer, arr_value):\n            # GH#8669 empty indexers\n            pass\n\n        elif is_scalar_indexer(indexer, arr_value):\n            # setting a single element for each dim and with a rhs that could\n            #  be e.g. a list; see GH#6043\n            values[indexer] = value\n\n        elif (\n            exact_match\n            and is_categorical_dtype(arr_value.dtype)\n            and not is_categorical_dtype(values)\n        ):\n            # GH25495 - If the current dtype is not categorical,\n            # we need to create a new categorical block\n            values[indexer] = value\n            return self.make_block(Categorical(self.values, dtype=arr_value.dtype))\n\n        # if we are an exact match (ex-broadcasting),\n        # then use the resultant dtype\n        elif exact_match:\n            values[indexer] = value\n\n            try:\n                values = values.astype(arr_value.dtype)\n            except ValueError:\n                pass\n\n        # set\n        else:\n            values[indexer] = value\n\n        if transpose:\n            values = values.T\n        block = self.make_block(values)\n        return block",
        "begin_line": 803,
        "end_line": 918,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.Block.take_nd#1272",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.Block",
        "signature": "pandas.core.internals.blocks.Block.take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_tuple=None)",
        "snippet": "    def take_nd(self, indexer, axis: int, new_mgr_locs=None, fill_tuple=None):\n        \"\"\"\n        Take values according to indexer and return them as a block.bb\n\n        \"\"\"\n        # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n        # so need to preserve types\n        # sparse is treated like an ndarray, but needs .get_values() shaping\n\n        values = self.values\n\n        if fill_tuple is None:\n            fill_value = self.fill_value\n            allow_fill = False\n        else:\n            fill_value = fill_tuple[0]\n            allow_fill = True\n\n        new_values = algos.take_nd(\n            values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n        )\n\n        # Called from three places in managers, all of which satisfy\n        #  this assertion\n        assert not (axis == 0 and new_mgr_locs is None)\n        if new_mgr_locs is None:\n            new_mgr_locs = self.mgr_locs\n\n        if not is_dtype_equal(new_values.dtype, self.dtype):\n            return self.make_block(new_values, new_mgr_locs)\n        else:\n            return self.make_block_same_class(new_values, new_mgr_locs)",
        "begin_line": 1272,
        "end_line": 1303,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.__init__#1615",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        \"\"\"\n        Initialize a non-consolidatable block.\n\n        'ndim' may be inferred from 'placement'.\n\n        This will call continue to call __init__ for the other base\n        classes mixed in with this Mixin.\n        \"\"\"\n        values = self._maybe_coerce_values(values)\n\n        # Placement must be converted to BlockPlacement so that we can check\n        # its length\n        if not isinstance(placement, libinternals.BlockPlacement):\n            placement = libinternals.BlockPlacement(placement)\n\n        # Maybe infer ndim from placement\n        if ndim is None:\n            if len(placement) != 1:\n                ndim = 1\n            else:\n                ndim = 2\n        super().__init__(values, placement, ndim=ndim)\n\n        if self.ndim == 2 and len(self.mgr_locs) != 1:\n            # TODO(2DEA): check unnecessary with 2D EAs\n            raise AssertionError(\"block.size != values.size\")",
        "begin_line": 1615,
        "end_line": 1641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.012345679012345678,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.012345679012345678,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.shape#1644",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.shape(self)",
        "snippet": "    def shape(self):\n        if self.ndim == 1:\n            return ((len(self.values)),)\n        return (len(self.mgr_locs), len(self.values))",
        "begin_line": 1644,
        "end_line": 1647,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.iget#1649",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.iget(self, col)",
        "snippet": "    def iget(self, col):\n\n        if self.ndim == 2 and isinstance(col, tuple):\n            col, loc = col\n            if not com.is_null_slice(col) and col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            elif isinstance(col, slice):\n                if col != slice(None):\n                    raise NotImplementedError(col)\n                return self.values[[loc]]\n            return self.values[loc]\n        else:\n            if col != 0:\n                raise IndexError(f\"{self} only contains one item\")\n            return self.values",
        "begin_line": 1649,
        "end_line": 1663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values#1738",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Unbox to an extension array.\n\n        This will unbox an ExtensionArray stored in an Index or Series.\n        ExtensionArrays pass through. No dtype coercion is done.\n\n        Parameters\n        ----------\n        values : Index, Series, ExtensionArray\n\n        Returns\n        -------\n        ExtensionArray\n        \"\"\"\n        return extract_array(values)",
        "begin_line": 1738,
        "end_line": 1753,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.012345679012345678,
            "pseudo_tarantula_susp": 0.0033222591362126247,
            "pseudo_op2_susp": 0.012345679012345678,
            "pseudo_barinel_susp": 0.0033222591362126247
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.is_numeric#1776",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.is_numeric(self)",
        "snippet": "    def is_numeric(self):\n        return self.values.dtype._is_numeric",
        "begin_line": 1776,
        "end_line": 1777,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock.array_values#1817",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        return self.values",
        "begin_line": 1817,
        "end_line": 1818,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ExtensionBlock._ftype#1978",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ExtensionBlock",
        "signature": "pandas.core.internals.blocks.ExtensionBlock._ftype(self)",
        "snippet": "    def _ftype(self):\n        return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
        "begin_line": 1978,
        "end_line": 1979,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectValuesExtensionBlock.external_values#2014",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectValuesExtensionBlock",
        "signature": "pandas.core.internals.blocks.ObjectValuesExtensionBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return self.values.astype(object)",
        "begin_line": 2014,
        "end_line": 2015,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values#2153",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.internal_values(self)",
        "snippet": "    def internal_values(self):\n        # Override to return DatetimeArray and TimedeltaArray\n        return self.array_values()",
        "begin_line": 2153,
        "end_line": 2155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget#2157",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeLikeBlockMixin",
        "signature": "pandas.core.internals.blocks.DatetimeLikeBlockMixin.iget(self, key)",
        "snippet": "    def iget(self, key):\n        # GH#31649 we need to wrap scalars in Timestamp/Timedelta\n        # TODO(EA2D): this can be removed if we ever have 2D EA\n        result = super().iget(key)\n        if isinstance(result, np.datetime64):\n            result = Timestamp(result)\n        elif isinstance(result, np.timedelta64):\n            result = Timedelta(result)\n        return result",
        "begin_line": 2157,
        "end_line": 2165,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.__init__#2178",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        values = self._maybe_coerce_values(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2178,
        "end_line": 2180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values#2186",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock._maybe_coerce_values(self, values)",
        "snippet": "    def _maybe_coerce_values(self, values):\n        \"\"\"\n        Input validation for values passed to __init__. Ensure that\n        we have datetime64ns, coercing if necessary.\n\n        Parameters\n        ----------\n        values : array-like\n            Must be convertible to datetime64\n\n        Returns\n        -------\n        values : ndarray[datetime64ns]\n\n        Overridden by DatetimeTZBlock.\n        \"\"\"\n        if values.dtype != _NS_DTYPE:\n            values = conversion.ensure_datetime64ns(values)\n\n        if isinstance(values, DatetimeArray):\n            values = values._data\n\n        assert isinstance(values, np.ndarray), type(values)\n        return values",
        "begin_line": 2186,
        "end_line": 2209,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.astype#2211",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.astype(self, dtype, copy: bool=False, errors: str='raise')",
        "snippet": "    def astype(self, dtype, copy: bool = False, errors: str = \"raise\"):\n        \"\"\"\n        these automatically copy, so copy=True has no effect\n        raise on an except if raise == True\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n\n        # if we are passed a datetime64[ns, tz]\n        if is_datetime64tz_dtype(dtype):\n            values = self.values\n            if copy:\n                # this should be the only copy\n                values = values.copy()\n            if getattr(values, \"tz\", None) is None:\n                values = DatetimeArray(values).tz_localize(\"UTC\")\n            values = values.tz_convert(dtype.tz)\n            return self.make_block(values)\n\n        # delegate\n        return super().astype(dtype=dtype, copy=copy, errors=errors)",
        "begin_line": 2211,
        "end_line": 2230,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.external_values#2290",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
        "begin_line": 2290,
        "end_line": 2291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.DatetimeBlock.array_values#2293",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.DatetimeBlock",
        "signature": "pandas.core.internals.blocks.DatetimeBlock.array_values(self)",
        "snippet": "    def array_values(self) -> ExtensionArray:\n        return DatetimeArray._simple_new(self.values)",
        "begin_line": 2293,
        "end_line": 2294,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.TimeDeltaBlock.external_values#2543",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.TimeDeltaBlock",
        "signature": "pandas.core.internals.blocks.TimeDeltaBlock.external_values(self)",
        "snippet": "    def external_values(self):\n        return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
        "begin_line": 2543,
        "end_line": 2544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.__init__#2588",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.__init__(self, values, placement=None, ndim=2)",
        "snippet": "    def __init__(self, values, placement=None, ndim=2):\n        if issubclass(values.dtype.type, str):\n            values = np.array(values, dtype=object)\n\n        super().__init__(values, ndim=ndim, placement=placement)",
        "begin_line": 2588,
        "end_line": 2592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001141552511415525,
            "pseudo_dstar_susp": 0.0007142857142857143,
            "pseudo_tarantula_susp": 0.0012422360248447205,
            "pseudo_op2_susp": 0.0007142857142857143,
            "pseudo_barinel_susp": 0.0012422360248447205
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock._can_hold_element#2650",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock._can_hold_element(self, element: Any)",
        "snippet": "    def _can_hold_element(self, element: Any) -> bool:\n        return True",
        "begin_line": 2650,
        "end_line": 2651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.ObjectBlock.should_store#2653",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.ObjectBlock",
        "signature": "pandas.core.internals.blocks.ObjectBlock.should_store(self, value)",
        "snippet": "    def should_store(self, value) -> bool:\n        return not (\n            issubclass(\n                value.dtype.type,\n                (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),\n            )\n            or is_extension_array_dtype(value)\n        )",
        "begin_line": 2653,
        "end_line": 2660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.CategoricalBlock.__init__#2892",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks.CategoricalBlock",
        "signature": "pandas.core.internals.blocks.CategoricalBlock.__init__(self, values, placement, ndim=None)",
        "snippet": "    def __init__(self, values, placement, ndim=None):\n        # coerce to categorical if we can\n        values = extract_array(values)\n        assert isinstance(values, Categorical), type(values)\n        super().__init__(values, placement=placement, ndim=ndim)",
        "begin_line": 2892,
        "end_line": 2896,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.blocks.get_block_type#2965",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.get_block_type(values, dtype=None)",
        "snippet": "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
        "begin_line": 2965,
        "end_line": 3008,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.0041841004184100415,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0041841004184100415,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.internals.blocks.make_block#3011",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks.make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "snippet": "def make_block(values, placement, klass=None, ndim=None, dtype=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
        "begin_line": 3011,
        "end_line": 3031,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0037735849056603774,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.internals.blocks._extend_blocks#3037",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._extend_blocks(result, blocks=None)",
        "snippet": "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, given the result \"\"\"\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    else:\n        assert isinstance(result, Block), type(result)\n        blocks.append(result)\n    return blocks",
        "begin_line": 3037,
        "end_line": 3050,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0036496350364963502,
            "pseudo_dstar_susp": 0.009615384615384616,
            "pseudo_tarantula_susp": 0.002976190476190476,
            "pseudo_op2_susp": 0.009615384615384616,
            "pseudo_barinel_susp": 0.002976190476190476
        }
    },
    {
        "name": "pandas.core.internals.blocks._block_shape#3053",
        "src_path": "pandas/core/internals/blocks.py",
        "class_name": "pandas.core.internals.blocks",
        "signature": "pandas.core.internals.blocks._block_shape(values, ndim=1, shape=None)",
        "snippet": "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
        "begin_line": 3053,
        "end_line": 3063,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.console.get_console_size#8",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.get_console_size()",
        "snippet": "def get_console_size():\n    \"\"\"\n    Return console size as tuple = (width, height).\n\n    Returns (None,None) in non-interactive session.\n    \"\"\"\n    from pandas import get_option\n\n    display_width = get_option(\"display.width\")\n    display_height = get_option(\"display.max_rows\")\n\n    # Consider\n    # interactive shell terminal, can detect term size\n    # interactive non-shell terminal (ipnb/ipqtconsole), cannot detect term\n    # size non-interactive script, should disregard term size\n\n    # in addition\n    # width,height have default values, but setting to 'None' signals\n    # should use Auto-Detection, But only in interactive shell-terminal.\n    # Simple. yeah.\n\n    if in_interactive_session():\n        if in_ipython_frontend():\n            # sane defaults for interactive non-shell terminal\n            # match default for width,height in config_init\n            from pandas._config.config import get_default_val\n\n            terminal_width = get_default_val(\"display.width\")\n            terminal_height = get_default_val(\"display.max_rows\")\n        else:\n            # pure terminal\n            terminal_width, terminal_height = get_terminal_size()\n    else:\n        terminal_width, terminal_height = None, None\n\n    # Note if the User sets width/Height to None (auto-detection)\n    # and we're in a script (non-inter), this will return (None,None)\n    # caller needs to deal.\n    return (display_width or terminal_width, display_height or terminal_height)",
        "begin_line": 8,
        "end_line": 46,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.io.formats.console.in_interactive_session#53",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.in_interactive_session()",
        "snippet": "def in_interactive_session():\n    \"\"\"\n    Check if we're running in an interactive shell.\n\n    Returns\n    -------\n    bool\n        True if running under python/ipython interactive shell.\n    \"\"\"\n    from pandas import get_option\n\n    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")\n\n    try:\n        return __IPYTHON__ or check_main()  # noqa\n    except NameError:\n        return check_main()",
        "begin_line": 53,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.io.formats.console.check_main#64",
        "src_path": "pandas/io/formats/console.py",
        "class_name": "pandas.io.formats.console",
        "signature": "pandas.io.formats.console.check_main()",
        "snippet": "    def check_main():\n        try:\n            import __main__ as main\n        except ModuleNotFoundError:\n            return get_option(\"mode.sim_interactive\")\n        return not hasattr(main, \"__file__\") or get_option(\"mode.sim_interactive\")",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002976190476190476,
            "pseudo_dstar_susp": 0.5,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.5,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.core.ops.dispatch.should_extension_dispatch#21",
        "src_path": "pandas/core/ops/dispatch.py",
        "class_name": "pandas.core.ops.dispatch",
        "signature": "pandas.core.ops.dispatch.should_extension_dispatch(left: ABCSeries, right: Any)",
        "snippet": "def should_extension_dispatch(left: ABCSeries, right: Any) -> bool:\n    \"\"\"\n    Identify cases where Series operation should use dispatch_to_extension_op.\n\n    Parameters\n    ----------\n    left : Series\n    right : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if (\n        is_extension_array_dtype(left.dtype)\n        or is_datetime64_dtype(left.dtype)\n        or is_timedelta64_dtype(left.dtype)\n    ):\n        return True\n\n    if not is_scalar(right) and is_extension_array_dtype(right):\n        # GH#22378 disallow scalar to exclude e.g. \"category\", \"Int64\"\n        return True\n\n    return False",
        "begin_line": 21,
        "end_line": 45,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays._ranges.generate_regular_range#15",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges.generate_regular_range(start: Timestamp, end: Timestamp, periods: int, freq: DateOffset)",
        "snippet": "def generate_regular_range(\n    start: Timestamp, end: Timestamp, periods: int, freq: DateOffset\n) -> Tuple[np.ndarray, str]:\n    \"\"\"\n    Generate a range of dates with the spans between dates described by\n    the given `freq` DateOffset.\n\n    Parameters\n    ----------\n    start : Timestamp or None\n        first point of produced date range\n    end : Timestamp or None\n        last point of produced date range\n    periods : int\n        number of periods in produced date range\n    freq : DateOffset\n        describes space between dates in produced date range\n\n    Returns\n    -------\n    ndarray[np.int64] representing nanosecond unix timestamps\n    \"\"\"\n    if isinstance(freq, Tick):\n        stride = freq.nanos\n        if periods is None:\n            b = Timestamp(start).value\n            # cannot just use e = Timestamp(end) + 1 because arange breaks when\n            # stride is too large, see GH10887\n            e = b + (Timestamp(end).value - b) // stride * stride + stride // 2 + 1\n            # end.tz == start.tz by this point due to _generate implementation\n            tz = start.tz\n        elif start is not None:\n            b = Timestamp(start).value\n            e = _generate_range_overflow_safe(b, periods, stride, side=\"start\")\n            tz = start.tz\n        elif end is not None:\n            e = Timestamp(end).value + stride\n            b = _generate_range_overflow_safe(e, periods, stride, side=\"end\")\n            tz = end.tz\n        else:\n            raise ValueError(\n                \"at least 'start' or 'end' should be specified \"\n                \"if a 'period' is given.\"\n            )\n\n        with np.errstate(over=\"raise\"):\n            # If the range is sufficiently large, np.arange may overflow\n            #  and incorrectly return an empty array if not caught.\n            try:\n                values = np.arange(b, e, stride, dtype=np.int64)\n            except FloatingPointError:\n                xdr = [b]\n                while xdr[-1] != e:\n                    xdr.append(xdr[-1] + stride)\n                values = np.array(xdr[:-1], dtype=np.int64)\n\n    else:\n        tz = None\n        # start and end should have the same timezone by this point\n        if start is not None:\n            tz = start.tz\n        elif end is not None:\n            tz = end.tz\n\n        xdr = generate_range(start=start, end=end, periods=periods, offset=freq)\n\n        values = np.array([x.value for x in xdr], dtype=np.int64)\n\n    return values, tz",
        "begin_line": 15,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe#86",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe(endpoint: int, periods: int, stride: int, side: str='start')",
        "snippet": "def _generate_range_overflow_safe(\n    endpoint: int, periods: int, stride: int, side: str = \"start\"\n) -> int:\n    \"\"\"\n    Calculate the second endpoint for passing to np.arange, checking\n    to avoid an integer overflow.  Catch OverflowError and re-raise\n    as OutOfBoundsDatetime.\n\n    Parameters\n    ----------\n    endpoint : int\n        nanosecond timestamp of the known endpoint of the desired range\n    periods : int\n        number of periods in the desired range\n    stride : int\n        nanoseconds between periods in the desired range\n    side : {'start', 'end'}\n        which end of the range `endpoint` refers to\n\n    Returns\n    -------\n    other_end : int\n\n    Raises\n    ------\n    OutOfBoundsDatetime\n    \"\"\"\n    # GH#14187 raise instead of incorrectly wrapping around\n    assert side in [\"start\", \"end\"]\n\n    i64max = np.uint64(np.iinfo(np.int64).max)\n    msg = f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n\n    with np.errstate(over=\"raise\"):\n        # if periods * strides cannot be multiplied within the *uint64* bounds,\n        #  we cannot salvage the operation by recursing, so raise\n        try:\n            addend = np.uint64(periods) * np.uint64(np.abs(stride))\n        except FloatingPointError as err:\n            raise OutOfBoundsDatetime(msg) from err\n\n    if np.abs(addend) <= i64max:\n        # relatively easy case without casting concerns\n        return _generate_range_overflow_safe_signed(endpoint, periods, stride, side)\n\n    elif (endpoint > 0 and side == \"start\" and stride > 0) or (\n        endpoint < 0 and side == \"end\" and stride > 0\n    ):\n        # no chance of not-overflowing\n        raise OutOfBoundsDatetime(msg)\n\n    elif side == \"end\" and endpoint > i64max and endpoint - stride <= i64max:\n        # in _generate_regular_range we added `stride` thereby overflowing\n        #  the bounds.  Adjust to fix this.\n        return _generate_range_overflow_safe(\n            endpoint - stride, periods - 1, stride, side\n        )\n\n    # split into smaller pieces\n    mid_periods = periods // 2\n    remaining = periods - mid_periods\n    assert 0 < remaining < periods, (remaining, periods, endpoint, stride)\n\n    midpoint = _generate_range_overflow_safe(endpoint, mid_periods, stride, side)\n    return _generate_range_overflow_safe(midpoint, remaining, stride, side)",
        "begin_line": 86,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed#153",
        "src_path": "pandas/core/arrays/_ranges.py",
        "class_name": "pandas.core.arrays._ranges",
        "signature": "pandas.core.arrays._ranges._generate_range_overflow_safe_signed(endpoint: int, periods: int, stride: int, side: str)",
        "snippet": "def _generate_range_overflow_safe_signed(\n    endpoint: int, periods: int, stride: int, side: str\n) -> int:\n    \"\"\"\n    A special case for _generate_range_overflow_safe where `periods * stride`\n    can be calculated without overflowing int64 bounds.\n    \"\"\"\n    assert side in [\"start\", \"end\"]\n    if side == \"end\":\n        stride *= -1\n\n    with np.errstate(over=\"raise\"):\n        addend = np.int64(periods) * np.int64(stride)\n        try:\n            # easy case with no overflows\n            return np.int64(endpoint) + addend\n        except (FloatingPointError, OverflowError):\n            # with endpoint negative and addend positive we risk\n            #  FloatingPointError; with reversed signed we risk OverflowError\n            pass\n\n        # if stride and endpoint had opposite signs, then endpoint + addend\n        #  should never overflow.  so they must have the same signs\n        assert (stride > 0 and endpoint >= 0) or (stride < 0 and endpoint <= 0)\n\n        if stride > 0:\n            # watch out for very special case in which we just slightly\n            #  exceed implementation bounds, but when passing the result to\n            #  np.arange will get a result slightly within the bounds\n            result = np.uint64(endpoint) + np.uint64(addend)\n            i64max = np.uint64(np.iinfo(np.int64).max)\n            assert result > i64max\n            if result <= i64max + np.uint64(stride):\n                return result\n\n    raise OutOfBoundsDatetime(\n        f\"Cannot generate range with {side}={endpoint} and periods={periods}\"\n    )",
        "begin_line": 153,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.rule_code#455",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.rule_code(self)",
        "snippet": "    def rule_code(self) -> str:\n        return self._prefix",
        "begin_line": 455,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.DateOffset.freqstr#459",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.DateOffset",
        "signature": "pandas.tseries.offsets.DateOffset.freqstr(self)",
        "snippet": "    def freqstr(self) -> str:\n        try:\n            code = self.rule_code\n        except NotImplementedError:\n            return repr(self)\n\n        if self.n != 1:\n            fstr = f\"{self.n}{code}\"\n        else:\n            fstr = code\n\n        try:\n            if self._offset:\n                fstr += self._offset_str()\n        except AttributeError:\n            # TODO: standardize `_offset` vs `offset` naming convention\n            pass\n\n        return fstr",
        "begin_line": 459,
        "end_line": 477,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__init__#2534",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__init__(self, n=1, normalize=False)",
        "snippet": "    def __init__(self, n=1, normalize=False):\n        BaseOffset.__init__(self, n, normalize)\n        if normalize:\n            raise ValueError(\n                \"Tick offset with `normalize=True` are not allowed.\"\n            )  # GH#21427",
        "begin_line": 2534,
        "end_line": 2539,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.__ne__#2585",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.__ne__(self, other)",
        "snippet": "    def __ne__(self, other):\n        if isinstance(other, str):\n            from pandas.tseries.frequencies import to_offset\n\n            try:\n                # GH#23524 if to_offset fails, we are dealing with an\n                #  incomparable type so == is False and != is True\n                other = to_offset(other)\n            except ValueError:\n                # e.g. \"infer\"\n                return True\n\n        if isinstance(other, Tick):\n            return self.delta != other.delta\n        else:\n            return True",
        "begin_line": 2585,
        "end_line": 2600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.delta#2603",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.delta(self)",
        "snippet": "    def delta(self) -> Timedelta:\n        return self.n * self._inc",
        "begin_line": 2603,
        "end_line": 2604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.offsets.Tick.nanos#2607",
        "src_path": "pandas/tseries/offsets.py",
        "class_name": "pandas.tseries.offsets.Tick",
        "signature": "pandas.tseries.offsets.Tick.nanos(self)",
        "snippet": "    def nanos(self):\n        return delta_to_nanoseconds(self.delta)",
        "begin_line": 2607,
        "end_line": 2608,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__str__#91",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        return self.name",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0625,
            "pseudo_dstar_susp": 0.01694915254237288,
            "pseudo_tarantula_susp": 0.0043859649122807015,
            "pseudo_op2_susp": 0.01694915254237288,
            "pseudo_barinel_susp": 0.0043859649122807015
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__eq__#94",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        \"\"\"\n        Check whether 'other' is equal to self.\n\n        By default, 'other' is considered equal if either\n\n        * it's a string matching 'self.name'.\n        * it's an instance of this type and all of the\n          the attributes in ``self._metadata`` are equal between\n          `self` and `other`.\n\n        Parameters\n        ----------\n        other : Any\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n        if isinstance(other, type(self)):\n            return all(\n                getattr(self, attr) == getattr(other, attr) for attr in self._metadata\n            )\n        return False",
        "begin_line": 94,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.__ne__#127",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.__ne__(self, other: Any)",
        "snippet": "    def __ne__(self, other: Any) -> bool:\n        return not self.__eq__(other)",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string#200",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str):\n        r\"\"\"\n        Construct this type from a string.\n\n        This is useful mainly for data types that accept parameters.\n        For example, a period dtype accepts a frequency parameter that\n        can be set as ``period[H]`` (where H means hourly frequency).\n\n        By default, in the abstract class, just the name of the type is\n        expected. But subclasses can overwrite this method to accept\n        parameters.\n\n        Parameters\n        ----------\n        string : str\n            The name of the type, for example ``category``.\n\n        Returns\n        -------\n        ExtensionDtype\n            Instance of the dtype.\n\n        Raises\n        ------\n        TypeError\n            If a class cannot be constructed from this 'string'.\n\n        Examples\n        --------\n        For extension dtypes with arguments the following may be an\n        adequate implementation.\n\n        >>> @classmethod\n        ... def construct_from_string(cls, string):\n        ...     pattern = re.compile(r\"^my_type\\[(?P<arg_name>.+)\\]$\")\n        ...     match = pattern.match(string)\n        ...     if match:\n        ...         return cls(**match.groupdict())\n        ...     else:\n        ...         raise TypeError(\n        ...             f\"Cannot construct a '{cls.__name__}' from '{string}'\"\n        ...         )\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        # error: Non-overlapping equality check (left operand type: \"str\", right\n        #  operand type: \"Callable[[ExtensionDtype], str]\")  [comparison-overlap]\n        assert isinstance(cls.name, str), (cls, type(cls.name))\n        if string != cls.name:\n            raise TypeError(f\"Cannot construct a '{cls.__name__}' from '{string}'\")\n        return cls()",
        "begin_line": 200,
        "end_line": 252,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype.is_dtype#255",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype.is_dtype(cls, dtype: object)",
        "snippet": "    def is_dtype(cls, dtype: object) -> bool:\n        \"\"\"\n        Check if we match 'dtype'.\n\n        Parameters\n        ----------\n        dtype : object\n            The object to check.\n\n        Returns\n        -------\n        bool\n\n        Notes\n        -----\n        The default implementation is True if\n\n        1. ``cls.construct_from_string(dtype)`` is an instance\n           of ``cls``.\n        2. ``dtype`` is an object and is an instance of ``cls``\n        3. ``dtype`` has a ``dtype`` attribute, and any of the above\n           conditions is true for ``dtype.dtype``.\n        \"\"\"\n        dtype = getattr(dtype, \"dtype\", dtype)\n\n        if isinstance(dtype, (ABCSeries, ABCIndexClass, ABCDataFrame, np.dtype)):\n            # https://github.com/pandas-dev/pandas/issues/22960\n            # avoid passing data to `construct_from_string`. This could\n            # cause a FutureWarning from numpy about failing elementwise\n            # comparison from, e.g., comparing DataFrame == 'category'.\n            return False\n        elif dtype is None:\n            return False\n        elif isinstance(dtype, cls):\n            return True\n        if isinstance(dtype, str):\n            try:\n                return cls.construct_from_string(dtype) is not None\n            except TypeError:\n                return False\n        return False",
        "begin_line": 255,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001597444089456869,
            "pseudo_dstar_susp": 0.004739336492890996,
            "pseudo_tarantula_susp": 0.001098901098901099,
            "pseudo_op2_susp": 0.004739336492890996,
            "pseudo_barinel_susp": 0.001098901098901099
        }
    },
    {
        "name": "pandas.core.dtypes.base.ExtensionDtype._is_boolean#309",
        "src_path": "pandas/core/dtypes/base.py",
        "class_name": "pandas.core.dtypes.base.ExtensionDtype",
        "signature": "pandas.core.dtypes.base.ExtensionDtype._is_boolean(self)",
        "snippet": "    def _is_boolean(self) -> bool:\n        \"\"\"\n        Whether this dtype should be considered boolean.\n\n        By default, ExtensionDtypes are assumed to be non-numeric.\n        Setting this to True will affect the behavior of several places,\n        e.g.\n\n        * is_bool\n        * boolean indexing\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return False",
        "begin_line": 309,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_convert_platform#79",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_convert_platform(values)",
        "snippet": "def maybe_convert_platform(values):\n    \"\"\" try to do platform conversion, allow ndarray or list here \"\"\"\n    if isinstance(values, (list, tuple, range)):\n        values = construct_1d_object_array_from_listlike(values)\n    if getattr(values, \"dtype\", None) == np.object_:\n        if hasattr(values, \"_values\"):\n            values = values._values\n        values = lib.maybe_convert_objects(values)\n\n    return values",
        "begin_line": 79,
        "end_line": 88,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007524454477050414,
            "pseudo_dstar_susp": 0.0006626905235255136,
            "pseudo_tarantula_susp": 0.0009970089730807576,
            "pseudo_op2_susp": 0.0006626905235255136,
            "pseudo_barinel_susp": 0.0009970089730807576
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_to_dtype#107",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_to_dtype(result, dtype)",
        "snippet": "def maybe_downcast_to_dtype(result, dtype):\n    \"\"\"\n    try to cast to the specified dtype (e.g. convert back to bool/int\n    or could be an astype of float64->float32\n    \"\"\"\n    do_round = False\n\n    if is_scalar(result):\n        return result\n    elif isinstance(result, ABCDataFrame):\n        # occurs in pivot_table doctest\n        return result\n\n    if isinstance(dtype, str):\n        if dtype == \"infer\":\n            inferred_type = lib.infer_dtype(ensure_object(result.ravel()), skipna=False)\n            if inferred_type == \"boolean\":\n                dtype = \"bool\"\n            elif inferred_type == \"integer\":\n                dtype = \"int64\"\n            elif inferred_type == \"datetime64\":\n                dtype = \"datetime64[ns]\"\n            elif inferred_type == \"timedelta64\":\n                dtype = \"timedelta64[ns]\"\n\n            # try to upcast here\n            elif inferred_type == \"floating\":\n                dtype = \"int64\"\n                if issubclass(result.dtype.type, np.number):\n                    do_round = True\n\n            else:\n                dtype = \"object\"\n\n        dtype = np.dtype(dtype)\n\n    converted = maybe_downcast_numeric(result, dtype, do_round)\n    if converted is not result:\n        return converted\n\n    # a datetimelike\n    # GH12821, iNaT is casted to float\n    if dtype.kind in [\"M\", \"m\"] and result.dtype.kind in [\"i\", \"f\"]:\n        if hasattr(dtype, \"tz\"):\n            # not a numpy dtype\n            if dtype.tz:\n                # convert to datetime and change timezone\n                from pandas import to_datetime\n\n                result = to_datetime(result).tz_localize(\"utc\")\n                result = result.tz_convert(dtype.tz)\n        else:\n            result = result.astype(dtype)\n\n    elif dtype.type is Period:\n        # TODO(DatetimeArray): merge with previous elif\n        from pandas.core.arrays import PeriodArray\n\n        try:\n            return PeriodArray(result, freq=dtype.freq)\n        except TypeError:\n            # e.g. TypeError: int() argument must be a string, a\n            #  bytes-like object or a number, not 'Period\n            pass\n\n    return result",
        "begin_line": 107,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_downcast_numeric#175",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_downcast_numeric(result, dtype, do_round: bool=False)",
        "snippet": "def maybe_downcast_numeric(result, dtype, do_round: bool = False):\n    \"\"\"\n    Subset of maybe_downcast_to_dtype restricted to numeric dtypes.\n\n    Parameters\n    ----------\n    result : ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    do_round : bool\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    if not isinstance(dtype, np.dtype):\n        # e.g. SparseDtype has no itemsize attr\n        return result\n\n    if isinstance(result, list):\n        # reached via groupoby.agg _ohlc; really this should be handled\n        #  earlier\n        result = np.array(result)\n\n    def trans(x):\n        if do_round:\n            return x.round()\n        return x\n\n    if dtype.kind == result.dtype.kind:\n        # don't allow upcasts here (except if empty)\n        if result.dtype.itemsize <= dtype.itemsize and result.size:\n            return result\n\n    if is_bool_dtype(dtype) or is_integer_dtype(dtype):\n\n        if not result.size:\n            # if we don't have any elements, just astype it\n            return trans(result).astype(dtype)\n\n        # do a test on the first element, if it fails then we are done\n        r = result.ravel()\n        arr = np.array([r[0]])\n\n        if isna(arr).any():\n            # if we have any nulls, then we are done\n            return result\n\n        elif not isinstance(r[0], (np.integer, np.floating, np.bool, int, float, bool)):\n            # a comparable, e.g. a Decimal may slip in here\n            return result\n\n        if (\n            issubclass(result.dtype.type, (np.object_, np.number))\n            and notna(result).all()\n        ):\n            new_result = trans(result).astype(dtype)\n            if new_result.dtype.kind == \"O\" or result.dtype.kind == \"O\":\n                # np.allclose may raise TypeError on object-dtype\n                if (new_result == result).all():\n                    return new_result\n            else:\n                if np.allclose(new_result, result, rtol=0):\n                    return new_result\n\n    elif (\n        issubclass(dtype.type, np.floating)\n        and not is_bool_dtype(result.dtype)\n        and not is_string_dtype(result.dtype)\n    ):\n        return result.astype(dtype)\n\n    return result",
        "begin_line": 175,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.trans#198",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.trans(x)",
        "snippet": "    def trans(x):\n        if do_round:\n            return x.round()\n        return x",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_promote#355",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_promote(dtype, fill_value=np.nan)",
        "snippet": "def maybe_promote(dtype, fill_value=np.nan):\n    \"\"\"\n    Find the minimal dtype that can hold both the given dtype and fill_value.\n\n    Parameters\n    ----------\n    dtype : np.dtype or ExtensionDtype\n    fill_value : scalar, default np.nan\n\n    Returns\n    -------\n    dtype\n        Upcasted from dtype argument if necessary.\n    fill_value\n        Upcasted from fill_value argument if necessary.\n    \"\"\"\n    if not is_scalar(fill_value) and not is_object_dtype(dtype):\n        # with object dtype there is nothing to promote, and the user can\n        #  pass pretty much any weird fill_value they like\n        raise ValueError(\"fill_value must be a scalar\")\n\n    # if we passed an array here, determine the fill value by dtype\n    if isinstance(fill_value, np.ndarray):\n        if issubclass(fill_value.dtype.type, (np.datetime64, np.timedelta64)):\n            fill_value = fill_value.dtype.type(\"NaT\", \"ns\")\n        else:\n\n            # we need to change to object type as our\n            # fill_value is of object type\n            if fill_value.dtype == np.object_:\n                dtype = np.dtype(np.object_)\n            fill_value = np.nan\n\n        if dtype == np.object_ or dtype.kind in [\"U\", \"S\"]:\n            # We treat string-like dtypes as object, and _always_ fill\n            #  with np.nan\n            fill_value = np.nan\n            dtype = np.dtype(np.object_)\n\n    # returns tuple of (dtype, fill_value)\n    if issubclass(dtype.type, np.datetime64):\n        if isinstance(fill_value, datetime) and fill_value.tzinfo is not None:\n            # Trying to insert tzaware into tznaive, have to cast to object\n            dtype = np.dtype(np.object_)\n        elif is_integer(fill_value) or (is_float(fill_value) and not isna(fill_value)):\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fill_value = tslibs.Timestamp(fill_value).to_datetime64()\n            except (TypeError, ValueError):\n                dtype = np.dtype(np.object_)\n    elif issubclass(dtype.type, np.timedelta64):\n        if (\n            is_integer(fill_value)\n            or (is_float(fill_value) and not np.isnan(fill_value))\n            or isinstance(fill_value, str)\n        ):\n            # TODO: What about str that can be a timedelta?\n            dtype = np.dtype(np.object_)\n        else:\n            try:\n                fv = tslibs.Timedelta(fill_value)\n            except ValueError:\n                dtype = np.dtype(np.object_)\n            else:\n                if fv is NaT:\n                    # NaT has no `to_timedelta64` method\n                    fill_value = np.timedelta64(\"NaT\", \"ns\")\n                else:\n                    fill_value = fv.to_timedelta64()\n    elif is_datetime64tz_dtype(dtype):\n        if isna(fill_value):\n            fill_value = NaT\n        elif not isinstance(fill_value, datetime):\n            dtype = np.dtype(np.object_)\n        elif fill_value.tzinfo is None:\n            dtype = np.dtype(np.object_)\n        elif not tz_compare(fill_value.tzinfo, dtype.tz):\n            # TODO: sure we want to cast here?\n            dtype = np.dtype(np.object_)\n\n    elif is_extension_array_dtype(dtype) and isna(fill_value):\n        fill_value = dtype.na_value\n\n    elif is_float(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            dtype = np.dtype(np.float64)\n\n        elif dtype.kind == \"f\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.float64 and dtype is np.float32\n                dtype = mst\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n    elif is_bool(fill_value):\n        if not issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n    elif is_integer(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, np.integer):\n            if not np.can_cast(fill_value, dtype):\n                # upcast to prevent overflow\n                mst = np.min_scalar_type(fill_value)\n                dtype = np.promote_types(dtype, mst)\n                if dtype.kind == \"f\":\n                    # Case where we disagree with numpy\n                    dtype = np.dtype(np.object_)\n\n    elif is_complex(fill_value):\n        if issubclass(dtype.type, np.bool_):\n            dtype = np.dtype(np.object_)\n\n        elif issubclass(dtype.type, (np.integer, np.floating)):\n            mst = np.min_scalar_type(fill_value)\n            dtype = np.promote_types(dtype, mst)\n\n        elif dtype.kind == \"c\":\n            mst = np.min_scalar_type(fill_value)\n            if mst > dtype:\n                # e.g. mst is np.complex128 and dtype is np.complex64\n                dtype = mst\n\n    elif fill_value is None:\n        if is_float_dtype(dtype) or is_complex_dtype(dtype):\n            fill_value = np.nan\n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n            fill_value = np.nan\n        elif is_datetime_or_timedelta_dtype(dtype):\n            fill_value = dtype.type(\"NaT\", \"ns\")\n        else:\n            dtype = np.dtype(np.object_)\n            fill_value = np.nan\n    else:\n        dtype = np.dtype(np.object_)\n\n    # in case we have a string that looked like a number\n    if is_extension_array_dtype(dtype):\n        pass\n    elif issubclass(np.dtype(dtype).type, (bytes, str)):\n        dtype = np.dtype(np.object_)\n\n    fill_value = _ensure_dtype_type(fill_value, dtype)\n    return dtype, fill_value",
        "begin_line": 355,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast._ensure_dtype_type#511",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast._ensure_dtype_type(value, dtype)",
        "snippet": "def _ensure_dtype_type(value, dtype):\n    \"\"\"\n    Ensure that the given value is an instance of the given dtype.\n\n    e.g. if out dtype is np.complex64, we should have an instance of that\n    as opposed to a python complex object.\n\n    Parameters\n    ----------\n    value : object\n    dtype : np.dtype or ExtensionDtype\n\n    Returns\n    -------\n    object\n    \"\"\"\n    # Start with exceptions in which we do _not_ cast to numpy types\n    if is_extension_array_dtype(dtype):\n        return value\n    elif dtype == np.object_:\n        return value\n    elif isna(value):\n        # e.g. keep np.nan rather than try to cast to np.float32(np.nan)\n        return value\n\n    return dtype.type(value)",
        "begin_line": 511,
        "end_line": 536,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.infer_dtype_from_scalar#556",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.infer_dtype_from_scalar(val, pandas_dtype: bool=False)",
        "snippet": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \"\"\"\n    Interpret the dtype from a scalar.\n\n    Parameters\n    ----------\n    pandas_dtype : bool, default False\n        whether to infer dtype including pandas extension types.\n        If False, scalar belongs to pandas extension types is inferred as\n        object\n    \"\"\"\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n        elif lib.is_interval(val):\n            subtype = infer_dtype_from_scalar(val.left, pandas_dtype=True)[0]\n            dtype = IntervalDtype(subtype=subtype)\n\n    return dtype, val",
        "begin_line": 556,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.coerce_indexer_dtype#763",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.coerce_indexer_dtype(indexer, categories)",
        "snippet": "def coerce_indexer_dtype(indexer, categories):\n    \"\"\" coerce the indexer input array to the smallest dtype possible \"\"\"\n    length = len(categories)\n    if length < _int8_max:\n        return ensure_int8(indexer)\n    elif length < _int16_max:\n        return ensure_int16(indexer)\n    elif length < _int32_max:\n        return ensure_int32(indexer)\n    return ensure_int64(indexer)",
        "begin_line": 763,
        "end_line": 772,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016079755587715066,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.astype_nansafe#805",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.astype_nansafe(arr, dtype, copy: bool=True, skipna: bool=False)",
        "snippet": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    \"\"\"\n    Cast the elements of an array to a given dtype a nan-safe manner.\n\n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n\n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    \"\"\"\n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n\n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n\n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n\n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslib.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        # allow frequency conversions\n        if dtype.kind == \"M\":\n            return arr.astype(dtype)\n\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n\n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return tslibs.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            if isna(arr).any():\n                raise ValueError(\"Cannot convert NaT values to integer\")\n            return arr.view(dtype)\n\n        if dtype not in [_INT64_DTYPE, _TD_DTYPE]:\n\n            # allow frequency conversions\n            # we return a float here!\n            if dtype.kind == \"m\":\n                mask = isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n\n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n\n    elif is_object_dtype(arr):\n\n        # work around NumPy brokenness, #1987\n        if np.issubdtype(dtype.type, np.integer):\n            return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n\n        elif is_datetime64_dtype(dtype):\n            from pandas import to_datetime\n\n            return astype_nansafe(to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            from pandas import to_timedelta\n\n            return astype_nansafe(to_timedelta(arr).values, dtype, copy=copy)\n\n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (\n            f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n            f\"'{dtype.name}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n\n    return arr.view(dtype)",
        "begin_line": 805,
        "end_line": 904,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_castable#1092",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_castable(arr)",
        "snippet": "def maybe_castable(arr) -> bool:\n    # return False to force a non-fastpath\n\n    # check datetime64[ns]/timedelta64[ns] are valid\n    # otherwise try to coerce\n    kind = arr.dtype.kind\n    if kind == \"M\":\n        return is_datetime64_ns_dtype(arr.dtype)\n    elif kind == \"m\":\n        return is_timedelta64_ns_dtype(arr.dtype)\n\n    return arr.dtype.name not in _POSSIBLY_CAST_DTYPES",
        "begin_line": 1092,
        "end_line": 1103,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016431153466973383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike#1106",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value, convert_dates: bool=False)",
        "snippet": "def maybe_infer_to_datetimelike(value, convert_dates: bool = False):\n    \"\"\"\n    we might have a array (or single object) that is datetime like,\n    and no dtype is passed don't change the value unless we find a\n    datetime/timedelta set\n\n    this is pretty strict in that a datetime/timedelta is REQUIRED\n    in addition to possible nulls/string likes\n\n    Parameters\n    ----------\n    value : np.array / Series / Index / list-like\n    convert_dates : bool, default False\n       if True try really hard to convert dates (such as datetime.date), other\n       leave inferred dtype 'date' alone\n\n    \"\"\"\n    # TODO: why not timedelta?\n    if isinstance(\n        value, (ABCDatetimeIndex, ABCPeriodIndex, ABCDatetimeArray, ABCPeriodArray)\n    ):\n        return value\n    elif isinstance(value, ABCSeries):\n        if isinstance(value._values, ABCDatetimeIndex):\n            return value._values\n\n    v = value\n\n    if not is_list_like(v):\n        v = [v]\n    v = np.array(v, copy=False)\n\n    # we only care about object dtypes\n    if not is_object_dtype(v):\n        return value\n\n    shape = v.shape\n    if not v.ndim == 1:\n        v = v.ravel()\n\n    if not len(v):\n        return value\n\n    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)\n\n    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)\n\n    inferred_type = lib.infer_datetimelike_array(ensure_object(v))\n\n    if inferred_type == \"date\" and convert_dates:\n        value = try_datetime(v)\n    elif inferred_type == \"datetime\":\n        value = try_datetime(v)\n    elif inferred_type == \"timedelta\":\n        value = try_timedelta(v)\n    elif inferred_type == \"nat\":\n\n        # if all NaT, return as datetime\n        if isna(v).all():\n            value = try_datetime(v)\n        else:\n\n            # We have at least a NaT and a string\n            # try timedelta first to avoid spurious datetime conversions\n            # e.g. '00:00:01' is a timedelta but technically is also a datetime\n            value = try_timedelta(v)\n            if lib.infer_dtype(value, skipna=False) in [\"mixed\"]:\n                # cannot skip missing values, as NaT implies that the string\n                # is actually a datetime\n                value = try_datetime(v)\n\n    return value",
        "begin_line": 1106,
        "end_line": 1211,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_datetime#1149",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_datetime(v)",
        "snippet": "    def try_datetime(v):\n        # safe coerce to datetime64\n        try:\n            # GH19671\n            v = tslib.array_to_datetime(v, require_iso8601=True, errors=\"raise\")[0]\n        except ValueError:\n\n            # we might have a sequence of the same-datetimes with tz's\n            # if so coerce to a DatetimeIndex; if they are not the same,\n            # then these stay as object dtype, xref GH19671\n            from pandas._libs.tslibs import conversion\n            from pandas import DatetimeIndex\n\n            try:\n\n                values, tz = conversion.datetime_to_datetime64(v)\n                return DatetimeIndex(values).tz_localize(\"UTC\").tz_convert(tz=tz)\n            except (ValueError, TypeError):\n                pass\n\n        except Exception:\n            pass\n\n        return v.reshape(shape)",
        "begin_line": 1149,
        "end_line": 1172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.try_timedelta#1174",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.try_timedelta(v)",
        "snippet": "    def try_timedelta(v):\n        # safe coerce to timedelta64\n\n        # will try first with a string & object conversion\n        from pandas import to_timedelta\n\n        try:\n            td_values = to_timedelta(v)\n        except ValueError:\n            return v.reshape(shape)\n        else:\n            return np.asarray(td_values).reshape(shape)",
        "begin_line": 1174,
        "end_line": 1185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017627357659086903,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_datetime#1214",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_datetime(value, dtype, errors: str='raise')",
        "snippet": "def maybe_cast_to_datetime(value, dtype, errors: str = \"raise\"):\n    \"\"\"\n    try to cast the array/value to a datetimelike dtype, converting float\n    nan to iNaT\n    \"\"\"\n    from pandas.core.tools.timedeltas import to_timedelta\n    from pandas.core.tools.datetimes import to_datetime\n\n    if dtype is not None:\n        if isinstance(dtype, str):\n            dtype = np.dtype(dtype)\n\n        is_datetime64 = is_datetime64_dtype(dtype)\n        is_datetime64tz = is_datetime64tz_dtype(dtype)\n        is_timedelta64 = is_timedelta64_dtype(dtype)\n\n        if is_datetime64 or is_datetime64tz or is_timedelta64:\n\n            # Force the dtype if needed.\n            msg = (\n                f\"The '{dtype.name}' dtype has no unit. \"\n                f\"Please pass in '{dtype.name}[ns]' instead.\"\n            )\n\n            if is_datetime64 and not is_dtype_equal(dtype, _NS_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"M8[ns]\"):\n                    if dtype.name == \"datetime64\":\n                        raise ValueError(msg)\n                    dtype = _NS_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert datetimelike to dtype [{dtype}]\")\n            elif is_datetime64tz:\n\n                # our NaT doesn't support tz's\n                # this will coerce to DatetimeIndex with\n                # a matching dtype below\n                if is_scalar(value) and isna(value):\n                    value = [value]\n\n            elif is_timedelta64 and not is_dtype_equal(dtype, _TD_DTYPE):\n\n                # pandas supports dtype whose granularity is less than [ns]\n                # e.g., [ps], [fs], [as]\n                if dtype <= np.dtype(\"m8[ns]\"):\n                    if dtype.name == \"timedelta64\":\n                        raise ValueError(msg)\n                    dtype = _TD_DTYPE\n                else:\n                    raise TypeError(f\"cannot convert timedeltalike to dtype [{dtype}]\")\n\n            if is_scalar(value):\n                if value == iNaT or isna(value):\n                    value = iNaT\n            else:\n                value = np.array(value, copy=False)\n\n                # have a scalar array-like (e.g. NaT)\n                if value.ndim == 0:\n                    value = iNaT\n\n                # we have an array of datetime or timedeltas & nulls\n                elif np.prod(value.shape) or not is_dtype_equal(value.dtype, dtype):\n                    try:\n                        if is_datetime64:\n                            value = to_datetime(value, errors=errors)\n                            # GH 25843: Remove tz information since the dtype\n                            # didn't specify one\n                            if value.tz is not None:\n                                value = value.tz_localize(None)\n                            value = value._values\n                        elif is_datetime64tz:\n                            # The string check can be removed once issue #13712\n                            # is solved. String data that is passed with a\n                            # datetime64tz is assumed to be naive which should\n                            # be localized to the timezone.\n                            is_dt_string = is_string_dtype(value)\n                            value = to_datetime(value, errors=errors).array\n                            if is_dt_string:\n                                # Strings here are naive, so directly localize\n                                value = value.tz_localize(dtype.tz)\n                            else:\n                                # Numeric values are UTC at this point,\n                                # so localize and convert\n                                value = value.tz_localize(\"UTC\").tz_convert(dtype.tz)\n                        elif is_timedelta64:\n                            value = to_timedelta(value, errors=errors)._values\n                    except OutOfBoundsDatetime:\n                        raise\n                    except (AttributeError, ValueError, TypeError):\n                        pass\n\n        # coerce datetimelike to object\n        elif is_datetime64_dtype(value) and not is_datetime64_dtype(dtype):\n            if is_object_dtype(dtype):\n                if value.dtype != _NS_DTYPE:\n                    value = value.astype(_NS_DTYPE)\n                ints = np.asarray(value).view(\"i8\")\n                return tslib.ints_to_pydatetime(ints)\n\n            # we have a non-castable dtype that was passed\n            raise TypeError(f\"Cannot cast datetime64 to {dtype}\")\n\n    else:\n\n        is_array = isinstance(value, np.ndarray)\n\n        # catch a datetime/timedelta that is not of ns variety\n        # and no coercion specified\n        if is_array and value.dtype.kind in [\"M\", \"m\"]:\n            dtype = value.dtype\n\n            if dtype.kind == \"M\" and dtype != _NS_DTYPE:\n                value = tslibs.conversion.ensure_datetime64ns(value)\n\n            elif dtype.kind == \"m\" and dtype != _TD_DTYPE:\n                value = to_timedelta(value)\n\n        # only do this if we have an array and the dtype of the array is not\n        # setup already we are not an integer/object, so don't bother with this\n        # conversion\n        elif not (\n            is_array\n            and not (\n                issubclass(value.dtype.type, np.integer) or value.dtype == np.object_\n            )\n        ):\n            value = maybe_infer_to_datetimelike(value)\n\n    return value",
        "begin_line": 1214,
        "end_line": 1345,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007942811755361397,
            "pseudo_dstar_susp": 0.0014347202295552368,
            "pseudo_tarantula_susp": 0.0008833922261484099,
            "pseudo_op2_susp": 0.0014347202295552368,
            "pseudo_barinel_susp": 0.0008833922261484099
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar#1422",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_arraylike_from_scalar(value, length: int, dtype)",
        "snippet": "def construct_1d_arraylike_from_scalar(value, length: int, dtype):\n    \"\"\"\n    create a np.ndarray / pandas type of specified shape and dtype\n    filled with values\n\n    Parameters\n    ----------\n    value : scalar value\n    length : int\n    dtype : pandas_dtype / np.dtype\n\n    Returns\n    -------\n    np.ndarray / pandas type of length, filled with value\n\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        cls = dtype.construct_array_type()\n        subarr = cls._from_sequence([value] * length, dtype=dtype)\n\n    else:\n        if not isinstance(dtype, (np.dtype, type(np.dtype))):\n            dtype = dtype.dtype\n\n        if length and is_integer_dtype(dtype) and isna(value):\n            # coerce if we have nan for an integer dtype\n            dtype = np.dtype(\"float64\")\n        elif isinstance(dtype, np.dtype) and dtype.kind in (\"U\", \"S\"):\n            # we need to coerce to object dtype to avoid\n            # to allow numpy to take our string as a scalar value\n            dtype = object\n            if not isna(value):\n                value = ensure_str(value)\n\n        subarr = np.empty(length, dtype=dtype)\n        subarr.fill(value)\n\n    return subarr",
        "begin_line": 1422,
        "end_line": 1459,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike#1462",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_object_array_from_listlike(values)",
        "snippet": "def construct_1d_object_array_from_listlike(values):\n    \"\"\"\n    Transform any list-like object in a 1-dimensional numpy array of object\n    dtype.\n\n    Parameters\n    ----------\n    values : any iterable which has a len()\n\n    Raises\n    ------\n    TypeError\n        * If `values` does not have a len()\n\n    Returns\n    -------\n    1-dimensional numpy array of dtype object\n    \"\"\"\n    # numpy will try to interpret nested lists as further dimensions, hence\n    # making a 1D array that contains list-likes is a bit tricky:\n    result = np.empty(len(values), dtype=\"object\")\n    result[:] = values\n    return result",
        "begin_line": 1462,
        "end_line": 1484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008952551477170994,
            "pseudo_dstar_susp": 0.00145985401459854,
            "pseudo_tarantula_susp": 0.000984251968503937,
            "pseudo_op2_susp": 0.00145985401459854,
            "pseudo_barinel_susp": 0.0009852216748768472
        }
    },
    {
        "name": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na#1487",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool=False)",
        "snippet": "def construct_1d_ndarray_preserving_na(values, dtype=None, copy: bool = False):\n    \"\"\"\n    Construct a new ndarray, coercing `values` to `dtype`, preserving NA.\n\n    Parameters\n    ----------\n    values : Sequence\n    dtype : numpy.dtype, optional\n    copy : bool, default False\n        Note that copies may still be made with ``copy=False`` if casting\n        is required.\n\n    Returns\n    -------\n    arr : ndarray[dtype]\n\n    Examples\n    --------\n    >>> np.array([1.0, 2.0, None], dtype='str')\n    array(['1.0', '2.0', 'None'], dtype='<U4')\n\n    >>> construct_1d_ndarray_preserving_na([1.0, 2.0, None], dtype=np.dtype('str'))\n    array(['1.0', '2.0', None], dtype=object)\n    \"\"\"\n    subarr = np.array(values, dtype=dtype, copy=copy)\n\n    if dtype is not None and dtype.kind in (\"U\", \"S\"):\n        # GH-21083\n        # We can't just return np.array(subarr, dtype='str') since\n        # NumPy will convert the non-string objects into strings\n        # Including NA values. Se we have to go\n        # string -> object -> update NA, which requires an\n        # additional pass over the data.\n        na_values = isna(values)\n        subarr2 = subarr.astype(object)\n        subarr2[na_values] = np.asarray(values, dtype=object)[na_values]\n        subarr = subarr2\n\n    return subarr",
        "begin_line": 1487,
        "end_line": 1525,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006090133982947625,
            "pseudo_dstar_susp": 0.0006305170239596469,
            "pseudo_tarantula_susp": 0.0006657789613848203,
            "pseudo_op2_susp": 0.0006305170239596469,
            "pseudo_barinel_susp": 0.0006657789613848203
        }
    },
    {
        "name": "pandas.core.dtypes.cast.maybe_cast_to_integer_array#1528",
        "src_path": "pandas/core/dtypes/cast.py",
        "class_name": "pandas.core.dtypes.cast",
        "signature": "pandas.core.dtypes.cast.maybe_cast_to_integer_array(arr, dtype, copy: bool=False)",
        "snippet": "def maybe_cast_to_integer_array(arr, dtype, copy: bool = False):\n    \"\"\"\n    Takes any dtype and returns the casted version, raising for when data is\n    incompatible with integer/unsigned integer dtypes.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    arr : array-like\n        The array to cast.\n    dtype : str, np.dtype\n        The integer dtype to cast the array to.\n    copy: bool, default False\n        Whether to make a copy of the array before returning.\n\n    Returns\n    -------\n    ndarray\n        Array of integer or unsigned integer dtype.\n\n    Raises\n    ------\n    OverflowError : the dtype is incompatible with the data\n    ValueError : loss of precision has occurred during casting\n\n    Examples\n    --------\n    If you try to coerce negative values to unsigned integers, it raises:\n\n    >>> pd.Series([-1], dtype=\"uint64\")\n    Traceback (most recent call last):\n        ...\n    OverflowError: Trying to coerce negative values to unsigned integers\n\n    Also, if you try to coerce float values to integers, it raises:\n\n    >>> pd.Series([1, 2, 3.5], dtype=\"int64\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Trying to coerce float values to integers\n    \"\"\"\n    try:\n        if not hasattr(arr, \"astype\"):\n            casted = np.array(arr, dtype=dtype, copy=copy)\n        else:\n            casted = arr.astype(dtype, copy=copy)\n    except OverflowError as err:\n        raise OverflowError(\n            \"The elements provided in the data cannot all be \"\n            f\"casted to the dtype {dtype}\"\n        ) from err\n\n    if np.array_equal(arr, casted):\n        return casted\n\n    # We do this casting to allow for proper\n    # data and dtype checking.\n    #\n    # We didn't do this earlier because NumPy\n    # doesn't handle `uint64` correctly.\n    arr = np.asarray(arr)\n\n    if is_unsigned_integer_dtype(dtype) and (arr < 0).any():\n        raise OverflowError(\"Trying to coerce negative values to unsigned integers\")\n\n    if is_integer_dtype(dtype) and (is_float_dtype(arr) or is_object_dtype(arr)):\n        raise ValueError(\"Trying to coerce float values to integers\")",
        "begin_line": 1528,
        "end_line": 1595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.0014492753623188406,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0014492753623188406,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.__new__#224",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls, data=None, freq=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        freq=None,\n        tz=None,\n        normalize=False,\n        closed=None,\n        ambiguous=\"raise\",\n        dayfirst=False,\n        yearfirst=False,\n        dtype=None,\n        copy=False,\n        name=None,\n    ):\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        name = maybe_extract_name(name, data, cls)\n\n        dtarr = DatetimeArray._from_sequence(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            freq=freq,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        subarr = cls._simple_new(dtarr, name=name)\n        return subarr",
        "begin_line": 224,
        "end_line": 261,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new#264",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls, values: DatetimeArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: DatetimeArray, name: Label = None):\n        assert isinstance(values, DatetimeArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result._reset_identity()\n        return result",
        "begin_line": 264,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote#541",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        if other.inferred_type == \"date\":\n            other = DatetimeIndex(other)\n        return self, other",
        "begin_line": 541,
        "end_line": 544,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type#716",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes.DatetimeIndex",
        "signature": "pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c datetime is represented as microseconds since the epoch, make\n        # sure we can't have ambiguous indexing\n        return \"datetime64\"",
        "begin_line": 716,
        "end_line": 719,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.datetimes.date_range#813",
        "src_path": "pandas/core/indexes/datetimes.py",
        "class_name": "pandas.core.indexes.datetimes",
        "signature": "pandas.core.indexes.datetimes.date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs)",
        "snippet": "def date_range(\n    start=None,\n    end=None,\n    periods=None,\n    freq=None,\n    tz=None,\n    normalize=False,\n    name=None,\n    closed=None,\n    **kwargs,\n) -> DatetimeIndex:\n    \"\"\"\n    Return a fixed frequency DatetimeIndex.\n\n    Parameters\n    ----------\n    start : str or datetime-like, optional\n        Left bound for generating dates.\n    end : str or datetime-like, optional\n        Right bound for generating dates.\n    periods : int, optional\n        Number of periods to generate.\n    freq : str or DateOffset, default 'D'\n        Frequency strings can have multiples, e.g. '5H'. See\n        :ref:`here <timeseries.offset_aliases>` for a list of\n        frequency aliases.\n    tz : str or tzinfo, optional\n        Time zone name for returning localized DatetimeIndex, for example\n        'Asia/Hong_Kong'. By default, the resulting DatetimeIndex is\n        timezone-naive.\n    normalize : bool, default False\n        Normalize start/end dates to midnight before generating date range.\n    name : str, default None\n        Name of the resulting DatetimeIndex.\n    closed : {None, 'left', 'right'}, optional\n        Make the interval closed with respect to the given frequency to\n        the 'left', 'right', or both sides (None, the default).\n    **kwargs\n        For compatibility. Has no effect on the result.\n\n    Returns\n    -------\n    rng : DatetimeIndex\n\n    See Also\n    --------\n    DatetimeIndex : An immutable container for datetimes.\n    timedelta_range : Return a fixed frequency TimedeltaIndex.\n    period_range : Return a fixed frequency PeriodIndex.\n    interval_range : Return a fixed frequency IntervalIndex.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``DatetimeIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end`` (closed on both sides).\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    **Specifying the values**\n\n    The next four examples generate the same `DatetimeIndex`, but vary\n    the combination of `start`, `end` and `periods`.\n\n    Specify `start` and `end`, with the default daily frequency.\n\n    >>> pd.date_range(start='1/1/2018', end='1/08/2018')\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(start='1/1/2018', periods=8)\n    DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n                   '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `end` and `periods`, the number of periods (days).\n\n    >>> pd.date_range(end='1/1/2018', periods=8)\n    DatetimeIndex(['2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n                   '2017-12-29', '2017-12-30', '2017-12-31', '2018-01-01'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Specify `start`, `end`, and `periods`; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.date_range(start='2018-04-24', end='2018-04-27', periods=3)\n    DatetimeIndex(['2018-04-24 00:00:00', '2018-04-25 12:00:00',\n                   '2018-04-27 00:00:00'],\n                  dtype='datetime64[ns]', freq=None)\n\n    **Other Parameters**\n\n    Changed the `freq` (frequency) to ``'M'`` (month end frequency).\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='M')\n    DatetimeIndex(['2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30',\n                   '2018-05-31'],\n                  dtype='datetime64[ns]', freq='M')\n\n    Multiples are allowed\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq='3M')\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    `freq` can also be specified as an Offset object.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, freq=pd.offsets.MonthEnd(3))\n    DatetimeIndex(['2018-01-31', '2018-04-30', '2018-07-31', '2018-10-31',\n                   '2019-01-31'],\n                  dtype='datetime64[ns]', freq='3M')\n\n    Specify `tz` to set the timezone.\n\n    >>> pd.date_range(start='1/1/2018', periods=5, tz='Asia/Tokyo')\n    DatetimeIndex(['2018-01-01 00:00:00+09:00', '2018-01-02 00:00:00+09:00',\n                   '2018-01-03 00:00:00+09:00', '2018-01-04 00:00:00+09:00',\n                   '2018-01-05 00:00:00+09:00'],\n                  dtype='datetime64[ns, Asia/Tokyo]', freq='D')\n\n    `closed` controls whether to include `start` and `end` that are on the\n    boundary. The default includes boundary points on either end.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed=None)\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='left'`` to exclude `end` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='left')\n    DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03'],\n                  dtype='datetime64[ns]', freq='D')\n\n    Use ``closed='right'`` to exclude `start` if it falls on the boundary.\n\n    >>> pd.date_range(start='2017-01-01', end='2017-01-04', closed='right')\n    DatetimeIndex(['2017-01-02', '2017-01-03', '2017-01-04'],\n                  dtype='datetime64[ns]', freq='D')\n    \"\"\"\n    if freq is None and com.any_none(periods, start, end):\n        freq = \"D\"\n\n    dtarr = DatetimeArray._generate_range(\n        start=start,\n        end=end,\n        periods=periods,\n        freq=freq,\n        tz=tz,\n        normalize=normalize,\n        closed=closed,\n        **kwargs,\n    )\n    return DatetimeIndex._simple_new(dtarr, name=name)",
        "begin_line": 813,
        "end_line": 973,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.__init__.get_op_result_name#97",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.get_op_result_name(left, right)",
        "snippet": "def get_op_result_name(left, right):\n    \"\"\"\n    Find the appropriate name to pin to an operation result.  This result\n    should always be either an Index or a Series.\n\n    Parameters\n    ----------\n    left : {Series, Index}\n    right : object\n\n    Returns\n    -------\n    name : object\n        Usually a string\n    \"\"\"\n    # `left` is always a Series when called from within ops\n    if isinstance(right, (ABCSeries, ABCIndexClass)):\n        name = _maybe_match_name(left, right)\n    else:\n        name = left.name\n    return name",
        "begin_line": 97,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.__init__._maybe_match_name#120",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._maybe_match_name(a, b)",
        "snippet": "def _maybe_match_name(a, b):\n    \"\"\"\n    Try to find a name to attach to the result of an operation between\n    a and b.  If only one of these has a `name` attribute, return that\n    name.  Otherwise return a consensus name if they match of None if\n    they have different names.\n\n    Parameters\n    ----------\n    a : object\n    b : object\n\n    Returns\n    -------\n    name : str or None\n\n    See Also\n    --------\n    pandas.core.common.consensus_name_attr\n    \"\"\"\n    a_has = hasattr(a, \"name\")\n    b_has = hasattr(b, \"name\")\n    if a_has and b_has:\n        if a.name == b.name:\n            return a.name\n        else:\n            # TODO: what if they both have np.nan for their names?\n            return None\n    elif a_has:\n        return a.name\n    elif b_has:\n        return b.name\n    return None",
        "begin_line": 120,
        "end_line": 152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.__init__._construct_result#448",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._construct_result(left: ABCSeries, result: ArrayLike, index: ABCIndexClass, name)",
        "snippet": "def _construct_result(\n    left: ABCSeries, result: ArrayLike, index: ABCIndexClass, name,\n):\n    \"\"\"\n    Construct an appropriately-labelled Series from the result of an op.\n\n    Parameters\n    ----------\n    left : Series\n    result : ndarray or ExtensionArray\n    index : Index\n    name : object\n\n    Returns\n    -------\n    Series\n        In the case of __divmod__ or __rdivmod__, a 2-tuple of Series.\n    \"\"\"\n    if isinstance(result, tuple):\n        # produced by divmod or rdivmod\n        return (\n            _construct_result(left, result[0], index=index, name=name),\n            _construct_result(left, result[1], index=index, name=name),\n        )\n\n    # We do not pass dtype to ensure that the Series constructor\n    #  does inference in the case where `result` has object-dtype.\n    out = left._constructor(result, index=index)\n    out = out.__finalize__(left)\n\n    # Set the result's name after __finalize__ is called because __finalize__\n    #  would set it back to self.name\n    out.name = name\n    return out",
        "begin_line": 448,
        "end_line": 481,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.__init__._comp_method_SERIES#508",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__._comp_method_SERIES(cls, op, special)",
        "snippet": "def _comp_method_SERIES(cls, op, special):\n    \"\"\"\n    Wrapper function for Series arithmetic operations, to avoid\n    code duplication.\n    \"\"\"\n    str_rep = _get_opstr(op)\n    op_name = _get_op_name(op, special)\n\n    @unpack_zerodim_and_defer(op_name)\n    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op, str_rep)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)\n\n    wrapper.__name__ = op_name\n    return wrapper",
        "begin_line": 508,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.__init__.wrapper#517",
        "src_path": "pandas/core/ops/__init__.py",
        "class_name": "pandas.core.ops.__init__",
        "signature": "pandas.core.ops.__init__.wrapper(self, other)",
        "snippet": "    def wrapper(self, other):\n\n        res_name = get_op_result_name(self, other)\n\n        if isinstance(other, ABCSeries) and not self._indexed_same(other):\n            raise ValueError(\"Can only compare identically-labeled Series objects\")\n\n        lvalues = extract_array(self, extract_numpy=True)\n        rvalues = extract_array(other, extract_numpy=True)\n\n        res_values = comparison_op(lvalues, rvalues, op, str_rep)\n\n        return _construct_result(self, res_values, index=self.index, name=res_name)",
        "begin_line": 517,
        "end_line": 529,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.internals.construction.arrays_to_mgr#56",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.arrays_to_mgr(arrays, arr_names, index, columns, dtype=None)",
        "snippet": "def arrays_to_mgr(arrays, arr_names, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    # figure out the index, if necessary\n    if index is None:\n        index = extract_index(arrays)\n    else:\n        index = ensure_index(index)\n\n    # don't force copy because getting jammed in an ndarray anyway\n    arrays = _homogenize(arrays, index, dtype)\n\n    # from BlockManager perspective\n    axes = [ensure_index(columns), index]\n\n    return create_block_manager_from_arrays(arrays, arr_names, axes)",
        "begin_line": 56,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002881844380403458,
            "pseudo_dstar_susp": 0.000992063492063492,
            "pseudo_tarantula_susp": 0.002976190476190476,
            "pseudo_op2_susp": 0.000992063492063492,
            "pseudo_barinel_susp": 0.002976190476190476
        }
    },
    {
        "name": "pandas.core.internals.construction.init_dict#212",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.init_dict(data, index, columns, dtype=None)",
        "snippet": "def init_dict(data, index, columns, dtype=None):\n    \"\"\"\n    Segregate Series based on type and coerce into matrices.\n    Needs to handle a lot of exceptional cases.\n    \"\"\"\n    if columns is not None:\n        from pandas.core.series import Series\n\n        arrays = Series(data, index=columns, dtype=object)\n        data_names = arrays.index\n\n        missing = arrays.isna()\n        if index is None:\n            # GH10856\n            # raise ValueError if only scalars in dict\n            index = extract_index(arrays[~missing])\n        else:\n            index = ensure_index(index)\n\n        # no obvious \"empty\" int column\n        if missing.any() and not is_integer_dtype(dtype):\n            if dtype is None or np.issubdtype(dtype, np.flexible):\n                # GH#1783\n                nan_dtype = object\n            else:\n                nan_dtype = dtype\n            val = construct_1d_arraylike_from_scalar(np.nan, len(index), nan_dtype)\n            arrays.loc[missing] = [val] * missing.sum()\n\n    else:\n        keys = list(data.keys())\n        columns = data_names = Index(keys)\n        arrays = (com.maybe_iterable_to_list(data[k]) for k in keys)\n        # GH#24096 need copy to be deep for datetime64tz case\n        # TODO: See if we can avoid these copies\n        arrays = [\n            arr if not isinstance(arr, ABCIndexClass) else arr._data for arr in arrays\n        ]\n        arrays = [\n            arr if not is_datetime64tz_dtype(arr) else arr.copy() for arr in arrays\n        ]\n    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)",
        "begin_line": 212,
        "end_line": 253,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002777777777777778,
            "pseudo_dstar_susp": 0.008547008547008548,
            "pseudo_tarantula_susp": 0.0022471910112359553,
            "pseudo_op2_susp": 0.008547008547008548,
            "pseudo_barinel_susp": 0.0022471910112359553
        }
    },
    {
        "name": "pandas.core.internals.construction._homogenize#299",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction._homogenize(data, index, dtype=None)",
        "snippet": "def _homogenize(data, index, dtype=None):\n    oindex = None\n    homogenized = []\n\n    for val in data:\n        if isinstance(val, ABCSeries):\n            if dtype is not None:\n                val = val.astype(dtype)\n            if val.index is not index:\n                # Forces alignment. No need to copy data since we\n                # are putting it into an ndarray later\n                val = val.reindex(index, copy=False)\n        else:\n            if isinstance(val, dict):\n                if oindex is None:\n                    oindex = index.astype(\"O\")\n\n                if isinstance(index, (ABCDatetimeIndex, ABCTimedeltaIndex)):\n                    val = com.dict_compat(val)\n                else:\n                    val = dict(val)\n                val = lib.fast_multiget(val, oindex.values, default=np.nan)\n            val = sanitize_array(\n                val, index, dtype=dtype, copy=False, raise_cast_failure=False\n            )\n\n        homogenized.append(val)\n\n    return homogenized",
        "begin_line": 299,
        "end_line": 327,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.0008748906386701663,
            "pseudo_tarantula_susp": 0.00205761316872428,
            "pseudo_op2_susp": 0.0008748906386701663,
            "pseudo_barinel_susp": 0.00205761316872428
        }
    },
    {
        "name": "pandas.core.internals.construction.extract_index#330",
        "src_path": "pandas/core/internals/construction.py",
        "class_name": "pandas.core.internals.construction",
        "signature": "pandas.core.internals.construction.extract_index(data)",
        "snippet": "def extract_index(data):\n    index = None\n    if len(data) == 0:\n        index = Index([])\n    elif len(data) > 0:\n        raw_lengths = []\n        indexes = []\n\n        have_raw_arrays = False\n        have_series = False\n        have_dicts = False\n\n        for val in data:\n            if isinstance(val, ABCSeries):\n                have_series = True\n                indexes.append(val.index)\n            elif isinstance(val, dict):\n                have_dicts = True\n                indexes.append(list(val.keys()))\n            elif is_list_like(val) and getattr(val, \"ndim\", 1) == 1:\n                have_raw_arrays = True\n                raw_lengths.append(len(val))\n\n        if not indexes and not raw_lengths:\n            raise ValueError(\"If using all scalar values, you must pass an index\")\n\n        if have_series:\n            index = union_indexes(indexes)\n        elif have_dicts:\n            index = union_indexes(indexes, sort=False)\n\n        if have_raw_arrays:\n            lengths = list(set(raw_lengths))\n            if len(lengths) > 1:\n                raise ValueError(\"arrays must all be same length\")\n\n            if have_dicts:\n                raise ValueError(\n                    \"Mixing dicts with non-Series may lead to ambiguous ordering.\"\n                )\n\n            if have_series:\n                if lengths[0] != len(index):\n                    msg = (\n                        f\"array length {lengths[0]} does not match index \"\n                        f\"length {len(index)}\"\n                    )\n                    raise ValueError(msg)\n            else:\n                index = ibase.default_index(lengths[0])\n\n    return ensure_index(index)",
        "begin_line": 330,
        "end_line": 381,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002881844380403458,
            "pseudo_dstar_susp": 0.000992063492063492,
            "pseudo_tarantula_susp": 0.002976190476190476,
            "pseudo_op2_susp": 0.000992063492063492,
            "pseudo_barinel_susp": 0.002976190476190476
        }
    },
    {
        "name": "pandas.core.indexers.is_list_like_indexer#52",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_list_like_indexer(key)",
        "snippet": "def is_list_like_indexer(key) -> bool:\n    \"\"\"\n    Check if we have a list-like indexer that is *not* a NamedTuple.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    # allow a list_like, but exclude NamedTuples which can be indexers\n    return is_list_like(key) and not (isinstance(key, tuple) and type(key) is not tuple)",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexers.is_scalar_indexer#68",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_scalar_indexer(indexer, arr_value)",
        "snippet": "def is_scalar_indexer(indexer, arr_value) -> bool:\n    \"\"\"\n    Return True if we are all scalar indexers.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n            return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 68,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexers.is_empty_indexer#83",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.is_empty_indexer(indexer, arr_value: np.ndarray)",
        "snippet": "def is_empty_indexer(indexer, arr_value: np.ndarray) -> bool:\n    \"\"\"\n    Check if we have an empty indexer.\n\n    Parameters\n    ----------\n    indexer : object\n    arr_value : np.ndarray\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if is_list_like(indexer) and not len(indexer):\n        return True\n    if arr_value.ndim == 1:\n        if not isinstance(indexer, tuple):\n            indexer = tuple([indexer])\n        return any(isinstance(idx, np.ndarray) and len(idx) == 0 for idx in indexer)\n    return False",
        "begin_line": 83,
        "end_line": 102,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexers.check_setitem_lengths#109",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_setitem_lengths(indexer, value, values)",
        "snippet": "def check_setitem_lengths(indexer, value, values) -> None:\n    \"\"\"\n    Validate that value and indexer are the same length.\n\n    An special-case is allowed for when the indexer is a boolean array\n    and the number of true values equals the length of ``value``. In\n    this case, no exception is raised.\n\n    Parameters\n    ----------\n    indexer : sequence\n        Key for the setitem.\n    value : array-like\n        Value for the setitem.\n    values : array-like\n        Values being set into.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    ValueError\n        When the indexer is an ndarray or list and the lengths don't match.\n    \"\"\"\n    # boolean with truth values == len of the value is ok too\n    if isinstance(indexer, (np.ndarray, list)):\n        if is_list_like(value) and len(indexer) != len(value):\n            if not (\n                isinstance(indexer, np.ndarray)\n                and indexer.dtype == np.bool_\n                and len(indexer[indexer]) == len(value)\n            ):\n                raise ValueError(\n                    \"cannot set using a list-like indexer \"\n                    \"with a different length than the value\"\n                )\n\n    elif isinstance(indexer, slice):\n        # slice\n        if is_list_like(value) and len(values):\n            if len(value) != length_of_indexer(indexer, values):\n                raise ValueError(\n                    \"cannot set using a slice indexer with a \"\n                    \"different length than the value\"\n                )",
        "begin_line": 109,
        "end_line": 155,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexers.check_array_indexer#340",
        "src_path": "pandas/core/indexers.py",
        "class_name": "pandas.core.indexers",
        "signature": "pandas.core.indexers.check_array_indexer(array: AnyArrayLike, indexer: Any)",
        "snippet": "def check_array_indexer(array: AnyArrayLike, indexer: Any) -> Any:\n    \"\"\"\n    Check if `indexer` is a valid array indexer for `array`.\n\n    For a boolean mask, `array` and `indexer` are checked to have the same\n    length. The dtype is validated, and if it is an integer or boolean\n    ExtensionArray, it is checked if there are missing values present, and\n    it is converted to the appropriate numpy array. Other dtypes will raise\n    an error.\n\n    Non-array indexers (integer, slice, Ellipsis, tuples, ..) are passed\n    through as is.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    array : array-like\n        The array that is being indexed (only used for the length).\n    indexer : array-like or list-like\n        The array-like that's used to index. List-like input that is not yet\n        a numpy array or an ExtensionArray is converted to one. Other input\n        types are passed through as is.\n\n    Returns\n    -------\n    numpy.ndarray\n        The validated indexer as a numpy array that can be used to index.\n\n    Raises\n    ------\n    IndexError\n        When the lengths don't match.\n    ValueError\n        When `indexer` cannot be converted to a numpy ndarray to index\n        (e.g. presence of missing values).\n\n    See Also\n    --------\n    api.types.is_bool_dtype : Check if `key` is of boolean dtype.\n\n    Examples\n    --------\n    When checking a boolean mask, a boolean ndarray is returned when the\n    arguments are all valid.\n\n    >>> mask = pd.array([True, False])\n    >>> arr = pd.array([1, 2])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    An IndexError is raised when the lengths don't match.\n\n    >>> mask = pd.array([True, False, True])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    Traceback (most recent call last):\n    ...\n    IndexError: Boolean index has wrong length: 3 instead of 2.\n\n    NA values in a boolean array are treated as False.\n\n    >>> mask = pd.array([True, pd.NA])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    A numpy boolean mask will get passed through (if the length is correct):\n\n    >>> mask = np.array([True, False])\n    >>> pd.api.indexers.check_array_indexer(arr, mask)\n    array([ True, False])\n\n    Similarly for integer indexers, an integer ndarray is returned when it is\n    a valid indexer, otherwise an error is  (for integer indexers, a matching\n    length is not required):\n\n    >>> indexer = pd.array([0, 2], dtype=\"Int64\")\n    >>> arr = pd.array([1, 2, 3])\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    array([0, 2])\n\n    >>> indexer = pd.array([0, pd.NA], dtype=\"Int64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot index with an integer indexer containing NA values\n\n    For non-integer/boolean dtypes, an appropriate error is raised:\n\n    >>> indexer = np.array([0., 2.], dtype=\"float64\")\n    >>> pd.api.indexers.check_array_indexer(arr, indexer)\n    Traceback (most recent call last):\n    ...\n    IndexError: arrays used as indices must be of integer or boolean type\n    \"\"\"\n    from pandas.core.construction import array as pd_array\n\n    # whathever is not an array-like is returned as-is (possible valid array\n    # indexers that are not array-like: integer, slice, Ellipsis, None)\n    # In this context, tuples are not considered as array-like, as they have\n    # a specific meaning in indexing (multi-dimensional indexing)\n    if is_list_like(indexer):\n        if isinstance(indexer, tuple):\n            return indexer\n    else:\n        return indexer\n\n    # convert list-likes to array\n    if not is_array_like(indexer):\n        indexer = pd_array(indexer)\n        if len(indexer) == 0:\n            # empty list is converted to float array by pd.array\n            indexer = np.array([], dtype=np.intp)\n\n    dtype = indexer.dtype\n    if is_bool_dtype(dtype):\n        if is_extension_array_dtype(dtype):\n            indexer = indexer.to_numpy(dtype=bool, na_value=False)\n        else:\n            indexer = np.asarray(indexer, dtype=bool)\n\n        # GH26658\n        if len(indexer) != len(array):\n            raise IndexError(\n                f\"Boolean index has wrong length: \"\n                f\"{len(indexer)} instead of {len(array)}\"\n            )\n    elif is_integer_dtype(dtype):\n        try:\n            indexer = np.asarray(indexer, dtype=np.intp)\n        except ValueError as err:\n            raise ValueError(\n                \"Cannot index with an integer indexer containing NA values\"\n            ) from err\n    else:\n        raise IndexError(\"arrays used as indices must be of integer or boolean type\")\n\n    return indexer",
        "begin_line": 340,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.io.formats.printing._pprint_seq#100",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._pprint_seq(seq: Sequence, _nest_lvl: int=0, max_seq_items: Optional[int]=None, **kwds)",
        "snippet": "def _pprint_seq(\n    seq: Sequence, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds\n) -> str:\n    \"\"\"\n    internal. pprinter for iterables. you should probably use pprint_thing()\n    rather than calling this directly.\n\n    bounds length of printed sequence, depending on options\n    \"\"\"\n    if isinstance(seq, set):\n        fmt = \"{{{body}}}\"\n    else:\n        fmt = \"[{body}]\" if hasattr(seq, \"__setitem__\") else \"({body})\"\n\n    if max_seq_items is False:\n        nitems = len(seq)\n    else:\n        nitems = max_seq_items or get_option(\"max_seq_items\") or len(seq)\n\n    s = iter(seq)\n    # handle sets, no slicing\n    r = [\n        pprint_thing(next(s), _nest_lvl + 1, max_seq_items=max_seq_items, **kwds)\n        for i in range(min(nitems, len(seq)))\n    ]\n    body = \", \".join(r)\n\n    if nitems < len(seq):\n        body += \", ...\"\n    elif isinstance(seq, tuple) and len(seq) == 1:\n        body += \",\"\n\n    return fmt.format(body=body)",
        "begin_line": 100,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001675603217158177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.printing.pprint_thing#166",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.pprint_thing(thing: Any, _nest_lvl: int=0, escape_chars: Optional[EscapeChars]=None, default_escapes: bool=False, quote_strings: bool=False, max_seq_items: Optional[int]=None)",
        "snippet": "def pprint_thing(\n    thing: Any,\n    _nest_lvl: int = 0,\n    escape_chars: Optional[EscapeChars] = None,\n    default_escapes: bool = False,\n    quote_strings: bool = False,\n    max_seq_items: Optional[int] = None,\n) -> str:\n    \"\"\"\n    This function is the sanctioned way of converting objects\n    to a string representation and properly handles nested sequences.\n\n    Parameters\n    ----------\n    thing : anything to be formatted\n    _nest_lvl : internal use only. pprint_thing() is mutually-recursive\n        with pprint_sequence, this argument is used to keep track of the\n        current nesting level, and limit it.\n    escape_chars : list or dict, optional\n        Characters to escape. If a dict is passed the values are the\n        replacements\n    default_escapes : bool, default False\n        Whether the input escape characters replaces or adds to the defaults\n    max_seq_items : int or None, default None\n        Pass through to other pretty printers to limit sequence printing\n\n    Returns\n    -------\n    str\n    \"\"\"\n\n    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result\n\n    if hasattr(thing, \"__next__\"):\n        return str(thing)\n    elif isinstance(thing, dict) and _nest_lvl < get_option(\n        \"display.pprint_nest_depth\"\n    ):\n        result = _pprint_dict(\n            thing, _nest_lvl, quote_strings=True, max_seq_items=max_seq_items\n        )\n    elif is_sequence(thing) and _nest_lvl < get_option(\"display.pprint_nest_depth\"):\n        result = _pprint_seq(\n            thing,\n            _nest_lvl,\n            escape_chars=escape_chars,\n            quote_strings=quote_strings,\n            max_seq_items=max_seq_items,\n        )\n    elif isinstance(thing, str) and quote_strings:\n        result = f\"'{as_escaped_string(thing)}'\"\n    else:\n        result = as_escaped_string(thing)\n\n    return result",
        "begin_line": 166,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.printing.as_escaped_string#197",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.as_escaped_string(thing: Any, escape_chars: Optional[EscapeChars]=escape_chars)",
        "snippet": "    def as_escaped_string(\n        thing: Any, escape_chars: Optional[EscapeChars] = escape_chars\n    ) -> str:\n        translate = {\"\\t\": r\"\\t\", \"\\n\": r\"\\n\", \"\\r\": r\"\\r\"}\n        if isinstance(escape_chars, dict):\n            if default_escapes:\n                translate.update(escape_chars)\n            else:\n                translate = escape_chars\n            escape_chars = list(escape_chars.keys())\n        else:\n            escape_chars = escape_chars or tuple()\n\n        result = str(thing)\n        for c in escape_chars:\n            result = result.replace(c, translate[c])\n        return result",
        "begin_line": 197,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017412502176562773,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_summary#284",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_summary(obj, formatter: Callable, is_justify: bool=True, name: Optional[str]=None, indent_for_name: bool=True, line_break_each_value: bool=False)",
        "snippet": "def format_object_summary(\n    obj,\n    formatter: Callable,\n    is_justify: bool = True,\n    name: Optional[str] = None,\n    indent_for_name: bool = True,\n    line_break_each_value: bool = False,\n) -> str:\n    \"\"\"\n    Return the formatted obj as a unicode string\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable and support __getitem__\n    formatter : callable\n        string formatter for an element\n    is_justify : boolean\n        should justify the display\n    name : name, optional\n        defaults to the class name of the obj\n    indent_for_name : bool, default True\n        Whether subsequent lines should be be indented to\n        align with the name.\n    line_break_each_value : bool, default False\n        If True, inserts a line break for each value of ``obj``.\n        If False, only break lines when the a line of values gets wider\n        than the display width.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    summary string\n    \"\"\"\n    from pandas.io.formats.console import get_console_size\n    from pandas.io.formats.format import _get_adjustment\n\n    display_width, _ = get_console_size()\n    if display_width is None:\n        display_width = get_option(\"display.width\") or 80\n    if name is None:\n        name = type(obj).__name__\n\n    if indent_for_name:\n        name_len = len(name)\n        space1 = f'\\n{(\" \" * (name_len + 1))}'\n        space2 = f'\\n{(\" \" * (name_len + 2))}'\n    else:\n        space1 = \"\\n\"\n        space2 = \"\\n \"  # space for the opening '['\n\n    n = len(obj)\n    if line_break_each_value:\n        # If we want to vertically align on each value of obj, we need to\n        # separate values by a line break and indent the values\n        sep = \",\\n \" + \" \" * len(name)\n    else:\n        sep = \",\"\n    max_seq_items = get_option(\"display.max_seq_items\") or n\n\n    # are we a truncated display\n    is_truncated = n > max_seq_items\n\n    # adj can optionally handle unicode eastern asian width\n    adj = _get_adjustment()\n\n    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line\n\n    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0\n\n    close = \", \"\n\n    if n == 0:\n        summary = f\"[]{close}\"\n    elif n == 1 and not line_break_each_value:\n        first = formatter(obj[0])\n        summary = f\"[{first}]{close}\"\n    elif n == 2 and not line_break_each_value:\n        first = formatter(obj[0])\n        last = formatter(obj[-1])\n        summary = f\"[{first}, {last}]{close}\"\n    else:\n\n        if n > max_seq_items:\n            n = min(max_seq_items // 2, 10)\n            head = [formatter(x) for x in obj[:n]]\n            tail = [formatter(x) for x in obj[-n:]]\n        else:\n            head = []\n            tail = [formatter(x) for x in obj]\n\n        # adjust all values to max length if needed\n        if is_justify:\n            if line_break_each_value:\n                # Justify each string in the values of head and tail, so the\n                # strings will right align when head and tail are stacked\n                # vertically.\n                head, tail = _justify(head, tail)\n            elif is_truncated or not (\n                len(\", \".join(head)) < display_width\n                and len(\", \".join(tail)) < display_width\n            ):\n                # Each string in head and tail should align with each other\n                max_length = max(best_len(head), best_len(tail))\n                head = [x.rjust(max_length) for x in head]\n                tail = [x.rjust(max_length) for x in tail]\n            # If we are not truncated and we are only a single\n            # line, then don't justify\n\n        if line_break_each_value:\n            # Now head and tail are of type List[Tuple[str]]. Below we\n            # convert them into List[str], so there will be one string per\n            # value. Also truncate items horizontally if wider than\n            # max_space\n            max_space = display_width - len(space2)\n            value = tail[0]\n            for max_items in reversed(range(1, len(value) + 1)):\n                pprinted_seq = _pprint_seq(value, max_seq_items=max_items)\n                if len(pprinted_seq) < max_space:\n                    break\n            head = [_pprint_seq(x, max_seq_items=max_items) for x in head]\n            tail = [_pprint_seq(x, max_seq_items=max_items) for x in tail]\n\n        summary = \"\"\n        line = space2\n\n        for max_items in range(len(head)):\n            word = head[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        if is_truncated:\n            # remove trailing space of last line\n            summary += line.rstrip() + space2 + \"...\"\n            line = space2\n\n        for max_items in range(len(tail) - 1):\n            word = tail[max_items] + sep + \" \"\n            summary, line = _extend_line(summary, line, word, display_width, space2)\n\n        # last value: no sep added + 1 space of width used for trailing ','\n        summary, line = _extend_line(summary, line, tail[-1], display_width - 2, space2)\n        summary += line\n\n        # right now close is either '' or ', '\n        # Now we want to include the ']', but not the maybe space.\n        close = \"]\" + close.rstrip(\" \")\n        summary += close\n\n        if len(summary) > (display_width) or line_break_each_value:\n            summary += space1\n        else:  # one row\n            summary += \" \"\n\n        # remove initial space\n        summary = \"[\" + summary[len(space2) :]\n\n    return summary",
        "begin_line": 284,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.125,
            "pseudo_dstar_susp": 0.0196078431372549,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0196078431372549,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.io.formats.printing._extend_line#351",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._extend_line(s: str, line: str, value: str, display_width: int, next_line_prefix: str)",
        "snippet": "    def _extend_line(\n        s: str, line: str, value: str, display_width: int, next_line_prefix: str\n    ) -> Tuple[str, str]:\n\n        if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:\n            s += line.rstrip()\n            line = next_line_prefix\n        line += value\n        return s, line",
        "begin_line": 351,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027624309392265192,
            "pseudo_dstar_susp": 0.023809523809523808,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.023809523809523808,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.io.formats.printing.best_len#361",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.best_len(values: List[str])",
        "snippet": "    def best_len(values: List[str]) -> int:\n        if values:\n            return max(adj.len(x) for x in values)\n        else:\n            return 0",
        "begin_line": 361,
        "end_line": 365,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.io.formats.printing._justify#456",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing._justify(head: List[Sequence[str]], tail: List[Sequence[str]])",
        "snippet": "def _justify(\n    head: List[Sequence[str]], tail: List[Sequence[str]]\n) -> Tuple[List[Tuple[str, ...]], List[Tuple[str, ...]]]:\n    \"\"\"\n    Justify items in head and tail, so they are right-aligned when stacked.\n\n    Parameters\n    ----------\n    head : list-like of list-likes of strings\n    tail : list-like of list-likes of strings\n\n    Returns\n    -------\n    tuple of list of tuples of strings\n        Same as head and tail, but items are right aligned when stacked\n        vertically.\n\n    Examples\n    --------\n    >>> _justify([['a', 'b']], [['abc', 'abcd']])\n    ([('  a', '   b')], [('abc', 'abcd')])\n    \"\"\"\n    combined = head + tail\n\n    # For each position for the sequences in ``combined``,\n    # find the length of the largest string.\n    max_length = [0] * len(combined[0])\n    for inner_seq in combined:\n        length = [len(item) for item in inner_seq]\n        max_length = [max(x, y) for x, y in zip(max_length, length)]\n\n    # justify each item in each list-like in head and tail using max_length\n    head = [\n        tuple(x.rjust(max_len) for x, max_len in zip(seq, max_length)) for seq in head\n    ]\n    tail = [\n        tuple(x.rjust(max_len) for x, max_len in zip(seq, max_length)) for seq in tail\n    ]\n    # https://github.com/python/mypy/issues/4975\n    # error: Incompatible return value type (got \"Tuple[List[Sequence[str]],\n    #  List[Sequence[str]]]\", expected \"Tuple[List[Tuple[str, ...]],\n    #  List[Tuple[str, ...]]]\")\n    return head, tail  # type: ignore",
        "begin_line": 456,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.printing.format_object_attrs#501",
        "src_path": "pandas/io/formats/printing.py",
        "class_name": "pandas.io.formats.printing",
        "signature": "pandas.io.formats.printing.format_object_attrs(obj: Sequence, include_dtype: bool=True)",
        "snippet": "def format_object_attrs(\n    obj: Sequence, include_dtype: bool = True\n) -> List[Tuple[str, Union[str, int]]]:\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    for common attrs, including dtype, name, length\n\n    Parameters\n    ----------\n    obj : object\n        must be iterable\n    include_dtype : bool\n        If False, dtype won't be in the returned list\n\n    Returns\n    -------\n    list of 2-tuple\n\n    \"\"\"\n    attrs: List[Tuple[str, Union[str, int]]] = []\n    if hasattr(obj, \"dtype\") and include_dtype:\n        # error: \"Sequence[Any]\" has no attribute \"dtype\"\n        attrs.append((\"dtype\", f\"'{obj.dtype}'\"))  # type: ignore\n    if getattr(obj, \"name\", None) is not None:\n        # error: \"Sequence[Any]\" has no attribute \"name\"\n        attrs.append((\"name\", default_pprint(obj.name)))  # type: ignore\n    # error: \"Sequence[Any]\" has no attribute \"names\"\n    elif getattr(obj, \"names\", None) is not None and any(obj.names):  # type: ignore\n        # error: \"Sequence[Any]\" has no attribute \"names\"\n        attrs.append((\"names\", default_pprint(obj.names)))  # type: ignore\n    max_seq_items = get_option(\"display.max_seq_items\") or len(obj)\n    if len(obj) > max_seq_items:\n        attrs.append((\"length\", len(obj)))\n    return attrs",
        "begin_line": 501,
        "end_line": 534,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._constructor#408",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"DataFrame\"]:\n        return DataFrame",
        "begin_line": 408,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__init__#422",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
        "snippet": "    def __init__(\n        self,\n        data=None,\n        index: Optional[Axes] = None,\n        columns: Optional[Axes] = None,\n        dtype: Optional[Dtype] = None,\n        copy: bool = False,\n    ):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n\n        if isinstance(data, DataFrame):\n            data = data._data\n\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(\n                data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n            )\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n\n            # masked recarray\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n            # a masked array\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data.soften_mask()  # set hardmask False if it was True\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, \"name\", None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n        # For data is list-like, or Iterable (will consume into list)\n        elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n            if not isinstance(data, (abc.Sequence, ExtensionArray)):\n                data = list(data)\n            if len(data) > 0:\n                if is_dataclass(data[0]):\n                    data = dataclasses_to_dicts(data)\n                if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n\n                    # set the index\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n\n                    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as err:\n                exc = TypeError(\n                    \"DataFrame constructor called with \"\n                    f\"incompatible data and dtype: {err}\"\n                )\n                raise exc from err\n\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array(\n                    (len(index), len(columns)), data, dtype=dtype\n                )\n                mgr = init_ndarray(\n                    values, index, columns, dtype=values.dtype, copy=False\n                )\n            else:\n                raise ValueError(\"DataFrame constructor not properly called!\")\n\n        NDFrame.__init__(self, mgr)",
        "begin_line": 422,
        "end_line": 521,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.axes#526",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.axes(self)",
        "snippet": "    def axes(self) -> List[Index]:\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]",
        "begin_line": 526,
        "end_line": 540,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.shape#543",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.shape(self)",
        "snippet": "    def shape(self) -> Tuple[int, int]:\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)",
        "begin_line": 543,
        "end_line": 562,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0006997900629811056,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.0006997900629811056,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.items#899",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.items(self)",
        "snippet": "    def items(self) -> Iterable[Tuple[Label, Series]]:\n        if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)",
        "begin_line": 899,
        "end_line": 905,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__len__#1044",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)",
        "begin_line": 1044,
        "end_line": 1048,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ixs#2499",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ixs(self, i: int, axis: int=0)",
        "snippet": "    def _ixs(self, i: int, axis: int = 0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        # irow\n        if axis == 0:\n            new_values = self._data.fast_xs(i)\n\n            # if we are a copy, mark as such\n            copy = isinstance(new_values, np.ndarray) and new_values.base is None\n            result = self._constructor_sliced(\n                new_values,\n                index=self.columns,\n                name=self.index[i],\n                dtype=new_values.dtype,\n            )\n            result._set_is_copy(self, copy=copy)\n            return result\n\n        # icol\n        else:\n            label = self.columns[i]\n\n            values = self._data.iget(i)\n            result = self._box_col_values(values, label)\n\n            # this is a cached value, mark it so\n            result._set_as_cached(label, self)\n\n            return result",
        "begin_line": 2499,
        "end_line": 2535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__getitem__#2537",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = lib.item_from_zerodim(key)\n        key = com.apply_if_callable(key, self)\n\n        if is_hashable(key):\n            # shortcut if the key is in columns\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n\n        # Do we have a slicer (on rows)?\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._slice(indexer, axis=0)\n\n        # Do we have a (boolean) DataFrame?\n        if isinstance(key, DataFrame):\n            return self.where(key)\n\n        # Do we have a (boolean) 1d indexer?\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n\n        # We are left with two options: a single key, and a collection of keys,\n        # We interpret tuples as collections only for non-MultiIndex\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n        # take() does not accept boolean indexers\n        if getattr(indexer, \"dtype\", None) == bool:\n            indexer = np.where(indexer)[0]\n\n        data = self._take_with_is_copy(indexer, axis=1)\n\n        if is_single_key:\n            # What does looking for a single key in a non-unique index return?\n            # The behavior is inconsistent. It returns a Series, except when\n            # - the key itself is repeated (test on data.shape, #9519), or\n            # - we have a MultiIndex on columns (test on self.columns, #21309)\n            if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n                data = data[key]\n\n        return data",
        "begin_line": 2537,
        "end_line": 2592,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.__setitem__#2691",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        # see if we can slice the rows\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            # either we have a slice or we have a string that can be converted\n            #  to a slice for partial-string date indexing\n            return self._setitem_slice(indexer, value)\n\n        if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            # set column\n            self._set_item(key, value)",
        "begin_line": 2691,
        "end_line": 2707,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._set_item#2772",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n\n        # check if we are modifying a copy\n        # try to set first as we want an invalid\n        # value exception to occur first\n        if len(self):\n            self._check_setitem_copy()",
        "begin_line": 2772,
        "end_line": 2790,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._ensure_valid_index#2825",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._ensure_valid_index(self, value)",
        "snippet": "    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        # GH5632, make sure that we are a Series convertible\n        if not len(self.index) and is_list_like(value) and len(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError) as err:\n                raise ValueError(\n                    \"Cannot set a frame with no defined index \"\n                    \"and a value that cannot be converted to a Series\"\n                ) from err\n\n            self._data = self._data.reindex_axis(\n                value.index.copy(), axis=1, fill_value=np.nan\n            )",
        "begin_line": 2825,
        "end_line": 2842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_item_values#2844",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_item_values(self, key, values)",
        "snippet": "    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)",
        "begin_line": 2844,
        "end_line": 2849,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._box_col_values#2851",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._box_col_values(self, values, items)",
        "snippet": "    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)",
        "begin_line": 2851,
        "end_line": 2856,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._sanitize_column#3362",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._sanitize_column(self, key, value, broadcast=True)",
        "snippet": "    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        numpy.ndarray\n        \"\"\"\n\n        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value\n\n        if isinstance(value, Series):\n            value = reindexer(value)\n\n        elif isinstance(value, DataFrame):\n            # align right-hand-side columns if self.columns\n            # is multi-index and self[key] is a sub-frame\n            if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            # now align rows\n            value = reindexer(value).T\n\n        elif isinstance(value, ExtensionArray):\n            # Explicitly copy here, instead of in sanitize_index,\n            # as sanitize_index won't copy an EA, even with copy=True\n            value = value.copy()\n            value = sanitize_index(value, self.index)\n\n        elif isinstance(value, Index) or is_sequence(value):\n\n            # turn me into an ndarray\n            value = sanitize_index(value, self.index)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n\n            # possibly infer to datetimelike\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n\n        else:\n            # cast ignores pandas dtypes. so save the dtype first\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n            # upcast\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n\n        # return internal types directly\n        if is_extension_array_dtype(value):\n            return value\n\n        # broadcast across multiple columns if necessary\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n\n        return np.atleast_2d(np.asarray(value))",
        "begin_line": 3362,
        "end_line": 3464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindexer#3382",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindexer(value)",
        "snippet": "        def reindexer(value):\n            # reindex if necessary\n\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n\n                # GH 4107\n                try:\n                    value = value.reindex(self.index)._values\n                except ValueError as err:\n                    # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                    if not value.index.is_unique:\n                        # duplicate axis\n                        raise err\n\n                    # other\n                    raise TypeError(\n                        \"incompatible index of inserted column with frame index\"\n                    ) from err\n            return value",
        "begin_line": 3382,
        "end_line": 3402,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame._reindex_multi#3577",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame._reindex_multi(self, axes, copy, fill_value)",
        "snippet": "    def _reindex_multi(self, axes, copy, fill_value) -> \"DataFrame\":\n        \"\"\"\n        We are guaranteed non-Nones in the axes.\n        \"\"\"\n        new_index, row_indexer = self.index.reindex(axes[\"index\"])\n        new_columns, col_indexer = self.columns.reindex(axes[\"columns\"])\n\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(\n                self.values, indexer, fill_value=fill_value\n            )\n            return self._constructor(new_values, index=new_index, columns=new_columns)\n        else:\n            return self._reindex_with_indexers(\n                {0: [new_index, row_indexer], 1: [new_columns, col_indexer]},\n                copy=copy,\n                fill_value=fill_value,\n            )",
        "begin_line": 3577,
        "end_line": 3595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.frame.DataFrame.reindex#3679",
        "src_path": "pandas/core/frame.py",
        "class_name": "pandas.core.frame.DataFrame",
        "signature": "pandas.core.frame.DataFrame.reindex(self, *args, **kwargs)",
        "snippet": "    def reindex(self, *args, **kwargs) -> \"DataFrame\":\n        axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n        kwargs.update(axes)\n        # Pop these, since the values are in `kwargs` under different names\n        kwargs.pop(\"axis\", None)\n        kwargs.pop(\"labels\", None)\n        return super().reindex(**kwargs)",
        "begin_line": 3679,
        "end_line": 3685,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series.__init__#199",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__init__(self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)",
        "snippet": "    def __init__(\n        self, data=None, index=None, dtype=None, name=None, copy=False, fastpath=False\n    ):\n\n        # we are called internally, so short-circuit\n        if fastpath:\n\n            # data is an ndarray, index is defined\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager.from_array(data, index)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n\n        else:\n\n            name = ibase.maybe_extract_name(name, data, type(self))\n\n            if is_empty_data(data) and dtype is None:\n                # gh-17261\n                warnings.warn(\n                    \"The default dtype for empty Series will be 'object' instead \"\n                    \"of 'float64' in a future version. Specify a dtype explicitly \"\n                    \"to silence this warning.\",\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                # uncomment the line below when removing the DeprecationWarning\n                # dtype = np.dtype(object)\n\n            if index is not None:\n                index = ensure_index(index)\n\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    \"initializing a Series from a MultiIndex is not supported\"\n                )\n            elif isinstance(data, Index):\n\n                if dtype is not None:\n                    # astype copies\n                    data = data.astype(dtype)\n                else:\n                    # need to copy to avoid aliasing issues\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                        # GH#24096 need copy to be deep for datetime64tz case\n                        # TODO: See if we can avoid these copies\n                        data = data._values.copy(deep=True)\n                copy = False\n\n            elif isinstance(data, np.ndarray):\n                if len(data.dtype):\n                    # GH#13296 we are dealing with a compound dtype, which\n                    #  should be treated as 2D\n                    raise ValueError(\n                        \"Cannot construct a Series from an ndarray with \"\n                        \"compound dtype.  Use DataFrame instead.\"\n                    )\n                pass\n            elif isinstance(data, ABCSeries):\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif is_dict_like(data):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    # GH#19275 SingleBlockManager input should only be called\n                    # internally\n                    raise AssertionError(\n                        \"Cannot pass both SingleBlockManager \"\n                        \"`data` argument and a different \"\n                        \"`index` argument. `copy` must be False.\"\n                    )\n\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError(f\"'{type(data).__name__}' type is unordered\")\n            else:\n                data = com.maybe_iterable_to_list(data)\n\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n\n                # a scalar numpy array is list-like but doesn't\n                # have a proper length\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            f\"Length of passed values is {len(data)}, \"\n                            f\"index implies {len(index)}.\"\n                        )\n                except TypeError:\n                    pass\n\n            # create/copy the manager\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors=\"ignore\", copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy, raise_cast_failure=True)\n\n                data = SingleBlockManager.from_array(data, index)\n\n        generic.NDFrame.__init__(self, data)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)",
        "begin_line": 199,
        "end_line": 324,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.series.Series._init_dict#326",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._init_dict(self, data, index=None, dtype=None)",
        "snippet": "    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series.\n        index : Index or index-like, default None\n            Index for the new Series: if None, use dict keys.\n        dtype : dtype, default None\n            The dtype for the new Series: if None, infer from data.\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        # Looking for NaN in dict doesn't work ({np.nan : 1}[float('nan')]\n        # raises KeyError), so we iterate the entire dict, and align\n        if data:\n            keys, values = zip(*data.items())\n            values = list(values)\n        elif index is not None:\n            # fastpath for Series(data=None). Just use broadcasting a scalar\n            # instead of reindexing.\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n\n        # Input is now list-like, so rely on \"standard\" construction:\n\n        # TODO: passing np.float64 to not break anything yet. See GH-17261\n        s = create_series_with_explicit_dtype(\n            values, index=keys, dtype=dtype, dtype_if_empty=np.float64\n        )\n\n        # Now we just make sure the order is respected, if any\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        return s._data, s.index",
        "begin_line": 326,
        "end_line": 368,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series._constructor#373",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Series\"]:\n        return Series",
        "begin_line": 373,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007575757575757576,
            "pseudo_dstar_susp": 0.0006635700066357001,
            "pseudo_tarantula_susp": 0.0010070493454179255,
            "pseudo_op2_susp": 0.0006635700066357001,
            "pseudo_barinel_susp": 0.0010070493454179255
        }
    },
    {
        "name": "pandas.core.series.Series._set_axis#389",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._set_axis(self, axis: int, labels, fastpath: bool=False)",
        "snippet": "    def _set_axis(self, axis: int, labels, fastpath: bool = False) -> None:\n        \"\"\"\n        Override generic, we want to set the _typ here.\n\n        This is called from the cython code when we set the `index` attribute\n        directly, e.g. `series.index = [1, 2, 3]`.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    # need to set here because we changed the index\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    # labels may exceeds datetime bounds,\n                    # or not be a DatetimeIndex\n                    pass\n\n        object.__setattr__(self, \"_index\", labels)\n        if not fastpath:\n            # The ensure_index call aabove ensures we have an Index object\n            self._data.set_axis(axis, labels)",
        "begin_line": 389,
        "end_line": 415,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000966183574879227,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "pandas.core.series.Series.dtype#423",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.dtype(self)",
        "snippet": "    def dtype(self) -> DtypeObj:\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 423,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000999000999000999,
            "pseudo_dstar_susp": 0.0037735849056603774,
            "pseudo_tarantula_susp": 0.0009442870632672333,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.0009442870632672333
        }
    },
    {
        "name": "pandas.core.series.Series.name#437",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self)",
        "snippet": "    def name(self) -> Label:\n        \"\"\"\n        Return the name of the Series.\n\n        The name of a Series becomes its index or column name if it is used\n        to form a DataFrame. It is also used whenever displaying the Series\n        using the interpreter.\n\n        Returns\n        -------\n        label (hashable object)\n            The name of the Series, also the column name if part of a DataFrame.\n\n        See Also\n        --------\n        Series.rename : Sets the Series name when given a scalar input.\n        Index.name : Corresponding Index property.\n\n        Examples\n        --------\n        The Series name can be set initially when calling the constructor.\n\n        >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Numbers, dtype: int64\n        >>> s.name = \"Integers\"\n        >>> s\n        0    1\n        1    2\n        2    3\n        Name: Integers, dtype: int64\n\n        The name of a Series within a DataFrame is its column name.\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],\n        ...                   columns=[\"Odd Numbers\", \"Even Numbers\"])\n        >>> df\n           Odd Numbers  Even Numbers\n        0            1             2\n        1            3             4\n        2            5             6\n        >>> df[\"Even Numbers\"].name\n        'Even Numbers'\n        \"\"\"\n        return self._name",
        "begin_line": 437,
        "end_line": 484,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009328358208955224,
            "pseudo_dstar_susp": 0.0030581039755351682,
            "pseudo_tarantula_susp": 0.0008888888888888889,
            "pseudo_op2_susp": 0.0030581039755351682,
            "pseudo_barinel_susp": 0.0008888888888888889
        }
    },
    {
        "name": "pandas.core.series.Series.name#487",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.name(self, value: Label)",
        "snippet": "    def name(self, value: Label) -> None:\n        if not is_hashable(value):\n            raise TypeError(\"Series.name must be a hashable type\")\n        object.__setattr__(self, \"_name\", value)",
        "begin_line": 487,
        "end_line": 490,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000966183574879227,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "pandas.core.series.Series.values#493",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.values(self)",
        "snippet": "    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._data.external_values()",
        "begin_line": 493,
        "end_line": 532,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016550810989738498,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series._values#535",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._values(self)",
        "snippet": "    def _values(self):\n        \"\"\"\n        Return the internal repr of this data (defined by Block.interval_values).\n        This are the values as stored in the Block (ndarray or ExtensionArray\n        depending on the Block class), with datetime64[ns] and timedelta64[ns]\n        wrapped in ExtensionArrays to match Index._values behavior.\n\n        Differs from the public ``.values`` for certain data types, because of\n        historical backwards compatibility of the public attribute (e.g. period\n        returns object ndarray and datetimetz a datetime64[ns] ndarray for\n        ``.values`` while it returns an ExtensionArray for ``._values`` in those\n        cases).\n\n        Differs from ``.array`` in that this still returns the numpy array if\n        the Block is backed by a numpy array (except for datetime64 and\n        timedelta64 dtypes), while ``.array`` ensures to always return an\n        ExtensionArray.\n\n        Differs from ``._ndarray_values``, as that ensures to always return a\n        numpy array (it will call ``_ndarray_values`` on the ExtensionArray, if\n        the Series was backed by an ExtensionArray).\n\n        Overview:\n\n        dtype       | values        | _values       | array         | _ndarray_values |\n        ----------- | ------------- | ------------- | ------------- | --------------- |\n        Numeric     | ndarray       | ndarray       | PandasArray   | ndarray         |\n        Category    | Categorical   | Categorical   | Categorical   | ndarray[int]    |\n        dt64[ns]    | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n        dt64[ns tz] | ndarray[M8ns] | DatetimeArray | DatetimeArray | ndarray[M8ns]   |\n        td64[ns]    | ndarray[m8ns] | TimedeltaArray| ndarray[m8ns] | ndarray[m8ns]   |\n        Period      | ndarray[obj]  | PeriodArray   | PeriodArray   | ndarray[int]    |\n        Nullable    | EA            | EA            | EA            | ndarray         |\n\n        \"\"\"\n        return self._data.internal_values()",
        "begin_line": 535,
        "end_line": 570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006049606775559589,
            "pseudo_dstar_susp": 0.0006261740763932373,
            "pseudo_tarantula_susp": 0.0006373486297004461,
            "pseudo_op2_susp": 0.0006261740763932373,
            "pseudo_barinel_susp": 0.0006373486297004461
        }
    },
    {
        "name": "pandas.core.series.Series.array#574",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.array(self)",
        "snippet": "    def array(self) -> ExtensionArray:\n        return self._data._block.array_values()",
        "begin_line": 574,
        "end_line": 575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.0006706908115358819,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0006706908115358819,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.series.Series.__len__#593",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 593,
        "end_line": 597,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009389671361502347,
            "pseudo_dstar_susp": 0.0030864197530864196,
            "pseudo_tarantula_susp": 0.00089126559714795,
            "pseudo_op2_susp": 0.0030864197530864196,
            "pseudo_barinel_susp": 0.00089126559714795
        }
    },
    {
        "name": "pandas.core.series.Series.__array__#748",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarray`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discarded with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        return np.asarray(self.array, dtype)",
        "begin_line": 748,
        "end_line": 795,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series.__getitem__#875",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n\n        if key is Ellipsis:\n            return self\n\n        key_is_scalar = is_scalar(key)\n        if isinstance(key, (list, tuple)):\n            key = unpack_1tuple(key)\n\n        if key_is_scalar or isinstance(self.index, MultiIndex):\n            # Otherwise index.get_value will raise InvalidIndexError\n            try:\n                result = self.index.get_value(self, key)\n\n                return result\n            except InvalidIndexError:\n                if not isinstance(self.index, MultiIndex):\n                    raise\n\n            except (KeyError, ValueError):\n                if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                    # kludge\n                    pass\n                else:\n                    raise\n\n        if not key_is_scalar:\n            # avoid expensive checks if we know we have a scalar\n            if is_iterator(key):\n                key = list(key)\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                key = np.asarray(key, dtype=bool)\n                return self._get_values(key)\n\n        return self._get_with(key)",
        "begin_line": 875,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series._get_values#975",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._get_values(self, indexer)",
        "snippet": "    def _get_values(self, indexer):\n        try:\n            return self._constructor(\n                self._data.get_slice(indexer), fastpath=True\n            ).__finalize__(self)\n        except ValueError:\n            # mpl compat if we look up e.g. ser[:, np.newaxis];\n            #  see tests.series.timeseries.test_mpl_compat_hack\n            return self._values[indexer]",
        "begin_line": 975,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series._is_mixed_type#1135",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self):\n        return False",
        "begin_line": 1135,
        "end_line": 1136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series.unique#1740",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.unique(self)",
        "snippet": "    def unique(self):\n        \"\"\"\n        Return unique values of Series object.\n\n        Uniques are returned in order of appearance. Hash table-based unique,\n        therefore does NOT sort.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            The unique values returned as a NumPy array. See Notes.\n\n        See Also\n        --------\n        unique : Top-level unique method for any 1-d array-like object.\n        Index.unique : Return Index with unique values from an Index object.\n\n        Notes\n        -----\n        Returns the unique values as a NumPy array. In case of an\n        extension-array backed Series, a new\n        :class:`~api.extensions.ExtensionArray` of that type with just\n        the unique values is returned. This includes\n\n            * Categorical\n            * Period\n            * Datetime with Timezone\n            * Interval\n            * Sparse\n            * IntegerNA\n\n        See Examples section.\n\n        Examples\n        --------\n        >>> pd.Series([2, 1, 3, 3], name='A').unique()\n        array([2, 1, 3])\n\n        >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n        array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n        >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n        ...            for _ in range(3)]).unique()\n        <DatetimeArray>\n        ['2016-01-01 00:00:00-05:00']\n        Length: 1, dtype: datetime64[ns, US/Eastern]\n\n        An unordered Categorical will return categories in the order of\n        appearance.\n\n        >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n        ...                          ordered=True)).unique()\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n        \"\"\"\n        result = super().unique()\n        return result",
        "begin_line": 1740,
        "end_line": 1802,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series._reduce#3851",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series._reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
        "snippet": "    def _reduce(\n        self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n    ):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n\n        if axis is not None:\n            self._get_axis_number(axis)\n\n        if isinstance(delegate, ExtensionArray):\n            # dispatch to ExtensionArray interface\n            return delegate._reduce(name, skipna=skipna, **kwds)\n\n        else:\n            # dispatch to numpy arrays\n            if numeric_only:\n                raise NotImplementedError(\n                    f\"Series.{name} does not implement numeric_only.\"\n                )\n            with np.errstate(all=\"ignore\"):\n                return op(delegate, skipna=skipna, **kwds)",
        "begin_line": 3851,
        "end_line": 3876,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.series.Series.isna#4400",
        "src_path": "pandas/core/series.py",
        "class_name": "pandas.core.series.Series",
        "signature": "pandas.core.series.Series.isna(self)",
        "snippet": "    def isna(self) -> \"Series\":\n        return super().isna()",
        "begin_line": 4400,
        "end_line": 4401,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.extension.cached#48",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.cached(self)",
        "snippet": "            def cached(self):\n                return getattr(self._data, name)",
        "begin_line": 48,
        "end_line": 49,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.extension.fget#57",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension",
        "signature": "pandas.core.indexes.extension.fget(self)",
        "snippet": "            def fget(self):\n                result = getattr(self._data, name)\n                if wrap:\n                    if isinstance(result, type(self._data)):\n                        return type(self)._simple_new(result, name=self.name)\n                    return Index(result, name=self.name)\n                return result",
        "begin_line": 57,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex.__array__#228",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 228,
        "end_line": 229,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target#235",
        "src_path": "pandas/core/indexes/extension.py",
        "class_name": "pandas.core.indexes.extension.ExtensionIndex",
        "signature": "pandas.core.indexes.extension.ExtensionIndex._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        return self._data._values_for_argsort()",
        "begin_line": 235,
        "end_line": 236,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019801980198019803,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.iloc#94",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.iloc(self)",
        "snippet": "    def iloc(self) -> \"_iLocIndexer\":\n        \"\"\"\n        Purely integer-location based indexing for selection by position.\n\n        ``.iloc[]`` is primarily integer position based (from ``0`` to\n        ``length-1`` of the axis), but may also be used with a boolean\n        array.\n\n        Allowed inputs are:\n\n        - An integer, e.g. ``5``.\n        - A list or array of integers, e.g. ``[4, 3, 0]``.\n        - A slice object with ints, e.g. ``1:7``.\n        - A boolean array.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above).\n          This is useful in method chains, when you don't have a reference to the\n          calling object, but would like to base your selection on some value.\n\n        ``.iloc`` will raise ``IndexError`` if a requested indexer is\n        out-of-bounds, except *slice* indexers which allow out-of-bounds\n        indexing (this conforms with python/numpy *slice* semantics).\n\n        See more at :ref:`Selection by Position <indexing.integer>`.\n\n        See Also\n        --------\n        DataFrame.iat : Fast integer location scalar accessor.\n        DataFrame.loc : Purely label-location based indexer for selection by label.\n        Series.iloc : Purely integer-location based indexing for\n                       selection by position.\n\n        Examples\n        --------\n        >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n        ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n        >>> df = pd.DataFrame(mydict)\n        >>> df\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        **Indexing just the rows**\n\n        With a scalar integer.\n\n        >>> type(df.iloc[0])\n        <class 'pandas.core.series.Series'>\n        >>> df.iloc[0]\n        a    1\n        b    2\n        c    3\n        d    4\n        Name: 0, dtype: int64\n\n        With a list of integers.\n\n        >>> df.iloc[[0]]\n           a  b  c  d\n        0  1  2  3  4\n        >>> type(df.iloc[[0]])\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> df.iloc[[0, 1]]\n             a    b    c    d\n        0    1    2    3    4\n        1  100  200  300  400\n\n        With a `slice` object.\n\n        >>> df.iloc[:3]\n              a     b     c     d\n        0     1     2     3     4\n        1   100   200   300   400\n        2  1000  2000  3000  4000\n\n        With a boolean mask the same length as the index.\n\n        >>> df.iloc[[True, False, True]]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        With a callable, useful in method chains. The `x` passed\n        to the ``lambda`` is the DataFrame being sliced. This selects\n        the rows whose index label even.\n\n        >>> df.iloc[lambda x: x.index % 2 == 0]\n              a     b     c     d\n        0     1     2     3     4\n        2  1000  2000  3000  4000\n\n        **Indexing both axes**\n\n        You can mix the indexer types for the index and columns. Use ``:`` to\n        select the entire axis.\n\n        With scalar integers.\n\n        >>> df.iloc[0, 1]\n        2\n\n        With lists of integers.\n\n        >>> df.iloc[[0, 2], [1, 3]]\n              b     d\n        0     2     4\n        2  2000  4000\n\n        With `slice` objects.\n\n        >>> df.iloc[1:3, 0:3]\n              a     b     c\n        1   100   200   300\n        2  1000  2000  3000\n\n        With a boolean array whose length matches the columns.\n\n        >>> df.iloc[:, [True, False, True, False]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n\n        With a callable function that expects the Series or DataFrame.\n\n        >>> df.iloc[:, lambda df: [0, 2]]\n              a     c\n        0     1     3\n        1   100   300\n        2  1000  3000\n        \"\"\"\n        return _iLocIndexer(\"iloc\", self)",
        "begin_line": 94,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing.IndexingMixin.loc#231",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing.IndexingMixin",
        "signature": "pandas.core.indexing.IndexingMixin.loc(self)",
        "snippet": "    def loc(self) -> \"_LocIndexer\":\n        \"\"\"\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        \"\"\"\n        return _LocIndexer(\"loc\", self)",
        "begin_line": 231,
        "end_line": 468,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._get_setitem_indexer#581",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._get_setitem_indexer(self, key)",
        "snippet": "    def _get_setitem_indexer(self, key):\n        \"\"\"\n        Convert a potentially-label-based key into a positional indexer.\n        \"\"\"\n        if self.name == \"loc\":\n            self._ensure_listlike_indexer(key)\n\n        if self.axis is not None:\n            return self._convert_tuple(key, is_setter=True)\n\n        ax = self.obj._get_axis(0)\n\n        if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n            try:\n                return ax.get_loc(key)\n            except (TypeError, KeyError, InvalidIndexError):\n                # TypeError e.g. passed a bool\n                pass\n\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key, is_setter=True)\n            except IndexingError:\n                pass\n\n        if isinstance(key, range):\n            return list(key)\n\n        try:\n            return self._convert_to_indexer(key, axis=0, is_setter=True)\n        except TypeError as e:\n\n            # invalid indexer type vs 'other' indexing errors\n            if \"cannot do\" in str(e):\n                raise\n            raise IndexingError(key) from e",
        "begin_line": 581,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._ensure_listlike_indexer#618",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._ensure_listlike_indexer(self, key, axis=None)",
        "snippet": "    def _ensure_listlike_indexer(self, key, axis=None):\n        \"\"\"\n        Ensure that a list-like of column labels are all present by adding them if\n        they do not already exist.\n\n        Parameters\n        ----------\n        key : _LocIndexer key or list-like of column labels\n            Target labels.\n        axis : key axis if known\n        \"\"\"\n        column_axis = 1\n\n        # column only exists in 2-dimensional DataFrame\n        if self.ndim != 2:\n            return\n\n        if isinstance(key, tuple):\n            # key may be a tuple if key is a _LocIndexer key\n            # in that case, set key to the column part of key\n            key = key[column_axis]\n            axis = column_axis\n\n        if (\n            axis == column_axis\n            and not isinstance(self.obj.columns, ABCMultiIndex)\n            and is_list_like_indexer(key)\n            and not com.is_bool_indexer(key)\n            and all(is_hashable(k) for k in key)\n        ):\n            for k in key:\n                try:\n                    self.obj[k]\n                except KeyError:\n                    self.obj[k] = np.nan",
        "begin_line": 618,
        "end_line": 652,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__setitem__#654",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._has_valid_setitem_indexer(key)\n\n        iloc = self if self.name == \"iloc\" else self.obj.iloc\n        iloc._setitem_with_indexer(indexer, value)",
        "begin_line": 654,
        "end_line": 663,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._has_valid_tuple#687",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._has_valid_tuple(self, key: Tuple)",
        "snippet": "    def _has_valid_tuple(self, key: Tuple):\n        \"\"\"\n        Check the key for valid keys across my indexer.\n        \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            try:\n                self._validate_key(k, i)\n            except ValueError as err:\n                raise ValueError(\n                    \"Location based indexing can only have \"\n                    f\"[{self._valid_types}] types\"\n                ) from err",
        "begin_line": 687,
        "end_line": 700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer#702",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._is_nested_tuple_indexer(self, tup: Tuple)",
        "snippet": "    def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False",
        "begin_line": 702,
        "end_line": 710,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002053388090349076,
            "pseudo_dstar_susp": 0.006060606060606061,
            "pseudo_tarantula_susp": 0.0018450184501845018,
            "pseudo_op2_susp": 0.006060606060606061,
            "pseudo_barinel_susp": 0.0018450184501845018
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_lowerdim#750",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_lowerdim(self, tup: Tuple)",
        "snippet": "    def _getitem_lowerdim(self, tup: Tuple):\n\n        # we can directly get the axis result since the axis is specified\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n\n        # we may have a nested tuples indexer here\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n\n        # we maybe be using a tuple to represent multiple dimensions here\n        ax0 = self.obj._get_axis(0)\n        # ...but iloc should handle the tuple as simple integer-location\n        # instead of checking it as multiindex representation (GH 13797)\n        if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n        if len(tup) > self.ndim:\n            raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n        for i, key in enumerate(tup):\n            if is_label_like(key):\n                # We don't need to check for tuples here because those are\n                #  caught by the _is_nested_tuple_indexer check above.\n                section = self._getitem_axis(key, axis=i)\n\n                # We should never have a scalar section here, because\n                #  _getitem_lowerdim is only called after a check for\n                #  is_scalar_access, which that would be.\n                if section.ndim == self.ndim:\n                    # we're in the middle of slicing through a MultiIndex\n                    # revise the key wrt to `section` by inserting an _NS\n                    new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n                else:\n                    # Note: the section.ndim == self.ndim check above\n                    #  rules out having DataFrame here, so we dont need to worry\n                    #  about transposing.\n                    new_key = tup[:i] + tup[i + 1 :]\n\n                    if len(new_key) == 1:\n                        new_key = new_key[0]\n\n                # Slices should return views, but calling iloc/loc with a null\n                # slice returns a new object.\n                if com.is_null_slice(new_key):\n                    return section\n                # This is an elided recursive call to iloc/loc\n                return getattr(section, self.name)[new_key]\n\n        raise IndexingError(\"not applicable\")",
        "begin_line": 750,
        "end_line": 803,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001564945226917058,
            "pseudo_dstar_susp": 0.0008389261744966443,
            "pseudo_tarantula_susp": 0.0018450184501845018,
            "pseudo_op2_susp": 0.0008389261744966443,
            "pseudo_barinel_susp": 0.0018450184501845018
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple#805",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer._getitem_nested_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_nested_tuple(self, tup: Tuple):\n        # we have a nested tuple so have at least 1 multi-index level\n        # we should be able to match up the dimensionality here\n\n        # we have too many indexers for our dim, but have at least 1\n        # multi-index dimension, try to see if we have something like\n        # a tuple passed to a series with a multi-index\n        if len(tup) > self.ndim:\n            if self.name != \"loc\":\n                # This should never be reached, but lets be explicit about it\n                raise ValueError(\"Too many indices\")\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n\n            # this is a series with a multi-index specified a tuple of\n            # selectors\n            axis = self.axis or 0\n            return self._getitem_axis(tup, axis=axis)\n\n        # handle the multi-axis by taking sections and reducing\n        # this is iterative\n        obj = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n\n            # if we have a scalar, we are done\n            if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n                break\n\n            # has the dim of the obj changed?\n            # GH 7199\n            if obj.ndim < current_ndim:\n                axis -= 1\n\n        return obj",
        "begin_line": 805,
        "end_line": 848,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocationIndexer.__getitem__#853",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocationIndexer",
        "signature": "pandas.core.indexing._LocationIndexer.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            if self._is_scalar_access(key):\n                try:\n                    return self.obj._get_value(*key, takeable=self._takeable)\n                except (KeyError, IndexError, AttributeError):\n                    # AttributeError for IntervalTree get_value\n                    pass\n            return self._getitem_tuple(key)\n        else:\n            # we by definition only have the 0th axis\n            axis = self.axis or 0\n\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)",
        "begin_line": 853,
        "end_line": 868,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002053388090349076,
            "pseudo_dstar_susp": 0.006060606060606061,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.006060606060606061,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._has_valid_setitem_indexer#911",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._has_valid_setitem_indexer(self, indexer)",
        "snippet": "    def _has_valid_setitem_indexer(self, indexer) -> bool:\n        return True",
        "begin_line": 911,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._LocIndexer._convert_to_indexer#1153",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._LocIndexer",
        "signature": "pandas.core.indexing._LocIndexer._convert_to_indexer(self, key, axis: int, is_setter: bool=False)",
        "snippet": "    def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on a ndarray.\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        labels = self.obj._get_axis(axis)\n\n        if isinstance(key, slice):\n            return labels._convert_slice_indexer(key, kind=\"loc\")\n\n        # see if we are positional in nature\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(key) and not is_int_index\n\n        if is_scalar(key) or isinstance(labels, ABCMultiIndex):\n            # Otherwise get_loc will raise InvalidIndexError\n\n            # if we are a label return me\n            try:\n                return labels.get_loc(key)\n            except LookupError:\n                if isinstance(key, tuple) and isinstance(labels, ABCMultiIndex):\n                    if len(key) == labels.nlevels:\n                        return {\"key\": key}\n                    raise\n            except TypeError:\n                pass\n            except ValueError:\n                if not is_int_positional:\n                    raise\n\n        # a positional\n        if is_int_positional:\n\n            # if we are setting and its not a valid location\n            # its an insert which fails by definition\n\n            # always valid\n            return {\"key\": key}\n\n        if is_nested_tuple(key, labels):\n            return labels.get_locs(key)\n\n        elif is_list_like_indexer(key):\n\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(labels, key)\n                (inds,) = key.nonzero()\n                return inds\n            else:\n                # When setting, missing keys are not allowed, even with .loc:\n                return self._get_listlike_indexer(key, axis, raise_missing=True)[1]\n        else:\n            try:\n                return labels.get_loc(key)\n            except LookupError:\n                # allow a not found key only if we are a setter\n                if not is_list_like_indexer(key):\n                    return {\"key\": key}\n                raise",
        "begin_line": 1153,
        "end_line": 1222,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_key#1343",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_key(self, key, axis: int)",
        "snippet": "    def _validate_key(self, key, axis: int):\n        if com.is_bool_indexer(key):\n            if hasattr(key, \"index\") and isinstance(key.index, Index):\n                if key.index.inferred_type == \"integer\":\n                    raise NotImplementedError(\n                        \"iLocation based boolean \"\n                        \"indexing on an integer type \"\n                        \"is not available\"\n                    )\n                raise ValueError(\n                    \"iLocation based boolean indexing cannot use \"\n                    \"an indexable as a mask\"\n                )\n            return\n\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            # a tuple should already have been caught by this point\n            # so don't treat a tuple as a valid indexer\n            raise IndexingError(\"Too many indexers\")\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n\n            # check that the key has a numeric dtype\n            if not is_numeric_dtype(arr.dtype):\n                raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n            # check that the key does not exceed the maximum size of the index\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError(\"positional indexers are out-of-bounds\")\n        else:\n            raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
        "begin_line": 1343,
        "end_line": 1378,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._is_scalar_access#1409",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._is_scalar_access(self, key: Tuple)",
        "snippet": "    def _is_scalar_access(self, key: Tuple) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n        \"\"\"\n        # this is a shortcut accessor to both .loc and .iloc\n        # that provide the equivalent access of .at and .iat\n        # a) avoid getting things via sections and (to minimize dtype changes)\n        # b) provide a performant path\n        if len(key) != self.ndim:\n            return False\n\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n\n        return True",
        "begin_line": 1409,
        "end_line": 1426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._validate_integer#1428",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._validate_integer(self, key: int, axis: int)",
        "snippet": "    def _validate_integer(self, key: int, axis: int) -> None:\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position.\n        axis : int\n            Desired axis.\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'.\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError(\"single positional indexer is out-of-bounds\")",
        "begin_line": 1428,
        "end_line": 1446,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_tuple#1450",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_tuple(self, tup: Tuple)",
        "snippet": "    def _getitem_tuple(self, tup: Tuple):\n\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n\n        return self._getitem_tuple_same_dim(tup)",
        "begin_line": 1450,
        "end_line": 1458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._getitem_axis#1483",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._getitem_axis(self, key, axis: int)",
        "snippet": "    def _getitem_axis(self, key, axis: int):\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n\n        if isinstance(key, list):\n            key = np.asarray(key)\n\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n\n        # a list of integers\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n\n        # a single integer\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n            # validate the location\n            self._validate_integer(key, axis)\n\n            return self.obj._ixs(key, axis=axis)",
        "begin_line": 1483,
        "end_line": 1507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexing._iLocIndexer._setitem_with_indexer#1532",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing._iLocIndexer",
        "signature": "pandas.core.indexing._iLocIndexer._setitem_with_indexer(self, indexer, value)",
        "snippet": "    def _setitem_with_indexer(self, indexer, value):\n        \"\"\"\n        _setitem_with_indexer is for setting values on a Series/DataFrame\n        using positional indexers.\n\n        If the relevant keys are not present, the Series/DataFrame may be\n        expanded.\n\n        This method is currently broken when dealing with non-unique Indexes,\n        since it goes from positional indexers back to labels when calling\n        BlockManager methods, see GH#12991, GH#22046, GH#15686.\n        \"\"\"\n\n        # also has the side effect of consolidating in-place\n        from pandas import Series\n\n        info_axis = self.obj._info_axis_number\n\n        # maybe partial set\n        take_split_path = self.obj._is_mixed_type\n\n        # if there is only one block/type, still have to take split path\n        # unless the block is one-dimensional or it can hold the value\n        if not take_split_path and self.obj._data.blocks:\n            (blk,) = self.obj._data.blocks\n            if 1 < blk.ndim:  # in case of dict, keys are indices\n                val = list(value.values()) if isinstance(value, dict) else value\n                take_split_path = not blk._can_hold_element(val)\n\n        # if we have any multi-indexes that have non-trivial slices\n        # (not null slices) then we must take the split path, xref\n        # GH 10360, GH 27841\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, ABCMultiIndex) and not (\n                    is_integer(i) or com.is_null_slice(i)\n                ):\n                    take_split_path = True\n                    break\n\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n\n                    # reindex the axis to the new value\n                    # and set inplace\n                    key, _ = convert_missing_indexer(idx)\n\n                    # if this is the items axes, then take the main missing\n                    # path first\n                    # this correctly sets the dtype and avoids cache issues\n                    # essentially this separates out the block that is needed\n                    # to possibly be modified\n                    if self.ndim > 1 and i == info_axis:\n\n                        # add the new item, and set the value\n                        # must have all defined axes if we have a scalar\n                        # or a list-like on the non-info axes if we have a\n                        # list-like\n                        len_non_info_axes = (\n                            len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                        )\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    \"cannot set a frame with no \"\n                                    \"defined index and a scalar\"\n                                )\n                            self.obj[key] = value\n                            return\n\n                        # add a new item with the dtype setup\n                        self.obj[key] = _infer_fill_value(value)\n\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes\n                        )\n                        self._setitem_with_indexer(new_indexer, value)\n\n                        return\n\n                    # reindex the axis\n                    # make sure to clear the cache because we are\n                    # just replacing the block manager here\n                    # so the object is the same\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._data = self.obj.reindex(labels, axis=i)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n\n                    nindexer.append(labels.get_loc(key))\n\n                else:\n                    nindexer.append(idx)\n\n            indexer = tuple(nindexer)\n        else:\n\n            indexer, missing = convert_missing_indexer(indexer)\n\n            if missing:\n                self._setitem_with_indexer_missing(indexer, value)\n                return\n\n        # set\n        item_labels = self.obj._get_axis(info_axis)\n\n        # align and set the values\n        if take_split_path:\n            # Above we only set take_split_path to True for 2D cases\n            assert self.ndim == 2\n            assert info_axis == 1\n\n            if not isinstance(indexer, tuple):\n                indexer = _tuplify(self.ndim, indexer)\n\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n\n            # Ensure we have something we can iterate over\n            ilocs = info_idx\n            if isinstance(info_idx, slice):\n                ri = Index(range(len(self.obj.columns)))\n                ilocs = ri[info_idx]\n\n            plane_indexer = indexer[:1]\n            lplane_indexer = length_of_indexer(plane_indexer[0], self.obj.index)\n            # lplane_indexer gives the expected length of obj[indexer[0]]\n\n            if len(labels) == 1:\n                # We can operate on a single column\n\n                # require that we are setting the right number of values that\n                # we are indexing\n                if is_list_like_indexer(value) and 0 != lplane_indexer != len(value):\n                    # Exclude zero-len for e.g. boolean masking that is all-false\n                    raise ValueError(\n                        \"cannot set using a multi-index \"\n                        \"selection indexer with a different \"\n                        \"length than the value\"\n                    )\n\n            pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n            def isetter(loc, v):\n                # positional setting on column loc\n                ser = self.obj._ixs(loc, axis=1)\n\n                # perform the equivalent of a setitem on the info axis\n                # as we have a null slice or a slice with full bounds\n                # which means essentially reassign to the columns of a\n                # multi-dim object\n                # GH6149 (null slice), GH10408 (full bounds)\n                if isinstance(pi, tuple) and all(\n                    com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                    for idx in pi\n                ):\n                    ser = v\n                else:\n                    # set the item, possibly having a dtype change\n                    ser._consolidate_inplace()\n                    ser = ser.copy()\n                    ser._data = ser._data.setitem(indexer=pi, value=v)\n                    ser._maybe_update_cacher(clear=True)\n\n                # reset the sliced object if unique\n                self.obj._iset_item(loc, ser)\n\n            # we need an iterable, with a ndim of at least 1\n            # eg. don't pass through np.array(0)\n            if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n                # we have an equal len Frame\n                if isinstance(value, ABCDataFrame):\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, ABCMultiIndex)\n                    # TODO: we are implicitly assuming value.columns is unique\n\n                    for loc in ilocs:\n                        item = item_labels[loc]\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(\n                                tuple(sub_indexer), value[item], multiindex_indexer\n                            )\n                        else:\n                            v = np.nan\n\n                        isetter(loc, v)\n\n                # we have an equal len ndarray/convertible to our labels\n                # hasattr first, to avoid coercing to ndarray without reason.\n                # But we may be relying on the ndarray coercion to check ndim.\n                # Why not just convert to an ndarray earlier on if needed?\n                elif np.ndim(value) == 2:\n\n                    # note that this coerces the dtype if we are mixed\n                    # GH 7551\n                    value = np.array(value, dtype=object)\n                    if len(ilocs) != value.shape[1]:\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an ndarray\"\n                        )\n\n                    for i, loc in enumerate(ilocs):\n                        # setting with a list, re-coerces\n                        isetter(loc, value[:, i].tolist())\n\n                elif (\n                    len(labels) == 1\n                    and lplane_indexer == len(value)\n                    and not is_scalar(plane_indexer[0])\n                ):\n                    # we have an equal len list/ndarray\n                    # We only get here with len(labels) == len(ilocs) == 1\n                    isetter(ilocs[0], value)\n\n                elif lplane_indexer == 0 and len(value) == len(self.obj.index):\n                    # We get here in one case via .loc with a all-False mask\n                    pass\n\n                else:\n                    # per-label values\n                    if len(ilocs) != len(value):\n                        raise ValueError(\n                            \"Must have equal len keys and value \"\n                            \"when setting with an iterable\"\n                        )\n\n                    for loc, v in zip(ilocs, value):\n                        isetter(loc, v)\n            else:\n\n                # scalar value\n                for loc in ilocs:\n                    isetter(loc, value)\n\n        else:\n            if isinstance(indexer, tuple):\n\n                # if we are setting on the info axis ONLY\n                # set using those methods to avoid block-splitting\n                # logic here\n                if (\n                    len(indexer) > info_axis\n                    and is_integer(indexer[info_axis])\n                    and all(\n                        com.is_null_slice(idx)\n                        for i, idx in enumerate(indexer)\n                        if i != info_axis\n                    )\n                    and item_labels.is_unique\n                ):\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n\n                indexer = maybe_convert_ix(*indexer)\n\n            if isinstance(value, (ABCSeries, dict)):\n                # TODO(EA): ExtensionBlock.setitem this causes issues with\n                # setting for extensionarrays that store dicts. Need to decide\n                # if it's worth supporting that.\n                value = self._align_series(indexer, Series(value))\n\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n\n            # check for chained assignment\n            self.obj._check_is_chained_assignment_possible()\n\n            # actually do the set\n            self.obj._consolidate_inplace()\n            self.obj._data = self.obj._data.setitem(indexer=indexer, value=value)\n            self.obj._maybe_update_cacher(clear=True)",
        "begin_line": 1532,
        "end_line": 1813,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.convert_to_index_sliceable#2111",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_to_index_sliceable(obj, key)",
        "snippet": "def convert_to_index_sliceable(obj, key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj._data.items:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
        "begin_line": 2111,
        "end_line": 2133,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.check_bool_indexer#2136",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.check_bool_indexer(index: Index, key)",
        "snippet": "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done.\n    key : list-like\n        Boolean indexer to check.\n\n    Returns\n    -------\n    np.array\n        Resulting key.\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index.\n    IndexingError\n        If the index of the key is unalignable to index.\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    elif is_object_dtype(key):\n        # key might be object-dtype bool, check_array_indexer needs bool array\n        result = np.asarray(result, dtype=bool)\n        result = check_array_indexer(index, result)\n    else:\n        result = check_array_indexer(index, result)\n\n    return result",
        "begin_line": 2136,
        "end_line": 2180,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.convert_missing_indexer#2183",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.convert_missing_indexer(indexer)",
        "snippet": "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
        "begin_line": 2183,
        "end_line": 2197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.is_nested_tuple#2226",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_nested_tuple(tup, labels)",
        "snippet": "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for i, k in enumerate(tup):\n\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
        "begin_line": 2226,
        "end_line": 2241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexing.is_label_like#2244",
        "src_path": "pandas/core/indexing.py",
        "class_name": "pandas.core.indexing",
        "signature": "pandas.core.indexing.is_label_like(key)",
        "snippet": "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
        "begin_line": 2244,
        "end_line": 2251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001564945226917058,
            "pseudo_dstar_susp": 0.0008389261744966443,
            "pseudo_tarantula_susp": 0.0018450184501845018,
            "pseudo_op2_susp": 0.0008389261744966443,
            "pseudo_barinel_susp": 0.0018450184501845018
        }
    },
    {
        "name": "pandas.core.missing.clean_fill_method#73",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_fill_method(method, allow_nearest=False)",
        "snippet": "def clean_fill_method(method, allow_nearest=False):\n    # asfreq is compat for resampling\n    if method in [None, \"asfreq\"]:\n        return None\n\n    if isinstance(method, str):\n        method = method.lower()\n        if method == \"ffill\":\n            method = \"pad\"\n        elif method == \"bfill\":\n            method = \"backfill\"\n\n    valid_methods = [\"pad\", \"backfill\"]\n    expecting = \"pad (ffill) or backfill (bfill)\"\n    if allow_nearest:\n        valid_methods.append(\"nearest\")\n        expecting = \"pad (ffill), backfill (bfill) or nearest\"\n    if method not in valid_methods:\n        raise ValueError(f\"Invalid fill method. Expecting {expecting}. Got {method}\")\n    return method",
        "begin_line": 73,
        "end_line": 92,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.missing.clean_reindex_fill_method#601",
        "src_path": "pandas/core/missing.py",
        "class_name": "pandas.core.missing",
        "signature": "pandas.core.missing.clean_reindex_fill_method(method)",
        "snippet": "def clean_reindex_fill_method(method):\n    return clean_fill_method(method, allow_nearest=True)",
        "begin_line": 601,
        "end_line": 602,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__new__#153",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True)",
        "snippet": "    def __new__(cls, data, closed=None, dtype=None, copy=False, verify_integrity=True):\n\n        if isinstance(data, ABCSeries) and is_interval_dtype(data):\n            data = data.values\n\n        if isinstance(data, (cls, ABCIntervalIndex)):\n            left = data.left\n            right = data.right\n            closed = closed or data.closed\n        else:\n\n            # don't allow scalars\n            if is_scalar(data):\n                msg = (\n                    f\"{cls.__name__}(...) must be called with a collection \"\n                    f\"of some kind, {data} was passed\"\n                )\n                raise TypeError(msg)\n\n            # might need to convert empty or purely na data\n            data = maybe_convert_platform_interval(data)\n            left, right, infer_closed = intervals_to_interval_bounds(\n                data, validate_closed=closed is None\n            )\n            closed = closed or infer_closed\n\n        return cls._simple_new(\n            left,\n            right,\n            closed,\n            copy=copy,\n            dtype=dtype,\n            verify_integrity=verify_integrity,\n        )",
        "begin_line": 153,
        "end_line": 186,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._simple_new#189",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._simple_new(cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True)",
        "snippet": "    def _simple_new(\n        cls, left, right, closed=None, copy=False, dtype=None, verify_integrity=True\n    ):\n        result = IntervalMixin.__new__(cls)\n\n        closed = closed or \"right\"\n        left = ensure_index(left, copy=copy)\n        right = ensure_index(right, copy=copy)\n\n        if dtype is not None:\n            # GH 19262: dtype must be an IntervalDtype to override inferred\n            dtype = pandas_dtype(dtype)\n            if not is_interval_dtype(dtype):\n                msg = f\"dtype must be an IntervalDtype, got {dtype}\"\n                raise TypeError(msg)\n            elif dtype.subtype is not None:\n                left = left.astype(dtype.subtype)\n                right = right.astype(dtype.subtype)\n\n        # coerce dtypes to match if needed\n        if is_float_dtype(left) and is_integer_dtype(right):\n            right = right.astype(left.dtype)\n        elif is_float_dtype(right) and is_integer_dtype(left):\n            left = left.astype(right.dtype)\n\n        if type(left) != type(right):\n            msg = (\n                f\"must not have differing left [{type(left).__name__}] and \"\n                f\"right [{type(right).__name__}] types\"\n            )\n            raise ValueError(msg)\n        elif is_categorical_dtype(left.dtype) or is_string_dtype(left.dtype):\n            # GH 19016\n            msg = (\n                \"category, object, and string subtypes are not supported \"\n                \"for IntervalArray\"\n            )\n            raise TypeError(msg)\n        elif isinstance(left, ABCPeriodIndex):\n            msg = \"Period dtypes are not supported, use a PeriodIndex instead\"\n            raise ValueError(msg)\n        elif isinstance(left, ABCDatetimeIndex) and str(left.tz) != str(right.tz):\n            msg = (\n                \"left and right must have the same time zone, got \"\n                f\"'{left.tz}' and '{right.tz}'\"\n            )\n            raise ValueError(msg)\n\n        result._left = left\n        result._right = right\n        result._closed = closed\n        if verify_integrity:\n            result._validate()\n        return result",
        "begin_line": 189,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._from_sequence#245",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars, dtype=dtype, copy=copy)",
        "begin_line": 245,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_breaks#306",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_breaks(cls, breaks, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_breaks(cls, breaks, closed=\"right\", copy=False, dtype=None):\n        breaks = maybe_convert_platform_interval(breaks)\n\n        return cls.from_arrays(breaks[:-1], breaks[1:], closed, copy=copy, dtype=dtype)",
        "begin_line": 306,
        "end_line": 309,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.from_arrays#377",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.from_arrays(cls, left, right, closed='right', copy=False, dtype=None)",
        "snippet": "    def from_arrays(cls, left, right, closed=\"right\", copy=False, dtype=None):\n        left = maybe_convert_platform_interval(left)\n        right = maybe_convert_platform_interval(right)\n\n        return cls._simple_new(\n            left, right, closed, copy=copy, dtype=dtype, verify_integrity=True\n        )",
        "begin_line": 377,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._validate#462",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._validate(self)",
        "snippet": "    def _validate(self):\n        \"\"\"\n        Verify that the IntervalArray is valid.\n\n        Checks that\n\n        * closed is valid\n        * left and right match lengths\n        * left and right have the same missing values\n        * left is always below right\n        \"\"\"\n        if self.closed not in _VALID_CLOSED:\n            msg = f\"invalid option for 'closed': {self.closed}\"\n            raise ValueError(msg)\n        if len(self.left) != len(self.right):\n            msg = \"left and right must have the same length\"\n            raise ValueError(msg)\n        left_mask = notna(self.left)\n        right_mask = notna(self.right)\n        if not (left_mask == right_mask).all():\n            msg = (\n                \"missing values must be missing in the same \"\n                \"location both left and right sides\"\n            )\n            raise ValueError(msg)\n        if not (self.left[left_mask] <= self.right[left_mask]).all():\n            msg = \"left side of interval must be <= right side\"\n            raise ValueError(msg)",
        "begin_line": 462,
        "end_line": 489,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__len__#497",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.left)",
        "begin_line": 497,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__getitem__#500",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__getitem__(self, value)",
        "snippet": "    def __getitem__(self, value):\n        value = check_array_indexer(self, value)\n        left = self.left[value]\n        right = self.right[value]\n\n        # scalar\n        if not isinstance(left, ABCIndexClass):\n            if is_scalar(left) and isna(left):\n                return self._fill_value\n            if np.ndim(left) > 1:\n                # GH#30588 multi-dimensional indexer disallowed\n                raise ValueError(\"multi-dimensional indexing not allowed\")\n            return Interval(left, right, self.closed)\n\n        return self._shallow_copy(left, right)",
        "begin_line": 500,
        "end_line": 514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.dtype#660",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return IntervalDtype(self.left.dtype)",
        "begin_line": 660,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.astype#663",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to an ExtensionArray or NumPy array with dtype 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        array : ExtensionArray or ndarray\n            ExtensionArray or NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n        dtype = pandas_dtype(dtype)\n        if is_interval_dtype(dtype):\n            if dtype == self.dtype:\n                return self.copy() if copy else self\n\n            # need to cast to different subtype\n            try:\n                new_left = self.left.astype(dtype.subtype)\n                new_right = self.right.astype(dtype.subtype)\n            except TypeError as err:\n                msg = (\n                    f\"Cannot convert {self.dtype} to {dtype}; subtypes are incompatible\"\n                )\n                raise TypeError(msg) from err\n            return self._shallow_copy(new_left, new_right)\n        elif is_categorical_dtype(dtype):\n            return Categorical(np.asarray(self))\n        # TODO: This try/except will be repeated.\n        try:\n            return np.asarray(self).astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg) from err",
        "begin_line": 663,
        "end_line": 704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.isna#755",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.isna(self)",
        "snippet": "    def isna(self):\n        return isna(self.left)",
        "begin_line": 755,
        "end_line": 756,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray._format_data#888",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray._format_data(self)",
        "snippet": "    def _format_data(self):\n\n        # TODO: integrate with categorical and make generic\n        # name argument is unused here; just for compat with base / categorical\n        n = len(self)\n        max_seq_items = min((get_option(\"display.max_seq_items\") or n) // 10, 10)\n\n        formatter = str\n\n        if n == 0:\n            summary = \"[]\"\n        elif n == 1:\n            first = formatter(self[0])\n            summary = f\"[{first}]\"\n        elif n == 2:\n            first = formatter(self[0])\n            last = formatter(self[-1])\n            summary = f\"[{first}, {last}]\"\n        else:\n\n            if n > max_seq_items:\n                n = min(max_seq_items // 2, 10)\n                head = [formatter(x) for x in self[:n]]\n                tail = [formatter(x) for x in self[-n:]]\n                head_str = \", \".join(head)\n                tail_str = \", \".join(tail)\n                summary = f\"[{head_str} ... {tail_str}]\"\n            else:\n                tail = [formatter(x) for x in self]\n                tail_str = \", \".join(tail)\n                summary = f\"[{tail_str}]\"\n\n        return summary",
        "begin_line": 888,
        "end_line": 920,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__repr__#922",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__repr__(self)",
        "snippet": "    def __repr__(self) -> str:\n        # the short repr has no trailing newline, while the truncated\n        # repr does. So we include a newline in our template, and strip\n        # any trailing newlines from format_object_summary\n        data = self._format_data()\n        class_name = f\"<{type(self).__name__}>\\n\"\n\n        template = (\n            f\"{class_name}\"\n            f\"{data}\\n\"\n            f\"Length: {len(self)}, closed: {self.closed}, dtype: {self.dtype}\"\n        )\n        return template",
        "begin_line": 922,
        "end_line": 934,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.left#941",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.left(self)",
        "snippet": "    def left(self):\n        \"\"\"\n        Return the left endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._left",
        "begin_line": 941,
        "end_line": 946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.right#949",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.right(self)",
        "snippet": "    def right(self):\n        \"\"\"\n        Return the right endpoints of each Interval in the IntervalArray as\n        an Index.\n        \"\"\"\n        return self._right",
        "begin_line": 949,
        "end_line": 954,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.closed#957",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.closed(self)",
        "snippet": "    def closed(self):\n        \"\"\"\n        Whether the intervals are closed on the left-side, right-side, both or\n        neither.\n        \"\"\"\n        return self._closed",
        "begin_line": 957,
        "end_line": 962,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.arrays.interval.IntervalArray.__array__#1076",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval.IntervalArray",
        "signature": "pandas.core.arrays.interval.IntervalArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        Return the IntervalArray's data as a numpy array of Interval\n        objects (with dtype='object')\n        \"\"\"\n        left = self.left\n        right = self.right\n        mask = self.isna()\n        closed = self._closed\n\n        result = np.empty(len(left), dtype=object)\n        for i in range(len(left)):\n            if mask[i]:\n                result[i] = np.nan\n            else:\n                result[i] = Interval(left[i], right[i], closed)\n        return result",
        "begin_line": 1076,
        "end_line": 1092,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.0010277492291880781,
            "pseudo_tarantula_susp": 0.003875968992248062,
            "pseudo_op2_susp": 0.0010277492291880781,
            "pseudo_barinel_susp": 0.003875968992248062
        }
    },
    {
        "name": "pandas.core.arrays.interval.maybe_convert_platform_interval#1311",
        "src_path": "pandas/core/arrays/interval.py",
        "class_name": "pandas.core.arrays.interval",
        "signature": "pandas.core.arrays.interval.maybe_convert_platform_interval(values)",
        "snippet": "def maybe_convert_platform_interval(values):\n    \"\"\"\n    Try to do platform conversion, with special casing for IntervalArray.\n    Wrapper around maybe_convert_platform that alters the default return\n    dtype in certain cases to be compatible with IntervalArray.  For example,\n    empty lists return with integer dtype instead of object dtype, which is\n    prohibited for IntervalArray.\n\n    Parameters\n    ----------\n    values : array-like\n\n    Returns\n    -------\n    array\n    \"\"\"\n    if isinstance(values, (list, tuple)) and len(values) == 0:\n        # GH 19016\n        # empty lists/tuples get object dtype by default, but this is\n        # prohibited for IntervalArray, so coerce to integer instead\n        return np.array([], dtype=np.int64)\n    elif is_categorical_dtype(values):\n        values = np.asarray(values)\n\n    return maybe_convert_platform(values)",
        "begin_line": 1311,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__#131",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        unit=None,\n        freq=None,\n        closed=None,\n        dtype=_TD_DTYPE,\n        copy=False,\n        name=None,\n    ):\n        name = maybe_extract_name(name, data, cls)\n\n        if is_scalar(data):\n            raise TypeError(\n                f\"{cls.__name__}() must be called with a \"\n                f\"collection of some kind, {repr(data)} was passed\"\n            )\n\n        if unit in {\"Y\", \"y\", \"M\"}:\n            raise ValueError(\n                \"Units 'M' and 'Y' are no longer supported, as they do not \"\n                \"represent unambiguous timedelta values durations.\"\n            )\n\n        if isinstance(data, TimedeltaArray) and freq is None:\n            if copy:\n                data = data.copy()\n            return cls._simple_new(data, name=name)\n\n        if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n            if copy:\n                return data.copy()\n            else:\n                return data._shallow_copy()\n\n        # - Cases checked above all return/raise before reaching here - #\n\n        tdarr = TimedeltaArray._from_sequence(\n            data, freq=freq, unit=unit, dtype=dtype, copy=copy\n        )\n        return cls._simple_new(tdarr, name=name)",
        "begin_line": 131,
        "end_line": 171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new#174",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls, values: TimedeltaArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: TimedeltaArray, name: Label = None):\n        assert isinstance(values, TimedeltaArray)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._name = name\n        result._cache = {}\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n\n        result._reset_identity()\n        return result",
        "begin_line": 174,
        "end_line": 185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type#282",
        "src_path": "pandas/core/indexes/timedeltas.py",
        "class_name": "pandas.core.indexes.timedeltas.TimedeltaIndex",
        "signature": "pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"timedelta64\"",
        "begin_line": 282,
        "end_line": 283,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.computation.expressions._evaluate_standard#60",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._evaluate_standard(op, op_str, a, b)",
        "snippet": "def _evaluate_standard(op, op_str, a, b):\n    \"\"\"\n    Standard evaluation.\n    \"\"\"\n    if _TEST_MODE:\n        _store_test_result(False)\n    with np.errstate(all=\"ignore\"):\n        return op(a, b)",
        "begin_line": 60,
        "end_line": 67,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.computation.expressions._has_bool_dtype#150",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._has_bool_dtype(x)",
        "snippet": "def _has_bool_dtype(x):\n    if isinstance(x, ABCDataFrame):\n        return \"bool\" in x.dtypes\n    try:\n        return x.dtype == bool\n    except AttributeError:\n        return isinstance(x, (bool, np.bool_))",
        "begin_line": 150,
        "end_line": 156,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.computation.expressions._bool_arith_check#159",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions._bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')), unsupported=None)",
        "snippet": "def _bool_arith_check(\n    op_str, a, b, not_allowed=frozenset((\"/\", \"//\", \"**\")), unsupported=None\n):\n    if unsupported is None:\n        unsupported = {\"+\": \"|\", \"*\": \"&\", \"-\": \"^\"}\n\n    if _has_bool_dtype(a) and _has_bool_dtype(b):\n        if op_str in unsupported:\n            warnings.warn(\n                f\"evaluating in Python space because the {repr(op_str)} \"\n                \"operator is not supported by numexpr for \"\n                f\"the bool dtype, use {repr(unsupported[op_str])} instead\"\n            )\n            return False\n\n        if op_str in not_allowed:\n            raise NotImplementedError(\n                f\"operator {repr(op_str)} not implemented for bool dtypes\"\n            )\n    return True",
        "begin_line": 159,
        "end_line": 178,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.computation.expressions.evaluate#181",
        "src_path": "pandas/core/computation/expressions.py",
        "class_name": "pandas.core.computation.expressions",
        "signature": "pandas.core.computation.expressions.evaluate(op, op_str, a, b, use_numexpr=True)",
        "snippet": "def evaluate(op, op_str, a, b, use_numexpr=True):\n    \"\"\"\n    Evaluate and return the expression of the op on a and b.\n\n    Parameters\n    ----------\n    op : the actual operand\n    op_str : str\n        The string version of the op.\n    a : left operand\n    b : right operand\n    use_numexpr : bool, default True\n        Whether to try to use numexpr.\n    \"\"\"\n    use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n    if use_numexpr:\n        return _evaluate(op, op_str, a, b)\n    return _evaluate_standard(op, op_str, a, b)",
        "begin_line": 181,
        "end_line": 198,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__init__#198",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__init__(self, data: BlockManager, copy: bool=False, attrs: Optional[Mapping[Optional[Hashable], Any]]=None)",
        "snippet": "    def __init__(\n        self,\n        data: BlockManager,\n        copy: bool = False,\n        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    ):\n        # copy kwarg is retained for mypy compat, is not used\n\n        object.__setattr__(self, \"_is_copy\", None)\n        object.__setattr__(self, \"_data\", data)\n        object.__setattr__(self, \"_item_cache\", {})\n        if attrs is None:\n            attrs = {}\n        else:\n            attrs = dict(attrs)\n        object.__setattr__(self, \"_attrs\", attrs)",
        "begin_line": 198,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009182736455463728,
            "pseudo_dstar_susp": 0.0029239766081871343,
            "pseudo_tarantula_susp": 0.0008680555555555555,
            "pseudo_op2_susp": 0.0029239766081871343,
            "pseudo_barinel_susp": 0.0008680555555555555
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._init_mgr#216",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._init_mgr(cls, mgr, axes=None, dtype=None, copy=False)",
        "snippet": "    def _init_mgr(cls, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(\n                    axe, axis=cls._get_block_manager_axis(a), copy=False\n                )\n\n        # make a copy if explicitly requested\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            # avoid further copies if we can\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr",
        "begin_line": 216,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.attrs#236",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.attrs(self)",
        "snippet": "    def attrs(self) -> Dict[Optional[Hashable], Any]:\n        \"\"\"\n        Dictionary of global attributes on this object.\n\n        .. warning::\n\n           attrs is experimental and may change without warning.\n        \"\"\"\n        if self._attrs is None:\n            self._attrs = {}\n        return self._attrs",
        "begin_line": 236,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019455252918287938,
            "pseudo_dstar_susp": 0.005714285714285714,
            "pseudo_tarantula_susp": 0.001148105625717566,
            "pseudo_op2_susp": 0.005714285714285714,
            "pseudo_barinel_susp": 0.001148105625717566
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._validate_dtype#253",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._validate_dtype(cls, dtype)",
        "snippet": "    def _validate_dtype(cls, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n\n            # a compound dtype\n            if dtype.kind == \"V\":\n                raise NotImplementedError(\n                    \"compound dtypes are not implemented \"\n                    f\"in the {cls.__name__} constructor\"\n                )\n\n        return dtype",
        "begin_line": 253,
        "end_line": 265,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007942811755361397,
            "pseudo_dstar_susp": 0.0014347202295552368,
            "pseudo_tarantula_susp": 0.0008833922261484099,
            "pseudo_op2_susp": 0.0014347202295552368,
            "pseudo_barinel_susp": 0.0008833922261484099
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_dict#309",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_dict(self, axes=None, **kwargs)",
        "snippet": "    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n        d.update(kwargs)\n        return d",
        "begin_line": 309,
        "end_line": 313,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._construct_axes_from_arguments#316",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._construct_axes_from_arguments(cls, args, kwargs, require_all: bool=False, sentinel=None)",
        "snippet": "    def _construct_axes_from_arguments(\n        cls, args, kwargs, require_all: bool = False, sentinel=None\n    ):\n        \"\"\"\n        Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n\n        sentinel specifies the default parameter when an axis is not\n        supplied; useful to distinguish when a user explicitly passes None\n        in scenarios where None has special meaning.\n        \"\"\"\n        # construct the args\n        args = list(args)\n        for a in cls._AXIS_ORDERS:\n\n            # look for a argument by position\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError as err:\n                    if require_all:\n                        raise TypeError(\n                            \"not enough/duplicate arguments specified!\"\n                        ) from err\n\n        axes = {a: kwargs.pop(a, sentinel) for a in cls._AXIS_ORDERS}\n        return axes, kwargs",
        "begin_line": 316,
        "end_line": 344,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_number#347",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_number(cls, axis)",
        "snippet": "    def _get_axis_number(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in cls._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls}\")",
        "begin_line": 347,
        "end_line": 357,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016849199663016007,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis_name#360",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis_name(cls, axis)",
        "snippet": "    def _get_axis_name(cls, axis):\n        axis = cls._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, str):\n            if axis in cls._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return cls._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError(f\"No axis named {axis} for object type {cls}\")",
        "begin_line": 360,
        "end_line": 370,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_axis#372",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_axis(self, axis)",
        "snippet": "    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)",
        "begin_line": 372,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006949270326615705,
            "pseudo_dstar_susp": 0.0006531678641410843,
            "pseudo_tarantula_susp": 0.0009652509652509653,
            "pseudo_op2_susp": 0.0006531678641410843,
            "pseudo_barinel_susp": 0.0009652509652509653
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_block_manager_axis#377",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_block_manager_axis(cls, axis)",
        "snippet": "    def _get_block_manager_axis(cls, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = cls._get_axis_number(axis)\n        if cls._AXIS_REVERSED:\n            m = cls._AXIS_LEN - 1\n            return m - axis\n        return axis",
        "begin_line": 377,
        "end_line": 383,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._info_axis#442",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._info_axis(self)",
        "snippet": "    def _info_axis(self):\n        return getattr(self, self._info_axis_name)",
        "begin_line": 442,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.ndim#466",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim",
        "begin_line": 466,
        "end_line": 486,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._indexed_same#1231",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._indexed_same(self, other)",
        "snippet": "    def _indexed_same(self, other) -> bool:\n        return all(\n            self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n        )",
        "begin_line": 1231,
        "end_line": 1234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__invert__#1354",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__invert__(self)",
        "snippet": "    def __invert__(self):\n        if not self.size:\n            # inv fails with 0 len\n            return self\n\n        new_data = self._data.apply(operator.invert)\n        result = self._constructor(new_data).__finalize__(self)\n        return result",
        "begin_line": 1354,
        "end_line": 1361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__contains__#1734",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__contains__(self, key)",
        "snippet": "    def __contains__(self, key) -> bool_t:\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis",
        "begin_line": 1734,
        "end_line": 1736,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_as_cached#3192",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_as_cached(self, item, cacher)",
        "snippet": "    def _set_as_cached(self, item, cacher) -> None:\n        \"\"\"\n        Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = (item, weakref.ref(cacher))",
        "begin_line": 3192,
        "end_line": 3197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.0007358351729212656,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.0007358351729212656,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._maybe_update_cacher#3224",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True)",
        "snippet": "    def _maybe_update_cacher(\n        self, clear: bool_t = False, verify_is_copy: bool_t = True\n    ) -> None:\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : bool, default False\n            Clear the item cache.\n        verify_is_copy : bool, default True\n            Provide is_copy checks.\n        \"\"\"\n        cacher = getattr(self, \"_cacher\", None)\n        if cacher is not None:\n            ref = cacher[1]()\n\n            # we are trying to reference a dead referant, hence\n            # a copy\n            if ref is None:\n                del self._cacher\n            else:\n                # Note: we need to call ref._maybe_cache_changed even in the\n                #  case where it will raise.  (Uh, not clear why)\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except AssertionError:\n                    # ref._data.setitem can raise\n                    #  AssertionError because of shape mismatch\n                    pass\n\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n        if clear:\n            self._clear_item_cache()",
        "begin_line": 3224,
        "end_line": 3260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._clear_item_cache#3262",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._clear_item_cache(self)",
        "snippet": "    def _clear_item_cache(self) -> None:\n        self._item_cache.clear()",
        "begin_line": 3262,
        "end_line": 3263,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._get_item_cache#3546",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._get_item_cache(self, item)",
        "snippet": "    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n\n            # for a chain\n            res._is_copy = self._is_copy\n        return res",
        "begin_line": 3546,
        "end_line": 3558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._set_item#3584",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._set_item(self, key, value)",
        "snippet": "    def _set_item(self, key, value) -> None:\n        self._data.set(key, value)\n        self._clear_item_cache()",
        "begin_line": 3584,
        "end_line": 3586,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible#3595",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)",
        "snippet": "    def _check_is_chained_assignment_possible(self) -> bool_t:\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\")\n        return False",
        "begin_line": 3595,
        "end_line": 3613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._check_setitem_copy#3615",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
        "snippet": "    def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : int, default 4\n           the level to show of the stack when the error is output\n        t : str, the type of setting error\n        force : bool, default False\n           If True, then force showing an error.\n\n        validate if we are doing a setitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        # return early if the check is not needed\n        if not (force or self._is_copy):\n            return\n\n        value = config.get_option(\"mode.chained_assignment\")\n        if value is None:\n            return\n\n        # see if the copy is not actually referred; if so, then dissolve\n        # the copy weakref\n        if self._is_copy is not None and not isinstance(self._is_copy, str):\n            r = self._is_copy()\n            if not gc.get_referents(r) or r.shape == self.shape:\n                self._is_copy = None\n                return\n\n        # a custom message\n        if isinstance(self._is_copy, str):\n            t = self._is_copy\n\n        elif t == \"referant\":\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame\\n\\n\"\n                \"See the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        else:\n            t = (\n                \"\\n\"\n                \"A value is trying to be set on a copy of a slice from a \"\n                \"DataFrame.\\n\"\n                \"Try using .loc[row_indexer,col_indexer] = value \"\n                \"instead\\n\\nSee the caveats in the documentation: \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n                \"indexing.html#returning-a-view-versus-a-copy\"\n            )\n\n        if value == \"raise\":\n            raise com.SettingWithCopyError(t)\n        elif value == \"warn\":\n            warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
        "begin_line": 3615,
        "end_line": 3689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_view#3748",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_view(self)",
        "snippet": "    def _is_view(self) -> bool_t:\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view",
        "begin_line": 3748,
        "end_line": 3750,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex_like#3752",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
        "snippet": "    def reindex_like(\n        self: FrameOrSeries,\n        other,\n        method: Optional[str] = None,\n        copy: bool_t = True,\n        limit=None,\n        tolerance=None,\n    ) -> FrameOrSeries:\n        \"\"\"\n        Return an object with matching indices as other object.\n\n        Conform the object to the same index on all axes. Optional\n        filling logic, placing NaN in locations having no value\n        in the previous index. A new object is produced unless the\n        new index is equivalent to the current one and copy=False.\n\n        Parameters\n        ----------\n        other : Object of the same data type\n            Its row and column indices are used to define the new indices\n            of this object.\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as caller, but with changed indices on each axis.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex : Change to new indices or expand indices.\n\n        Notes\n        -----\n        Same as calling\n        ``.reindex(index=other.index, columns=other.columns,...)``.\n\n        Examples\n        --------\n        >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n        ...                     [31, 87.8, 'high'],\n        ...                     [22, 71.6, 'medium'],\n        ...                     [35, 95, 'medium']],\n        ...                    columns=['temp_celsius', 'temp_fahrenheit',\n        ...                             'windspeed'],\n        ...                    index=pd.date_range(start='2014-02-12',\n        ...                                        end='2014-02-15', freq='D'))\n\n        >>> df1\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          24.3             75.7      high\n        2014-02-13          31.0             87.8      high\n        2014-02-14          22.0             71.6    medium\n        2014-02-15          35.0             95.0    medium\n\n        >>> df2 = pd.DataFrame([[28, 'low'],\n        ...                     [30, 'low'],\n        ...                     [35.1, 'medium']],\n        ...                    columns=['temp_celsius', 'windspeed'],\n        ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n        ...                                            '2014-02-15']))\n\n        >>> df2\n                    temp_celsius windspeed\n        2014-02-12          28.0       low\n        2014-02-13          30.0       low\n        2014-02-15          35.1    medium\n\n        >>> df2.reindex_like(df1)\n                    temp_celsius  temp_fahrenheit windspeed\n        2014-02-12          28.0              NaN       low\n        2014-02-13          30.0              NaN       low\n        2014-02-14           NaN              NaN       NaN\n        2014-02-15          35.1              NaN    medium\n        \"\"\"\n        d = other._construct_axes_dict(\n            axes=self._AXIS_ORDERS,\n            method=method,\n            copy=copy,\n            limit=limit,\n            tolerance=tolerance,\n        )\n\n        return self.reindex(**d)",
        "begin_line": 3752,
        "end_line": 3863,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.reindex#4193",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.reindex(self: FrameOrSeries, *args, **kwargs)",
        "snippet": "    def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n        \"\"\"\n        Conform %(klass)s to new index with optional filling logic.\n\n        Places NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        ``copy=False``.\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional\n            New labels / index to conform to, should be specified using\n            keywords. Preferably an Index object to avoid duplicating data.\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n            Method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * None (default): don't fill gaps\n            * pad / ffill: Propagate last valid observation forward to next\n              valid.\n            * backfill / bfill: Use next valid observation to fill gap.\n            * nearest: Use nearest valid observations to fill gap.\n\n        copy : bool, default True\n            Return a new object, even if the passed indexes are the same.\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value.\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill.\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        %(klass)s with changed index.\n\n        See Also\n        --------\n        DataFrame.set_index : Set row labels.\n        DataFrame.reset_index : Remove row labels or move them to new columns.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n        ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...                   index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...              'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29   100.0\n        2009-12-30   100.0\n        2009-12-31   100.0\n        2010-01-01   100.0\n        2010-01-02   101.0\n        2010-01-03     NaN\n        2010-01-04   100.0\n        2010-01-05    89.0\n        2010-01-06    88.0\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n        \"\"\"\n        # TODO: Decide if we care about having different examples for different\n        # kinds\n\n        # construct the args\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n        level = kwargs.pop(\"level\", None)\n        copy = kwargs.pop(\"copy\", True)\n        limit = kwargs.pop(\"limit\", None)\n        tolerance = kwargs.pop(\"tolerance\", None)\n        fill_value = kwargs.pop(\"fill_value\", None)\n\n        # Series.reindex doesn't use / need the axis kwarg\n        # We pop and ignore it here, to make writing Series/Frame generic code\n        # easier\n        kwargs.pop(\"axis\", None)\n\n        if kwargs:\n            raise TypeError(\n                \"reindex() got an unexpected keyword \"\n                f'argument \"{list(kwargs.keys())[0]}\"'\n            )\n\n        self._consolidate_inplace()\n\n        # if all axes that are requested to reindex are equal, then only copy\n        # if indicated must have index names equal here as well as values\n        if all(\n            self._get_axis(axis).identical(ax)\n            for axis, ax in axes.items()\n            if ax is not None\n        ):\n            if copy:\n                return self.copy()\n            return self\n\n        # check if we are a multi reindex\n        if self._needs_reindex_multi(axes, method, level):\n            return self._reindex_multi(axes, copy, fill_value)\n\n        # perform the reindex on the axes\n        return self._reindex_axes(\n            axes, level, limit, tolerance, method, fill_value, copy\n        ).__finalize__(self)",
        "begin_line": 4193,
        "end_line": 4438,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._needs_reindex_multi#4465",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._needs_reindex_multi(self, axes, method, level)",
        "snippet": "    def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (\n            (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n            and method is None\n            and level is None\n            and not self._is_mixed_type\n        )",
        "begin_line": 4465,
        "end_line": 4472,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._reindex_with_indexers#4477",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
        "snippet": "    def _reindex_with_indexers(\n        self: FrameOrSeries,\n        reindexers,\n        fill_value=None,\n        copy: bool_t = False,\n        allow_dups: bool_t = False,\n    ) -> FrameOrSeries:\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n        # reindex doing multiple operations on different axes if indicated\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n\n            if index is None:\n                continue\n\n            index = ensure_index(index)\n            if indexer is not None:\n                indexer = ensure_int64(indexer)\n\n            # TODO: speed up on homogeneous DataFrame objects\n            new_data = new_data.reindex_indexer(\n                index,\n                indexer,\n                axis=baxis,\n                fill_value=fill_value,\n                allow_dups=allow_dups,\n                copy=copy,\n            )\n\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n\n        return self._constructor(new_data).__finalize__(self)",
        "begin_line": 4477,
        "end_line": 4511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__finalize__#5136",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__finalize__(self: FrameOrSeries, other, method=None, **kwargs)",
        "snippet": "    def __finalize__(\n        self: FrameOrSeries, other, method=None, **kwargs\n    ) -> FrameOrSeries:\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in other.attrs:\n                self.attrs[name] = other.attrs[name]\n            # For subclasses using _metadata.\n            for name in self._metadata:\n                assert isinstance(name, str)\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self",
        "begin_line": 5136,
        "end_line": 5157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019455252918287938,
            "pseudo_dstar_susp": 0.005714285714285714,
            "pseudo_tarantula_susp": 0.001148105625717566,
            "pseudo_op2_susp": 0.005714285714285714,
            "pseudo_barinel_susp": 0.001148105625717566
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__getattr__#5159",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__getattr__(self, name: str)",
        "snippet": "    def __getattr__(self, name: str):\n        \"\"\"\n        After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n\n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)",
        "begin_line": 5159,
        "end_line": 5176,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000966183574879227,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0009124087591240876,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0009124087591240876
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.__setattr__#5178",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.__setattr__(self, name: str, value)",
        "snippet": "    def __setattr__(self, name: str, value) -> None:\n        \"\"\"\n        After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        # first try regular attribute access via __getattribute__, so that\n        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n        # the same attribute.\n\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n\n        # if this fails, go on to more involved attribute setting\n        # (note that this matches __getattr__, above).\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be \"\n                        \"created via a new attribute name - see \"\n                        \"https://pandas.pydata.org/pandas-docs/\"\n                        \"stable/indexing.html#attribute-access\",\n                        stacklevel=2,\n                    )\n                object.__setattr__(self, name, value)",
        "begin_line": 5178,
        "end_line": 5217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012004801920768306,
            "pseudo_dstar_susp": 0.003355704697986577,
            "pseudo_tarantula_susp": 0.0013175230566534915,
            "pseudo_op2_susp": 0.003355704697986577,
            "pseudo_barinel_susp": 0.0013175230566534915
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._protect_consolidate#5234",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._protect_consolidate(self, f)",
        "snippet": "    def _protect_consolidate(self, f):\n        \"\"\"\n        Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result",
        "begin_line": 5234,
        "end_line": 5243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._consolidate_inplace#5245",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._consolidate_inplace(self)",
        "snippet": "    def _consolidate_inplace(self) -> None:\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n\n        self._protect_consolidate(f)",
        "begin_line": 5245,
        "end_line": 5251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.f#5248",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.f()",
        "snippet": "        def f():\n            self._data = self._data.consolidate()",
        "begin_line": 5248,
        "end_line": 5249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._is_mixed_type#5276",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._is_mixed_type(self)",
        "snippet": "    def _is_mixed_type(self) -> bool_t:\n        f = lambda: self._data.is_mixed_type\n        return self._protect_consolidate(f)",
        "begin_line": 5276,
        "end_line": 5278,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame._to_dict_of_blocks#5424",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame._to_dict_of_blocks(self, copy: bool_t=True)",
        "snippet": "    def _to_dict_of_blocks(self, copy: bool_t = True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {\n            k: self._constructor(v).__finalize__(self)\n            for k, v, in self._data.to_dict(copy=copy).items()\n        }",
        "begin_line": 5424,
        "end_line": 5434,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.astype#5436",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise')",
        "snippet": "    def astype(\n        self: FrameOrSeries, dtype, copy: bool_t = True, errors: str = \"raise\"\n    ) -> FrameOrSeries:\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object.\n\n        Returns\n        -------\n        casted : same type as caller\n\n        See Also\n        --------\n        to_datetime : Convert argument to datetime.\n        to_timedelta : Convert argument to timedelta.\n        to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n        Examples\n        --------\n        Create a DataFrame:\n\n        >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df = pd.DataFrame(data=d)\n        >>> df.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n\n        Cast all columns to int32:\n\n        >>> df.astype('int32').dtypes\n        col1    int32\n        col2    int32\n        dtype: object\n\n        Cast col1 to int32 using a dictionary:\n\n        >>> df.astype({'col1': 'int32'}).dtypes\n        col1    int32\n        col2    int64\n        dtype: object\n\n        Create a series:\n\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> cat_dtype = pd.api.types.CategoricalDtype(\n        ...     categories=[2, 1], ordered=True)\n        >>> ser.astype(cat_dtype)\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1, 2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:  # i.e. Series\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        \"Only the Series name can be used for \"\n                        \"the key in Series dtype mappings.\"\n                    )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors)\n\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        \"Only a column name can be used for the \"\n                        \"key in a dtype mappings argument.\"\n                    )\n            results = []\n            for col_name, col in self.items():\n                if col_name in dtype:\n                    results.append(\n                        col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                    )\n                else:\n                    results.append(col.copy() if copy else col)\n\n        elif is_extension_array_dtype(dtype) and self.ndim > 1:\n            # GH 18099/22869: columnwise conversion to extension dtype\n            # GH 24704: use iloc to handle duplicate column names\n            results = [\n                self.iloc[:, i].astype(dtype, copy=copy)\n                for i in range(len(self.columns))\n            ]\n\n        else:\n            # else, only a single dtype is given\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n            return self._constructor(new_data).__finalize__(self)\n\n        # GH 19920: retain column metadata after concat\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result",
        "begin_line": 5436,
        "end_line": 5577,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.004405286343612335,
            "pseudo_dstar_susp": 0.012345679012345678,
            "pseudo_tarantula_susp": 0.0033222591362126247,
            "pseudo_op2_susp": 0.012345679012345678,
            "pseudo_barinel_susp": 0.0033222591362126247
        }
    },
    {
        "name": "pandas.core.generic.NDFrame.isna#7151",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic.NDFrame",
        "signature": "pandas.core.generic.NDFrame.isna(self: FrameOrSeries)",
        "snippet": "    def isna(self: FrameOrSeries) -> FrameOrSeries:\n        return isna(self).__finalize__(self)",
        "begin_line": 7151,
        "end_line": 7152,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic._make_min_count_stat_function#11040",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_min_count_stat_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str='', examples: str='')",
        "snippet": "def _make_min_count_stat_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str = \"\",\n    examples: str = \"\",\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
        "begin_line": 11040,
        "end_line": 11093,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.stat_func#11061",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
        "snippet": "    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )",
        "begin_line": 11061,
        "end_line": 11091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic._make_logical_function#11208",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic._make_logical_function(cls, name: str, name1: str, name2: str, axis_descr: str, desc: str, func: Callable, see_also: str, examples: str, empty_value: bool)",
        "snippet": "def _make_logical_function(\n    cls,\n    name: str,\n    name1: str,\n    name2: str,\n    axis_descr: str,\n    desc: str,\n    func: Callable,\n    see_also: str,\n    examples: str,\n    empty_value: bool,\n) -> Callable:\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
        "begin_line": 11208,
        "end_line": 11247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.generic.logical_func#11230",
        "src_path": "pandas/core/generic.py",
        "class_name": "pandas.core.generic",
        "signature": "pandas.core.generic.logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
        "snippet": "    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            func,\n            name=name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )",
        "begin_line": 11230,
        "end_line": 11245,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._config.config._get_single_key#95",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_single_key(pat: str, silent: bool)",
        "snippet": "def _get_single_key(pat: str, silent: bool) -> str:\n    keys = _select_options(pat)\n    if len(keys) == 0:\n        if not silent:\n            _warn_if_deprecated(pat)\n        raise OptionError(f\"No such keys(s): {repr(pat)}\")\n    if len(keys) > 1:\n        raise OptionError(\"Pattern matched multiple keys\")\n    key = keys[0]\n\n    if not silent:\n        _warn_if_deprecated(key)\n\n    key = _translate_key(key)\n\n    return key",
        "begin_line": 95,
        "end_line": 110,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config._get_option#113",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_option(pat: str, silent: bool=False)",
        "snippet": "def _get_option(pat: str, silent: bool = False):\n    key = _get_single_key(pat, silent)\n\n    # walk the nested dict\n    root, k = _get_root(key)\n    return root[k]",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001226993865030675,
            "pseudo_dstar_susp": 0.004366812227074236,
            "pseudo_tarantula_susp": 0.001053740779768177,
            "pseudo_op2_susp": 0.004366812227074236,
            "pseudo_barinel_susp": 0.001053740779768177
        }
    },
    {
        "name": "pandas._config.config._set_option#121",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._set_option(*args, **kwargs)",
        "snippet": "def _set_option(*args, **kwargs) -> None:\n    # must at least 1 arg deal with constraints later\n    nargs = len(args)\n    if not nargs or nargs % 2 != 0:\n        raise ValueError(\"Must provide an even number of non-keyword arguments\")\n\n    # default to false\n    silent = kwargs.pop(\"silent\", False)\n\n    if kwargs:\n        kwarg = list(kwargs.keys())[0]\n        raise TypeError(f'_set_option() got an unexpected keyword argument \"{kwarg}\"')\n\n    for k, v in zip(args[::2], args[1::2]):\n        key = _get_single_key(k, silent)\n\n        o = _get_registered_option(key)\n        if o and o.validator:\n            o.validator(v)\n\n        # walk the nested dict\n        root, k = _get_root(key)\n        root[k] = v\n\n        if o.cb:\n            if silent:\n                with warnings.catch_warnings(record=True):\n                    o.cb(key)\n            else:\n                o.cb(key)",
        "begin_line": 121,
        "end_line": 150,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas._config.config.CallableDynamicDoc.__call__#241",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config.CallableDynamicDoc",
        "signature": "pandas._config.config.CallableDynamicDoc.__call__(self, *args, **kwds)",
        "snippet": "    def __call__(self, *args, **kwds):\n        return self.__func__(*args, **kwds)",
        "begin_line": 241,
        "end_line": 242,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config._select_options#548",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._select_options(pat: str)",
        "snippet": "def _select_options(pat: str) -> List[str]:\n    \"\"\"\n    returns a list of keys matching `pat`\n\n    if pat==\"all\", returns all registered options\n    \"\"\"\n    # short-circuit for exact key\n    if pat in _registered_options:\n        return [pat]\n\n    # else look through all of them\n    keys = sorted(_registered_options.keys())\n    if pat == \"all\":  # reserved key\n        return keys\n\n    return [k for k in keys if re.search(pat, k, re.I)]",
        "begin_line": 548,
        "end_line": 563,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.001226993865030675,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.001053740779768177,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.001053740779768177
        }
    },
    {
        "name": "pandas._config.config._get_root#566",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_root(key: str)",
        "snippet": "def _get_root(key: str) -> Tuple[Dict[str, Any], str]:\n    path = key.split(\".\")\n    cursor = _global_config\n    for p in path[:-1]:\n        cursor = cursor[p]\n    return cursor, path[-1]",
        "begin_line": 566,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config._get_deprecated_option#580",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_deprecated_option(key: str)",
        "snippet": "def _get_deprecated_option(key: str):\n    \"\"\"\n    Retrieves the metadata for a deprecated option, if `key` is deprecated.\n\n    Returns\n    -------\n    DeprecatedOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    try:\n        d = _deprecated_options[key]\n    except KeyError:\n        return None\n    else:\n        return d",
        "begin_line": 580,
        "end_line": 593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config._get_registered_option#596",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._get_registered_option(key: str)",
        "snippet": "def _get_registered_option(key: str):\n    \"\"\"\n    Retrieves the option metadata if `key` is a registered option.\n\n    Returns\n    -------\n    RegisteredOption (namedtuple) if key is deprecated, None otherwise\n    \"\"\"\n    return _registered_options.get(key)",
        "begin_line": 596,
        "end_line": 604,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas._config.config._translate_key#607",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._translate_key(key: str)",
        "snippet": "def _translate_key(key: str) -> str:\n    \"\"\"\n    if key id deprecated and a replacement key defined, will return the\n    replacement key, otherwise returns `key` as - is\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        return d.rkey or key\n    else:\n        return key",
        "begin_line": 607,
        "end_line": 616,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config._warn_if_deprecated#619",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config._warn_if_deprecated(key: str)",
        "snippet": "def _warn_if_deprecated(key: str) -> bool:\n    \"\"\"\n    Checks if `key` is a deprecated option and if so, prints a warning.\n\n    Returns\n    -------\n    bool - True if `key` is deprecated, False otherwise.\n    \"\"\"\n    d = _get_deprecated_option(key)\n    if d:\n        if d.msg:\n            print(d.msg)\n            warnings.warn(d.msg, FutureWarning)\n        else:\n            msg = f\"'{key}' is deprecated\"\n            if d.removal_ver:\n                msg += f\" and will be removed in {d.removal_ver}\"\n            if d.rkey:\n                msg += f\", please use '{d.rkey}' instead.\"\n            else:\n                msg += \", please refrain from using it.\"\n\n            warnings.warn(msg, FutureWarning)\n        return True\n    return False",
        "begin_line": 619,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010416666666666667,
            "pseudo_dstar_susp": 0.045454545454545456,
            "pseudo_tarantula_susp": 0.0006540222367560497,
            "pseudo_op2_susp": 0.045454545454545456,
            "pseudo_barinel_susp": 0.0006540222367560497
        }
    },
    {
        "name": "pandas._config.config.inner#816",
        "src_path": "pandas/_config/config.py",
        "class_name": "pandas._config.config",
        "signature": "pandas._config.config.inner(x)",
        "snippet": "    def inner(x) -> None:\n        if x not in legal_values:\n\n            if not any(c(x) for c in callables):\n                uvals = [str(lval) for lval in legal_values]\n                pp_values = \"|\".join(uvals)\n                msg = f\"Value must be one of {pp_values}\"\n                if len(callables):\n                    msg += \" or a callable\"\n                raise ValueError(msg)",
        "begin_line": 816,
        "end_line": 825,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas.conftest.pytest_runtest_setup#50",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.pytest_runtest_setup(item)",
        "snippet": "def pytest_runtest_setup(item):\n    if \"slow\" in item.keywords and item.config.getoption(\"--skip-slow\"):\n        pytest.skip(\"skipping due to --skip-slow\")\n\n    if \"slow\" not in item.keywords and item.config.getoption(\"--only-slow\"):\n        pytest.skip(\"skipping due to --only-slow\")\n\n    if \"network\" in item.keywords and item.config.getoption(\"--skip-network\"):\n        pytest.skip(\"skipping due to --skip-network\")\n\n    if \"db\" in item.keywords and item.config.getoption(\"--skip-db\"):\n        pytest.skip(\"skipping due to --skip-db\")\n\n    if \"high_memory\" in item.keywords and not item.config.getoption(\n        \"--run-high-memory\"\n    ):\n        pytest.skip(\"skipping high memory test since --run-high-memory was not set\")",
        "begin_line": 50,
        "end_line": 66,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas.conftest.configure_tests#70",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.configure_tests()",
        "snippet": "def configure_tests():\n    \"\"\"\n    Configure settings for all tests and test modules.\n    \"\"\"\n    pd.set_option(\"chained_assignment\", \"raise\")",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas.conftest.add_imports#78",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.add_imports(doctest_namespace)",
        "snippet": "def add_imports(doctest_namespace):\n    \"\"\"\n    Make `np` and `pd` names available for doctests.\n    \"\"\"\n    doctest_namespace[\"np\"] = np\n    doctest_namespace[\"pd\"] = pd",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006257822277847309,
            "pseudo_dstar_susp": 0.001564945226917058,
            "pseudo_tarantula_susp": 0.0006035003017501509,
            "pseudo_op2_susp": 0.001564945226917058,
            "pseudo_barinel_susp": 0.0006035003017501509
        }
    },
    {
        "name": "pandas.conftest.strict_data_files#370",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.strict_data_files(pytestconfig)",
        "snippet": "def strict_data_files(pytestconfig):\n    \"\"\"\n    Returns the configuration for the test setting `--strict-data-files`.\n    \"\"\"\n    return pytestconfig.getoption(\"--strict-data-files\")",
        "begin_line": 370,
        "end_line": 374,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.conftest.datapath#378",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.datapath(strict_data_files)",
        "snippet": "def datapath(strict_data_files):\n    \"\"\"\n    Get the path to a data file.\n\n    Parameters\n    ----------\n    path : str\n        Path to the file, relative to ``pandas/tests/``\n\n    Returns\n    -------\n    path including ``pandas/tests``.\n\n    Raises\n    ------\n    ValueError\n        If the path doesn't exist and the --strict-data-files option is set.\n    \"\"\"\n    BASE_PATH = os.path.join(os.path.dirname(__file__), \"tests\")\n\n    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                raise ValueError(\n                    f\"Could not find file {path} and --strict-data-files is set.\"\n                )\n            else:\n                pytest.skip(f\"Could not find {path}.\")\n        return path\n\n    return deco",
        "begin_line": 378,
        "end_line": 409,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.conftest.deco#398",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.deco(*args)",
        "snippet": "    def deco(*args):\n        path = os.path.join(BASE_PATH, *args)\n        if not os.path.exists(path):\n            if strict_data_files:\n                raise ValueError(\n                    f\"Could not find file {path} and --strict-data-files is set.\"\n                )\n            else:\n                pytest.skip(f\"Could not find {path}.\")\n        return path",
        "begin_line": 398,
        "end_line": 407,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.conftest.nulls_fixture#454",
        "src_path": "pandas/conftest.py",
        "class_name": "pandas.conftest",
        "signature": "pandas.conftest.nulls_fixture(request)",
        "snippet": "def nulls_fixture(request):\n    \"\"\"\n    Fixture for each null type in pandas.\n    \"\"\"\n    return request.param",
        "begin_line": 454,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.frequencies.to_offset#73",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies.to_offset(freq)",
        "snippet": "def to_offset(freq) -> Optional[DateOffset]:\n    \"\"\"\n    Return DateOffset object from string or tuple representation\n    or datetime.timedelta object.\n\n    Parameters\n    ----------\n    freq : str, tuple, datetime.timedelta, DateOffset or None\n\n    Returns\n    -------\n    DateOffset\n        None if freq is None.\n\n    Raises\n    ------\n    ValueError\n        If freq is an invalid frequency\n\n    See Also\n    --------\n    DateOffset\n\n    Examples\n    --------\n    >>> to_offset('5min')\n    <5 * Minutes>\n\n    >>> to_offset('1D1H')\n    <25 * Hours>\n\n    >>> to_offset(('W', 2))\n    <2 * Weeks: weekday=6>\n\n    >>> to_offset((2, 'B'))\n    <2 * BusinessDays>\n\n    >>> to_offset(datetime.timedelta(days=1))\n    <Day>\n\n    >>> to_offset(Hour())\n    <Hour>\n    \"\"\"\n    if freq is None:\n        return None\n\n    if isinstance(freq, DateOffset):\n        return freq\n\n    if isinstance(freq, tuple):\n        name = freq[0]\n        stride = freq[1]\n        if isinstance(stride, str):\n            name, stride = stride, name\n        name, _ = libfreqs._base_and_stride(name)\n        delta = _get_offset(name) * stride\n\n    elif isinstance(freq, timedelta):\n        delta = None\n        freq = Timedelta(freq)\n        try:\n            for name in freq.components._fields:\n                offset = _name_to_offset_map[name]\n                stride = getattr(freq.components, name)\n                if stride != 0:\n                    offset = stride * offset\n                    if delta is None:\n                        delta = offset\n                    else:\n                        delta = delta + offset\n        except ValueError as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    else:\n        delta = None\n        stride_sign = None\n        try:\n            splitted = re.split(libfreqs.opattern, freq)\n            if splitted[-1] != \"\" and not splitted[-1].isspace():\n                # the last element must be blank\n                raise ValueError(\"last element must be blank\")\n            for sep, stride, name in zip(\n                splitted[0::4], splitted[1::4], splitted[2::4]\n            ):\n                if sep != \"\" and not sep.isspace():\n                    raise ValueError(\"separator must be spaces\")\n                prefix = libfreqs._lite_rule_alias.get(name) or name\n                if stride_sign is None:\n                    stride_sign = -1 if stride.startswith(\"-\") else 1\n                if not stride:\n                    stride = 1\n                if prefix in Resolution._reso_str_bump_map.keys():\n                    stride, name = Resolution.get_stride_from_decimal(\n                        float(stride), prefix\n                    )\n                stride = int(stride)\n                offset = _get_offset(name)\n                offset = offset * int(np.fabs(stride) * stride_sign)\n                if delta is None:\n                    delta = offset\n                else:\n                    delta = delta + offset\n        except (ValueError, TypeError) as err:\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq)) from err\n\n    if delta is None:\n        raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(freq))\n\n    return delta",
        "begin_line": 73,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.tseries.frequencies._get_offset#203",
        "src_path": "pandas/tseries/frequencies.py",
        "class_name": "pandas.tseries.frequencies",
        "signature": "pandas.tseries.frequencies._get_offset(name: str)",
        "snippet": "def _get_offset(name: str) -> DateOffset:\n    \"\"\"\n    Return DateOffset object associated with rule name.\n\n    Examples\n    --------\n    _get_offset('EOM') --> BMonthEnd(1)\n    \"\"\"\n    if name not in libfreqs._dont_uppercase:\n        name = name.upper()\n        name = libfreqs._lite_rule_alias.get(name, name)\n        name = libfreqs._lite_rule_alias.get(name.lower(), name)\n    else:\n        name = libfreqs._lite_rule_alias.get(name, name)\n\n    if name not in _offset_map:\n        try:\n            split = name.split(\"-\")\n            klass = prefix_mapping[split[0]]\n            # handles case where there's no suffix (and will TypeError if too\n            # many '-')\n            offset = klass._from_name(*split[1:])\n        except (ValueError, TypeError, KeyError) as err:\n            # bad prefix or suffix\n            raise ValueError(libfreqs.INVALID_FREQ_ERR_MSG.format(name)) from err\n        # cache\n        _offset_map[name] = offset\n\n    return _offset_map[name]",
        "begin_line": 203,
        "end_line": 231,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape#416",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.shape(self)",
        "snippet": "    def shape(self):\n        return self._data.shape",
        "begin_line": 416,
        "end_line": 417,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values#436",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._box_values(self, values)",
        "snippet": "    def _box_values(self, values):\n        \"\"\"\n        apply box func to passed values\n        \"\"\"\n        return lib.map_infer(values, self._box_func)",
        "begin_line": 436,
        "end_line": 440,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__#442",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        return (self._box_func(v) for v in self.asi8)",
        "begin_line": 442,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8#446",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        # do not cache or you'll create a memory leak\n        return self._data.view(\"i8\")",
        "begin_line": 446,
        "end_line": 456,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001799208348326736,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__#497",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 497,
        "end_line": 498,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017908309455587392,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__#500",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        This getitem defers to the underlying array, which by-definition can\n        only handle list-likes, slices, and integer scalars\n        \"\"\"\n        is_int = lib.is_integer(key)\n        if lib.is_scalar(key) and not is_int:\n            raise IndexError(\n                \"only integers, slices (`:`), ellipsis (`...`), \"\n                \"numpy.newaxis (`None`) and integer or boolean \"\n                \"arrays are valid indices\"\n            )\n\n        getitem = self._data.__getitem__\n        if is_int:\n            val = getitem(key)\n            if lib.is_scalar(val):\n                # i.e. self.ndim == 1\n                return self._box_func(val)\n            return type(self)(val, dtype=self.dtype)\n\n        if com.is_bool_indexer(key):\n            # first convert to boolean, because check_array_indexer doesn't\n            # allow object dtype\n            if is_object_dtype(key):\n                key = np.asarray(key, dtype=bool)\n\n            key = check_array_indexer(self, key)\n            if key.all():\n                key = slice(0, None, None)\n            else:\n                key = lib.maybe_booleans_to_slice(key.view(np.uint8))\n        elif isinstance(key, list) and len(key) == 1 and isinstance(key[0], slice):\n            # see https://github.com/pandas-dev/pandas/issues/31299, need to allow\n            # this for now (would otherwise raise in check_array_indexer)\n            pass\n        else:\n            key = check_array_indexer(self, key)\n\n        is_period = is_period_dtype(self)\n        if is_period:\n            freq = self.freq\n        else:\n            freq = None\n            if isinstance(key, slice):\n                if self.freq is not None and key.step is not None:\n                    freq = key.step * self.freq\n                else:\n                    freq = self.freq\n            elif key is Ellipsis:\n                # GH#21282 indexing with Ellipsis is similar to a full slice,\n                #  should preserve `freq` attribute\n                freq = self.freq\n\n        result = getitem(key)\n        if result.ndim > 1:\n            # To support MPL which performs slicing with 2 dim\n            # even though it only has 1 dim by definition\n            return result\n\n        return self._simple_new(result, dtype=self.dtype, freq=freq)",
        "begin_line": 500,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype#617",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # Some notes on cases we don't have to handle here in the base class:\n        #   1. PeriodArray.astype handles period -> period\n        #   2. DatetimeArray.astype handles conversion between tz.\n        #   3. DatetimeArray.astype handles datetime -> period\n        from pandas import Categorical\n\n        dtype = pandas_dtype(dtype)\n\n        if is_object_dtype(dtype):\n            return self._box_values(self.asi8.ravel()).reshape(self.shape)\n        elif is_string_dtype(dtype) and not is_categorical_dtype(dtype):\n            return self._format_native_types()\n        elif is_integer_dtype(dtype):\n            # we deliberately ignore int32 vs. int64 here.\n            # See https://github.com/pandas-dev/pandas/issues/24381 for more.\n            values = self.asi8\n\n            if is_unsigned_integer_dtype(dtype):\n                # Again, we ignore int32 vs. int64\n                values = values.view(\"uint64\")\n\n            if copy:\n                values = values.copy()\n            return values\n        elif (\n            is_datetime_or_timedelta_dtype(dtype)\n            and not is_dtype_equal(self.dtype, dtype)\n        ) or is_float_dtype(dtype):\n            # disallow conversion between datetime/timedelta,\n            # and conversions for any datetimelike to float\n            msg = f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            raise TypeError(msg)\n        elif is_categorical_dtype(dtype):\n            return Categorical(self, dtype=dtype)\n        else:\n            return np.asarray(self, dtype=dtype)",
        "begin_line": 617,
        "end_line": 653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view#655",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.view(self, dtype=None)",
        "snippet": "    def view(self, dtype=None):\n        if dtype is None or dtype is self.dtype:\n            return type(self)(self._data, dtype=self.dtype)\n        return self._data.view(dtype=dtype)",
        "begin_line": 655,
        "end_line": 658,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort#745",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        return self._data",
        "begin_line": 745,
        "end_line": 746,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019801980198019803,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan#921",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        return if each value is nan\n        \"\"\"\n        return self.asi8 == iNaT",
        "begin_line": 921,
        "end_line": 925,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans#928",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin._hasnans(self)",
        "snippet": "    def _hasnans(self):\n        \"\"\"\n        return if I have any nans; enables various perf speedups\n        \"\"\"\n        return bool(self._isnan.any())",
        "begin_line": 928,
        "end_line": 932,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq#1010",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin",
        "signature": "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object if it is set, otherwise None.\n        \"\"\"\n        return self._freq",
        "begin_line": 1010,
        "end_line": 1014,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_periods#1630",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_periods(periods)",
        "snippet": "def validate_periods(periods):\n    \"\"\"\n    If a `periods` argument is passed to the Datetime/Timedelta Array/Index\n    constructor, cast it to an integer.\n\n    Parameters\n    ----------\n    periods : None, float, int\n\n    Returns\n    -------\n    periods : None or int\n\n    Raises\n    ------\n    TypeError\n        if periods is None, float, or int\n    \"\"\"\n    if periods is not None:\n        if lib.is_float(periods):\n            periods = int(periods)\n        elif not lib.is_integer(periods):\n            raise TypeError(f\"periods must be a number, got {periods}\")\n    return periods",
        "begin_line": 1630,
        "end_line": 1653,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_endpoints#1656",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_endpoints(closed)",
        "snippet": "def validate_endpoints(closed):\n    \"\"\"\n    Check that the `closed` argument is among [None, \"left\", \"right\"]\n\n    Parameters\n    ----------\n    closed : {None, \"left\", \"right\"}\n\n    Returns\n    -------\n    left_closed : bool\n    right_closed : bool\n\n    Raises\n    ------\n    ValueError : if argument is not among valid values\n    \"\"\"\n    left_closed = False\n    right_closed = False\n\n    if closed is None:\n        left_closed = True\n        right_closed = True\n    elif closed == \"left\":\n        left_closed = True\n    elif closed == \"right\":\n        right_closed = True\n    else:\n        raise ValueError(\"Closed has to be either 'left', 'right' or None\")\n\n    return left_closed, right_closed",
        "begin_line": 1656,
        "end_line": 1686,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.validate_inferred_freq#1689",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.validate_inferred_freq(freq, inferred_freq, freq_infer)",
        "snippet": "def validate_inferred_freq(freq, inferred_freq, freq_infer):\n    \"\"\"\n    If the user passes a freq and another freq is inferred from passed data,\n    require that they match.\n\n    Parameters\n    ----------\n    freq : DateOffset or None\n    inferred_freq : DateOffset or None\n    freq_infer : bool\n\n    Returns\n    -------\n    freq : DateOffset or None\n    freq_infer : bool\n\n    Notes\n    -----\n    We assume at this point that `maybe_infer_freq` has been called, so\n    `freq` is either a DateOffset object or None.\n    \"\"\"\n    if inferred_freq is not None:\n        if freq is not None and freq != inferred_freq:\n            raise ValueError(\n                f\"Inferred frequency {inferred_freq} from passed \"\n                \"values does not conform to passed frequency \"\n                f\"{freq.freqstr}\"\n            )\n        elif freq is None:\n            freq = inferred_freq\n        freq_infer = False\n\n    return freq, freq_infer",
        "begin_line": 1689,
        "end_line": 1721,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019801980198019803,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimelike.maybe_infer_freq#1724",
        "src_path": "pandas/core/arrays/datetimelike.py",
        "class_name": "pandas.core.arrays.datetimelike",
        "signature": "pandas.core.arrays.datetimelike.maybe_infer_freq(freq)",
        "snippet": "def maybe_infer_freq(freq):\n    \"\"\"\n    Comparing a DateOffset to the string \"infer\" raises, so we need to\n    be careful about comparisons.  Make a dummy variable `freq_infer` to\n    signify the case where the given freq is \"infer\" and set freq to None\n    to avoid comparison trouble later on.\n\n    Parameters\n    ----------\n    freq : {DateOffset, None, str}\n\n    Returns\n    -------\n    freq : {DateOffset, None}\n    freq_infer : bool\n    \"\"\"\n    freq_infer = False\n    if not isinstance(freq, DateOffset):\n        # if a passed freq is None, don't infer automatically\n        if freq != \"infer\":\n            freq = frequencies.to_offset(freq)\n        else:\n            freq_infer = True\n            freq = None\n    return freq, freq_infer",
        "begin_line": 1724,
        "end_line": 1748,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019801980198019803,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints#86",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndexUIntEngine",
        "signature": "pandas.core.indexes.multi.MultiIndexUIntEngine._codes_to_ints(self, codes)",
        "snippet": "    def _codes_to_ints(self, codes):\n        \"\"\"\n        Transform combination(s) of uint64 in one uint64 (each), in a strictly\n        monotonic way (i.e. respecting the lexicographic order of integer\n        combinations): see BaseMultiIndexCodesEngine documentation.\n\n        Parameters\n        ----------\n        codes : 1- or 2-dimensional array of dtype uint64\n            Combinations of integers (one per row)\n\n        Returns\n        -------\n        scalar or 1-dimensional array, of dtype uint64\n            Integer(s) representing one combination (each).\n        \"\"\"\n        # Shift the representation of each level by the pre-calculated number\n        # of bits:\n        codes <<= self.offsets\n\n        # Now sum and OR are in fact interchangeable. This is a simple\n        # composition of the (disjunct) significant bits of each level (i.e.\n        # each column in \"codes\") in a single positive integer:\n        if codes.ndim == 1:\n            # Single key\n            return np.bitwise_or.reduce(codes)\n\n        # Multiple keys\n        return np.bitwise_or.reduce(codes, axis=1)",
        "begin_line": 86,
        "end_line": 114,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__new__#255",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__new__(cls, levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity: bool=True, _set_identity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        levels=None,\n        codes=None,\n        sortorder=None,\n        names=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        verify_integrity: bool = True,\n        _set_identity: bool = True,\n    ):\n\n        # compat with Index\n        if name is not None:\n            names = name\n        if levels is None or codes is None:\n            raise TypeError(\"Must pass both levels and codes\")\n        if len(levels) != len(codes):\n            raise ValueError(\"Length of levels and codes must be the same.\")\n        if len(levels) == 0:\n            raise ValueError(\"Must pass non-zero number of levels/codes\")\n\n        result = object.__new__(MultiIndex)\n        result._cache = {}\n\n        # we've already validated levels and codes, so shortcut here\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_codes(codes, copy=copy, validate=False)\n\n        result._names = [None] * len(levels)\n        if names is not None:\n            # handles name validation\n            result._set_names(names)\n\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n\n        if verify_integrity:\n            new_codes = result._verify_integrity()\n            result._codes = new_codes\n\n        if _set_identity:\n            result._reset_identity()\n\n        return result",
        "begin_line": 255,
        "end_line": 302,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._validate_codes#304",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._validate_codes(self, level: List, code: List)",
        "snippet": "    def _validate_codes(self, level: List, code: List):\n        \"\"\"\n        Reassign code values as -1 if their corresponding levels are NaN.\n\n        Parameters\n        ----------\n        code : list\n            Code to reassign.\n        level : list\n            Level to check for missing values (NaN, NaT, None).\n\n        Returns\n        -------\n        new code where code value = -1 if it corresponds\n        to a level with missing values (NaN, NaT, None).\n        \"\"\"\n        null_mask = isna(level)\n        if np.any(null_mask):\n            code = np.where(null_mask[code], -1, code)\n        return code",
        "begin_line": 304,
        "end_line": 323,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._verify_integrity#325",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._verify_integrity(self, codes: Optional[List]=None, levels: Optional[List]=None)",
        "snippet": "    def _verify_integrity(\n        self, codes: Optional[List] = None, levels: Optional[List] = None\n    ):\n        \"\"\"\n        Parameters\n        ----------\n        codes : optional list\n            Codes to check for validity. Defaults to current codes.\n        levels : optional list\n            Levels to check for validity. Defaults to current levels.\n\n        Raises\n        ------\n        ValueError\n            If length of levels and codes don't match, if the codes for any\n            level would exceed level bounds, or there are any duplicate levels.\n\n        Returns\n        -------\n        new codes where code value = -1 if it corresponds to a\n        NaN level.\n        \"\"\"\n        # NOTE: Currently does not check, among other things, that cached\n        # nlevels matches nor that sortorder matches actually sortorder.\n        codes = codes or self.codes\n        levels = levels or self.levels\n\n        if len(levels) != len(codes):\n            raise ValueError(\n                \"Length of levels and codes must match. NOTE: \"\n                \"this index is in an inconsistent state.\"\n            )\n        codes_length = len(codes[0])\n        for i, (level, level_codes) in enumerate(zip(levels, codes)):\n            if len(level_codes) != codes_length:\n                raise ValueError(\n                    f\"Unequal code lengths: {[len(code_) for code_ in codes]}\"\n                )\n            if len(level_codes) and level_codes.max() >= len(level):\n                raise ValueError(\n                    f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n                    f\"level ({len(level)}). NOTE: this index is in an \"\n                    \"inconsistent state\"\n                )\n            if len(level_codes) and level_codes.min() < -1:\n                raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n            if not level.is_unique:\n                raise ValueError(\n                    f\"Level values must be unique: {list(level)} on level {i}\"\n                )\n        if self.sortorder is not None:\n            if self.sortorder > self._lexsort_depth():\n                raise ValueError(\n                    \"Value for sortorder must be inferior or equal to actual \"\n                    f\"lexsort_depth: sortorder {self.sortorder} \"\n                    f\"with lexsort_depth {self._lexsort_depth()}\"\n                )\n\n        codes = [\n            self._validate_codes(level, code) for level, code in zip(levels, codes)\n        ]\n        new_codes = FrozenList(codes)\n        return new_codes",
        "begin_line": 325,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_arrays#390",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_arrays(cls, arrays, sortorder=None, names=lib.no_default)",
        "snippet": "    def from_arrays(cls, arrays, sortorder=None, names=lib.no_default):\n        \"\"\"\n        Convert arrays to MultiIndex.\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        error_msg = \"Input must be a list / sequence of array-likes.\"\n        if not is_list_like(arrays):\n            raise TypeError(error_msg)\n        elif is_iterator(arrays):\n            arrays = list(arrays)\n\n        # Check if elements of array are list-like\n        for array in arrays:\n            if not is_list_like(array):\n                raise TypeError(error_msg)\n\n        # Check if lengths of all arrays are equal or not,\n        # raise ValueError, if not\n        for i in range(1, len(arrays)):\n            if len(arrays[i]) != len(arrays[i - 1]):\n                raise ValueError(\"all arrays must be same length\")\n\n        codes, levels = factorize_from_iterables(arrays)\n        if names is lib.no_default:\n            names = [getattr(arr, \"name\", None) for arr in arrays]\n\n        return MultiIndex(\n            levels=levels,\n            codes=codes,\n            sortorder=sortorder,\n            names=names,\n            verify_integrity=False,\n        )",
        "begin_line": 390,
        "end_line": 453,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.from_tuples#456",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.from_tuples(cls, tuples, sortorder=None, names=None)",
        "snippet": "    def from_tuples(cls, tuples, sortorder=None, names=None):\n        \"\"\"\n        Convert list of tuples to MultiIndex.\n\n        Parameters\n        ----------\n        tuples : list / sequence of tuple-likes\n            Each tuple is the index of one row/column.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of str, optional\n            Names for the levels in the index.\n\n        Returns\n        -------\n        MultiIndex\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex.\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables.\n        MultiIndex.from_frame : Make a MultiIndex from a DataFrame.\n\n        Examples\n        --------\n        >>> tuples = [(1, 'red'), (1, 'blue'),\n        ...           (2, 'red'), (2, 'blue')]\n        >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n        MultiIndex([(1,  'red'),\n                    (1, 'blue'),\n                    (2,  'red'),\n                    (2, 'blue')],\n                   names=['number', 'color'])\n        \"\"\"\n        if not is_list_like(tuples):\n            raise TypeError(\"Input must be a list / sequence of tuple-likes.\")\n        elif is_iterator(tuples):\n            tuples = list(tuples)\n\n        if len(tuples) == 0:\n            if names is None:\n                raise TypeError(\"Cannot infer number of levels from empty list\")\n            arrays = [[]] * len(names)\n        elif isinstance(tuples, (np.ndarray, Index)):\n            if isinstance(tuples, Index):\n                tuples = tuples._values\n\n            arrays = list(lib.tuples_to_object_array(tuples).T)\n        elif isinstance(tuples, list):\n            arrays = list(lib.to_object_array_tuples(tuples).T)\n        else:\n            arrays = zip(*tuples)\n\n        return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)",
        "begin_line": 456,
        "end_line": 511,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._values#641",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._values(self)",
        "snippet": "    def _values(self):\n        # We override here, since our parent uses _data, which we don't use.\n        return self.values",
        "begin_line": 641,
        "end_line": 643,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.values#646",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.values(self)",
        "snippet": "    def values(self):\n        if self._tuples is not None:\n            return self._tuples\n\n        values = []\n\n        for i in range(self.nlevels):\n            vals = self._get_level_values(i)\n            if is_categorical_dtype(vals):\n                vals = vals._internal_get_values()\n            if isinstance(vals.dtype, ExtensionDtype) or hasattr(vals, \"_box_values\"):\n                vals = vals.astype(object)\n            vals = np.array(vals, copy=False)\n            values.append(vals)\n\n        self._tuples = lib.fast_zip(values)\n        return self._tuples",
        "begin_line": 646,
        "end_line": 662,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.__len__#688",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.codes[0])",
        "begin_line": 688,
        "end_line": 689,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.levels#695",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.levels(self)",
        "snippet": "    def levels(self):\n        # Use cache_readonly to ensure that self.get_locs doesn't repeatedly\n        # create new IndexEngine\n        # https://github.com/pandas-dev/pandas/issues/31648\n        result = [\n            x._shallow_copy(name=name) for x, name in zip(self._levels, self._names)\n        ]\n        for level in result:\n            # disallow midx.levels[0].name = \"foo\"\n            level._no_setting_name = True\n        return FrozenList(result)",
        "begin_line": 695,
        "end_line": 705,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_levels#707",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_levels(self, levels, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_levels(\n        self, levels, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        # This is NOT part of the levels property because it should be\n        # externally not allowed to set levels. User beware if you change\n        # _levels directly\n        if validate:\n            if len(levels) == 0:\n                raise ValueError(\"Must set non-zero number of levels.\")\n            if level is None and len(levels) != self.nlevels:\n                raise ValueError(\"Length of levels must match number of levels.\")\n            if level is not None and len(levels) != len(level):\n                raise ValueError(\"Length of levels must match length of level.\")\n\n        if level is None:\n            new_levels = FrozenList(\n                ensure_index(lev, copy=copy)._shallow_copy() for lev in levels\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_levels = list(self._levels)\n            for lev_num, lev in zip(level_numbers, levels):\n                new_levels[lev_num] = ensure_index(lev, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(levels=new_levels)\n            self._codes = new_codes\n\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 707,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019116803670426305,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.nlevels#834",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Integer number of levels in this MultiIndex.\n        \"\"\"\n        return len(self._levels)",
        "begin_line": 834,
        "end_line": 838,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017959770114942528,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.codes#851",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.codes(self)",
        "snippet": "    def codes(self):\n        return self._codes",
        "begin_line": 851,
        "end_line": 852,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017959770114942528,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_codes#854",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_codes(self, codes, level=None, copy=False, validate=True, verify_integrity=False)",
        "snippet": "    def _set_codes(\n        self, codes, level=None, copy=False, validate=True, verify_integrity=False\n    ):\n        if validate:\n            if level is None and len(codes) != self.nlevels:\n                raise ValueError(\"Length of codes must match number of levels\")\n            if level is not None and len(codes) != len(level):\n                raise ValueError(\"Length of codes must match length of levels.\")\n\n        if level is None:\n            new_codes = FrozenList(\n                _coerce_indexer_frozen(level_codes, lev, copy=copy).view()\n                for lev, level_codes in zip(self._levels, codes)\n            )\n        else:\n            level_numbers = [self._get_level_number(lev) for lev in level]\n            new_codes = list(self._codes)\n            for lev_num, level_codes in zip(level_numbers, codes):\n                lev = self.levels[lev_num]\n                new_codes[lev_num] = _coerce_indexer_frozen(level_codes, lev, copy=copy)\n            new_codes = FrozenList(new_codes)\n\n        if verify_integrity:\n            new_codes = self._verify_integrity(codes=new_codes)\n\n        self._codes = new_codes\n\n        self._tuples = None\n        self._reset_cache()",
        "begin_line": 854,
        "end_line": 882,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019116803670426305,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._engine#964",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # Calculate the number of bits needed to represent labels in each\n        # level, as log2 of their sizes (including -1 for NaN):\n        sizes = np.ceil(np.log2([len(l) + 1 for l in self.levels]))\n\n        # Sum bit counts, starting from the _right_....\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n\n        # ... in order to obtain offsets such that sorting the combination of\n        # shifted codes (one for each level, resulting in a unique integer) is\n        # equivalent to sorting lexicographically the codes themselves. Notice\n        # that each level needs to be shifted by the number of bits needed to\n        # represent the _previous_ ones:\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype(\"uint64\")\n\n        # Check the total number of bits needed for our representation:\n        if lev_bits[0] > 64:\n            # The levels would overflow a 64 bit uint - use Python integers:\n            return MultiIndexPyIntEngine(self.levels, self.codes, offsets)\n        return MultiIndexUIntEngine(self.levels, self.codes, offsets)",
        "begin_line": 964,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.dtype#1093",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.dtype(self)",
        "snippet": "    def dtype(self) -> np.dtype:\n        return np.dtype(\"O\")",
        "begin_line": 1093,
        "end_line": 1094,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._formatter_func#1141",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._formatter_func(self, tup)",
        "snippet": "    def _formatter_func(self, tup):\n        \"\"\"\n        Formats each item in tup according to its level's formatter function.\n        \"\"\"\n        formatter_funcs = [level._formatter_func for level in self.levels]\n        return tuple(func(val) for func, val in zip(formatter_funcs, tup))",
        "begin_line": 1141,
        "end_line": 1146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._format_data#1148",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None):\n        \"\"\"\n        Return the formatted data as a unicode string\n        \"\"\"\n        return format_object_summary(\n            self, self._formatter_func, name=name, line_break_each_value=True\n        )",
        "begin_line": 1148,
        "end_line": 1154,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._format_attrs#1156",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self, include_dtype=False)",
        "begin_line": 1156,
        "end_line": 1160,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_names#1269",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList(self._names)",
        "begin_line": 1269,
        "end_line": 1270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._set_names#1272",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._set_names(self, names, level=None, validate=True)",
        "snippet": "    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        # GH 15110\n        # Don't allow a single string for names in a MultiIndex\n        if names is not None and not is_list_like(names):\n            raise ValueError(\"Names should be list-like for a MultiIndex\")\n        names = list(names)\n\n        if validate:\n            if level is not None and len(names) != len(level):\n                raise ValueError(\"Length of names must match length of level.\")\n            if level is None and len(names) != self.nlevels:\n                raise ValueError(\n                    \"Length of names must match number of levels in MultiIndex.\"\n                )\n\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(lev) for lev in level]\n\n        # set the name\n        for lev, name in zip(level, names):\n            if name is not None:\n                # GH 20527\n                # All items in 'names' need to be hashable:\n                if not is_hashable(name):\n                    raise TypeError(\n                        f\"{type(self).__name__}.name must be a hashable type\"\n                    )\n            self._names[lev] = name\n\n        # If .levels has been accessed, the names in our cache will be stale.\n        self._reset_cache()",
        "begin_line": 1272,
        "end_line": 1328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.inferred_type#1374",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        return \"mixed\"",
        "begin_line": 1374,
        "end_line": 1375,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._get_level_values#1473",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._get_level_values(self, level, unique=False)",
        "snippet": "    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n        lev = self.levels[level]\n        level_codes = self.codes[level]\n        name = self._names[level]\n        if unique:\n            level_codes = algos.unique(level_codes)\n        filled = algos.take_1d(lev._values, level_codes, fill_value=lev._na_value)\n        return lev._shallow_copy(filled, name=name)",
        "begin_line": 1473,
        "end_line": 1496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_all_dates#1627",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        return False",
        "begin_line": 1627,
        "end_line": 1628,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.is_lexsorted#1630",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.is_lexsorted(self)",
        "snippet": "    def is_lexsorted(self) -> bool:\n        \"\"\"\n        Return True if the codes are lexicographically sorted.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self.lexsort_depth == self.nlevels",
        "begin_line": 1630,
        "end_line": 1638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.lexsort_depth#1641",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)",
        "snippet": "    def lexsort_depth(self):\n        if self.sortorder is not None:\n            return self.sortorder\n\n        return self._lexsort_depth()",
        "begin_line": 1641,
        "end_line": 1645,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._lexsort_depth#1647",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._lexsort_depth(self)",
        "snippet": "    def _lexsort_depth(self) -> int:\n        \"\"\"\n        Compute and return the lexsort_depth, the number of levels of the\n        MultiIndex that are sorted lexically\n\n        Returns\n        -------\n        int\n        \"\"\"\n        int64_codes = [ensure_int64(level_codes) for level_codes in self.codes]\n        for k in range(self.nlevels, 0, -1):\n            if libalgos.is_lexsorted(int64_codes[:k]):\n                return k\n        return 0",
        "begin_line": 1647,
        "end_line": 1660,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic#1662",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic(self)",
        "snippet": "    def _sort_levels_monotonic(self):\n        \"\"\"\n        This is an *internal* function.\n\n        Create a new MultiIndex from the current to monotonically sorted\n        items IN the levels. This does not actually make the entire MultiIndex\n        monotonic, JUST the levels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n        ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi\n        MultiIndex([('a', 'bb'),\n                    ('a', 'aa'),\n                    ('b', 'bb'),\n                    ('b', 'aa')],\n                   )\n\n        >>> mi.sort_values()\n        MultiIndex([('a', 'aa'),\n                    ('a', 'bb'),\n                    ('b', 'aa'),\n                    ('b', 'bb')],\n                   )\n        \"\"\"\n        if self.is_lexsorted() and self.is_monotonic:\n            return self\n\n        new_levels = []\n        new_codes = []\n\n        for lev, level_codes in zip(self.levels, self.codes):\n\n            if not lev.is_monotonic:\n                try:\n                    # indexer to reorder the levels\n                    indexer = lev.argsort()\n                except TypeError:\n                    pass\n                else:\n                    lev = lev.take(indexer)\n\n                    # indexer to reorder the level codes\n                    indexer = ensure_int64(indexer)\n                    ri = lib.get_reverse_indexer(indexer, len(indexer))\n                    level_codes = algos.take_1d(ri, level_codes)\n\n            new_levels.append(lev)\n            new_codes.append(level_codes)\n\n        return MultiIndex(\n            new_levels,\n            new_codes,\n            names=self.names,\n            sortorder=self.sortorder,\n            verify_integrity=False,\n        )",
        "begin_line": 1662,
        "end_line": 1727,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi.MultiIndex.equals#3134",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi.MultiIndex",
        "signature": "pandas.core.indexes.multi.MultiIndex.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See Also\n        --------\n        equal_levels\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if not isinstance(other, MultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            if not is_object_dtype(other.dtype):\n                # other cannot contain tuples, so cannot match self\n                return False\n\n            return array_equivalent(self._values, other._values)\n\n        if self.nlevels != other.nlevels:\n            return False\n\n        if len(self) != len(other):\n            return False\n\n        for i in range(self.nlevels):\n            self_codes = self.codes[i]\n            self_codes = self_codes[self_codes != -1]\n            self_values = algos.take_nd(\n                np.asarray(self.levels[i]._values), self_codes, allow_fill=False\n            )\n\n            other_codes = other.codes[i]\n            other_codes = other_codes[other_codes != -1]\n            other_values = algos.take_nd(\n                np.asarray(other.levels[i]._values), other_codes, allow_fill=False\n            )\n\n            # since we use NaT both datetime64 and timedelta64\n            # we can have a situation where a level is typed say\n            # timedelta64 in self (IOW it has other values than NaT)\n            # but types datetime64 in other (where its all NaT)\n            # but these are equivalent\n            if len(self_values) == 0 and len(other_values) == 0:\n                continue\n\n            if not array_equivalent(self_values, other_values):\n                return False\n\n        return True",
        "begin_line": 3134,
        "end_line": 3187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.multi._coerce_indexer_frozen#3565",
        "src_path": "pandas/core/indexes/multi.py",
        "class_name": "pandas.core.indexes.multi",
        "signature": "pandas.core.indexes.multi._coerce_indexer_frozen(array_like, categories, copy: bool=False)",
        "snippet": "def _coerce_indexer_frozen(array_like, categories, copy: bool = False) -> np.ndarray:\n    \"\"\"\n    Coerce the array_like indexer to the smallest integer dtype that can encode all\n    of the given categories.\n\n    Parameters\n    ----------\n    array_like : array-like\n    categories : array-like\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n        Non-writeable.\n    \"\"\"\n    array_like = coerce_indexer_dtype(array_like, categories)\n    if copy:\n        array_like = array_like.copy()\n    array_like.flags.writeable = False\n    return array_like",
        "begin_line": 3565,
        "end_line": 3585,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019116803670426305,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.__new__#50",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.__new__(cls, data=None, dtype=None, copy=False, name=None)",
        "snippet": "    def __new__(cls, data=None, dtype=None, copy=False, name=None):\n        cls._validate_dtype(dtype)\n        name = maybe_extract_name(name, data, cls)\n\n        # Coerce to ndarray if not already ndarray or Index\n        if not isinstance(data, (np.ndarray, Index)):\n            if is_scalar(data):\n                raise cls._scalar_data_error(data)\n\n            # other iterable of some kind\n            if not isinstance(data, (ABCSeries, list, tuple)):\n                data = list(data)\n\n            data = np.asarray(data, dtype=dtype)\n\n        if issubclass(data.dtype.type, str):\n            cls._string_data_error(data)\n\n        if copy or not is_dtype_equal(data.dtype, cls._default_dtype):\n            subarr = np.array(data, dtype=cls._default_dtype, copy=copy)\n            cls._assert_safe_casting(data, subarr)\n        else:\n            subarr = data\n\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n\n        subarr = np.asarray(subarr)\n        return cls._simple_new(subarr, name=name)",
        "begin_line": 50,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.0006706908115358819,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0006706908115358819,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._validate_dtype#82",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._validate_dtype(cls, dtype: Dtype)",
        "snippet": "    def _validate_dtype(cls, dtype: Dtype) -> None:\n        if dtype is None:\n            return\n        validation_metadata = {\n            \"int64index\": (is_signed_integer_dtype, \"signed integer\"),\n            \"uint64index\": (is_unsigned_integer_dtype, \"unsigned integer\"),\n            \"float64index\": (is_float_dtype, \"float\"),\n            \"rangeindex\": (is_signed_integer_dtype, \"signed integer\"),\n        }\n\n        validation_func, expected = validation_metadata[cls._typ]\n        if not validation_func(dtype):\n            raise ValueError(\n                f\"Incorrect `dtype` passed: expected {expected}, received {dtype}\"\n            )",
        "begin_line": 82,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0015267175572519084,
            "pseudo_dstar_susp": 0.0047169811320754715,
            "pseudo_tarantula_susp": 0.0010845986984815619,
            "pseudo_op2_susp": 0.0047169811320754715,
            "pseudo_barinel_susp": 0.0010845986984815619
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex._shallow_copy#106",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex._shallow_copy(self, values=None, name: Label=lib.no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = lib.no_default):\n        if values is not None and not self._can_hold_na and values.dtype.kind == \"f\":\n            name = self.name if name is lib.no_default else name\n            # Ensure we are not returning an Int64Index with float data:\n            return Float64Index._simple_new(values, name=name)\n        return super()._shallow_copy(values=values, name=name)",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011560693641618498,
            "pseudo_dstar_susp": 0.0007199424046076314,
            "pseudo_tarantula_susp": 0.0012674271229404308,
            "pseudo_op2_susp": 0.0007199424046076314,
            "pseudo_barinel_susp": 0.0012626262626262627
        }
    },
    {
        "name": "pandas.core.indexes.numeric.NumericIndex.is_all_dates#155",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.NumericIndex",
        "signature": "pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Checks that all the labels are datetime objects.\n        \"\"\"\n        return False",
        "begin_line": 155,
        "end_line": 159,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011123470522803114,
            "pseudo_dstar_susp": 0.004081632653061225,
            "pseudo_tarantula_susp": 0.0009727626459143969,
            "pseudo_op2_susp": 0.004081632653061225,
            "pseudo_barinel_susp": 0.0009727626459143969
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.inferred_type#242",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'integer' for ``Int64Index`` and ``UInt64Index``\n        \"\"\"\n        return \"integer\"",
        "begin_line": 242,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009049773755656109,
            "pseudo_dstar_susp": 0.002793296089385475,
            "pseudo_tarantula_susp": 0.0008561643835616438,
            "pseudo_op2_susp": 0.002793296089385475,
            "pseudo_barinel_susp": 0.0008561643835616438
        }
    },
    {
        "name": "pandas.core.indexes.numeric.IntegerIndex.asi8#249",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.IntegerIndex",
        "signature": "pandas.core.indexes.numeric.IntegerIndex.asi8(self)",
        "snippet": "    def asi8(self) -> np.ndarray:\n        # do not cache or you'll create a memory leak\n        return self._values.view(self._default_dtype)",
        "begin_line": 249,
        "end_line": 251,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.inferred_type#354",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        \"\"\"\n        Always 'floating' for ``Float64Index``\n        \"\"\"\n        return \"floating\"",
        "begin_line": 354,
        "end_line": 358,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.000189000189000189,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.equals#407",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if self is other:\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        # need to compare nans locations and make sure that they are the same\n        # since nans don't compare equal this is a bit tricky\n        try:\n            if not isinstance(other, Float64Index):\n                other = self._constructor(other)\n            if not is_dtype_equal(self.dtype, other.dtype) or self.shape != other.shape:\n                return False\n            left, right = self._values, other._values\n            return ((left == right) | (self._isnan & other._isnan)).all()\n        except (TypeError, ValueError):\n            return False",
        "begin_line": 407,
        "end_line": 427,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.numeric.Float64Index.is_unique#453",
        "src_path": "pandas/core/indexes/numeric.py",
        "class_name": "pandas.core.indexes.numeric.Float64Index",
        "signature": "pandas.core.indexes.numeric.Float64Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        return super().is_unique and self._nan_idxs.size < 2",
        "begin_line": 453,
        "end_line": 454,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_data#69",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_data(values, dtype=None)",
        "snippet": "def _ensure_data(values, dtype=None):\n    \"\"\"\n    routine to ensure that our data is of the correct\n    input dtype for lower-level routines\n\n    This will coerce:\n    - ints -> int64\n    - uint -> uint64\n    - bool -> uint64 (TODO this should be uint8)\n    - datetimelike -> i8\n    - datetime64tz -> i8 (in local tz)\n    - categorical -> codes\n\n    Parameters\n    ----------\n    values : array-like\n    dtype : pandas_dtype, optional\n        coerce to this dtype\n\n    Returns\n    -------\n    values : ndarray\n    pandas_dtype : str or dtype\n    \"\"\"\n    # we check some simple dtypes first\n    if is_object_dtype(dtype):\n        return ensure_object(np.asarray(values)), \"object\"\n    elif is_object_dtype(values) and dtype is None:\n        return ensure_object(np.asarray(values)), \"object\"\n\n    try:\n        if is_bool_dtype(values) or is_bool_dtype(dtype):\n            # we are actually coercing to uint64\n            # until our algos support uint8 directly (see TODO)\n            return np.asarray(values).astype(\"uint64\"), \"bool\"\n        elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\n            return ensure_int64(values), \"int64\"\n        elif is_unsigned_integer_dtype(values) or is_unsigned_integer_dtype(dtype):\n            return ensure_uint64(values), \"uint64\"\n        elif is_float_dtype(values) or is_float_dtype(dtype):\n            return ensure_float64(values), \"float64\"\n        elif is_complex_dtype(values) or is_complex_dtype(dtype):\n\n            # ignore the fact that we are casting to float\n            # which discards complex parts\n            with catch_warnings():\n                simplefilter(\"ignore\", np.ComplexWarning)\n                values = ensure_float64(values)\n            return values, \"float64\"\n\n    except (TypeError, ValueError, OverflowError):\n        # if we are trying to coerce to a dtype\n        # and it is incompat this will fall through to here\n        return ensure_object(values), \"object\"\n\n    # datetimelike\n    if (\n        needs_i8_conversion(values)\n        or is_period_dtype(dtype)\n        or is_datetime64_any_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n    ):\n        if is_period_dtype(values) or is_period_dtype(dtype):\n            from pandas import PeriodIndex\n\n            values = PeriodIndex(values)\n            dtype = values.dtype\n        elif is_timedelta64_dtype(values) or is_timedelta64_dtype(dtype):\n            from pandas import TimedeltaIndex\n\n            values = TimedeltaIndex(values)\n            dtype = values.dtype\n        else:\n            # Datetime\n            if values.ndim > 1 and is_datetime64_ns_dtype(values):\n                # Avoid calling the DatetimeIndex constructor as it is 1D only\n                # Note: this is reached by DataFrame.rank calls GH#27027\n                asi8 = values.view(\"i8\")\n                dtype = values.dtype\n                return asi8, dtype\n\n            from pandas import DatetimeIndex\n\n            values = DatetimeIndex(values)\n            dtype = values.dtype\n\n        return values.asi8, dtype\n\n    elif is_categorical_dtype(values) and (\n        is_categorical_dtype(dtype) or dtype is None\n    ):\n        values = getattr(values, \"values\", values)\n        values = values.codes\n        dtype = \"category\"\n\n        # we are actually coercing to int64\n        # until our algos support int* directly (not all do)\n        values = ensure_int64(values)\n\n        return values, dtype\n\n    # we have failed, return object\n    values = np.asarray(values, dtype=np.object)\n    return ensure_object(values), \"object\"",
        "begin_line": 69,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._reconstruct_data#175",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._reconstruct_data(values, dtype, original)",
        "snippet": "def _reconstruct_data(values, dtype, original):\n    \"\"\"\n    reverse of _ensure_data\n\n    Parameters\n    ----------\n    values : ndarray\n    dtype : pandas_dtype\n    original : ndarray-like\n\n    Returns\n    -------\n    Index for extension types, otherwise ndarray casted to dtype\n    \"\"\"\n    if is_extension_array_dtype(dtype):\n        values = dtype.construct_array_type()._from_sequence(values)\n    elif is_bool_dtype(dtype):\n        values = values.astype(dtype, copy=False)\n\n        # we only support object dtypes bool Index\n        if isinstance(original, ABCIndexClass):\n            values = values.astype(object, copy=False)\n    elif dtype is not None:\n        if is_datetime64_dtype(dtype):\n            dtype = \"datetime64[ns]\"\n        elif is_timedelta64_dtype(dtype):\n            dtype = \"timedelta64[ns]\"\n\n        values = values.astype(dtype, copy=False)\n\n    return values",
        "begin_line": 175,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._ensure_arraylike#208",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._ensure_arraylike(values)",
        "snippet": "def _ensure_arraylike(values):\n    \"\"\"\n    ensure that we are arraylike if not already\n    \"\"\"\n    if not is_array_like(values):\n        inferred = lib.infer_dtype(values, skipna=False)\n        if inferred in [\"mixed\", \"string\"]:\n            if isinstance(values, tuple):\n                values = list(values)\n            values = construct_1d_object_array_from_listlike(values)\n        else:\n            values = np.asarray(values)\n    return values",
        "begin_line": 208,
        "end_line": 220,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001626280696048138,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._get_hashtable_algo#232",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_hashtable_algo(values)",
        "snippet": "def _get_hashtable_algo(values):\n    \"\"\"\n    Parameters\n    ----------\n    values : arraylike\n\n    Returns\n    -------\n    htable : HashTable subclass\n    values : ndarray\n    \"\"\"\n    values, _ = _ensure_data(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables[ndtype]\n    return htable, values",
        "begin_line": 232,
        "end_line": 247,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._get_values_for_rank#250",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_values_for_rank(values)",
        "snippet": "def _get_values_for_rank(values):\n    if is_categorical_dtype(values):\n        values = values._values_for_rank()\n\n    values, _ = _ensure_data(values)\n    return values",
        "begin_line": 250,
        "end_line": 255,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016204829039053638,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._get_data_algo#258",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_data_algo(values)",
        "snippet": "def _get_data_algo(values):\n    values = _get_values_for_rank(values)\n\n    ndtype = _check_object_for_strings(values)\n    htable = _hashtables.get(ndtype, _hashtables[\"object\"])\n\n    return htable, values",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016204829039053638,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._check_object_for_strings#267",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._check_object_for_strings(values)",
        "snippet": "def _check_object_for_strings(values) -> str:\n    \"\"\"\n    Check if we can use string hashtable instead of object hashtable.\n\n    Parameters\n    ----------\n    values : ndarray\n    ndtype : str\n\n    Returns\n    -------\n    str\n    \"\"\"\n    ndtype = values.dtype.name\n    if ndtype == \"object\":\n\n        # it's cheaper to use a String Hash Table than Object; we infer\n        # including nulls because that is the only difference between\n        # StringHashTable and ObjectHashtable\n        if lib.infer_dtype(values, skipna=False) in [\"string\"]:\n            ndtype = \"string\"\n    return ndtype",
        "begin_line": 267,
        "end_line": 288,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016809547823163558,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms.unique#296",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.unique(values)",
        "snippet": "def unique(values):\n    \"\"\"\n    Hash table-based unique. Uniques are returned in order\n    of appearance. This does NOT sort.\n\n    Significantly faster than numpy.unique. Includes NA values.\n\n    Parameters\n    ----------\n    values : 1d array-like\n\n    Returns\n    -------\n    numpy.ndarray or ExtensionArray\n\n        The return can be:\n\n        * Index : when the input is an Index\n        * Categorical : when the input is a Categorical dtype\n        * ndarray : when the input is a Series/ndarray\n\n        Return numpy.ndarray or ExtensionArray.\n\n    See Also\n    --------\n    Index.unique : Return unique values from an Index.\n    Series.unique : Return unique values of Series object.\n\n    Examples\n    --------\n    >>> pd.unique(pd.Series([2, 1, 3, 3]))\n    array([2, 1, 3])\n\n    >>> pd.unique(pd.Series([2] + [1] * 5))\n    array([2, 1])\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101'),\n    ...                     pd.Timestamp('20160101')]))\n    array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n    >>> pd.unique(pd.Series([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                      pd.Timestamp('20160101', tz='US/Eastern')]))\n    array([Timestamp('2016-01-01 00:00:00-0500', tz='US/Eastern')],\n          dtype=object)\n\n    >>> pd.unique(pd.Index([pd.Timestamp('20160101', tz='US/Eastern'),\n    ...                     pd.Timestamp('20160101', tz='US/Eastern')]))\n    DatetimeIndex(['2016-01-01 00:00:00-05:00'],\n    ...           dtype='datetime64[ns, US/Eastern]', freq=None)\n\n    >>> pd.unique(list('baabc'))\n    array(['b', 'a', 'c'], dtype=object)\n\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'))))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.unique(pd.Series(pd.Categorical(list('baabc'),\n    ...                                    categories=list('abc'),\n    ...                                    ordered=True)))\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    An array of tuples\n\n    >>> pd.unique([('a', 'b'), ('b', 'a'), ('a', 'c'), ('b', 'a')])\n    array([('a', 'b'), ('b', 'a'), ('a', 'c')], dtype=object)\n    \"\"\"\n    values = _ensure_arraylike(values)\n\n    if is_extension_array_dtype(values):\n        # Dispatch to extension dtype's unique.\n        return values.unique()\n\n    original = values\n    htable, values = _get_hashtable_algo(values)\n\n    table = htable(len(values))\n    uniques = table.unique(values)\n    uniques = _reconstruct_data(uniques, original.dtype, original)\n    return uniques",
        "begin_line": 296,
        "end_line": 386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._factorize_array#457",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._factorize_array(values, na_sentinel: int=-1, size_hint=None, na_value=None)",
        "snippet": "def _factorize_array(\n    values, na_sentinel: int = -1, size_hint=None, na_value=None\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Factorize an array-like to codes and uniques.\n\n    This doesn't do any coercion of types or unboxing before factorization.\n\n    Parameters\n    ----------\n    values : ndarray\n    na_sentinel : int, default -1\n    size_hint : int, optional\n        Passsed through to the hashtable's 'get_labels' method\n    na_value : object, optional\n        A value in `values` to consider missing. Note: only use this\n        parameter when you know that you don't have any values pandas would\n        consider missing in the array (NaN for float data, iNaT for\n        datetimes, etc.).\n\n    Returns\n    -------\n    codes : ndarray\n    uniques : ndarray\n    \"\"\"\n    hash_klass, values = _get_data_algo(values)\n\n    table = hash_klass(size_hint or len(values))\n    uniques, codes = table.factorize(values, na_sentinel=na_sentinel, na_value=na_value)\n\n    codes = ensure_platform_int(codes)\n    return codes, uniques",
        "begin_line": 457,
        "end_line": 488,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001626280696048138,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms.factorize#513",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.factorize(values, sort: bool=False, na_sentinel: int=-1, size_hint: Optional[int]=None)",
        "snippet": "def factorize(\n    values, sort: bool = False, na_sentinel: int = -1, size_hint: Optional[int] = None\n) -> Tuple[np.ndarray, Union[np.ndarray, ABCIndex]]:\n    \"\"\"\n    Encode the object as an enumerated type or categorical variable.\n\n    This method is useful for obtaining a numeric representation of an\n    array when all that matters is identifying distinct values. `factorize`\n    is available as both a top-level function :func:`pandas.factorize`,\n    and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.\n\n    Parameters\n    ----------\n    {values}{sort}\n    na_sentinel : int, default -1\n        Value to mark \"not found\".\n    {size_hint}\\\n\n    Returns\n    -------\n    codes : ndarray\n        An integer ndarray that's an indexer into `uniques`.\n        ``uniques.take(codes)`` will have the same values as `values`.\n    uniques : ndarray, Index, or Categorical\n        The unique valid values. When `values` is Categorical, `uniques`\n        is a Categorical. When `values` is some other pandas object, an\n        `Index` is returned. Otherwise, a 1-D ndarray is returned.\n\n        .. note ::\n\n           Even if there's a missing value in `values`, `uniques` will\n           *not* contain an entry for it.\n\n    See Also\n    --------\n    cut : Discretize continuous-valued array.\n    unique : Find the unique value in an array.\n\n    Examples\n    --------\n    These examples all show factorize as a top-level method like\n    ``pd.factorize(values)``. The results are identical for methods like\n    :meth:`Series.factorize`.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'])\n    >>> codes\n    array([0, 0, 1, 2, 0])\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    With ``sort=True``, the `uniques` will be sorted, and `codes` will be\n    shuffled so that the relationship is the maintained.\n\n    >>> codes, uniques = pd.factorize(['b', 'b', 'a', 'c', 'b'], sort=True)\n    >>> codes\n    array([1, 1, 0, 2, 1])\n    >>> uniques\n    array(['a', 'b', 'c'], dtype=object)\n\n    Missing values are indicated in `codes` with `na_sentinel`\n    (``-1`` by default). Note that missing values are never\n    included in `uniques`.\n\n    >>> codes, uniques = pd.factorize(['b', None, 'a', 'c', 'b'])\n    >>> codes\n    array([ 0, -1,  1,  2,  0])\n    >>> uniques\n    array(['b', 'a', 'c'], dtype=object)\n\n    Thus far, we've only factorized lists (which are internally coerced to\n    NumPy arrays). When factorizing pandas objects, the type of `uniques`\n    will differ. For Categoricals, a `Categorical` is returned.\n\n    >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1])\n    >>> uniques\n    [a, c]\n    Categories (3, object): [a, b, c]\n\n    Notice that ``'b'`` is in ``uniques.categories``, despite not being\n    present in ``cat.values``.\n\n    For all other pandas objects, an Index of the appropriate type is\n    returned.\n\n    >>> cat = pd.Series(['a', 'a', 'c'])\n    >>> codes, uniques = pd.factorize(cat)\n    >>> codes\n    array([0, 0, 1])\n    >>> uniques\n    Index(['a', 'c'], dtype='object')\n    \"\"\"\n    # Implementation notes: This method is responsible for 3 things\n    # 1.) coercing data to array-like (ndarray, Index, extension array)\n    # 2.) factorizing codes and uniques\n    # 3.) Maybe boxing the uniques in an Index\n    #\n    # Step 2 is dispatched to extension types (like Categorical). They are\n    # responsible only for factorization. All data coercion, sorting and boxing\n    # should happen here.\n\n    values = _ensure_arraylike(values)\n    original = values\n\n    if is_extension_array_dtype(values):\n        values = extract_array(values)\n        codes, uniques = values.factorize(na_sentinel=na_sentinel)\n        dtype = original.dtype\n    else:\n        values, dtype = _ensure_data(values)\n\n        if original.dtype.kind in [\"m\", \"M\"]:\n            na_value = na_value_for_dtype(original.dtype)\n        else:\n            na_value = None\n\n        codes, uniques = _factorize_array(\n            values, na_sentinel=na_sentinel, size_hint=size_hint, na_value=na_value\n        )\n\n    if sort and len(uniques) > 0:\n        uniques, codes = safe_sort(\n            uniques, codes, na_sentinel=na_sentinel, assume_unique=True, verify=False\n        )\n\n    uniques = _reconstruct_data(uniques, dtype, original)\n\n    # return original tenor\n    if isinstance(original, ABCIndexClass):\n        uniques = original._shallow_copy(uniques, name=None)\n    elif isinstance(original, ABCSeries):\n        from pandas import Index\n\n        uniques = Index(uniques)\n\n    return codes, uniques",
        "begin_line": 513,
        "end_line": 650,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms._get_take_nd_function#1431",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms._get_take_nd_function(ndim: int, arr_dtype, out_dtype, axis: int=0, mask_info=None)",
        "snippet": "def _get_take_nd_function(\n    ndim: int, arr_dtype, out_dtype, axis: int = 0, mask_info=None\n):\n    if ndim <= 2:\n        tup = (arr_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            return func\n\n        tup = (out_dtype.name, out_dtype.name)\n        if ndim == 1:\n            func = _take_1d_dict.get(tup, None)\n        elif ndim == 2:\n            if axis == 0:\n                func = _take_2d_axis0_dict.get(tup, None)\n            else:\n                func = _take_2d_axis1_dict.get(tup, None)\n        if func is not None:\n            func = _convert_wrapper(func, out_dtype)\n            return func\n\n    def func2(arr, indexer, out, fill_value=np.nan):\n        indexer = ensure_int64(indexer)\n        _take_nd_object(\n            arr, indexer, out, axis=axis, fill_value=fill_value, mask_info=mask_info\n        )\n\n    return func2",
        "begin_line": 1431,
        "end_line": 1464,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms.take_nd#1560",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.take_nd(arr, indexer, axis: int=0, out=None, fill_value=np.nan, allow_fill: bool=True)",
        "snippet": "def take_nd(\n    arr, indexer, axis: int = 0, out=None, fill_value=np.nan, allow_fill: bool = True\n):\n    \"\"\"\n    Specialized Cython take which sets NaN values in one pass\n\n    This dispatches to ``take`` defined on ExtensionArrays. It does not\n    currently dispatch to ``SparseArray.take`` for sparse ``arr``.\n\n    Parameters\n    ----------\n    arr : array-like\n        Input array.\n    indexer : ndarray\n        1-D array of indices to take, subarrays corresponding to -1 value\n        indices are filed with fill_value\n    axis : int, default 0\n        Axis to take from\n    out : ndarray or None, default None\n        Optional output array, must be appropriate type to hold input and\n        fill_value together, if indexer has any -1 value entries; call\n        maybe_promote to determine this type for any fill_value\n    fill_value : any, default np.nan\n        Fill value to replace -1 values with\n    allow_fill : boolean, default True\n        If False, indexer is assumed to contain no -1 values so no filling\n        will be done.  This short-circuits computation of a mask.  Result is\n        undefined if allow_fill == False and -1 is present in indexer.\n\n    Returns\n    -------\n    subarray : array-like\n        May be the same type as the input, or cast to an ndarray.\n    \"\"\"\n    mask_info = None\n\n    if is_extension_array_dtype(arr):\n        return arr.take(indexer, fill_value=fill_value, allow_fill=allow_fill)\n\n    arr = extract_array(arr)\n    arr = np.asarray(arr)\n\n    if indexer is None:\n        indexer = np.arange(arr.shape[axis], dtype=np.int64)\n        dtype, fill_value = arr.dtype, arr.dtype.type()\n    else:\n        indexer = ensure_int64(indexer, copy=False)\n        if not allow_fill:\n            dtype, fill_value = arr.dtype, arr.dtype.type()\n            mask_info = None, False\n        else:\n            # check for promotion based on types only (do this first because\n            # it's faster than computing a mask)\n            dtype, fill_value = maybe_promote(arr.dtype, fill_value)\n            if dtype != arr.dtype and (out is None or out.dtype != dtype):\n                # check if promotion is actually required based on indexer\n                mask = indexer == -1\n                needs_masking = mask.any()\n                mask_info = mask, needs_masking\n                if needs_masking:\n                    if out is not None and out.dtype != dtype:\n                        raise TypeError(\"Incompatible type for fill_value\")\n                else:\n                    # if not, then depromote, set fill_value to dummy\n                    # (it won't be used but we don't want the cython code\n                    # to crash when trying to cast it to dtype)\n                    dtype, fill_value = arr.dtype, arr.dtype.type()\n\n    flip_order = False\n    if arr.ndim == 2:\n        if arr.flags.f_contiguous:\n            flip_order = True\n\n    if flip_order:\n        arr = arr.T\n        axis = arr.ndim - axis - 1\n        if out is not None:\n            out = out.T\n\n    # at this point, it's guaranteed that dtype can hold both the arr values\n    # and the fill_value\n    if out is None:\n        out_shape_ = list(arr.shape)\n        out_shape_[axis] = len(indexer)\n        out_shape = tuple(out_shape_)\n        if arr.flags.f_contiguous and axis == arr.ndim - 1:\n            # minor tweak that can make an order-of-magnitude difference\n            # for dataframes initialized directly from 2-d ndarrays\n            # (s.t. df.values is c-contiguous and df._data.blocks[0] is its\n            # f-contiguous transpose)\n            out = np.empty(out_shape, dtype=dtype, order=\"F\")\n        else:\n            out = np.empty(out_shape, dtype=dtype)\n\n    func = _get_take_nd_function(\n        arr.ndim, arr.dtype, out.dtype, axis=axis, mask_info=mask_info\n    )\n    func(arr, indexer, out, fill_value)\n\n    if flip_order:\n        out = out.T\n    return out",
        "begin_line": 1560,
        "end_line": 1661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms.safe_sort#1935",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.safe_sort(values, codes=None, na_sentinel: int=-1, assume_unique: bool=False, verify: bool=True)",
        "snippet": "def safe_sort(\n    values,\n    codes=None,\n    na_sentinel: int = -1,\n    assume_unique: bool = False,\n    verify: bool = True,\n) -> Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]:\n    \"\"\"\n    Sort ``values`` and reorder corresponding ``codes``.\n\n    ``values`` should be unique if ``codes`` is not None.\n    Safe for use with mixed types (int, str), orders ints before strs.\n\n    Parameters\n    ----------\n    values : list-like\n        Sequence; must be unique if ``codes`` is not None.\n    codes : list_like, optional\n        Indices to ``values``. All out of bound indices are treated as\n        \"not found\" and will be masked with ``na_sentinel``.\n    na_sentinel : int, default -1\n        Value in ``codes`` to mark \"not found\".\n        Ignored when ``codes`` is None.\n    assume_unique : bool, default False\n        When True, ``values`` are assumed to be unique, which can speed up\n        the calculation. Ignored when ``codes`` is None.\n    verify : bool, default True\n        Check if codes are out of bound for the values and put out of bound\n        codes equal to na_sentinel. If ``verify=False``, it is assumed there\n        are no out of bound codes. Ignored when ``codes`` is None.\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    ordered : ndarray\n        Sorted ``values``\n    new_codes : ndarray\n        Reordered ``codes``; returned when ``codes`` is not None.\n\n    Raises\n    ------\n    TypeError\n        * If ``values`` is not list-like or if ``codes`` is neither None\n        nor list-like\n        * If ``values`` cannot be sorted\n    ValueError\n        * If ``codes`` is not None and ``values`` contain duplicates.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"Only list-like objects are allowed to be passed to safe_sort as values\"\n        )\n\n    if not isinstance(values, np.ndarray) and not is_extension_array_dtype(values):\n        # don't convert to string types\n        dtype, _ = infer_dtype_from_array(values)\n        values = np.asarray(values, dtype=dtype)\n\n    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])\n\n    sorter = None\n    if (\n        not is_extension_array_dtype(values)\n        and lib.infer_dtype(values, skipna=False) == \"mixed-integer\"\n    ):\n        # unorderable in py3 if mixed str/int\n        ordered = sort_mixed(values)\n    else:\n        try:\n            sorter = values.argsort()\n            ordered = values.take(sorter)\n        except TypeError:\n            # try this anyway\n            ordered = sort_mixed(values)\n\n    # codes:\n\n    if codes is None:\n        return ordered\n\n    if not is_list_like(codes):\n        raise TypeError(\n            \"Only list-like objects or None are allowed to \"\n            \"be passed to safe_sort as codes\"\n        )\n    codes = ensure_platform_int(np.asarray(codes))\n\n    if not assume_unique and not len(unique(values)) == len(values):\n        raise ValueError(\"values should be unique if codes is not None\")\n\n    if sorter is None:\n        # mixed types\n        hash_klass, values = _get_data_algo(values)\n        t = hash_klass(len(values))\n        t.map_locations(values)\n        sorter = ensure_platform_int(t.lookup(ordered))\n\n    if na_sentinel == -1:\n        # take_1d is faster, but only works for na_sentinels of -1\n        order2 = sorter.argsort()\n        new_codes = take_1d(order2, codes, fill_value=-1)\n        if verify:\n            mask = (codes < -len(values)) | (codes >= len(values))\n        else:\n            mask = None\n    else:\n        reverse_indexer = np.empty(len(sorter), dtype=np.int_)\n        reverse_indexer.put(sorter, np.arange(len(sorter)))\n        # Out of bound indices will be masked with `na_sentinel` next, so we\n        # may deal with them here without performance loss using `mode='wrap'`\n        new_codes = reverse_indexer.take(codes, mode=\"wrap\")\n\n        mask = codes == na_sentinel\n        if verify:\n            mask = mask | (codes < -len(values)) | (codes >= len(values))\n\n    if mask is not None:\n        np.putmask(new_codes, mask, na_sentinel)\n\n    return ordered, ensure_platform_int(new_codes)",
        "begin_line": 1935,
        "end_line": 2060,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017777777777777779,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.algorithms.sort_mixed#1994",
        "src_path": "pandas/core/algorithms.py",
        "class_name": "pandas.core.algorithms",
        "signature": "pandas.core.algorithms.sort_mixed(values)",
        "snippet": "    def sort_mixed(values):\n        # order ints before strings, safe in py3\n        str_pos = np.array([isinstance(x, str) for x in values], dtype=bool)\n        nums = np.sort(values[~str_pos])\n        strs = np.sort(values[str_pos])\n        return np.concatenate([nums, np.asarray(strs, dtype=object)])",
        "begin_line": 1994,
        "end_line": 1999,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017777777777777779,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings._na_map#121",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._na_map(f, arr, na_result=None, dtype=object)",
        "snippet": "def _na_map(f, arr, na_result=None, dtype=object):\n    if is_extension_array_dtype(arr.dtype):\n        if na_result is None:\n            na_result = libmissing.NA\n        # just StringDtype\n        arr = extract_array(arr)\n        return _map_stringarray(f, arr, na_value=na_result, dtype=dtype)\n    if na_result is None:\n        na_result = np.nan\n    return _map_object(f, arr, na_mask=True, na_value=na_result, dtype=dtype)",
        "begin_line": 121,
        "end_line": 130,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings._map_object#203",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._map_object(f, arr, na_mask=False, na_value=np.nan, dtype=object)",
        "snippet": "def _map_object(f, arr, na_mask=False, na_value=np.nan, dtype=object):\n    if not len(arr):\n        return np.ndarray(0, dtype=dtype)\n\n    if isinstance(arr, ABCSeries):\n        arr = arr.values\n    if not isinstance(arr, np.ndarray):\n        arr = np.asarray(arr, dtype=object)\n    if na_mask:\n        mask = isna(arr)\n        convert = not np.all(mask)\n        try:\n            result = lib.map_infer_mask(arr, f, mask.view(np.uint8), convert)\n        except (TypeError, AttributeError) as e:\n            # Reraise the exception if callable `f` got wrong number of args.\n            # The user may want to be warned by this, instead of getting NaN\n            p_err = (\n                r\"((takes)|(missing)) (?(2)from \\d+ to )?\\d+ \"\n                r\"(?(3)required )positional arguments?\"\n            )\n\n            if len(e.args) >= 1 and re.search(p_err, e.args[0]):\n                # FIXME: this should be totally avoidable\n                raise e\n\n            def g(x):\n                try:\n                    return f(x)\n                except (TypeError, AttributeError):\n                    return na_value\n\n            return _map_object(g, arr, dtype=dtype)\n        if na_value is not np.nan:\n            np.putmask(result, mask, na_value)\n            if result.dtype == object:\n                result = lib.maybe_convert_objects(result)\n        return result\n    else:\n        return lib.map_infer(arr, f)",
        "begin_line": 203,
        "end_line": 241,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.str_encode#1864",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings.str_encode(arr, encoding, errors='strict')",
        "snippet": "def str_encode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    Encode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.encode`.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    encoded : Series/Index of objects\n    \"\"\"\n    if encoding in _cpython_optimized_encoders:\n        # CPython optimized implementation\n        f = lambda x: x.encode(encoding, errors)\n    else:\n        encoder = codecs.getencoder(encoding)\n        f = lambda x: encoder(x, errors)[0]\n    return _na_map(f, arr)",
        "begin_line": 1864,
        "end_line": 1884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings._forbid_nonstring_types#1935",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings._forbid_nonstring_types(func)",
        "snippet": "    def _forbid_nonstring_types(func):\n        func_name = func.__name__ if name is None else name\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            if self._inferred_dtype not in allowed_types:\n                msg = (\n                    f\"Cannot use .str.{func_name} with values of \"\n                    f\"inferred dtype '{self._inferred_dtype}'.\"\n                )\n                raise TypeError(msg)\n            return func(self, *args, **kwargs)\n\n        wrapper.__name__ = func_name\n        return wrapper",
        "begin_line": 1935,
        "end_line": 1949,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.wrapper#1939",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings",
        "signature": "pandas.core.strings.wrapper(self, *args, **kwargs)",
        "snippet": "        def wrapper(self, *args, **kwargs):\n            if self._inferred_dtype not in allowed_types:\n                msg = (\n                    f\"Cannot use .str.{func_name} with values of \"\n                    f\"inferred dtype '{self._inferred_dtype}'.\"\n                )\n                raise TypeError(msg)\n            return func(self, *args, **kwargs)",
        "begin_line": 1939,
        "end_line": 1946,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.StringMethods.__init__#2032",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods.__init__(self, data)",
        "snippet": "    def __init__(self, data):\n        self._inferred_dtype = self._validate(data)\n        self._is_categorical = is_categorical_dtype(data)\n        self._is_string = data.dtype.name == \"string\"\n\n        # .values.categories works for both Series/Index\n        self._parent = data.values.categories if self._is_categorical else data\n        # save orig to blow up categoricals to the right type\n        self._orig = data\n        self._freeze()",
        "begin_line": 2032,
        "end_line": 2041,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.StringMethods._validate#2044",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods._validate(data)",
        "snippet": "    def _validate(data):\n        \"\"\"\n        Auxiliary function for StringMethods, infers and checks dtype of data.\n\n        This is a \"first line of defence\" at the creation of the StringMethods-\n        object (see _make_accessor), and just checks that the dtype is in the\n        *union* of the allowed types over all string methods below; this\n        restriction is then refined on a per-method basis using the decorator\n        @forbid_nonstring_types (more info in the corresponding docstring).\n\n        This really should exclude all series/index with any non-string values,\n        but that isn't practical for performance reasons until we have a str\n        dtype (GH 9343 / 13877)\n\n        Parameters\n        ----------\n        data : The content of the Series\n\n        Returns\n        -------\n        dtype : inferred dtype of data\n        \"\"\"\n        from pandas import StringDtype\n\n        if isinstance(data, ABCMultiIndex):\n            raise AttributeError(\n                \"Can only use .str accessor with Index, not MultiIndex\"\n            )\n\n        # see _libs/lib.pyx for list of inferred types\n        allowed_types = [\"string\", \"empty\", \"bytes\", \"mixed\", \"mixed-integer\"]\n\n        values = getattr(data, \"values\", data)  # Series / Index\n        values = getattr(values, \"categories\", values)  # categorical / normal\n\n        # explicitly allow StringDtype\n        if isinstance(values.dtype, StringDtype):\n            return \"string\"\n\n        try:\n            inferred_dtype = lib.infer_dtype(values, skipna=True)\n        except ValueError:\n            # GH#27571 mostly occurs with ExtensionArray\n            inferred_dtype = None\n\n        if inferred_dtype not in allowed_types:\n            raise AttributeError(\"Can only use .str accessor with string values!\")\n        return inferred_dtype",
        "begin_line": 2044,
        "end_line": 2091,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.StringMethods._wrap_result#2112",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods._wrap_result(self, result, use_codes=True, name=None, expand=None, fill_value=np.nan, returns_string=True)",
        "snippet": "    def _wrap_result(\n        self,\n        result,\n        use_codes=True,\n        name=None,\n        expand=None,\n        fill_value=np.nan,\n        returns_string=True,\n    ):\n\n        from pandas import Index, Series, MultiIndex\n\n        # for category, we do the stuff on the categories, so blow it up\n        # to the full series again\n        # But for some operations, we have to do the stuff on the full values,\n        # so make it possible to skip this step as the method already did this\n        # before the transformation...\n        if use_codes and self._is_categorical:\n            # if self._orig is a CategoricalIndex, there is no .cat-accessor\n            result = take_1d(\n                result, Series(self._orig, copy=False).cat.codes, fill_value=fill_value\n            )\n\n        if not hasattr(result, \"ndim\") or not hasattr(result, \"dtype\"):\n            return result\n        assert result.ndim < 3\n\n        # We can be wrapping a string / object / categorical result, in which\n        # case we'll want to return the same dtype as the input.\n        # Or we can be wrapping a numeric output, in which case we don't want\n        # to return a StringArray.\n        if self._is_string and returns_string:\n            dtype = \"string\"\n        else:\n            dtype = None\n\n        if expand is None:\n            # infer from ndim if expand is not specified\n            expand = result.ndim != 1\n\n        elif expand is True and not isinstance(self._orig, ABCIndexClass):\n            # required when expand=True is explicitly specified\n            # not needed when inferred\n\n            def cons_row(x):\n                if is_list_like(x):\n                    return x\n                else:\n                    return [x]\n\n            result = [cons_row(x) for x in result]\n            if result:\n                # propagate nan values to match longest sequence (GH 18450)\n                max_len = max(len(x) for x in result)\n                result = [\n                    x * max_len if len(x) == 0 or x[0] is np.nan else x for x in result\n                ]\n\n        if not isinstance(expand, bool):\n            raise ValueError(\"expand must be True or False\")\n\n        if expand is False:\n            # if expand is False, result should have the same name\n            # as the original otherwise specified\n            if name is None:\n                name = getattr(result, \"name\", None)\n            if name is None:\n                # do not use logical or, _orig may be a DataFrame\n                # which has \"name\" column\n                name = self._orig.name\n\n        # Wait until we are sure result is a Series or Index before\n        # checking attributes (GH 12180)\n        if isinstance(self._orig, ABCIndexClass):\n            # if result is a boolean np.array, return the np.array\n            # instead of wrapping it into a boolean Index (GH 8875)\n            if is_bool_dtype(result):\n                return result\n\n            if expand:\n                result = list(result)\n                out = MultiIndex.from_tuples(result, names=name)\n                if out.nlevels == 1:\n                    # We had all tuples of length-one, which are\n                    # better represented as a regular Index.\n                    out = out.get_level_values(0)\n                return out\n            else:\n                return Index(result, name=name)\n        else:\n            index = self._orig.index\n            if expand:\n                cons = self._orig._constructor_expanddim\n                result = cons(result, columns=name, index=index, dtype=dtype)\n            else:\n                # Must be a Series\n                cons = self._orig._constructor\n                result = cons(result, name=name, index=index, dtype=dtype)\n            return result",
        "begin_line": 2112,
        "end_line": 2210,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.strings.StringMethods.encode#2903",
        "src_path": "pandas/core/strings.py",
        "class_name": "pandas.core.strings.StringMethods",
        "signature": "pandas.core.strings.StringMethods.encode(self, encoding, errors='strict')",
        "snippet": "    def encode(self, encoding, errors=\"strict\"):\n        result = str_encode(self._parent, encoding, errors)\n        return self._wrap_result(result, returns_string=False)",
        "begin_line": 2903,
        "end_line": 2905,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.__init__#47",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.__init__(self, dtype: object)",
        "snippet": "    def __init__(self, dtype: object):\n        self._dtype = np.dtype(dtype)",
        "begin_line": 47,
        "end_line": 48,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.0006706908115358819,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0006706908115358819,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasDtype.name#61",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasDtype",
        "signature": "pandas.core.arrays.numpy_.PandasDtype.name(self)",
        "snippet": "    def name(self) -> str:\n        \"\"\"\n        A bit-width name for this data-type.\n        \"\"\"\n        return self._dtype.name",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__init__#157",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__init__(self, values: Union[np.ndarray, 'PandasArray'], copy: bool=False)",
        "snippet": "    def __init__(self, values: Union[np.ndarray, \"PandasArray\"], copy: bool = False):\n        if isinstance(values, type(self)):\n            values = values._ndarray\n        if not isinstance(values, np.ndarray):\n            raise ValueError(\n                f\"'values' must be a NumPy array, not {type(values).__name__}\"\n            )\n\n        if values.ndim != 1:\n            raise ValueError(\"PandasArray must be 1-dimensional.\")\n\n        if copy:\n            values = values.copy()\n\n        self._ndarray = values\n        self._dtype = PandasDtype(values.dtype)",
        "begin_line": 157,
        "end_line": 172,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.0006706908115358819,
            "pseudo_tarantula_susp": 0.0010256410256410256,
            "pseudo_op2_susp": 0.0006706908115358819,
            "pseudo_barinel_susp": 0.0010256410256410256
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.dtype#196",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.dtype(self)",
        "snippet": "    def dtype(self) -> PandasDtype:\n        return self._dtype",
        "begin_line": 196,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__array__#202",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        return np.asarray(self._ndarray, dtype=dtype)",
        "begin_line": 202,
        "end_line": 203,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__getitem__#251",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, type(self)):\n            item = item._ndarray\n\n        item = check_array_indexer(self, item)\n\n        result = self._ndarray[item]\n        if not lib.is_scalar(item):\n            result = type(self)(result)\n        return result",
        "begin_line": 251,
        "end_line": 260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.__len__#273",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._ndarray)",
        "begin_line": 273,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.numpy_.PandasArray.to_numpy#438",
        "src_path": "pandas/core/arrays/numpy_.py",
        "class_name": "pandas.core.arrays.numpy_.PandasArray",
        "signature": "pandas.core.arrays.numpy_.PandasArray.to_numpy(self, dtype=None, copy=False, na_value=lib.no_default)",
        "snippet": "    def to_numpy(self, dtype=None, copy=False, na_value=lib.no_default):\n        result = np.asarray(self._ndarray, dtype=dtype)\n\n        if (copy or na_value is not lib.no_default) and result is self._ndarray:\n            result = result.copy()\n\n        if na_value is not lib.no_default:\n            result[self.isna()] = na_value\n\n        return result",
        "begin_line": 438,
        "end_line": 447,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.PandasObject._reset_cache#66",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.PandasObject",
        "signature": "pandas.core.base.PandasObject._reset_cache(self, key=None)",
        "snippet": "    def _reset_cache(self, key=None):\n        \"\"\"\n        Reset cached properties. If ``key`` is passed, only clears that key.\n        \"\"\"\n        if getattr(self, \"_cache\", None) is None:\n            return\n        if key is None:\n            self._cache.clear()\n        else:\n            self._cache.pop(key, None)",
        "begin_line": 66,
        "end_line": 75,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019116803670426305,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin._freeze#102",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin._freeze(self)",
        "snippet": "    def _freeze(self):\n        \"\"\"\n        Prevents setting additional attributes.\n        \"\"\"\n        object.__setattr__(self, \"__frozen\", True)",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.NoNewAttributesMixin.__setattr__#109",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.NoNewAttributesMixin",
        "signature": "pandas.core.base.NoNewAttributesMixin.__setattr__(self, key: str, value)",
        "snippet": "    def __setattr__(self, key: str, value):\n        # _cache is used by a decorator\n        # We need to check both 1.) cls.__dict__ and 2.) getattr(self, key)\n        # because\n        # 1.) getattr is false for attributes that raise errors\n        # 2.) cls.__dict__ doesn't traverse into base classes\n        if getattr(self, \"__frozen\", False) and not (\n            key == \"_cache\"\n            or key in type(self).__dict__\n            or getattr(self, key, None) is not None\n        ):\n            raise AttributeError(f\"You cannot add any new attribute '{key}'\")\n        object.__setattr__(self, key, value)",
        "begin_line": 109,
        "end_line": 121,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.ndim#635",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.ndim(self)",
        "snippet": "    def ndim(self) -> int:\n        \"\"\"\n        Number of dimensions of the underlying data, by definition 1.\n        \"\"\"\n        return 1",
        "begin_line": 635,
        "end_line": 639,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019880715705765406,
            "pseudo_dstar_susp": 0.0015037593984962407,
            "pseudo_tarantula_susp": 0.0013605442176870747,
            "pseudo_op2_susp": 0.0015037593984962407,
            "pseudo_barinel_susp": 0.0013605442176870747
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.size#674",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.size(self)",
        "snippet": "    def size(self) -> int:\n        \"\"\"\n        Return the number of elements in the underlying data.\n        \"\"\"\n        return len(self._values)",
        "begin_line": 674,
        "end_line": 678,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin._ndarray_values#859",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin._ndarray_values(self)",
        "snippet": "    def _ndarray_values(self) -> np.ndarray:\n        \"\"\"\n        The data as an ndarray, possibly losing information.\n\n        The expectation is that this is cheap to compute, and is primarily\n        used for interacting with our indexers.\n\n        - categorical -> codes\n        \"\"\"\n        if is_extension_array_dtype(self):\n            return self.array._ndarray_values\n        # As a mixin, we depend on the mixing class having values.\n        # Special mixin syntax may be developed in the future:\n        # https://github.com/python/typing/issues/246\n        return self.values  # type: ignore",
        "begin_line": 859,
        "end_line": 873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.__iter__#1053",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.__iter__(self)",
        "snippet": "    def __iter__(self):\n        \"\"\"\n        Return an iterator of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n\n        Returns\n        -------\n        iterator\n        \"\"\"\n        # We are explicitly making element iterators.\n        if not isinstance(self._values, np.ndarray):\n            # Check type instead of dtype to catch DTA/TDA\n            return iter(self._values)\n        else:\n            return map(self._values.item, range(self._values.size))",
        "begin_line": 1053,
        "end_line": 1070,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007183908045977011,
            "pseudo_dstar_susp": 0.0006578947368421052,
            "pseudo_tarantula_susp": 0.000980392156862745,
            "pseudo_op2_susp": 0.0006578947368421052,
            "pseudo_barinel_susp": 0.000980392156862745
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.unique#1273",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.unique(self)",
        "snippet": "    def unique(self):\n        values = self._values\n\n        if hasattr(values, \"unique\"):\n\n            result = values.unique()\n            if self.dtype.kind in [\"m\", \"M\"] and isinstance(self, ABCSeries):\n                # GH#31182 Series._values returns EA, unpack for backward-compat\n                if getattr(self.dtype, \"tz\", None) is None:\n                    result = np.asarray(result)\n        else:\n            result = unique1d(values)\n\n        return result",
        "begin_line": 1273,
        "end_line": 1286,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.nunique#1288",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.nunique(self, dropna: bool=True)",
        "snippet": "    def nunique(self, dropna: bool = True) -> int:\n        \"\"\"\n        Return number of unique elements in the object.\n\n        Excludes NA values by default.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't include NaN in the count.\n\n        Returns\n        -------\n        int\n\n        See Also\n        --------\n        DataFrame.nunique: Method nunique for DataFrame.\n        Series.count: Count non-NA/null observations in the Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 3, 5, 7, 7])\n        >>> s\n        0    1\n        1    3\n        2    5\n        3    7\n        4    7\n        dtype: int64\n\n        >>> s.nunique()\n        4\n        \"\"\"\n        uniqs = self.unique()\n        n = len(uniqs)\n        if dropna and isna(uniqs).any():\n            n -= 1\n        return n",
        "begin_line": 1288,
        "end_line": 1326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.base.IndexOpsMixin.is_unique#1329",
        "src_path": "pandas/core/base.py",
        "class_name": "pandas.core.base.IndexOpsMixin",
        "signature": "pandas.core.base.IndexOpsMixin.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return boolean if values in the object are unique.\n\n        Returns\n        -------\n        bool\n        \"\"\"\n        return self.nunique(dropna=False) == len(self)",
        "begin_line": 1329,
        "end_line": 1337,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype#125",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        The dtype for the TimedeltaArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to be an instance\n           of a :class:`pandas.api.extensions.ExtensionDtype` subclass,\n           not a ``numpy.dtype``.\n\n        Returns\n        -------\n        numpy.dtype\n        \"\"\"\n        return _TD_DTYPE",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new#195",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._simple_new(cls, values, freq=None, dtype=_TD_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_TD_DTYPE):\n        assert dtype == _TD_DTYPE, dtype\n        assert isinstance(values, np.ndarray), type(values)\n        if values.dtype != _TD_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(_TD_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = to_offset(freq)\n        result._dtype = _TD_DTYPE\n        return result",
        "begin_line": 195,
        "end_line": 206,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence#209",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas.TimedeltaArray",
        "signature": "pandas.core.arrays.timedeltas.TimedeltaArray._from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None)",
        "snippet": "    def _from_sequence(cls, data, dtype=_TD_DTYPE, copy=False, freq=None, unit=None):\n        if dtype:\n            _validate_td64_dtype(dtype)\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        data, inferred_freq = sequence_to_td64ns(data, copy=copy, unit=unit)\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        result = cls._simple_new(data, freq=freq)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 209,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.sequence_to_td64ns#900",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.sequence_to_td64ns(data, copy=False, unit='ns', errors='raise')",
        "snippet": "def sequence_to_td64ns(data, copy=False, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Parameters\n    ----------\n    array : list-like\n    copy : bool, default False\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    converted : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``timedelta64[ns]``.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting ``errors=ignore`` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    inferred_freq = None\n    unit = parse_timedelta_unit(unit)\n\n    # Unwrap whatever we have into a np.ndarray\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.array(data, copy=False)\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    elif isinstance(data, (ABCTimedeltaIndex, TimedeltaArray)):\n        inferred_freq = data.freq\n        data = data._data\n\n    # Convert whatever we have into timedelta64[ns] dtype\n    if is_object_dtype(data.dtype) or is_string_dtype(data.dtype):\n        # no need to make a copy, need to convert if string-dtyped\n        data = objects_to_td64ns(data, unit=unit, errors=errors)\n        copy = False\n\n    elif is_integer_dtype(data.dtype):\n        # treat as multiples of the given unit\n        data, copy_made = ints_to_td64ns(data, unit=unit)\n        copy = copy and not copy_made\n\n    elif is_float_dtype(data.dtype):\n        # cast the unit, multiply base/frace separately\n        # to avoid precision issues from float -> int\n        mask = np.isnan(data)\n        m, p = precision_from_unit(unit)\n        base = data.astype(np.int64)\n        frac = data - base\n        if p:\n            frac = np.round(frac, p)\n        data = (base * m + (frac * m).astype(np.int64)).view(\"timedelta64[ns]\")\n        data[mask] = iNaT\n        copy = False\n\n    elif is_timedelta64_dtype(data.dtype):\n        if data.dtype != _TD_DTYPE:\n            # non-nano unit\n            # TODO: watch out for overflows\n            data = data.astype(_TD_DTYPE)\n            copy = False\n\n    else:\n        # This includes datetime64-dtype, see GH#23539, GH#29794\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to timedelta64[ns]\")\n\n    data = np.array(data, copy=copy)\n\n    assert data.dtype == \"m8[ns]\", data\n    return data, inferred_freq",
        "begin_line": 900,
        "end_line": 983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas.objects_to_td64ns#1026",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas.objects_to_td64ns(data, unit='ns', errors='raise')",
        "snippet": "def objects_to_td64ns(data, unit=\"ns\", errors=\"raise\"):\n    \"\"\"\n    Convert a object-dtyped or string-dtyped array into an\n    timedelta64[ns]-dtyped array.\n\n    Parameters\n    ----------\n    data : ndarray or Index\n    unit : str, default \"ns\"\n        The timedelta unit to treat integers as multiples of.\n    errors : {\"raise\", \"coerce\", \"ignore\"}, default \"raise\"\n        How to handle elements that cannot be converted to timedelta64[ns].\n        See ``pandas.to_timedelta`` for details.\n\n    Returns\n    -------\n    numpy.ndarray : timedelta64[ns] array converted from data\n\n    Raises\n    ------\n    ValueError : Data cannot be converted to timedelta64[ns].\n\n    Notes\n    -----\n    Unlike `pandas.to_timedelta`, if setting `errors=ignore` will not cause\n    errors to be ignored; they are caught and subsequently ignored at a\n    higher level.\n    \"\"\"\n    # coerce Index to np.ndarray, converting string-dtype if necessary\n    values = np.array(data, dtype=np.object_, copy=False)\n\n    result = array_to_timedelta64(values, unit=unit, errors=errors)\n    return result.view(\"timedelta64[ns]\")",
        "begin_line": 1026,
        "end_line": 1058,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.timedeltas._validate_td64_dtype#1061",
        "src_path": "pandas/core/arrays/timedeltas.py",
        "class_name": "pandas.core.arrays.timedeltas",
        "signature": "pandas.core.arrays.timedeltas._validate_td64_dtype(dtype)",
        "snippet": "def _validate_td64_dtype(dtype):\n    dtype = pandas_dtype(dtype)\n    if is_dtype_equal(dtype, np.dtype(\"timedelta64\")):\n        # no precision disallowed GH#24806\n        msg = (\n            \"Passing in 'timedelta' dtype with no precision is not allowed. \"\n            \"Please pass in 'timedelta64[ns]' instead.\"\n        )\n        raise ValueError(msg)\n\n    if not is_dtype_equal(dtype, _TD_DTYPE):\n        raise ValueError(f\"dtype {dtype} cannot be converted to timedelta64[ns]\")\n\n    return dtype",
        "begin_line": 1061,
        "end_line": 1074,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.tz_to_dtype#56",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.tz_to_dtype(tz)",
        "snippet": "def tz_to_dtype(tz):\n    \"\"\"\n    Return a datetime64[ns] dtype appropriate for the given timezone.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n\n    Returns\n    -------\n    np.dtype or Datetime64TZDType\n    \"\"\"\n    if tz is None:\n        return _NS_DTYPE\n    else:\n        return DatetimeTZDtype(tz=tz)",
        "begin_line": 56,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._simple_new#285",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._simple_new(cls, values, freq=None, dtype=_NS_DTYPE)",
        "snippet": "    def _simple_new(cls, values, freq=None, dtype=_NS_DTYPE):\n        assert isinstance(values, np.ndarray)\n        if values.dtype != _NS_DTYPE:\n            assert values.dtype == \"i8\"\n            values = values.view(_NS_DTYPE)\n\n        result = object.__new__(cls)\n        result._data = values\n        result._freq = freq\n        result._dtype = dtype\n        return result",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence#298",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._from_sequence(cls, data, dtype=None, copy=False, tz=None, freq=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "    def _from_sequence(\n        cls,\n        data,\n        dtype=None,\n        copy=False,\n        tz=None,\n        freq=None,\n        dayfirst=False,\n        yearfirst=False,\n        ambiguous=\"raise\",\n    ):\n\n        freq, freq_infer = dtl.maybe_infer_freq(freq)\n\n        subarr, tz, inferred_freq = sequence_to_dt64ns(\n            data,\n            dtype=dtype,\n            copy=copy,\n            tz=tz,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            ambiguous=ambiguous,\n        )\n\n        freq, freq_infer = dtl.validate_inferred_freq(freq, inferred_freq, freq_infer)\n\n        dtype = tz_to_dtype(tz)\n        result = cls._simple_new(subarr, freq=freq, dtype=dtype)\n\n        if inferred_freq is None and freq is not None:\n            # this condition precludes `freq_infer`\n            cls._validate_frequency(result, freq, ambiguous=ambiguous)\n\n        elif freq_infer:\n            # Set _freq directly to bypass duplicative _validate_frequency\n            # check.\n            result._freq = to_offset(result.inferred_freq)\n\n        return result",
        "begin_line": 298,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._generate_range#339",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._generate_range(cls, start, end, periods, freq, tz=None, normalize=False, ambiguous='raise', nonexistent='raise', closed=None)",
        "snippet": "    def _generate_range(\n        cls,\n        start,\n        end,\n        periods,\n        freq,\n        tz=None,\n        normalize=False,\n        ambiguous=\"raise\",\n        nonexistent=\"raise\",\n        closed=None,\n    ):\n\n        periods = dtl.validate_periods(periods)\n        if freq is None and any(x is None for x in [periods, start, end]):\n            raise ValueError(\"Must provide freq argument if no data is supplied\")\n\n        if com.count_not_none(start, end, periods, freq) != 3:\n            raise ValueError(\n                \"Of the four parameters: start, end, periods, \"\n                \"and freq, exactly three must be specified\"\n            )\n        freq = to_offset(freq)\n\n        if start is not None:\n            start = Timestamp(start)\n\n        if end is not None:\n            end = Timestamp(end)\n\n        if start is None and end is None:\n            if closed is not None:\n                raise ValueError(\n                    \"Closed has to be None if not both of start and end are defined\"\n                )\n        if start is NaT or end is NaT:\n            raise ValueError(\"Neither `start` nor `end` can be NaT\")\n\n        left_closed, right_closed = dtl.validate_endpoints(closed)\n\n        start, end, _normalized = _maybe_normalize_endpoints(start, end, normalize)\n\n        tz = _infer_tz_from_endpoints(start, end, tz)\n\n        if tz is not None:\n            # Localize the start and end arguments\n            start = _maybe_localize_point(\n                start,\n                getattr(start, \"tz\", None),\n                start,\n                freq,\n                tz,\n                ambiguous,\n                nonexistent,\n            )\n            end = _maybe_localize_point(\n                end, getattr(end, \"tz\", None), end, freq, tz, ambiguous, nonexistent\n            )\n        if freq is not None:\n            # We break Day arithmetic (fixed 24 hour) here and opt for\n            # Day to mean calendar day (23/24/25 hour). Therefore, strip\n            # tz info from start and day to avoid DST arithmetic\n            if isinstance(freq, Day):\n                if start is not None:\n                    start = start.tz_localize(None)\n                if end is not None:\n                    end = end.tz_localize(None)\n            # TODO: consider re-implementing _cached_range; GH#17914\n            values, _tz = generate_regular_range(start, end, periods, freq)\n            index = cls._simple_new(values, freq=freq, dtype=tz_to_dtype(_tz))\n\n            if tz is not None and index.tz is None:\n                arr = conversion.tz_localize_to_utc(\n                    index.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n                )\n\n                index = cls(arr)\n\n                # index is localized datetime64 array -> have to convert\n                # start/end as well to compare\n                if start is not None:\n                    start = start.tz_localize(tz).asm8\n                if end is not None:\n                    end = end.tz_localize(tz).asm8\n        else:\n            # Create a linearly spaced date_range in local time\n            # Nanosecond-granularity timestamps aren't always correctly\n            # representable with doubles, so we limit the range that we\n            # pass to np.linspace as much as possible\n            arr = (\n                np.linspace(0, end.value - start.value, periods, dtype=\"int64\")\n                + start.value\n            )\n            dtype = tz_to_dtype(tz)\n            index = cls._simple_new(\n                arr.astype(\"M8[ns]\", copy=False), freq=None, dtype=dtype\n            )\n\n        if not left_closed and len(index) and index[0] == start:\n            index = index[1:]\n        if not right_closed and len(index) and index[-1] == end:\n            index = index[:-1]\n\n        dtype = tz_to_dtype(tz)\n        return cls._simple_new(index.asi8, freq=freq, dtype=dtype)",
        "begin_line": 339,
        "end_line": 443,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray._box_func#474",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)",
        "begin_line": 474,
        "end_line": 475,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.dtype#478",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.dtype(self)",
        "snippet": "    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:\n        \"\"\"\n        The dtype for the DatetimeArray.\n\n        .. warning::\n\n           A future version of pandas will change dtype to never be a\n           ``numpy.dtype``. Instead, :attr:`DatetimeArray.dtype` will\n           always be an instance of an ``ExtensionDtype`` subclass.\n\n        Returns\n        -------\n        numpy.dtype or DatetimeTZDtype\n            If the values are tz-naive, then ``np.dtype('datetime64[ns]')``\n            is returned.\n\n            If the values are tz-aware, then the ``DatetimeTZDtype``\n            is returned.\n        \"\"\"\n        return self._dtype",
        "begin_line": 478,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz#500",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz(self)",
        "snippet": "    def tz(self):\n        \"\"\"\n        Return timezone, if any.\n\n        Returns\n        -------\n        datetime.tzinfo, pytz.tzinfo.BaseTZInfo, dateutil.tz.tz.tzfile, or None\n            Returns None when the array is tz-naive.\n        \"\"\"\n        # GH 18595\n        return getattr(self.dtype, \"tz\", None)",
        "begin_line": 500,
        "end_line": 510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.astype#578",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle\n        #   --> datetime\n        #   --> period\n        # DatetimeLikeArrayMixin Super handles the rest.\n        dtype = pandas_dtype(dtype)\n\n        if is_datetime64_ns_dtype(dtype) and not is_dtype_equal(dtype, self.dtype):\n            # GH#18951: datetime64_ns dtype but not equal means different tz\n            new_tz = getattr(dtype, \"tz\", None)\n            if getattr(self.dtype, \"tz\", None) is None:\n                return self.tz_localize(new_tz)\n            result = self.tz_convert(new_tz)\n            if copy:\n                result = result.copy()\n            if new_tz is None:\n                # Do we want .astype('datetime64[ns]') to be an ndarray.\n                # The astype in Block._astype expects this to return an\n                # ndarray, but we could maybe work around it there.\n                result = result._data\n            return result\n        elif is_datetime64tz_dtype(self.dtype) and is_dtype_equal(self.dtype, dtype):\n            if copy:\n                return self.copy()\n            return self\n        elif is_period_dtype(dtype):\n            return self.to_period(freq=dtype.freq)\n        return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)",
        "begin_line": 578,
        "end_line": 605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert#750",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes.DatetimeArray",
        "signature": "pandas.core.arrays.datetimes.DatetimeArray.tz_convert(self, tz)",
        "snippet": "    def tz_convert(self, tz):\n        \"\"\"\n        Convert tz-aware Datetime Array/Index from one time zone to another.\n\n        Parameters\n        ----------\n        tz : str, pytz.timezone, dateutil.tz.tzfile or None\n            Time zone for time. Corresponding timestamps would be converted\n            to this time zone of the Datetime Array/Index. A `tz` of None will\n            convert to UTC and remove the timezone information.\n\n        Returns\n        -------\n        Array or Index\n\n        Raises\n        ------\n        TypeError\n            If Datetime Array/Index is tz-naive.\n\n        See Also\n        --------\n        DatetimeIndex.tz : A timezone that has a variable offset from UTC.\n        DatetimeIndex.tz_localize : Localize tz-naive DatetimeIndex to a\n            given time zone, or remove timezone from a tz-aware DatetimeIndex.\n\n        Examples\n        --------\n        With the `tz` parameter, we can change the DatetimeIndex\n        to other time zones:\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00',\n        ...                     freq='H', periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                      dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert('US/Central')\n        DatetimeIndex(['2014-08-01 02:00:00-05:00',\n                       '2014-08-01 03:00:00-05:00',\n                       '2014-08-01 04:00:00-05:00'],\n                      dtype='datetime64[ns, US/Central]', freq='H')\n\n        With the ``tz=None``, we can remove the timezone (after converting\n        to UTC if necessary):\n\n        >>> dti = pd.date_range(start='2014-08-01 09:00', freq='H',\n        ...                     periods=3, tz='Europe/Berlin')\n\n        >>> dti\n        DatetimeIndex(['2014-08-01 09:00:00+02:00',\n                       '2014-08-01 10:00:00+02:00',\n                       '2014-08-01 11:00:00+02:00'],\n                        dtype='datetime64[ns, Europe/Berlin]', freq='H')\n\n        >>> dti.tz_convert(None)\n        DatetimeIndex(['2014-08-01 07:00:00',\n                       '2014-08-01 08:00:00',\n                       '2014-08-01 09:00:00'],\n                        dtype='datetime64[ns]', freq='H')\n        \"\"\"\n        tz = timezones.maybe_get_tz(tz)\n\n        if self.tz is None:\n            # tz naive, use tz_localize\n            raise TypeError(\n                \"Cannot convert tz-naive timestamps, use tz_localize to localize\"\n            )\n\n        # No conversion since timestamps are all UTC to begin with\n        dtype = tz_to_dtype(tz)\n        return self._simple_new(self.asi8, dtype=dtype, freq=self.freq)",
        "begin_line": 750,
        "end_line": 824,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.sequence_to_dt64ns#1677",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.sequence_to_dt64ns(data, dtype=None, copy=False, tz=None, dayfirst=False, yearfirst=False, ambiguous='raise')",
        "snippet": "def sequence_to_dt64ns(\n    data,\n    dtype=None,\n    copy=False,\n    tz=None,\n    dayfirst=False,\n    yearfirst=False,\n    ambiguous=\"raise\",\n):\n    \"\"\"\n    Parameters\n    ----------\n    data : list-like\n    dtype : dtype, str, or None, default None\n    copy : bool, default False\n    tz : tzinfo, str, or None, default None\n    dayfirst : bool, default False\n    yearfirst : bool, default False\n    ambiguous : str, bool, or arraylike, default 'raise'\n        See pandas._libs.tslibs.conversion.tz_localize_to_utc.\n\n    Returns\n    -------\n    result : numpy.ndarray\n        The sequence converted to a numpy array with dtype ``datetime64[ns]``.\n    tz : tzinfo or None\n        Either the user-provided tzinfo or one inferred from the data.\n    inferred_freq : Tick or None\n        The inferred frequency of the sequence.\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n\n    inferred_freq = None\n\n    dtype = _validate_dt64_dtype(dtype)\n\n    if not hasattr(data, \"dtype\"):\n        # e.g. list, tuple\n        if np.ndim(data) == 0:\n            # i.e. generator\n            data = list(data)\n        data = np.asarray(data)\n        copy = False\n    elif isinstance(data, ABCSeries):\n        data = data._values\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n\n    if hasattr(data, \"freq\"):\n        # i.e. DatetimeArray/Index\n        inferred_freq = data.freq\n\n    # if dtype has an embedded tz, capture it\n    tz = validate_tz_from_dtype(dtype, tz)\n\n    if isinstance(data, ABCIndexClass):\n        if data.nlevels > 1:\n            # Without this check, data._data below is None\n            raise TypeError(\"Cannot create a DatetimeArray from a MultiIndex.\")\n        data = data._data\n\n    # By this point we are assured to have either a numpy array or Index\n    data, copy = maybe_convert_dtype(data, copy)\n\n    if is_object_dtype(data) or is_string_dtype(data):\n        # TODO: We do not have tests specific to string-dtypes,\n        #  also complex or categorical or other extension\n        copy = False\n        if lib.infer_dtype(data, skipna=False) == \"integer\":\n            data = data.astype(np.int64)\n        else:\n            # data comes back here as either i8 to denote UTC timestamps\n            #  or M8[ns] to denote wall times\n            data, inferred_tz = objects_to_datetime64ns(\n                data, dayfirst=dayfirst, yearfirst=yearfirst\n            )\n            tz = maybe_infer_tz(tz, inferred_tz)\n\n    # `data` may have originally been a Categorical[datetime64[ns, tz]],\n    # so we need to handle these types.\n    if is_datetime64tz_dtype(data):\n        # DatetimeArray -> ndarray\n        tz = maybe_infer_tz(tz, data.tz)\n        result = data._data\n\n    elif is_datetime64_dtype(data):\n        # tz-naive DatetimeArray or ndarray[datetime64]\n        data = getattr(data, \"_data\", data)\n        if data.dtype != _NS_DTYPE:\n            data = conversion.ensure_datetime64ns(data)\n\n        if tz is not None:\n            # Convert tz-naive to UTC\n            tz = timezones.maybe_get_tz(tz)\n            data = conversion.tz_localize_to_utc(\n                data.view(\"i8\"), tz, ambiguous=ambiguous\n            )\n            data = data.view(_NS_DTYPE)\n\n        assert data.dtype == _NS_DTYPE, data.dtype\n        result = data\n\n    else:\n        # must be integer dtype otherwise\n        # assume this data are epoch timestamps\n        if tz:\n            tz = timezones.maybe_get_tz(tz)\n\n        if data.dtype != _INT64_DTYPE:\n            data = data.astype(np.int64, copy=False)\n        result = data.view(_NS_DTYPE)\n\n    if copy:\n        # TODO: should this be deepcopy?\n        result = result.copy()\n\n    assert isinstance(result, np.ndarray), type(result)\n    assert result.dtype == \"M8[ns]\", result.dtype\n\n    # We have to call this again after possibly inferring a tz above\n    validate_tz_from_dtype(dtype, tz)\n\n    return result, tz, inferred_freq",
        "begin_line": 1677,
        "end_line": 1802,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.objects_to_datetime64ns#1805",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.objects_to_datetime64ns(data, dayfirst, yearfirst, utc=False, errors='raise', require_iso8601=False, allow_object=False)",
        "snippet": "def objects_to_datetime64ns(\n    data,\n    dayfirst,\n    yearfirst,\n    utc=False,\n    errors=\"raise\",\n    require_iso8601=False,\n    allow_object=False,\n):\n    \"\"\"\n    Convert data to array of timestamps.\n\n    Parameters\n    ----------\n    data : np.ndarray[object]\n    dayfirst : bool\n    yearfirst : bool\n    utc : bool, default False\n        Whether to convert timezone-aware timestamps to UTC.\n    errors : {'raise', 'ignore', 'coerce'}\n    allow_object : bool\n        Whether to return an object-dtype ndarray instead of raising if the\n        data contains more than one timezone.\n\n    Returns\n    -------\n    result : ndarray\n        np.int64 dtype if returned values represent UTC timestamps\n        np.datetime64[ns] if returned values represent wall times\n        object if mixed timezones\n    inferred_tz : tzinfo or None\n\n    Raises\n    ------\n    ValueError : if data cannot be converted to datetimes\n    \"\"\"\n    assert errors in [\"raise\", \"ignore\", \"coerce\"]\n\n    # if str-dtype, convert\n    data = np.array(data, copy=False, dtype=np.object_)\n\n    try:\n        result, tz_parsed = tslib.array_to_datetime(\n            data,\n            errors=errors,\n            utc=utc,\n            dayfirst=dayfirst,\n            yearfirst=yearfirst,\n            require_iso8601=require_iso8601,\n        )\n    except ValueError as e:\n        try:\n            values, tz_parsed = conversion.datetime_to_datetime64(data)\n            # If tzaware, these values represent unix timestamps, so we\n            #  return them as i8 to distinguish from wall times\n            return values.view(\"i8\"), tz_parsed\n        except (ValueError, TypeError):\n            raise e\n\n    if tz_parsed is not None:\n        # We can take a shortcut since the datetime64 numpy array\n        #  is in UTC\n        # Return i8 values to denote unix timestamps\n        return result.view(\"i8\"), tz_parsed\n    elif is_datetime64_dtype(result):\n        # returning M8[ns] denotes wall-times; since tz is None\n        #  the distinction is a thin one\n        return result, tz_parsed\n    elif is_object_dtype(result):\n        # GH#23675 when called via `pd.to_datetime`, returning an object-dtype\n        #  array is allowed.  When called via `pd.DatetimeIndex`, we can\n        #  only accept datetime64 dtype, so raise TypeError if object-dtype\n        #  is returned, as that indicates the values can be recognized as\n        #  datetimes but they have conflicting timezones/awareness\n        if allow_object:\n            return result, tz_parsed\n        raise TypeError(result)\n    else:  # pragma: no cover\n        # GH#23675 this TypeError should never be hit, whereas the TypeError\n        #  in the object-dtype branch above is reachable.\n        raise TypeError(result)",
        "begin_line": 1805,
        "end_line": 1885,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_convert_dtype#1888",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_convert_dtype(data, copy)",
        "snippet": "def maybe_convert_dtype(data, copy):\n    \"\"\"\n    Convert data based on dtype conventions, issuing deprecation warnings\n    or errors where appropriate.\n\n    Parameters\n    ----------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Returns\n    -------\n    data : np.ndarray or pd.Index\n    copy : bool\n\n    Raises\n    ------\n    TypeError : PeriodDType data is passed\n    \"\"\"\n    if not hasattr(data, \"dtype\"):\n        # e.g. collections.deque\n        return data, copy\n\n    if is_float_dtype(data.dtype):\n        # Note: we must cast to datetime64[ns] here in order to treat these\n        #  as wall-times instead of UTC timestamps.\n        data = data.astype(_NS_DTYPE)\n        copy = False\n        # TODO: deprecate this behavior to instead treat symmetrically\n        #  with integer dtypes.  See discussion in GH#23675\n\n    elif is_timedelta64_dtype(data.dtype) or is_bool_dtype(data.dtype):\n        # GH#29794 enforcing deprecation introduced in GH#23539\n        raise TypeError(f\"dtype {data.dtype} cannot be converted to datetime64[ns]\")\n    elif is_period_dtype(data.dtype):\n        # Note: without explicitly raising here, PeriodIndex\n        #  test_setops.test_join_does_not_recur fails\n        raise TypeError(\n            \"Passing PeriodDtype data is invalid. Use `data.to_timestamp()` instead\"\n        )\n\n    elif is_categorical_dtype(data.dtype):\n        # GH#18664 preserve tz in going DTI->Categorical->DTI\n        # TODO: cases where we need to do another pass through this func,\n        #  e.g. the categories are timedelta64s\n        data = data.categories.take(data.codes, fill_value=NaT)._values\n        copy = False\n\n    elif is_extension_array_dtype(data.dtype) and not is_datetime64tz_dtype(data.dtype):\n        # Includes categorical\n        # TODO: We have no tests for these\n        data = np.array(data, dtype=np.object_)\n        copy = False\n\n    return data, copy",
        "begin_line": 1888,
        "end_line": 1942,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.maybe_infer_tz#1949",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.maybe_infer_tz(tz, inferred_tz)",
        "snippet": "def maybe_infer_tz(tz, inferred_tz):\n    \"\"\"\n    If a timezone is inferred from data, check that it is compatible with\n    the user-provided timezone, if any.\n\n    Parameters\n    ----------\n    tz : tzinfo or None\n    inferred_tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if both timezones are present but do not match\n    \"\"\"\n    if tz is None:\n        tz = inferred_tz\n    elif inferred_tz is None:\n        pass\n    elif not timezones.tz_compare(tz, inferred_tz):\n        raise TypeError(\n            f\"data is already tz-aware {inferred_tz}, unable to \"\n            f\"set specified tz: {tz}\"\n        )\n    return tz",
        "begin_line": 1949,
        "end_line": 1976,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._validate_dt64_dtype#1979",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._validate_dt64_dtype(dtype)",
        "snippet": "def _validate_dt64_dtype(dtype):\n    \"\"\"\n    Check that a dtype, if passed, represents either a numpy datetime64[ns]\n    dtype or a pandas DatetimeTZDtype.\n\n    Parameters\n    ----------\n    dtype : object\n\n    Returns\n    -------\n    dtype : None, numpy.dtype, or DatetimeTZDtype\n\n    Raises\n    ------\n    ValueError : invalid dtype\n\n    Notes\n    -----\n    Unlike validate_tz_from_dtype, this does _not_ allow non-existent\n    tz errors to go through\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if is_dtype_equal(dtype, np.dtype(\"M8\")):\n            # no precision, disallowed GH#24806\n            msg = (\n                \"Passing in 'datetime64' dtype with no precision is not allowed. \"\n                \"Please pass in 'datetime64[ns]' instead.\"\n            )\n            raise ValueError(msg)\n\n        if (isinstance(dtype, np.dtype) and dtype != _NS_DTYPE) or not isinstance(\n            dtype, (np.dtype, DatetimeTZDtype)\n        ):\n            raise ValueError(\n                f\"Unexpected value for 'dtype': '{dtype}'. \"\n                \"Must be 'datetime64[ns]' or DatetimeTZDtype'.\"\n            )\n    return dtype",
        "begin_line": 1979,
        "end_line": 2018,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes.validate_tz_from_dtype#2021",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes.validate_tz_from_dtype(dtype, tz)",
        "snippet": "def validate_tz_from_dtype(dtype, tz):\n    \"\"\"\n    If the given dtype is a DatetimeTZDtype, extract the implied\n    tzinfo object from it and check that it does not conflict with the given\n    tz.\n\n    Parameters\n    ----------\n    dtype : dtype, str\n    tz : None, tzinfo\n\n    Returns\n    -------\n    tz : consensus tzinfo\n\n    Raises\n    ------\n    ValueError : on tzinfo mismatch\n    \"\"\"\n    if dtype is not None:\n        if isinstance(dtype, str):\n            try:\n                dtype = DatetimeTZDtype.construct_from_string(dtype)\n            except TypeError:\n                # Things like `datetime64[ns]`, which is OK for the\n                # constructors, but also nonsense, which should be validated\n                # but not by us. We *do* allow non-existent tz errors to\n                # go through\n                pass\n        dtz = getattr(dtype, \"tz\", None)\n        if dtz is not None:\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\"cannot supply both a tz and a dtype with a tz\")\n            tz = dtz\n\n        if tz is not None and is_datetime64_dtype(dtype):\n            # We also need to check for the case where the user passed a\n            #  tz-naive dtype (i.e. datetime64[ns])\n            if tz is not None and not timezones.tz_compare(tz, dtz):\n                raise ValueError(\n                    \"cannot supply both a tz and a \"\n                    \"timezone-naive dtype (i.e. datetime64[ns])\"\n                )\n\n    return tz",
        "begin_line": 2021,
        "end_line": 2065,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._infer_tz_from_endpoints#2068",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._infer_tz_from_endpoints(start, end, tz)",
        "snippet": "def _infer_tz_from_endpoints(start, end, tz):\n    \"\"\"\n    If a timezone is not explicitly given via `tz`, see if one can\n    be inferred from the `start` and `end` endpoints.  If more than one\n    of these inputs provides a timezone, require that they all agree.\n\n    Parameters\n    ----------\n    start : Timestamp\n    end : Timestamp\n    tz : tzinfo or None\n\n    Returns\n    -------\n    tz : tzinfo or None\n\n    Raises\n    ------\n    TypeError : if start and end timezones do not agree\n    \"\"\"\n    try:\n        inferred_tz = timezones.infer_tzinfo(start, end)\n    except AssertionError as err:\n        # infer_tzinfo raises AssertionError if passed mismatched timezones\n        raise TypeError(\n            \"Start and end cannot both be tz-aware with different timezones\"\n        ) from err\n\n    inferred_tz = timezones.maybe_get_tz(inferred_tz)\n    tz = timezones.maybe_get_tz(tz)\n\n    if tz is not None and inferred_tz is not None:\n        if not timezones.tz_compare(inferred_tz, tz):\n            raise AssertionError(\"Inferred time zone not equal to passed time zone\")\n\n    elif inferred_tz is not None:\n        tz = inferred_tz\n\n    return tz",
        "begin_line": 2068,
        "end_line": 2106,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.datetimes._maybe_normalize_endpoints#2109",
        "src_path": "pandas/core/arrays/datetimes.py",
        "class_name": "pandas.core.arrays.datetimes",
        "signature": "pandas.core.arrays.datetimes._maybe_normalize_endpoints(start, end, normalize)",
        "snippet": "def _maybe_normalize_endpoints(start, end, normalize):\n    _normalized = True\n\n    if start is not None:\n        if normalize:\n            start = normalize_date(start)\n            _normalized = True\n        else:\n            _normalized = _normalized and start.time() == _midnight\n\n    if end is not None:\n        if normalize:\n            end = normalize_date(end)\n            _normalized = True\n        else:\n            _normalized = _normalized and end.time() == _midnight\n\n    return start, end, _normalized",
        "begin_line": 2109,
        "end_line": 2126,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__init__#147",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__init__(self, values, freq=None, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, freq=None, dtype=None, copy=False):\n        freq = validate_dtype_freq(dtype, freq)\n\n        if freq is not None:\n            freq = Period._maybe_convert_freq(freq)\n\n        if isinstance(values, ABCSeries):\n            values = values._values\n            if not isinstance(values, type(self)):\n                raise TypeError(\"Incorrect dtype\")\n\n        elif isinstance(values, ABCPeriodIndex):\n            values = values._values\n\n        if isinstance(values, type(self)):\n            if freq is not None and freq != values.freq:\n                raise raise_on_incompatible(values, freq)\n            values, freq = values._data, values.freq\n\n        values = np.array(values, dtype=\"int64\", copy=copy)\n        self._data = values\n        if freq is None:\n            raise ValueError(\"freq is not specified and cannot be inferred\")\n        self._dtype = PeriodDtype(freq)",
        "begin_line": 147,
        "end_line": 170,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._from_sequence#179",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._from_sequence(cls, scalars: Sequence[Optional[Period]], dtype: Optional[PeriodDtype]=None, copy: bool=False)",
        "snippet": "    def _from_sequence(\n        cls,\n        scalars: Sequence[Optional[Period]],\n        dtype: Optional[PeriodDtype] = None,\n        copy: bool = False,\n    ) -> ABCPeriodArray:\n        if dtype:\n            freq = dtype.freq\n        else:\n            freq = None\n\n        if isinstance(scalars, cls):\n            validate_dtype_freq(scalars.dtype, freq)\n            if copy:\n                scalars = scalars.copy()\n            return scalars\n\n        periods = np.asarray(scalars, dtype=object)\n        if copy:\n            periods = periods.copy()\n\n        freq = freq or libperiod.extract_freq(periods)\n        ordinals = libperiod.extract_ordinals(periods, freq)\n        return cls(ordinals, freq=freq)",
        "begin_line": 179,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.dtype#273",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 273,
        "end_line": 274,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.freq#278",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.freq(self)",
        "snippet": "    def freq(self):\n        \"\"\"\n        Return the frequency object for this PeriodArray.\n        \"\"\"\n        return self.dtype.freq",
        "begin_line": 278,
        "end_line": 282,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.__array__#284",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        if dtype == \"i8\":\n            return self.asi8\n        elif dtype == bool:\n            return ~self._isnan\n\n        # This will raise TypeErorr for non-object dtypes\n        return np.array(list(self), dtype=object)",
        "begin_line": 284,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray._box_func#495",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray._box_func(self)",
        "snippet": "    def _box_func(self):\n        return lambda x: Period._from_ordinal(ordinal=x, freq=self.freq)",
        "begin_line": 495,
        "end_line": 496,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019968051118210862,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.PeriodArray.astype#587",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period.PeriodArray",
        "signature": "pandas.core.arrays.period.PeriodArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # We handle Period[T] -> Period[U]\n        # Our parent handles everything else.\n        dtype = pandas_dtype(dtype)\n\n        if is_period_dtype(dtype):\n            return self.asfreq(dtype.freq)\n        return super().astype(dtype, copy=copy)",
        "begin_line": 587,
        "end_line": 594,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.period_array#800",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.period_array(data: Sequence[Optional[Period]], freq: Optional[Union[str, Tick]]=None, copy: bool=False)",
        "snippet": "def period_array(\n    data: Sequence[Optional[Period]],\n    freq: Optional[Union[str, Tick]] = None,\n    copy: bool = False,\n) -> PeriodArray:\n    \"\"\"\n    Construct a new PeriodArray from a sequence of Period scalars.\n\n    Parameters\n    ----------\n    data : Sequence of Period objects\n        A sequence of Period objects. These are required to all have\n        the same ``freq.`` Missing values can be indicated by ``None``\n        or ``pandas.NaT``.\n    freq : str, Tick, or Offset\n        The frequency of every element of the array. This can be specified\n        to avoid inferring the `freq` from `data`.\n    copy : bool, default False\n        Whether to ensure a copy of the data is made.\n\n    Returns\n    -------\n    PeriodArray\n\n    See Also\n    --------\n    PeriodArray\n    pandas.PeriodIndex\n\n    Examples\n    --------\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A')])\n    <PeriodArray>\n    ['2017', '2018']\n    Length: 2, dtype: period[A-DEC]\n\n    >>> period_array([pd.Period('2017', freq='A'),\n    ...               pd.Period('2018', freq='A'),\n    ...               pd.NaT])\n    <PeriodArray>\n    ['2017', '2018', 'NaT']\n    Length: 3, dtype: period[A-DEC]\n\n    Integers that look like years are handled\n\n    >>> period_array([2000, 2001, 2002], freq='D')\n    ['2000-01-01', '2001-01-01', '2002-01-01']\n    Length: 3, dtype: period[D]\n\n    Datetime-like strings may also be passed\n\n    >>> period_array(['2000-Q1', '2000-Q2', '2000-Q3', '2000-Q4'], freq='Q')\n    <PeriodArray>\n    ['2000Q1', '2000Q2', '2000Q3', '2000Q4']\n    Length: 4, dtype: period[Q-DEC]\n    \"\"\"\n    if is_datetime64_dtype(data):\n        return PeriodArray._from_datetime64(data, freq)\n    if isinstance(data, (ABCPeriodIndex, ABCSeries, PeriodArray)):\n        return PeriodArray(data, freq)\n\n    # other iterable of some kind\n    if not isinstance(data, (np.ndarray, list, tuple)):\n        data = list(data)\n\n    data = np.asarray(data)\n\n    dtype: Optional[PeriodDtype]\n    if freq:\n        dtype = PeriodDtype(freq)\n    else:\n        dtype = None\n\n    if is_float_dtype(data) and len(data) > 0:\n        raise TypeError(\"PeriodIndex does not allow floating point in construction\")\n\n    data = ensure_object(data)\n\n    return PeriodArray._from_sequence(data, dtype=dtype)",
        "begin_line": 800,
        "end_line": 879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.period.validate_dtype_freq#882",
        "src_path": "pandas/core/arrays/period.py",
        "class_name": "pandas.core.arrays.period",
        "signature": "pandas.core.arrays.period.validate_dtype_freq(dtype, freq)",
        "snippet": "def validate_dtype_freq(dtype, freq):\n    \"\"\"\n    If both a dtype and a freq are available, ensure they match.  If only\n    dtype is available, extract the implied freq.\n\n    Parameters\n    ----------\n    dtype : dtype\n    freq : DateOffset or None\n\n    Returns\n    -------\n    freq : DateOffset\n\n    Raises\n    ------\n    ValueError : non-period dtype\n    IncompatibleFrequency : mismatch between dtype and freq\n    \"\"\"\n    if freq is not None:\n        freq = frequencies.to_offset(freq)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if not is_period_dtype(dtype):\n            raise ValueError(\"dtype must be PeriodDtype\")\n        if freq is None:\n            freq = dtype.freq\n        elif freq != dtype.freq:\n            raise IncompatibleFrequency(\"specified freq and dtype are different\")\n    return freq",
        "begin_line": 882,
        "end_line": 912,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__getitem__#66",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__getitem__(self, n)",
        "snippet": "    def __getitem__(self, n):\n        if isinstance(n, slice):\n            return type(self)(super().__getitem__(n))\n        return super().__getitem__(n)",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017927572606669058,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__eq__#76",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        if isinstance(other, (tuple, FrozenList)):\n            other = list(other)\n        return super().__eq__(other)",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008424599831508003,
            "pseudo_dstar_susp": 0.0023584905660377358,
            "pseudo_tarantula_susp": 0.0008051529790660225,
            "pseudo_op2_susp": 0.0023584905660377358,
            "pseudo_barinel_susp": 0.0008051529790660225
        }
    },
    {
        "name": "pandas.core.indexes.frozen.FrozenList.__str__#100",
        "src_path": "pandas/core/indexes/frozen.py",
        "class_name": "pandas.core.indexes.frozen.FrozenList",
        "signature": "pandas.core.indexes.frozen.FrozenList.__str__(self)",
        "snippet": "    def __str__(self) -> str:\n        return pprint_thing(self, quote_strings=True, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))",
        "begin_line": 100,
        "end_line": 101,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.__init__#392",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.__init__(self)",
        "snippet": "    def __init__(self):\n        self.encoding = get_option(\"display.encoding\")",
        "begin_line": 392,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.io.formats.format.TextAdjustment.len#395",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format.TextAdjustment",
        "signature": "pandas.io.formats.format.TextAdjustment.len(self, text: str)",
        "snippet": "    def len(self, text: str) -> int:\n        return len(text)",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0006997900629811056,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.0006997900629811056,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.io.formats.format._get_adjustment#444",
        "src_path": "pandas/io/formats/format.py",
        "class_name": "pandas.io.formats.format",
        "signature": "pandas.io.formats.format._get_adjustment()",
        "snippet": "def _get_adjustment() -> TextAdjustment:\n    use_east_asian_width = get_option(\"display.unicode.east_asian_width\")\n    if use_east_asian_width:\n        return EastAsianTextAdjustment()\n    else:\n        return TextAdjustment()",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0021551724137931034,
            "pseudo_dstar_susp": 0.007042253521126761,
            "pseudo_tarantula_susp": 0.0017331022530329288,
            "pseudo_op2_susp": 0.007042253521126761,
            "pseudo_barinel_susp": 0.0017331022530329288
        }
    },
    {
        "name": "pandas.core.ops.common._unpack_zerodim_and_defer#30",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common._unpack_zerodim_and_defer(method, name: str)",
        "snippet": "def _unpack_zerodim_and_defer(method, name: str):\n    \"\"\"\n    Boilerplate for pandas conventions in arithmetic and comparison methods.\n\n    Ensure method returns NotImplemented when operating against \"senior\"\n    classes.  Ensure zero-dimensional ndarrays are always unpacked.\n\n    Parameters\n    ----------\n    method : binary method\n    name : str\n\n    Returns\n    -------\n    method\n    \"\"\"\n    is_cmp = name.strip(\"__\") in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}\n\n    @wraps(method)\n    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)\n\n    return new_method",
        "begin_line": 30,
        "end_line": 65,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.common.new_method#49",
        "src_path": "pandas/core/ops/common.py",
        "class_name": "pandas.core.ops.common",
        "signature": "pandas.core.ops.common.new_method(self, other)",
        "snippet": "    def new_method(self, other):\n\n        if is_cmp and isinstance(self, ABCIndexClass) and isinstance(other, ABCSeries):\n            # For comparison ops, Index does *not* defer to Series\n            pass\n        else:\n            for cls in [ABCDataFrame, ABCSeries, ABCIndexClass]:\n                if isinstance(self, cls):\n                    break\n                if isinstance(other, cls):\n                    return NotImplemented\n\n        other = item_from_zerodim(other)\n\n        return method(self, other)",
        "begin_line": 49,
        "end_line": 63,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__init__#316",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
        "snippet": "    def __init__(\n        self, values, categories=None, ordered=None, dtype=None, fastpath=False\n    ):\n\n        dtype = CategoricalDtype._from_values_or_dtype(\n            values, categories, ordered, dtype\n        )\n        # At this point, dtype is always a CategoricalDtype, but\n        # we may have dtype.categories be None, and we need to\n        # infer categories in a factorization step further below\n\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, dtype.categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n\n        # null_mask indicates missing values we want to exclude from inference.\n        # This means: only missing values in list-likes (not arrays/ndframes).\n        null_mask = np.array(False)\n\n        # sanitize input\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            # sanitize_array coerces np.nan to a string under certain versions\n            # of numpy\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n\n                # By convention, empty lists result in object dtype:\n                sanitize_dtype = \"object\" if len(values) == 0 else None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError as err:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    # raise, as we don't have a sortable data structure and so\n                    # the user should give us one by specifying categories\n                    raise TypeError(\n                        \"'values' is not ordered, please \"\n                        \"explicitly specify the categories order \"\n                        \"by passing in a categories argument.\"\n                    ) from err\n            except ValueError as err:\n\n                # FIXME\n                raise NotImplementedError(\n                    \"> 1 ndim Categorical are not supported at this time\"\n                ) from err\n\n            # we're inferring from values\n            dtype = CategoricalDtype(categories, dtype.ordered)\n\n        elif is_categorical_dtype(values):\n            old_codes = (\n                values._values.codes if isinstance(values, ABCSeries) else values.codes\n            )\n            codes = _recode_for_categories(\n                old_codes, values.dtype.categories, dtype.categories\n            )\n\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n\n        if null_mask.any():\n            # Reinsert -1 placeholders for previously removed missing values\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)",
        "begin_line": 316,
        "end_line": 395,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.categories#398",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.categories(self)",
        "snippet": "    def categories(self):\n        \"\"\"\n        The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories",
        "begin_line": 398,
        "end_line": 426,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016059097478721696,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.ordered#441",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.ordered(self)",
        "snippet": "    def ordered(self) -> Ordered:\n        \"\"\"\n        Whether the categories have an ordered relationship.\n        \"\"\"\n        return self.dtype.ordered",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.dtype#448",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.dtype(self)",
        "snippet": "    def dtype(self) -> CategoricalDtype:\n        \"\"\"\n        The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n        \"\"\"\n        return self._dtype",
        "begin_line": 448,
        "end_line": 452,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016048788316482104,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._constructor#459",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._constructor(self)",
        "snippet": "    def _constructor(self) -> Type[\"Categorical\"]:\n        return Categorical",
        "begin_line": 459,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.copy#470",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.copy(self)",
        "snippet": "    def copy(self) -> \"Categorical\":\n        \"\"\"\n        Copy constructor.\n        \"\"\"\n        return self._constructor(\n            values=self._codes.copy(), dtype=self.dtype, fastpath=True\n        )",
        "begin_line": 470,
        "end_line": 476,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.from_codes#594",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
        "snippet": "    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n\n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n\n        If your data does not follow this convention, please use the normal\n        constructor.\n\n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n\n            .. versionadded:: 0.24.0\n\n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n\n        Returns\n        -------\n        Categorical\n\n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n\n        if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n            # Avoid the implicit conversion of Int to object\n            if isna(codes).any():\n                raise ValueError(\"codes cannot contain NA values\")\n            codes = codes.to_numpy(dtype=np.int64)\n        else:\n            codes = np.asarray(codes)\n        if len(codes) and not is_integer_dtype(codes):\n            raise ValueError(\"codes need to be array-like integers\")\n\n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n        return cls(codes, dtype=dtype, fastpath=True)",
        "begin_line": 594,
        "end_line": 661,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical._get_codes#663",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical._get_codes(self)",
        "snippet": "    def _get_codes(self):\n        \"\"\"\n        Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v",
        "begin_line": 663,
        "end_line": 674,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016310552927744252,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.set_categories#792",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
        "snippet": "    def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n        \"\"\"\n        Set the categories to the specified new_categories.\n\n        `new_categories` can include new categories (which will result in\n        unused categories) or remove old categories (which results in values\n        set to NaN). If `rename==True`, the categories will simple be renamed\n        (less or more items than in old categories will result in values set to\n        NaN or in unused categories respectively).\n\n        This method can be used to perform more than one action of adding,\n        removing, and reordering simultaneously and is therefore faster than\n        performing the individual steps via the more specialised methods.\n\n        On the other hand this methods does not do checks (e.g., whether the\n        old categories are included in the new categories on a reorder), which\n        can result in surprising changes, for example when using special string\n        dtypes, which does not considers a S1 string equal to a single char\n        python string.\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : bool, default False\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        rename : bool, default False\n           Whether or not the new_categories should be considered as a rename\n           of the old categories or as reordered categories.\n        inplace : bool, default False\n           Whether or not to reorder the categories in-place or return a copy\n           of this categorical with reordered categories.\n\n        Returns\n        -------\n        Categorical with reordered categories or None if inplace.\n\n        Raises\n        ------\n        ValueError\n            If new_categories does not validate as categories\n\n        See Also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, \"inplace\")\n        if ordered is None:\n            ordered = self.dtype.ordered\n        new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n        cat = self if inplace else self.copy()\n        if rename:\n            if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n                cat.dtype.categories\n            ):\n                # remove all _codes which are larger and set to -1/NaN\n                cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n        else:\n            codes = _recode_for_categories(\n                cat.codes, cat.categories, new_dtype.categories\n            )\n            cat._codes = codes\n        cat._dtype = new_dtype\n\n        if not inplace:\n            return cat",
        "begin_line": 792,
        "end_line": 863,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.isna#1368",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values\n\n        Missing values (-1 in .codes) are detected.\n\n        Returns\n        -------\n        a boolean array of whether my values are null\n\n        See Also\n        --------\n        isna : Top-level isna.\n        isnull : Alias of isna.\n        Categorical.notna : Boolean inverse of Categorical.isna.\n\n        \"\"\"\n        ret = self._codes == -1\n        return ret",
        "begin_line": 1368,
        "end_line": 1386,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016342539630658605,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__len__#1877",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        The length of this Categorical.\n        \"\"\"\n        return len(self._codes)",
        "begin_line": 1877,
        "end_line": 1881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002025111381125962,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.Categorical.__getitem__#2002",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.Categorical",
        "signature": "pandas.core.arrays.categorical.Categorical.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Return an item.\n        \"\"\"\n        if isinstance(key, (int, np.integer)):\n            i = self._codes[key]\n            if i == -1:\n                return np.nan\n            else:\n                return self.categories[i]\n\n        key = check_array_indexer(self, key)\n\n        result = self._codes[key]\n        if result.ndim > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return self._constructor(result, dtype=self.dtype, fastpath=True)",
        "begin_line": 2002,
        "end_line": 2019,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor.__init__#2525",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor.__init__(self, data)",
        "snippet": "    def __init__(self, data):\n        self._validate(data)\n        self._parent = data.values\n        self._index = data.index\n        self._name = data.name\n        self._freeze()",
        "begin_line": 2525,
        "end_line": 2530,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._validate#2533",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._validate(data)",
        "snippet": "    def _validate(data):\n        if not is_categorical_dtype(data.dtype):\n            raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
        "begin_line": 2533,
        "end_line": 2535,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method#2552",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical.CategoricalAccessor",
        "signature": "pandas.core.arrays.categorical.CategoricalAccessor._delegate_method(self, name, *args, **kwargs)",
        "snippet": "    def _delegate_method(self, name, *args, **kwargs):\n        from pandas import Series\n\n        method = getattr(self._parent, name)\n        res = method(*args, **kwargs)\n        if res is not None:\n            return Series(res, index=self._index, name=self._name)",
        "begin_line": 2552,
        "end_line": 2558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical._get_codes_for_values#2564",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._get_codes_for_values(values, categories)",
        "snippet": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = try_cast_to_ea(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
        "begin_line": 2564,
        "end_line": 2593,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical._recode_for_categories#2596",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
        "snippet": "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
        "begin_line": 2596,
        "end_line": 2627,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical._convert_to_list_like#2630",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical._convert_to_list_like(list_like)",
        "snippet": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
        "begin_line": 2630,
        "end_line": 2641,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterable#2644",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterable(values)",
        "snippet": "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
        "begin_line": 2644,
        "end_line": 2679,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.categorical.factorize_from_iterables#2682",
        "src_path": "pandas/core/arrays/categorical.py",
        "class_name": "pandas.core.arrays.categorical",
        "signature": "pandas.core.arrays.categorical.factorize_from_iterables(iterables)",
        "snippet": "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
        "begin_line": 2682,
        "end_line": 2704,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019372336303758234,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.array_ops.na_arithmetic_op#142",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool=False)",
        "snippet": "def na_arithmetic_op(left, right, op, str_rep: Optional[str], is_cmp: bool = False):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n    is_cmp : bool, default False\n        If this a comparison operation.\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        if is_cmp:\n            # numexpr failed on comparison op, e.g. ndarray[float] > datetime\n            #  In this case we do not fall back to the masked op, as that\n            #  will handle complex numbers incorrectly, see GH#32047\n            raise\n        result = masked_arith_op(left, right, op)\n\n    if is_cmp and (is_scalar(result) or result is NotImplemented):\n        # numpy returned a scalar instead of operating element-wise\n        # e.g. numeric array vs str\n        return invalid_comparison(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
        "begin_line": 142,
        "end_line": 181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.ops.array_ops.comparison_op#272",
        "src_path": "pandas/core/ops/array_ops.py",
        "class_name": "pandas.core.ops.array_ops",
        "signature": "pandas.core.ops.array_ops.comparison_op(left: ArrayLike, right: Any, op, str_rep: Optional[str]=None)",
        "snippet": "def comparison_op(\n    left: ArrayLike, right: Any, op, str_rep: Optional[str] = None,\n) -> ArrayLike:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarray or ExtensionArray\n    \"\"\"\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            if _can_broadcast(lvalues, rvalues):\n                return _broadcast_comparison_op(lvalues, rvalues, op)\n            raise ValueError(\n                \"Lengths must match to compare\", lvalues.shape, rvalues.shape\n            )\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(lvalues.shape, dtype=bool)\n        else:\n            res_values = np.zeros(lvalues.shape, dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep, is_cmp=True)\n\n    return res_values",
        "begin_line": 272,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype._is_numeric#70",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self) -> bool:\n        return True",
        "begin_line": 70,
        "end_line": 71,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype#74",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.numpy_dtype(self)",
        "snippet": "    def numpy_dtype(self) -> np.dtype:\n        \"\"\" Return an instance of our numpy dtype \"\"\"\n        return np.dtype(self.type)",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.0006101281269066504,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0006101281269066504,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.kind#79",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.kind(self)",
        "snippet": "    def kind(self) -> str:\n        return self.numpy_dtype.kind",
        "begin_line": 79,
        "end_line": 80,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.0006101281269066504,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0006101281269066504,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer._IntegerDtype.construct_array_type#88",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer._IntegerDtype",
        "signature": "pandas.core.arrays.integer._IntegerDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls) -> Type[\"IntegerArray\"]:\n        \"\"\"\n        Return the array type associated with this dtype.\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return IntegerArray",
        "begin_line": 88,
        "end_line": 96,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.integer_array#126",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.integer_array(values, dtype=None, copy: bool=False)",
        "snippet": "def integer_array(values, dtype=None, copy: bool = False,) -> \"IntegerArray\":\n    \"\"\"\n    Infer and return an integer array of the values.\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : dtype, optional\n        dtype to coerce\n    copy : bool, default False\n\n    Returns\n    -------\n    IntegerArray\n\n    Raises\n    ------\n    TypeError if incompatible types\n    \"\"\"\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\n    return IntegerArray(values, mask)",
        "begin_line": 126,
        "end_line": 146,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.safe_cast#149",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.safe_cast(values, dtype, copy: bool)",
        "snippet": "def safe_cast(values, dtype, copy: bool):\n    \"\"\"\n    Safely cast the values to the dtype if they\n    are equivalent, meaning floats must be equivalent to the\n    ints.\n\n    \"\"\"\n    try:\n        return values.astype(dtype, casting=\"safe\", copy=copy)\n    except TypeError as err:\n\n        casted = values.astype(dtype, copy=copy)\n        if (casted == values).all():\n            return casted\n\n        raise TypeError(\n            f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n        ) from err",
        "begin_line": 149,
        "end_line": 166,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.coerce_to_array#169",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer",
        "signature": "pandas.core.arrays.integer.coerce_to_array(values, dtype, mask=None, copy: bool=False)",
        "snippet": "def coerce_to_array(\n    values, dtype, mask=None, copy: bool = False,\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Coerce the input values array to numpy arrays with a mask\n\n    Parameters\n    ----------\n    values : 1D list-like\n    dtype : integer dtype\n    mask : bool 1D array, optional\n    copy : bool, default False\n        if True, copy the input\n\n    Returns\n    -------\n    tuple of (values, mask)\n    \"\"\"\n    # if values is integer numpy array, preserve it's dtype\n    if dtype is None and hasattr(values, \"dtype\"):\n        if is_integer_dtype(values.dtype):\n            dtype = values.dtype\n\n    if dtype is not None:\n        if isinstance(dtype, str) and (\n            dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\n        ):\n            # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\n            # https://github.com/numpy/numpy/pull/7476\n            dtype = dtype.lower()\n\n        if not issubclass(type(dtype), _IntegerDtype):\n            try:\n                dtype = _dtypes[str(np.dtype(dtype))]\n            except KeyError as err:\n                raise ValueError(f\"invalid dtype specified {dtype}\") from err\n\n    if isinstance(values, IntegerArray):\n        values, mask = values._data, values._mask\n        if dtype is not None:\n            values = values.astype(dtype.numpy_dtype, copy=False)\n\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n        return values, mask\n\n    values = np.array(values, copy=copy)\n    if is_object_dtype(values):\n        inferred_type = lib.infer_dtype(values, skipna=True)\n        if inferred_type == \"empty\":\n            values = np.empty(len(values))\n            values.fill(np.nan)\n        elif inferred_type not in [\n            \"floating\",\n            \"integer\",\n            \"mixed-integer\",\n            \"integer-na\",\n            \"mixed-integer-float\",\n        ]:\n            raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    elif is_bool_dtype(values) and is_integer_dtype(dtype):\n        values = np.array(values, dtype=int, copy=copy)\n\n    elif not (is_integer_dtype(values) or is_float_dtype(values)):\n        raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\n\n    if mask is None:\n        mask = isna(values)\n    else:\n        assert len(mask) == len(values)\n\n    if not values.ndim == 1:\n        raise TypeError(\"values must be a 1D list-like\")\n    if not mask.ndim == 1:\n        raise TypeError(\"mask must be a 1D list-like\")\n\n    # infer dtype if needed\n    if dtype is None:\n        dtype = np.dtype(\"int64\")\n    else:\n        dtype = dtype.type\n\n    # if we are float, let's make sure that we can\n    # safely cast\n\n    # we copy as need to coerce here\n    if mask.any():\n        values = values.copy()\n        values[mask] = 1\n        values = safe_cast(values, dtype, copy=False)\n    else:\n        values = safe_cast(values, dtype, copy=False)\n\n    return values, mask",
        "begin_line": 169,
        "end_line": 264,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.dtype#341",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.dtype(self)",
        "snippet": "    def dtype(self) -> _IntegerDtype:\n        return _dtypes[str(self._data.dtype)]",
        "begin_line": 341,
        "end_line": 342,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.__init__#344",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if not (isinstance(values, np.ndarray) and is_integer_dtype(values.dtype)):\n            raise TypeError(\n                \"values should be integer numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n        if not (isinstance(mask, np.ndarray) and is_bool_dtype(mask.dtype)):\n            raise TypeError(\n                \"mask should be boolean numpy array. Use \"\n                \"the 'integer_array' function instead\"\n            )\n        super().__init__(values, mask, copy=copy)",
        "begin_line": 344,
        "end_line": 355,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray._from_sequence#358",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray._from_sequence(cls, scalars, dtype=None, copy: bool=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> \"IntegerArray\":\n        return integer_array(scalars, dtype=dtype, copy=copy)",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.integer.IntegerArray.astype#433",
        "src_path": "pandas/core/arrays/integer.py",
        "class_name": "pandas.core.arrays.integer.IntegerArray",
        "signature": "pandas.core.arrays.integer.IntegerArray.astype(self, dtype, copy: bool=True)",
        "snippet": "    def astype(self, dtype, copy: bool = True) -> ArrayLike:\n        \"\"\"\n        Cast to a NumPy array or ExtensionArray with 'dtype'.\n\n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.\n\n        Raises\n        ------\n        TypeError\n            if incompatible type with an IntegerDtype, equivalent of same_kind\n            casting\n        \"\"\"\n        from pandas.core.arrays.boolean import BooleanArray, BooleanDtype\n\n        dtype = pandas_dtype(dtype)\n\n        # if we are astyping to an existing IntegerDtype we can fastpath\n        if isinstance(dtype, _IntegerDtype):\n            result = self._data.astype(dtype.numpy_dtype, copy=False)\n            return type(self)(result, mask=self._mask, copy=False)\n        elif isinstance(dtype, BooleanDtype):\n            result = self._data.astype(\"bool\", copy=False)\n            return BooleanArray(result, mask=self._mask, copy=False)\n\n        # coerce\n        if is_float_dtype(dtype):\n            # In astype, we consider dtype=float to also mean na_value=np.nan\n            kwargs = dict(na_value=np.nan)\n        elif is_datetime64_dtype(dtype):\n            kwargs = dict(na_value=np.datetime64(\"NaT\"))\n        else:\n            kwargs = {}\n\n        data = self.to_numpy(dtype=dtype, **kwargs)\n        return astype_nansafe(data, dtype, copy=False)",
        "begin_line": 433,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.__new__#159",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
        "snippet": "    def __new__(\n        cls,\n        data=None,\n        ordinal=None,\n        freq=None,\n        tz=None,\n        dtype=None,\n        copy=False,\n        name=None,\n        **fields,\n    ):\n\n        valid_field_set = {\n            \"year\",\n            \"month\",\n            \"day\",\n            \"quarter\",\n            \"hour\",\n            \"minute\",\n            \"second\",\n        }\n\n        if not set(fields).issubset(valid_field_set):\n            argument = list(set(fields) - valid_field_set)[0]\n            raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n        name = maybe_extract_name(name, data, cls)\n\n        if data is None and ordinal is None:\n            # range-based.\n            data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n            # PeriodArray._generate range does validation that fields is\n            # empty when really using the range-based constructor.\n            freq = freq2\n\n            data = PeriodArray(data, freq=freq)\n        else:\n            freq = validate_dtype_freq(dtype, freq)\n\n            # PeriodIndex allow PeriodIndex(period_index, freq=different)\n            # Let's not encourage that kind of behavior in PeriodArray.\n\n            if freq and isinstance(data, cls) and data.freq != freq:\n                # TODO: We can do some of these with no-copy / coercion?\n                # e.g. D -> 2D seems to be OK\n                data = data.asfreq(freq)\n\n            if data is None and ordinal is not None:\n                # we strangely ignore `ordinal` if data is passed.\n                ordinal = np.asarray(ordinal, dtype=np.int64)\n                data = PeriodArray(ordinal, freq)\n            else:\n                # don't pass copy here, since we copy later.\n                data = period_array(data=data, freq=freq)\n\n        if copy:\n            data = data.copy()\n\n        return cls._simple_new(data, name=name)",
        "begin_line": 159,
        "end_line": 217,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._simple_new#220",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._simple_new(cls, values: PeriodArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, values: PeriodArray, name: Label = None):\n        \"\"\"\n        Create a new PeriodIndex.\n\n        Parameters\n        ----------\n        values : PeriodArray\n            Values that can be converted to a PeriodArray without inference\n            or coercion.\n        \"\"\"\n        assert isinstance(values, PeriodArray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # For groupby perf. See note in indexes/base about _index_data\n        result._index_data = values._data\n        result.name = name\n        result._cache = {}\n        result._reset_identity()\n        return result",
        "begin_line": 220,
        "end_line": 239,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.values#245",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.values(self)",
        "snippet": "    def values(self):\n        return np.asarray(self)",
        "begin_line": 245,
        "end_line": 246,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex._engine#325",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex._engine(self)",
        "snippet": "    def _engine(self):\n        # To avoid a reference cycle, pass a weakref of self to _engine_type.\n        period = weakref.ref(self)\n        return self._engine_type(period, len(self))",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.period.PeriodIndex.inferred_type#434",
        "src_path": "pandas/core/indexes/period.py",
        "class_name": "pandas.core.indexes.period.PeriodIndex",
        "signature": "pandas.core.indexes.period.PeriodIndex.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str:\n        # b/c data is represented as ints make sure we can't have ambiguous\n        # indexing\n        return \"period\"",
        "begin_line": 434,
        "end_line": 437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.get_keywords#18",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.get_keywords()",
        "snippet": "def get_keywords():\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = \"$Format:%d$\"\n    git_full = \"$Format:%H$\"\n    keywords = {\"refnames\": git_refnames, \"full\": git_full}\n    return keywords",
        "begin_line": 18,
        "end_line": 26,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.get_config#33",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.get_config()",
        "snippet": "def get_config():\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"pandas-\"\n    cfg.versionfile_source = \"pandas/_version.py\"\n    cfg.verbose = False\n    return cfg",
        "begin_line": 33,
        "end_line": 43,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.run_command#63",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.run_command(commands, args, cwd=None, verbose=False, hide_stderr=False)",
        "snippet": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen(\n                [c] + args,\n                cwd=cwd,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n            )\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(f\"unable to run {dispcmd}\")\n                print(e)\n            return None\n    else:\n        if verbose:\n            print(f\"unable to find command, tried {commands}\")\n        return None\n    stdout = p.communicate()[0].strip().decode()\n    if p.returncode != 0:\n        if verbose:\n            print(f\"unable to run {dispcmd} (error)\")\n        return None\n    return stdout",
        "begin_line": 63,
        "end_line": 94,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.git_versions_from_keywords#141",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.git_versions_from_keywords(keywords, tag_prefix, verbose)",
        "snippet": "def git_versions_from_keywords(keywords, tag_prefix, verbose):\n    if not keywords:\n        raise NotThisMethod(\"no keywords at all, weird\")\n    refnames = keywords[\"refnames\"].strip()\n    if refnames.startswith(\"$Format\"):\n        if verbose:\n            print(\"keywords are unexpanded, not using\")\n        raise NotThisMethod(\"unexpanded keywords, not a git-archive tarball\")\n    refs = {r.strip() for r in refnames.strip(\"()\").split(\",\")}\n    # starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of\n    # just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.\n    TAG = \"tag: \"\n    tags = {r[len(TAG) :] for r in refs if r.startswith(TAG)}\n    if not tags:\n        # Either we're using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like \"release\" and\n        # \"stabilization\", as well as \"HEAD\" and \"master\".\n        tags = {r for r in refs if re.search(r\"\\d\", r)}\n        if verbose:\n            print(f\"discarding '{','.join(refs - tags)}', no digits\")\n    if verbose:\n        print(f\"likely tags: {','.join(sorted(tags))}\")\n    for ref in sorted(tags):\n        # sorting will prefer e.g. \"2.0\" over \"2.0rc1\"\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix) :]\n            if verbose:\n                print(f\"picking {r}\")\n            return {\n                \"version\": r,\n                \"full-revisionid\": keywords[\"full\"].strip(),\n                \"dirty\": False,\n                \"error\": None,\n            }\n    # no suitable tags, so version is \"0+unknown\", but full hex is still there\n    if verbose:\n        print(\"no suitable tags, using unknown + full revision id\")\n    return {\n        \"version\": \"0+unknown\",\n        \"full-revisionid\": keywords[\"full\"].strip(),\n        \"dirty\": False,\n        \"error\": \"no suitable tags\",\n    }",
        "begin_line": 141,
        "end_line": 187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.git_pieces_from_vcs#191",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command)",
        "snippet": "def git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    # this runs 'git' from the root of the source tree. This only gets called\n    # if the git-archive 'subst' keywords were *not* expanded, and\n    # _version.py hasn't already been rewritten with a short version string,\n    # meaning we're inside a checked out source tree.\n\n    if not os.path.exists(os.path.join(root, \".git\")):\n        if verbose:\n            print(f\"no .git in {root}\")\n        raise NotThisMethod(\"no .git directory\")\n\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    # if there is a tag, this yields TAG-NUM-gHEX[-dirty]\n    # if there are no tags, this yields HEX[-dirty] (no NUM)\n    describe_out = run_command(\n        GITS, [\"describe\", \"--tags\", \"--dirty\", \"--always\", \"--long\"], cwd=root\n    )\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(\"'git describe' failed\")\n    describe_out = describe_out.strip()\n    full_out = run_command(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(\"'git rev-parse' failed\")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[\"long\"] = full_out\n    pieces[\"short\"] = full_out[:7]  # maybe improved later\n    pieces[\"error\"] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(\"-dirty\")\n    pieces[\"dirty\"] = dirty\n    if dirty:\n        git_describe = git_describe[: git_describe.rindex(\"-dirty\")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if \"-\" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\"^(.+)-(\\d+)-g([0-9a-f]+)$\", git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[\"error\"] = f\"unable to parse git-describe output: '{describe_out}'\"\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            msg = f\"tag '{full_tag}' doesn't start with prefix '{tag_prefix}'\"\n            if verbose:\n                print(msg)\n            pieces[\"error\"] = msg\n            return pieces\n\n        pieces[\"closest-tag\"] = full_tag[len(tag_prefix) :]\n\n        # distance: number of commits since tag\n        pieces[\"distance\"] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[\"short\"] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[\"closest-tag\"] = None\n        count_out = run_command(GITS, [\"rev-list\", \"HEAD\", \"--count\"], cwd=root)\n        pieces[\"distance\"] = int(count_out)  # total number of commits\n\n    return pieces",
        "begin_line": 191,
        "end_line": 267,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.plus_or_dot#270",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.plus_or_dot(pieces)",
        "snippet": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"",
        "begin_line": 270,
        "end_line": 273,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.render_pep440#276",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.render_pep440(pieces)",
        "snippet": "def render_pep440(pieces):\n    # now build up version string, with post-release \"local version\n    # identifier\". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    # get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty\n\n    # exceptions:\n    # 1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n\n    if pieces[\"closest-tag\"]:\n        rendered = pieces[\"closest-tag\"]\n        if pieces[\"distance\"] or pieces[\"dirty\"]:\n            rendered += plus_or_dot(pieces)\n            rendered += f\"{pieces['distance']:d}.g{pieces['short']}\"\n            if pieces[\"dirty\"]:\n                rendered += \".dirty\"\n    else:\n        # exception #1\n        rendered = f\"0+untagged.{pieces['distance']:d}.g{pieces['short']}\"\n        if pieces[\"dirty\"]:\n            rendered += \".dirty\"\n    return rendered",
        "begin_line": 276,
        "end_line": 296,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.render#398",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.render(pieces, style)",
        "snippet": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n    elif style == \"git-describe-long\":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(f\"unknown style '{style}'\")\n\n    return {\n        \"version\": rendered,\n        \"full-revisionid\": pieces[\"long\"],\n        \"dirty\": pieces[\"dirty\"],\n        \"error\": None,\n    }",
        "begin_line": 398,
        "end_line": 430,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._version.get_versions#433",
        "src_path": "pandas/_version.py",
        "class_name": "pandas._version",
        "signature": "pandas._version.get_versions()",
        "snippet": "def get_versions():\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don't do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\"/\"):\n            root = os.path.dirname(root)\n    except NameError:\n        return {\n            \"version\": \"0+unknown\",\n            \"full-revisionid\": None,\n            \"dirty\": None,\n            \"error\": \"unable to find root of source tree\",\n        }\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {\n        \"version\": \"0+unknown\",\n        \"full-revisionid\": None,\n        \"dirty\": None,\n        \"error\": \"unable to compute version\",\n    }",
        "begin_line": 433,
        "end_line": 479,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.missing.isna#50",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.isna(obj)",
        "snippet": "def isna(obj):\n    \"\"\"\n    Detect missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are missing (``NaN`` in numeric arrays, ``None`` or ``NaN``\n    in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : scalar or array-like\n        Object to check for null or missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is missing.\n\n    See Also\n    --------\n    notna : Boolean inverse of pandas.isna.\n    Series.isna : Detect missing values in a Series.\n    DataFrame.isna : Detect missing values in a DataFrame.\n    Index.isna : Detect missing values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.isna('dog')\n    False\n\n    >>> pd.isna(pd.NA)\n    True\n\n    >>> pd.isna(np.nan)\n    True\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.isna(array)\n    array([[False,  True, False],\n           [False, False,  True]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                           \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.isna(index)\n    array([False, False,  True, False])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.isna(df)\n           0      1      2\n    0  False  False  False\n    1  False   True  False\n\n    >>> pd.isna(df[1])\n    0    False\n    1     True\n    Name: 1, dtype: bool\n    \"\"\"\n    return _isna(obj)",
        "begin_line": 50,
        "end_line": 127,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007627765064836003,
            "pseudo_dstar_susp": 0.0020491803278688526,
            "pseudo_tarantula_susp": 0.000715307582260372,
            "pseudo_op2_susp": 0.0020491803278688526,
            "pseudo_barinel_susp": 0.000715307582260372
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_new#133",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_new(obj)",
        "snippet": "def _isna_new(obj):\n\n    if is_scalar(obj):\n        return libmissing.checknull(obj)\n    # hack (for now) because MI registers as ndarray\n    elif isinstance(obj, ABCMultiIndex):\n        raise NotImplementedError(\"isna is not defined for MultiIndex\")\n    elif isinstance(obj, type):\n        return False\n    elif isinstance(\n        obj,\n        (\n            ABCSeries,\n            np.ndarray,\n            ABCIndexClass,\n            ABCExtensionArray,\n            ABCDatetimeArray,\n            ABCTimedeltaArray,\n        ),\n    ):\n        return _isna_ndarraylike(obj)\n    elif isinstance(obj, ABCGeneric):\n        return obj._constructor(obj._data.isna(func=isna))\n    elif isinstance(obj, list):\n        return _isna_ndarraylike(np.asarray(obj, dtype=object))\n    elif hasattr(obj, \"__array__\"):\n        return _isna_ndarraylike(np.asarray(obj))\n    else:\n        return obj is None",
        "begin_line": 133,
        "end_line": 161,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008857395925597874,
            "pseudo_dstar_susp": 0.0027100271002710027,
            "pseudo_tarantula_susp": 0.0008460236886632825,
            "pseudo_op2_susp": 0.0027100271002710027,
            "pseudo_barinel_susp": 0.0008460236886632825
        }
    },
    {
        "name": "pandas.core.dtypes.missing._isna_ndarraylike#226",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing._isna_ndarraylike(obj)",
        "snippet": "def _isna_ndarraylike(obj):\n    is_extension = is_extension_array_dtype(obj)\n\n    if not is_extension:\n        # Avoid accessing `.values` on things like\n        # PeriodIndex, which may be expensive.\n        values = getattr(obj, \"values\", obj)\n    else:\n        values = obj\n\n    dtype = values.dtype\n\n    if is_extension:\n        if isinstance(obj, (ABCIndexClass, ABCSeries)):\n            values = obj._values\n        else:\n            values = obj\n        result = values.isna()\n    elif isinstance(obj, ABCDatetimeArray):\n        return obj.isna()\n    elif is_string_dtype(dtype):\n        # Working around NumPy ticket 1542\n        shape = values.shape\n\n        if is_string_like_dtype(dtype):\n            # object array of strings\n            result = np.zeros(values.shape, dtype=bool)\n        else:\n            # object array of non-strings\n            result = np.empty(shape, dtype=bool)\n            vec = libmissing.isnaobj(values.ravel())\n            result[...] = vec.reshape(shape)\n\n    elif needs_i8_conversion(dtype):\n        # this is the NaT pattern\n        result = values.view(\"i8\") == iNaT\n    else:\n        result = np.isnan(values)\n\n    # box\n    if isinstance(obj, ABCSeries):\n        result = obj._constructor(result, index=obj.index, name=obj.name, copy=False)\n\n    return result",
        "begin_line": 226,
        "end_line": 269,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0013054830287206266,
            "pseudo_dstar_susp": 0.004694835680751174,
            "pseudo_tarantula_susp": 0.001076426264800861,
            "pseudo_op2_susp": 0.004694835680751174,
            "pseudo_barinel_susp": 0.001076426264800861
        }
    },
    {
        "name": "pandas.core.dtypes.missing.notna#300",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.notna(obj)",
        "snippet": "def notna(obj):\n    \"\"\"\n    Detect non-missing values for an array-like object.\n\n    This function takes a scalar or array-like object and indicates\n    whether values are valid (not missing, which is ``NaN`` in numeric\n    arrays, ``None`` or ``NaN`` in object arrays, ``NaT`` in datetimelike).\n\n    Parameters\n    ----------\n    obj : array-like or object value\n        Object to check for *not* null or *non*-missing values.\n\n    Returns\n    -------\n    bool or array-like of bool\n        For scalar input, returns a scalar boolean.\n        For array input, returns an array of boolean indicating whether each\n        corresponding element is valid.\n\n    See Also\n    --------\n    isna : Boolean inverse of pandas.notna.\n    Series.notna : Detect valid values in a Series.\n    DataFrame.notna : Detect valid values in a DataFrame.\n    Index.notna : Detect valid values in an Index.\n\n    Examples\n    --------\n    Scalar arguments (including strings) result in a scalar boolean.\n\n    >>> pd.notna('dog')\n    True\n\n    >>> pd.notna(pd.NA)\n    False\n\n    >>> pd.notna(np.nan)\n    False\n\n    ndarrays result in an ndarray of booleans.\n\n    >>> array = np.array([[1, np.nan, 3], [4, 5, np.nan]])\n    >>> array\n    array([[ 1., nan,  3.],\n           [ 4.,  5., nan]])\n    >>> pd.notna(array)\n    array([[ True, False,  True],\n           [ True,  True, False]])\n\n    For indexes, an ndarray of booleans is returned.\n\n    >>> index = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None,\n    ...                          \"2017-07-08\"])\n    >>> index\n    DatetimeIndex(['2017-07-05', '2017-07-06', 'NaT', '2017-07-08'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> pd.notna(index)\n    array([ True,  True, False,  True])\n\n    For Series and DataFrame, the same type is returned, containing booleans.\n\n    >>> df = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\n    >>> df\n         0     1    2\n    0  ant   bee  cat\n    1  dog  None  fly\n    >>> pd.notna(df)\n          0      1     2\n    0  True   True  True\n    1  True  False  True\n\n    >>> pd.notna(df[1])\n    0     True\n    1    False\n    Name: 1, dtype: bool\n    \"\"\"\n    res = isna(obj)\n    if is_scalar(res):\n        return not res\n    return ~res",
        "begin_line": 300,
        "end_line": 380,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011682242990654205,
            "pseudo_dstar_susp": 0.0007246376811594203,
            "pseudo_tarantula_susp": 0.001282051282051282,
            "pseudo_op2_susp": 0.0007246376811594203,
            "pseudo_barinel_susp": 0.001282051282051282
        }
    },
    {
        "name": "pandas.core.dtypes.missing.array_equivalent#403",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.array_equivalent(left, right, strict_nan: bool=False)",
        "snippet": "def array_equivalent(left, right, strict_nan: bool = False) -> bool:\n    \"\"\"\n    True if two arrays, left and right, have equal non-NaN elements, and NaNs\n    in corresponding locations.  False otherwise. It is assumed that left and\n    right are NumPy arrays of the same dtype. The behavior of this function\n    (particularly with respect to NaNs) is not defined if the dtypes are\n    different.\n\n    Parameters\n    ----------\n    left, right : ndarrays\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equivalent.\n\n    Examples\n    --------\n    >>> array_equivalent(\n    ...     np.array([1, 2, np.nan]),\n    ...     np.array([1, 2, np.nan]))\n    True\n    >>> array_equivalent(\n    ...     np.array([1, np.nan, 2]),\n    ...     np.array([1, 2, np.nan]))\n    False\n    \"\"\"\n    left, right = np.asarray(left), np.asarray(right)\n\n    # shape compat\n    if left.shape != right.shape:\n        return False\n\n    # Object arrays can contain None, NaN and NaT.\n    # string dtypes must be come to this path for NumPy 1.7.1 compat\n    if is_string_dtype(left) or is_string_dtype(right):\n\n        if not strict_nan:\n            # isna considers NaN and None to be equivalent.\n            return lib.array_equivalent_object(\n                ensure_object(left.ravel()), ensure_object(right.ravel())\n            )\n\n        for left_value, right_value in zip(left, right):\n            if left_value is NaT and right_value is not NaT:\n                return False\n\n            elif left_value is libmissing.NA and right_value is not libmissing.NA:\n                return False\n\n            elif isinstance(left_value, float) and np.isnan(left_value):\n                if not isinstance(right_value, float) or not np.isnan(right_value):\n                    return False\n            else:\n                try:\n                    if np.any(np.asarray(left_value != right_value)):\n                        return False\n                except TypeError as err:\n                    if \"Cannot compare tz-naive\" in str(err):\n                        # tzawareness compat failure, see GH#28507\n                        return False\n                    elif \"boolean value of NA is ambiguous\" in str(err):\n                        return False\n                    raise\n        return True\n\n    # NaNs can occur in float and complex arrays.\n    if is_float_dtype(left) or is_complex_dtype(left):\n\n        # empty\n        if not (np.prod(left.shape) and np.prod(right.shape)):\n            return True\n        return ((left == right) | (isna(left) & isna(right))).all()\n\n    elif is_datetimelike_v_numeric(left, right):\n        # GH#29553 avoid numpy deprecation warning\n        return False\n\n    elif needs_i8_conversion(left) or needs_i8_conversion(right):\n        # datetime64, timedelta64, Period\n        if not is_dtype_equal(left.dtype, right.dtype):\n            return False\n\n        left = left.view(\"i8\")\n        right = right.view(\"i8\")\n\n    # if we have structured dtypes, compare first\n    if left.dtype.type is np.void or right.dtype.type is np.void:\n        if left.dtype != right.dtype:\n            return False\n\n    return np.array_equal(left, right)",
        "begin_line": 403,
        "end_line": 497,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007880220646178094,
            "pseudo_dstar_susp": 0.0020161290322580645,
            "pseudo_tarantula_susp": 0.0010395010395010396,
            "pseudo_op2_susp": 0.0020161290322580645,
            "pseudo_barinel_susp": 0.0010395010395010396
        }
    },
    {
        "name": "pandas.core.dtypes.missing.na_value_for_dtype#529",
        "src_path": "pandas/core/dtypes/missing.py",
        "class_name": "pandas.core.dtypes.missing",
        "signature": "pandas.core.dtypes.missing.na_value_for_dtype(dtype, compat: bool=True)",
        "snippet": "def na_value_for_dtype(dtype, compat: bool = True):\n    \"\"\"\n    Return a dtype compat na value\n\n    Parameters\n    ----------\n    dtype : string / dtype\n    compat : bool, default True\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Examples\n    --------\n    >>> na_value_for_dtype(np.dtype('int64'))\n    0\n    >>> na_value_for_dtype(np.dtype('int64'), compat=False)\n    nan\n    >>> na_value_for_dtype(np.dtype('float64'))\n    nan\n    >>> na_value_for_dtype(np.dtype('bool'))\n    False\n    >>> na_value_for_dtype(np.dtype('datetime64[ns]'))\n    NaT\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    if is_extension_array_dtype(dtype):\n        return dtype.na_value\n    if (\n        is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n        or is_timedelta64_dtype(dtype)\n        or is_period_dtype(dtype)\n    ):\n        return NaT\n    elif is_float_dtype(dtype):\n        return np.nan\n    elif is_integer_dtype(dtype):\n        if compat:\n            return 0\n        return np.nan\n    elif is_bool_dtype(dtype):\n        return False\n    return np.nan",
        "begin_line": 529,
        "end_line": 574,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.common.ensure_python_int#174",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.ensure_python_int(value: Union[int, np.integer])",
        "snippet": "def ensure_python_int(value: Union[int, np.integer]) -> int:\n    \"\"\"\n    Ensure that a value is a python int.\n\n    Parameters\n    ----------\n    value: int or numpy.integer\n\n    Returns\n    -------\n    int\n\n    Raises\n    ------\n    TypeError: if the value isn't an int or can't be converted to one.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"Value needs to be a scalar value, was type {type(value)}\")\n    try:\n        new_value = int(value)\n        assert new_value == value\n    except (TypeError, ValueError, AssertionError) as err:\n        raise TypeError(f\"Wrong type {type(value)} for value {value}\") from err\n    return new_value",
        "begin_line": 174,
        "end_line": 197,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.005154639175257732,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.005154639175257732,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes#200",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes(*klasses)",
        "snippet": "def classes(*klasses) -> Callable:\n    \"\"\" evaluate if the tipo is a subclass of the klasses \"\"\"\n    return lambda tipo: issubclass(tipo, klasses)",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009025270758122744,
            "pseudo_dstar_susp": 0.02564102564102564,
            "pseudo_tarantula_susp": 0.0006269592476489029,
            "pseudo_op2_susp": 0.02564102564102564,
            "pseudo_barinel_susp": 0.0006269592476489029
        }
    },
    {
        "name": "pandas.core.dtypes.common.classes_and_not_datetimelike#205",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.classes_and_not_datetimelike(*klasses)",
        "snippet": "def classes_and_not_datetimelike(*klasses) -> Callable:\n    \"\"\"\n    evaluate if the tipo is a subclass of the klasses\n    and not a datetimelike\n    \"\"\"\n    return lambda tipo: (\n        issubclass(tipo, klasses)\n        and not issubclass(tipo, (np.datetime64, np.timedelta64))\n    )",
        "begin_line": 205,
        "end_line": 213,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0011148272017837235,
            "pseudo_dstar_susp": 0.16666666666666666,
            "pseudo_tarantula_susp": 0.0009596928982725527,
            "pseudo_op2_susp": 0.16666666666666666,
            "pseudo_barinel_susp": 0.0009596928982725527
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_object_dtype#216",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)",
        "snippet": "def is_object_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the object dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the object dtype.\n\n    Examples\n    --------\n    >>> is_object_dtype(object)\n    True\n    >>> is_object_dtype(int)\n    False\n    >>> is_object_dtype(np.array([], dtype=object))\n    True\n    >>> is_object_dtype(np.array([], dtype=int))\n    False\n    >>> is_object_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.object_))",
        "begin_line": 216,
        "end_line": 243,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007485029940119761,
            "pseudo_dstar_susp": 0.00196078431372549,
            "pseudo_tarantula_susp": 0.000697350069735007,
            "pseudo_op2_susp": 0.00196078431372549,
            "pseudo_barinel_susp": 0.000697350069735007
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_sparse#246",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_sparse(arr)",
        "snippet": "def is_sparse(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a 1-D pandas sparse array.\n\n    Check that the one-dimensional array-like is a pandas sparse array.\n    Returns True if it is a pandas sparse array, not another type of\n    sparse array.\n\n    Parameters\n    ----------\n    arr : array-like\n        Array-like to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array-like is a pandas sparse array.\n\n    Examples\n    --------\n    Returns `True` if the parameter is a 1-D pandas sparse array.\n\n    >>> is_sparse(pd.arrays.SparseArray([0, 0, 1, 0]))\n    True\n    >>> is_sparse(pd.Series(pd.arrays.SparseArray([0, 0, 1, 0])))\n    True\n\n    Returns `False` if the parameter is not sparse.\n\n    >>> is_sparse(np.array([0, 0, 1, 0]))\n    False\n    >>> is_sparse(pd.Series([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter is not a pandas sparse array.\n\n    >>> from scipy.sparse import bsr_matrix\n    >>> is_sparse(bsr_matrix([0, 1, 0, 0]))\n    False\n\n    Returns `False` if the parameter has more than one dimension.\n    \"\"\"\n    from pandas.core.arrays.sparse import SparseDtype\n\n    dtype = getattr(arr, \"dtype\", arr)\n    return isinstance(dtype, SparseDtype)",
        "begin_line": 246,
        "end_line": 291,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000999000999000999,
            "pseudo_dstar_susp": 0.0037735849056603774,
            "pseudo_tarantula_susp": 0.0009442870632672333,
            "pseudo_op2_susp": 0.0037735849056603774,
            "pseudo_barinel_susp": 0.0009442870632672333
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical#332",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical(arr)",
        "snippet": "def is_categorical(arr) -> bool:\n    \"\"\"\n    Check whether an array-like is a Categorical instance.\n\n    Parameters\n    ----------\n    arr : array-like\n        The array-like to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like is of a Categorical instance.\n\n    Examples\n    --------\n    >>> is_categorical([1, 2, 3])\n    False\n\n    Categoricals, Series Categoricals, and CategoricalIndex will return True.\n\n    >>> cat = pd.Categorical([1, 2, 3])\n    >>> is_categorical(cat)\n    True\n    >>> is_categorical(pd.Series(cat))\n    True\n    >>> is_categorical(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    return isinstance(arr, ABCCategorical) or is_categorical_dtype(arr)",
        "begin_line": 332,
        "end_line": 361,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008051529790660225,
            "pseudo_dstar_susp": 0.002105263157894737,
            "pseudo_tarantula_susp": 0.0007320644216691069,
            "pseudo_op2_susp": 0.002105263157894737,
            "pseudo_barinel_susp": 0.0007320644216691069
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_dtype#364",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_dtype(object)\n    False\n    >>> is_datetime64_dtype(np.datetime64)\n    True\n    >>> is_datetime64_dtype(np.array([], dtype=int))\n    False\n    >>> is_datetime64_dtype(np.array([], dtype=np.datetime64))\n    True\n    >>> is_datetime64_dtype([1, 2, 3])\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64))",
        "begin_line": 364,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007524454477050414,
            "pseudo_dstar_susp": 0.001984126984126984,
            "pseudo_tarantula_susp": 0.000700770847932726,
            "pseudo_op2_susp": 0.001984126984126984,
            "pseudo_barinel_susp": 0.000700770847932726
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64tz_dtype#394",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64tz_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of a DatetimeTZDtype dtype.\n\n    Examples\n    --------\n    >>> is_datetime64tz_dtype(object)\n    False\n    >>> is_datetime64tz_dtype([1, 2, 3])\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3]))  # tz-naive\n    False\n    >>> is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n\n    >>> dtype = DatetimeTZDtype(\"ns\", tz=\"US/Eastern\")\n    >>> s = pd.Series([], dtype=dtype)\n    >>> is_datetime64tz_dtype(dtype)\n    True\n    >>> is_datetime64tz_dtype(s)\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return DatetimeTZDtype.is_dtype(arr_or_dtype)",
        "begin_line": 394,
        "end_line": 428,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006605019815059445,
            "pseudo_dstar_susp": 0.0017271157167530224,
            "pseudo_tarantula_susp": 0.0006321112515802782,
            "pseudo_op2_susp": 0.0017271157167530224,
            "pseudo_barinel_susp": 0.0006321112515802782
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_timedelta64_dtype#431",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)",
        "snippet": "def is_timedelta64_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the timedelta64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the timedelta64 dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_dtype(object)\n    False\n    >>> is_timedelta64_dtype(np.timedelta64)\n    True\n    >>> is_timedelta64_dtype([1, 2, 3])\n    False\n    >>> is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> is_timedelta64_dtype('0 days')\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.timedelta64))",
        "begin_line": 431,
        "end_line": 458,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007524454477050414,
            "pseudo_dstar_susp": 0.001984126984126984,
            "pseudo_tarantula_susp": 0.000700770847932726,
            "pseudo_op2_susp": 0.001984126984126984,
            "pseudo_barinel_susp": 0.000700770847932726
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_period_dtype#461",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)",
        "snippet": "def is_period_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Period dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Period dtype.\n\n    Examples\n    --------\n    >>> is_period_dtype(object)\n    False\n    >>> is_period_dtype(PeriodDtype(freq=\"D\"))\n    True\n    >>> is_period_dtype([1, 2, 3])\n    False\n    >>> is_period_dtype(pd.Period(\"2017-01-01\"))\n    False\n    >>> is_period_dtype(pd.PeriodIndex([], freq=\"A\"))\n    True\n    \"\"\"\n    # TODO: Consider making Period an instance of PeriodDtype\n    if arr_or_dtype is None:\n        return False\n    return PeriodDtype.is_dtype(arr_or_dtype)",
        "begin_line": 461,
        "end_line": 491,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006868131868131869,
            "pseudo_dstar_susp": 0.001652892561983471,
            "pseudo_tarantula_susp": 0.000744047619047619,
            "pseudo_op2_susp": 0.001652892561983471,
            "pseudo_barinel_susp": 0.000744047619047619
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_interval_dtype#494",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)",
        "snippet": "def is_interval_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Interval dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Interval dtype.\n\n    Examples\n    --------\n    >>> is_interval_dtype(object)\n    False\n    >>> is_interval_dtype(IntervalDtype())\n    True\n    >>> is_interval_dtype([1, 2, 3])\n    False\n    >>>\n    >>> interval = pd.Interval(1, 2, closed=\"right\")\n    >>> is_interval_dtype(interval)\n    False\n    >>> is_interval_dtype(pd.IntervalIndex([interval]))\n    True\n    \"\"\"\n    # TODO: Consider making Interval an instance of IntervalDtype\n    if arr_or_dtype is None:\n        return False\n    return IntervalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 494,
        "end_line": 526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006868131868131869,
            "pseudo_dstar_susp": 0.0018083182640144665,
            "pseudo_tarantula_susp": 0.000744047619047619,
            "pseudo_op2_susp": 0.0018083182640144665,
            "pseudo_barinel_susp": 0.000744047619047619
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_categorical_dtype#529",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)",
        "snippet": "def is_categorical_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether an array-like or dtype is of the Categorical dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array-like or dtype is of the Categorical dtype.\n\n    Examples\n    --------\n    >>> is_categorical_dtype(object)\n    False\n    >>> is_categorical_dtype(CategoricalDtype())\n    True\n    >>> is_categorical_dtype([1, 2, 3])\n    False\n    >>> is_categorical_dtype(pd.Categorical([1, 2, 3]))\n    True\n    >>> is_categorical_dtype(pd.CategoricalIndex([1, 2, 3]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return CategoricalDtype.is_dtype(arr_or_dtype)",
        "begin_line": 529,
        "end_line": 558,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006807351940095302,
            "pseudo_dstar_susp": 0.001763668430335097,
            "pseudo_tarantula_susp": 0.0007336757153338225,
            "pseudo_op2_susp": 0.001763668430335097,
            "pseudo_barinel_susp": 0.0007336757153338225
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_dtype#561",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)",
        "snippet": "def is_string_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    # TODO: gh-15585: consider making the checks stricter.\n    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)\n\n    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)\n\n    return _is_dtype(arr_or_dtype, condition)",
        "begin_line": 561,
        "end_line": 600,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006514657980456026,
            "pseudo_dstar_susp": 0.0016722408026755853,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.0016722408026755853,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.dtypes.common.condition#590",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.condition(dtype)",
        "snippet": "    def condition(dtype) -> bool:\n        return dtype.kind in (\"O\", \"S\", \"U\") and not is_excluded_dtype(dtype)",
        "begin_line": 590,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008865248226950354,
            "pseudo_dstar_susp": 0.025,
            "pseudo_tarantula_susp": 0.0006226650062266501,
            "pseudo_op2_susp": 0.025,
            "pseudo_barinel_susp": 0.0006226650062266501
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_excluded_dtype#593",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_excluded_dtype(dtype)",
        "snippet": "    def is_excluded_dtype(dtype) -> bool:\n        \"\"\"\n        These have kind = \"O\" but aren't string dtypes so need to be explicitly excluded\n        \"\"\"\n        is_excluded_checks = (is_period_dtype, is_interval_dtype)\n        return any(is_excluded(dtype) for is_excluded in is_excluded_checks)",
        "begin_line": 593,
        "end_line": 598,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007692307692307692,
            "pseudo_dstar_susp": 0.023255813953488372,
            "pseudo_tarantula_susp": 0.0006253908692933083,
            "pseudo_op2_susp": 0.023255813953488372,
            "pseudo_barinel_susp": 0.0006253908692933083
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_dtype_equal#603",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_dtype_equal(source, target)",
        "snippet": "def is_dtype_equal(source, target) -> bool:\n    \"\"\"\n    Check if two dtypes are equal.\n\n    Parameters\n    ----------\n    source : The first dtype to compare\n    target : The second dtype to compare\n\n    Returns\n    -------\n    boolean\n        Whether or not the two dtypes are equal.\n\n    Examples\n    --------\n    >>> is_dtype_equal(int, float)\n    False\n    >>> is_dtype_equal(\"int\", int)\n    True\n    >>> is_dtype_equal(object, \"category\")\n    False\n    >>> is_dtype_equal(CategoricalDtype(), \"category\")\n    True\n    >>> is_dtype_equal(DatetimeTZDtype(tz=\"UTC\"), \"datetime64\")\n    False\n    \"\"\"\n    try:\n        source = _get_dtype(source)\n        target = _get_dtype(target)\n        return source == target\n    except (TypeError, AttributeError):\n\n        # invalid comparison\n        # object == category will hit this\n        return False",
        "begin_line": 603,
        "end_line": 638,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007396449704142012,
            "pseudo_dstar_susp": 0.0019267822736030828,
            "pseudo_tarantula_susp": 0.0006925207756232687,
            "pseudo_op2_susp": 0.0019267822736030828,
            "pseudo_barinel_susp": 0.0006925207756232687
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_integer_dtype#691",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)",
        "snippet": "def is_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an integer dtype and\n        not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_integer_dtype(str)\n    False\n    >>> is_integer_dtype(int)\n    True\n    >>> is_integer_dtype(float)\n    False\n    >>> is_integer_dtype(np.uint64)\n    True\n    >>> is_integer_dtype('int8')\n    True\n    >>> is_integer_dtype('Int8')\n    True\n    >>> is_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_integer_dtype(np.datetime64)\n    False\n    >>> is_integer_dtype(np.timedelta64)\n    False\n    >>> is_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.integer))",
        "begin_line": 691,
        "end_line": 742,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007451564828614009,
            "pseudo_dstar_susp": 0.001953125,
            "pseudo_tarantula_susp": 0.0006958942240779402,
            "pseudo_op2_susp": 0.001953125,
            "pseudo_barinel_susp": 0.0006958942240779402
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_signed_integer_dtype#745",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)",
        "snippet": "def is_signed_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a signed integer dtype.\n\n    Unlike in `in_any_int_dtype`, timedelta64 instances will return False.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.Int64Dtype) are also considered\n       as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a signed integer dtype\n        and not an instance of timedelta64.\n\n    Examples\n    --------\n    >>> is_signed_integer_dtype(str)\n    False\n    >>> is_signed_integer_dtype(int)\n    True\n    >>> is_signed_integer_dtype(float)\n    False\n    >>> is_signed_integer_dtype(np.uint64)  # unsigned\n    False\n    >>> is_signed_integer_dtype('int8')\n    True\n    >>> is_signed_integer_dtype('Int8')\n    True\n    >>> is_signed_integer_dtype(pd.Int8Dtype)\n    True\n    >>> is_signed_integer_dtype(np.datetime64)\n    False\n    >>> is_signed_integer_dtype(np.timedelta64)\n    False\n    >>> is_signed_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_signed_integer_dtype(pd.Series([1, 2]))\n    True\n    >>> is_signed_integer_dtype(np.array([], dtype=np.timedelta64))\n    False\n    >>> is_signed_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_signed_integer_dtype(np.array([1, 2], dtype=np.uint32))  # unsigned\n    False\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes_and_not_datetimelike(np.signedinteger))",
        "begin_line": 745,
        "end_line": 798,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006868131868131869,
            "pseudo_dstar_susp": 0.001310615989515072,
            "pseudo_tarantula_susp": 0.000744047619047619,
            "pseudo_op2_susp": 0.001310615989515072,
            "pseudo_barinel_susp": 0.000744047619047619
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_unsigned_integer_dtype#801",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)",
        "snippet": "def is_unsigned_integer_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of an unsigned integer dtype.\n\n    .. versionchanged:: 0.24.0\n\n       The nullable Integer dtypes (e.g. pandas.UInt64Dtype) are also\n       considered as integer by this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of an unsigned integer dtype.\n\n    Examples\n    --------\n    >>> is_unsigned_integer_dtype(str)\n    False\n    >>> is_unsigned_integer_dtype(int)  # signed\n    False\n    >>> is_unsigned_integer_dtype(float)\n    False\n    >>> is_unsigned_integer_dtype(np.uint64)\n    True\n    >>> is_unsigned_integer_dtype('uint8')\n    True\n    >>> is_unsigned_integer_dtype('UInt8')\n    True\n    >>> is_unsigned_integer_dtype(pd.UInt8Dtype)\n    True\n    >>> is_unsigned_integer_dtype(np.array(['a', 'b']))\n    False\n    >>> is_unsigned_integer_dtype(pd.Series([1, 2]))  # signed\n    False\n    >>> is_unsigned_integer_dtype(pd.Index([1, 2.]))  # float\n    False\n    >>> is_unsigned_integer_dtype(np.array([1, 2], dtype=np.uint32))\n    True\n    \"\"\"\n    return _is_dtype_type(\n        arr_or_dtype, classes_and_not_datetimelike(np.unsignedinteger)\n    )",
        "begin_line": 801,
        "end_line": 847,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000725689404934688,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0007905138339920949,
            "pseudo_op2_susp": 0.0013736263736263737,
            "pseudo_barinel_susp": 0.0007905138339920949
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_any_dtype#900",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_any_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_any_dtype(str)\n    False\n    >>> is_datetime64_any_dtype(int)\n    False\n    >>> is_datetime64_any_dtype(np.datetime64)  # can be tz-naive\n    True\n    >>> is_datetime64_any_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_any_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_any_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_any_dtype(np.array([], dtype=\"datetime64[ns]\"))\n    True\n    >>> is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return is_datetime64_dtype(arr_or_dtype) or is_datetime64tz_dtype(arr_or_dtype)",
        "begin_line": 900,
        "end_line": 935,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006868131868131869,
            "pseudo_dstar_susp": 0.001310615989515072,
            "pseudo_tarantula_susp": 0.000744047619047619,
            "pseudo_op2_susp": 0.001310615989515072,
            "pseudo_barinel_susp": 0.000744047619047619
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime64_ns_dtype#938",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)",
        "snippet": "def is_datetime64_ns_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of the datetime64[ns] dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    bool\n        Whether or not the array or dtype is of the datetime64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_datetime64_ns_dtype(str)\n    False\n    >>> is_datetime64_ns_dtype(int)\n    False\n    >>> is_datetime64_ns_dtype(np.datetime64)  # no unit\n    False\n    >>> is_datetime64_ns_dtype(DatetimeTZDtype(\"ns\", \"US/Eastern\"))\n    True\n    >>> is_datetime64_ns_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime64_ns_dtype(np.array([1, 2]))\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64\"))  # no unit\n    False\n    >>> is_datetime64_ns_dtype(np.array([], dtype=\"datetime64[ps]\"))  # wrong unit\n    False\n    >>> is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        tipo = _get_dtype(arr_or_dtype)\n    except TypeError:\n        if is_datetime64tz_dtype(arr_or_dtype):\n            tipo = _get_dtype(arr_or_dtype.dtype)\n        else:\n            return False\n    return tipo == _NS_DTYPE or getattr(tipo, \"base\", None) == _NS_DTYPE",
        "begin_line": 938,
        "end_line": 982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002304147465437788,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype#1016",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)",
        "snippet": "def is_datetime_or_timedelta_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of\n    a timedelta64 or datetime64 dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a timedelta64,\n        or datetime64 dtype.\n\n    Examples\n    --------\n    >>> is_datetime_or_timedelta_dtype(str)\n    False\n    >>> is_datetime_or_timedelta_dtype(int)\n    False\n    >>> is_datetime_or_timedelta_dtype(np.datetime64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.timedelta64)\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array(['a', 'b']))\n    False\n    >>> is_datetime_or_timedelta_dtype(pd.Series([1, 2]))\n    False\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.timedelta64))\n    True\n    >>> is_datetime_or_timedelta_dtype(np.array([], dtype=np.datetime64))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.datetime64, np.timedelta64))",
        "begin_line": 1016,
        "end_line": 1051,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006988120195667365,
            "pseudo_dstar_susp": 0.0018315018315018315,
            "pseudo_tarantula_susp": 0.0006684491978609625,
            "pseudo_op2_susp": 0.0018315018315018315,
            "pseudo_barinel_susp": 0.0006684491978609625
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_datetimelike_v_numeric#1131",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_datetimelike_v_numeric(a, b)",
        "snippet": "def is_datetimelike_v_numeric(a, b):\n    \"\"\"\n    Check if we are comparing a datetime-like object to a numeric object.\n    By \"numeric,\" we mean an object that is either of an int or float dtype.\n\n    Parameters\n    ----------\n    a : array-like, scalar\n        The first object to check.\n    b : array-like, scalar\n        The second object to check.\n\n    Returns\n    -------\n    boolean\n        Whether we return a comparing a datetime-like to a numeric object.\n\n    Examples\n    --------\n    >>> from datetime import datetime\n    >>> dt = np.datetime64(datetime(2017, 1, 1))\n    >>>\n    >>> is_datetimelike_v_numeric(1, 1)\n    False\n    >>> is_datetimelike_v_numeric(dt, dt)\n    False\n    >>> is_datetimelike_v_numeric(1, dt)\n    True\n    >>> is_datetimelike_v_numeric(dt, 1)  # symmetric check\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), 1)\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), dt)\n    True\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([1]))\n    True\n    >>> is_datetimelike_v_numeric(np.array([1]), np.array([2]))\n    False\n    >>> is_datetimelike_v_numeric(np.array([dt]), np.array([dt]))\n    False\n    \"\"\"\n    if not hasattr(a, \"dtype\"):\n        a = np.asarray(a)\n    if not hasattr(b, \"dtype\"):\n        b = np.asarray(b)\n\n    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)\n\n    return (needs_i8_conversion(a) and is_numeric(b)) or (\n        needs_i8_conversion(b) and is_numeric(a)\n    )",
        "begin_line": 1131,
        "end_line": 1185,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007485029940119761,
            "pseudo_dstar_susp": 0.00196078431372549,
            "pseudo_tarantula_susp": 0.000697350069735007,
            "pseudo_op2_susp": 0.00196078431372549,
            "pseudo_barinel_susp": 0.000697350069735007
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_numeric#1177",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_numeric(x)",
        "snippet": "    def is_numeric(x):\n        \"\"\"\n        Check if an object has a numeric dtype (i.e. integer or float).\n        \"\"\"\n        return is_integer_dtype(x) or is_float_dtype(x)",
        "begin_line": 1177,
        "end_line": 1181,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007037297677691766,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.0006807351940095302,
            "pseudo_op2_susp": 0.0018552875695732839,
            "pseudo_barinel_susp": 0.0006807351940095302
        }
    },
    {
        "name": "pandas.core.dtypes.common.needs_i8_conversion#1188",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)",
        "snippet": "def needs_i8_conversion(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the array or dtype should be converted to int64.\n\n    An array-like or dtype \"needs\" such a conversion if the array-like\n    or dtype is of a datetime-like dtype\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype should be converted to int64.\n\n    Examples\n    --------\n    >>> needs_i8_conversion(str)\n    False\n    >>> needs_i8_conversion(np.int64)\n    False\n    >>> needs_i8_conversion(np.datetime64)\n    True\n    >>> needs_i8_conversion(np.array(['a', 'b']))\n    False\n    >>> needs_i8_conversion(pd.Series([1, 2]))\n    False\n    >>> needs_i8_conversion(pd.Series([], dtype=\"timedelta64[ns]\"))\n    True\n    >>> needs_i8_conversion(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\"))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    return (\n        is_datetime_or_timedelta_dtype(arr_or_dtype)\n        or is_datetime64tz_dtype(arr_or_dtype)\n        or is_period_dtype(arr_or_dtype)\n    )",
        "begin_line": 1188,
        "end_line": 1228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007107320540156361,
            "pseudo_dstar_susp": 0.001876172607879925,
            "pseudo_tarantula_susp": 0.000683526999316473,
            "pseudo_op2_susp": 0.001876172607879925,
            "pseudo_barinel_susp": 0.000683526999316473
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_string_like_dtype#1273",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)",
        "snippet": "def is_string_like_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(pd.Series([1, 2]))\n    False\n    \"\"\"\n    return _is_dtype(arr_or_dtype, lambda dtype: dtype.kind in (\"S\", \"U\"))",
        "begin_line": 1273,
        "end_line": 1301,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016431153466973383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_float_dtype#1304",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)",
        "snippet": "def is_float_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a float dtype.\n\n    This function is internal and should not be exposed in the public API.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a float dtype.\n\n    Examples\n    --------\n    >>> is_float_dtype(str)\n    False\n    >>> is_float_dtype(int)\n    False\n    >>> is_float_dtype(float)\n    True\n    >>> is_float_dtype(np.array(['a', 'b']))\n    False\n    >>> is_float_dtype(pd.Series([1, 2]))\n    False\n    >>> is_float_dtype(pd.Index([1, 2.]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.floating))",
        "begin_line": 1304,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006578947368421052,
            "pseudo_dstar_susp": 0.0017123287671232876,
            "pseudo_tarantula_susp": 0.0006297229219143577,
            "pseudo_op2_susp": 0.0017123287671232876,
            "pseudo_barinel_susp": 0.0006297229219143577
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_bool_dtype#1338",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)",
        "snippet": "def is_bool_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a boolean dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a boolean dtype.\n\n    Notes\n    -----\n    An ExtensionArray is considered boolean when the ``_is_boolean``\n    attribute is set to True.\n\n    Examples\n    --------\n    >>> is_bool_dtype(str)\n    False\n    >>> is_bool_dtype(int)\n    False\n    >>> is_bool_dtype(bool)\n    True\n    >>> is_bool_dtype(np.bool)\n    True\n    >>> is_bool_dtype(np.array(['a', 'b']))\n    False\n    >>> is_bool_dtype(pd.Series([1, 2]))\n    False\n    >>> is_bool_dtype(np.array([True, False]))\n    True\n    >>> is_bool_dtype(pd.Categorical([True, False]))\n    True\n    >>> is_bool_dtype(pd.arrays.SparseArray([True, False]))\n    True\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except TypeError:\n        return False\n\n    if isinstance(arr_or_dtype, CategoricalDtype):\n        arr_or_dtype = arr_or_dtype.categories\n        # now we use the special definition for Index\n\n    if isinstance(arr_or_dtype, ABCIndexClass):\n\n        # TODO(jreback)\n        # we don't have a boolean Index class\n        # so its object, we need to infer to\n        # guess this\n        return arr_or_dtype.is_object and arr_or_dtype.inferred_type == \"boolean\"\n    elif is_extension_array_dtype(arr_or_dtype):\n        dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n        return dtype._is_boolean\n\n    return issubclass(dtype.type, np.bool_)",
        "begin_line": 1338,
        "end_line": 1400,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008298755186721991,
            "pseudo_dstar_susp": 0.0022675736961451248,
            "pseudo_tarantula_susp": 0.0007727975270479134,
            "pseudo_op2_susp": 0.0022675736961451248,
            "pseudo_barinel_susp": 0.0007727975270479134
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_extension_array_dtype#1468",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_extension_array_dtype(arr_or_dtype)",
        "snippet": "def is_extension_array_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check if an object is a pandas extension array type.\n\n    See the :ref:`Use Guide <extending.extension-types>` for more.\n\n    Parameters\n    ----------\n    arr_or_dtype : object\n        For array-like input, the ``.dtype`` attribute will\n        be extracted.\n\n    Returns\n    -------\n    bool\n        Whether the `arr_or_dtype` is an extension array type.\n\n    Notes\n    -----\n    This checks whether an object implements the pandas extension\n    array interface. In pandas, this includes:\n\n    * Categorical\n    * Sparse\n    * Interval\n    * Period\n    * DatetimeArray\n    * TimedeltaArray\n\n    Third-party libraries may implement arrays or types satisfying\n    this interface as well.\n\n    Examples\n    --------\n    >>> from pandas.api.types import is_extension_array_dtype\n    >>> arr = pd.Categorical(['a', 'b'])\n    >>> is_extension_array_dtype(arr)\n    True\n    >>> is_extension_array_dtype(arr.dtype)\n    True\n\n    >>> arr = np.array(['a', 'b'])\n    >>> is_extension_array_dtype(arr.dtype)\n    False\n    \"\"\"\n    dtype = getattr(arr_or_dtype, \"dtype\", arr_or_dtype)\n    return isinstance(dtype, ExtensionDtype) or registry.find(dtype) is not None",
        "begin_line": 1468,
        "end_line": 1514,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006711409395973154,
            "pseudo_dstar_susp": 0.001763668430335097,
            "pseudo_tarantula_susp": 0.0006414368184733803,
            "pseudo_op2_susp": 0.001763668430335097,
            "pseudo_barinel_susp": 0.0006414368184733803
        }
    },
    {
        "name": "pandas.core.dtypes.common.is_complex_dtype#1517",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)",
        "snippet": "def is_complex_dtype(arr_or_dtype) -> bool:\n    \"\"\"\n    Check whether the provided array or dtype is of a complex dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean\n        Whether or not the array or dtype is of a complex dtype.\n\n    Examples\n    --------\n    >>> is_complex_dtype(str)\n    False\n    >>> is_complex_dtype(int)\n    False\n    >>> is_complex_dtype(np.complex)\n    True\n    >>> is_complex_dtype(np.array(['a', 'b']))\n    False\n    >>> is_complex_dtype(pd.Series([1, 2]))\n    False\n    >>> is_complex_dtype(np.array([1 + 1j, 5]))\n    True\n    \"\"\"\n    return _is_dtype_type(arr_or_dtype, classes(np.complexfloating))",
        "begin_line": 1517,
        "end_line": 1546,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007374631268436578,
            "pseudo_dstar_susp": 0.0019157088122605363,
            "pseudo_tarantula_susp": 0.000691085003455425,
            "pseudo_op2_susp": 0.0019157088122605363,
            "pseudo_barinel_susp": 0.000691085003455425
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype#1549",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype(arr_or_dtype, condition)",
        "snippet": "def _is_dtype(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like, str, np.dtype, or ExtensionArrayType\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtype]]\n\n    Returns\n    -------\n    bool\n\n    \"\"\"\n    if arr_or_dtype is None:\n        return False\n    try:\n        dtype = _get_dtype(arr_or_dtype)\n    except (TypeError, ValueError, UnicodeEncodeError):\n        return False\n    return condition(dtype)",
        "begin_line": 1549,
        "end_line": 1570,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.0016722408026755853,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0016722408026755853,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.dtypes.common._get_dtype#1573",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._get_dtype(arr_or_dtype)",
        "snippet": "def _get_dtype(arr_or_dtype) -> DtypeObj:\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError(\"Cannot deduce dtype from null object\")\n\n    # fastpath\n    elif isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n\n    # if we have an array-like\n    elif hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    return pandas_dtype(arr_or_dtype)",
        "begin_line": 1573,
        "end_line": 1605,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006680026720106881,
            "pseudo_dstar_susp": 0.0017421602787456446,
            "pseudo_tarantula_susp": 0.0006353240152477764,
            "pseudo_op2_susp": 0.0017421602787456446,
            "pseudo_barinel_susp": 0.0006353240152477764
        }
    },
    {
        "name": "pandas.core.dtypes.common._is_dtype_type#1608",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common._is_dtype_type(arr_or_dtype, condition)",
        "snippet": "def _is_dtype_type(arr_or_dtype, condition) -> bool:\n    \"\"\"\n    Return a boolean if the condition is satisfied for the arr_or_dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : array-like\n        The array-like or dtype object whose dtype we want to extract.\n    condition : callable[Union[np.dtype, ExtensionDtypeType]]\n\n    Returns\n    -------\n    bool : if the condition is satisfied for the arr_or_dtype\n    \"\"\"\n    if arr_or_dtype is None:\n        return condition(type(None))\n\n    # fastpath\n    if isinstance(arr_or_dtype, np.dtype):\n        return condition(arr_or_dtype.type)\n    elif isinstance(arr_or_dtype, type):\n        if issubclass(arr_or_dtype, ExtensionDtype):\n            arr_or_dtype = arr_or_dtype.type\n        return condition(np.dtype(arr_or_dtype).type)\n\n    # if we have an array-like\n    if hasattr(arr_or_dtype, \"dtype\"):\n        arr_or_dtype = arr_or_dtype.dtype\n\n    # we are not possibly a dtype\n    elif is_list_like(arr_or_dtype):\n        return condition(type(None))\n\n    try:\n        tipo = pandas_dtype(arr_or_dtype).type\n    except (TypeError, ValueError, UnicodeEncodeError):\n        if is_scalar(arr_or_dtype):\n            return condition(type(None))\n\n        return False\n\n    return condition(tipo)",
        "begin_line": 1608,
        "end_line": 1649,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010131712259371835,
            "pseudo_dstar_susp": 0.0018181818181818182,
            "pseudo_tarantula_susp": 0.0010384215991692627,
            "pseudo_op2_susp": 0.0018181818181818182,
            "pseudo_barinel_susp": 0.0010384215991692627
        }
    },
    {
        "name": "pandas.core.dtypes.common.pandas_dtype#1741",
        "src_path": "pandas/core/dtypes/common.py",
        "class_name": "pandas.core.dtypes.common",
        "signature": "pandas.core.dtypes.common.pandas_dtype(dtype)",
        "snippet": "def pandas_dtype(dtype) -> DtypeObj:\n    \"\"\"\n    Convert input into a pandas only dtype object or a numpy dtype object.\n\n    Parameters\n    ----------\n    dtype : object to be converted\n\n    Returns\n    -------\n    np.dtype or a pandas dtype\n\n    Raises\n    ------\n    TypeError if not a dtype\n    \"\"\"\n    # short-circuit\n    if isinstance(dtype, np.ndarray):\n        return dtype.dtype\n    elif isinstance(dtype, (np.dtype, ExtensionDtype)):\n        return dtype\n\n    # registered extension types\n    result = registry.find(dtype)\n    if result is not None:\n        return result\n\n    # try a numpy dtype\n    # raise a consistent TypeError if failed\n    try:\n        npdtype = np.dtype(dtype)\n    except SyntaxError as err:\n        # np.dtype uses `eval` which can raise SyntaxError\n        raise TypeError(f\"data type '{dtype}' not understood\") from err\n\n    # Any invalid dtype (such as pd.Timestamp) should raise an error.\n    # np.dtype(invalid_type).kind = 0 for such objects. However, this will\n    # also catch some valid dtypes such as object, np.object_ and 'object'\n    # which we safeguard against by catching them earlier and returning\n    # np.dtype(valid_dtype) before this condition is evaluated.\n    if is_hashable(dtype) and dtype in [object, np.object_, \"object\", \"O\"]:\n        # check hashability to avoid errors/DeprecationWarning when we get\n        # here and `dtype` is an array\n        return npdtype\n    elif npdtype.kind == \"O\":\n        raise TypeError(f\"dtype '{dtype}' not understood\")\n\n    return npdtype",
        "begin_line": 1741,
        "end_line": 1788,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.005263157894736842,
            "pseudo_dstar_susp": 0.002304147465437788,
            "pseudo_tarantula_susp": 0.003472222222222222,
            "pseudo_op2_susp": 0.002304147465437788,
            "pseudo_barinel_susp": 0.003472222222222222
        }
    },
    {
        "name": "pandas.compat.__init__.is_platform_windows#51",
        "src_path": "pandas/compat/__init__.py",
        "class_name": "pandas.compat.__init__",
        "signature": "pandas.compat.__init__.is_platform_windows()",
        "snippet": "def is_platform_windows() -> bool:\n    \"\"\"\n    Checking if the running platform is windows.\n\n    Returns\n    -------\n    bool\n        True if the running platform is windows.\n    \"\"\"\n    return sys.platform == \"win32\" or sys.platform == \"cygwin\"",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.construction.array#57",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.array(data: Sequence[object], dtype: Optional[Union[str, np.dtype, ExtensionDtype]]=None, copy: bool=True)",
        "snippet": "def array(\n    data: Sequence[object],\n    dtype: Optional[Union[str, np.dtype, ExtensionDtype]] = None,\n    copy: bool = True,\n) -> ABCExtensionArray:\n    \"\"\"\n    Create an array.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    data : Sequence of objects\n        The scalars inside `data` should be instances of the\n        scalar type for `dtype`. It's expected that `data`\n        represents a 1-dimensional array of data.\n\n        When `data` is an Index or Series, the underlying array\n        will be extracted from `data`.\n\n    dtype : str, np.dtype, or ExtensionDtype, optional\n        The dtype to use for the array. This may be a NumPy\n        dtype or an extension type registered with pandas using\n        :meth:`pandas.api.extensions.register_extension_dtype`.\n\n        If not specified, there are two possibilities:\n\n        1. When `data` is a :class:`Series`, :class:`Index`, or\n           :class:`ExtensionArray`, the `dtype` will be taken\n           from the data.\n        2. Otherwise, pandas will attempt to infer the `dtype`\n           from the data.\n\n        Note that when `data` is a NumPy array, ``data.dtype`` is\n        *not* used for inferring the array type. This is because\n        NumPy cannot represent all the types of data that can be\n        held in extension arrays.\n\n        Currently, pandas will infer an extension dtype for sequences of\n\n        ============================== =====================================\n        Scalar Type                    Array Type\n        ============================== =====================================\n        :class:`pandas.Interval`       :class:`pandas.arrays.IntervalArray`\n        :class:`pandas.Period`         :class:`pandas.arrays.PeriodArray`\n        :class:`datetime.datetime`     :class:`pandas.arrays.DatetimeArray`\n        :class:`datetime.timedelta`    :class:`pandas.arrays.TimedeltaArray`\n        :class:`int`                   :class:`pandas.arrays.IntegerArray`\n        :class:`str`                   :class:`pandas.arrays.StringArray`\n        :class:`bool`                  :class:`pandas.arrays.BooleanArray`\n        ============================== =====================================\n\n        For all other cases, NumPy's usual inference rules will be used.\n\n        .. versionchanged:: 1.0.0\n\n           Pandas infers nullable-integer dtype for integer data,\n           string dtype for string data, and nullable-boolean dtype\n           for boolean data.\n\n    copy : bool, default True\n        Whether to copy the data, even if not necessary. Depending\n        on the type of `data`, creating the new array may require\n        copying data, even if ``copy=False``.\n\n    Returns\n    -------\n    ExtensionArray\n        The newly created array.\n\n    Raises\n    ------\n    ValueError\n        When `data` is not 1-dimensional.\n\n    See Also\n    --------\n    numpy.array : Construct a NumPy array.\n    Series : Construct a pandas Series.\n    Index : Construct a pandas Index.\n    arrays.PandasArray : ExtensionArray wrapping a NumPy array.\n    Series.array : Extract the array stored within a Series.\n\n    Notes\n    -----\n    Omitting the `dtype` argument means pandas will attempt to infer the\n    best array type from the values in the data. As new array types are\n    added by pandas and 3rd party libraries, the \"best\" array type may\n    change. We recommend specifying `dtype` to ensure that\n\n    1. the correct array type for the data is returned\n    2. the returned array type doesn't change as new extension types\n       are added by pandas and third-party libraries\n\n    Additionally, if the underlying memory representation of the returned\n    array matters, we recommend specifying the `dtype` as a concrete object\n    rather than a string alias or allowing it to be inferred. For example,\n    a future version of pandas or a 3rd-party library may include a\n    dedicated ExtensionArray for string data. In this event, the following\n    would no longer return a :class:`arrays.PandasArray` backed by a NumPy\n    array.\n\n    >>> pd.array(['a', 'b'], dtype=str)\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    This would instead return the new ExtensionArray dedicated for string\n    data. If you really need the new array to be backed by a  NumPy array,\n    specify that in the dtype.\n\n    >>> pd.array(['a', 'b'], dtype=np.dtype(\"<U1\"))\n    <PandasArray>\n    ['a', 'b']\n    Length: 2, dtype: str32\n\n    Finally, Pandas has arrays that mostly overlap with NumPy\n\n      * :class:`arrays.DatetimeArray`\n      * :class:`arrays.TimedeltaArray`\n\n    When data with a ``datetime64[ns]`` or ``timedelta64[ns]`` dtype is\n    passed, pandas will always return a ``DatetimeArray`` or ``TimedeltaArray``\n    rather than a ``PandasArray``. This is for symmetry with the case of\n    timezone-aware data, which NumPy does not natively support.\n\n    >>> pd.array(['2015', '2016'], dtype='datetime64[ns]')\n    <DatetimeArray>\n    ['2015-01-01 00:00:00', '2016-01-01 00:00:00']\n    Length: 2, dtype: datetime64[ns]\n\n    >>> pd.array([\"1H\", \"2H\"], dtype='timedelta64[ns]')\n    <TimedeltaArray>\n    ['01:00:00', '02:00:00']\n    Length: 2, dtype: timedelta64[ns]\n\n    Examples\n    --------\n    If a dtype is not specified, pandas will infer the best dtype from the values.\n    See the description of `dtype` for the types pandas infers for.\n\n    >>> pd.array([1, 2])\n    <IntegerArray>\n    [1, 2]\n    Length: 2, dtype: Int64\n\n    >>> pd.array([1, 2, np.nan])\n    <IntegerArray>\n    [1, 2, <NA>]\n    Length: 3, dtype: Int64\n\n    >>> pd.array([\"a\", None, \"c\"])\n    <StringArray>\n    ['a', <NA>, 'c']\n    Length: 3, dtype: string\n\n    >>> pd.array([pd.Period('2000', freq=\"D\"), pd.Period(\"2000\", freq=\"D\")])\n    <PeriodArray>\n    ['2000-01-01', '2000-01-01']\n    Length: 2, dtype: period[D]\n\n    You can use the string alias for `dtype`\n\n    >>> pd.array(['a', 'b', 'a'], dtype='category')\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    Or specify the actual dtype\n\n    >>> pd.array(['a', 'b', 'a'],\n    ...          dtype=pd.CategoricalDtype(['a', 'b', 'c'], ordered=True))\n    [a, b, a]\n    Categories (3, object): [a < b < c]\n\n    If pandas does not infer a dedicated extension type a\n    :class:`arrays.PandasArray` is returned.\n\n    >>> pd.array([1.1, 2.2])\n    <PandasArray>\n    [1.1, 2.2]\n    Length: 2, dtype: float64\n\n    As mentioned in the \"Notes\" section, new extension types may be added\n    in the future (by pandas or 3rd party libraries), causing the return\n    value to no longer be a :class:`arrays.PandasArray`. Specify the `dtype`\n    as a NumPy dtype if you need to ensure there's no future change in\n    behavior.\n\n    >>> pd.array([1, 2], dtype=np.dtype(\"int32\"))\n    <PandasArray>\n    [1, 2]\n    Length: 2, dtype: int32\n\n    `data` must be 1-dimensional. A ValueError is raised when the input\n    has the wrong dimensionality.\n\n    >>> pd.array(1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot pass scalar '1' to 'pandas.array'.\n    \"\"\"\n    from pandas.core.arrays import (\n        period_array,\n        BooleanArray,\n        IntegerArray,\n        IntervalArray,\n        PandasArray,\n        DatetimeArray,\n        TimedeltaArray,\n        StringArray,\n    )\n\n    if lib.is_scalar(data):\n        msg = f\"Cannot pass scalar '{data}' to 'pandas.array'.\"\n        raise ValueError(msg)\n\n    if dtype is None and isinstance(\n        data, (ABCSeries, ABCIndexClass, ABCExtensionArray)\n    ):\n        dtype = data.dtype\n\n    data = extract_array(data, extract_numpy=True)\n\n    # this returns None for not-found dtypes.\n    if isinstance(dtype, str):\n        dtype = registry.find(dtype) or dtype\n\n    if is_extension_array_dtype(dtype):\n        cls = cast(ExtensionDtype, dtype).construct_array_type()\n        return cls._from_sequence(data, dtype=dtype, copy=copy)\n\n    if dtype is None:\n        inferred_dtype = lib.infer_dtype(data, skipna=True)\n        if inferred_dtype == \"period\":\n            try:\n                return period_array(data, copy=copy)\n            except IncompatibleFrequency:\n                # We may have a mixture of frequencies.\n                # We choose to return an ndarray, rather than raising.\n                pass\n        elif inferred_dtype == \"interval\":\n            try:\n                return IntervalArray(data, copy=copy)\n            except ValueError:\n                # We may have a mixture of `closed` here.\n                # We choose to return an ndarray, rather than raising.\n                pass\n\n        elif inferred_dtype.startswith(\"datetime\"):\n            # datetime, datetime64\n            try:\n                return DatetimeArray._from_sequence(data, copy=copy)\n            except ValueError:\n                # Mixture of timezones, fall back to PandasArray\n                pass\n\n        elif inferred_dtype.startswith(\"timedelta\"):\n            # timedelta, timedelta64\n            return TimedeltaArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"string\":\n            return StringArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"integer\":\n            return IntegerArray._from_sequence(data, copy=copy)\n\n        elif inferred_dtype == \"boolean\":\n            return BooleanArray._from_sequence(data, copy=copy)\n\n    # Pandas overrides NumPy for\n    #   1. datetime64[ns]\n    #   2. timedelta64[ns]\n    # so that a DatetimeArray is returned.\n    if is_datetime64_ns_dtype(dtype):\n        return DatetimeArray._from_sequence(data, dtype=dtype, copy=copy)\n    elif is_timedelta64_ns_dtype(dtype):\n        return TimedeltaArray._from_sequence(data, dtype=dtype, copy=copy)\n\n    result = PandasArray._from_sequence(data, dtype=dtype, copy=copy)\n    return result",
        "begin_line": 57,
        "end_line": 336,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0032258064516129032,
            "pseudo_dstar_susp": 0.0006101281269066504,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0006101281269066504,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.construction.extract_array#339",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.extract_array(obj, extract_numpy: bool=False)",
        "snippet": "def extract_array(obj, extract_numpy: bool = False):\n    \"\"\"\n    Extract the ndarray or ExtensionArray from a Series or Index.\n\n    For all other types, `obj` is just returned as is.\n\n    Parameters\n    ----------\n    obj : object\n        For Series / Index, the underlying ExtensionArray is unboxed.\n        For Numpy-backed ExtensionArrays, the ndarray is extracted.\n\n    extract_numpy : bool, default False\n        Whether to extract the ndarray from a PandasArray\n\n    Returns\n    -------\n    arr : object\n\n    Examples\n    --------\n    >>> extract_array(pd.Series(['a', 'b', 'c'], dtype='category'))\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Other objects like lists, arrays, and DataFrames are just passed through.\n\n    >>> extract_array([1, 2, 3])\n    [1, 2, 3]\n\n    For an ndarray-backed Series / Index a PandasArray is returned.\n\n    >>> extract_array(pd.Series([1, 2, 3]))\n    <PandasArray>\n    [1, 2, 3]\n    Length: 3, dtype: int64\n\n    To extract all the way down to the ndarray, pass ``extract_numpy=True``.\n\n    >>> extract_array(pd.Series([1, 2, 3]), extract_numpy=True)\n    array([1, 2, 3])\n    \"\"\"\n    if isinstance(obj, (ABCIndexClass, ABCSeries)):\n        obj = obj.array\n\n    if extract_numpy and isinstance(obj, ABCPandasArray):\n        obj = obj.to_numpy()\n\n    return obj",
        "begin_line": 339,
        "end_line": 387,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008176614881439084,
            "pseudo_dstar_susp": 0.002178649237472767,
            "pseudo_tarantula_susp": 0.0007564296520423601,
            "pseudo_op2_susp": 0.002178649237472767,
            "pseudo_barinel_susp": 0.0007564296520423601
        }
    },
    {
        "name": "pandas.core.construction.sanitize_array#390",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.sanitize_array(data, index, dtype=None, copy: bool=False, raise_cast_failure: bool=False)",
        "snippet": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n\n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n\n    # GH#846\n    if isinstance(data, np.ndarray):\n\n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n\n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n\n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n\n        subarr = maybe_cast_to_datetime(subarr, dtype)\n\n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    elif isinstance(data, abc.Set):\n        raise TypeError(\"Set type is unordered\")\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n\n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, list):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n        elif index is not None:\n            value = data\n\n            # figure out the dtype from the value (upcast if necessary)\n            if dtype is None:\n                dtype, value = infer_dtype_from_scalar(value)\n            else:\n                # need to possibly convert the value here\n                value = maybe_cast_to_datetime(value, dtype)\n\n            subarr = construct_1d_arraylike_from_scalar(value, len(index), dtype)\n\n        else:\n            return subarr.item()\n\n    # the result that we want\n    elif subarr.ndim == 1:\n        if index is not None:\n\n            # a 1-element ndarray\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = construct_1d_arraylike_from_scalar(\n                    subarr[0], len(index), subarr.dtype\n                )\n\n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=dtype)\n\n    if not (is_extension_array_dtype(subarr.dtype) or is_extension_array_dtype(dtype)):\n        # This is to prevent mixed-type Series getting all casted to\n        # NumPy string type, e.g. NaN --> '-1#IND'.\n        if issubclass(subarr.dtype.type, str):\n            # GH#16605\n            # If not empty convert the data to dtype\n            # GH#19853: If data is a scalar, subarr has already the result\n            if not lib.is_scalar(data):\n                if not np.all(isna(data)):\n                    data = np.array(data, dtype=dtype, copy=False)\n                subarr = np.array(data, dtype=object, copy=copy)\n\n        if is_object_dtype(subarr.dtype) and not is_object_dtype(dtype):\n            inferred = lib.infer_dtype(subarr, skipna=False)\n            if inferred in {\"interval\", \"period\"}:\n                subarr = array(subarr)\n\n    return subarr",
        "begin_line": 390,
        "end_line": 507,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.002012072434607646,
            "pseudo_dstar_susp": 0.004310344827586207,
            "pseudo_tarantula_susp": 0.0019047619047619048,
            "pseudo_op2_susp": 0.004310344827586207,
            "pseudo_barinel_susp": 0.0019047619047619048
        }
    },
    {
        "name": "pandas.core.construction._try_cast#510",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction._try_cast(arr, dtype: Optional[Union[np.dtype, 'ExtensionDtype']], copy: bool, raise_cast_failure: bool)",
        "snippet": "def _try_cast(\n    arr,\n    dtype: Optional[Union[np.dtype, \"ExtensionDtype\"]],\n    copy: bool,\n    raise_cast_failure: bool,\n):\n    \"\"\"\n    Convert input to numpy ndarray and optionally cast to a given dtype.\n\n    Parameters\n    ----------\n    arr : ndarray, list, tuple, iterator (catchall)\n        Excludes: ExtensionArray, Series, Index.\n    dtype : np.dtype, ExtensionDtype or None\n    copy : bool\n        If False, don't copy the data if not needed.\n    raise_cast_failure : bool\n        If True, and if a dtype is specified, raise errors during casting.\n        Otherwise an object array is returned.\n    \"\"\"\n    # perf shortcut as this is the most common case\n    if isinstance(arr, np.ndarray):\n        if maybe_castable(arr) and not copy and dtype is None:\n            return arr\n\n    try:\n        # GH#15832: Check if we are requesting a numeric dype and\n        # that we can convert the data to the requested dtype.\n        if is_integer_dtype(dtype):\n            subarr = maybe_cast_to_integer_array(arr, dtype)\n\n        subarr = maybe_cast_to_datetime(arr, dtype)\n        # Take care in creating object arrays (but iterators are not\n        # supported):\n        if is_object_dtype(dtype) and (\n            is_list_like(subarr)\n            and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))\n        ):\n            subarr = construct_1d_object_array_from_listlike(subarr)\n        elif not is_extension_array_dtype(subarr):\n            subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)\n    except OutOfBoundsDatetime:\n        # in case of out of bound datetime64 -> always raise\n        raise\n    except (ValueError, TypeError):\n        if is_categorical_dtype(dtype):\n            # We *do* allow casting to categorical, since we know\n            # that Categorical is the only array type for 'category'.\n            dtype = cast(CategoricalDtype, dtype)\n            subarr = dtype.construct_array_type()(\n                arr, dtype.categories, ordered=dtype.ordered\n            )\n        elif is_extension_array_dtype(dtype):\n            # create an extension array from its dtype\n            dtype = cast(ExtensionDtype, dtype)\n            array_type = dtype.construct_array_type()._from_sequence\n            subarr = array_type(arr, dtype=dtype, copy=copy)\n        elif dtype is not None and raise_cast_failure:\n            raise\n        else:\n            subarr = np.array(arr, dtype=object, copy=copy)\n    return subarr",
        "begin_line": 510,
        "end_line": 571,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.047619047619047616,
            "pseudo_dstar_susp": 0.0015174506828528073,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0015174506828528073,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.construction.is_empty_data#574",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.is_empty_data(data: Any)",
        "snippet": "def is_empty_data(data: Any) -> bool:\n    \"\"\"\n    Utility to check if a Series is instantiated with empty data,\n    which does not contain dtype information.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    is_none = data is None\n    is_list_like_without_dtype = is_list_like(data) and not hasattr(data, \"dtype\")\n    is_simple_empty = is_list_like_without_dtype and not data\n    return is_none or is_simple_empty",
        "begin_line": 574,
        "end_line": 591,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006138735420503376,
            "pseudo_dstar_susp": 0.0006357279084551812,
            "pseudo_tarantula_susp": 0.0006743088334457181,
            "pseudo_op2_susp": 0.0006357279084551812,
            "pseudo_barinel_susp": 0.0006743088334457181
        }
    },
    {
        "name": "pandas.core.construction.create_series_with_explicit_dtype#594",
        "src_path": "pandas/core/construction.py",
        "class_name": "pandas.core.construction",
        "signature": "pandas.core.construction.create_series_with_explicit_dtype(data: Any=None, index: Optional[Union[ArrayLike, 'Index']]=None, dtype: Optional[Dtype]=None, name: Optional[str]=None, copy: bool=False, fastpath: bool=False, dtype_if_empty: Dtype=object)",
        "snippet": "def create_series_with_explicit_dtype(\n    data: Any = None,\n    index: Optional[Union[ArrayLike, \"Index\"]] = None,\n    dtype: Optional[Dtype] = None,\n    name: Optional[str] = None,\n    copy: bool = False,\n    fastpath: bool = False,\n    dtype_if_empty: Dtype = object,\n) -> \"Series\":\n    \"\"\"\n    Helper to pass an explicit dtype when instantiating an empty Series.\n\n    This silences a DeprecationWarning described in GitHub-17261.\n\n    Parameters\n    ----------\n    data : Mirrored from Series.__init__\n    index : Mirrored from Series.__init__\n    dtype : Mirrored from Series.__init__\n    name : Mirrored from Series.__init__\n    copy : Mirrored from Series.__init__\n    fastpath : Mirrored from Series.__init__\n    dtype_if_empty : str, numpy.dtype, or ExtensionDtype\n        This dtype will be passed explicitly if an empty Series will\n        be instantiated.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.series import Series\n\n    if is_empty_data(data) and dtype is None:\n        dtype = dtype_if_empty\n    return Series(\n        data=data, index=index, dtype=dtype, name=name, copy=copy, fastpath=fastpath\n    )",
        "begin_line": 594,
        "end_line": 630,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.assert_almost_equal#280",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_almost_equal(left, right, check_dtype: Union[bool, str]='equiv', check_less_precise: Union[bool, int]=False, **kwargs)",
        "snippet": "def assert_almost_equal(\n    left,\n    right,\n    check_dtype: Union[bool, str] = \"equiv\",\n    check_less_precise: Union[bool, int] = False,\n    **kwargs,\n):\n    \"\"\"\n    Check that the left and right objects are approximately equal.\n\n    By approximately equal, we refer to objects that are numbers or that\n    contain numbers which may be equivalent to specific levels of precision.\n\n    Parameters\n    ----------\n    left : object\n    right : object\n    check_dtype : bool or {'equiv'}, default 'equiv'\n        Check dtype if both a and b are the same type. If 'equiv' is passed in,\n        then `RangeIndex` and `Int64Index` are also considered equivalent\n        when doing type checking.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. 5 digits (False) or 3 digits (True)\n        after decimal points are compared. If int, then specify the number\n        of digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    \"\"\"\n    if isinstance(left, pd.Index):\n        assert_index_equal(\n            left,\n            right,\n            check_exact=False,\n            exact=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.Series):\n        assert_series_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    elif isinstance(left, pd.DataFrame):\n        assert_frame_equal(\n            left,\n            right,\n            check_exact=False,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )\n\n    else:\n        # Other sequences.\n        if check_dtype:\n            if is_number(left) and is_number(right):\n                # Do not compare numeric classes, like np.float64 and float.\n                pass\n            elif is_bool(left) and is_bool(right):\n                # Do not compare bool classes, like np.bool_ and bool.\n                pass\n            else:\n                if isinstance(left, np.ndarray) or isinstance(right, np.ndarray):\n                    obj = \"numpy array\"\n                else:\n                    obj = \"Input\"\n                assert_class_equal(left, right, obj=obj)\n        _testing.assert_almost_equal(\n            left,\n            right,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            **kwargs,\n        )",
        "begin_line": 280,
        "end_line": 363,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing._check_isinstance#366",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing._check_isinstance(left, right, cls)",
        "snippet": "def _check_isinstance(left, right, cls):\n    \"\"\"\n    Helper method for our assert_* methods that ensures that\n    the two objects being compared have the right type before\n    proceeding with the comparison.\n\n    Parameters\n    ----------\n    left : The first object being compared.\n    right : The second object being compared.\n    cls : The class type to check against.\n\n    Raises\n    ------\n    AssertionError : Either `left` or `right` is not an instance of `cls`.\n    \"\"\"\n    cls_name = cls.__name__\n\n    if not isinstance(left, cls):\n        raise AssertionError(\n            f\"{cls_name} Expected type {cls}, found {type(left)} instead\"\n        )\n    if not isinstance(right, cls):\n        raise AssertionError(\n            f\"{cls_name} Expected type {cls}, found {type(right)} instead\"\n        )",
        "begin_line": 366,
        "end_line": 391,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.0018552875695732839,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.0018552875695732839,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas._testing.rands_array#411",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.rands_array(nchars, size, dtype='O')",
        "snippet": "def rands_array(nchars, size, dtype=\"O\"):\n    \"\"\"\n    Generate an array of byte strings.\n    \"\"\"\n    retval = (\n        np.random.choice(RANDS_CHARS, size=nchars * np.prod(size))\n        .view((np.str_, nchars))\n        .reshape(size)\n    )\n    return retval.astype(dtype)",
        "begin_line": 411,
        "end_line": 420,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.rands#435",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.rands(nchars)",
        "snippet": "def rands(nchars):\n    \"\"\"\n    Generate one random byte string.\n\n    See `rands_array` if you want to create an array of random strings.\n\n    \"\"\"\n    return \"\".join(np.random.choice(RANDS_CHARS, nchars))",
        "begin_line": 435,
        "end_line": 442,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.ensure_clean_dir#523",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.ensure_clean_dir()",
        "snippet": "def ensure_clean_dir():\n    \"\"\"\n    Get a temporary directory path and agrees to remove on close.\n\n    Yields\n    ------\n    Temporary directory path\n    \"\"\"\n    directory_name = tempfile.mkdtemp(suffix=\"\")\n    try:\n        yield directory_name\n    finally:\n        try:\n            rmtree(directory_name)\n        except OSError:\n            pass",
        "begin_line": 523,
        "end_line": 538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.assert_index_equal#568",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_index_equal(left: Index, right: Index, exact: Union[bool, str]='equiv', check_names: bool=True, check_less_precise: Union[bool, int]=False, check_exact: bool=True, check_categorical: bool=True, obj: str='Index')",
        "snippet": "def assert_index_equal(\n    left: Index,\n    right: Index,\n    exact: Union[bool, str] = \"equiv\",\n    check_names: bool = True,\n    check_less_precise: Union[bool, int] = False,\n    check_exact: bool = True,\n    check_categorical: bool = True,\n    obj: str = \"Index\",\n) -> None:\n    \"\"\"\n    Check that left and right Index are equal.\n\n    Parameters\n    ----------\n    left : Index\n    right : Index\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    check_names : bool, default True\n        Whether to check the names attribute.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default True\n        Whether to compare number exactly.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    obj : str, default 'Index'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\"):\n                assert r.inferred_type in (\"string\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)\n\n    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        level_codes = index.codes[level]\n        filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values\n\n    # instance validation\n    _check_isinstance(left, right, Index)\n\n    # class / dtype comparison\n    _check_types(left, right, obj=obj)\n\n    # level comparison\n    if left.nlevels != right.nlevels:\n        msg1 = f\"{obj} levels are different\"\n        msg2 = f\"{left.nlevels}, {left}\"\n        msg3 = f\"{right.nlevels}, {right}\"\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{obj} length are different\"\n        msg2 = f\"{len(left)}, {left}\"\n        msg3 = f\"{len(right)}, {right}\"\n        raise_assert_detail(obj, msg1, msg2, msg3)\n\n    # MultiIndex special comparison for little-friendly error messages\n    if left.nlevels > 1:\n        left = cast(MultiIndex, left)\n        right = cast(MultiIndex, right)\n\n        for level in range(left.nlevels):\n            # cannot use get_level_values here because it can change dtype\n            llevel = _get_ilevel_values(left, level)\n            rlevel = _get_ilevel_values(right, level)\n\n            lobj = f\"MultiIndex level [{level}]\"\n            assert_index_equal(\n                llevel,\n                rlevel,\n                exact=exact,\n                check_names=check_names,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                obj=lobj,\n            )\n            # get_level_values may change dtype\n            _check_types(left.levels[level], right.levels[level], obj=obj)\n\n    # skip exact index checking when `check_categorical` is False\n    if check_exact and check_categorical:\n        if not left.equals(right):\n            diff = np.sum((left.values != right.values).astype(int)) * 100.0 / len(left)\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n            raise_assert_detail(obj, msg, left, right)\n    else:\n        _testing.assert_almost_equal(\n            left.values,\n            right.values,\n            check_less_precise=check_less_precise,\n            check_dtype=exact,\n            obj=obj,\n            lobj=left,\n            robj=right,\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"names\", left, right, obj=obj)\n    if isinstance(left, pd.PeriodIndex) or isinstance(right, pd.PeriodIndex):\n        assert_attr_equal(\"freq\", left, right, obj=obj)\n    if isinstance(left, pd.IntervalIndex) or isinstance(right, pd.IntervalIndex):\n        assert_interval_array_equal(left._values, right._values)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(left._values, right._values, obj=f\"{obj} category\")",
        "begin_line": 568,
        "end_line": 697,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008904719501335708,
            "pseudo_dstar_susp": 0.0027472527472527475,
            "pseudo_tarantula_susp": 0.0008496176720475786,
            "pseudo_op2_susp": 0.0027472527472527475,
            "pseudo_barinel_susp": 0.0008496176720475786
        }
    },
    {
        "name": "pandas._testing._check_types#605",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing._check_types(l, r, obj='Index')",
        "snippet": "    def _check_types(l, r, obj=\"Index\"):\n        if exact:\n            assert_class_equal(l, r, exact=exact, obj=obj)\n\n            # Skip exact dtype checking when `check_categorical` is False\n            if check_categorical:\n                assert_attr_equal(\"dtype\", l, r, obj=obj)\n\n            # allow string-like to have different inferred_types\n            if l.inferred_type in (\"string\"):\n                assert r.inferred_type in (\"string\")\n            else:\n                assert_attr_equal(\"inferred_type\", l, r, obj=obj)",
        "begin_line": 605,
        "end_line": 617,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012224938875305623,
            "pseudo_dstar_susp": 0.2,
            "pseudo_tarantula_susp": 0.0011025358324145535,
            "pseudo_op2_susp": 0.2,
            "pseudo_barinel_susp": 0.0011025358324145535
        }
    },
    {
        "name": "pandas._testing._get_ilevel_values#619",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing._get_ilevel_values(index, level)",
        "snippet": "    def _get_ilevel_values(index, level):\n        # accept level number only\n        unique = index.levels[level]\n        level_codes = index.codes[level]\n        filled = take_1d(unique._values, level_codes, fill_value=unique._na_value)\n        values = unique._shallow_copy(filled, name=index.names[level])\n        return values",
        "begin_line": 619,
        "end_line": 625,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007867820613690008,
            "pseudo_dstar_susp": 0.002070393374741201,
            "pseudo_tarantula_susp": 0.0007251631617113851,
            "pseudo_op2_susp": 0.002070393374741201,
            "pseudo_barinel_susp": 0.0007251631617113851
        }
    },
    {
        "name": "pandas._testing.assert_class_equal#700",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_class_equal(left, right, exact: Union[bool, str]=True, obj='Input')",
        "snippet": "def assert_class_equal(left, right, exact: Union[bool, str] = True, obj=\"Input\"):\n    \"\"\"\n    Checks classes are equal.\n    \"\"\"\n    __tracebackhide__ = True\n\n    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        return type(x).__name__\n\n    if exact == \"equiv\":\n        if type(left) != type(right):\n            # allow equivalence of Int64Index/RangeIndex\n            types = {type(left).__name__, type(right).__name__}\n            if len(types - {\"Int64Index\", \"RangeIndex\"}):\n                msg = f\"{obj} classes are not equivalent\"\n                raise_assert_detail(obj, msg, repr_class(left), repr_class(right))\n    elif exact:\n        if type(left) != type(right):\n            msg = f\"{obj} classes are different\"\n            raise_assert_detail(obj, msg, repr_class(left), repr_class(right))",
        "begin_line": 700,
        "end_line": 723,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008237232289950577,
            "pseudo_dstar_susp": 0.0022222222222222222,
            "pseudo_tarantula_susp": 0.0007662835249042146,
            "pseudo_op2_susp": 0.0022222222222222222,
            "pseudo_barinel_susp": 0.0007662835249042146
        }
    },
    {
        "name": "pandas._testing.repr_class#706",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.repr_class(x)",
        "snippet": "    def repr_class(x):\n        if isinstance(x, Index):\n            # return Index as it is to include values in the error message\n            return x\n\n        return type(x).__name__",
        "begin_line": 706,
        "end_line": 711,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006540222367560497,
            "pseudo_dstar_susp": 0.0016863406408094434,
            "pseudo_tarantula_susp": 0.0006253908692933083,
            "pseudo_op2_susp": 0.0016863406408094434,
            "pseudo_barinel_susp": 0.0006253908692933083
        }
    },
    {
        "name": "pandas._testing.assert_attr_equal#726",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_attr_equal(attr: str, left, right, obj: str='Attributes')",
        "snippet": "def assert_attr_equal(attr: str, left, right, obj: str = \"Attributes\"):\n    \"\"\"\n    Check attributes are equal. Both objects must have attribute.\n\n    Parameters\n    ----------\n    attr : str\n        Attribute name being compared.\n    left : object\n    right : object\n    obj : str, default 'Attributes'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    __tracebackhide__ = True\n\n    left_attr = getattr(left, attr)\n    right_attr = getattr(right, attr)\n\n    if left_attr is right_attr:\n        return True\n    elif (\n        is_number(left_attr)\n        and np.isnan(left_attr)\n        and is_number(right_attr)\n        and np.isnan(right_attr)\n    ):\n        # np.nan\n        return True\n\n    try:\n        result = left_attr == right_attr\n    except TypeError:\n        # datetimetz on rhs may raise TypeError\n        result = False\n    if not isinstance(result, bool):\n        result = result.all()\n\n    if result:\n        return True\n    else:\n        msg = f'Attribute \"{attr}\" are different'\n        raise_assert_detail(obj, msg, left_attr, right_attr)",
        "begin_line": 726,
        "end_line": 768,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008368200836820083,
            "pseudo_dstar_susp": 0.002320185614849188,
            "pseudo_tarantula_susp": 0.00078125,
            "pseudo_op2_susp": 0.002320185614849188,
            "pseudo_barinel_susp": 0.00078125
        }
    },
    {
        "name": "pandas._testing.assert_categorical_equal#798",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_categorical_equal(left, right, check_dtype=True, check_category_order=True, obj='Categorical')",
        "snippet": "def assert_categorical_equal(\n    left, right, check_dtype=True, check_category_order=True, obj=\"Categorical\"\n):\n    \"\"\"\n    Test that Categoricals are equivalent.\n\n    Parameters\n    ----------\n    left : Categorical\n    right : Categorical\n    check_dtype : bool, default True\n        Check that integer dtype of the codes are the same\n    check_category_order : bool, default True\n        Whether the order of the categories should be compared, which\n        implies identical integer codes.  If False, only the resulting\n        values are compared.  The ordered attribute is\n        checked regardless.\n    obj : str, default 'Categorical'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, Categorical)\n\n    if check_category_order:\n        assert_index_equal(left.categories, right.categories, obj=f\"{obj}.categories\")\n        assert_numpy_array_equal(\n            left.codes, right.codes, check_dtype=check_dtype, obj=f\"{obj}.codes\",\n        )\n    else:\n        try:\n            lc = left.categories.sort_values()\n            rc = right.categories.sort_values()\n        except TypeError:\n            # e.g. '<' not supported between instances of 'int' and 'str'\n            lc, rc = left.categories, right.categories\n        assert_index_equal(\n            lc, rc, obj=f\"{obj}.categories\",\n        )\n        assert_index_equal(\n            left.categories.take(left.codes),\n            right.categories.take(right.codes),\n            obj=f\"{obj}.values\",\n        )\n\n    assert_attr_equal(\"ordered\", left, right, obj=obj)",
        "begin_line": 798,
        "end_line": 842,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.assert_interval_array_equal#845",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_interval_array_equal(left, right, exact='equiv', obj='IntervalArray')",
        "snippet": "def assert_interval_array_equal(left, right, exact=\"equiv\", obj=\"IntervalArray\"):\n    \"\"\"\n    Test that two IntervalArrays are equivalent.\n\n    Parameters\n    ----------\n    left, right : IntervalArray\n        The IntervalArrays to compare.\n    exact : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical. If 'equiv', then RangeIndex can be substituted for\n        Int64Index as well.\n    obj : str, default 'IntervalArray'\n        Specify object name being compared, internally used to show appropriate\n        assertion message\n    \"\"\"\n    _check_isinstance(left, right, IntervalArray)\n\n    assert_index_equal(left.left, right.left, exact=exact, obj=f\"{obj}.left\")\n    assert_index_equal(left.right, right.right, exact=exact, obj=f\"{obj}.left\")\n    assert_attr_equal(\"closed\", left, right, obj=obj)",
        "begin_line": 845,
        "end_line": 865,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0027100271002710027,
            "pseudo_dstar_susp": 0.0009784735812133072,
            "pseudo_tarantula_susp": 0.002770083102493075,
            "pseudo_op2_susp": 0.0009784735812133072,
            "pseudo_barinel_susp": 0.002770083102493075
        }
    },
    {
        "name": "pandas._testing.raise_assert_detail#891",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.raise_assert_detail(obj, message, left, right, diff=None)",
        "snippet": "def raise_assert_detail(obj, message, left, right, diff=None):\n    __tracebackhide__ = True\n\n    if isinstance(left, np.ndarray):\n        left = pprint_thing(left)\n    elif is_categorical_dtype(left):\n        left = repr(left)\n\n    if isinstance(right, np.ndarray):\n        right = pprint_thing(right)\n    elif is_categorical_dtype(right):\n        right = repr(right)\n\n    msg = f\"\"\"{obj} are different\n\n{message}\n[left]:  {left}\n[right]: {right}\"\"\"\n\n    if diff is not None:\n        msg += f\"\\n[diff]: {diff}\"\n\n    raise AssertionError(msg)",
        "begin_line": 891,
        "end_line": 913,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.assert_numpy_array_equal#916",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_numpy_array_equal(left, right, strict_nan=False, check_dtype=True, err_msg=None, check_same=None, obj='numpy array')",
        "snippet": "def assert_numpy_array_equal(\n    left,\n    right,\n    strict_nan=False,\n    check_dtype=True,\n    err_msg=None,\n    check_same=None,\n    obj=\"numpy array\",\n):\n    \"\"\"\n    Check that 'np.ndarray' is equivalent.\n\n    Parameters\n    ----------\n    left, right : numpy.ndarray or iterable\n        The two arrays to be compared.\n    strict_nan : bool, default False\n        If True, consider NaN and None to be different.\n    check_dtype : bool, default True\n        Check dtype if both a and b are np.ndarray.\n    err_msg : str, default None\n        If provided, used as assertion message.\n    check_same : None|'copy'|'same', default None\n        Ensure left and right refer/do not refer to the same memory area.\n    obj : str, default 'numpy array'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    # Show a detailed error message when classes are different\n    assert_class_equal(left, right, obj=obj)\n    # both classes must be an np.ndarray\n    _check_isinstance(left, right, np.ndarray)\n\n    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj\n\n    left_base = _get_base(left)\n    right_base = _get_base(right)\n\n    if check_same == \"same\":\n        if left_base is not right_base:\n            raise AssertionError(f\"{repr(left_base)} is not {repr(right_base)}\")\n    elif check_same == \"copy\":\n        if left_base is right_base:\n            raise AssertionError(f\"{repr(left_base)} is {repr(right_base)}\")\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)\n\n    # compare shape and values\n    if not array_equivalent(left, right, strict_nan=strict_nan):\n        _raise(left, right, err_msg)\n\n    if check_dtype:\n        if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n            assert_attr_equal(\"dtype\", left, right, obj=obj)",
        "begin_line": 916,
        "end_line": 990,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing._get_base#952",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing._get_base(obj)",
        "snippet": "    def _get_base(obj):\n        return obj.base if getattr(obj, \"base\", None) is not None else obj",
        "begin_line": 952,
        "end_line": 953,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016730801405387318,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing._raise#965",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing._raise(left, right, err_msg)",
        "snippet": "    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n\n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n\n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n            raise_assert_detail(obj, msg, left, right)\n\n        raise AssertionError(err_msg)",
        "begin_line": 965,
        "end_line": 982,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.assert_extension_array_equal#993",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_extension_array_equal(left, right, check_dtype=True, check_less_precise=False, check_exact=False)",
        "snippet": "def assert_extension_array_equal(\n    left, right, check_dtype=True, check_less_precise=False, check_exact=False\n):\n    \"\"\"\n    Check that left and right ExtensionArrays are equal.\n\n    Parameters\n    ----------\n    left, right : ExtensionArray\n        The two arrays to compare.\n    check_dtype : bool, default True\n        Whether to check if the ExtensionArray dtypes are identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n\n    Notes\n    -----\n    Missing values are checked separately from valid values.\n    A mask of missing values is computed for each and checked to match.\n    The remaining all-valid values are cast to object dtype and checked.\n    \"\"\"\n    assert isinstance(left, ExtensionArray), \"left is not an ExtensionArray\"\n    assert isinstance(right, ExtensionArray), \"right is not an ExtensionArray\"\n    if check_dtype:\n        assert_attr_equal(\"dtype\", left, right, obj=\"ExtensionArray\")\n\n    if hasattr(left, \"asi8\") and type(right) == type(left):\n        # Avoid slow object-dtype comparisons\n        # np.asarray for case where we have a np.MaskedArray\n        assert_numpy_array_equal(np.asarray(left.asi8), np.asarray(right.asi8))\n        return\n\n    left_na = np.asarray(left.isna())\n    right_na = np.asarray(right.isna())\n    assert_numpy_array_equal(left_na, right_na, obj=\"ExtensionArray NA mask\")\n\n    left_valid = np.asarray(left[~left_na].astype(object))\n    right_valid = np.asarray(right[~right_na].astype(object))\n    if check_exact:\n        assert_numpy_array_equal(left_valid, right_valid, obj=\"ExtensionArray\")\n    else:\n        _testing.assert_almost_equal(\n            left_valid,\n            right_valid,\n            check_dtype=check_dtype,\n            check_less_precise=check_less_precise,\n            obj=\"ExtensionArray\",\n        )",
        "begin_line": 993,
        "end_line": 1044,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas._testing.assert_series_equal#1048",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_less_precise=False, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_category_order=True, obj='Series')",
        "snippet": "def assert_series_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_series_type=True,\n    check_less_precise=False,\n    check_names=True,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_category_order=True,\n    obj=\"Series\",\n):\n    \"\"\"\n    Check that left and right Series are equal.\n\n    Parameters\n    ----------\n    left : Series\n    right : Series\n    check_dtype : bool, default True\n        Whether to check the Series dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_series_type : bool, default True\n         Whether to check the Series class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check the Series and Index names attribute.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_category_order : bool, default True\n        Whether to compare category order of internal Categoricals.\n\n        .. versionadded:: 1.0.2\n    obj : str, default 'Series'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, Series)\n\n    if check_series_type:\n        assert_class_equal(left, right, obj=obj)\n\n    # length comparison\n    if len(left) != len(right):\n        msg1 = f\"{len(left)}, {left.index}\"\n        msg2 = f\"{len(right)}, {right.index}\"\n        raise_assert_detail(obj, \"Series length are different\", msg1, msg2)\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    if check_dtype:\n        # We want to skip exact dtype checking when `check_categorical`\n        # is False. We'll still raise if only one is a `Categorical`,\n        # regardless of `check_categorical`\n        if (\n            is_categorical_dtype(left.dtype)\n            and is_categorical_dtype(right.dtype)\n            and not check_categorical\n        ):\n            pass\n        else:\n            assert_attr_equal(\"dtype\", left, right, obj=f\"Attributes of {obj}\")\n\n    if check_exact:\n        if not is_numeric_dtype(left.dtype):\n            raise AssertionError(\"check_exact may only be used with numeric Series\")\n\n        assert_numpy_array_equal(\n            left._values, right._values, check_dtype=check_dtype, obj=str(obj)\n        )\n    elif check_datetimelike_compat and (\n        needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype)\n    ):\n        # we want to check only if we have compat dtypes\n        # e.g. integer and M|m are NOT compat, but we can simply check\n        # the values in that case\n\n        # datetimelike may have different objects (e.g. datetime.datetime\n        # vs Timestamp) but will compare equal\n        if not Index(left._values).equals(Index(right._values)):\n            msg = (\n                f\"[datetimelike_compat=True] {left._values} \"\n                f\"is not equal to {right._values}.\"\n            )\n            raise AssertionError(msg)\n    elif is_interval_dtype(left.dtype) or is_interval_dtype(right.dtype):\n        assert_interval_array_equal(left.array, right.array)\n    elif is_categorical_dtype(left.dtype) or is_categorical_dtype(right.dtype):\n        _testing.assert_almost_equal(\n            left._values,\n            right._values,\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n    elif is_extension_array_dtype(left.dtype) or is_extension_array_dtype(right.dtype):\n        assert_extension_array_equal(left._values, right._values)\n    elif needs_i8_conversion(left.dtype) or needs_i8_conversion(right.dtype):\n        # DatetimeArray or TimedeltaArray\n        assert_extension_array_equal(left._values, right._values)\n    else:\n        _testing.assert_almost_equal(\n            left._values,\n            right._values,\n            check_less_precise=check_less_precise,\n            check_dtype=check_dtype,\n            obj=str(obj),\n        )\n\n    # metadata comparison\n    if check_names:\n        assert_attr_equal(\"name\", left, right, obj=obj)\n\n    if check_categorical:\n        if is_categorical_dtype(left) or is_categorical_dtype(right):\n            assert_categorical_equal(\n                left._values,\n                right._values,\n                obj=f\"{obj} category\",\n                check_category_order=check_category_order,\n            )",
        "begin_line": 1048,
        "end_line": 1198,
        "comment": "",
        "is_bug": true,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.004,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.004,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas._testing.assert_frame_equal#1202",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_frame_equal(left, right, check_dtype=True, check_index_type='equiv', check_column_type='equiv', check_frame_type=True, check_less_precise=False, check_names=True, by_blocks=False, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_like=False, obj='DataFrame')",
        "snippet": "def assert_frame_equal(\n    left,\n    right,\n    check_dtype=True,\n    check_index_type=\"equiv\",\n    check_column_type=\"equiv\",\n    check_frame_type=True,\n    check_less_precise=False,\n    check_names=True,\n    by_blocks=False,\n    check_exact=False,\n    check_datetimelike_compat=False,\n    check_categorical=True,\n    check_like=False,\n    obj=\"DataFrame\",\n):\n    \"\"\"\n    Check that left and right DataFrame are equal.\n\n    This function is intended to compare two DataFrames and output any\n    differences. Is is mostly intended for use in unit tests.\n    Additional parameters allow varying the strictness of the\n    equality checks performed.\n\n    Parameters\n    ----------\n    left : DataFrame\n        First DataFrame to compare.\n    right : DataFrame\n        Second DataFrame to compare.\n    check_dtype : bool, default True\n        Whether to check the DataFrame dtype is identical.\n    check_index_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the Index class, dtype and inferred_type\n        are identical.\n    check_column_type : bool or {'equiv'}, default 'equiv'\n        Whether to check the columns class, dtype and inferred_type\n        are identical. Is passed as the ``exact`` argument of\n        :func:`assert_index_equal`.\n    check_frame_type : bool, default True\n        Whether to check the DataFrame class is identical.\n    check_less_precise : bool or int, default False\n        Specify comparison precision. Only used when check_exact is False.\n        5 digits (False) or 3 digits (True) after decimal points are compared.\n        If int, then specify the digits to compare.\n\n        When comparing two numbers, if the first number has magnitude less\n        than 1e-5, we compare the two numbers directly and check whether\n        they are equivalent within the specified precision. Otherwise, we\n        compare the **ratio** of the second number to the first number and\n        check whether it is equivalent to 1 within the specified precision.\n    check_names : bool, default True\n        Whether to check that the `names` attribute for both the `index`\n        and `column` attributes of the DataFrame is identical.\n    by_blocks : bool, default False\n        Specify how to compare internal data. If False, compare by columns.\n        If True, compare by blocks.\n    check_exact : bool, default False\n        Whether to compare number exactly.\n    check_datetimelike_compat : bool, default False\n        Compare datetime-like which is comparable ignoring dtype.\n    check_categorical : bool, default True\n        Whether to compare internal Categorical exactly.\n    check_like : bool, default False\n        If True, ignore the order of index & columns.\n        Note: index labels must match their respective rows\n        (same as in columns) - same labels must be with the same data.\n    obj : str, default 'DataFrame'\n        Specify object name being compared, internally used to show appropriate\n        assertion message.\n\n    See Also\n    --------\n    assert_series_equal : Equivalent method for asserting Series equality.\n    DataFrame.equals : Check DataFrame equality.\n\n    Examples\n    --------\n    This example shows comparing two DataFrames that are equal\n    but with columns of differing dtypes.\n\n    >>> from pandas._testing import assert_frame_equal\n    >>> df1 = pd.DataFrame({'a': [1, 2], 'b': [3, 4]})\n    >>> df2 = pd.DataFrame({'a': [1, 2], 'b': [3.0, 4.0]})\n\n    df1 equals itself.\n\n    >>> assert_frame_equal(df1, df1)\n\n    df1 differs from df2 as column 'b' is of a different type.\n\n    >>> assert_frame_equal(df1, df2)\n    Traceback (most recent call last):\n    ...\n    AssertionError: Attributes of DataFrame.iloc[:, 1] (column name=\"b\") are different\n\n    Attribute \"dtype\" are different\n    [left]:  int64\n    [right]: float64\n\n    Ignore differing dtypes in columns with check_dtype.\n\n    >>> assert_frame_equal(df1, df2, check_dtype=False)\n    \"\"\"\n    __tracebackhide__ = True\n\n    # instance validation\n    _check_isinstance(left, right, DataFrame)\n\n    if check_frame_type:\n        assert isinstance(left, type(right))\n        # assert_class_equal(left, right, obj=obj)\n\n    # shape comparison\n    if left.shape != right.shape:\n        raise_assert_detail(\n            obj, f\"{obj} shape mismatch\", f\"{repr(left.shape)}\", f\"{repr(right.shape)}\",\n        )\n\n    if check_like:\n        left, right = left.reindex_like(right), right\n\n    # index comparison\n    assert_index_equal(\n        left.index,\n        right.index,\n        exact=check_index_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.index\",\n    )\n\n    # column comparison\n    assert_index_equal(\n        left.columns,\n        right.columns,\n        exact=check_column_type,\n        check_names=check_names,\n        check_less_precise=check_less_precise,\n        check_exact=check_exact,\n        check_categorical=check_categorical,\n        obj=f\"{obj}.columns\",\n    )\n\n    # compare by blocks\n    if by_blocks:\n        rblocks = right._to_dict_of_blocks()\n        lblocks = left._to_dict_of_blocks()\n        for dtype in list(set(list(lblocks.keys()) + list(rblocks.keys()))):\n            assert dtype in lblocks\n            assert dtype in rblocks\n            assert_frame_equal(\n                lblocks[dtype], rblocks[dtype], check_dtype=check_dtype, obj=obj\n            )\n\n    # compare by columns\n    else:\n        for i, col in enumerate(left.columns):\n            assert col in right\n            lcol = left.iloc[:, i]\n            rcol = right.iloc[:, i]\n            assert_series_equal(\n                lcol,\n                rcol,\n                check_dtype=check_dtype,\n                check_index_type=check_index_type,\n                check_less_precise=check_less_precise,\n                check_exact=check_exact,\n                check_names=check_names,\n                check_datetimelike_compat=check_datetimelike_compat,\n                check_categorical=check_categorical,\n                obj=f'{obj}.iloc[:, {i}] (column name=\"{col}\")',\n            )",
        "begin_line": 1202,
        "end_line": 1376,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas._testing.assert_produces_warning#2299",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.assert_produces_warning(expected_warning=Warning, filter_level='always', check_stacklevel=True, raise_on_extra_warnings=True)",
        "snippet": "def assert_produces_warning(\n    expected_warning=Warning,\n    filter_level=\"always\",\n    check_stacklevel=True,\n    raise_on_extra_warnings=True,\n):\n    \"\"\"\n    Context manager for running code expected to either raise a specific\n    warning, or not raise any warnings. Verifies that the code raises the\n    expected warning, and that it does not raise any other unexpected\n    warnings. It is basically a wrapper around ``warnings.catch_warnings``.\n\n    Parameters\n    ----------\n    expected_warning : {Warning, False, None}, default Warning\n        The type of Exception raised. ``exception.Warning`` is the base\n        class for all warnings. To check that no warning is returned,\n        specify ``False`` or ``None``.\n    filter_level : str or None, default \"always\"\n        Specifies whether warnings are ignored, displayed, or turned\n        into errors.\n        Valid values are:\n\n        * \"error\" - turns matching warnings into exceptions\n        * \"ignore\" - discard the warning\n        * \"always\" - always emit a warning\n        * \"default\" - print the warning the first time it is generated\n          from each location\n        * \"module\" - print the warning the first time it is generated\n          from each module\n        * \"once\" - print the warning the first time it is generated\n\n    check_stacklevel : bool, default True\n        If True, displays the line that called the function containing\n        the warning to show were the function is called. Otherwise, the\n        line that implements the function is displayed.\n    raise_on_extra_warnings : bool, default True\n        Whether extra warnings not of the type `expected_warning` should\n        cause the test to fail.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with assert_produces_warning():\n    ...     warnings.warn(UserWarning())\n    ...\n    >>> with assert_produces_warning(False):\n    ...     warnings.warn(RuntimeWarning())\n    ...\n    Traceback (most recent call last):\n        ...\n    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].\n    >>> with assert_produces_warning(UserWarning):\n    ...     warnings.warn(RuntimeWarning())\n    Traceback (most recent call last):\n        ...\n    AssertionError: Did not see expected warning of class 'UserWarning'.\n\n    ..warn:: This is *not* thread-safe.\n    \"\"\"\n    __tracebackhide__ = True\n\n    with warnings.catch_warnings(record=True) as w:\n\n        saw_warning = False\n        warnings.simplefilter(filter_level)\n        yield w\n        extra_warnings = []\n\n        for actual_warning in w:\n            if expected_warning and issubclass(\n                actual_warning.category, expected_warning\n            ):\n                saw_warning = True\n\n                if check_stacklevel and issubclass(\n                    actual_warning.category, (FutureWarning, DeprecationWarning)\n                ):\n                    from inspect import getframeinfo, stack\n\n                    caller = getframeinfo(stack()[2][0])\n                    msg = (\n                        \"Warning not set with correct stacklevel. \"\n                        f\"File where warning is raised: {actual_warning.filename} != \"\n                        f\"{caller.filename}. Warning message: {actual_warning.message}\"\n                    )\n                    assert actual_warning.filename == caller.filename, msg\n            else:\n                extra_warnings.append(\n                    (\n                        actual_warning.category.__name__,\n                        actual_warning.message,\n                        actual_warning.filename,\n                        actual_warning.lineno,\n                    )\n                )\n        if expected_warning:\n            msg = (\n                f\"Did not see expected warning of class \"\n                f\"{repr(expected_warning.__name__)}\"\n            )\n            assert saw_warning, msg\n        if raise_on_extra_warnings and extra_warnings:\n            raise AssertionError(\n                f\"Caused unexpected warning(s): {repr(extra_warnings)}\"\n            )",
        "begin_line": 2299,
        "end_line": 2404,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.RNGContext.__init__#2423",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing.RNGContext",
        "signature": "pandas._testing.RNGContext.__init__(self, seed)",
        "snippet": "    def __init__(self, seed):\n        self.seed = seed",
        "begin_line": 2423,
        "end_line": 2424,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.RNGContext.__enter__#2426",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing.RNGContext",
        "signature": "pandas._testing.RNGContext.__enter__(self)",
        "snippet": "    def __enter__(self):\n\n        self.start_state = np.random.get_state()\n        np.random.seed(self.seed)",
        "begin_line": 2426,
        "end_line": 2429,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.RNGContext.__exit__#2431",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing.RNGContext",
        "signature": "pandas._testing.RNGContext.__exit__(self, exc_type, exc_value, traceback)",
        "snippet": "    def __exit__(self, exc_type, exc_value, traceback):\n\n        np.random.set_state(self.start_state)",
        "begin_line": 2431,
        "end_line": 2433,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.convert_rows_list_to_csv_str#2638",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.convert_rows_list_to_csv_str(rows_list: List[str])",
        "snippet": "def convert_rows_list_to_csv_str(rows_list: List[str]):\n    \"\"\"\n    Convert list of CSV rows to single CSV-formatted string for current OS.\n\n    This method is used for creating expected value of to_csv() method.\n\n    Parameters\n    ----------\n    rows_list : List[str]\n        Each element represents the row of csv.\n\n    Returns\n    -------\n    str\n        Expected output of to_csv() in current OS.\n    \"\"\"\n    sep = os.linesep\n    expected = sep.join(rows_list) + sep\n    return expected",
        "begin_line": 2638,
        "end_line": 2656,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas._testing.external_error_raised#2659",
        "src_path": "pandas/_testing.py",
        "class_name": "pandas._testing",
        "signature": "pandas._testing.external_error_raised(expected_exception: Type[Exception])",
        "snippet": "def external_error_raised(\n    expected_exception: Type[Exception],\n) -> Callable[[Type[Exception], None], None]:\n    \"\"\"\n    Helper function to mark pytest.raises that have an external error message.\n\n    Parameters\n    ----------\n    expected_exception : Exception\n        Expected error to raise.\n\n    Returns\n    -------\n    Callable\n        Regular `pytest.raises` function with `match` equal to `None`.\n    \"\"\"\n    import pytest\n\n    return pytest.raises(expected_exception, match=None)",
        "begin_line": 2659,
        "end_line": 2677,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._test_decorators.safe_import#41",
        "src_path": "pandas/util/_test_decorators.py",
        "class_name": "pandas.util._test_decorators",
        "signature": "pandas.util._test_decorators.safe_import(mod_name: str, min_version: Optional[str]=None)",
        "snippet": "def safe_import(mod_name: str, min_version: Optional[str] = None):\n    \"\"\"\n    Parameters\n    ----------\n    mod_name : str\n        Name of the module to be imported\n    min_version : str, default None\n        Minimum required version of the specified mod_name\n\n    Returns\n    -------\n    object\n        The imported module if successful, or False\n    \"\"\"\n    try:\n        mod = __import__(mod_name)\n    except ImportError:\n        return False\n\n    if not min_version:\n        return mod\n    else:\n        import sys\n\n        try:\n            version = getattr(sys.modules[mod_name], \"__version__\")\n        except AttributeError:\n            # xlrd uses a capitalized attribute name\n            version = getattr(sys.modules[mod_name], \"__VERSION__\")\n        if version:\n            from distutils.version import LooseVersion\n\n            if LooseVersion(version) >= LooseVersion(min_version):\n                return mod\n\n    return False",
        "begin_line": 41,
        "end_line": 76,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.cmp_method#108",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.cmp_method(self, other)",
        "snippet": "    def cmp_method(self, other):\n        if isinstance(other, (np.ndarray, Index, ABCSeries, ExtensionArray)):\n            if other.ndim > 0 and len(self) != len(other):\n                raise ValueError(\"Lengths must match to compare\")\n\n        if is_object_dtype(self) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, other)\n\n        elif is_object_dtype(self) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self.values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self.values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)",
        "begin_line": 108,
        "end_line": 132,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0009433962264150943,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0009433962264150943,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__new__#283",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs)",
        "snippet": "    def __new__(\n        cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs,\n    ) -> \"Index\":\n\n        from pandas.core.indexes.range import RangeIndex\n\n        name = maybe_extract_name(name, data, cls)\n\n        if isinstance(data, ABCPandasArray):\n            # ensure users don't accidentally put a PandasArray in an index.\n            data = data.to_numpy()\n\n        # range\n        if isinstance(data, RangeIndex):\n            return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n        elif isinstance(data, range):\n            return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n        # categorical\n        elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n        # interval\n        elif is_interval_dtype(data) or is_interval_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.interval import IntervalIndex\n\n            return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n        elif (\n            is_datetime64_any_dtype(data)\n            or is_datetime64_any_dtype(dtype)\n            or \"tz\" in kwargs\n        ):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import DatetimeIndex\n\n            return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n        elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import TimedeltaIndex\n\n            return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n        elif is_period_dtype(data) or is_period_dtype(dtype):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas import PeriodIndex\n\n            return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n        # extension dtype\n        elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n            if not (dtype is None or is_object_dtype(dtype)):\n                # coerce to the provided dtype\n                ea_cls = dtype.construct_array_type()\n                data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n            else:\n                data = np.asarray(data, dtype=object)\n\n            # coerce to the object dtype\n            data = data.astype(object)\n            return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n        # index-like\n        elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n            # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n            from pandas.core.indexes.numeric import (\n                Float64Index,\n                Int64Index,\n                UInt64Index,\n            )\n\n            if dtype is not None:\n                # we need to avoid having numpy coerce\n                # things that look like ints/floats to ints unless\n                # they are actually ints, e.g. '0' and 0.0\n                # should not be coerced\n                # GH 11836\n                data = _maybe_cast_with_dtype(data, dtype, copy)\n                dtype = data.dtype  # TODO: maybe not for object?\n\n            # maybe coerce to a sub-class\n            if is_signed_integer_dtype(data.dtype):\n                return Int64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_unsigned_integer_dtype(data.dtype):\n                return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n            elif is_float_dtype(data.dtype):\n                return Float64Index(data, copy=copy, dtype=dtype, name=name)\n            elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n                subarr = data.astype(\"object\")\n            else:\n                subarr = com.asarray_tuplesafe(data, dtype=object)\n\n            # asarray_tuplesafe does not always copy underlying data,\n            # so need to make sure that this happens\n            if copy:\n                subarr = subarr.copy()\n\n            if dtype is None:\n                new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n                if new_dtype is not None:\n                    return cls(\n                        new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                    )\n\n            if kwargs:\n                raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n            if subarr.ndim > 1:\n                # GH#13601, GH#20285, GH#27125\n                raise ValueError(\"Index data must be 1-dimensional\")\n            return cls._simple_new(subarr, name)\n\n        elif hasattr(data, \"__array__\"):\n            return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n        elif data is None or is_scalar(data):\n            raise cls._scalar_data_error(data)\n        else:\n            if tupleize_cols and is_list_like(data):\n                # GH21470: convert iterable to list before determining if empty\n                if is_iterator(data):\n                    data = list(data)\n\n                if data and all(isinstance(e, tuple) for e in data):\n                    # we must be all tuples, otherwise don't construct\n                    # 10697\n                    from pandas.core.indexes.multi import MultiIndex\n\n                    return MultiIndex.from_tuples(\n                        data, names=name or kwargs.get(\"names\")\n                    )\n            # other iterable of some kind\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n            return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 283,
        "end_line": 419,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0016129032258064516,
            "pseudo_dstar_susp": 0.004761904761904762,
            "pseudo_tarantula_susp": 0.0011013215859030838,
            "pseudo_op2_susp": 0.004761904761904762,
            "pseudo_barinel_susp": 0.0011013215859030838
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.asi8#441",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.asi8(self)",
        "snippet": "    def asi8(self):\n        \"\"\"\n        Integer representation of the values.\n\n        Returns\n        -------\n        ndarray\n            An ndarray with int64 dtype.\n        \"\"\"\n        return None",
        "begin_line": 441,
        "end_line": 450,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._simple_new#453",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._simple_new(cls, values, name: Label=None)",
        "snippet": "    def _simple_new(cls, values, name: Label = None):\n        \"\"\"\n        We require that we have a dtype compat for the values. If we are passed\n        a non-dtype compat, then coerce using the constructor.\n\n        Must be careful not to recurse.\n        \"\"\"\n        assert isinstance(values, np.ndarray), type(values)\n\n        result = object.__new__(cls)\n        result._data = values\n        # _index_data is a (temporary?) fix to ensure that the direct data\n        # manipulation we do in `_libs/reduction.pyx` continues to work.\n        # We need access to the actual ndarray, since we're messing with\n        # data buffers and strides. We don't re-use `_ndarray_values`, since\n        # we actually set this value too.\n        result._index_data = values\n        result._name = name\n        result._cache = {}\n\n        return result._reset_identity()",
        "begin_line": 453,
        "end_line": 473,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007062146892655367,
            "pseudo_dstar_susp": 0.0013422818791946308,
            "pseudo_tarantula_susp": 0.0007616146230007616,
            "pseudo_op2_susp": 0.0013422818791946308,
            "pseudo_barinel_susp": 0.0007616146230007616
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._shallow_copy#488",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._shallow_copy(self, values=None, name: Label=no_default)",
        "snippet": "    def _shallow_copy(self, values=None, name: Label = no_default):\n        \"\"\"\n        Create a new Index with the same class as the caller, don't copy the\n        data, use the same object attributes with passed in attributes taking\n        precedence.\n\n        *this is an internal non-public method*\n\n        Parameters\n        ----------\n        values : the values to create the new Index, optional\n        name : Label, defaults to self.name\n        \"\"\"\n        name = self.name if name is no_default else name\n        cache = self._cache.copy() if values is None else {}\n        if values is None:\n            values = self.values\n\n        result = self._simple_new(values, name=name)\n        result._cache = cache\n        return result",
        "begin_line": 488,
        "end_line": 508,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0009389671361502347,
            "pseudo_dstar_susp": 0.0006868131868131869,
            "pseudo_tarantula_susp": 0.0010940919037199124,
            "pseudo_op2_susp": 0.0006868131868131869,
            "pseudo_barinel_susp": 0.0010940919037199124
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_#543",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_(self, other)",
        "snippet": "    def is_(self, other) -> bool:\n        \"\"\"\n        More flexible, faster check like ``is`` but that works through views.\n\n        Note: this is *not* the same as ``Index.identical()``, which checks\n        that metadata is also the same.\n\n        Parameters\n        ----------\n        other : object\n            other object to compare against.\n\n        Returns\n        -------\n        True if both have same underlying data, False otherwise : bool\n        \"\"\"\n        # use something other than None to be clearer\n        return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
        "begin_line": 543,
        "end_line": 560,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007645259938837921,
            "pseudo_dstar_susp": 0.000664451827242525,
            "pseudo_tarantula_susp": 0.0010111223458038423,
            "pseudo_op2_susp": 0.000664451827242525,
            "pseudo_barinel_susp": 0.0010111223458038423
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._reset_identity#562",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._reset_identity(self)",
        "snippet": "    def _reset_identity(self):\n        \"\"\"\n        Initializes or resets ``_id`` attribute with new object.\n        \"\"\"\n        self._id = _Identity()\n        return self",
        "begin_line": 562,
        "end_line": 567,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007892659826361484,
            "pseudo_dstar_susp": 0.0020833333333333333,
            "pseudo_tarantula_susp": 0.000727802037845706,
            "pseudo_op2_susp": 0.0020833333333333333,
            "pseudo_barinel_susp": 0.000727802037845706
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._engine#573",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._engine(self)",
        "snippet": "    def _engine(self):\n        # property, for now, slow to look up\n\n        # to avoid a reference cycle, bind `target_values` to a local variable, so\n        # `self` is not passed into the lambda.\n        target_values = self._get_engine_target()\n        return self._engine_type(lambda: target_values, len(self))",
        "begin_line": 573,
        "end_line": 579,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007558578987150416,
            "pseudo_dstar_susp": 0.002008032128514056,
            "pseudo_tarantula_susp": 0.0007042253521126761,
            "pseudo_op2_susp": 0.002008032128514056,
            "pseudo_barinel_susp": 0.0007042253521126761
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__len__#585",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        \"\"\"\n        Return the length of the Index.\n        \"\"\"\n        return len(self._data)",
        "begin_line": 585,
        "end_line": 589,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000646830530401035,
            "pseudo_dstar_susp": 0.0012626262626262627,
            "pseudo_tarantula_susp": 0.0006872852233676976,
            "pseudo_op2_susp": 0.0012626262626262627,
            "pseudo_barinel_susp": 0.0006872852233676976
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__array__#591",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__array__(self, dtype=None)",
        "snippet": "    def __array__(self, dtype=None) -> np.ndarray:\n        \"\"\"\n        The array interface, return my values.\n        \"\"\"\n        return np.asarray(self._data, dtype=dtype)",
        "begin_line": 591,
        "end_line": 595,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0019801980198019802,
            "pseudo_dstar_susp": 0.0009033423667570009,
            "pseudo_tarantula_susp": 0.0022271714922048997,
            "pseudo_op2_susp": 0.0009033423667570009,
            "pseudo_barinel_susp": 0.0022271714922048997
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.dtype#609",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.dtype(self)",
        "snippet": "    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype",
        "begin_line": 609,
        "end_line": 613,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000700770847932726,
            "pseudo_dstar_susp": 0.0013333333333333333,
            "pseudo_tarantula_susp": 0.0007530120481927711,
            "pseudo_op2_susp": 0.0013333333333333333,
            "pseudo_barinel_susp": 0.0007530120481927711
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.view#630",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.view(self, cls=None)",
        "snippet": "    def view(self, cls=None):\n\n        # we need to see if we are subclassing an\n        # index type here\n        if cls is not None and not hasattr(cls, \"_typ\"):\n            result = self._data.view(cls)\n        else:\n            result = self._shallow_copy()\n        if isinstance(result, Index):\n            result._id = self._id\n        return result",
        "begin_line": 630,
        "end_line": 640,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.astype#642",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        \"\"\"\n        Create an Index with values cast to dtypes. The class of a new Index\n        is determined by dtype. When conversion is impossible, a ValueError\n        exception is raised.\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n            Note that any signed integer `dtype` is treated as ``'int64'``,\n            and any unsigned integer `dtype` is treated as ``'uint64'``,\n            regardless of the size.\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and internal requirements on dtype are\n            satisfied, the original data is used to create a new Index\n            or the original Index is returned.\n\n        Returns\n        -------\n        Index\n            Index with values cast to specified dtype.\n        \"\"\"\n        if is_dtype_equal(self.dtype, dtype):\n            return self.copy() if copy else self\n\n        elif is_categorical_dtype(dtype):\n            from pandas.core.indexes.category import CategoricalIndex\n\n            return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n        elif is_extension_array_dtype(dtype):\n            return Index(np.asarray(self), dtype=dtype, copy=copy)\n\n        try:\n            casted = self.values.astype(dtype, copy=copy)\n        except (TypeError, ValueError) as err:\n            raise TypeError(\n                f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n            ) from err\n        return Index(casted, name=self.name, dtype=dtype)",
        "begin_line": 642,
        "end_line": 682,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.take#713",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
        "snippet": "    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n        if kwargs:\n            nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        if self._can_hold_na:\n            taken = self._assert_take_fillable(\n                self.values,\n                indices,\n                allow_fill=allow_fill,\n                fill_value=fill_value,\n                na_value=self._na_value,\n            )\n        else:\n            if allow_fill and fill_value is not None:\n                cls_name = type(self).__name__\n                raise ValueError(\n                    f\"Unable to fill values because {cls_name} cannot contain NA\"\n                )\n            taken = self.values.take(indices)\n        return self._shallow_copy(taken)",
        "begin_line": 713,
        "end_line": 732,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._assert_take_fillable#734",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
        "snippet": "    def _assert_take_fillable(\n        self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n    ):\n        \"\"\"\n        Internal method to handle NA filling of take.\n        \"\"\"\n        indices = ensure_platform_int(indices)\n\n        # only fill if we are passing a non-None fill_value\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                raise ValueError(\n                    \"When allow_fill=True and fill_value is not None, \"\n                    \"all indices must be >= -1\"\n                )\n            taken = algos.take(\n                values, indices, allow_fill=allow_fill, fill_value=na_value\n            )\n        else:\n            taken = values.take(indices)\n        return taken",
        "begin_line": 734,
        "end_line": 754,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.copy#804",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.copy(self, name=None, deep=False, dtype=None, names=None)",
        "snippet": "    def copy(self, name=None, deep=False, dtype=None, names=None):\n        \"\"\"\n        Make a copy of this object.\n\n        Name and dtype sets those attributes on the new object.\n\n        Parameters\n        ----------\n        name : Label, optional\n            Set name for new object.\n        deep : bool, default False\n        dtype : numpy dtype or pandas type, optional\n            Set dtype for new object.\n        names : list-like, optional\n            Kept for compatibility with MultiIndex. Should not be used.\n\n        Returns\n        -------\n        Index\n            Index refer to new object which is a copy of this object.\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        \"\"\"\n        if deep:\n            new_index = self._shallow_copy(self._data.copy())\n        else:\n            new_index = self._shallow_copy()\n\n        names = self._validate_names(name=name, names=names, deep=deep)\n        new_index = new_index.set_names(names)\n\n        if dtype:\n            new_index = new_index.astype(dtype)\n        return new_index",
        "begin_line": 804,
        "end_line": 840,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__repr__#857",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__repr__(self)",
        "snippet": "    def __repr__(self) -> str_t:\n        \"\"\"\n        Return a string representation for this object.\n        \"\"\"\n        klass_name = type(self).__name__\n        data = self._format_data()\n        attrs = self._format_attrs()\n        space = self._format_space()\n        attrs_str = [f\"{k}={v}\" for k, v in attrs]\n        prepr = f\",{space}\".join(attrs_str)\n\n        # no data provided, just attributes\n        if data is None:\n            data = \"\"\n\n        res = f\"{klass_name}({data}{prepr})\"\n\n        return res",
        "begin_line": 857,
        "end_line": 874,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00023917723032767282,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_space#876",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_space(self)",
        "snippet": "    def _format_space(self) -> str_t:\n\n        # using space here controls if the attributes\n        # are line separated or not (the default)\n\n        # max_seq_items = get_option('display.max_seq_items')\n        # if len(self) > max_seq_items:\n        #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n        return \" \"",
        "begin_line": 876,
        "end_line": 884,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001743679163034002,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._formatter_func#887",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._formatter_func(self)",
        "snippet": "    def _formatter_func(self):\n        \"\"\"\n        Return the formatter function.\n        \"\"\"\n        return default_pprint",
        "begin_line": 887,
        "end_line": 891,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017473353136466887,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_data#893",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_data(self, name=None)",
        "snippet": "    def _format_data(self, name=None) -> str_t:\n        \"\"\"\n        Return the formatted data as a unicode string.\n        \"\"\"\n        # do we want to justify (only do so for non-objects)\n        is_justify = True\n\n        if self.inferred_type == \"string\":\n            is_justify = False\n        elif self.inferred_type == \"categorical\":\n            if is_object_dtype(self.categories):  # type: ignore\n                is_justify = False\n\n        return format_object_summary(\n            self, self._formatter_func, is_justify=is_justify, name=name\n        )",
        "begin_line": 893,
        "end_line": 908,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._format_attrs#910",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._format_attrs(self)",
        "snippet": "    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value).\n        \"\"\"\n        return format_object_attrs(self)",
        "begin_line": 910,
        "end_line": 914,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017537706068046299,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1149",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self)",
        "snippet": "    def name(self):\n        \"\"\"\n        Return Index or MultiIndex name.\n        \"\"\"\n        return self._name",
        "begin_line": 1149,
        "end_line": 1153,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007867820613690008,
            "pseudo_dstar_susp": 0.002070393374741201,
            "pseudo_tarantula_susp": 0.0007251631617113851,
            "pseudo_op2_susp": 0.002070393374741201,
            "pseudo_barinel_susp": 0.0007251631617113851
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.name#1156",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.name(self, value)",
        "snippet": "    def name(self, value):\n        if self._no_setting_name:\n            # Used in MultiIndex.levels to avoid silently ignoring name updates.\n            raise RuntimeError(\n                \"Cannot set name on a level of a MultiIndex. Use \"\n                \"'MultiIndex.set_names' instead.\"\n            )\n        maybe_extract_name(value, None, type(self))\n        self._name = value",
        "begin_line": 1156,
        "end_line": 1164,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012658227848101266,
            "pseudo_dstar_susp": 0.004464285714285714,
            "pseudo_tarantula_susp": 0.0010615711252653928,
            "pseudo_op2_susp": 0.004464285714285714,
            "pseudo_barinel_susp": 0.0010615711252653928
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._validate_names#1166",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._validate_names(self, name=None, names=None, deep: bool=False)",
        "snippet": "    def _validate_names(self, name=None, names=None, deep: bool = False):\n        \"\"\"\n        Handles the quirks of having a singular 'name' parameter for general\n        Index and plural 'names' parameter for MultiIndex.\n        \"\"\"\n        from copy import deepcopy\n\n        if names is not None and name is not None:\n            raise TypeError(\"Can only provide one of `names` and `name`\")\n        elif names is None and name is None:\n            return deepcopy(self.names) if deep else self.names\n        elif names is not None:\n            if not is_list_like(names):\n                raise TypeError(\"Must pass list-like as `names`.\")\n            return names\n        else:\n            if not is_list_like(name):\n                return [name]\n            return name",
        "begin_line": 1166,
        "end_line": 1184,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_names#1186",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_names(self)",
        "snippet": "    def _get_names(self):\n        return FrozenList((self.name,))",
        "begin_line": 1186,
        "end_line": 1187,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008110300081103001,
            "pseudo_dstar_susp": 0.002145922746781116,
            "pseudo_tarantula_susp": 0.0007513148009015778,
            "pseudo_op2_susp": 0.002145922746781116,
            "pseudo_barinel_susp": 0.0007513148009015778
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._set_names#1189",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._set_names(self, values, level=None)",
        "snippet": "    def _set_names(self, values, level=None):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n        \"\"\"\n        if not is_list_like(values):\n            raise ValueError(\"Names must be a list-like\")\n        if len(values) != 1:\n            raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n        # GH 20527\n        # All items in 'name' need to be hashable:\n        for name in values:\n            if not is_hashable(name):\n                raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n        self._name = values[0]",
        "begin_line": 1189,
        "end_line": 1215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.set_names#1219",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.set_names(self, names, level=None, inplace: bool=False)",
        "snippet": "    def set_names(self, names, level=None, inplace: bool = False):\n        \"\"\"\n        Set Index or MultiIndex name.\n\n        Able to set new names partially and by level.\n\n        Parameters\n        ----------\n        names : label or list of label\n            Name(s) to set.\n        level : int, label or list of int or label, optional\n            If the index is a MultiIndex, level(s) to set (None for all\n            levels). Otherwise level must be None.\n        inplace : bool, default False\n            Modifies the object directly, instead of creating a new Index or\n            MultiIndex.\n\n        Returns\n        -------\n        Index\n            The same type as the caller or None if inplace is True.\n\n        See Also\n        --------\n        Index.rename : Able to set new names without level.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n        >>> idx.set_names('quarter')\n        Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n        >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n        ...                                   [2018, 2019]])\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   )\n        >>> idx.set_names(['kind', 'year'], inplace=True)\n        >>> idx\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['kind', 'year'])\n        >>> idx.set_names('species', level=0)\n        MultiIndex([('python', 2018),\n                    ('python', 2019),\n                    ( 'cobra', 2018),\n                    ( 'cobra', 2019)],\n                   names=['species', 'year'])\n        \"\"\"\n        if level is not None and not isinstance(self, ABCMultiIndex):\n            raise ValueError(\"Level must be None for non-MultiIndex\")\n\n        if level is not None and not is_list_like(level) and is_list_like(names):\n            raise TypeError(\"Names must be a string when a single level is provided.\")\n\n        if not is_list_like(names) and level is None and self.nlevels > 1:\n            raise TypeError(\"Must pass list-like as `names`.\")\n\n        if not is_list_like(names):\n            names = [names]\n        if level is not None and not is_list_like(level):\n            level = [level]\n\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._set_names(names, level=level)\n        if not inplace:\n            return idx",
        "begin_line": 1219,
        "end_line": 1295,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.nlevels#1352",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.nlevels(self)",
        "snippet": "    def nlevels(self) -> int:\n        \"\"\"\n        Number of levels.\n        \"\"\"\n        return 1",
        "begin_line": 1352,
        "end_line": 1356,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008176614881439084,
            "pseudo_dstar_susp": 0.002178649237472767,
            "pseudo_tarantula_susp": 0.0007564296520423601,
            "pseudo_op2_susp": 0.002178649237472767,
            "pseudo_barinel_susp": 0.0007564296520423601
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic#1545",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic(self)",
        "snippet": "    def is_monotonic(self) -> bool:\n        \"\"\"\n        Alias for is_monotonic_increasing.\n        \"\"\"\n        return self.is_monotonic_increasing",
        "begin_line": 1545,
        "end_line": 1549,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_monotonic_increasing#1552",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_monotonic_increasing(self)",
        "snippet": "    def is_monotonic_increasing(self) -> bool:\n        \"\"\"\n        Return if the index is monotonic increasing (only equal or\n        increasing) values.\n\n        Examples\n        --------\n        >>> Index([1, 2, 3]).is_monotonic_increasing\n        True\n        >>> Index([1, 2, 2]).is_monotonic_increasing\n        True\n        >>> Index([1, 3, 2]).is_monotonic_increasing\n        False\n        \"\"\"\n        return self._engine.is_monotonic_increasing",
        "begin_line": 1552,
        "end_line": 1566,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_unique#1620",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_unique(self)",
        "snippet": "    def is_unique(self) -> bool:\n        \"\"\"\n        Return if the index has unique values.\n        \"\"\"\n        return self._engine.is_unique",
        "begin_line": 1620,
        "end_line": 1624,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001606941989394183,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_boolean#1658",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_boolean(self)",
        "snippet": "    def is_boolean(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of booleans.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of booleans.\n\n        See Also\n        --------\n        is_integer : Check if the Index only consists of integers.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([True, False, True])\n        >>> idx.is_boolean()\n        True\n\n        >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n        >>> idx.is_boolean()\n        False\n\n        >>> idx = pd.Index([True, False, \"True\"])\n        >>> idx.is_boolean()\n        False\n        \"\"\"\n        return self.inferred_type in [\"boolean\"]",
        "begin_line": 1658,
        "end_line": 1691,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_integer#1693",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_integer(self)",
        "snippet": "    def is_integer(self) -> bool:\n        \"\"\"\n        Check if the Index only consists of integers.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of integers.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_floating : Check if the Index is a floating type.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_integer()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_integer()\n        False\n\n        >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n        >>> idx.is_integer()\n        False\n        \"\"\"\n        return self.inferred_type in [\"integer\"]",
        "begin_line": 1693,
        "end_line": 1726,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_floating#1728",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_floating(self)",
        "snippet": "    def is_floating(self) -> bool:\n        \"\"\"\n        Check if the Index is a floating type.\n\n        The Index may consist of only floats, NaNs, or a mix of floats,\n        integers, or NaNs.\n\n        Returns\n        -------\n        bool\n            Whether or not the Index only consists of only consists of floats, NaNs, or\n            a mix of floats, integers, or NaNs.\n\n        See Also\n        --------\n        is_boolean : Check if the Index only consists of booleans.\n        is_integer : Check if the Index only consists of integers.\n        is_numeric : Check if the Index only consists of numeric data.\n        is_object : Check if the Index is of the object dtype.\n        is_categorical : Check if the Index holds categorical data.\n        is_interval : Check if the Index holds Interval objects.\n        is_mixed : Check if the Index holds data with mixed data types.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n        >>> idx.is_floating()\n        True\n\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx.is_floating()\n        False\n        \"\"\"\n        return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
        "begin_line": 1728,
        "end_line": 1769,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.inferred_type#1968",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.inferred_type(self)",
        "snippet": "    def inferred_type(self) -> str_t:\n        \"\"\"\n        Return a string of the type inferred from the values.\n        \"\"\"\n        return lib.infer_dtype(self, skipna=False)",
        "begin_line": 1968,
        "end_line": 1972,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0008849557522123894,
            "pseudo_dstar_susp": 0.0006811989100817438,
            "pseudo_tarantula_susp": 0.0010787486515641855,
            "pseudo_op2_susp": 0.0006811989100817438,
            "pseudo_barinel_susp": 0.0010787486515641855
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.is_all_dates#1975",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.is_all_dates(self)",
        "snippet": "    def is_all_dates(self) -> bool:\n        \"\"\"\n        Whether or not the index values only consist of dates.\n        \"\"\"\n        return is_datetime_array(ensure_object(self.values))",
        "begin_line": 1975,
        "end_line": 1979,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._isnan#1996",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return if each value is NaN.\n        \"\"\"\n        if self._can_hold_na:\n            return isna(self)\n        else:\n            # shouldn't reach to this condition by checking hasnans beforehand\n            values = np.empty(len(self), dtype=np.bool_)\n            values.fill(False)\n            return values",
        "begin_line": 1996,
        "end_line": 2006,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00016515276630883568,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._nan_idxs#2009",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._nan_idxs(self)",
        "snippet": "    def _nan_idxs(self):\n        if self._can_hold_na:\n            return self._isnan.nonzero()[0]\n        else:\n            return np.array([], dtype=np.int64)",
        "begin_line": 2009,
        "end_line": 2013,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.hasnans#2016",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.hasnans(self)",
        "snippet": "    def hasnans(self) -> bool:\n        \"\"\"\n        Return if I have any nans; enables various perf speedups.\n        \"\"\"\n        if self._can_hold_na:\n            return bool(self._isnan.any())\n        else:\n            return False",
        "begin_line": 2016,
        "end_line": 2023,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017959770114942528,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.isna#2025",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.isna(self)",
        "snippet": "    def isna(self):\n        \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n        mapped to ``True`` values.\n        Everything else get mapped to ``False`` values. Characters such as\n        empty strings `''` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        numpy.ndarray\n            A boolean array of whether my values are NA.\n\n        See Also\n        --------\n        Index.notna : Boolean inverse of isna.\n        Index.dropna : Omit entries with missing values.\n        isna : Top-level isna.\n        Series.isna : Detect missing values in Series object.\n\n        Examples\n        --------\n        Show which entries in a pandas.Index are NA. The result is an\n        array.\n\n        >>> idx = pd.Index([5.2, 6.0, np.NaN])\n        >>> idx\n        Float64Index([5.2, 6.0, nan], dtype='float64')\n        >>> idx.isna()\n        array([False, False,  True], dtype=bool)\n\n        Empty strings are not considered NA values. None is considered an NA\n        value.\n\n        >>> idx = pd.Index(['black', '', 'red', None])\n        >>> idx\n        Index(['black', '', 'red', None], dtype='object')\n        >>> idx.isna()\n        array([False, False, False,  True], dtype=bool)\n\n        For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n        >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n        ...                         pd.Timestamp(''), None, pd.NaT])\n        >>> idx\n        DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                      dtype='datetime64[ns]', freq=None)\n        >>> idx.isna()\n        array([False,  True,  True,  True], dtype=bool)\n        \"\"\"\n        return self._isnan",
        "begin_line": 2025,
        "end_line": 2078,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_loc#2822",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_loc(self, key, method=None, tolerance=None)",
        "snippet": "    def get_loc(self, key, method=None, tolerance=None):\n        \"\"\"\n        Get integer location, slice or boolean mask for requested label.\n\n        Parameters\n        ----------\n        key : label\n        method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n            * default: exact matches only.\n            * pad / ffill: find the PREVIOUS index value if no exact match.\n            * backfill / bfill: use NEXT index value if no exact match\n            * nearest: use the NEAREST index value if no exact match. Tied\n              distances are broken by preferring the larger index value.\n        tolerance : int or float, optional\n            Maximum distance from index value for inexact matches. The value of\n            the index at the matching location most satisfy the equation\n            ``abs(index[loc] - key) <= tolerance``.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Returns\n        -------\n        loc : int if unique index, slice if monotonic index, else mask\n\n        Examples\n        --------\n        >>> unique_index = pd.Index(list('abc'))\n        >>> unique_index.get_loc('b')\n        1\n\n        >>> monotonic_index = pd.Index(list('abbc'))\n        >>> monotonic_index.get_loc('b')\n        slice(1, 3, None)\n\n        >>> non_monotonic_index = pd.Index(list('abcb'))\n        >>> non_monotonic_index.get_loc('b')\n        array([False,  True, False,  True])\n        \"\"\"\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            casted_key = self._maybe_cast_indexer(key)\n            try:\n                return self._engine.get_loc(casted_key)\n            except KeyError as err:\n                raise KeyError(key) from err\n\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n        indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n        if indexer.ndim > 1 or indexer.size > 1:\n            raise TypeError(\"get_loc requires scalar valued input\")\n        loc = indexer.item()\n        if loc == -1:\n            raise KeyError(key)\n        return loc",
        "begin_line": 2822,
        "end_line": 2881,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_indexer#2933",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_indexer(self, target, method=None, limit=None, tolerance=None)",
        "snippet": "    def get_indexer(\n        self, target, method=None, limit=None, tolerance=None\n    ) -> np.ndarray:\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if tolerance is not None:\n            tolerance = self._convert_tolerance(tolerance, target)\n\n        # Treat boolean labels passed to a numeric index as not found. Without\n        # this fix False and True would be treated as 0 and 1 respectively.\n        # (GH #16877)\n        if target.is_boolean() and self.is_numeric():\n            return ensure_platform_int(np.repeat(-1, target.size))\n\n        pself, ptarget = self._maybe_promote(target)\n        if pself is not self or ptarget is not target:\n            return pself.get_indexer(\n                ptarget, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not is_dtype_equal(self.dtype, target.dtype):\n            this = self.astype(object)\n            target = target.astype(object)\n            return this.get_indexer(\n                target, method=method, limit=limit, tolerance=tolerance\n            )\n\n        if not self.is_unique:\n            raise InvalidIndexError(\n                \"Reindexing only valid with uniquely valued Index objects\"\n            )\n\n        if method == \"pad\" or method == \"backfill\":\n            indexer = self._get_fill_indexer(target, method, limit, tolerance)\n        elif method == \"nearest\":\n            indexer = self._get_nearest_indexer(target, limit, tolerance)\n        else:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n            if limit is not None:\n                raise ValueError(\n                    \"limit argument only valid if doing pad, \"\n                    \"backfill or nearest reindexing\"\n                )\n\n            indexer = self._engine.get_indexer(target._get_engine_target())\n\n        return ensure_platform_int(indexer)",
        "begin_line": 2933,
        "end_line": 2983,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._can_reindex#3246",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._can_reindex(self, indexer)",
        "snippet": "    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n\n        Parameters\n        ----------\n        indexer : an integer indexer\n\n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n            raise ValueError(\"cannot reindex from a duplicate axis\")",
        "begin_line": 3246,
        "end_line": 3260,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.reindex#3262",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
        "snippet": "    def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values\n        as necessary).\n\n        Parameters\n        ----------\n        target : an iterable\n\n        Returns\n        -------\n        new_index : pd.Index\n            Resulting index.\n        indexer : np.ndarray or None\n            Indices of output values in original index.\n        \"\"\"\n        # GH6552: preserve names when reindexing to non-named target\n        # (i.e. neither Index nor Series).\n        preserve_names = not hasattr(target, \"name\")\n\n        # GH7774: preserve dtype/tz if target is empty and not an Index.\n        target = _ensure_has_len(target)  # target may be an iterator\n\n        if not isinstance(target, Index) and len(target) == 0:\n            if isinstance(self, ABCRangeIndex):\n                values = range(0)\n            else:\n                values = self._data[:0]  # appropriately-dtyped empty array\n            target = self._simple_new(values, name=self.name)\n        else:\n            target = ensure_index(target)\n\n        if level is not None:\n            if method is not None:\n                raise TypeError(\"Fill method not supported if level passed\")\n            _, indexer, _ = self._join_level(\n                target, level, how=\"right\", return_indexers=True\n            )\n        else:\n            if self.equals(target):\n                indexer = None\n            else:\n                # check is_overlapping for IntervalIndex compat\n                if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                    indexer = self.get_indexer(\n                        target, method=method, limit=limit, tolerance=tolerance\n                    )\n                else:\n                    if method is not None or limit is not None:\n                        raise ValueError(\n                            \"cannot reindex a non-unique index \"\n                            \"with a method or limit\"\n                        )\n                    indexer, missing = self.get_indexer_non_unique(target)\n\n        if preserve_names and target.nlevels == 1 and target.name != self.name:\n            target = target.copy()\n            target.name = self.name\n\n        return target, indexer",
        "begin_line": 3262,
        "end_line": 3321,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.values#3813",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.values(self)",
        "snippet": "    def values(self) -> np.ndarray:\n        \"\"\"\n        Return an array representing the data in the Index.\n\n        .. warning::\n\n           We recommend using :attr:`Index.array` or\n           :meth:`Index.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        array: numpy.ndarray or ExtensionArray\n\n        See Also\n        --------\n        Index.array : Reference to the underlying data.\n        Index.to_numpy : A NumPy array representing the underlying data.\n        \"\"\"\n        return self._data.view(np.ndarray)",
        "begin_line": 3813,
        "end_line": 3832,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.000777000777000777,
            "pseudo_dstar_susp": 0.002061855670103093,
            "pseudo_tarantula_susp": 0.0007230657989877079,
            "pseudo_op2_susp": 0.002061855670103093,
            "pseudo_barinel_susp": 0.0007230657989877079
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._values#3845",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._values(self)",
        "snippet": "    def _values(self) -> Union[ExtensionArray, np.ndarray]:\n        \"\"\"\n        The best array representation.\n\n        This is an ndarray or ExtensionArray. This differs from\n        ``_ndarray_values``, which always returns an ndarray.\n\n        Both ``_values`` and ``_ndarray_values`` are consistent between\n        ``Series`` and ``Index`` (except for datetime64[ns], which returns\n        a DatetimeArray for _values on the Index, but ndarray[M8ns] on the\n        Series).\n\n        It may differ from the public '.values' method.\n\n        index             | values          | _values       | _ndarray_values |\n        ----------------- | --------------- | ------------- | --------------- |\n        Index             | ndarray         | ndarray       | ndarray         |\n        CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |\n        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |\n        PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |\n        IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |\n\n        See Also\n        --------\n        values\n        _ndarray_values\n        \"\"\"\n        return self._data",
        "begin_line": 3845,
        "end_line": 3873,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006031363088057901,
            "pseudo_dstar_susp": 0.0006242197253433209,
            "pseudo_tarantula_susp": 0.0006349206349206349,
            "pseudo_op2_susp": 0.0006242197253433209,
            "pseudo_barinel_susp": 0.0006349206349206349
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_engine_target#3875",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_engine_target(self)",
        "snippet": "    def _get_engine_target(self) -> np.ndarray:\n        \"\"\"\n        Get the ndarray that we can pass to the IndexEngine constructor.\n        \"\"\"\n        return self._values",
        "begin_line": 3875,
        "end_line": 3879,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006357279084551812,
            "pseudo_dstar_susp": 0.0006464124111182935,
            "pseudo_tarantula_susp": 0.0007230657989877079,
            "pseudo_op2_susp": 0.0006464124111182935,
            "pseudo_barinel_susp": 0.0007230657989877079
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__contains__#4015",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__contains__(self, key: Any)",
        "snippet": "    def __contains__(self, key: Any) -> bool:\n        \"\"\"\n        Return a boolean indicating whether the provided key is in the index.\n\n        Parameters\n        ----------\n        key : label\n            The key to check if it is present in the index.\n\n        Returns\n        -------\n        bool\n            Whether the key search is in the index.\n\n        Raises\n        ------\n        TypeError\n            If the key is not hashable.\n\n        See Also\n        --------\n        Index.isin : Returns an ndarray of boolean dtype indicating whether the\n            list-like key is in the index.\n\n        Examples\n        --------\n        >>> idx = pd.Index([1, 2, 3, 4])\n        >>> idx\n        Int64Index([1, 2, 3, 4], dtype='int64')\n\n        >>> 2 in idx\n        True\n        >>> 6 in idx\n        False\n        \"\"\"\n        hash(key)\n        try:\n            return key in self._engine\n        except (OverflowError, TypeError, ValueError):\n            return False",
        "begin_line": 4015,
        "end_line": 4054,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0014084507042253522,
            "pseudo_dstar_susp": 0.0007936507936507937,
            "pseudo_tarantula_susp": 0.0015267175572519084,
            "pseudo_op2_susp": 0.0007936507936507937,
            "pseudo_barinel_susp": 0.0015267175572519084
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.__getitem__#4062",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.__getitem__(self, key)",
        "snippet": "    def __getitem__(self, key):\n        \"\"\"\n        Override numpy.ndarray's __getitem__ method to work as desired.\n\n        This function adds lists and Series as valid boolean indexers\n        (ndarrays only supports ndarray with dtype=bool).\n\n        If resulting ndim != 1, plain ndarray is returned instead of\n        corresponding `Index` subclass.\n\n        \"\"\"\n        # There's no custom logic to be implemented in __getslice__, so it's\n        # not overloaded intentionally.\n        getitem = self._data.__getitem__\n        promote = self._shallow_copy\n\n        if is_scalar(key):\n            key = com.cast_scalar_indexer(key)\n            return getitem(key)\n\n        if isinstance(key, slice):\n            # This case is separated from the conditional above to avoid\n            # pessimization of basic indexing.\n            return promote(getitem(key))\n\n        if com.is_bool_indexer(key):\n            key = np.asarray(key, dtype=bool)\n\n        result = getitem(key)\n        if not is_scalar(result):\n            if np.ndim(result) > 1:\n                deprecate_ndim_indexing(result)\n                return result\n            return promote(result)\n        else:\n            return result",
        "begin_line": 4062,
        "end_line": 4097,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0020325203252032522,
            "pseudo_dstar_susp": 0.0014947683109118087,
            "pseudo_tarantula_susp": 0.00228310502283105,
            "pseudo_op2_susp": 0.0014947683109118087,
            "pseudo_barinel_susp": 0.00228310502283105
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.equals#4198",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.equals(self, other)",
        "snippet": "    def equals(self, other) -> bool:\n        \"\"\"\n        Determine if two Index objects contain the same elements.\n\n        Returns\n        -------\n        bool\n            True if \"other\" is an Index and it has the same elements as calling\n            index; False otherwise.\n        \"\"\"\n        if self.is_(other):\n            return True\n\n        if not isinstance(other, Index):\n            return False\n\n        if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n            # if other is not object, use other's logic for coercion\n            return other.equals(self)\n\n        if isinstance(other, ABCMultiIndex):\n            # d-level MultiIndex can equal d-tuple Index\n            return other.equals(self)\n\n        if is_extension_array_dtype(other.dtype):\n            # All EA-backed Index subclasses override equals\n            return other.equals(self)\n\n        return array_equivalent(self._values, other._values)",
        "begin_line": 4198,
        "end_line": 4226,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0012422360248447205,
            "pseudo_dstar_susp": 0.0007479431563201197,
            "pseudo_tarantula_susp": 0.0013605442176870747,
            "pseudo_op2_susp": 0.0007479431563201197,
            "pseudo_barinel_susp": 0.0013605442176870747
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.identical#4228",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.identical(self, other)",
        "snippet": "    def identical(self, other) -> bool:\n        \"\"\"\n        Similar to equals, but check that other comparable attributes are\n        also equal.\n\n        Returns\n        -------\n        bool\n            If two Index objects have equal elements and same type True,\n            otherwise False.\n        \"\"\"\n        return (\n            self.equals(other)\n            and all(\n                (\n                    getattr(self, c, None) == getattr(other, c, None)\n                    for c in self._comparables\n                )\n            )\n            and type(self) == type(other)\n        )",
        "begin_line": 4228,
        "end_line": 4248,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.sort_values#4354",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.sort_values(self, return_indexer: bool=False, ascending: bool=True)",
        "snippet": "    def sort_values(self, return_indexer: bool = False, ascending: bool = True):\n        \"\"\"\n        Return a sorted copy of the index.\n\n        Return a sorted copy of the index, and optionally return the indices\n        that sorted the index itself.\n\n        Parameters\n        ----------\n        return_indexer : bool, default False\n            Should the indices that would sort the index be returned.\n        ascending : bool, default True\n            Should the index values be sorted in an ascending order.\n\n        Returns\n        -------\n        sorted_index : pandas.Index\n            Sorted copy of the index.\n        indexer : numpy.ndarray, optional\n            The indices that the index itself was sorted by.\n\n        See Also\n        --------\n        Series.sort_values : Sort values of a Series.\n        DataFrame.sort_values : Sort values in a DataFrame.\n\n        Examples\n        --------\n        >>> idx = pd.Index([10, 100, 1, 1000])\n        >>> idx\n        Int64Index([10, 100, 1, 1000], dtype='int64')\n\n        Sort values in ascending order (default behavior).\n\n        >>> idx.sort_values()\n        Int64Index([1, 10, 100, 1000], dtype='int64')\n\n        Sort values in descending order, and also get the indices `idx` was\n        sorted by.\n\n        >>> idx.sort_values(ascending=False, return_indexer=True)\n        (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n        \"\"\"\n        _as = self.argsort()\n        if not ascending:\n            _as = _as[::-1]\n\n        sorted_index = self.take(_as)\n\n        if return_indexer:\n            return sorted_index, _as\n        else:\n            return sorted_index",
        "begin_line": 4354,
        "end_line": 4406,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.argsort#4472",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.argsort(self, *args, **kwargs)",
        "snippet": "    def argsort(self, *args, **kwargs) -> np.ndarray:\n        \"\"\"\n        Return the integer indices that would sort the index.\n\n        Parameters\n        ----------\n        *args\n            Passed to `numpy.ndarray.argsort`.\n        **kwargs\n            Passed to `numpy.ndarray.argsort`.\n\n        Returns\n        -------\n        numpy.ndarray\n            Integer indices that would sort the index if used as\n            an indexer.\n\n        See Also\n        --------\n        numpy.argsort : Similar method for NumPy arrays.\n        Index.sort_values : Return sorted copy of Index.\n\n        Examples\n        --------\n        >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n        >>> idx\n        Index(['b', 'a', 'd', 'c'], dtype='object')\n\n        >>> order = idx.argsort()\n        >>> order\n        array([1, 0, 3, 2])\n\n        >>> idx[order]\n        Index(['a', 'b', 'c', 'd'], dtype='object')\n        \"\"\"\n        result = self.asi8\n        if result is None:\n            result = np.array(self)\n        return result.argsort(*args, **kwargs)",
        "begin_line": 4472,
        "end_line": 4510,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.get_value#4512",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.get_value(self, series: 'Series', key)",
        "snippet": "    def get_value(self, series: \"Series\", key):\n        \"\"\"\n        Fast lookup of value from 1-dimensional ndarray. Only use this if you\n        know what you're doing.\n\n        Returns\n        -------\n        scalar or Series\n        \"\"\"\n        if not is_scalar(key):\n            # if key is not a scalar, directly raise an error (the code below\n            # would convert to numpy arrays and raise later any way) - GH29926\n            raise InvalidIndexError(key)\n\n        try:\n            # GH 20882, 21257\n            # First try to convert the key to a location\n            # If that fails, raise a KeyError if an integer\n            # index, otherwise, see if key is an integer, and\n            # try that\n            loc = self.get_loc(key)\n        except KeyError:\n            if not self._should_fallback_to_positional():\n                raise\n            elif is_integer(key):\n                # If the Index cannot hold integer, then this is unambiguously\n                #  a locational lookup.\n                loc = key\n            else:\n                raise\n\n        return self._get_values_for_loc(series, loc, key)",
        "begin_line": 4512,
        "end_line": 4543,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._get_values_for_loc#4553",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._get_values_for_loc(self, series: 'Series', loc, key)",
        "snippet": "    def _get_values_for_loc(self, series: \"Series\", loc, key):\n        \"\"\"\n        Do a positional lookup on the given Series, returning either a scalar\n        or a Series.\n\n        Assumes that `series.index is self`\n\n        key is included for MultiIndex compat.\n        \"\"\"\n        if is_integer(loc):\n            return series._values[loc]\n\n        return series.iloc[loc]",
        "begin_line": 4553,
        "end_line": 4565,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_promote#4643",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_promote(self, other)",
        "snippet": "    def _maybe_promote(self, other):\n        # A hack, but it works\n\n        if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n            return type(other)(self), other\n        elif self.inferred_type == \"boolean\":\n            if not is_object_dtype(self.dtype):\n                return self.astype(\"object\"), other.astype(\"object\")\n        return self, other",
        "begin_line": 4643,
        "end_line": 4651,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index._maybe_cast_indexer#4880",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index._maybe_cast_indexer(self, key)",
        "snippet": "    def _maybe_cast_indexer(self, key):\n        \"\"\"\n        If we have a float key and are not a floating index, then try to cast\n        to an int if equivalent.\n        \"\"\"\n        if not self.is_floating():\n            return com.cast_scalar_indexer(key)\n        return key",
        "begin_line": 4880,
        "end_line": 4887,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.Index.shape#5406",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base.Index",
        "signature": "pandas.core.indexes.base.Index.shape(self)",
        "snippet": "    def shape(self):\n        \"\"\"\n        Return a tuple of the shape of the underlying data.\n        \"\"\"\n        # not using \"(len(self), )\" to return \"correct\" shape if the values\n        # consists of a >1 D array (see GH-27775)\n        # overridden in MultiIndex.shape to avoid materializing the values\n        return self._values.shape",
        "begin_line": 5406,
        "end_line": 5413,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.ensure_index#5462",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.ensure_index(index_like, copy=False)",
        "snippet": "def ensure_index(index_like, copy=False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index : sequence\n        An Index or other sequence\n    copy : bool\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n                ('a', 'c')],\n               dtype='object')\n               )\n\n    See Also\n    --------\n    ensure_index_from_sequences\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            from copy import copy\n\n            index_like = copy(index_like)\n\n    return Index(index_like)",
        "begin_line": 5462,
        "end_line": 5526,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0024509803921568627,
            "pseudo_dstar_susp": 0.0014204545454545455,
            "pseudo_tarantula_susp": 0.002506265664160401,
            "pseudo_op2_susp": 0.0014204545454545455,
            "pseudo_barinel_susp": 0.002506265664160401
        }
    },
    {
        "name": "pandas.core.indexes.base._ensure_has_len#5529",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._ensure_has_len(seq)",
        "snippet": "def _ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
        "begin_line": 5529,
        "end_line": 5538,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.base.default_index#5556",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.default_index(n)",
        "snippet": "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
        "begin_line": 5556,
        "end_line": 5559,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0017605633802816902,
            "pseudo_dstar_susp": 0.005154639175257732,
            "pseudo_tarantula_susp": 0.001122334455667789,
            "pseudo_op2_susp": 0.005154639175257732,
            "pseudo_barinel_susp": 0.001122334455667789
        }
    },
    {
        "name": "pandas.core.indexes.base.maybe_extract_name#5562",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base.maybe_extract_name(name, obj, cls)",
        "snippet": "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
        "begin_line": 5562,
        "end_line": 5575,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0007604562737642585,
            "pseudo_dstar_susp": 0.0020325203252032522,
            "pseudo_tarantula_susp": 0.000708215297450425,
            "pseudo_op2_susp": 0.0020325203252032522,
            "pseudo_barinel_susp": 0.000708215297450425
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_with_dtype#5578",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool)",
        "snippet": "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
        "begin_line": 5578,
        "end_line": 5629,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0014124293785310734,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.0014124293785310734,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_cast_data_without_dtype#5632",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_cast_data_without_dtype(subarr)",
        "snippet": "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
        "begin_line": 5632,
        "end_line": 5700,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0013736263736263737,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.0013736263736263737,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.core.indexes.base._try_convert_to_int_array#5703",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype)",
        "snippet": "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
        "begin_line": 5703,
        "end_line": 5743,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0010834236186348862,
            "pseudo_dstar_susp": 0.0006997900629811056,
            "pseudo_tarantula_susp": 0.0011862396204033216,
            "pseudo_op2_susp": 0.0006997900629811056,
            "pseudo_barinel_susp": 0.0011862396204033216
        }
    },
    {
        "name": "pandas.core.indexes.base._maybe_asobject#5746",
        "src_path": "pandas/core/indexes/base.py",
        "class_name": "pandas.core.indexes.base",
        "signature": "pandas.core.indexes.base._maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
        "snippet": "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
        "begin_line": 5746,
        "end_line": 5780,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001822821728034998,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.dtypes.generic.create_pandas_abc_type#6",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic.create_pandas_abc_type(name, attr, comp)",
        "snippet": "def create_pandas_abc_type(name, attr, comp):\n\n    # https://github.com/python/mypy/issues/1006\n    # error: 'classmethod' used with a non-method\n    @classmethod  # type: ignore\n    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp\n\n    dct = dict(__instancecheck__=_check, __subclasscheck__=_check)\n    meta = type(\"ABCBase\", (type,), dct)\n    return meta(name, tuple(), dct)",
        "begin_line": 6,
        "end_line": 16,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006397952655150352,
            "pseudo_dstar_susp": 0.0016025641025641025,
            "pseudo_tarantula_susp": 0.0006093845216331506,
            "pseudo_op2_susp": 0.0016025641025641025,
            "pseudo_barinel_susp": 0.0006093845216331506
        }
    },
    {
        "name": "pandas.core.dtypes.generic._check#11",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic",
        "signature": "pandas.core.dtypes.generic._check(cls, inst)",
        "snippet": "    def _check(cls, inst) -> bool:\n        return getattr(inst, attr, \"_typ\") in comp",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.0006397952655150352,
            "pseudo_dstar_susp": 0.0016025641025641025,
            "pseudo_tarantula_susp": 0.0006093845216331506,
            "pseudo_op2_susp": 0.0016025641025641025,
            "pseudo_barinel_susp": 0.0006093845216331506
        }
    },
    {
        "name": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__#78",
        "src_path": "pandas/core/dtypes/generic.py",
        "class_name": "pandas.core.dtypes.generic._ABCGeneric",
        "signature": "pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls, inst)",
        "snippet": "    def __instancecheck__(cls, inst) -> bool:\n        return hasattr(inst, \"_data\")",
        "begin_line": 78,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00019611688566385565,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__init__#32",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__init__(self, values: np.ndarray, mask: np.ndarray, copy: bool=False)",
        "snippet": "    def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):\n        if copy:\n            values = values.copy()\n            mask = mask.copy()\n\n        self._data = values\n        self._mask = mask",
        "begin_line": 32,
        "end_line": 38,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__iter__#50",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__iter__(self)",
        "snippet": "    def __iter__(self):\n        for i in range(len(self)):\n            if self._mask[i]:\n                yield self.dtype.na_value\n            else:\n                yield self._data[i]",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.__len__#57",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray.to_numpy#63",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray.to_numpy(self, dtype=None, copy: bool=False, na_value: Scalar=lib.no_default)",
        "snippet": "    def to_numpy(\n        self, dtype=None, copy: bool = False, na_value: Scalar = lib.no_default,\n    ) -> np.ndarray:\n        \"\"\"\n        Convert to a NumPy Array.\n\n        By default converts to an object-dtype NumPy array. Specify the `dtype` and\n        `na_value` keywords to customize the conversion.\n\n        Parameters\n        ----------\n        dtype : dtype, default object\n            The numpy dtype to convert to.\n        copy : bool, default False\n            Whether to ensure that the returned value is a not a view on\n            the array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary. This is typically\n            only possible when no missing values are present and `dtype`\n            is the equivalent numpy dtype.\n        na_value : scalar, optional\n             Scalar missing value indicator to use in numpy array. Defaults\n             to the native missing value indicator of this array (pd.NA).\n\n        Returns\n        -------\n        numpy.ndarray\n\n        Examples\n        --------\n        An object-dtype is the default result\n\n        >>> a = pd.array([True, False, pd.NA], dtype=\"boolean\")\n        >>> a.to_numpy()\n        array([True, False, NA], dtype=object)\n\n        When no missing values are present, an equivalent dtype can be used.\n\n        >>> pd.array([True, False], dtype=\"boolean\").to_numpy(dtype=\"bool\")\n        array([ True, False])\n        >>> pd.array([1, 2], dtype=\"Int64\").to_numpy(\"int64\")\n        array([1, 2])\n\n        However, requesting such dtype will raise a ValueError if\n        missing values are present and the default missing value :attr:`NA`\n        is used.\n\n        >>> a = pd.array([True, False, pd.NA], dtype=\"boolean\")\n        >>> a\n        <BooleanArray>\n        [True, False, NA]\n        Length: 3, dtype: boolean\n\n        >>> a.to_numpy(dtype=\"bool\")\n        Traceback (most recent call last):\n        ...\n        ValueError: cannot convert to bool numpy array in presence of missing values\n\n        Specify a valid `na_value` instead\n\n        >>> a.to_numpy(dtype=\"bool\", na_value=False)\n        array([ True, False, False])\n        \"\"\"\n        if na_value is lib.no_default:\n            na_value = libmissing.NA\n        if dtype is None:\n            dtype = object\n        if self._hasna:\n            if (\n                not (is_object_dtype(dtype) or is_string_dtype(dtype))\n                and na_value is libmissing.NA\n            ):\n                raise ValueError(\n                    f\"cannot convert to '{dtype}'-dtype NumPy array \"\n                    \"with missing values. Specify an appropriate 'na_value' \"\n                    \"for this dtype.\"\n                )\n            # don't pass copy to astype -> always need a copy since we are mutating\n            data = self._data.astype(dtype)\n            data[self._mask] = na_value\n        else:\n            data = self._data.astype(dtype, copy=copy)\n        return data",
        "begin_line": 63,
        "end_line": 145,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.core.arrays.masked.BaseMaskedArray._hasna#165",
        "src_path": "pandas/core/arrays/masked.py",
        "class_name": "pandas.core.arrays.masked.BaseMaskedArray",
        "signature": "pandas.core.arrays.masked.BaseMaskedArray._hasna(self)",
        "snippet": "    def _hasna(self) -> bool:\n        # Note: this is expensive right now! The hope is that we can\n        # make this faster by having an optional mask, but not have to change\n        # source code using it..\n        return self._mask.any()",
        "begin_line": 165,
        "end_line": 169,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.008928571428571428,
            "pseudo_dstar_susp": 0.001148105625717566,
            "pseudo_tarantula_susp": 0.008771929824561403,
            "pseudo_op2_susp": 0.001148105625717566,
            "pseudo_barinel_susp": 0.008771929824561403
        }
    },
    {
        "name": "pandas.util._print_versions._get_commit_hash#14",
        "src_path": "pandas/util/_print_versions.py",
        "class_name": "pandas.util._print_versions",
        "signature": "pandas.util._print_versions._get_commit_hash()",
        "snippet": "def _get_commit_hash() -> Optional[str]:\n    \"\"\"\n    Use vendored versioneer code to get git hash, which handles\n    git worktree correctly.\n    \"\"\"\n    from pandas._version import get_versions\n\n    versions = get_versions()\n    return versions[\"full-revisionid\"]",
        "begin_line": 14,
        "end_line": 22,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._print_versions._get_sys_info#25",
        "src_path": "pandas/util/_print_versions.py",
        "class_name": "pandas.util._print_versions",
        "signature": "pandas.util._print_versions._get_sys_info()",
        "snippet": "def _get_sys_info() -> Dict[str, JSONSerializable]:\n    \"\"\"\n    Returns system information as a JSON serializable dictionary.\n    \"\"\"\n    uname_result = platform.uname()\n    language_code, encoding = locale.getlocale()\n    return {\n        \"commit\": _get_commit_hash(),\n        \"python\": \".\".join(str(i) for i in sys.version_info),\n        \"python-bits\": struct.calcsize(\"P\") * 8,\n        \"OS\": uname_result.system,\n        \"OS-release\": uname_result.release,\n        \"Version\": uname_result.version,\n        \"machine\": uname_result.machine,\n        \"processor\": uname_result.processor,\n        \"byteorder\": sys.byteorder,\n        \"LC_ALL\": os.environ.get(\"LC_ALL\"),\n        \"LANG\": os.environ.get(\"LANG\"),\n        \"LOCALE\": {\"language-code\": language_code, \"encoding\": encoding},\n    }",
        "begin_line": 25,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._print_versions._get_dependency_info#47",
        "src_path": "pandas/util/_print_versions.py",
        "class_name": "pandas.util._print_versions",
        "signature": "pandas.util._print_versions._get_dependency_info()",
        "snippet": "def _get_dependency_info() -> Dict[str, JSONSerializable]:\n    \"\"\"\n    Returns dependency information as a JSON serializable dictionary.\n    \"\"\"\n    deps = [\n        \"pandas\",\n        # required\n        \"numpy\",\n        \"pytz\",\n        \"dateutil\",\n        # install / build,\n        \"pip\",\n        \"setuptools\",\n        \"Cython\",\n        # test\n        \"pytest\",\n        \"hypothesis\",\n        # docs\n        \"sphinx\",\n        # Other, need a min version\n        \"blosc\",\n        \"feather\",\n        \"xlsxwriter\",\n        \"lxml.etree\",\n        \"html5lib\",\n        \"pymysql\",\n        \"psycopg2\",\n        \"jinja2\",\n        # Other, not imported.\n        \"IPython\",\n        \"pandas_datareader\",\n    ]\n    deps.extend(list(VERSIONS))\n\n    result: Dict[str, JSONSerializable] = {}\n    for modname in deps:\n        mod = import_optional_dependency(\n            modname, raise_on_missing=False, on_version=\"ignore\"\n        )\n        result[modname] = _get_version(mod) if mod else None\n    return result",
        "begin_line": 47,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._print_versions.show_versions#90",
        "src_path": "pandas/util/_print_versions.py",
        "class_name": "pandas.util._print_versions",
        "signature": "pandas.util._print_versions.show_versions(as_json: Union[str, bool]=False)",
        "snippet": "def show_versions(as_json: Union[str, bool] = False) -> None:\n    sys_info = _get_sys_info()\n    deps = _get_dependency_info()\n\n    if as_json:\n        j = dict(system=sys_info, dependencies=deps)\n\n        if as_json is True:\n            print(j)\n        else:\n            assert isinstance(as_json, str)  # needed for mypy\n            with codecs.open(as_json, \"wb\", encoding=\"utf8\") as f:\n                json.dump(j, f, indent=2)\n\n    else:\n        assert isinstance(sys_info[\"LOCALE\"], dict)  # needed for mypy\n        language_code = sys_info[\"LOCALE\"][\"language-code\"]\n        encoding = sys_info[\"LOCALE\"][\"encoding\"]\n        sys_info[\"LOCALE\"] = f\"{language_code}.{encoding}\"\n\n        maxlen = max(len(x) for x in deps)\n        print(\"\\nINSTALLED VERSIONS\")\n        print(\"------------------\")\n        for k, v in sys_info.items():\n            print(f\"{k:<{maxlen}}: {v}\")\n        print(\"\")\n        for k, v in deps.items():\n            print(f\"{k:<{maxlen}}: {v}\")",
        "begin_line": 90,
        "end_line": 117,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._exceptions.rewrite_exception#6",
        "src_path": "pandas/util/_exceptions.py",
        "class_name": "pandas.util._exceptions",
        "signature": "pandas.util._exceptions.rewrite_exception(old_name: str, new_name: str)",
        "snippet": "def rewrite_exception(old_name: str, new_name: str):\n    \"\"\"\n    Rewrite the message of an exception.\n    \"\"\"\n    try:\n        yield\n    except Exception as err:\n        msg = err.args[0]\n        msg = msg.replace(old_name, new_name)\n        args: Tuple[str, ...] = (msg,)\n        if len(err.args) > 1:\n            args = args + err.args[1:]\n        err.args = args\n        raise",
        "begin_line": 6,
        "end_line": 19,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.__new__#207",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.__new__(cls, data, closed=None, dtype=None, copy: bool=False, name=None, verify_integrity: bool=True)",
        "snippet": "    def __new__(\n        cls,\n        data,\n        closed=None,\n        dtype=None,\n        copy: bool = False,\n        name=None,\n        verify_integrity: bool = True,\n    ):\n\n        name = maybe_extract_name(name, data, cls)\n\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray(\n                data,\n                closed=closed,\n                copy=copy,\n                dtype=dtype,\n                verify_integrity=verify_integrity,\n            )\n\n        return cls._simple_new(array, name)",
        "begin_line": 207,
        "end_line": 228,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._simple_new#231",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._simple_new(cls, array: IntervalArray, name: Label=None)",
        "snippet": "    def _simple_new(cls, array: IntervalArray, name: Label = None):\n        \"\"\"\n        Construct from an IntervalArray\n\n        Parameters\n        ----------\n        array : IntervalArray\n        name : Label, default None\n            Attached as result.name\n        \"\"\"\n        assert isinstance(array, IntervalArray), type(array)\n\n        result = IntervalMixin.__new__(cls)\n        result._data = array\n        result.name = name\n        result._cache = {}\n        result._no_setting_name = False\n        result._reset_identity()\n        return result",
        "begin_line": 231,
        "end_line": 249,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.from_breaks#268",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.from_breaks(cls, breaks, closed: str='right', name=None, copy: bool=False, dtype=None)",
        "snippet": "    def from_breaks(\n        cls, breaks, closed: str = \"right\", name=None, copy: bool = False, dtype=None\n    ):\n        with rewrite_exception(\"IntervalArray\", cls.__name__):\n            array = IntervalArray.from_breaks(\n                breaks, closed=closed, copy=copy, dtype=dtype\n            )\n        return cls._simple_new(array, name=name)",
        "begin_line": 268,
        "end_line": 275,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex._isnan#347",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex._isnan(self)",
        "snippet": "    def _isnan(self):\n        \"\"\"\n        Return a mask indicating if each value is NA.\n        \"\"\"\n        if self._mask is None:\n            self._mask = isna(self.left)\n        return self._mask",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.values#389",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.values(self)",
        "snippet": "    def values(self) -> IntervalArray:\n        \"\"\"\n        Return the IntervalIndex's data as an IntervalArray.\n        \"\"\"\n        return self._data",
        "begin_line": 389,
        "end_line": 393,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.IntervalIndex.is_unique#439",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval.IntervalIndex",
        "signature": "pandas.core.indexes.interval.IntervalIndex.is_unique(self)",
        "snippet": "    def is_unique(self):\n        \"\"\"\n        Return True if the IntervalIndex contains unique elements, else False.\n        \"\"\"\n        left = self.left\n        right = self.right\n\n        if self.isna().sum() > 1:\n            return False\n\n        if left.is_unique or right.is_unique:\n            return True\n\n        seen_pairs = set()\n        check_idx = np.where(left.duplicated(keep=False))[0]\n        for idx in check_idx:\n            pair = (left[idx], right[idx])\n            if pair in seen_pairs:\n                return False\n            seen_pairs.add(pair)\n\n        return True",
        "begin_line": 439,
        "end_line": 460,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval._is_valid_endpoint#1146",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval._is_valid_endpoint(endpoint)",
        "snippet": "def _is_valid_endpoint(endpoint) -> bool:\n    \"\"\"\n    Helper for interval_range to check if start/end are valid types.\n    \"\"\"\n    return any(\n        [\n            is_number(endpoint),\n            isinstance(endpoint, Timestamp),\n            isinstance(endpoint, Timedelta),\n            endpoint is None,\n        ]\n    )",
        "begin_line": 1146,
        "end_line": 1157,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00021422450728363326,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval._is_type_compatible#1160",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval._is_type_compatible(a, b)",
        "snippet": "def _is_type_compatible(a, b) -> bool:\n    \"\"\"\n    Helper for interval_range to check type compat of start/end/freq.\n    \"\"\"\n    is_ts_compat = lambda x: isinstance(x, (Timestamp, DateOffset))\n    is_td_compat = lambda x: isinstance(x, (Timedelta, DateOffset))\n    return (\n        (is_number(a) and is_number(b))\n        or (is_ts_compat(a) and is_ts_compat(b))\n        or (is_td_compat(a) and is_td_compat(b))\n        or com.any_none(a, b)\n    )",
        "begin_line": 1160,
        "end_line": 1171,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.indexes.interval.interval_range#1174",
        "src_path": "pandas/core/indexes/interval.py",
        "class_name": "pandas.core.indexes.interval",
        "signature": "pandas.core.indexes.interval.interval_range(start=None, end=None, periods=None, freq=None, name=None, closed='right')",
        "snippet": "def interval_range(\n    start=None, end=None, periods=None, freq=None, name=None, closed=\"right\"\n):\n    \"\"\"\n    Return a fixed frequency IntervalIndex.\n\n    Parameters\n    ----------\n    start : numeric or datetime-like, default None\n        Left bound for generating intervals.\n    end : numeric or datetime-like, default None\n        Right bound for generating intervals.\n    periods : int, default None\n        Number of periods to generate.\n    freq : numeric, str, or DateOffset, default None\n        The length of each interval. Must be consistent with the type of start\n        and end, e.g. 2 for numeric, or '5H' for datetime-like.  Default is 1\n        for numeric and 'D' for datetime-like.\n    name : str, default None\n        Name of the resulting IntervalIndex.\n    closed : {'left', 'right', 'both', 'neither'}, default 'right'\n        Whether the intervals are closed on the left-side, right-side, both\n        or neither.\n\n    Returns\n    -------\n    IntervalIndex\n\n    See Also\n    --------\n    IntervalIndex : An Index of intervals that are all closed on the same side.\n\n    Notes\n    -----\n    Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,\n    exactly three must be specified. If ``freq`` is omitted, the resulting\n    ``IntervalIndex`` will have ``periods`` linearly spaced elements between\n    ``start`` and ``end``, inclusively.\n\n    To learn more about datetime-like frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n    Numeric ``start`` and  ``end`` is supported.\n\n    >>> pd.interval_range(start=0, end=5)\n    IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\n                  closed='right', dtype='interval[int64]')\n\n    Additionally, datetime-like input is also supported.\n\n    >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n    ...                   end=pd.Timestamp('2017-01-04'))\n    IntervalIndex([(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03],\n                   (2017-01-03, 2017-01-04]],\n                  closed='right', dtype='interval[datetime64[ns]]')\n\n    The ``freq`` parameter specifies the frequency between the left and right.\n    endpoints of the individual intervals within the ``IntervalIndex``.  For\n    numeric ``start`` and ``end``, the frequency must also be numeric.\n\n    >>> pd.interval_range(start=0, periods=4, freq=1.5)\n    IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n                  closed='right', dtype='interval[float64]')\n\n    Similarly, for datetime-like ``start`` and ``end``, the frequency must be\n    convertible to a DateOffset.\n\n    >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),\n    ...                   periods=3, freq='MS')\n    IntervalIndex([(2017-01-01, 2017-02-01], (2017-02-01, 2017-03-01],\n                   (2017-03-01, 2017-04-01]],\n                  closed='right', dtype='interval[datetime64[ns]]')\n\n    Specify ``start``, ``end``, and ``periods``; the frequency is generated\n    automatically (linearly spaced).\n\n    >>> pd.interval_range(start=0, end=6, periods=4)\n    IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],\n              closed='right',\n              dtype='interval[float64]')\n\n    The ``closed`` parameter specifies which endpoints of the individual\n    intervals within the ``IntervalIndex`` are closed.\n\n    >>> pd.interval_range(end=5, periods=4, closed='both')\n    IntervalIndex([[1, 2], [2, 3], [3, 4], [4, 5]],\n                  closed='both', dtype='interval[int64]')\n    \"\"\"\n    start = com.maybe_box_datetimelike(start)\n    end = com.maybe_box_datetimelike(end)\n    endpoint = start if start is not None else end\n\n    if freq is None and com.any_none(periods, start, end):\n        freq = 1 if is_number(endpoint) else \"D\"\n\n    if com.count_not_none(start, end, periods, freq) != 3:\n        raise ValueError(\n            \"Of the four parameters: start, end, periods, and \"\n            \"freq, exactly three must be specified\"\n        )\n\n    if not _is_valid_endpoint(start):\n        raise ValueError(f\"start must be numeric or datetime-like, got {start}\")\n    elif not _is_valid_endpoint(end):\n        raise ValueError(f\"end must be numeric or datetime-like, got {end}\")\n\n    if is_float(periods):\n        periods = int(periods)\n    elif not is_integer(periods) and periods is not None:\n        raise TypeError(f\"periods must be a number, got {periods}\")\n\n    if freq is not None and not is_number(freq):\n        try:\n            freq = to_offset(freq)\n        except ValueError as err:\n            raise ValueError(\n                f\"freq must be numeric or convertible to DateOffset, got {freq}\"\n            ) from err\n\n    # verify type compatibility\n    if not all(\n        [\n            _is_type_compatible(start, end),\n            _is_type_compatible(start, freq),\n            _is_type_compatible(end, freq),\n        ]\n    ):\n        raise TypeError(\"start, end, freq need to be type compatible\")\n\n    # +1 to convert interval count to breaks count (n breaks = n-1 intervals)\n    if periods is not None:\n        periods += 1\n\n    if is_number(endpoint):\n        # force consistency between start/end/freq (lower end if freq skips it)\n        if com.all_not_none(start, end, freq):\n            end -= (end - start) % freq\n\n        # compute the period/start/end if unspecified (at most one)\n        if periods is None:\n            periods = int((end - start) // freq) + 1\n        elif start is None:\n            start = end - (periods - 1) * freq\n        elif end is None:\n            end = start + (periods - 1) * freq\n\n        breaks = np.linspace(start, end, periods)\n        if all(is_integer(x) for x in com.not_none(start, end, freq)):\n            # np.linspace always produces float output\n            breaks = maybe_downcast_to_dtype(breaks, \"int64\")\n    else:\n        # delegate to the appropriate range function\n        if isinstance(endpoint, Timestamp):\n            range_func = date_range\n        else:\n            range_func = timedelta_range\n\n        breaks = range_func(start=start, end=end, periods=periods, freq=freq)\n\n    return IntervalIndex.from_breaks(breaks, name=name, closed=closed)",
        "begin_line": 1174,
        "end_line": 1335,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.disallow.check#57",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.check(self, obj)",
        "snippet": "    def check(self, obj) -> bool:\n        return hasattr(obj, \"dtype\") and issubclass(obj.dtype.type, self.dtypes)",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.disallow.__call__#60",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow.__call__(self, f)",
        "snippet": "    def __call__(self, f):\n        @functools.wraps(f)\n        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise\n\n        return _f",
        "begin_line": 60,
        "end_line": 81,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.disallow._f#62",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops.disallow",
        "signature": "pandas.core.nanops.disallow._f(*args, **kwargs)",
        "snippet": "        def _f(*args, **kwargs):\n            obj_iter = itertools.chain(args, kwargs.values())\n            if any(self.check(obj) for obj in obj_iter):\n                f_name = f.__name__.replace(\"nan\", \"\")\n                raise TypeError(\n                    f\"reduction operation '{f_name}' not allowed for this dtype\"\n                )\n            try:\n                with np.errstate(invalid=\"ignore\"):\n                    return f(*args, **kwargs)\n            except ValueError as e:\n                # we want to transform an object array\n                # ValueError message to the more typical TypeError\n                # e.g. this is normally a disallowed function on\n                # object arrays that contain strings\n                if is_object_dtype(args[0]):\n                    raise TypeError(e) from e\n                raise",
        "begin_line": 62,
        "end_line": 79,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._get_fill_value#168",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_fill_value(dtype: Dtype, fill_value: Optional[Scalar]=None, fill_value_typ=None)",
        "snippet": "def _get_fill_value(\n    dtype: Dtype, fill_value: Optional[Scalar] = None, fill_value_typ=None\n):\n    \"\"\" return the correct fill value for the dtype of the values \"\"\"\n    if fill_value is not None:\n        return fill_value\n    if _na_ok_dtype(dtype):\n        if fill_value_typ is None:\n            return np.nan\n        else:\n            if fill_value_typ == \"+inf\":\n                return np.inf\n            else:\n                return -np.inf\n    else:\n        if fill_value_typ is None:\n            return iNaT\n        else:\n            if fill_value_typ == \"+inf\":\n                # need the max int here\n                return _int64_max\n            else:\n                return iNaT",
        "begin_line": 168,
        "end_line": 190,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._maybe_get_mask#193",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_get_mask(values: np.ndarray, skipna: bool, mask: Optional[np.ndarray])",
        "snippet": "def _maybe_get_mask(\n    values: np.ndarray, skipna: bool, mask: Optional[np.ndarray]\n) -> Optional[np.ndarray]:\n    \"\"\"\n    Compute a mask if and only if necessary.\n\n    This function will compute a mask iff it is necessary. Otherwise,\n    return the provided mask (potentially None) when a mask does not need to be\n    computed.\n\n    A mask is never necessary if the values array is of boolean or integer\n    dtypes, as these are incapable of storing NaNs. If passing a NaN-capable\n    dtype that is interpretable as either boolean or integer data (eg,\n    timedelta64), a mask must be provided.\n\n    If the skipna parameter is False, a new mask will not be computed.\n\n    The mask is computed using isna() by default. Setting invert=True selects\n    notna() as the masking function.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    mask : Optional[ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    Optional[np.ndarray]\n    \"\"\"\n    if mask is None:\n        if is_bool_dtype(values.dtype) or is_integer_dtype(values.dtype):\n            # Boolean data cannot contain nulls, so signal via mask being None\n            return None\n\n        if skipna:\n            mask = isna(values)\n\n    return mask",
        "begin_line": 193,
        "end_line": 234,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._get_values#237",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._get_values(values: np.ndarray, skipna: bool, fill_value: Any=None, fill_value_typ: Optional[str]=None, mask: Optional[np.ndarray]=None)",
        "snippet": "def _get_values(\n    values: np.ndarray,\n    skipna: bool,\n    fill_value: Any = None,\n    fill_value_typ: Optional[str] = None,\n    mask: Optional[np.ndarray] = None,\n) -> Tuple[np.ndarray, Optional[np.ndarray], np.dtype, np.dtype, Any]:\n    \"\"\"\n    Utility to get the values view, mask, dtype, dtype_max, and fill_value.\n\n    If both mask and fill_value/fill_value_typ are not None and skipna is True,\n    the values array will be copied.\n\n    For input arrays of boolean or integer dtypes, copies will only occur if a\n    precomputed mask, a fill_value/fill_value_typ, and skipna=True are\n    provided.\n\n    Parameters\n    ----------\n    values : ndarray\n        input array to potentially compute mask for\n    skipna : bool\n        boolean for whether NaNs should be skipped\n    fill_value : Any\n        value to fill NaNs with\n    fill_value_typ : str\n        Set to '+inf' or '-inf' to handle dtype-specific infinities\n    mask : Optional[np.ndarray]\n        nan-mask if known\n\n    Returns\n    -------\n    values : ndarray\n        Potential copy of input value array\n    mask : Optional[ndarray[bool]]\n        Mask for values, if deemed necessary to compute\n    dtype : dtype\n        dtype for values\n    dtype_max : dtype\n        platform independent dtype\n    fill_value : Any\n        fill value used\n    \"\"\"\n    # In _get_values is only called from within nanops, and in all cases\n    #  with scalar fill_value.  This guarantee is important for the\n    #  maybe_upcast_putmask call below\n    assert is_scalar(fill_value)\n    values = extract_array(values, extract_numpy=True)\n\n    mask = _maybe_get_mask(values, skipna, mask)\n\n    dtype = values.dtype\n\n    if needs_i8_conversion(values):\n        # changing timedelta64/datetime64 to int64 needs to happen after\n        #  finding `mask` above\n        values = np.asarray(values.view(\"i8\"))\n\n    dtype_ok = _na_ok_dtype(dtype)\n\n    # get our fill value (in case we need to provide an alternative\n    # dtype for it)\n    fill_value = _get_fill_value(\n        dtype, fill_value=fill_value, fill_value_typ=fill_value_typ\n    )\n\n    copy = (mask is not None) and (fill_value is not None)\n\n    if skipna and copy:\n        values = values.copy()\n        assert mask is not None  # for mypy\n        if dtype_ok and mask.any():\n            np.putmask(values, mask, fill_value)\n\n        # promote if needed\n        else:\n            values, _ = maybe_upcast_putmask(values, mask, fill_value)\n\n    # return a platform independent precision dtype\n    dtype_max = dtype\n    if is_integer_dtype(dtype) or is_bool_dtype(dtype):\n        dtype_max = np.int64\n    elif is_float_dtype(dtype):\n        dtype_max = np.float64\n\n    return values, mask, dtype, dtype_max, fill_value",
        "begin_line": 237,
        "end_line": 322,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._na_ok_dtype#325",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._na_ok_dtype(dtype)",
        "snippet": "def _na_ok_dtype(dtype) -> bool:\n    if needs_i8_conversion(dtype):\n        return False\n    return not issubclass(dtype.type, np.integer)",
        "begin_line": 325,
        "end_line": 328,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0001694053870913095,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._wrap_results#331",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._wrap_results(result, dtype: Dtype, fill_value=None)",
        "snippet": "def _wrap_results(result, dtype: Dtype, fill_value=None):\n    \"\"\" wrap our results if needed \"\"\"\n    if is_datetime64_any_dtype(dtype):\n        if fill_value is None:\n            # GH#24293\n            fill_value = iNaT\n        if not isinstance(result, np.ndarray):\n            tz = getattr(dtype, \"tz\", None)\n            assert not isna(fill_value), \"Expected non-null fill_value\"\n            if result == fill_value:\n                result = np.nan\n            result = Timestamp(result, tz=tz)\n        else:\n            # If we have float dtype, taking a view will give the wrong result\n            result = result.astype(dtype)\n    elif is_timedelta64_dtype(dtype):\n        if not isinstance(result, np.ndarray):\n            if result == fill_value:\n                result = np.nan\n\n            # raise if we have a timedelta64[ns] which is too large\n            if np.fabs(result) > _int64_max:\n                raise ValueError(\"overflow in timedelta operation\")\n\n            result = Timedelta(result, unit=\"ns\")\n        else:\n            result = result.astype(\"m8[ns]\").view(dtype)\n\n    elif isinstance(dtype, PeriodDtype):\n        if is_float(result) and result.is_integer():\n            result = int(result)\n        if is_integer(result):\n            result = Period._from_ordinal(result, freq=dtype.freq)\n        else:\n            raise NotImplementedError(type(result), result)\n\n    return result",
        "begin_line": 331,
        "end_line": 367,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.nanany#403",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanany(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanany(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> bool:\n    \"\"\"\n    Check if any elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis : int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2])\n    >>> nanops.nanany(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([np.nan])\n    >>> nanops.nanany(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=False, mask=mask)\n    return values.any(axis)",
        "begin_line": 403,
        "end_line": 437,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.nanall#440",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nanall(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, mask: Optional[np.ndarray]=None)",
        "snippet": "def nanall(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    mask: Optional[np.ndarray] = None,\n) -> bool:\n    \"\"\"\n    Check if all elements along an axis evaluate to True.\n\n    Parameters\n    ----------\n    values : ndarray\n    axis: int, optional\n    skipna : bool, default True\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : bool\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nanall(s)\n    True\n\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 0])\n    >>> nanops.nanall(s)\n    False\n    \"\"\"\n    values, _, _, _, _ = _get_values(values, skipna, fill_value=True, mask=mask)\n    return values.all(axis)",
        "begin_line": 440,
        "end_line": 474,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00017152658662092623,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops.nansum#478",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops.nansum(values: np.ndarray, axis: Optional[int]=None, skipna: bool=True, min_count: int=0, mask: Optional[np.ndarray]=None)",
        "snippet": "def nansum(\n    values: np.ndarray,\n    axis: Optional[int] = None,\n    skipna: bool = True,\n    min_count: int = 0,\n    mask: Optional[np.ndarray] = None,\n) -> float:\n    \"\"\"\n    Sum the elements along an axis ignoring NaNs\n\n    Parameters\n    ----------\n    values : ndarray[dtype]\n    axis: int, optional\n    skipna : bool, default True\n    min_count: int, default 0\n    mask : ndarray[bool], optional\n        nan-mask if known\n\n    Returns\n    -------\n    result : dtype\n\n    Examples\n    --------\n    >>> import pandas.core.nanops as nanops\n    >>> s = pd.Series([1, 2, np.nan])\n    >>> nanops.nansum(s)\n    3.0\n    \"\"\"\n    values, mask, dtype, dtype_max, _ = _get_values(\n        values, skipna, fill_value=0, mask=mask\n    )\n    dtype_sum = dtype_max\n    if is_float_dtype(dtype):\n        dtype_sum = dtype\n    elif is_timedelta64_dtype(dtype):\n        dtype_sum = np.float64\n    the_sum = values.sum(axis, dtype=dtype_sum)\n    the_sum = _maybe_null_out(the_sum, axis, mask, values.shape, min_count=min_count)\n\n    return _wrap_results(the_sum, dtype)",
        "begin_line": 478,
        "end_line": 519,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.nanops._maybe_null_out#1237",
        "src_path": "pandas/core/nanops.py",
        "class_name": "pandas.core.nanops",
        "signature": "pandas.core.nanops._maybe_null_out(result: np.ndarray, axis: Optional[int], mask: Optional[np.ndarray], shape: Tuple, min_count: int=1)",
        "snippet": "def _maybe_null_out(\n    result: np.ndarray,\n    axis: Optional[int],\n    mask: Optional[np.ndarray],\n    shape: Tuple,\n    min_count: int = 1,\n) -> float:\n    \"\"\"\n    Returns\n    -------\n    Dtype\n        The product of all elements on a given axis. ( NaNs are treated as 1)\n    \"\"\"\n    if mask is not None and axis is not None and getattr(result, \"ndim\", False):\n        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n        if np.any(null_mask):\n            if is_numeric_dtype(result):\n                if np.iscomplexobj(result):\n                    result = result.astype(\"c16\")\n                else:\n                    result = result.astype(\"f8\")\n                result[null_mask] = np.nan\n            else:\n                # GH12941, use None to auto cast null\n                result[null_mask] = None\n    elif result is not NaT:\n        if mask is not None:\n            null_mask = mask.size - mask.sum()\n        else:\n            null_mask = np.prod(shape)\n        if null_mask < min_count:\n            result = np.nan\n\n    return result",
        "begin_line": 1237,
        "end_line": 1270,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators._check_arg_length#13",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_arg_length(fname, args, max_fname_arg_count, compat_args)",
        "snippet": "def _check_arg_length(fname, args, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether 'args' has length of at most 'compat_args'. Raises\n    a TypeError if that is not the case, similar to in Python when a\n    function is called with too many arguments.\n    \"\"\"\n    if max_fname_arg_count < 0:\n        raise ValueError(\"'max_fname_arg_count' must be non-negative\")\n\n    if len(args) > len(compat_args):\n        max_arg_count = len(compat_args) + max_fname_arg_count\n        actual_arg_count = len(args) + max_fname_arg_count\n        argument = \"argument\" if max_arg_count == 1 else \"arguments\"\n\n        raise TypeError(\n            f\"{fname}() takes at most {max_arg_count} {argument} \"\n            f\"({actual_arg_count} given)\"\n        )",
        "begin_line": 13,
        "end_line": 30,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators._check_for_default_values#33",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_default_values(fname, arg_val_dict, compat_args)",
        "snippet": "def _check_for_default_values(fname, arg_val_dict, compat_args):\n    \"\"\"\n    Check that the keys in `arg_val_dict` are mapped to their\n    default values as specified in `compat_args`.\n\n    Note that this function is to be called only when it has been\n    checked that arg_val_dict.keys() is a subset of compat_args\n    \"\"\"\n    for key in arg_val_dict:\n        # try checking equality directly with '=' operator,\n        # as comparison may have been overridden for the left\n        # hand object\n        try:\n            v1 = arg_val_dict[key]\n            v2 = compat_args[key]\n\n            # check for None-ness otherwise we could end up\n            # comparing a numpy array vs None\n            if (v1 is not None and v2 is None) or (v1 is None and v2 is not None):\n                match = False\n            else:\n                match = v1 == v2\n\n            if not is_bool(match):\n                raise ValueError(\"'match' is not a boolean\")\n\n        # could not compare them directly, so try comparison\n        # using the 'is' operator\n        except ValueError:\n            match = arg_val_dict[key] is compat_args[key]\n\n        if not match:\n            raise ValueError(\n                f\"the '{key}' parameter is not supported in \"\n                f\"the pandas implementation of {fname}()\"\n            )",
        "begin_line": 33,
        "end_line": 68,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators.validate_args#71",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_args(fname, args, max_fname_arg_count, compat_args)",
        "snippet": "def validate_args(fname, args, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether the length of the `*args` argument passed into a function\n    has at most `len(compat_args)` arguments and whether or not all of these\n    elements in `args` are set to their default values.\n\n    Parameters\n    ----------\n    fname : str\n        The name of the function being passed the `*args` parameter\n    args : tuple\n        The `*args` parameter passed into a function\n    max_fname_arg_count : int\n        The maximum number of arguments that the function `fname`\n        can accept, excluding those in `args`. Used for displaying\n        appropriate error messages. Must be non-negative.\n    compat_args : dict\n        A dictionary of keys and their associated default values.\n        In order to accommodate buggy behaviour in some versions of `numpy`,\n        where a signature displayed keyword arguments but then passed those\n        arguments **positionally** internally when calling downstream\n        implementations, a dict ensures that the original\n        order of the keyword arguments is enforced.\n\n    Raises\n    ------\n    TypeError\n        If `args` contains more values than there are `compat_args`\n    ValueError\n        If `args` contains values that do not correspond to those\n        of the default values specified in `compat_args`\n    \"\"\"\n    _check_arg_length(fname, args, max_fname_arg_count, compat_args)\n\n    # We do this so that we can provide a more informative\n    # error message about the parameters that we are not\n    # supporting in the pandas implementation of 'fname'\n    kwargs = dict(zip(compat_args, args))\n    _check_for_default_values(fname, kwargs, compat_args)",
        "begin_line": 71,
        "end_line": 109,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002473410833539451,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators._check_for_invalid_keys#112",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators._check_for_invalid_keys(fname, kwargs, compat_args)",
        "snippet": "def _check_for_invalid_keys(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether 'kwargs' contains any keys that are not\n    in 'compat_args' and raises a TypeError if there is one.\n    \"\"\"\n    # set(dict) --> set of the dictionary's keys\n    diff = set(kwargs) - set(compat_args)\n\n    if diff:\n        bad_arg = list(diff)[0]\n        raise TypeError(f\"{fname}() got an unexpected keyword argument '{bad_arg}'\")",
        "begin_line": 112,
        "end_line": 122,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators.validate_kwargs#125",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_kwargs(fname, kwargs, compat_args)",
        "snippet": "def validate_kwargs(fname, kwargs, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname : str\n        The name of the function being passed the `**kwargs` parameter\n    kwargs : dict\n        The `**kwargs` parameter passed into `fname`\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to have and their\n        associated default values\n\n    Raises\n    ------\n    TypeError if `kwargs` contains keys not in `compat_args`\n    ValueError if `kwargs` contains keys in `compat_args` that do not\n    map to the default values specified in `compat_args`\n    \"\"\"\n    kwds = kwargs.copy()\n    _check_for_invalid_keys(fname, kwargs, compat_args)\n    _check_for_default_values(fname, kwds, compat_args)",
        "begin_line": 125,
        "end_line": 149,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00022256843979523704,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators.validate_args_and_kwargs#152",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args)",
        "snippet": "def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args):\n    \"\"\"\n    Checks whether parameters passed to the *args and **kwargs argument in a\n    function `fname` are valid parameters as specified in `*compat_args`\n    and whether or not they are set to their default values.\n\n    Parameters\n    ----------\n    fname: str\n        The name of the function being passed the `**kwargs` parameter\n    args: tuple\n        The `*args` parameter passed into a function\n    kwargs: dict\n        The `**kwargs` parameter passed into `fname`\n    max_fname_arg_count: int\n        The minimum number of arguments that the function `fname`\n        requires, excluding those in `args`. Used for displaying\n        appropriate error messages. Must be non-negative.\n    compat_args: dict\n        A dictionary of keys that `kwargs` is allowed to\n        have and their associated default values.\n\n    Raises\n    ------\n    TypeError if `args` contains more values than there are\n    `compat_args` OR `kwargs` contains keys not in `compat_args`\n    ValueError if `args` contains values not at the default value (`None`)\n    `kwargs` contains keys in `compat_args` that do not map to the default\n    value as specified in `compat_args`\n\n    See Also\n    --------\n    validate_args : Purely args validation.\n    validate_kwargs : Purely kwargs validation.\n\n    \"\"\"\n    # Check that the total number of arguments passed in (i.e.\n    # args and kwargs) does not exceed the length of compat_args\n    _check_arg_length(\n        fname, args + tuple(kwargs.values()), max_fname_arg_count, compat_args\n    )\n\n    # Check there is no overlap with the positional and keyword\n    # arguments, similar to what is done in actual Python functions\n    args_dict = dict(zip(compat_args, args))\n\n    for key in args_dict:\n        if key in kwargs:\n            raise TypeError(\n                f\"{fname}() got multiple values for keyword argument '{key}'\"\n            )\n\n    kwargs.update(args_dict)\n    validate_kwargs(fname, kwargs, compat_args)",
        "begin_line": 152,
        "end_line": 205,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators.validate_bool_kwarg#208",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_bool_kwarg(value, arg_name)",
        "snippet": "def validate_bool_kwarg(value, arg_name):\n    \"\"\" Ensures that argument passed in arg_name is of type bool. \"\"\"\n    if not (is_bool(value) or value is None):\n        raise ValueError(\n            f'For argument \"{arg_name}\" expected type bool, received '\n            f\"type {type(value).__name__}.\"\n        )\n    return value",
        "begin_line": 208,
        "end_line": 215,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00020712510356255177,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.util._validators.validate_axis_style_args#218",
        "src_path": "pandas/util/_validators.py",
        "class_name": "pandas.util._validators",
        "signature": "pandas.util._validators.validate_axis_style_args(data, args, kwargs, arg_name, method_name)",
        "snippet": "def validate_axis_style_args(data, args, kwargs, arg_name, method_name):\n    \"\"\"\n    Argument handler for mixed index, columns / axis functions\n\n    In an attempt to handle both `.method(index, columns)`, and\n    `.method(arg, axis=.)`, we have to do some bad things to argument\n    parsing. This translates all arguments to `{index=., columns=.}` style.\n\n    Parameters\n    ----------\n    data : DataFrame\n    args : tuple\n        All positional arguments from the user\n    kwargs : dict\n        All keyword arguments from the user\n    arg_name, method_name : str\n        Used for better error messages\n\n    Returns\n    -------\n    kwargs : dict\n        A dictionary of keyword arguments. Doesn't modify ``kwargs``\n        inplace, so update them with the return value here.\n\n    Examples\n    --------\n    >>> df._validate_axis_style_args((str.upper,), {'columns': id},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n\n    This emits a warning\n    >>> df._validate_axis_style_args((str.upper, id), {},\n    ...                              'mapper', 'rename')\n    {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}\n    \"\"\"\n    # TODO: Change to keyword-only args and remove all this\n\n    out = {}\n    # Goal: fill 'out' with index/columns-style arguments\n    # like out = {'index': foo, 'columns': bar}\n\n    # Start by validating for consistency\n    if \"axis\" in kwargs and any(x in kwargs for x in data._AXIS_NUMBERS):\n        msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'.\"\n        raise TypeError(msg)\n\n    # First fill with explicit values provided by the user...\n    if arg_name in kwargs:\n        if args:\n            msg = f\"{method_name} got multiple values for argument '{arg_name}'\"\n            raise TypeError(msg)\n\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = kwargs[arg_name]\n\n    # More user-provided arguments, now from kwargs\n    for k, v in kwargs.items():\n        try:\n            ax = data._get_axis_name(k)\n        except ValueError:\n            pass\n        else:\n            out[ax] = v\n\n    # All user-provided kwargs have been handled now.\n    # Now we supplement with positional arguments, emitting warnings\n    # when there's ambiguity and raising when there's conflicts\n\n    if len(args) == 0:\n        pass  # It's up to the function to decide if this is valid\n    elif len(args) == 1:\n        axis = data._get_axis_name(kwargs.get(\"axis\", 0))\n        out[axis] = args[0]\n    elif len(args) == 2:\n        if \"axis\" in kwargs:\n            # Unambiguously wrong\n            msg = \"Cannot specify both 'axis' and any of 'index' or 'columns'\"\n            raise TypeError(msg)\n\n        msg = (\n            \"Interpreting call\\n\\t'.{method_name}(a, b)' as \"\n            \"\\n\\t'.{method_name}(index=a, columns=b)'.\\nUse named \"\n            \"arguments to remove any ambiguity. In the future, using \"\n            \"positional arguments for 'index' or 'columns' will raise \"\n            \"a 'TypeError'.\"\n        )\n        warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)\n        out[data._AXIS_NAMES[0]] = args[0]\n        out[data._AXIS_NAMES[1]] = args[1]\n    else:\n        msg = f\"Cannot specify all of '{arg_name}', 'index', 'columns'.\"\n        raise TypeError(msg)\n    return out",
        "begin_line": 218,
        "end_line": 310,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.0002905287623474724,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.compat._optional._get_version#36",
        "src_path": "pandas/compat/_optional.py",
        "class_name": "pandas.compat._optional",
        "signature": "pandas.compat._optional._get_version(module: types.ModuleType)",
        "snippet": "def _get_version(module: types.ModuleType) -> str:\n    version = getattr(module, \"__version__\", None)\n    if version is None:\n        # xlrd uses a capitalized attribute name\n        version = getattr(module, \"__VERSION__\", None)\n\n    if version is None:\n        raise ImportError(f\"Can't determine version for {module.__name__}\")\n    return version",
        "begin_line": 36,
        "end_line": 44,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.compat._optional.import_optional_dependency#47",
        "src_path": "pandas/compat/_optional.py",
        "class_name": "pandas.compat._optional",
        "signature": "pandas.compat._optional.import_optional_dependency(name: str, extra: str='', raise_on_missing: bool=True, on_version: str='raise')",
        "snippet": "def import_optional_dependency(\n    name: str, extra: str = \"\", raise_on_missing: bool = True, on_version: str = \"raise\"\n):\n    \"\"\"\n    Import an optional dependency.\n\n    By default, if a dependency is missing an ImportError with a nice\n    message will be raised. If a dependency is present, but too old,\n    we raise.\n\n    Parameters\n    ----------\n    name : str\n        The module name. This should be top-level only, so that the\n        version may be checked.\n    extra : str\n        Additional text to include in the ImportError message.\n    raise_on_missing : bool, default True\n        Whether to raise if the optional dependency is not found.\n        When False and the module is not present, None is returned.\n    on_version : str {'raise', 'warn'}\n        What to do when a dependency's version is too old.\n\n        * raise : Raise an ImportError\n        * warn : Warn that the version is too old. Returns None\n        * ignore: Return the module, even if the version is too old.\n          It's expected that users validate the version locally when\n          using ``on_version=\"ignore\"`` (see. ``io/html.py``)\n\n    Returns\n    -------\n    maybe_module : Optional[ModuleType]\n        The imported module, when found and the version is correct.\n        None is returned when the package is not found and `raise_on_missing`\n        is False, or when the package's version is too old and `on_version`\n        is ``'warn'``.\n    \"\"\"\n    msg = (\n        f\"Missing optional dependency '{name}'. {extra} \"\n        f\"Use pip or conda to install {name}.\"\n    )\n    try:\n        module = importlib.import_module(name)\n    except ImportError:\n        if raise_on_missing:\n            raise ImportError(msg) from None\n        else:\n            return None\n\n    minimum_version = VERSIONS.get(name)\n    if minimum_version:\n        version = _get_version(module)\n        if distutils.version.LooseVersion(version) < minimum_version:\n            assert on_version in {\"warn\", \"raise\", \"ignore\"}\n            msg = (\n                f\"Pandas requires version '{minimum_version}' or newer of '{name}' \"\n                f\"(version '{version}' currently installed).\"\n            )\n            if on_version == \"warn\":\n                warnings.warn(msg, UserWarning)\n                return None\n            elif on_version == \"raise\":\n                raise ImportError(msg)\n\n    return module",
        "begin_line": 47,
        "end_line": 111,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__#70",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__init__(self, dtype: Dtype=np.float64, fill_value: Any=None)",
        "snippet": "    def __init__(self, dtype: Dtype = np.float64, fill_value: Any = None):\n\n        if isinstance(dtype, type(self)):\n            if fill_value is None:\n                fill_value = dtype.fill_value\n            dtype = dtype.subtype\n\n        dtype = pandas_dtype(dtype)\n        if is_string_dtype(dtype):\n            dtype = np.dtype(\"object\")\n\n        if fill_value is None:\n            fill_value = na_value_for_dtype(dtype)\n\n        if not is_scalar(fill_value):\n            raise ValueError(f\"fill_value must be a scalar. Got {fill_value} instead\")\n        self._dtype = dtype\n        self._fill_value = fill_value",
        "begin_line": 70,
        "end_line": 87,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__#94",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.__eq__(self, other: Any)",
        "snippet": "    def __eq__(self, other: Any) -> bool:\n        # We have to override __eq__ to handle NA values in _metadata.\n        # The base class does simple == checks, which fail for NA.\n        if isinstance(other, str):\n            try:\n                other = self.construct_from_string(other)\n            except TypeError:\n                return False\n\n        if isinstance(other, type(self)):\n            subtype = self.subtype == other.subtype\n            if self._is_na_fill_value:\n                # this case is complicated by two things:\n                # SparseDtype(float, float(nan)) == SparseDtype(float, np.nan)\n                # SparseDtype(float, np.nan)     != SparseDtype(float, pd.NaT)\n                # i.e. we want to treat any floating-point NaN as equal, but\n                # not a floating-point NaN and a datetime NaT.\n                fill_value = (\n                    other._is_na_fill_value\n                    and isinstance(self.fill_value, type(other.fill_value))\n                    or isinstance(other.fill_value, type(self.fill_value))\n                )\n            else:\n                fill_value = self.fill_value == other.fill_value\n\n            return subtype and fill_value\n        return False",
        "begin_line": 94,
        "end_line": 120,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value#123",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.fill_value(self)",
        "snippet": "    def fill_value(self):\n        \"\"\"\n        The fill value of the array.\n\n        Converting the SparseArray to a dense ndarray will fill the\n        array with this value.\n\n        .. warning::\n\n           It's possible to end up with a SparseArray that has ``fill_value``\n           values in ``sp_values``. This can occur, for example, when setting\n           ``SparseArray.fill_value`` directly.\n        \"\"\"\n        return self._fill_value",
        "begin_line": 123,
        "end_line": 136,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value#139",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._is_na_fill_value(self)",
        "snippet": "    def _is_na_fill_value(self):\n        return isna(self.fill_value)",
        "begin_line": 139,
        "end_line": 140,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype#162",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.subtype(self)",
        "snippet": "    def subtype(self):\n        return self._dtype",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018311664530305805,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.name#166",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.name(self)",
        "snippet": "    def name(self):\n        return f\"Sparse[{self.subtype.name}, {self.fill_value}]\"",
        "begin_line": 166,
        "end_line": 167,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00043782837127845885,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string#186",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.construct_from_string(cls, string: str)",
        "snippet": "    def construct_from_string(cls, string: str) -> \"SparseDtype\":\n        \"\"\"\n        Construct a SparseDtype from a string form.\n\n        Parameters\n        ----------\n        string : str\n            Can take the following forms.\n\n            string           dtype\n            ================ ============================\n            'int'            SparseDtype[np.int64, 0]\n            'Sparse'         SparseDtype[np.float64, nan]\n            'Sparse[int]'    SparseDtype[np.int64, 0]\n            'Sparse[int, 0]' SparseDtype[np.int64, 0]\n            ================ ============================\n\n            It is not possible to specify non-default fill values\n            with a string. An argument like ``'Sparse[int, 1]'``\n            will raise a ``TypeError`` because the default fill value\n            for integers is 0.\n\n        Returns\n        -------\n        SparseDtype\n        \"\"\"\n        if not isinstance(string, str):\n            raise TypeError(\n                f\"'construct_from_string' expects a string, got {type(string)}\"\n            )\n        msg = f\"Cannot construct a 'SparseDtype' from '{string}'\"\n        if string.startswith(\"Sparse\"):\n            try:\n                sub_type, has_fill_value = cls._parse_subtype(string)\n            except ValueError as err:\n                raise TypeError(msg) from err\n            else:\n                result = SparseDtype(sub_type)\n                msg = (\n                    f\"Cannot construct a 'SparseDtype' from '{string}'.\\n\\nIt \"\n                    \"looks like the fill_value in the string is not \"\n                    \"the default for the dtype. Non-default fill_values \"\n                    \"are not supported. Use the 'SparseDtype()' \"\n                    \"constructor instead.\"\n                )\n                if has_fill_value and str(result) != string:\n                    raise TypeError(msg)\n                return result\n        else:\n            raise TypeError(msg)",
        "begin_line": 186,
        "end_line": 235,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00015928639694170118,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype.update_dtype#281",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype.update_dtype(self, dtype)",
        "snippet": "    def update_dtype(self, dtype):\n        \"\"\"\n        Convert the SparseDtype to a new dtype.\n\n        This takes care of converting the ``fill_value``.\n\n        Parameters\n        ----------\n        dtype : Union[str, numpy.dtype, SparseDtype]\n            The new dtype to use.\n\n            * For a SparseDtype, it is simply returned\n            * For a NumPy dtype (or str), the current fill value\n              is converted to the new dtype, and a SparseDtype\n              with `dtype` and the new fill value is returned.\n\n        Returns\n        -------\n        SparseDtype\n            A new SparseDtype with the correct `dtype` and fill value\n            for that `dtype`.\n\n        Raises\n        ------\n        ValueError\n            When the current fill value cannot be converted to the\n            new `dtype` (e.g. trying to convert ``np.nan`` to an\n            integer dtype).\n\n\n        Examples\n        --------\n        >>> SparseDtype(int, 0).update_dtype(float)\n        Sparse[float64, 0.0]\n\n        >>> SparseDtype(int, 1).update_dtype(SparseDtype(float, np.nan))\n        Sparse[float64, nan]\n        \"\"\"\n        cls = type(self)\n        dtype = pandas_dtype(dtype)\n\n        if not isinstance(dtype, cls):\n            fill_value = astype_nansafe(np.array(self.fill_value), dtype).item()\n            dtype = cls(dtype, fill_value=fill_value)\n\n        return dtype",
        "begin_line": 281,
        "end_line": 326,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    },
    {
        "name": "pandas.core.arrays.sparse.dtype.SparseDtype._subtype_with_str#329",
        "src_path": "pandas/core/arrays/sparse/dtype.py",
        "class_name": "pandas.core.arrays.sparse.dtype.SparseDtype",
        "signature": "pandas.core.arrays.sparse.dtype.SparseDtype._subtype_with_str(self)",
        "snippet": "    def _subtype_with_str(self):\n        \"\"\"\n        Whether the SparseDtype's subtype should be considered ``str``.\n\n        Typically, pandas will store string data in an object-dtype array.\n        When converting values to a dtype, e.g. in ``.astype``, we need to\n        be more specific, we need the actual underlying type.\n\n        Returns\n        -------\n        >>> SparseDtype(int, 1)._subtype_with_str\n        dtype('int64')\n\n        >>> SparseDtype(object, 1)._subtype_with_str\n        dtype('O')\n\n        >>> dtype = SparseDtype(str, '')\n        >>> dtype.subtype\n        dtype('O')\n\n        >>> dtype._subtype_with_str\n        str\n        \"\"\"\n        if isinstance(self.fill_value, str):\n            return type(self.fill_value)\n        return self.subtype",
        "begin_line": 329,
        "end_line": 354,
        "comment": "",
        "is_bug": false,
        "susp": {
            "pseudo_ochiai_susp": 0.00025131942699170643,
            "pseudo_dstar_susp": 0.00025131942699170643,
            "pseudo_tarantula_susp": 0.00025131942699170643,
            "pseudo_op2_susp": 0.00018653236336504383,
            "pseudo_barinel_susp": 0.00025131942699170643
        }
    }
]