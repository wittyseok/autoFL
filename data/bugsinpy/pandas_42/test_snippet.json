[
    {
        "name": "pandas.tests.util.test_assert_produces_warning.f#8",
        "src_path": "pandas/tests/util/test_assert_produces_warning.py",
        "class_name": "pandas.tests.util.test_assert_produces_warning",
        "signature": "pandas.tests.util.test_assert_produces_warning.f()",
        "snippet": "def f():\n    warnings.warn(\"f1\", FutureWarning)\n    warnings.warn(\"f2\", RuntimeWarning)",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_produces_warning.test_assert_produces_warning_honors_filter#14",
        "src_path": "pandas/tests/util/test_assert_produces_warning.py",
        "class_name": "pandas.tests.util.test_assert_produces_warning",
        "signature": "pandas.tests.util.test_assert_produces_warning.test_assert_produces_warning_honors_filter()",
        "snippet": "def test_assert_produces_warning_honors_filter():\n    # Raise by default.\n    msg = r\"Caused unexpected warning\\(s\\)\"\n    with pytest.raises(AssertionError, match=msg):\n        with tm.assert_produces_warning(RuntimeWarning):\n            f()\n\n    with tm.assert_produces_warning(RuntimeWarning, raise_on_extra_warnings=False):\n        f()",
        "begin_line": 14,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch#9",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch()",
        "snippet": "def test_assert_numpy_array_equal_shape_mismatch():\n    msg = \"\"\"numpy array are different\n\nnumpy array shapes are different\n\\\\[left\\\\]:  \\\\(2L*,\\\\)\n\\\\[right\\\\]: \\\\(3L*,\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(np.array([1, 2]), np.array([3, 4, 5]))",
        "begin_line": 9,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_bad_type#20",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_bad_type()",
        "snippet": "def test_assert_numpy_array_equal_bad_type():\n    expected = \"Expected type\"\n\n    with pytest.raises(AssertionError, match=expected):\n        tm.assert_numpy_array_equal(1, 2)",
        "begin_line": 20,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_class_mismatch#31",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_class_mismatch(a, b, klass1, klass2)",
        "snippet": "def test_assert_numpy_array_equal_class_mismatch(a, b, klass1, klass2):\n    msg = f\"\"\"numpy array are different\n\nnumpy array classes are different\n\\\\[left\\\\]:  {klass1}\n\\\\[right\\\\]: {klass2}\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(a, b)",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch1#42",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch1()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch1():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(66\\\\.66667 %\\\\)\n\\\\[left\\\\]:  \\\\[nan, 2\\\\.0, 3\\\\.0\\\\]\n\\\\[right\\\\]: \\\\[1\\\\.0, nan, 3\\\\.0\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(np.array([np.nan, 2, 3]), np.array([1, np.nan, 3]))",
        "begin_line": 42,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch2#53",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch2()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch2():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[1, 2\\\\]\n\\\\[right\\\\]: \\\\[1, 3\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(np.array([1, 2]), np.array([1, 3]))",
        "begin_line": 53,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch3#64",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch3()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch3():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(16\\\\.66667 %\\\\)\n\\\\[left\\\\]:  \\\\[\\\\[1, 2\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\n\\\\[right\\\\]: \\\\[\\\\[1, 3\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(\n            np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])\n        )",
        "begin_line": 64,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch4#77",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch4()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch4():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[1\\\\.1, 2\\\\.000001\\\\]\n\\\\[right\\\\]: \\\\[1\\\\.1, 2.0\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(np.array([1.1, 2.000001]), np.array([1.1, 2.0]))",
        "begin_line": 77,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch5#88",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch5()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch5():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(16\\\\.66667 %\\\\)\n\\\\[left\\\\]:  \\\\[\\\\[1, 2\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\n\\\\[right\\\\]: \\\\[\\\\[1, 3\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(\n            np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])\n        )",
        "begin_line": 88,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch6#101",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_value_mismatch6()",
        "snippet": "def test_assert_numpy_array_equal_value_mismatch6():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[\\\\[1, 2\\\\], \\\\[3, 4\\\\]\\\\]\n\\\\[right\\\\]: \\\\[\\\\[1, 3\\\\], \\\\[3, 4\\\\]\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(\n            np.array([[1, 2], [3, 4]]), np.array([[1, 3], [3, 4]])\n        )",
        "begin_line": 101,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch_override#114",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_assert_numpy_array_equal_shape_mismatch_override()",
        "snippet": "def test_assert_numpy_array_equal_shape_mismatch_override():\n    msg = \"\"\"Index are different\n\nIndex shapes are different\n\\\\[left\\\\]:  \\\\(2L*,\\\\)\n\\\\[right\\\\]: \\\\(3L*,\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(np.array([1, 2]), np.array([3, 4, 5]), obj=\"Index\")",
        "begin_line": 114,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_unicode#125",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_unicode()",
        "snippet": "def test_numpy_array_equal_unicode():\n    # see gh-20503\n    #\n    # Test ensures that `tm.assert_numpy_array_equals` raises the right\n    # exception when comparing np.arrays containing differing unicode objects.\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  \\\\[\u00e1, \u00e0, \u00e4\\\\]\n\\\\[right\\\\]: \\\\[\u00e1, \u00e0, \u00e5\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(\n            np.array([\"\u00e1\", \"\u00e0\", \"\u00e4\"]), np.array([\"\u00e1\", \"\u00e0\", \"\u00e5\"])\n        )",
        "begin_line": 125,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_object#142",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_object()",
        "snippet": "def test_numpy_array_equal_object():\n    a = np.array([Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-01\")])\n    b = np.array([Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")])\n\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[2011-01-01 00:00:00, 2011-01-01 00:00:00\\\\]\n\\\\[right\\\\]: \\\\[2011-01-01 00:00:00, 2011-01-02 00:00:00\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(a, b)",
        "begin_line": 142,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_copy_flag#158",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_copy_flag(other_type, check_same)",
        "snippet": "def test_numpy_array_equal_copy_flag(other_type, check_same):\n    a = np.array([1, 2, 3])\n    msg = None\n\n    if other_type == \"same\":\n        other = a.view()\n    else:\n        other = a.copy()\n\n    if check_same != other_type:\n        msg = (\n            r\"array\\(\\[1, 2, 3\\]\\) is not array\\(\\[1, 2, 3\\]\\)\"\n            if check_same == \"same\"\n            else r\"array\\(\\[1, 2, 3\\]\\) is array\\(\\[1, 2, 3\\]\\)\"\n        )\n\n    if msg is not None:\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_numpy_array_equal(a, other, check_same=check_same)\n    else:\n        tm.assert_numpy_array_equal(a, other, check_same=check_same)",
        "begin_line": 158,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_contains_na#181",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_contains_na()",
        "snippet": "def test_numpy_array_equal_contains_na():\n    # https://github.com/pandas-dev/pandas/issues/31881\n    a = np.array([True, False])\n    b = np.array([True, pd.NA], dtype=object)\n\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50.0 %\\\\)\n\\\\[left\\\\]:  \\\\[True, False\\\\]\n\\\\[right\\\\]: \\\\[True, <NA>\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(a, b)",
        "begin_line": 181,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_identical_na#196",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_identical_na(nulls_fixture)",
        "snippet": "def test_numpy_array_equal_identical_na(nulls_fixture):\n    a = np.array([nulls_fixture], dtype=object)\n\n    tm.assert_numpy_array_equal(a, a)",
        "begin_line": 196,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_different_na#202",
        "src_path": "pandas/tests/util/test_assert_numpy_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_numpy_array_equal",
        "signature": "pandas.tests.util.test_assert_numpy_array_equal.test_numpy_array_equal_different_na()",
        "snippet": "def test_numpy_array_equal_different_na():\n    a = np.array([np.nan], dtype=object)\n    b = np.array([pd.NA], dtype=object)\n\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(100.0 %\\\\)\n\\\\[left\\\\]:  \\\\[nan\\\\]\n\\\\[right\\\\]: \\\\[<NA>\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_numpy_array_equal(a, b)",
        "begin_line": 202,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate.new_func#10",
        "src_path": "pandas/tests/util/test_deprecate.py",
        "class_name": "pandas.tests.util.test_deprecate",
        "signature": "pandas.tests.util.test_deprecate.new_func()",
        "snippet": "def new_func():\n    \"\"\"\n    This is the summary. The deprecate directive goes next.\n\n    This is the extended summary. The deprecate directive goes before this.\n    \"\"\"\n    return \"new_func called\"",
        "begin_line": 10,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate.new_func_no_docstring#19",
        "src_path": "pandas/tests/util/test_deprecate.py",
        "class_name": "pandas.tests.util.test_deprecate",
        "signature": "pandas.tests.util.test_deprecate.new_func_no_docstring()",
        "snippet": "def new_func_no_docstring():\n    return \"new_func_no_docstring called\"",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate.test_deprecate_ok#40",
        "src_path": "pandas/tests/util/test_deprecate.py",
        "class_name": "pandas.tests.util.test_deprecate",
        "signature": "pandas.tests.util.test_deprecate.test_deprecate_ok()",
        "snippet": "def test_deprecate_ok():\n    depr_func = deprecate(\"depr_func\", new_func, \"1.0\", msg=\"Use new_func instead.\")\n\n    with tm.assert_produces_warning(FutureWarning):\n        result = depr_func()\n\n    assert result == \"new_func called\"\n    assert depr_func.__doc__ == dedent(new_func_with_deprecation.__doc__)",
        "begin_line": 40,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate.test_deprecate_no_docstring#50",
        "src_path": "pandas/tests/util/test_deprecate.py",
        "class_name": "pandas.tests.util.test_deprecate",
        "signature": "pandas.tests.util.test_deprecate.test_deprecate_no_docstring()",
        "snippet": "def test_deprecate_no_docstring():\n    depr_func = deprecate(\n        \"depr_func\", new_func_no_docstring, \"1.0\", msg=\"Use new_func instead.\"\n    )\n    with tm.assert_produces_warning(FutureWarning):\n        result = depr_func()\n    assert result == \"new_func_no_docstring called\"",
        "begin_line": 50,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate.test_deprecate_wrong_docstring#59",
        "src_path": "pandas/tests/util/test_deprecate.py",
        "class_name": "pandas.tests.util.test_deprecate",
        "signature": "pandas.tests.util.test_deprecate.test_deprecate_wrong_docstring()",
        "snippet": "def test_deprecate_wrong_docstring():\n    msg = \"deprecate needs a correctly formatted docstring\"\n    with pytest.raises(AssertionError, match=msg):\n        deprecate(\n            \"depr_func\", new_func_wrong_docstring, \"1.0\", msg=\"Use new_func instead.\"\n        )",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal#15",
        "src_path": "pandas/tests/util/test_assert_interval_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_interval_array_equal",
        "signature": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal(kwargs)",
        "snippet": "def test_interval_array_equal(kwargs):\n    arr = interval_range(**kwargs).values\n    tm.assert_interval_array_equal(arr, arr)",
        "begin_line": 15,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_closed_mismatch#20",
        "src_path": "pandas/tests/util/test_assert_interval_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_interval_array_equal",
        "signature": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_closed_mismatch()",
        "snippet": "def test_interval_array_equal_closed_mismatch():\n    kwargs = dict(start=0, periods=5)\n    arr1 = interval_range(closed=\"left\", **kwargs).values\n    arr2 = interval_range(closed=\"right\", **kwargs).values\n\n    msg = \"\"\"\\\nIntervalArray are different\n\nAttribute \"closed\" are different\n\\\\[left\\\\]:  left\n\\\\[right\\\\]: right\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_interval_array_equal(arr1, arr2)",
        "begin_line": 20,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_periods_mismatch#36",
        "src_path": "pandas/tests/util/test_assert_interval_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_interval_array_equal",
        "signature": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_periods_mismatch()",
        "snippet": "def test_interval_array_equal_periods_mismatch():\n    kwargs = dict(start=0)\n    arr1 = interval_range(periods=5, **kwargs).values\n    arr2 = interval_range(periods=6, **kwargs).values\n\n    msg = \"\"\"\\\nIntervalArray.left are different\n\nIntervalArray.left length are different\n\\\\[left\\\\]:  5, Int64Index\\\\(\\\\[0, 1, 2, 3, 4\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: 6, Int64Index\\\\(\\\\[0, 1, 2, 3, 4, 5\\\\], dtype='int64'\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_interval_array_equal(arr1, arr2)",
        "begin_line": 36,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_end_mismatch#52",
        "src_path": "pandas/tests/util/test_assert_interval_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_interval_array_equal",
        "signature": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_end_mismatch()",
        "snippet": "def test_interval_array_equal_end_mismatch():\n    kwargs = dict(start=0, periods=5)\n    arr1 = interval_range(end=10, **kwargs).values\n    arr2 = interval_range(end=20, **kwargs).values\n\n    msg = \"\"\"\\\nIntervalArray.left are different\n\nIntervalArray.left values are different \\\\(80.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[0, 2, 4, 6, 8\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[0, 4, 8, 12, 16\\\\], dtype='int64'\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_interval_array_equal(arr1, arr2)",
        "begin_line": 52,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_start_mismatch#68",
        "src_path": "pandas/tests/util/test_assert_interval_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_interval_array_equal",
        "signature": "pandas.tests.util.test_assert_interval_array_equal.test_interval_array_equal_start_mismatch()",
        "snippet": "def test_interval_array_equal_start_mismatch():\n    kwargs = dict(periods=4)\n    arr1 = interval_range(start=0, **kwargs).values\n    arr2 = interval_range(start=1, **kwargs).values\n\n    msg = \"\"\"\\\nIntervalArray.left are different\n\nIntervalArray.left values are different \\\\(100.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[0, 1, 2, 3\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_interval_array_equal(arr1, arr2)",
        "begin_line": 68,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal#11",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal(c)",
        "snippet": "def test_categorical_equal(c):\n    tm.assert_categorical_equal(c, c)",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_order_mismatch#16",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_order_mismatch(check_category_order)",
        "snippet": "def test_categorical_equal_order_mismatch(check_category_order):\n    c1 = Categorical([1, 2, 3, 4], categories=[1, 2, 3, 4])\n    c2 = Categorical([1, 2, 3, 4], categories=[4, 3, 2, 1])\n    kwargs = dict(check_category_order=check_category_order)\n\n    if check_category_order:\n        msg = \"\"\"Categorical\\\\.categories are different\n\nCategorical\\\\.categories values are different \\\\(100\\\\.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[4, 3, 2, 1\\\\], dtype='int64'\\\\)\"\"\"\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_categorical_equal(c1, c2, **kwargs)\n    else:\n        tm.assert_categorical_equal(c1, c2, **kwargs)",
        "begin_line": 16,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_categories_mismatch#33",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_categories_mismatch()",
        "snippet": "def test_categorical_equal_categories_mismatch():\n    msg = \"\"\"Categorical\\\\.categories are different\n\nCategorical\\\\.categories values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[1, 2, 3, 5\\\\], dtype='int64'\\\\)\"\"\"\n\n    c1 = Categorical([1, 2, 3, 4])\n    c2 = Categorical([1, 2, 3, 5])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_categorical_equal(c1, c2)",
        "begin_line": 33,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_codes_mismatch#47",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_codes_mismatch()",
        "snippet": "def test_categorical_equal_codes_mismatch():\n    categories = [1, 2, 3, 4]\n    msg = \"\"\"Categorical\\\\.codes are different\n\nCategorical\\\\.codes values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[0, 1, 3, 2\\\\]\n\\\\[right\\\\]: \\\\[0, 1, 2, 3\\\\]\"\"\"\n\n    c1 = Categorical([1, 2, 4, 3], categories=categories)\n    c2 = Categorical([1, 2, 3, 4], categories=categories)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_categorical_equal(c1, c2)",
        "begin_line": 47,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_ordered_mismatch#62",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_ordered_mismatch()",
        "snippet": "def test_categorical_equal_ordered_mismatch():\n    data = [1, 2, 3, 4]\n    msg = \"\"\"Categorical are different\n\nAttribute \"ordered\" are different\n\\\\[left\\\\]:  False\n\\\\[right\\\\]: True\"\"\"\n\n    c1 = Categorical(data, ordered=False)\n    c2 = Categorical(data, ordered=True)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_categorical_equal(c1, c2)",
        "begin_line": 62,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_object_override#78",
        "src_path": "pandas/tests/util/test_assert_categorical_equal.py",
        "class_name": "pandas.tests.util.test_assert_categorical_equal",
        "signature": "pandas.tests.util.test_assert_categorical_equal.test_categorical_equal_object_override(obj)",
        "snippet": "def test_categorical_equal_object_override(obj):\n    data = [1, 2, 3, 4]\n    msg = f\"\"\"{obj} are different\n\nAttribute \"ordered\" are different\n\\\\[left\\\\]:  False\n\\\\[right\\\\]: True\"\"\"\n\n    c1 = Categorical(data, ordered=False)\n    c2 = Categorical(data, ordered=True)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_categorical_equal(c1, c2, obj=obj)",
        "begin_line": 78,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal._assert_series_equal_both#8",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal._assert_series_equal_both(a, b, **kwargs)",
        "snippet": "def _assert_series_equal_both(a, b, **kwargs):\n    \"\"\"\n    Check that two Series equal.\n\n    This check is performed commutatively.\n\n    Parameters\n    ----------\n    a : Series\n        The first Series to compare.\n    b : Series\n        The second Series to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_series_equal`.\n    \"\"\"\n    tm.assert_series_equal(a, b, **kwargs)\n    tm.assert_series_equal(b, a, **kwargs)",
        "begin_line": 8,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal._assert_not_series_equal#27",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal._assert_not_series_equal(a, b, **kwargs)",
        "snippet": "def _assert_not_series_equal(a, b, **kwargs):\n    \"\"\"\n    Check that two Series are not equal.\n\n    Parameters\n    ----------\n    a : Series\n        The first Series to compare.\n    b : Series\n        The second Series to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_series_equal`.\n    \"\"\"\n    try:\n        tm.assert_series_equal(a, b, **kwargs)\n        msg = \"The two Series were equal when they shouldn't have been\"\n\n        pytest.fail(msg=msg)\n    except AssertionError:\n        pass",
        "begin_line": 27,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal._assert_not_series_equal_both#49",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal._assert_not_series_equal_both(a, b, **kwargs)",
        "snippet": "def _assert_not_series_equal_both(a, b, **kwargs):\n    \"\"\"\n    Check that two Series are not equal.\n\n    This check is performed commutatively.\n\n    Parameters\n    ----------\n    a : Series\n        The first Series to compare.\n    b : Series\n        The second Series to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_series_equal`.\n    \"\"\"\n    _assert_not_series_equal(a, b, **kwargs)\n    _assert_not_series_equal(b, a, **kwargs)",
        "begin_line": 49,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal#69",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal(data)",
        "snippet": "def test_series_equal(data):\n    _assert_series_equal_both(Series(data), Series(data))",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_not_equal_value_mismatch#83",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_not_equal_value_mismatch(data1, data2)",
        "snippet": "def test_series_not_equal_value_mismatch(data1, data2):\n    _assert_not_series_equal_both(Series(data1), Series(data2))",
        "begin_line": 83,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_not_equal_metadata_mismatch#95",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_not_equal_metadata_mismatch(kwargs)",
        "snippet": "def test_series_not_equal_metadata_mismatch(kwargs):\n    data = range(3)\n    s1 = Series(data)\n\n    s2 = Series(data, **kwargs)\n    _assert_not_series_equal_both(s1, s2)",
        "begin_line": 95,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_less_precise#106",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_less_precise(data1, data2, dtype, check_less_precise)",
        "snippet": "def test_less_precise(data1, data2, dtype, check_less_precise):\n    s1 = Series([data1], dtype=dtype)\n    s2 = Series([data2], dtype=dtype)\n\n    kwargs = dict(check_less_precise=check_less_precise)\n\n    if (check_less_precise is False or check_less_precise == 10) or (\n        (check_less_precise is True or check_less_precise >= 3)\n        and abs(data1 - data2) >= 0.0001\n    ):\n        msg = \"Series values are different\"\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_series_equal(s1, s2, **kwargs)\n    else:\n        _assert_series_equal_both(s1, s2, **kwargs)",
        "begin_line": 106,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal_index_dtype#144",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal_index_dtype(s1, s2, msg, check_index_type)",
        "snippet": "def test_series_equal_index_dtype(s1, s2, msg, check_index_type):\n    kwargs = dict(check_index_type=check_index_type)\n\n    if check_index_type:\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_series_equal(s1, s2, **kwargs)\n    else:\n        tm.assert_series_equal(s1, s2, **kwargs)",
        "begin_line": 144,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal_length_mismatch#154",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal_length_mismatch(check_less_precise)",
        "snippet": "def test_series_equal_length_mismatch(check_less_precise):\n    msg = \"\"\"Series are different\n\nSeries length are different\n\\\\[left\\\\]:  3, RangeIndex\\\\(start=0, stop=3, step=1\\\\)\n\\\\[right\\\\]: 4, RangeIndex\\\\(start=0, stop=4, step=1\\\\)\"\"\"\n\n    s1 = Series([1, 2, 3])\n    s2 = Series([1, 2, 3, 4])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_series_equal(s1, s2, check_less_precise=check_less_precise)",
        "begin_line": 154,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal_values_mismatch#168",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal_values_mismatch(check_less_precise)",
        "snippet": "def test_series_equal_values_mismatch(check_less_precise):\n    msg = \"\"\"Series are different\n\nSeries values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  \\\\[1, 2, 3\\\\]\n\\\\[right\\\\]: \\\\[1, 2, 4\\\\]\"\"\"\n\n    s1 = Series([1, 2, 3])\n    s2 = Series([1, 2, 4])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_series_equal(s1, s2, check_less_precise=check_less_precise)",
        "begin_line": 168,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal_categorical_mismatch#182",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal_categorical_mismatch(check_categorical)",
        "snippet": "def test_series_equal_categorical_mismatch(check_categorical):\n    msg = \"\"\"Attributes of Series are different\n\nAttribute \"dtype\" are different\n\\\\[left\\\\]:  CategoricalDtype\\\\(categories=\\\\['a', 'b'\\\\], ordered=False\\\\)\n\\\\[right\\\\]: CategoricalDtype\\\\(categories=\\\\['a', 'b', 'c'\\\\], \\\nordered=False\\\\)\"\"\"\n\n    s1 = Series(Categorical([\"a\", \"b\"]))\n    s2 = Series(Categorical([\"a\", \"b\"], categories=list(\"abc\")))\n\n    if check_categorical:\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_series_equal(s1, s2, check_categorical=check_categorical)\n    else:\n        _assert_series_equal_both(s1, s2, check_categorical=check_categorical)",
        "begin_line": 182,
        "end_line": 197,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_assert_series_equal_extension_dtype_mismatch#200",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_assert_series_equal_extension_dtype_mismatch()",
        "snippet": "def test_assert_series_equal_extension_dtype_mismatch():\n    # https://github.com/pandas-dev/pandas/issues/32747\n    left = Series(pd.array([1, 2, 3], dtype=\"Int64\"))\n    right = left.astype(int)\n\n    msg = \"\"\"Attributes of Series are different\n\nAttribute \"dtype\" are different\n\\\\[left\\\\]:  Int64\n\\\\[right\\\\]: int[32|64]\"\"\"\n\n    tm.assert_series_equal(left, right, check_dtype=False)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_series_equal(left, right, check_dtype=True)",
        "begin_line": 200,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_assert_series_equal_interval_dtype_mismatch#217",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_assert_series_equal_interval_dtype_mismatch()",
        "snippet": "def test_assert_series_equal_interval_dtype_mismatch():\n    # https://github.com/pandas-dev/pandas/issues/32747\n    left = Series([pd.Interval(0, 1)], dtype=\"interval\")\n    right = left.astype(object)\n\n    msg = \"\"\"Attributes of Series are different\n\nAttribute \"dtype\" are different\n\\\\[left\\\\]:  interval\\\\[int64\\\\]\n\\\\[right\\\\]: object\"\"\"\n\n    tm.assert_series_equal(left, right, check_dtype=False)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_series_equal(left, right, check_dtype=True)",
        "begin_line": 217,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.test_series_equal_series_type#234",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal",
        "signature": "pandas.tests.util.test_assert_series_equal.test_series_equal_series_type()",
        "snippet": "def test_series_equal_series_type():\n    class MySeries(Series):\n        pass\n\n    s1 = Series([1, 2])\n    s2 = Series([1, 2])\n    s3 = MySeries([1, 2])\n\n    tm.assert_series_equal(s1, s2, check_series_type=False)\n    tm.assert_series_equal(s1, s2, check_series_type=True)\n\n    tm.assert_series_equal(s1, s3, check_series_type=False)\n    tm.assert_series_equal(s3, s1, check_series_type=False)\n\n    with pytest.raises(AssertionError, match=\"Series classes are different\"):\n        tm.assert_series_equal(s1, s3, check_series_type=True)\n\n    with pytest.raises(AssertionError, match=\"Series classes are different\"):\n        tm.assert_series_equal(s3, s1, check_series_type=True)",
        "begin_line": 234,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_series_equal.MySeries.test_series_equal_series_type#234",
        "src_path": "pandas/tests/util/test_assert_series_equal.py",
        "class_name": "pandas.tests.util.test_assert_series_equal.MySeries",
        "signature": "pandas.tests.util.test_assert_series_equal.MySeries.test_series_equal_series_type()",
        "snippet": "def test_series_equal_series_type():\n    class MySeries(Series):\n        pass\n\n    s1 = Series([1, 2])\n    s2 = Series([1, 2])\n    s3 = MySeries([1, 2])\n\n    tm.assert_series_equal(s1, s2, check_series_type=False)\n    tm.assert_series_equal(s1, s2, check_series_type=True)\n\n    tm.assert_series_equal(s1, s3, check_series_type=False)\n    tm.assert_series_equal(s3, s1, check_series_type=False)\n\n    with pytest.raises(AssertionError, match=\"Series classes are different\"):\n        tm.assert_series_equal(s1, s3, check_series_type=True)\n\n    with pytest.raises(AssertionError, match=\"Series classes are different\"):\n        tm.assert_series_equal(s3, s1, check_series_type=True)",
        "begin_line": 234,
        "end_line": 252,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.by_blocks_fixture#9",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.by_blocks_fixture(request)",
        "snippet": "def by_blocks_fixture(request):\n    return request.param",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.obj_fixture#14",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.obj_fixture(request)",
        "snippet": "def obj_fixture(request):\n    return request.param",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal._assert_frame_equal_both#18",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal._assert_frame_equal_both(a, b, **kwargs)",
        "snippet": "def _assert_frame_equal_both(a, b, **kwargs):\n    \"\"\"\n    Check that two DataFrame equal.\n\n    This check is performed commutatively.\n\n    Parameters\n    ----------\n    a : DataFrame\n        The first DataFrame to compare.\n    b : DataFrame\n        The second DataFrame to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_frame_equal`.\n    \"\"\"\n    tm.assert_frame_equal(a, b, **kwargs)\n    tm.assert_frame_equal(b, a, **kwargs)",
        "begin_line": 18,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_row_order_mismatch#75",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_row_order_mismatch(check_like, obj_fixture)",
        "snippet": "def test_frame_equal_row_order_mismatch(check_like, obj_fixture):\n    df1 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=[\"a\", \"b\", \"c\"])\n    df2 = DataFrame({\"A\": [3, 2, 1], \"B\": [6, 5, 4]}, index=[\"c\", \"b\", \"a\"])\n\n    if not check_like:  # Do not ignore row-column orderings.\n        msg = f\"{obj_fixture}.index are different\"\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_frame_equal(df1, df2, check_like=check_like, obj=obj_fixture)\n    else:\n        _assert_frame_equal_both(df1, df2, check_like=check_like, obj=obj_fixture)",
        "begin_line": 75,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_shape_mismatch#94",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_shape_mismatch(df1, df2, obj_fixture)",
        "snippet": "def test_frame_equal_shape_mismatch(df1, df2, obj_fixture):\n    msg = f\"{obj_fixture} are different\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(df1, df2, obj=obj_fixture)",
        "begin_line": 94,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_dtype_mismatch#122",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_dtype_mismatch(df1, df2, msg, check_index_type)",
        "snippet": "def test_frame_equal_index_dtype_mismatch(df1, df2, msg, check_index_type):\n    kwargs = dict(check_index_type=check_index_type)\n\n    if check_index_type:\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_frame_equal(df1, df2, **kwargs)\n    else:\n        tm.assert_frame_equal(df1, df2, **kwargs)",
        "begin_line": 122,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_empty_dtypes#132",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_empty_dtypes(check_dtype)",
        "snippet": "def test_empty_dtypes(check_dtype):\n    columns = [\"col1\", \"col2\"]\n    df1 = DataFrame(columns=columns)\n    df2 = DataFrame(columns=columns)\n\n    kwargs = dict(check_dtype=check_dtype)\n    df1[\"col1\"] = df1[\"col1\"].astype(\"int64\")\n\n    if check_dtype:\n        msg = r\"Attributes of DataFrame\\..* are different\"\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_frame_equal(df1, df2, **kwargs)\n    else:\n        tm.assert_frame_equal(df1, df2, **kwargs)",
        "begin_line": 132,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_mismatch#148",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_index_mismatch(obj_fixture)",
        "snippet": "def test_frame_equal_index_mismatch(obj_fixture):\n    msg = f\"\"\"{obj_fixture}\\\\.index are different\n\n{obj_fixture}\\\\.index values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  Index\\\\(\\\\['a', 'b', 'c'\\\\], dtype='object'\\\\)\n\\\\[right\\\\]: Index\\\\(\\\\['a', 'b', 'd'\\\\], dtype='object'\\\\)\"\"\"\n\n    df1 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=[\"a\", \"b\", \"c\"])\n    df2 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=[\"a\", \"b\", \"d\"])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(df1, df2, obj=obj_fixture)",
        "begin_line": 148,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_columns_mismatch#162",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_columns_mismatch(obj_fixture)",
        "snippet": "def test_frame_equal_columns_mismatch(obj_fixture):\n    msg = f\"\"\"{obj_fixture}\\\\.columns are different\n\n{obj_fixture}\\\\.columns values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  Index\\\\(\\\\['A', 'B'\\\\], dtype='object'\\\\)\n\\\\[right\\\\]: Index\\\\(\\\\['A', 'b'\\\\], dtype='object'\\\\)\"\"\"\n\n    df1 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]}, index=[\"a\", \"b\", \"c\"])\n    df2 = DataFrame({\"A\": [1, 2, 3], \"b\": [4, 5, 6]}, index=[\"a\", \"b\", \"c\"])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(df1, df2, obj=obj_fixture)",
        "begin_line": 162,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_block_mismatch#176",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_block_mismatch(by_blocks_fixture, obj_fixture)",
        "snippet": "def test_frame_equal_block_mismatch(by_blocks_fixture, obj_fixture):\n    obj = obj_fixture\n    msg = f\"\"\"{obj}\\\\.iloc\\\\[:, 1\\\\] \\\\(column name=\"B\"\\\\) are different\n\n{obj}\\\\.iloc\\\\[:, 1\\\\] \\\\(column name=\"B\"\\\\) values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  \\\\[4, 5, 6\\\\]\n\\\\[right\\\\]: \\\\[4, 5, 7\\\\]\"\"\"\n\n    df1 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    df2 = DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 7]})\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(df1, df2, by_blocks=by_blocks_fixture, obj=obj_fixture)",
        "begin_line": 176,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_unicode#214",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_frame_equal_unicode(df1, df2, msg, by_blocks_fixture, obj_fixture)",
        "snippet": "def test_frame_equal_unicode(df1, df2, msg, by_blocks_fixture, obj_fixture):\n    # see gh-20503\n    #\n    # Test ensures that `tm.assert_frame_equals` raises the right exception\n    # when comparing DataFrames containing differing unicode objects.\n    msg = msg.format(obj=obj_fixture)\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(df1, df2, by_blocks=by_blocks_fixture, obj=obj_fixture)",
        "begin_line": 214,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_assert_frame_equal_extension_dtype_mismatch#224",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_assert_frame_equal_extension_dtype_mismatch()",
        "snippet": "def test_assert_frame_equal_extension_dtype_mismatch():\n    # https://github.com/pandas-dev/pandas/issues/32747\n    left = DataFrame({\"a\": [1, 2, 3]}, dtype=\"Int64\")\n    right = left.astype(int)\n\n    msg = (\n        \"Attributes of DataFrame\\\\.iloc\\\\[:, 0\\\\] \"\n        '\\\\(column name=\"a\"\\\\) are different\\n\\n'\n        'Attribute \"dtype\" are different\\n'\n        \"\\\\[left\\\\]:  Int64\\n\"\n        \"\\\\[right\\\\]: int[32|64]\"\n    )\n\n    tm.assert_frame_equal(left, right, check_dtype=False)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(left, right, check_dtype=True)",
        "begin_line": 224,
        "end_line": 240,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_frame_equal.test_assert_frame_equal_interval_dtype_mismatch#243",
        "src_path": "pandas/tests/util/test_assert_frame_equal.py",
        "class_name": "pandas.tests.util.test_assert_frame_equal",
        "signature": "pandas.tests.util.test_assert_frame_equal.test_assert_frame_equal_interval_dtype_mismatch()",
        "snippet": "def test_assert_frame_equal_interval_dtype_mismatch():\n    # https://github.com/pandas-dev/pandas/issues/32747\n    left = DataFrame({\"a\": [pd.Interval(0, 1)]}, dtype=\"interval\")\n    right = left.astype(object)\n\n    msg = (\n        \"Attributes of DataFrame\\\\.iloc\\\\[:, 0\\\\] \"\n        '\\\\(column name=\"a\"\\\\) are different\\n\\n'\n        'Attribute \"dtype\" are different\\n'\n        \"\\\\[left\\\\]:  interval\\\\[int64\\\\]\\n\"\n        \"\\\\[right\\\\]: object\"\n    )\n\n    tm.assert_frame_equal(left, right, check_dtype=False)\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_frame_equal(left, right, check_dtype=True)",
        "begin_line": 243,
        "end_line": 259,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg._f1#9",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg._f1(new=False)",
        "snippet": "def _f1(new=False):\n    return new",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg._f2#17",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg._f2(new=False)",
        "snippet": "def _f2(new=False):\n    return new",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg._f3_mapping#21",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg._f3_mapping(x)",
        "snippet": "def _f3_mapping(x):\n    return x + 1",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg._f3#26",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg._f3(new=0)",
        "snippet": "def _f3(new=0):\n    return new",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_deprecate_kwarg#31",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_deprecate_kwarg(key, klass)",
        "snippet": "def test_deprecate_kwarg(key, klass):\n    x = 78\n\n    with tm.assert_produces_warning(klass):\n        assert _f1(**{key: x}) == x",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_dict_deprecate_kwarg#39",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_dict_deprecate_kwarg(key)",
        "snippet": "def test_dict_deprecate_kwarg(key):\n    with tm.assert_produces_warning(FutureWarning):\n        assert _f2(old=key) == _f2_mappings[key]",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_missing_deprecate_kwarg#45",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_missing_deprecate_kwarg(key)",
        "snippet": "def test_missing_deprecate_kwarg(key):\n    with tm.assert_produces_warning(FutureWarning):\n        assert _f2(old=key) == key",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg#51",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg(x)",
        "snippet": "def test_callable_deprecate_kwarg(x):\n    with tm.assert_produces_warning(FutureWarning):\n        assert _f3(old=x) == _f3_mapping(x)",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg_fail#56",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_callable_deprecate_kwarg_fail()",
        "snippet": "def test_callable_deprecate_kwarg_fail():\n    msg = \"((can only|cannot) concatenate)|(must be str)|(Can't convert)\"\n\n    with pytest.raises(TypeError, match=msg):\n        _f3(old=\"hello\")",
        "begin_line": 56,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_bad_deprecate_kwarg#63",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_bad_deprecate_kwarg()",
        "snippet": "def test_bad_deprecate_kwarg():\n    msg = \"mapping from old to new argument values must be dict or callable!\"\n\n    with pytest.raises(TypeError, match=msg):\n\n        @deprecate_kwarg(\"old\", \"new\", 0)\n        def f4(new=None):\n            return new",
        "begin_line": 63,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg._f4#74",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg._f4(old=True, unchanged=True)",
        "snippet": "def _f4(old=True, unchanged=True):\n    return old, unchanged",
        "begin_line": 74,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_deprecate_kwarg.test_deprecate_keyword#79",
        "src_path": "pandas/tests/util/test_deprecate_kwarg.py",
        "class_name": "pandas.tests.util.test_deprecate_kwarg",
        "signature": "pandas.tests.util.test_deprecate_kwarg.test_deprecate_keyword(key)",
        "snippet": "def test_deprecate_keyword(key):\n    x = 9\n\n    if key == \"old\":\n        klass = FutureWarning\n        expected = (x, True)\n    else:\n        klass = None\n        expected = (True, x)\n\n    with tm.assert_produces_warning(klass):\n        assert _f4(**{key: x}) == expected",
        "begin_line": 79,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_not_exact#16",
        "src_path": "pandas/tests/util/test_assert_extension_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_extension_array_equal",
        "signature": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_not_exact(kwargs)",
        "snippet": "def test_assert_extension_array_equal_not_exact(kwargs):\n    # see gh-23709\n    arr1 = SparseArray([-0.17387645482451206, 0.3414148016424936])\n    arr2 = SparseArray([-0.17387645482451206, 0.3414148016424937])\n\n    if kwargs.get(\"check_exact\", False):\n        msg = \"\"\"\\\nExtensionArray are different\n\nExtensionArray values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[-0\\\\.17387645482.*, 0\\\\.341414801642.*\\\\]\n\\\\[right\\\\]: \\\\[-0\\\\.17387645482.*, 0\\\\.341414801642.*\\\\]\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_extension_array_equal(arr1, arr2, **kwargs)\n    else:\n        tm.assert_extension_array_equal(arr1, arr2, **kwargs)",
        "begin_line": 16,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_less_precise#38",
        "src_path": "pandas/tests/util/test_assert_extension_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_extension_array_equal",
        "signature": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_less_precise(check_less_precise)",
        "snippet": "def test_assert_extension_array_equal_less_precise(check_less_precise):\n    arr1 = SparseArray([0.5, 0.123456])\n    arr2 = SparseArray([0.5, 0.123457])\n\n    kwargs = dict(check_less_precise=check_less_precise)\n\n    if check_less_precise is False or check_less_precise >= 5:\n        msg = \"\"\"\\\nExtensionArray are different\n\nExtensionArray values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[0\\\\.5, 0\\\\.123456\\\\]\n\\\\[right\\\\]: \\\\[0\\\\.5, 0\\\\.123457\\\\]\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_extension_array_equal(arr1, arr2, **kwargs)\n    else:\n        tm.assert_extension_array_equal(arr1, arr2, **kwargs)",
        "begin_line": 38,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_dtype_mismatch#58",
        "src_path": "pandas/tests/util/test_assert_extension_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_extension_array_equal",
        "signature": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_dtype_mismatch(check_dtype)",
        "snippet": "def test_assert_extension_array_equal_dtype_mismatch(check_dtype):\n    end = 5\n    kwargs = dict(check_dtype=check_dtype)\n\n    arr1 = SparseArray(np.arange(end, dtype=\"int64\"))\n    arr2 = SparseArray(np.arange(end, dtype=\"int32\"))\n\n    if check_dtype:\n        msg = \"\"\"\\\nExtensionArray are different\n\nAttribute \"dtype\" are different\n\\\\[left\\\\]:  Sparse\\\\[int64, 0\\\\]\n\\\\[right\\\\]: Sparse\\\\[int32, 0\\\\]\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_extension_array_equal(arr1, arr2, **kwargs)\n    else:\n        tm.assert_extension_array_equal(arr1, arr2, **kwargs)",
        "begin_line": 58,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_missing_values#79",
        "src_path": "pandas/tests/util/test_assert_extension_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_extension_array_equal",
        "signature": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_missing_values()",
        "snippet": "def test_assert_extension_array_equal_missing_values():\n    arr1 = SparseArray([np.nan, 1, 2, np.nan])\n    arr2 = SparseArray([np.nan, 1, 2, 3])\n\n    msg = \"\"\"\\\nExtensionArray NA mask are different\n\nExtensionArray NA mask values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[True, False, False, True\\\\]\n\\\\[right\\\\]: \\\\[True, False, False, False\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_extension_array_equal(arr1, arr2)",
        "begin_line": 79,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_non_extension_array#95",
        "src_path": "pandas/tests/util/test_assert_extension_array_equal.py",
        "class_name": "pandas.tests.util.test_assert_extension_array_equal",
        "signature": "pandas.tests.util.test_assert_extension_array_equal.test_assert_extension_array_equal_non_extension_array(side)",
        "snippet": "def test_assert_extension_array_equal_non_extension_array(side):\n    numpy_array = np.arange(5)\n    extension_array = SparseArray(numpy_array)\n\n    msg = f\"{side} is not an ExtensionArray\"\n    args = (\n        (numpy_array, extension_array)\n        if side == \"left\"\n        else (extension_array, numpy_array)\n    )\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_extension_array_equal(*args)",
        "begin_line": 95,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal._assert_almost_equal_both#8",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal._assert_almost_equal_both(a, b, **kwargs)",
        "snippet": "def _assert_almost_equal_both(a, b, **kwargs):\n    \"\"\"\n    Check that two objects are approximately equal.\n\n    This check is performed commutatively.\n\n    Parameters\n    ----------\n    a : object\n        The first object to compare.\n    b : object\n        The second object to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_almost_equal`.\n    \"\"\"\n    tm.assert_almost_equal(a, b, **kwargs)\n    tm.assert_almost_equal(b, a, **kwargs)",
        "begin_line": 8,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal#27",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal(a, b, **kwargs)",
        "snippet": "def _assert_not_almost_equal(a, b, **kwargs):\n    \"\"\"\n    Check that two objects are not approximately equal.\n\n    Parameters\n    ----------\n    a : object\n        The first object to compare.\n    b : object\n        The second object to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_almost_equal`.\n    \"\"\"\n    try:\n        tm.assert_almost_equal(a, b, **kwargs)\n        msg = f\"{a} and {b} were approximately equal when they shouldn't have been\"\n        pytest.fail(msg=msg)\n    except AssertionError:\n        pass",
        "begin_line": 27,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal_both#48",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal._assert_not_almost_equal_both(a, b, **kwargs)",
        "snippet": "def _assert_not_almost_equal_both(a, b, **kwargs):\n    \"\"\"\n    Check that two objects are not approximately equal.\n\n    This check is performed commutatively.\n\n    Parameters\n    ----------\n    a : object\n        The first object to compare.\n    b : object\n        The second object to compare.\n    kwargs : dict\n        The arguments passed to `tm.assert_almost_equal`.\n    \"\"\"\n    _assert_not_almost_equal(a, b, **kwargs)\n    _assert_not_almost_equal(b, a, **kwargs)",
        "begin_line": 48,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers#77",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers(a, b)",
        "snippet": "def test_assert_almost_equal_numbers(a, b):\n    _assert_almost_equal_both(a, b)",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers#82",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers(a, b)",
        "snippet": "def test_assert_not_almost_equal_numbers(a, b):\n    _assert_not_almost_equal_both(a, b)",
        "begin_line": 82,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers_with_zeros#87",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_numbers_with_zeros(a, b)",
        "snippet": "def test_assert_almost_equal_numbers_with_zeros(a, b):\n    _assert_almost_equal_both(a, b)",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_zeros#92",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_zeros(a, b)",
        "snippet": "def test_assert_not_almost_equal_numbers_with_zeros(a, b):\n    _assert_not_almost_equal_both(a, b)",
        "begin_line": 92,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_mixed#97",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_numbers_with_mixed(a, b)",
        "snippet": "def test_assert_not_almost_equal_numbers_with_mixed(a, b):\n    _assert_not_almost_equal_both(a, b)",
        "begin_line": 97,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_edge_case_ndarrays#107",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_edge_case_ndarrays(left_dtype, right_dtype)",
        "snippet": "def test_assert_almost_equal_edge_case_ndarrays(left_dtype, right_dtype):\n    # Empty compare.\n    _assert_almost_equal_both(\n        np.array([], dtype=left_dtype),\n        np.array([], dtype=right_dtype),\n        check_dtype=False,\n    )",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dicts#116",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dicts()",
        "snippet": "def test_assert_almost_equal_dicts():\n    _assert_almost_equal_both({\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2})",
        "begin_line": 116,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_dicts#130",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_dicts(a, b)",
        "snippet": "def test_assert_not_almost_equal_dicts(a, b):\n    _assert_not_almost_equal_both(a, b)",
        "begin_line": 130,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dict_like_object#135",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_dict_like_object(val)",
        "snippet": "def test_assert_almost_equal_dict_like_object(val):\n    dict_val = 1\n    real_dict = dict(a=val)\n\n    class DictLikeObj:\n        def keys(self):\n            return (\"a\",)\n\n        def __getitem__(self, item):\n            if item == \"a\":\n                return dict_val\n\n    func = (\n        _assert_almost_equal_both if val == dict_val else _assert_not_almost_equal_both\n    )\n    func(real_dict, DictLikeObj(), check_dtype=False)",
        "begin_line": 135,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.test_assert_almost_equal_dict_like_object#135",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj",
        "signature": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.test_assert_almost_equal_dict_like_object(val)",
        "snippet": "def test_assert_almost_equal_dict_like_object(val):\n    dict_val = 1\n    real_dict = dict(a=val)\n\n    class DictLikeObj:\n        def keys(self):\n            return (\"a\",)\n\n        def __getitem__(self, item):\n            if item == \"a\":\n                return dict_val\n\n    func = (\n        _assert_almost_equal_both if val == dict_val else _assert_not_almost_equal_both\n    )\n    func(real_dict, DictLikeObj(), check_dtype=False)",
        "begin_line": 135,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.keys#140",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj",
        "signature": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.keys(self)",
        "snippet": "        def keys(self):\n            return (\"a\",)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.__getitem__#143",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal.DictLikeObj",
        "signature": "pandas.tests.util.test_assert_almost_equal.DictLikeObj.__getitem__(self, item)",
        "snippet": "        def __getitem__(self, item):\n            if item == \"a\":\n                return dict_val",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_strings#153",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_strings()",
        "snippet": "def test_assert_almost_equal_strings():\n    _assert_almost_equal_both(\"abc\", \"abc\")",
        "begin_line": 153,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_strings#160",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_strings(a, b)",
        "snippet": "def test_assert_not_almost_equal_strings(a, b):\n    _assert_not_almost_equal_both(a, b)",
        "begin_line": 160,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterables#167",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterables(a, b)",
        "snippet": "def test_assert_almost_equal_iterables(a, b):\n    _assert_almost_equal_both(a, b)",
        "begin_line": 167,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_iterables#185",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_iterables(a, b)",
        "snippet": "def test_assert_not_almost_equal_iterables(a, b):\n    _assert_not_almost_equal(a, b)",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_null#189",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_null()",
        "snippet": "def test_assert_almost_equal_null():\n    _assert_almost_equal_both(None, None)",
        "begin_line": 189,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_null#194",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_null(a, b)",
        "snippet": "def test_assert_not_almost_equal_null(a, b):\n    _assert_not_almost_equal(a, b)",
        "begin_line": 194,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_inf#210",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_inf(a, b)",
        "snippet": "def test_assert_almost_equal_inf(a, b):\n    _assert_almost_equal_both(a, b)",
        "begin_line": 210,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_inf#214",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_not_almost_equal_inf()",
        "snippet": "def test_assert_not_almost_equal_inf():\n    _assert_not_almost_equal_both(np.inf, 0)",
        "begin_line": 214,
        "end_line": 215,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_pandas#227",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_pandas(a, b)",
        "snippet": "def test_assert_almost_equal_pandas(a, b):\n    _assert_almost_equal_both(a, b)",
        "begin_line": 227,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_object#231",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_object()",
        "snippet": "def test_assert_almost_equal_object():\n    a = [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-01\")]\n    b = [Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-01\")]\n    _assert_almost_equal_both(a, b)",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch#237",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch()",
        "snippet": "def test_assert_almost_equal_value_mismatch():\n    msg = \"expected 2\\\\.00000 but got 1\\\\.00000, with decimal 5\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(1, 2)",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_class_mismatch#248",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_class_mismatch(a, b, klass1, klass2)",
        "snippet": "def test_assert_almost_equal_class_mismatch(a, b, klass1, klass2):\n\n    msg = f\"\"\"numpy array are different\n\nnumpy array classes are different\n\\\\[left\\\\]:  {klass1}\n\\\\[right\\\\]: {klass2}\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(a, b)",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch1#260",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch1()",
        "snippet": "def test_assert_almost_equal_value_mismatch1():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(66\\\\.66667 %\\\\)\n\\\\[left\\\\]:  \\\\[nan, 2\\\\.0, 3\\\\.0\\\\]\n\\\\[right\\\\]: \\\\[1\\\\.0, nan, 3\\\\.0\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(np.array([np.nan, 2, 3]), np.array([1, np.nan, 3]))",
        "begin_line": 260,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch2#271",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch2()",
        "snippet": "def test_assert_almost_equal_value_mismatch2():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[1, 2\\\\]\n\\\\[right\\\\]: \\\\[1, 3\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(np.array([1, 2]), np.array([1, 3]))",
        "begin_line": 271,
        "end_line": 279,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch3#282",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch3()",
        "snippet": "def test_assert_almost_equal_value_mismatch3():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(16\\\\.66667 %\\\\)\n\\\\[left\\\\]:  \\\\[\\\\[1, 2\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\n\\\\[right\\\\]: \\\\[\\\\[1, 3\\\\], \\\\[3, 4\\\\], \\\\[5, 6\\\\]\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(\n            np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])\n        )",
        "begin_line": 282,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch4#295",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_value_mismatch4()",
        "snippet": "def test_assert_almost_equal_value_mismatch4():\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[\\\\[1, 2\\\\], \\\\[3, 4\\\\]\\\\]\n\\\\[right\\\\]: \\\\[\\\\[1, 3\\\\], \\\\[3, 4\\\\]\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(np.array([[1, 2], [3, 4]]), np.array([[1, 3], [3, 4]]))",
        "begin_line": 295,
        "end_line": 303,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_shape_mismatch_override#306",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_shape_mismatch_override()",
        "snippet": "def test_assert_almost_equal_shape_mismatch_override():\n    msg = \"\"\"Index are different\n\nIndex shapes are different\n\\\\[left\\\\]:  \\\\(2L*,\\\\)\n\\\\[right\\\\]: \\\\(3L*,\\\\)\"\"\"\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(np.array([1, 2]), np.array([3, 4, 5]), obj=\"Index\")",
        "begin_line": 306,
        "end_line": 313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_unicode#316",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_unicode()",
        "snippet": "def test_assert_almost_equal_unicode():\n    # see gh-20503\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  \\\\[\u00e1, \u00e0, \u00e4\\\\]\n\\\\[right\\\\]: \\\\[\u00e1, \u00e0, \u00e5\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(np.array([\"\u00e1\", \"\u00e0\", \"\u00e4\"]), np.array([\"\u00e1\", \"\u00e0\", \"\u00e5\"]))",
        "begin_line": 316,
        "end_line": 325,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_timestamp#328",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_timestamp()",
        "snippet": "def test_assert_almost_equal_timestamp():\n    a = np.array([Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-01\")])\n    b = np.array([Timestamp(\"2011-01-01\"), Timestamp(\"2011-01-02\")])\n\n    msg = \"\"\"numpy array are different\n\nnumpy array values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[2011-01-01 00:00:00, 2011-01-01 00:00:00\\\\]\n\\\\[right\\\\]: \\\\[2011-01-01 00:00:00, 2011-01-02 00:00:00\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal(a, b)",
        "begin_line": 328,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_length_mismatch#342",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_length_mismatch()",
        "snippet": "def test_assert_almost_equal_iterable_length_mismatch():\n    msg = \"\"\"Iterable are different\n\nIterable length are different\n\\\\[left\\\\]:  2\n\\\\[right\\\\]: 3\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal([1, 2], [3, 4, 5])",
        "begin_line": 342,
        "end_line": 350,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_values_mismatch#353",
        "src_path": "pandas/tests/util/test_assert_almost_equal.py",
        "class_name": "pandas.tests.util.test_assert_almost_equal",
        "signature": "pandas.tests.util.test_assert_almost_equal.test_assert_almost_equal_iterable_values_mismatch()",
        "snippet": "def test_assert_almost_equal_iterable_values_mismatch():\n    msg = \"\"\"Iterable are different\n\nIterable values are different \\\\(50\\\\.0 %\\\\)\n\\\\[left\\\\]:  \\\\[1, 2\\\\]\n\\\\[right\\\\]: \\\\[1, 3\\\\]\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_almost_equal([1, 2], [1, 3])",
        "begin_line": 353,
        "end_line": 361,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_rands#10",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_rands()",
        "snippet": "def test_rands():\n    r = tm.rands(10)\n    assert len(r) == 10",
        "begin_line": 10,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_rands_array_1d#15",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_rands_array_1d()",
        "snippet": "def test_rands_array_1d():\n    arr = tm.rands_array(5, size=10)\n    assert arr.shape == (10,)\n    assert len(arr[0]) == 5",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_rands_array_2d#21",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_rands_array_2d()",
        "snippet": "def test_rands_array_2d():\n    arr = tm.rands_array(7, size=(10, 10))\n    assert arr.shape == (10, 10)\n    assert len(arr[1, 1]) == 7",
        "begin_line": 21,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_numpy_err_state_is_default#27",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_numpy_err_state_is_default()",
        "snippet": "def test_numpy_err_state_is_default():\n    expected = {\"over\": \"warn\", \"divide\": \"warn\", \"invalid\": \"warn\", \"under\": \"ignore\"}\n    import numpy as np\n\n    # The error state should be unchanged after that import.\n    assert np.geterr() == expected",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_convert_rows_list_to_csv_str#35",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_convert_rows_list_to_csv_str()",
        "snippet": "def test_convert_rows_list_to_csv_str():\n    rows_list = [\"aaa\", \"bbb\", \"ccc\"]\n    ret = tm.convert_rows_list_to_csv_str(rows_list)\n\n    if compat.is_platform_windows():\n        expected = \"aaa\\r\\nbbb\\r\\nccc\\r\\n\"\n    else:\n        expected = \"aaa\\nbbb\\nccc\\n\"\n\n    assert ret == expected",
        "begin_line": 35,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_create_temp_directory#47",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_create_temp_directory()",
        "snippet": "def test_create_temp_directory():\n    with tm.ensure_clean_dir() as path:\n        assert os.path.exists(path)\n        assert os.path.isdir(path)\n    assert not os.path.exists(path)",
        "begin_line": 47,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_datapath_missing#55",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_datapath_missing(datapath)",
        "snippet": "def test_datapath_missing(datapath):\n    with pytest.raises(ValueError, match=\"Could not find file\"):\n        datapath(\"not_a_file\")",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_datapath#60",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_datapath(datapath)",
        "snippet": "def test_datapath(datapath):\n    args = (\"data\", \"iris.csv\")\n\n    result = datapath(*args)\n    expected = os.path.join(os.path.dirname(os.path.dirname(__file__)), *args)\n\n    assert result == expected",
        "begin_line": 60,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_rng_context#69",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_rng_context()",
        "snippet": "def test_rng_context():\n    import numpy as np\n\n    expected0 = 1.764052345967664\n    expected1 = 1.6243453636632417\n\n    with tm.RNGContext(0):\n        with tm.RNGContext(1):\n            assert np.random.randn() == expected1\n        assert np.random.randn() == expected0",
        "begin_line": 69,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_util.test_external_error_raised#81",
        "src_path": "pandas/tests/util/test_util.py",
        "class_name": "pandas.tests.util.test_util",
        "signature": "pandas.tests.util.test_util.test_external_error_raised()",
        "snippet": "def test_external_error_raised():\n    with tm.external_error_raised(TypeError):\n        raise TypeError(\"Should not check this error message, so it will pass\")",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.series#25",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.series(request)",
        "snippet": "def series(request):\n    return request.param",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.index#30",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.index(request)",
        "snippet": "def index(request):\n    return request.param",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing._check_equal#34",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing._check_equal(obj, **kwargs)",
        "snippet": "def _check_equal(obj, **kwargs):\n    \"\"\"\n    Check that hashing an objects produces the same value each time.\n\n    Parameters\n    ----------\n    obj : object\n        The object to hash.\n    kwargs : kwargs\n        Keyword arguments to pass to the hashing function.\n    \"\"\"\n    a = hash_pandas_object(obj, **kwargs)\n    b = hash_pandas_object(obj, **kwargs)\n    tm.assert_series_equal(a, b)",
        "begin_line": 34,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing._check_not_equal_with_index#50",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing._check_not_equal_with_index(obj)",
        "snippet": "def _check_not_equal_with_index(obj):\n    \"\"\"\n    Check the hash of an object with and without its index is not the same.\n\n    Parameters\n    ----------\n    obj : object\n        The object to hash.\n    \"\"\"\n    if not isinstance(obj, Index):\n        a = hash_pandas_object(obj, index=True)\n        b = hash_pandas_object(obj, index=False)\n\n        if len(obj):\n            assert not (a == b).all()",
        "begin_line": 50,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_consistency#67",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_consistency()",
        "snippet": "def test_consistency():\n    # Check that our hash doesn't change because of a mistake\n    # in the actual code; this is the ground truth.\n    result = hash_pandas_object(Index([\"foo\", \"bar\", \"baz\"]))\n    expected = Series(\n        np.array(\n            [3600424527151052760, 1374399572096150070, 477881037637427054],\n            dtype=\"uint64\",\n        ),\n        index=[\"foo\", \"bar\", \"baz\"],\n    )\n    tm.assert_series_equal(result, expected)",
        "begin_line": 67,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_array#81",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_array(series)",
        "snippet": "def test_hash_array(series):\n    arr = series.values\n    tm.assert_numpy_array_equal(hash_array(arr), hash_array(arr))",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_array_mixed#89",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_array_mixed(arr2)",
        "snippet": "def test_hash_array_mixed(arr2):\n    result1 = hash_array(np.array([\"3\", \"4\", \"All\"]))\n    result2 = hash_array(arr2)\n\n    tm.assert_numpy_array_equal(result1, result2)",
        "begin_line": 89,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_array_errors#97",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_array_errors(val)",
        "snippet": "def test_hash_array_errors(val):\n    msg = \"must pass a ndarray-like\"\n    with pytest.raises(TypeError, match=msg):\n        hash_array(val)",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_tuples#103",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_tuples()",
        "snippet": "def test_hash_tuples():\n    tuples = [(1, \"one\"), (1, \"two\"), (2, \"one\")]\n    result = hash_tuples(tuples)\n\n    expected = hash_pandas_object(MultiIndex.from_tuples(tuples)).values\n    tm.assert_numpy_array_equal(result, expected)\n\n    result = hash_tuples(tuples[0])\n    assert result == expected[0]",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_tuple#118",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_tuple(tup)",
        "snippet": "def test_hash_tuple(tup):\n    # Test equivalence between\n    # hash_tuples and hash_tuple.\n    result = hash_tuple(tup)\n    expected = hash_tuples([tup])[0]\n\n    assert result == expected",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_scalar#147",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_scalar(val)",
        "snippet": "def test_hash_scalar(val):\n    result = _hash_scalar(val)\n    expected = hash_array(np.array([val], dtype=object), categorize=True)\n\n    assert result[0] == expected[0]",
        "begin_line": 147,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_tuples_err#155",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_tuples_err(val)",
        "snippet": "def test_hash_tuples_err(val):\n    msg = \"must be convertible to a list-of-tuples\"\n    with pytest.raises(TypeError, match=msg):\n        hash_tuples(val)",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_multiindex_unique#161",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_multiindex_unique()",
        "snippet": "def test_multiindex_unique():\n    mi = MultiIndex.from_tuples([(118, 472), (236, 118), (51, 204), (102, 51)])\n    assert mi.is_unique is True\n\n    result = hash_pandas_object(mi)\n    assert result.is_unique is True",
        "begin_line": 161,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_multiindex_objects#169",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_multiindex_objects()",
        "snippet": "def test_multiindex_objects():\n    mi = MultiIndex(\n        levels=[[\"b\", \"d\", \"a\"], [1, 2, 3]],\n        codes=[[0, 1, 0, 2], [2, 0, 0, 1]],\n        names=[\"col1\", \"col2\"],\n    )\n    recons = mi._sort_levels_monotonic()\n\n    # These are equal.\n    assert mi.equals(recons)\n    assert Index(mi.values).equals(Index(recons.values))",
        "begin_line": 169,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_pandas_object#212",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_pandas_object(obj, index)",
        "snippet": "def test_hash_pandas_object(obj, index):\n    _check_equal(obj, index=index)\n    _check_not_equal_with_index(obj)",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_pandas_object2#217",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_pandas_object2(series, index)",
        "snippet": "def test_hash_pandas_object2(series, index):\n    _check_equal(series, index=index)\n    _check_not_equal_with_index(series)",
        "begin_line": 217,
        "end_line": 219,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_pandas_empty_object#225",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_pandas_empty_object(obj, index)",
        "snippet": "def test_hash_pandas_empty_object(obj, index):\n    # These are by-definition the same with\n    # or without the index as the data is empty.\n    _check_equal(obj, index=index)",
        "begin_line": 225,
        "end_line": 228,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_categorical_consistency#240",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_categorical_consistency(s1, categorize)",
        "snippet": "def test_categorical_consistency(s1, categorize):\n    # see gh-15143\n    #\n    # Check that categoricals hash consistent with their values,\n    # not codes. This should work for categoricals of any dtype.\n    s2 = s1.astype(\"category\").cat.set_categories(s1)\n    s3 = s2.cat.set_categories(list(reversed(s1)))\n\n    # These should all hash identically.\n    h1 = hash_pandas_object(s1, categorize=categorize)\n    h2 = hash_pandas_object(s2, categorize=categorize)\n    h3 = hash_pandas_object(s3, categorize=categorize)\n\n    tm.assert_series_equal(h1, h2)\n    tm.assert_series_equal(h1, h3)",
        "begin_line": 240,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_categorical_with_nan_consistency#257",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_categorical_with_nan_consistency()",
        "snippet": "def test_categorical_with_nan_consistency():\n    c = pd.Categorical.from_codes(\n        [-1, 0, 1, 2, 3, 4], categories=pd.date_range(\"2012-01-01\", periods=5, name=\"B\")\n    )\n    expected = hash_array(c, categorize=False)\n\n    c = pd.Categorical.from_codes([-1, 0], categories=[pd.Timestamp(\"2012-01-01\")])\n    result = hash_array(c, categorize=False)\n\n    assert result[0] in expected\n    assert result[1] in expected",
        "begin_line": 257,
        "end_line": 267,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_pandas_errors#271",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_pandas_errors(obj)",
        "snippet": "def test_pandas_errors(obj):\n    msg = \"Unexpected type for hashing\"\n    with pytest.raises(TypeError, match=msg):\n        hash_pandas_object(obj)",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_keys#277",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_keys()",
        "snippet": "def test_hash_keys():\n    # Using different hash keys, should have\n    # different hashes for the same data.\n    #\n    # This only matters for object dtypes.\n    obj = Series(list(\"abc\"))\n\n    a = hash_pandas_object(obj, hash_key=\"9876543210123456\")\n    b = hash_pandas_object(obj, hash_key=\"9876543210123465\")\n\n    assert (a != b).all()",
        "begin_line": 277,
        "end_line": 287,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_invalid_key#290",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_invalid_key()",
        "snippet": "def test_invalid_key():\n    # This only matters for object dtypes.\n    msg = \"key should be a 16-byte string encoded\"\n\n    with pytest.raises(ValueError, match=msg):\n        hash_pandas_object(Series(list(\"abc\")), hash_key=\"foo\")",
        "begin_line": 290,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_already_encoded#298",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_already_encoded(index)",
        "snippet": "def test_already_encoded(index):\n    # If already encoded, then ok.\n    obj = Series(list(\"abc\")).str.encode(\"utf8\")\n    _check_equal(obj, index=index)",
        "begin_line": 298,
        "end_line": 301,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_alternate_encoding#304",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_alternate_encoding(index)",
        "snippet": "def test_alternate_encoding(index):\n    obj = Series(list(\"abc\"))\n    _check_equal(obj, index=index, encoding=\"ascii\")",
        "begin_line": 304,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_same_len_hash_collisions#311",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_same_len_hash_collisions(l_exp, l_add)",
        "snippet": "def test_same_len_hash_collisions(l_exp, l_add):\n    length = 2 ** (l_exp + 8) + l_add\n    s = tm.rands_array(length, 2)\n\n    result = hash_array(s, \"utf8\")\n    assert not result[0] == result[1]",
        "begin_line": 311,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_collisions#319",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_collisions()",
        "snippet": "def test_hash_collisions():\n    # Hash collisions are bad.\n    #\n    # https://github.com/pandas-dev/pandas/issues/14711#issuecomment-264885726\n    hashes = [\n        \"Ingrid-9Z9fKIZmkO7i7Cn51Li34pJm44fgX6DYGBNj3VPlOH50m7HnBlPxfIwFMrcNJNMP6PSgLmwWnInciMWrCSAlLEvt7JkJl4IxiMrVbXSa8ZQoVaq5xoQPjltuJEfwdNlO6jo8qRRHvD8sBEBMQASrRa6TsdaPTPCBo3nwIBpE7YzzmyH0vMBhjQZLx1aCT7faSEx7PgFxQhHdKFWROcysamgy9iVj8DO2Fmwg1NNl93rIAqC3mdqfrCxrzfvIY8aJdzin2cHVzy3QUJxZgHvtUtOLxoqnUHsYbNTeq0xcLXpTZEZCxD4PGubIuCNf32c33M7HFsnjWSEjE2yVdWKhmSVodyF8hFYVmhYnMCztQnJrt3O8ZvVRXd5IKwlLexiSp4h888w7SzAIcKgc3g5XQJf6MlSMftDXm9lIsE1mJNiJEv6uY6pgvC3fUPhatlR5JPpVAHNSbSEE73MBzJrhCAbOLXQumyOXigZuPoME7QgJcBalliQol7YZ9\",  # noqa: E501\n        \"Tim-b9MddTxOWW2AT1Py6vtVbZwGAmYCjbp89p8mxsiFoVX4FyDOF3wFiAkyQTUgwg9sVqVYOZo09Dh1AzhFHbgij52ylF0SEwgzjzHH8TGY8Lypart4p4onnDoDvVMBa0kdthVGKl6K0BDVGzyOXPXKpmnMF1H6rJzqHJ0HywfwS4XYpVwlAkoeNsiicHkJUFdUAhG229INzvIAiJuAHeJDUoyO4DCBqtoZ5TDend6TK7Y914yHlfH3g1WZu5LksKv68VQHJriWFYusW5e6ZZ6dKaMjTwEGuRgdT66iU5nqWTHRH8WSzpXoCFwGcTOwyuqPSe0fTe21DVtJn1FKj9F9nEnR9xOvJUO7E0piCIF4Ad9yAIDY4DBimpsTfKXCu1vdHpKYerzbndfuFe5AhfMduLYZJi5iAw8qKSwR5h86ttXV0Mc0QmXz8dsRvDgxjXSmupPxBggdlqUlC828hXiTPD7am0yETBV0F3bEtvPiNJfremszcV8NcqAoARMe\",  # noqa: E501\n    ]\n\n    # These should be different.\n    result1 = hash_array(np.asarray(hashes[0:1], dtype=object), \"utf8\")\n    expected1 = np.array([14963968704024874985], dtype=np.uint64)\n    tm.assert_numpy_array_equal(result1, expected1)\n\n    result2 = hash_array(np.asarray(hashes[1:2], dtype=object), \"utf8\")\n    expected2 = np.array([16428432627716348016], dtype=np.uint64)\n    tm.assert_numpy_array_equal(result2, expected2)\n\n    result = hash_array(np.asarray(hashes, dtype=object), \"utf8\")\n    tm.assert_numpy_array_equal(result, np.concatenate([expected1, expected2], axis=0))",
        "begin_line": 319,
        "end_line": 338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_with_tuple#341",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_with_tuple()",
        "snippet": "def test_hash_with_tuple():\n    # GH#28969 array containing a tuple raises on call to arr.astype(str)\n    #  apparently a numpy bug github.com/numpy/numpy/issues/9441\n\n    df = pd.DataFrame({\"data\": [tuple(\"1\"), tuple(\"2\")]})\n    result = hash_pandas_object(df)\n    expected = pd.Series([10345501319357378243, 8331063931016360761], dtype=np.uint64)\n    tm.assert_series_equal(result, expected)\n\n    df2 = pd.DataFrame({\"data\": [tuple([1]), tuple([2])]})\n    result = hash_pandas_object(df2)\n    expected = pd.Series([9408946347443669104, 3278256261030523334], dtype=np.uint64)\n    tm.assert_series_equal(result, expected)\n\n    # require that the elements of such tuples are themselves hashable\n\n    df3 = pd.DataFrame({\"data\": [tuple([1, []]), tuple([2, {}])]})\n    with pytest.raises(TypeError, match=\"unhashable type: 'list'\"):\n        hash_pandas_object(df3)",
        "begin_line": 341,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_hashing.test_hash_object_none_key#362",
        "src_path": "pandas/tests/util/test_hashing.py",
        "class_name": "pandas.tests.util.test_hashing",
        "signature": "pandas.tests.util.test_hashing.test_hash_object_none_key()",
        "snippet": "def test_hash_object_none_key():\n    # https://github.com/pandas-dev/pandas/issues/30887\n    result = pd.util.hash_pandas_object(pd.Series([\"a\", \"b\"]), hash_key=None)\n    expected = pd.Series([4578374827886788867, 17338122309987883691], dtype=\"uint64\")\n    tm.assert_series_equal(result, expected)",
        "begin_line": 362,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_doc.test_docstring_formatting#43",
        "src_path": "pandas/tests/util/test_doc.py",
        "class_name": "pandas.tests.util.test_doc",
        "signature": "pandas.tests.util.test_doc.test_docstring_formatting()",
        "snippet": "def test_docstring_formatting():\n    docstr = dedent(\n        \"\"\"\n        This is the cumsum method.\n\n        It computes the cumulative sum.\n        \"\"\"\n    )\n    assert cumsum.__doc__ == docstr",
        "begin_line": 43,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_doc.test_docstring_appending#54",
        "src_path": "pandas/tests/util/test_doc.py",
        "class_name": "pandas.tests.util.test_doc",
        "signature": "pandas.tests.util.test_doc.test_docstring_appending()",
        "snippet": "def test_docstring_appending():\n    docstr = dedent(\n        \"\"\"\n        This is the cumavg method.\n\n        It computes the cumulative average.\n\n        Examples\n        --------\n\n        >>> cumavg([1, 2, 3])\n        2\n        \"\"\"\n    )\n    assert cumavg.__doc__ == docstr",
        "begin_line": 54,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_doc.test_doc_template_from_func#71",
        "src_path": "pandas/tests/util/test_doc.py",
        "class_name": "pandas.tests.util.test_doc",
        "signature": "pandas.tests.util.test_doc.test_doc_template_from_func()",
        "snippet": "def test_doc_template_from_func():\n    docstr = dedent(\n        \"\"\"\n        This is the cummax method.\n\n        It computes the cumulative maximum.\n        \"\"\"\n    )\n    assert cummax.__doc__ == docstr",
        "begin_line": 71,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_doc.test_inherit_doc_template#82",
        "src_path": "pandas/tests/util/test_doc.py",
        "class_name": "pandas.tests.util.test_doc",
        "signature": "pandas.tests.util.test_doc.test_inherit_doc_template()",
        "snippet": "def test_inherit_doc_template():\n    docstr = dedent(\n        \"\"\"\n        This is the cummin method.\n\n        It computes the cumulative minimum.\n        \"\"\"\n    )\n    assert cummin.__doc__ == docstr",
        "begin_line": 82,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_safe_import.test_safe_import_non_existent#10",
        "src_path": "pandas/tests/util/test_safe_import.py",
        "class_name": "pandas.tests.util.test_safe_import",
        "signature": "pandas.tests.util.test_safe_import.test_safe_import_non_existent(name)",
        "snippet": "def test_safe_import_non_existent(name):\n    assert not td.safe_import(name)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_safe_import.test_safe_import_exists#14",
        "src_path": "pandas/tests/util/test_safe_import.py",
        "class_name": "pandas.tests.util.test_safe_import",
        "signature": "pandas.tests.util.test_safe_import.test_safe_import_exists()",
        "snippet": "def test_safe_import_exists():\n    assert td.safe_import(\"pandas\")",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_safe_import.test_safe_import_versions#19",
        "src_path": "pandas/tests/util/test_safe_import.py",
        "class_name": "pandas.tests.util.test_safe_import",
        "signature": "pandas.tests.util.test_safe_import.test_safe_import_versions(min_version, valid)",
        "snippet": "def test_safe_import_versions(min_version, valid):\n    result = td.safe_import(\"pandas\", min_version=min_version)\n    result = result if valid else not result\n    assert result",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_safe_import.test_safe_import_dummy#28",
        "src_path": "pandas/tests/util/test_safe_import.py",
        "class_name": "pandas.tests.util.test_safe_import",
        "signature": "pandas.tests.util.test_safe_import.test_safe_import_dummy(monkeypatch, min_version, valid)",
        "snippet": "def test_safe_import_dummy(monkeypatch, min_version, valid):\n    mod_name = \"hello123\"\n\n    mod = types.ModuleType(mod_name)\n    mod.__version__ = \"1.5\"\n\n    if min_version is not None:\n        monkeypatch.setitem(sys.modules, mod_name, mod)\n\n    result = td.safe_import(mod_name, min_version=min_version)\n    result = result if valid else not result\n    assert result",
        "begin_line": 28,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_levels_mismatch#8",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_levels_mismatch()",
        "snippet": "def test_index_equal_levels_mismatch():\n    msg = \"\"\"Index are different\n\nIndex levels are different\n\\\\[left\\\\]:  1, Int64Index\\\\(\\\\[1, 2, 3\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: 2, MultiIndex\\\\(\\\\[\\\\('A', 1\\\\),\n            \\\\('A', 2\\\\),\n            \\\\('B', 3\\\\),\n            \\\\('B', 4\\\\)\\\\],\n           \\\\)\"\"\"\n\n    idx1 = Index([1, 2, 3])\n    idx2 = MultiIndex.from_tuples([(\"A\", 1), (\"A\", 2), (\"B\", 3), (\"B\", 4)])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, exact=False)",
        "begin_line": 8,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_mismatch#26",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_mismatch(check_exact)",
        "snippet": "def test_index_equal_values_mismatch(check_exact):\n    msg = \"\"\"MultiIndex level \\\\[1\\\\] are different\n\nMultiIndex level \\\\[1\\\\] values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[2, 2, 3, 4\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\"\"\"\n\n    idx1 = MultiIndex.from_tuples([(\"A\", 2), (\"A\", 2), (\"B\", 3), (\"B\", 4)])\n    idx2 = MultiIndex.from_tuples([(\"A\", 1), (\"A\", 2), (\"B\", 3), (\"B\", 4)])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, check_exact=check_exact)",
        "begin_line": 26,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_length_mismatch#40",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_length_mismatch(check_exact)",
        "snippet": "def test_index_equal_length_mismatch(check_exact):\n    msg = \"\"\"Index are different\n\nIndex length are different\n\\\\[left\\\\]:  3, Int64Index\\\\(\\\\[1, 2, 3\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: 4, Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\"\"\"\n\n    idx1 = Index([1, 2, 3])\n    idx2 = Index([1, 2, 3, 4])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, check_exact=check_exact)",
        "begin_line": 40,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_class_mismatch#54",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_class_mismatch(check_exact)",
        "snippet": "def test_index_equal_class_mismatch(check_exact):\n    msg = \"\"\"Index are different\n\nIndex classes are different\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[1, 2, 3\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Float64Index\\\\(\\\\[1\\\\.0, 2\\\\.0, 3\\\\.0\\\\], dtype='float64'\\\\)\"\"\"\n\n    idx1 = Index([1, 2, 3])\n    idx2 = Index([1, 2, 3.0])\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, exact=True, check_exact=check_exact)",
        "begin_line": 54,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_close#68",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_close(check_exact)",
        "snippet": "def test_index_equal_values_close(check_exact):\n    idx1 = Index([1, 2, 3.0])\n    idx2 = Index([1, 2, 3.0000000001])\n\n    if check_exact:\n        msg = \"\"\"Index are different\n\nIndex values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  Float64Index\\\\(\\\\[1.0, 2.0, 3.0], dtype='float64'\\\\)\n\\\\[right\\\\]: Float64Index\\\\(\\\\[1.0, 2.0, 3.0000000001\\\\], dtype='float64'\\\\)\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_index_equal(idx1, idx2, check_exact=check_exact)\n    else:\n        tm.assert_index_equal(idx1, idx2, check_exact=check_exact)",
        "begin_line": 68,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_less_close#85",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_less_close(check_exact, check_less_precise)",
        "snippet": "def test_index_equal_values_less_close(check_exact, check_less_precise):\n    idx1 = Index([1, 2, 3.0])\n    idx2 = Index([1, 2, 3.0001])\n    kwargs = dict(check_exact=check_exact, check_less_precise=check_less_precise)\n\n    if check_exact or not check_less_precise:\n        msg = \"\"\"Index are different\n\nIndex values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  Float64Index\\\\(\\\\[1.0, 2.0, 3.0], dtype='float64'\\\\)\n\\\\[right\\\\]: Float64Index\\\\(\\\\[1.0, 2.0, 3.0001\\\\], dtype='float64'\\\\)\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_index_equal(idx1, idx2, **kwargs)\n    else:\n        tm.assert_index_equal(idx1, idx2, **kwargs)",
        "begin_line": 85,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_too_far#103",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_values_too_far(check_exact, check_less_precise)",
        "snippet": "def test_index_equal_values_too_far(check_exact, check_less_precise):\n    idx1 = Index([1, 2, 3])\n    idx2 = Index([1, 2, 4])\n    kwargs = dict(check_exact=check_exact, check_less_precise=check_less_precise)\n\n    msg = \"\"\"Index are different\n\nIndex values are different \\\\(33\\\\.33333 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[1, 2, 3\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[1, 2, 4\\\\], dtype='int64'\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, **kwargs)",
        "begin_line": 103,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_level_values_mismatch#118",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_level_values_mismatch(check_exact, check_less_precise)",
        "snippet": "def test_index_equal_level_values_mismatch(check_exact, check_less_precise):\n    idx1 = MultiIndex.from_tuples([(\"A\", 2), (\"A\", 2), (\"B\", 3), (\"B\", 4)])\n    idx2 = MultiIndex.from_tuples([(\"A\", 1), (\"A\", 2), (\"B\", 3), (\"B\", 4)])\n    kwargs = dict(check_exact=check_exact, check_less_precise=check_less_precise)\n\n    msg = \"\"\"MultiIndex level \\\\[1\\\\] are different\n\nMultiIndex level \\\\[1\\\\] values are different \\\\(25\\\\.0 %\\\\)\n\\\\[left\\\\]:  Int64Index\\\\(\\\\[2, 2, 3, 4\\\\], dtype='int64'\\\\)\n\\\\[right\\\\]: Int64Index\\\\(\\\\[1, 2, 3, 4\\\\], dtype='int64'\\\\)\"\"\"\n\n    with pytest.raises(AssertionError, match=msg):\n        tm.assert_index_equal(idx1, idx2, **kwargs)",
        "begin_line": 118,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_names#137",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_names(name1, name2)",
        "snippet": "def test_index_equal_names(name1, name2):\n\n    idx1 = Index([1, 2, 3], name=name1)\n    idx2 = Index([1, 2, 3], name=name2)\n\n    if name1 == name2 or name1 is name2:\n        tm.assert_index_equal(idx1, idx2)\n    else:\n        name1 = \"'x'\" if name1 == \"x\" else name1\n        name2 = \"'x'\" if name2 == \"x\" else name2\n        msg = f\"\"\"Index are different\n\nAttribute \"names\" are different\n\\\\[left\\\\]:  \\\\[{name1}\\\\]\n\\\\[right\\\\]: \\\\[{name2}\\\\]\"\"\"\n\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_index_equal(idx1, idx2)",
        "begin_line": 137,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_assert_index_equal.test_index_equal_category_mismatch#157",
        "src_path": "pandas/tests/util/test_assert_index_equal.py",
        "class_name": "pandas.tests.util.test_assert_index_equal",
        "signature": "pandas.tests.util.test_assert_index_equal.test_index_equal_category_mismatch(check_categorical)",
        "snippet": "def test_index_equal_category_mismatch(check_categorical):\n    msg = \"\"\"Index are different\n\nAttribute \"dtype\" are different\n\\\\[left\\\\]:  CategoricalDtype\\\\(categories=\\\\['a', 'b'\\\\], ordered=False\\\\)\n\\\\[right\\\\]: CategoricalDtype\\\\(categories=\\\\['a', 'b', 'c'\\\\], \\\nordered=False\\\\)\"\"\"\n\n    idx1 = Index(Categorical([\"a\", \"b\"]))\n    idx2 = Index(Categorical([\"a\", \"b\"], categories=[\"a\", \"b\", \"c\"]))\n\n    if check_categorical:\n        with pytest.raises(AssertionError, match=msg):\n            tm.assert_index_equal(idx1, idx2, check_categorical=check_categorical)\n    else:\n        tm.assert_index_equal(idx1, idx2, check_categorical=check_categorical)",
        "begin_line": 157,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args.test_bad_min_fname_arg_count#8",
        "src_path": "pandas/tests/util/test_validate_args.py",
        "class_name": "pandas.tests.util.test_validate_args",
        "signature": "pandas.tests.util.test_validate_args.test_bad_min_fname_arg_count()",
        "snippet": "def test_bad_min_fname_arg_count():\n    msg = \"'max_fname_arg_count' must be non-negative\"\n\n    with pytest.raises(ValueError, match=msg):\n        validate_args(_fname, (None,), -1, \"foo\")",
        "begin_line": 8,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_single#15",
        "src_path": "pandas/tests/util/test_validate_args.py",
        "class_name": "pandas.tests.util.test_validate_args",
        "signature": "pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_single()",
        "snippet": "def test_bad_arg_length_max_value_single():\n    args = (None, None)\n    compat_args = (\"foo\",)\n\n    min_fname_arg_count = 0\n    max_length = len(compat_args) + min_fname_arg_count\n    actual_length = len(args) + min_fname_arg_count\n    msg = (\n        fr\"{_fname}\\(\\) takes at most {max_length} \"\n        fr\"argument \\({actual_length} given\\)\"\n    )\n\n    with pytest.raises(TypeError, match=msg):\n        validate_args(_fname, args, min_fname_arg_count, compat_args)",
        "begin_line": 15,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_multiple#31",
        "src_path": "pandas/tests/util/test_validate_args.py",
        "class_name": "pandas.tests.util.test_validate_args",
        "signature": "pandas.tests.util.test_validate_args.test_bad_arg_length_max_value_multiple()",
        "snippet": "def test_bad_arg_length_max_value_multiple():\n    args = (None, None)\n    compat_args = dict(foo=None)\n\n    min_fname_arg_count = 2\n    max_length = len(compat_args) + min_fname_arg_count\n    actual_length = len(args) + min_fname_arg_count\n    msg = (\n        fr\"{_fname}\\(\\) takes at most {max_length} \"\n        fr\"arguments \\({actual_length} given\\)\"\n    )\n\n    with pytest.raises(TypeError, match=msg):\n        validate_args(_fname, args, min_fname_arg_count, compat_args)",
        "begin_line": 31,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args.test_not_all_defaults#48",
        "src_path": "pandas/tests/util/test_validate_args.py",
        "class_name": "pandas.tests.util.test_validate_args",
        "signature": "pandas.tests.util.test_validate_args.test_not_all_defaults(i)",
        "snippet": "def test_not_all_defaults(i):\n    bad_arg = \"foo\"\n    msg = (\n        f\"the '{bad_arg}' parameter is not supported \"\n        fr\"in the pandas implementation of {_fname}\\(\\)\"\n    )\n\n    compat_args = {\"foo\": 2, \"bar\": -1, \"baz\": 3}\n    arg_vals = (1, -1, 3)\n\n    with pytest.raises(ValueError, match=msg):\n        validate_args(_fname, arg_vals[:i], 2, compat_args)",
        "begin_line": 48,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args.test_validation#62",
        "src_path": "pandas/tests/util/test_validate_args.py",
        "class_name": "pandas.tests.util.test_validate_args",
        "signature": "pandas.tests.util.test_validate_args.test_validation()",
        "snippet": "def test_validation():\n    # No exceptions should be raised.\n    validate_args(_fname, (None,), 2, dict(out=None))\n\n    compat_args = {\"axis\": 1, \"out\": None}\n    validate_args(_fname, (1, None), 2, compat_args)",
        "begin_line": 62,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_one#8",
        "src_path": "pandas/tests/util/test_validate_args_and_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_args_and_kwargs",
        "signature": "pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_one()",
        "snippet": "def test_invalid_total_length_max_length_one():\n    compat_args = (\"foo\",)\n    kwargs = {\"foo\": \"FOO\"}\n    args = (\"FoO\", \"BaZ\")\n\n    min_fname_arg_count = 0\n    max_length = len(compat_args) + min_fname_arg_count\n    actual_length = len(kwargs) + len(args) + min_fname_arg_count\n\n    msg = (\n        fr\"{_fname}\\(\\) takes at most {max_length} \"\n        fr\"argument \\({actual_length} given\\)\"\n    )\n\n    with pytest.raises(TypeError, match=msg):\n        validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)",
        "begin_line": 8,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_multiple#26",
        "src_path": "pandas/tests/util/test_validate_args_and_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_args_and_kwargs",
        "signature": "pandas.tests.util.test_validate_args_and_kwargs.test_invalid_total_length_max_length_multiple()",
        "snippet": "def test_invalid_total_length_max_length_multiple():\n    compat_args = (\"foo\", \"bar\", \"baz\")\n    kwargs = {\"foo\": \"FOO\", \"bar\": \"BAR\"}\n    args = (\"FoO\", \"BaZ\")\n\n    min_fname_arg_count = 2\n    max_length = len(compat_args) + min_fname_arg_count\n    actual_length = len(kwargs) + len(args) + min_fname_arg_count\n\n    msg = (\n        fr\"{_fname}\\(\\) takes at most {max_length} \"\n        fr\"arguments \\({actual_length} given\\)\"\n    )\n\n    with pytest.raises(TypeError, match=msg):\n        validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)",
        "begin_line": 26,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args_and_kwargs.test_missing_args_or_kwargs#45",
        "src_path": "pandas/tests/util/test_validate_args_and_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_args_and_kwargs",
        "signature": "pandas.tests.util.test_validate_args_and_kwargs.test_missing_args_or_kwargs(args, kwargs)",
        "snippet": "def test_missing_args_or_kwargs(args, kwargs):\n    bad_arg = \"bar\"\n    min_fname_arg_count = 2\n\n    compat_args = {\"foo\": -5, bad_arg: 1}\n\n    msg = (\n        fr\"the '{bad_arg}' parameter is not supported \"\n        fr\"in the pandas implementation of {_fname}\\(\\)\"\n    )\n\n    with pytest.raises(ValueError, match=msg):\n        validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)",
        "begin_line": 45,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args_and_kwargs.test_duplicate_argument#60",
        "src_path": "pandas/tests/util/test_validate_args_and_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_args_and_kwargs",
        "signature": "pandas.tests.util.test_validate_args_and_kwargs.test_duplicate_argument()",
        "snippet": "def test_duplicate_argument():\n    min_fname_arg_count = 2\n\n    compat_args = {\"foo\": None, \"bar\": None, \"baz\": None}\n    kwargs = {\"foo\": None, \"bar\": None}\n    args = (None,)  # duplicate value for \"foo\"\n\n    msg = fr\"{_fname}\\(\\) got multiple values for keyword argument 'foo'\"\n\n    with pytest.raises(TypeError, match=msg):\n        validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)",
        "begin_line": 60,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_args_and_kwargs.test_validation#73",
        "src_path": "pandas/tests/util/test_validate_args_and_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_args_and_kwargs",
        "signature": "pandas.tests.util.test_validate_args_and_kwargs.test_validation()",
        "snippet": "def test_validation():\n    # No exceptions should be raised.\n    compat_args = {\"foo\": 1, \"bar\": None, \"baz\": -2}\n    kwargs = {\"baz\": -2}\n\n    args = (1, None)\n    min_fname_arg_count = 2\n\n    validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)",
        "begin_line": 73,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.conftest.check_dtype#5",
        "src_path": "pandas/tests/util/conftest.py",
        "class_name": "pandas.tests.util.conftest",
        "signature": "pandas.tests.util.conftest.check_dtype(request)",
        "snippet": "def check_dtype(request):\n    return request.param",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.conftest.check_exact#10",
        "src_path": "pandas/tests/util/conftest.py",
        "class_name": "pandas.tests.util.conftest",
        "signature": "pandas.tests.util.conftest.check_exact(request)",
        "snippet": "def check_exact(request):\n    return request.param",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.conftest.check_index_type#15",
        "src_path": "pandas/tests/util/conftest.py",
        "class_name": "pandas.tests.util.conftest",
        "signature": "pandas.tests.util.conftest.check_index_type(request)",
        "snippet": "def check_index_type(request):\n    return request.param",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.conftest.check_less_precise#20",
        "src_path": "pandas/tests/util/conftest.py",
        "class_name": "pandas.tests.util.conftest",
        "signature": "pandas.tests.util.conftest.check_less_precise(request)",
        "snippet": "def check_less_precise(request):\n    return request.param",
        "begin_line": 20,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.conftest.check_categorical#25",
        "src_path": "pandas/tests/util/conftest.py",
        "class_name": "pandas.tests.util.conftest",
        "signature": "pandas.tests.util.conftest.check_categorical(request)",
        "snippet": "def check_categorical(request):\n    return request.param",
        "begin_line": 25,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_show_versions.test_show_versions#24",
        "src_path": "pandas/tests/util/test_show_versions.py",
        "class_name": "pandas.tests.util.test_show_versions",
        "signature": "pandas.tests.util.test_show_versions.test_show_versions(capsys)",
        "snippet": "def test_show_versions(capsys):\n    # gh-32041\n    pd.show_versions()\n    captured = capsys.readouterr()\n    result = captured.out\n\n    # check header\n    assert \"INSTALLED VERSIONS\" in result\n\n    # check full commit hash\n    assert re.search(r\"commit\\s*:\\s[0-9a-f]{40}\\n\", result)\n\n    # check required dependency\n    assert re.search(r\"numpy\\s*:\\s([0-9\\.\\+a-f]|dev)+\\n\", result)\n\n    # check optional dependency\n    assert re.search(r\"pyarrow\\s*:\\s([0-9\\.]+|None)\\n\", result)",
        "begin_line": 24,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_kwargs.test_bad_kwarg#8",
        "src_path": "pandas/tests/util/test_validate_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_kwargs",
        "signature": "pandas.tests.util.test_validate_kwargs.test_bad_kwarg()",
        "snippet": "def test_bad_kwarg():\n    good_arg = \"f\"\n    bad_arg = good_arg + \"o\"\n\n    compat_args = {good_arg: \"foo\", bad_arg + \"o\": \"bar\"}\n    kwargs = {good_arg: \"foo\", bad_arg: \"bar\"}\n\n    msg = fr\"{_fname}\\(\\) got an unexpected keyword argument '{bad_arg}'\"\n\n    with pytest.raises(TypeError, match=msg):\n        validate_kwargs(_fname, kwargs, compat_args)",
        "begin_line": 8,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_kwargs.test_not_all_none#22",
        "src_path": "pandas/tests/util/test_validate_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_kwargs",
        "signature": "pandas.tests.util.test_validate_kwargs.test_not_all_none(i)",
        "snippet": "def test_not_all_none(i):\n    bad_arg = \"foo\"\n    msg = (\n        fr\"the '{bad_arg}' parameter is not supported \"\n        fr\"in the pandas implementation of {_fname}\\(\\)\"\n    )\n\n    compat_args = {\"foo\": 1, \"bar\": \"s\", \"baz\": None}\n\n    kwarg_keys = (\"foo\", \"bar\", \"baz\")\n    kwarg_vals = (2, \"s\", None)\n\n    kwargs = dict(zip(kwarg_keys[:i], kwarg_vals[:i]))\n\n    with pytest.raises(ValueError, match=msg):\n        validate_kwargs(_fname, kwargs, compat_args)",
        "begin_line": 22,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_kwargs.test_validation#40",
        "src_path": "pandas/tests/util/test_validate_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_kwargs",
        "signature": "pandas.tests.util.test_validate_kwargs.test_validation()",
        "snippet": "def test_validation():\n    # No exceptions should be raised.\n    compat_args = {\"f\": None, \"b\": 1, \"ba\": \"s\"}\n\n    kwargs = dict(f=None, b=1)\n    validate_kwargs(_fname, kwargs, compat_args)",
        "begin_line": 40,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg_fail#50",
        "src_path": "pandas/tests/util/test_validate_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_kwargs",
        "signature": "pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg_fail(name, value)",
        "snippet": "def test_validate_bool_kwarg_fail(name, value):\n    msg = (\n        f'For argument \"{name}\" expected type bool, '\n        f\"received type {type(value).__name__}\"\n    )\n\n    with pytest.raises(ValueError, match=msg):\n        validate_bool_kwarg(value, name)",
        "begin_line": 50,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg#62",
        "src_path": "pandas/tests/util/test_validate_kwargs.py",
        "class_name": "pandas.tests.util.test_validate_kwargs",
        "signature": "pandas.tests.util.test_validate_kwargs.test_validate_bool_kwarg(name, value)",
        "snippet": "def test_validate_bool_kwarg(name, value):\n    assert validate_bool_kwarg(value, name) == value",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    }
]