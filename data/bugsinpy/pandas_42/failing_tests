coverage run -m pytest pandas/tests/util/test_assert_frame_equal.py::test_assert_frame_equal_extension_dtype_mismatch
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/util/test_assert_frame_equal.py F                           [100%]

=================================== FAILURES ===================================
_______________ test_assert_frame_equal_extension_dtype_mismatch _______________

    def test_assert_frame_equal_extension_dtype_mismatch():
        # https://github.com/pandas-dev/pandas/issues/32747
        left = DataFrame({"a": [1, 2, 3]}, dtype="Int64")
        right = left.astype(int)
    
        msg = (
            "Attributes of DataFrame\\.iloc\\[:, 0\\] "
            '\\(column name="a"\\) are different\n\n'
            'Attribute "dtype" are different\n'
            "\\[left\\]:  Int64\n"
            "\\[right\\]: int[32|64]"
        )
    
>       tm.assert_frame_equal(left, right, check_dtype=False)

pandas/tests/util/test_assert_frame_equal.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <IntegerArray>
[1, 2, 3]
Length: 3, dtype: Int64
right = array([1, 2, 3]), check_dtype = True, check_less_precise = False
check_exact = False

    def assert_extension_array_equal(
        left, right, check_dtype=True, check_less_precise=False, check_exact=False
    ):
        """
        Check that left and right ExtensionArrays are equal.
    
        Parameters
        ----------
        left, right : ExtensionArray
            The two arrays to compare.
        check_dtype : bool, default True
            Whether to check if the ExtensionArray dtypes are identical.
        check_less_precise : bool or int, default False
            Specify comparison precision. Only used when check_exact is False.
            5 digits (False) or 3 digits (True) after decimal points are compared.
            If int, then specify the digits to compare.
        check_exact : bool, default False
            Whether to compare number exactly.
    
        Notes
        -----
        Missing values are checked separately from valid values.
        A mask of missing values is computed for each and checked to match.
        The remaining all-valid values are cast to object dtype and checked.
        """
        assert isinstance(left, ExtensionArray), "left is not an ExtensionArray"
>       assert isinstance(right, ExtensionArray), "right is not an ExtensionArray"
E       AssertionError: right is not an ExtensionArray

pandas/_testing.py:1019: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/util/test_assert_frame_equal.py::test_assert_frame_equal_extension_dtype_mismatch
============================== 1 failed in 0.31s ===============================

coverage run -m pytest pandas/tests/util/test_assert_frame_equal.py::test_assert_frame_equal_interval_dtype_mismatch
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/util/test_assert_frame_equal.py F                           [100%]

=================================== FAILURES ===================================
_______________ test_assert_frame_equal_interval_dtype_mismatch ________________

    def test_assert_frame_equal_interval_dtype_mismatch():
        # https://github.com/pandas-dev/pandas/issues/32747
        left = DataFrame({"a": [pd.Interval(0, 1)]}, dtype="interval")
        right = left.astype(object)
    
        msg = (
            "Attributes of DataFrame\\.iloc\\[:, 0\\] "
            '\\(column name="a"\\) are different\n\n'
            'Attribute "dtype" are different\n'
            "\\[left\\]:  interval\\[int64\\]\n"
            "\\[right\\]: object"
        )
    
>       tm.assert_frame_equal(left, right, check_dtype=False)

pandas/tests/util/test_assert_frame_equal.py:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/_testing.py:861: in assert_interval_array_equal
    _check_isinstance(left, right, IntervalArray)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <IntervalArray>
[(0, 1]]
Length: 1, closed: right, dtype: interval[int64]
right = <PandasArray>
[Interval(0, 1, closed='right')]
Length: 1, dtype: object
cls = <class 'pandas.core.arrays.interval.IntervalArray'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
            raise AssertionError(
                f"{cls_name} Expected type {cls}, found {type(left)} instead"
            )
        if not isinstance(right, cls):
>           raise AssertionError(
                f"{cls_name} Expected type {cls}, found {type(right)} instead"
            )
E           AssertionError: IntervalArray Expected type <class 'pandas.core.arrays.interval.IntervalArray'>, found <class 'pandas.core.arrays.numpy_.PandasArray'> instead

pandas/_testing.py:389: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/util/test_assert_frame_equal.py::test_assert_frame_equal_interval_dtype_mismatch
============================== 1 failed in 0.34s ===============================

coverage run -m pytest pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_extension_dtype_mismatch
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/util/test_assert_series_equal.py F                          [100%]

=================================== FAILURES ===================================
______________ test_assert_series_equal_extension_dtype_mismatch _______________

    def test_assert_series_equal_extension_dtype_mismatch():
        # https://github.com/pandas-dev/pandas/issues/32747
        left = Series(pd.array([1, 2, 3], dtype="Int64"))
        right = left.astype(int)
    
        msg = """Attributes of Series are different
    
    Attribute "dtype" are different
    \\[left\\]:  Int64
    \\[right\\]: int[32|64]"""
    
>       tm.assert_series_equal(left, right, check_dtype=False)

pandas/tests/util/test_assert_series_equal.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <IntegerArray>
[1, 2, 3]
Length: 3, dtype: Int64
right = array([1, 2, 3]), check_dtype = True, check_less_precise = False
check_exact = False

    def assert_extension_array_equal(
        left, right, check_dtype=True, check_less_precise=False, check_exact=False
    ):
        """
        Check that left and right ExtensionArrays are equal.
    
        Parameters
        ----------
        left, right : ExtensionArray
            The two arrays to compare.
        check_dtype : bool, default True
            Whether to check if the ExtensionArray dtypes are identical.
        check_less_precise : bool or int, default False
            Specify comparison precision. Only used when check_exact is False.
            5 digits (False) or 3 digits (True) after decimal points are compared.
            If int, then specify the digits to compare.
        check_exact : bool, default False
            Whether to compare number exactly.
    
        Notes
        -----
        Missing values are checked separately from valid values.
        A mask of missing values is computed for each and checked to match.
        The remaining all-valid values are cast to object dtype and checked.
        """
        assert isinstance(left, ExtensionArray), "left is not an ExtensionArray"
>       assert isinstance(right, ExtensionArray), "right is not an ExtensionArray"
E       AssertionError: right is not an ExtensionArray

pandas/_testing.py:1019: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_extension_dtype_mismatch
============================== 1 failed in 0.31s ===============================

coverage run -m pytest pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_interval_dtype_mismatch
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/util/test_assert_series_equal.py F                          [100%]

=================================== FAILURES ===================================
_______________ test_assert_series_equal_interval_dtype_mismatch _______________

    def test_assert_series_equal_interval_dtype_mismatch():
        # https://github.com/pandas-dev/pandas/issues/32747
        left = Series([pd.Interval(0, 1)], dtype="interval")
        right = left.astype(object)
    
        msg = """Attributes of Series are different
    
    Attribute "dtype" are different
    \\[left\\]:  interval\\[int64\\]
    \\[right\\]: object"""
    
>       tm.assert_series_equal(left, right, check_dtype=False)

pandas/tests/util/test_assert_series_equal.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/_testing.py:861: in assert_interval_array_equal
    _check_isinstance(left, right, IntervalArray)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = <IntervalArray>
[(0, 1]]
Length: 1, closed: right, dtype: interval[int64]
right = <PandasArray>
[Interval(0, 1, closed='right')]
Length: 1, dtype: object
cls = <class 'pandas.core.arrays.interval.IntervalArray'>

    def _check_isinstance(left, right, cls):
        """
        Helper method for our assert_* methods that ensures that
        the two objects being compared have the right type before
        proceeding with the comparison.
    
        Parameters
        ----------
        left : The first object being compared.
        right : The second object being compared.
        cls : The class type to check against.
    
        Raises
        ------
        AssertionError : Either `left` or `right` is not an instance of `cls`.
        """
        cls_name = cls.__name__
    
        if not isinstance(left, cls):
            raise AssertionError(
                f"{cls_name} Expected type {cls}, found {type(left)} instead"
            )
        if not isinstance(right, cls):
>           raise AssertionError(
                f"{cls_name} Expected type {cls}, found {type(right)} instead"
            )
E           AssertionError: IntervalArray Expected type <class 'pandas.core.arrays.interval.IntervalArray'>, found <class 'pandas.core.arrays.numpy_.PandasArray'> instead

pandas/_testing.py:389: AssertionError
=========================== short test summary info ============================
FAILED pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_interval_dtype_mismatch
============================== 1 failed in 0.34s ===============================
