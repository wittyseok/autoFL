[
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_name#14",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_name(self, dtype)",
        "snippet": "    def test_name(self, dtype):\n        assert isinstance(dtype.name, str)",
        "begin_line": 14,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_kind#17",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_kind(self, dtype)",
        "snippet": "    def test_kind(self, dtype):\n        valid = set(\"biufcmMOSUV\")\n        if dtype.kind is not None:\n            assert dtype.kind in valid",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string_own_name#22",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string_own_name(self, dtype)",
        "snippet": "    def test_construct_from_string_own_name(self, dtype):\n        result = dtype.construct_from_string(dtype.name)\n        assert type(result) is type(dtype)\n\n        # check OK as classmethod\n        result = type(dtype).construct_from_string(dtype.name)\n        assert type(result) is type(dtype)",
        "begin_line": 22,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_name#30",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_name(self, dtype)",
        "snippet": "    def test_is_dtype_from_name(self, dtype):\n        result = type(dtype).is_dtype(dtype.name)\n        assert result is True",
        "begin_line": 30,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_unboxes_dtype#34",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_unboxes_dtype(self, data, dtype)",
        "snippet": "    def test_is_dtype_unboxes_dtype(self, data, dtype):\n        assert dtype.is_dtype(data) is True",
        "begin_line": 34,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_self#37",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_dtype_from_self(self, dtype)",
        "snippet": "    def test_is_dtype_from_self(self, dtype):\n        result = type(dtype).is_dtype(dtype)\n        assert result is True",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_string_type#41",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_string_type(self, dtype)",
        "snippet": "    def test_is_not_string_type(self, dtype):\n        return not pd.api.types.is_string_dtype(dtype)",
        "begin_line": 41,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_object_type#44",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_is_not_object_type(self, dtype)",
        "snippet": "    def test_is_not_object_type(self, dtype):\n        return not pd.api.types.is_object_dtype(dtype)",
        "begin_line": 44,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_str#47",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_str(self, dtype)",
        "snippet": "    def test_eq_with_str(self, dtype):\n        assert dtype == dtype.name\n        assert dtype != dtype.name + \"-suffix\"",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_numpy_object#51",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_numpy_object(self, dtype)",
        "snippet": "    def test_eq_with_numpy_object(self, dtype):\n        assert dtype != np.dtype(\"object\")",
        "begin_line": 51,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_self#54",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq_with_self(self, dtype)",
        "snippet": "    def test_eq_with_self(self, dtype):\n        assert dtype == dtype\n        assert dtype != object()",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_array_type#58",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_array_type(self, data, dtype)",
        "snippet": "    def test_array_type(self, data, dtype):\n        assert dtype.construct_array_type() is type(data)",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_check_dtype#61",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_check_dtype(self, data)",
        "snippet": "    def test_check_dtype(self, data):\n        dtype = data.dtype\n\n        # check equivalency for using .dtypes\n        df = pd.DataFrame(\n            {\"A\": pd.Series(data, dtype=dtype), \"B\": data, \"C\": \"foo\", \"D\": 1}\n        )\n\n        # np.dtype('int64') == 'Int64' == 'int64'\n        # so can't distinguish\n        if dtype.name == \"Int64\":\n            expected = pd.Series([True, True, False, True], index=list(\"ABCD\"))\n        else:\n            expected = pd.Series([True, True, False, False], index=list(\"ABCD\"))\n\n        # XXX: This should probably be *fixed* not ignored.\n        # See libops.scalar_compare\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", DeprecationWarning)\n            result = df.dtypes == str(dtype)\n\n        self.assert_series_equal(result, expected)\n\n        expected = pd.Series([True, True, False, False], index=list(\"ABCD\"))\n        result = df.dtypes.apply(str) == str(dtype)\n        self.assert_series_equal(result, expected)",
        "begin_line": 61,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_hashable#88",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_hashable(self, dtype)",
        "snippet": "    def test_hashable(self, dtype):\n        hash(dtype)  # no error",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_str#91",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_str(self, dtype)",
        "snippet": "    def test_str(self, dtype):\n        assert str(dtype) == dtype.name",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq#94",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_eq(self, dtype)",
        "snippet": "    def test_eq(self, dtype):\n        assert dtype == dtype.name\n        assert dtype != \"anonther_type\"",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string#98",
        "src_path": "pandas/tests/extension/base/dtype.py",
        "class_name": "pandas.tests.extension.base.dtype.BaseDtypeTests",
        "signature": "pandas.tests.extension.base.dtype.BaseDtypeTests.test_construct_from_string(self, dtype)",
        "snippet": "    def test_construct_from_string(self, dtype):\n        dtype_instance = type(dtype).construct_from_string(dtype.name)\n        assert isinstance(dtype_instance, type(dtype))\n        with pytest.raises(TypeError):\n            type(dtype).construct_from_string(\"another_type\")",
        "begin_line": 98,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_value_counts#15",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_value_counts(self, all_data, dropna)",
        "snippet": "    def test_value_counts(self, all_data, dropna):\n        all_data = all_data[:10]\n        if dropna:\n            other = np.array(all_data[~all_data.isna()])\n        else:\n            other = all_data\n\n        result = pd.Series(all_data).value_counts(dropna=dropna).sort_index()\n        expected = pd.Series(other).value_counts(dropna=dropna).sort_index()\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 15,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_count#27",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_count(self, data_missing)",
        "snippet": "    def test_count(self, data_missing):\n        df = pd.DataFrame({\"A\": data_missing})\n        result = df.count(axis=\"columns\")\n        expected = pd.Series([0, 1])\n        self.assert_series_equal(result, expected)",
        "begin_line": 27,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_series_count#33",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_series_count(self, data_missing)",
        "snippet": "    def test_series_count(self, data_missing):\n        # GH#26835\n        ser = pd.Series(data_missing)\n        result = ser.count()\n        expected = 1\n        assert result == expected",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_apply_simple_series#40",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_apply_simple_series(self, data)",
        "snippet": "    def test_apply_simple_series(self, data):\n        result = pd.Series(data).apply(id)\n        assert isinstance(result, pd.Series)",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort#44",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort(self, data_for_sorting)",
        "snippet": "    def test_argsort(self, data_for_sorting):\n        result = pd.Series(data_for_sorting).argsort()\n        expected = pd.Series(np.array([2, 0, 1], dtype=np.int64))\n        self.assert_series_equal(result, expected)",
        "begin_line": 44,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing_array#49",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing_array(self, data_missing_for_sorting)",
        "snippet": "    def test_argsort_missing_array(self, data_missing_for_sorting):\n        result = data_missing_for_sorting.argsort()\n        expected = np.array([2, 0, 1], dtype=np.dtype(\"int\"))\n        # we don't care whether it's int32 or int64\n        result = result.astype(\"int64\", casting=\"safe\")\n        expected = expected.astype(\"int64\", casting=\"safe\")\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 49,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing#57",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_argsort_missing(self, data_missing_for_sorting)",
        "snippet": "    def test_argsort_missing(self, data_missing_for_sorting):\n        result = pd.Series(data_missing_for_sorting).argsort()\n        expected = pd.Series(np.array([1, -1, 0], dtype=np.int64))\n        self.assert_series_equal(result, expected)",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_nargsort#69",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_nargsort(self, data_missing_for_sorting, na_position, expected)",
        "snippet": "    def test_nargsort(self, data_missing_for_sorting, na_position, expected):\n        # GH 25439\n        result = nargsort(data_missing_for_sorting, na_position=na_position)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values#75",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values(self, data_for_sorting, ascending)",
        "snippet": "    def test_sort_values(self, data_for_sorting, ascending):\n        ser = pd.Series(data_for_sorting)\n        result = ser.sort_values(ascending=ascending)\n        expected = ser.iloc[[2, 0, 1]]\n        if not ascending:\n            expected = expected[::-1]\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_missing#85",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_missing(self, data_missing_for_sorting, ascending)",
        "snippet": "    def test_sort_values_missing(self, data_missing_for_sorting, ascending):\n        ser = pd.Series(data_missing_for_sorting)\n        result = ser.sort_values(ascending=ascending)\n        if ascending:\n            expected = ser.iloc[[2, 0, 1]]\n        else:\n            expected = ser.iloc[[0, 2, 1]]\n        self.assert_series_equal(result, expected)",
        "begin_line": 85,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_frame#95",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_sort_values_frame(self, data_for_sorting, ascending)",
        "snippet": "    def test_sort_values_frame(self, data_for_sorting, ascending):\n        df = pd.DataFrame({\"A\": [1, 2, 1], \"B\": data_for_sorting})\n        result = df.sort_values([\"A\", \"B\"])\n        expected = pd.DataFrame(\n            {\"A\": [1, 1, 2], \"B\": data_for_sorting.take([2, 0, 1])}, index=[2, 0, 1]\n        )\n        self.assert_frame_equal(result, expected)",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_unique#105",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_unique(self, data, box, method)",
        "snippet": "    def test_unique(self, data, box, method):\n        duplicated = box(data._from_sequence([data[0], data[0]]))\n\n        result = method(duplicated)\n\n        assert len(result) == 1\n        assert isinstance(result, type(data))\n        assert result[0] == duplicated[0]",
        "begin_line": 105,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize#115",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize(self, data_for_grouping, na_sentinel)",
        "snippet": "    def test_factorize(self, data_for_grouping, na_sentinel):\n        codes, uniques = pd.factorize(data_for_grouping, na_sentinel=na_sentinel)\n        expected_codes = np.array(\n            [0, 0, na_sentinel, na_sentinel, 1, 1, 0, 2], dtype=np.intp\n        )\n        expected_uniques = data_for_grouping.take([0, 4, 7])\n\n        tm.assert_numpy_array_equal(codes, expected_codes)\n        self.assert_extension_array_equal(uniques, expected_uniques)",
        "begin_line": 115,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_equivalence#126",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_equivalence(self, data_for_grouping, na_sentinel)",
        "snippet": "    def test_factorize_equivalence(self, data_for_grouping, na_sentinel):\n        codes_1, uniques_1 = pd.factorize(data_for_grouping, na_sentinel=na_sentinel)\n        codes_2, uniques_2 = data_for_grouping.factorize(na_sentinel=na_sentinel)\n\n        tm.assert_numpy_array_equal(codes_1, codes_2)\n        self.assert_extension_array_equal(uniques_1, uniques_2)",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_empty#133",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_factorize_empty(self, data)",
        "snippet": "    def test_factorize_empty(self, data):\n        codes, uniques = pd.factorize(data[:0])\n        expected_codes = np.array([], dtype=np.intp)\n        expected_uniques = type(data)._from_sequence([], dtype=data[:0].dtype)\n\n        tm.assert_numpy_array_equal(codes, expected_codes)\n        self.assert_extension_array_equal(uniques, expected_uniques)",
        "begin_line": 133,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_frame#141",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_frame(self, data_missing)",
        "snippet": "    def test_fillna_copy_frame(self, data_missing):\n        arr = data_missing.take([1, 1])\n        df = pd.DataFrame({\"A\": arr})\n\n        filled_val = df.iloc[0, 0]\n        result = df.fillna(filled_val)\n\n        assert df.A.values is not result.A.values",
        "begin_line": 141,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_series#150",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_copy_series(self, data_missing)",
        "snippet": "    def test_fillna_copy_series(self, data_missing):\n        arr = data_missing.take([1, 1])\n        ser = pd.Series(arr)\n\n        filled_val = ser[0]\n        result = ser.fillna(filled_val)\n\n        assert ser._values is not result._values\n        assert ser._values is arr",
        "begin_line": 150,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_length_mismatch#160",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_fillna_length_mismatch(self, data_missing)",
        "snippet": "    def test_fillna_length_mismatch(self, data_missing):\n        msg = \"Length of 'value' does not match.\"\n        with pytest.raises(ValueError, match=msg):\n            data_missing.fillna(data_missing.take([1]))",
        "begin_line": 160,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_le#165",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_le(self, data_repeated)",
        "snippet": "    def test_combine_le(self, data_repeated):\n        # GH 20825\n        # Test that combine works when doing a <= (le) comparison\n        orig_data1, orig_data2 = data_repeated(2)\n        s1 = pd.Series(orig_data1)\n        s2 = pd.Series(orig_data2)\n        result = s1.combine(s2, lambda x1, x2: x1 <= x2)\n        expected = pd.Series(\n            [a <= b for (a, b) in zip(list(orig_data1), list(orig_data2))]\n        )\n        self.assert_series_equal(result, expected)\n\n        val = s1.iloc[0]\n        result = s1.combine(val, lambda x1, x2: x1 <= x2)\n        expected = pd.Series([a <= val for a in list(orig_data1)])\n        self.assert_series_equal(result, expected)",
        "begin_line": 165,
        "end_line": 180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_add#182",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_add(self, data_repeated)",
        "snippet": "    def test_combine_add(self, data_repeated):\n        # GH 20825\n        orig_data1, orig_data2 = data_repeated(2)\n        s1 = pd.Series(orig_data1)\n        s2 = pd.Series(orig_data2)\n        result = s1.combine(s2, lambda x1, x2: x1 + x2)\n        with np.errstate(over=\"ignore\"):\n            expected = pd.Series(\n                orig_data1._from_sequence(\n                    [a + b for (a, b) in zip(list(orig_data1), list(orig_data2))]\n                )\n            )\n        self.assert_series_equal(result, expected)\n\n        val = s1.iloc[0]\n        result = s1.combine(val, lambda x1, x2: x1 + x2)\n        expected = pd.Series(\n            orig_data1._from_sequence([a + val for a in list(orig_data1)])\n        )\n        self.assert_series_equal(result, expected)",
        "begin_line": 182,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_first#203",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_combine_first(self, data)",
        "snippet": "    def test_combine_first(self, data):\n        # https://github.com/pandas-dev/pandas/issues/24147\n        a = pd.Series(data[:3])\n        b = pd.Series(data[2:5], index=[2, 3, 4])\n        result = a.combine_first(b)\n        expected = pd.Series(data[:5])\n        self.assert_series_equal(result, expected)",
        "begin_line": 203,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_container_shift#216",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_container_shift(self, data, frame, periods, indices)",
        "snippet": "    def test_container_shift(self, data, frame, periods, indices):\n        # https://github.com/pandas-dev/pandas/issues/22386\n        subset = data[:5]\n        data = pd.Series(subset, name=\"A\")\n        expected = pd.Series(subset.take(indices, allow_fill=True), name=\"A\")\n\n        if frame:\n            result = data.to_frame(name=\"A\").assign(B=1).shift(periods)\n            expected = pd.concat(\n                [expected, pd.Series([1] * 5, name=\"B\").shift(periods)], axis=1\n            )\n            compare = self.assert_frame_equal\n        else:\n            result = data.shift(periods)\n            compare = self.assert_series_equal\n\n        compare(result, expected)",
        "begin_line": 216,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_non_empty_array#238",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_non_empty_array(self, data, periods, indices)",
        "snippet": "    def test_shift_non_empty_array(self, data, periods, indices):\n        # https://github.com/pandas-dev/pandas/issues/23911\n        subset = data[:2]\n        result = subset.shift(periods)\n        expected = subset.take(indices, allow_fill=True)\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 238,
        "end_line": 243,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_empty_array#246",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_empty_array(self, data, periods)",
        "snippet": "    def test_shift_empty_array(self, data, periods):\n        # https://github.com/pandas-dev/pandas/issues/23911\n        empty = data[:0]\n        result = empty.shift(periods)\n        expected = empty\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 246,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_fill_value#253",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_shift_fill_value(self, data)",
        "snippet": "    def test_shift_fill_value(self, data):\n        arr = data[:4]\n        fill_value = data[0]\n        result = arr.shift(1, fill_value=fill_value)\n        expected = data.take([0, 0, 1, 2])\n        self.assert_extension_array_equal(result, expected)\n\n        result = arr.shift(-2, fill_value=fill_value)\n        expected = data.take([2, 3, 0, 0])\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 253,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_hash_pandas_object_works#264",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_hash_pandas_object_works(self, data, as_frame)",
        "snippet": "    def test_hash_pandas_object_works(self, data, as_frame):\n        # https://github.com/pandas-dev/pandas/issues/23066\n        data = pd.Series(data)\n        if as_frame:\n            data = data.to_frame()\n        a = pd.util.hash_pandas_object(data)\n        b = pd.util.hash_pandas_object(data)\n        self.assert_equal(a, b)",
        "begin_line": 264,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_searchsorted#273",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_searchsorted(self, data_for_sorting, as_series)",
        "snippet": "    def test_searchsorted(self, data_for_sorting, as_series):\n        b, c, a = data_for_sorting\n        arr = type(data_for_sorting)._from_sequence([a, b, c])\n\n        if as_series:\n            arr = pd.Series(arr)\n        assert arr.searchsorted(a) == 0\n        assert arr.searchsorted(a, side=\"right\") == 1\n\n        assert arr.searchsorted(b) == 1\n        assert arr.searchsorted(b, side=\"right\") == 2\n\n        assert arr.searchsorted(c) == 2\n        assert arr.searchsorted(c, side=\"right\") == 3\n\n        result = arr.searchsorted(arr.take([0, 2]))\n        expected = np.array([0, 2], dtype=np.intp)\n\n        tm.assert_numpy_array_equal(result, expected)\n\n        # sorter\n        sorter = np.array([1, 2, 0])\n        assert data_for_sorting.searchsorted(a, sorter=sorter) == 0",
        "begin_line": 273,
        "end_line": 295,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_where_series#297",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_where_series(self, data, na_value, as_frame)",
        "snippet": "    def test_where_series(self, data, na_value, as_frame):\n        assert data[0] != data[1]\n        cls = type(data)\n        a, b = data[:2]\n\n        ser = pd.Series(cls._from_sequence([a, a, b, b], dtype=data.dtype))\n        cond = np.array([True, True, False, False])\n\n        if as_frame:\n            ser = ser.to_frame(name=\"a\")\n            cond = cond.reshape(-1, 1)\n\n        result = ser.where(cond)\n        expected = pd.Series(\n            cls._from_sequence([a, a, na_value, na_value], dtype=data.dtype)\n        )\n\n        if as_frame:\n            expected = expected.to_frame(name=\"a\")\n        self.assert_equal(result, expected)\n\n        # array other\n        cond = np.array([True, False, True, True])\n        other = cls._from_sequence([a, b, a, b], dtype=data.dtype)\n        if as_frame:\n            other = pd.DataFrame({\"a\": other})\n            cond = pd.DataFrame({\"a\": cond})\n        result = ser.where(cond, other)\n        expected = pd.Series(cls._from_sequence([a, b, b, b], dtype=data.dtype))\n        if as_frame:\n            expected = expected.to_frame(name=\"a\")\n        self.assert_equal(result, expected)",
        "begin_line": 297,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat#331",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat(self, data, repeats, as_series, use_numpy)",
        "snippet": "    def test_repeat(self, data, repeats, as_series, use_numpy):\n        arr = type(data)._from_sequence(data[:3], dtype=data.dtype)\n        if as_series:\n            arr = pd.Series(arr)\n\n        result = np.repeat(arr, repeats) if use_numpy else arr.repeat(repeats)\n\n        repeats = [repeats] * 3 if isinstance(repeats, int) else repeats\n        expected = [x for x, n in zip(arr, repeats) for _ in range(n)]\n        expected = type(data)._from_sequence(expected, dtype=data.dtype)\n        if as_series:\n            expected = pd.Series(expected, index=arr.index.repeat(repeats))\n\n        self.assert_equal(result, expected)",
        "begin_line": 331,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat_raises#355",
        "src_path": "pandas/tests/extension/base/methods.py",
        "class_name": "pandas.tests.extension.base.methods.BaseMethodsTests",
        "signature": "pandas.tests.extension.base.methods.BaseMethodsTests.test_repeat_raises(self, data, repeats, kwargs, error, msg, use_numpy)",
        "snippet": "    def test_repeat_raises(self, data, repeats, kwargs, error, msg, use_numpy):\n        with pytest.raises(error, match=msg):\n            if use_numpy:\n                np.repeat(data, repeats, **kwargs)\n            else:\n                data.repeat(repeats, **kwargs)",
        "begin_line": 355,
        "end_line": 360,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.casting.BaseCastingTests.test_astype_object_series#10",
        "src_path": "pandas/tests/extension/base/casting.py",
        "class_name": "pandas.tests.extension.base.casting.BaseCastingTests",
        "signature": "pandas.tests.extension.base.casting.BaseCastingTests.test_astype_object_series(self, all_data)",
        "snippet": "    def test_astype_object_series(self, all_data):\n        ser = pd.Series({\"A\": all_data})\n        result = ser.astype(object)\n        assert isinstance(result._data.blocks[0], ObjectBlock)",
        "begin_line": 10,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.casting.BaseCastingTests.test_tolist#15",
        "src_path": "pandas/tests/extension/base/casting.py",
        "class_name": "pandas.tests.extension.base.casting.BaseCastingTests",
        "signature": "pandas.tests.extension.base.casting.BaseCastingTests.test_tolist(self, data)",
        "snippet": "    def test_tolist(self, data):\n        result = pd.Series(data).tolist()\n        expected = list(data)\n        assert result == expected",
        "begin_line": 15,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.casting.BaseCastingTests.test_astype_str#20",
        "src_path": "pandas/tests/extension/base/casting.py",
        "class_name": "pandas.tests.extension.base.casting.BaseCastingTests",
        "signature": "pandas.tests.extension.base.casting.BaseCastingTests.test_astype_str(self, data)",
        "snippet": "    def test_astype_str(self, data):\n        result = pd.Series(data[:5]).astype(str)\n        expected = pd.Series(data[:5].astype(str))\n        self.assert_series_equal(result, expected)",
        "begin_line": 20,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_series#12",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_series(self, data, box_in_series)",
        "snippet": "    def test_setitem_scalar_series(self, data, box_in_series):\n        if box_in_series:\n            data = pd.Series(data)\n        data[0] = data[1]\n        assert data[0] == data[1]",
        "begin_line": 12,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence#18",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence(self, data, box_in_series)",
        "snippet": "    def test_setitem_sequence(self, data, box_in_series):\n        if box_in_series:\n            data = pd.Series(data)\n        original = data.copy()\n\n        data[[0, 1]] = [data[1], data[0]]\n        assert data[0] == original[1]\n        assert data[1] == original[0]",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_mismatched_length_raises#27",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_mismatched_length_raises(self, data, as_array)",
        "snippet": "    def test_setitem_sequence_mismatched_length_raises(self, data, as_array):\n        ser = pd.Series(data)\n        original = ser.copy()\n        value = [data[0]]\n        if as_array:\n            value = data._from_sequence(value)\n\n        xpr = \"cannot set using a {} indexer with a different length\"\n        with pytest.raises(ValueError, match=xpr.format(\"list-like\")):\n            ser[[0, 1]] = value\n        # Ensure no modifications made before the exception\n        self.assert_series_equal(ser, original)\n\n        with pytest.raises(ValueError, match=xpr.format(\"slice\")):\n            ser[slice(3)] = value\n        self.assert_series_equal(ser, original)",
        "begin_line": 27,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_empty_indxer#44",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_empty_indxer(self, data, box_in_series)",
        "snippet": "    def test_setitem_empty_indxer(self, data, box_in_series):\n        if box_in_series:\n            data = pd.Series(data)\n        original = data.copy()\n        data[np.array([], dtype=int)] = []\n        self.assert_equal(data, original)",
        "begin_line": 44,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_broadcasts#51",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_sequence_broadcasts(self, data, box_in_series)",
        "snippet": "    def test_setitem_sequence_broadcasts(self, data, box_in_series):\n        if box_in_series:\n            data = pd.Series(data)\n        data[[0, 1]] = data[2]\n        assert data[0] == data[2]\n        assert data[1] == data[2]",
        "begin_line": 51,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar#59",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar(self, data, setter)",
        "snippet": "    def test_setitem_scalar(self, data, setter):\n        arr = pd.Series(data)\n        setter = getattr(arr, setter)\n        operator.setitem(setter, 0, data[1])\n        assert arr[0] == data[1]",
        "begin_line": 59,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_mixed#65",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_mixed(self, data)",
        "snippet": "    def test_setitem_loc_scalar_mixed(self, data):\n        df = pd.DataFrame({\"A\": np.arange(len(data)), \"B\": data})\n        df.loc[0, \"B\"] = data[1]\n        assert df.loc[0, \"B\"] == data[1]",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_single#70",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_single(self, data)",
        "snippet": "    def test_setitem_loc_scalar_single(self, data):\n        df = pd.DataFrame({\"B\": data})\n        df.loc[10, \"B\"] = data[1]\n        assert df.loc[10, \"B\"] == data[1]",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_multiple_homogoneous#75",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_loc_scalar_multiple_homogoneous(self, data)",
        "snippet": "    def test_setitem_loc_scalar_multiple_homogoneous(self, data):\n        df = pd.DataFrame({\"A\": data, \"B\": data})\n        df.loc[10, \"B\"] = data[1]\n        assert df.loc[10, \"B\"] == data[1]",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_mixed#80",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_mixed(self, data)",
        "snippet": "    def test_setitem_iloc_scalar_mixed(self, data):\n        df = pd.DataFrame({\"A\": np.arange(len(data)), \"B\": data})\n        df.iloc[0, 1] = data[1]\n        assert df.loc[0, \"B\"] == data[1]",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_single#85",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_single(self, data)",
        "snippet": "    def test_setitem_iloc_scalar_single(self, data):\n        df = pd.DataFrame({\"B\": data})\n        df.iloc[10, 0] = data[1]\n        assert df.loc[10, \"B\"] == data[1]",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_multiple_homogoneous#90",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_iloc_scalar_multiple_homogoneous(self, data)",
        "snippet": "    def test_setitem_iloc_scalar_multiple_homogoneous(self, data):\n        df = pd.DataFrame({\"A\": data, \"B\": data})\n        df.iloc[10, 1] = data[1]\n        assert df.loc[10, \"B\"] == data[1]",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_aligned#97",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_aligned(self, data, as_callable, setter)",
        "snippet": "    def test_setitem_mask_aligned(self, data, as_callable, setter):\n        ser = pd.Series(data)\n        mask = np.zeros(len(data), dtype=bool)\n        mask[:2] = True\n\n        if as_callable:\n            mask2 = lambda x: mask\n        else:\n            mask2 = mask\n\n        if setter:\n            # loc\n            target = getattr(ser, setter)\n        else:\n            # Series.__setitem__\n            target = ser\n\n        operator.setitem(target, mask2, data[5:7])\n\n        ser[mask2] = data[5:7]\n        assert ser[0] == data[5]\n        assert ser[1] == data[6]",
        "begin_line": 97,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_broadcast#121",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_mask_broadcast(self, data, setter)",
        "snippet": "    def test_setitem_mask_broadcast(self, data, setter):\n        ser = pd.Series(data)\n        mask = np.zeros(len(data), dtype=bool)\n        mask[:2] = True\n\n        if setter:  # loc\n            target = getattr(ser, setter)\n        else:  # __setitem__\n            target = ser\n\n        operator.setitem(target, mask, data[10])\n        assert ser[0] == data[10]\n        assert ser[1] == data[10]",
        "begin_line": 121,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_columns#135",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_columns(self, data)",
        "snippet": "    def test_setitem_expand_columns(self, data):\n        df = pd.DataFrame({\"A\": data})\n        result = df.copy()\n        result[\"B\"] = 1\n        expected = pd.DataFrame({\"A\": data, \"B\": [1] * len(data)})\n        self.assert_frame_equal(result, expected)\n\n        result = df.copy()\n        result.loc[:, \"B\"] = 1\n        self.assert_frame_equal(result, expected)\n\n        # overwrite with new type\n        result[\"B\"] = data\n        expected = pd.DataFrame({\"A\": data, \"B\": data})\n        self.assert_frame_equal(result, expected)",
        "begin_line": 135,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_with_extension#151",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_expand_with_extension(self, data)",
        "snippet": "    def test_setitem_expand_with_extension(self, data):\n        df = pd.DataFrame({\"A\": [1] * len(data)})\n        result = df.copy()\n        result[\"B\"] = data\n        expected = pd.DataFrame({\"A\": [1] * len(data), \"B\": data})\n        self.assert_frame_equal(result, expected)\n\n        result = df.copy()\n        result.loc[:, \"B\"] = data\n        self.assert_frame_equal(result, expected)",
        "begin_line": 151,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_frame_invalid_length#162",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_frame_invalid_length(self, data)",
        "snippet": "    def test_setitem_frame_invalid_length(self, data):\n        df = pd.DataFrame({\"A\": [1] * len(data)})\n        xpr = \"Length of values does not match length of index\"\n        with pytest.raises(ValueError, match=xpr):\n            df[\"B\"] = data[:5]",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_mismatch_length_raises#175",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_mismatch_length_raises(self, data)",
        "snippet": "    def test_setitem_slice_mismatch_length_raises(self, data):\n        arr = data[:5]\n        with pytest.raises(ValueError):\n            arr[:1] = arr[:2]",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_array#180",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_slice_array(self, data)",
        "snippet": "    def test_setitem_slice_array(self, data):\n        arr = data[:5].copy()\n        arr[:5] = data[-5:]\n        self.assert_extension_array_equal(arr, data[-5:])",
        "begin_line": 180,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_key_sequence_raise#185",
        "src_path": "pandas/tests/extension/base/setitem.py",
        "class_name": "pandas.tests.extension.base.setitem.BaseSetitemTests",
        "signature": "pandas.tests.extension.base.setitem.BaseSetitemTests.test_setitem_scalar_key_sequence_raise(self, data)",
        "snippet": "    def test_setitem_scalar_key_sequence_raise(self, data):\n        arr = data[:5].copy()\n        with pytest.raises(ValueError):\n            arr[0] = arr[[0, 1]]",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.all_data#37",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.all_data(request, data, data_missing)",
        "snippet": "def all_data(request, data, data_missing):\n    \"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"\n    if request.param == \"data\":\n        return data\n    elif request.param == \"data_missing\":\n        return data_missing",
        "begin_line": 37,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.gen#61",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.gen(count)",
        "snippet": "    def gen(count):\n        for _ in range(count):\n            yield data",
        "begin_line": 61,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.data_repeated#46",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.data_repeated(data)",
        "snippet": "def data_repeated(data):\n    \"\"\"\n    Generate many datasets.\n\n    Parameters\n    ----------\n    data : fixture implementing `data`\n\n    Returns\n    -------\n    Callable[[int], Generator]:\n        A callable that takes a `count` argument and\n        returns a generator yielding `count` datasets.\n    \"\"\"\n\n    def gen(count):\n        for _ in range(count):\n            yield data\n\n    return gen",
        "begin_line": 46,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.na_cmp#89",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.na_cmp()",
        "snippet": "def na_cmp():\n    \"\"\"Binary operator for comparing NA values.\n\n    Should return a function of two arguments that returns\n    True if both arguments are (scalar) NA for your type.\n\n    By default, uses ``operator.is_``\n    \"\"\"\n    return operator.is_",
        "begin_line": 89,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.box_in_series#118",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.box_in_series(request)",
        "snippet": "def box_in_series(request):\n    \"\"\"Whether to box the data in a Series\"\"\"\n    return request.param",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.groupby_apply_op#132",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.groupby_apply_op(request)",
        "snippet": "def groupby_apply_op(request):\n    \"\"\"\n    Functions to test groupby.apply().\n    \"\"\"\n    return request.param",
        "begin_line": 132,
        "end_line": 136,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.as_frame#140",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.as_frame(request)",
        "snippet": "def as_frame(request):\n    \"\"\"\n    Boolean fixture to support Series and Series.to_frame() comparison testing.\n    \"\"\"\n    return request.param",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.as_series#148",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.as_series(request)",
        "snippet": "def as_series(request):\n    \"\"\"\n    Boolean fixture to support arr and Series(arr) comparison testing.\n    \"\"\"\n    return request.param",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.use_numpy#156",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.use_numpy(request)",
        "snippet": "def use_numpy(request):\n    \"\"\"\n    Boolean fixture to support comparison testing of ExtensionDtype array\n    and numpy array.\n    \"\"\"\n    return request.param",
        "begin_line": 156,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.fillna_method#165",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.fillna_method(request)",
        "snippet": "def fillna_method(request):\n    \"\"\"\n    Parametrized fixture giving method parameters 'ffill' and 'bfill' for\n    Series.fillna(method=<method>) testing.\n    \"\"\"\n    return request.param",
        "begin_line": 165,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.conftest.as_array#174",
        "src_path": "pandas/tests/extension/conftest.py",
        "class_name": "pandas.tests.extension.conftest",
        "signature": "pandas.tests.extension.conftest.as_array(request)",
        "snippet": "def as_array(request):\n    \"\"\"\n    Boolean fixture to support ExtensionDtype _from_sequence method testing.\n    \"\"\"\n    return request.param",
        "begin_line": 174,
        "end_line": 178,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_series#12",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_series(self, data)",
        "snippet": "    def test_iloc_series(self, data):\n        ser = pd.Series(data)\n        result = ser.iloc[:4]\n        expected = pd.Series(data[:4])\n        self.assert_series_equal(result, expected)\n\n        result = ser.iloc[[0, 1, 2, 3]]\n        self.assert_series_equal(result, expected)",
        "begin_line": 12,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_frame#21",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_iloc_frame(self, data)",
        "snippet": "    def test_iloc_frame(self, data):\n        df = pd.DataFrame({\"A\": data, \"B\": np.arange(len(data), dtype=\"int64\")})\n        expected = pd.DataFrame({\"A\": data[:4]})\n\n        # slice -> frame\n        result = df.iloc[:4, [0]]\n        self.assert_frame_equal(result, expected)\n\n        # sequence -> frame\n        result = df.iloc[[0, 1, 2, 3], [0]]\n        self.assert_frame_equal(result, expected)\n\n        expected = pd.Series(data[:4], name=\"A\")\n\n        # slice -> series\n        result = df.iloc[:4, 0]\n        self.assert_series_equal(result, expected)\n\n        # sequence -> series\n        result = df.iloc[:4, 0]\n        self.assert_series_equal(result, expected)",
        "begin_line": 21,
        "end_line": 41,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_series#43",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_series(self, data)",
        "snippet": "    def test_loc_series(self, data):\n        ser = pd.Series(data)\n        result = ser.loc[:3]\n        expected = pd.Series(data[:4])\n        self.assert_series_equal(result, expected)\n\n        result = ser.loc[[0, 1, 2, 3]]\n        self.assert_series_equal(result, expected)",
        "begin_line": 43,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_frame#52",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_frame(self, data)",
        "snippet": "    def test_loc_frame(self, data):\n        df = pd.DataFrame({\"A\": data, \"B\": np.arange(len(data), dtype=\"int64\")})\n        expected = pd.DataFrame({\"A\": data[:4]})\n\n        # slice -> frame\n        result = df.loc[:3, [\"A\"]]\n        self.assert_frame_equal(result, expected)\n\n        # sequence -> frame\n        result = df.loc[[0, 1, 2, 3], [\"A\"]]\n        self.assert_frame_equal(result, expected)\n\n        expected = pd.Series(data[:4], name=\"A\")\n\n        # slice -> series\n        result = df.loc[:3, \"A\"]\n        self.assert_series_equal(result, expected)\n\n        # sequence -> series\n        result = df.loc[:3, \"A\"]\n        self.assert_series_equal(result, expected)",
        "begin_line": 52,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_iloc_frame_single_dtype#74",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_iloc_frame_single_dtype(self, data)",
        "snippet": "    def test_loc_iloc_frame_single_dtype(self, data):\n        # GH#27110 bug in ExtensionBlock.iget caused df.iloc[n] to incorrectly\n        #  return a scalar\n        df = pd.DataFrame({\"A\": data})\n        expected = pd.Series([data[2]], index=[\"A\"], name=2, dtype=data.dtype)\n\n        result = df.loc[2]\n        self.assert_series_equal(result, expected)\n\n        expected = pd.Series(\n            [data[-1]], index=[\"A\"], name=len(data) - 1, dtype=data.dtype\n        )\n        result = df.iloc[-1]\n        self.assert_series_equal(result, expected)",
        "begin_line": 74,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar#89",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar(self, data)",
        "snippet": "    def test_getitem_scalar(self, data):\n        result = data[0]\n        assert isinstance(result, data.dtype.type)\n\n        result = pd.Series(data)[0]\n        assert isinstance(result, data.dtype.type)",
        "begin_line": 89,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar_na#96",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_scalar_na(self, data_missing, na_cmp, na_value)",
        "snippet": "    def test_getitem_scalar_na(self, data_missing, na_cmp, na_value):\n        result = data_missing[0]\n        assert na_cmp(result, na_value)",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_mask#100",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_mask(self, data)",
        "snippet": "    def test_getitem_mask(self, data):\n        # Empty mask, raw array\n        mask = np.zeros(len(data), dtype=bool)\n        result = data[mask]\n        assert len(result) == 0\n        assert isinstance(result, type(data))\n\n        # Empty mask, in series\n        mask = np.zeros(len(data), dtype=bool)\n        result = pd.Series(data)[mask]\n        assert len(result) == 0\n        assert result.dtype == data.dtype\n\n        # non-empty mask, raw array\n        mask[0] = True\n        result = data[mask]\n        assert len(result) == 1\n        assert isinstance(result, type(data))\n\n        # non-empty mask, in series\n        result = pd.Series(data)[mask]\n        assert len(result) == 1\n        assert result.dtype == data.dtype",
        "begin_line": 100,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_slice#124",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_getitem_slice(self, data)",
        "snippet": "    def test_getitem_slice(self, data):\n        # getitem[slice] should return an array\n        result = data[slice(0)]  # empty\n        assert isinstance(result, type(data))\n\n        result = data[slice(1)]  # scalar\n        assert isinstance(result, type(data))",
        "begin_line": 124,
        "end_line": 130,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_get#132",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_get(self, data)",
        "snippet": "    def test_get(self, data):\n        # GH 20882\n        s = pd.Series(data, index=[2 * i for i in range(len(data))])\n        assert s.get(4) == s.iloc[2]\n\n        result = s.get([4, 6])\n        expected = s.iloc[[2, 3]]\n        self.assert_series_equal(result, expected)\n\n        result = s.get(slice(2))\n        expected = s.iloc[[0, 1]]\n        self.assert_series_equal(result, expected)\n\n        assert s.get(-1) is None\n        assert s.get(s.index.max() + 1) is None\n\n        s = pd.Series(data[:6], index=list(\"abcdef\"))\n        assert s.get(\"c\") == s.iloc[2]\n\n        result = s.get(slice(\"b\", \"d\"))\n        expected = s.iloc[[1, 2, 3]]\n        self.assert_series_equal(result, expected)\n\n        result = s.get(\"Z\")\n        assert result is None\n\n        assert s.get(4) == s.iloc[4]\n        assert s.get(-1) == s.iloc[-1]\n        assert s.get(len(s)) is None\n\n        # GH 21257\n        s = pd.Series(data)\n        s2 = s[::2]\n        assert s2.get(1) is None",
        "begin_line": 132,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_sequence#167",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_sequence(self, data)",
        "snippet": "    def test_take_sequence(self, data):\n        result = pd.Series(data)[[0, 1, 3]]\n        assert result.iloc[0] == data[0]\n        assert result.iloc[1] == data[1]\n        assert result.iloc[2] == data[3]",
        "begin_line": 167,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take#173",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take(self, data, na_value, na_cmp)",
        "snippet": "    def test_take(self, data, na_value, na_cmp):\n        result = data.take([0, -1])\n        assert result.dtype == data.dtype\n        assert result[0] == data[0]\n        assert result[1] == data[-1]\n\n        result = data.take([0, -1], allow_fill=True, fill_value=na_value)\n        assert result[0] == data[0]\n        assert na_cmp(result[1], na_value)\n\n        with pytest.raises(IndexError, match=\"out of bounds\"):\n            data.take([len(data) + 1])",
        "begin_line": 173,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_empty#186",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_empty(self, data, na_value, na_cmp)",
        "snippet": "    def test_take_empty(self, data, na_value, na_cmp):\n        empty = data[:0]\n\n        result = empty.take([-1], allow_fill=True)\n        assert na_cmp(result[0], na_value)\n\n        with pytest.raises(IndexError):\n            empty.take([-1])\n\n        with pytest.raises(IndexError, match=\"cannot do a non-empty take\"):\n            empty.take([0, 1])",
        "begin_line": 186,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_negative#198",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_negative(self, data)",
        "snippet": "    def test_take_negative(self, data):\n        # https://github.com/pandas-dev/pandas/issues/20640\n        n = len(data)\n        result = data.take([0, -n, n - 1, -1])\n        expected = data.take([0, 0, n - 1, n - 1])\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 198,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_non_na_fill_value#205",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_non_na_fill_value(self, data_missing)",
        "snippet": "    def test_take_non_na_fill_value(self, data_missing):\n        fill_value = data_missing[1]  # valid\n        na = data_missing[0]\n\n        array = data_missing._from_sequence([na, fill_value, na])\n        result = array.take([-1, 1], fill_value=fill_value, allow_fill=True)\n        expected = array.take([1, 1])\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 205,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_pandas_style_negative_raises#214",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_pandas_style_negative_raises(self, data, na_value)",
        "snippet": "    def test_take_pandas_style_negative_raises(self, data, na_value):\n        with pytest.raises(ValueError):\n            data.take([0, -2], fill_value=na_value, allow_fill=True)",
        "begin_line": 214,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_out_of_bounds_raises#219",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_out_of_bounds_raises(self, data, allow_fill)",
        "snippet": "    def test_take_out_of_bounds_raises(self, data, allow_fill):\n        arr = data[:3]\n        with pytest.raises(IndexError):\n            arr.take(np.asarray([0, 3]), allow_fill=allow_fill)",
        "begin_line": 219,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_series#224",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_take_series(self, data)",
        "snippet": "    def test_take_series(self, data):\n        s = pd.Series(data)\n        result = s.take([0, -1])\n        expected = pd.Series(\n            data._from_sequence([data[0], data[len(data) - 1]], dtype=s.dtype),\n            index=[0, len(data) - 1],\n        )\n        self.assert_series_equal(result, expected)",
        "begin_line": 224,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex#233",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex(self, data, na_value)",
        "snippet": "    def test_reindex(self, data, na_value):\n        s = pd.Series(data)\n        result = s.reindex([0, 1, 3])\n        expected = pd.Series(data.take([0, 1, 3]), index=[0, 1, 3])\n        self.assert_series_equal(result, expected)\n\n        n = len(data)\n        result = s.reindex([-1, 0, n])\n        expected = pd.Series(\n            data._from_sequence([na_value, data[0], na_value], dtype=s.dtype),\n            index=[-1, 0, n],\n        )\n        self.assert_series_equal(result, expected)\n\n        result = s.reindex([n, n + 1])\n        expected = pd.Series(\n            data._from_sequence([na_value, na_value], dtype=s.dtype), index=[n, n + 1]\n        )\n        self.assert_series_equal(result, expected)",
        "begin_line": 233,
        "end_line": 251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex_non_na_fill_value#253",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_reindex_non_na_fill_value(self, data_missing)",
        "snippet": "    def test_reindex_non_na_fill_value(self, data_missing):\n        valid = data_missing[1]\n        na = data_missing[0]\n\n        array = data_missing._from_sequence([na, valid])\n        ser = pd.Series(array)\n        result = ser.reindex([0, 1, 2], fill_value=valid)\n        expected = pd.Series(data_missing._from_sequence([na, valid, valid]))\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 253,
        "end_line": 262,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_len1#264",
        "src_path": "pandas/tests/extension/base/getitem.py",
        "class_name": "pandas.tests.extension.base.getitem.BaseGetitemTests",
        "signature": "pandas.tests.extension.base.getitem.BaseGetitemTests.test_loc_len1(self, data)",
        "snippet": "    def test_loc_len1(self, data):\n        # see GH-27785 take_nd with indexer of len 1 resulting in wrong ndim\n        df = pd.DataFrame({\"A\": data})\n        res = df.loc[[0], \"A\"]\n        assert res._data._block.ndim == 1",
        "begin_line": 264,
        "end_line": 268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat#16",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat(self, data, in_frame)",
        "snippet": "    def test_concat(self, data, in_frame):\n        wrapped = pd.Series(data)\n        if in_frame:\n            wrapped = pd.DataFrame(wrapped)\n        result = pd.concat([wrapped, wrapped], ignore_index=True)\n\n        assert len(result) == len(data) * 2\n\n        if in_frame:\n            dtype = result.dtypes[0]\n        else:\n            dtype = result.dtype\n\n        assert dtype == data.dtype\n        assert isinstance(result._data.blocks[0], ExtensionBlock)",
        "begin_line": 16,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_all_na_block#33",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_all_na_block(self, data_missing, in_frame)",
        "snippet": "    def test_concat_all_na_block(self, data_missing, in_frame):\n        valid_block = pd.Series(data_missing.take([1, 1]), index=[0, 1])\n        na_block = pd.Series(data_missing.take([0, 0]), index=[2, 3])\n        if in_frame:\n            valid_block = pd.DataFrame({\"a\": valid_block})\n            na_block = pd.DataFrame({\"a\": na_block})\n        result = pd.concat([valid_block, na_block])\n        if in_frame:\n            expected = pd.DataFrame({\"a\": data_missing.take([1, 1, 0, 0])})\n            self.assert_frame_equal(result, expected)\n        else:\n            expected = pd.Series(data_missing.take([1, 1, 0, 0]))\n            self.assert_series_equal(result, expected)",
        "begin_line": 33,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_mixed_dtypes#47",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_mixed_dtypes(self, data)",
        "snippet": "    def test_concat_mixed_dtypes(self, data):\n        # https://github.com/pandas-dev/pandas/issues/20762\n        df1 = pd.DataFrame({\"A\": data[:3]})\n        df2 = pd.DataFrame({\"A\": [1, 2, 3]})\n        df3 = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\"]}).astype(\"category\")\n        dfs = [df1, df2, df3]\n\n        # dataframes\n        result = pd.concat(dfs)\n        expected = pd.concat([x.astype(object) for x in dfs])\n        self.assert_frame_equal(result, expected)\n\n        # series\n        result = pd.concat([x[\"A\"] for x in dfs])\n        expected = pd.concat([x[\"A\"].astype(object) for x in dfs])\n        self.assert_series_equal(result, expected)\n\n        # simple test for just EA and one other\n        result = pd.concat([df1, df2])\n        expected = pd.concat([df1.astype(\"object\"), df2.astype(\"object\")])\n        self.assert_frame_equal(result, expected)\n\n        result = pd.concat([df1[\"A\"], df2[\"A\"]])\n        expected = pd.concat([df1[\"A\"].astype(\"object\"), df2[\"A\"].astype(\"object\")])\n        self.assert_series_equal(result, expected)",
        "begin_line": 47,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_columns#73",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_concat_columns(self, data, na_value)",
        "snippet": "    def test_concat_columns(self, data, na_value):\n        df1 = pd.DataFrame({\"A\": data[:3]})\n        df2 = pd.DataFrame({\"B\": [1, 2, 3]})\n\n        expected = pd.DataFrame({\"A\": data[:3], \"B\": [1, 2, 3]})\n        result = pd.concat([df1, df2], axis=1)\n        self.assert_frame_equal(result, expected)\n        result = pd.concat([df1[\"A\"], df2[\"B\"]], axis=1)\n        self.assert_frame_equal(result, expected)\n\n        # non-aligned\n        df2 = pd.DataFrame({\"B\": [1, 2, 3]}, index=[1, 2, 3])\n        expected = pd.DataFrame(\n            {\n                \"A\": data._from_sequence(list(data[:3]) + [na_value], dtype=data.dtype),\n                \"B\": [np.nan, 1, 2, 3],\n            }\n        )\n\n        result = pd.concat([df1, df2], axis=1)\n        self.assert_frame_equal(result, expected)\n        result = pd.concat([df1[\"A\"], df2[\"B\"]], axis=1)\n        self.assert_frame_equal(result, expected)",
        "begin_line": 73,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align#97",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align(self, data, na_value)",
        "snippet": "    def test_align(self, data, na_value):\n        a = data[:3]\n        b = data[2:5]\n        r1, r2 = pd.Series(a).align(pd.Series(b, index=[1, 2, 3]))\n\n        # Assumes that the ctor can take a list of scalars of the type\n        e1 = pd.Series(data._from_sequence(list(a) + [na_value], dtype=data.dtype))\n        e2 = pd.Series(data._from_sequence([na_value] + list(b), dtype=data.dtype))\n        self.assert_series_equal(r1, e1)\n        self.assert_series_equal(r2, e2)",
        "begin_line": 97,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_frame#108",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_frame(self, data, na_value)",
        "snippet": "    def test_align_frame(self, data, na_value):\n        a = data[:3]\n        b = data[2:5]\n        r1, r2 = pd.DataFrame({\"A\": a}).align(pd.DataFrame({\"A\": b}, index=[1, 2, 3]))\n\n        # Assumes that the ctor can take a list of scalars of the type\n        e1 = pd.DataFrame(\n            {\"A\": data._from_sequence(list(a) + [na_value], dtype=data.dtype)}\n        )\n        e2 = pd.DataFrame(\n            {\"A\": data._from_sequence([na_value] + list(b), dtype=data.dtype)}\n        )\n        self.assert_frame_equal(r1, e1)\n        self.assert_frame_equal(r2, e2)",
        "begin_line": 108,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_series_frame#123",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_align_series_frame(self, data, na_value)",
        "snippet": "    def test_align_series_frame(self, data, na_value):\n        # https://github.com/pandas-dev/pandas/issues/20576\n        ser = pd.Series(data, name=\"a\")\n        df = pd.DataFrame({\"col\": np.arange(len(ser) + 1)})\n        r1, r2 = ser.align(df)\n\n        e1 = pd.Series(\n            data._from_sequence(list(data) + [na_value], dtype=data.dtype),\n            name=ser.name,\n        )\n\n        self.assert_series_equal(r1, e1)\n        self.assert_frame_equal(r2, df)",
        "begin_line": 123,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_regular_with_extension#137",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_regular_with_extension(self, data)",
        "snippet": "    def test_set_frame_expand_regular_with_extension(self, data):\n        df = pd.DataFrame({\"A\": [1] * len(data)})\n        df[\"B\"] = data\n        expected = pd.DataFrame({\"A\": [1] * len(data), \"B\": data})\n        self.assert_frame_equal(df, expected)",
        "begin_line": 137,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_extension_with_regular#143",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_expand_extension_with_regular(self, data)",
        "snippet": "    def test_set_frame_expand_extension_with_regular(self, data):\n        df = pd.DataFrame({\"A\": data})\n        df[\"B\"] = [1] * len(data)\n        expected = pd.DataFrame({\"A\": data, \"B\": [1] * len(data)})\n        self.assert_frame_equal(df, expected)",
        "begin_line": 143,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_overwrite_object#149",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_set_frame_overwrite_object(self, data)",
        "snippet": "    def test_set_frame_overwrite_object(self, data):\n        # https://github.com/pandas-dev/pandas/issues/20555\n        df = pd.DataFrame({\"A\": [1] * len(data)}, dtype=object)\n        df[\"A\"] = data\n        assert df.dtypes[\"A\"] == data.dtype",
        "begin_line": 149,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge#155",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge(self, data, na_value)",
        "snippet": "    def test_merge(self, data, na_value):\n        # GH-20743\n        df1 = pd.DataFrame({\"ext\": data[:3], \"int1\": [1, 2, 3], \"key\": [0, 1, 2]})\n        df2 = pd.DataFrame({\"int2\": [1, 2, 3, 4], \"key\": [0, 0, 1, 3]})\n\n        res = pd.merge(df1, df2)\n        exp = pd.DataFrame(\n            {\n                \"int1\": [1, 1, 2],\n                \"int2\": [1, 2, 3],\n                \"key\": [0, 0, 1],\n                \"ext\": data._from_sequence(\n                    [data[0], data[0], data[1]], dtype=data.dtype\n                ),\n            }\n        )\n        self.assert_frame_equal(res, exp[[\"ext\", \"int1\", \"key\", \"int2\"]])\n\n        res = pd.merge(df1, df2, how=\"outer\")\n        exp = pd.DataFrame(\n            {\n                \"int1\": [1, 1, 2, 3, np.nan],\n                \"int2\": [1, 2, 3, np.nan, 4],\n                \"key\": [0, 0, 1, 2, 3],\n                \"ext\": data._from_sequence(\n                    [data[0], data[0], data[1], data[2], na_value], dtype=data.dtype\n                ),\n            }\n        )\n        self.assert_frame_equal(res, exp[[\"ext\", \"int1\", \"key\", \"int2\"]])",
        "begin_line": 155,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array#186",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array(self, data)",
        "snippet": "    def test_merge_on_extension_array(self, data):\n        # GH 23020\n        a, b = data[:2]\n        key = type(data)._from_sequence([a, b], dtype=data.dtype)\n\n        df = pd.DataFrame({\"key\": key, \"val\": [1, 2]})\n        result = pd.merge(df, df, on=\"key\")\n        expected = pd.DataFrame({\"key\": key, \"val_x\": [1, 2], \"val_y\": [1, 2]})\n        self.assert_frame_equal(result, expected)\n\n        # order\n        result = pd.merge(df.iloc[[1, 0]], df, on=\"key\")\n        expected = expected.iloc[[1, 0]].reset_index(drop=True)\n        self.assert_frame_equal(result, expected)",
        "begin_line": 186,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array_duplicates#201",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_merge_on_extension_array_duplicates(self, data)",
        "snippet": "    def test_merge_on_extension_array_duplicates(self, data):\n        # GH 23020\n        a, b = data[:2]\n        key = type(data)._from_sequence([a, b, a], dtype=data.dtype)\n        df1 = pd.DataFrame({\"key\": key, \"val\": [1, 2, 3]})\n        df2 = pd.DataFrame({\"key\": key, \"val\": [1, 2, 3]})\n\n        result = pd.merge(df1, df2, on=\"key\")\n        expected = pd.DataFrame(\n            {\n                \"key\": key.take([0, 0, 0, 0, 1]),\n                \"val_x\": [1, 1, 3, 3, 2],\n                \"val_y\": [1, 3, 1, 3, 2],\n            }\n        )\n        self.assert_frame_equal(result, expected)",
        "begin_line": 201,
        "end_line": 216,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_stack#227",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_stack(self, data, columns)",
        "snippet": "    def test_stack(self, data, columns):\n        df = pd.DataFrame({\"A\": data[:5], \"B\": data[:5]})\n        df.columns = columns\n        result = df.stack()\n        expected = df.astype(object).stack()\n        # we need a second astype(object), in case the constructor inferred\n        # object -> specialized, as is done for period.\n        expected = expected.astype(object)\n\n        if isinstance(expected, pd.Series):\n            assert result.dtype == df.iloc[:, 0].dtype\n        else:\n            assert all(result.dtypes == df.iloc[:, 0].dtype)\n\n        result = result.astype(object)\n        self.assert_equal(result, expected)",
        "begin_line": 227,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_unstack#265",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_unstack(self, data, index, obj)",
        "snippet": "    def test_unstack(self, data, index, obj):\n        data = data[: len(index)]\n        if obj == \"series\":\n            ser = pd.Series(data, index=index)\n        else:\n            ser = pd.DataFrame({\"A\": data, \"B\": data}, index=index)\n\n        n = index.nlevels\n        levels = list(range(n))\n        # [0, 1, 2]\n        # [(0,), (1,), (2,), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]\n        combinations = itertools.chain.from_iterable(\n            itertools.permutations(levels, i) for i in range(1, n)\n        )\n\n        for level in combinations:\n            result = ser.unstack(level=level)\n            assert all(\n                isinstance(result[col].array, type(data)) for col in result.columns\n            )\n            expected = ser.astype(object).unstack(level=level)\n            result = result.astype(object)\n\n            self.assert_frame_equal(result, expected)",
        "begin_line": 265,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_ravel#290",
        "src_path": "pandas/tests/extension/base/reshaping.py",
        "class_name": "pandas.tests.extension.base.reshaping.BaseReshapingTests",
        "signature": "pandas.tests.extension.base.reshaping.BaseReshapingTests.test_ravel(self, data)",
        "snippet": "    def test_ravel(self, data):\n        # as long as EA is 1D-only, ravel is a no-op\n        result = data.ravel()\n        assert type(result) == type(data)\n\n        # Check that we have a view, not a copy\n        result[0] = result[1]\n        assert data[0] == data[1]",
        "begin_line": 290,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_isna#10",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_isna(self, data_missing)",
        "snippet": "    def test_isna(self, data_missing):\n        expected = np.array([True, False])\n\n        result = pd.isna(data_missing)\n        tm.assert_numpy_array_equal(result, expected)\n\n        result = pd.Series(data_missing).isna()\n        expected = pd.Series(expected)\n        self.assert_series_equal(result, expected)\n\n        # GH 21189\n        result = pd.Series(data_missing).drop([0, 1]).isna()\n        expected = pd.Series([], dtype=bool)\n        self.assert_series_equal(result, expected)",
        "begin_line": 10,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_array#25",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_array(self, data_missing)",
        "snippet": "    def test_dropna_array(self, data_missing):\n        result = data_missing.dropna()\n        expected = data_missing[[1]]\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 25,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_series#30",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_series(self, data_missing)",
        "snippet": "    def test_dropna_series(self, data_missing):\n        ser = pd.Series(data_missing)\n        result = ser.dropna()\n        expected = ser.iloc[[1]]\n        self.assert_series_equal(result, expected)",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_frame#36",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_dropna_frame(self, data_missing)",
        "snippet": "    def test_dropna_frame(self, data_missing):\n        df = pd.DataFrame({\"A\": data_missing})\n\n        # defaults\n        result = df.dropna()\n        expected = df.iloc[[1]]\n        self.assert_frame_equal(result, expected)\n\n        # axis = 1\n        result = df.dropna(axis=\"columns\")\n        expected = pd.DataFrame(index=[0, 1])\n        self.assert_frame_equal(result, expected)\n\n        # multiple\n        df = pd.DataFrame({\"A\": data_missing, \"B\": [1, np.nan]})\n        result = df.dropna()\n        expected = df.iloc[:0]\n        self.assert_frame_equal(result, expected)",
        "begin_line": 36,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_scalar#55",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_scalar(self, data_missing)",
        "snippet": "    def test_fillna_scalar(self, data_missing):\n        valid = data_missing[1]\n        result = data_missing.fillna(valid)\n        expected = data_missing.fillna(valid)\n        self.assert_extension_array_equal(result, expected)",
        "begin_line": 55,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_pad#61",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_pad(self, data_missing)",
        "snippet": "    def test_fillna_limit_pad(self, data_missing):\n        arr = data_missing.take([1, 0, 0, 0, 1])\n        result = pd.Series(arr).fillna(method=\"ffill\", limit=2)\n        expected = pd.Series(data_missing.take([1, 1, 1, 0, 1]))\n        self.assert_series_equal(result, expected)",
        "begin_line": 61,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_backfill#67",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_limit_backfill(self, data_missing)",
        "snippet": "    def test_fillna_limit_backfill(self, data_missing):\n        arr = data_missing.take([1, 0, 0, 0, 1])\n        result = pd.Series(arr).fillna(method=\"backfill\", limit=2)\n        expected = pd.Series(data_missing.take([1, 0, 1, 1, 1]))\n        self.assert_series_equal(result, expected)",
        "begin_line": 67,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series#73",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series(self, data_missing)",
        "snippet": "    def test_fillna_series(self, data_missing):\n        fill_value = data_missing[1]\n        ser = pd.Series(data_missing)\n\n        result = ser.fillna(fill_value)\n        expected = pd.Series(\n            data_missing._from_sequence(\n                [fill_value, fill_value], dtype=data_missing.dtype\n            )\n        )\n        self.assert_series_equal(result, expected)\n\n        # Fill with a series\n        result = ser.fillna(expected)\n        self.assert_series_equal(result, expected)\n\n        # Fill with a series not affecting the missing values\n        result = ser.fillna(ser)\n        self.assert_series_equal(result, ser)",
        "begin_line": 73,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series_method#93",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_series_method(self, data_missing, fillna_method)",
        "snippet": "    def test_fillna_series_method(self, data_missing, fillna_method):\n        fill_value = data_missing[1]\n\n        if fillna_method == \"ffill\":\n            data_missing = data_missing[::-1]\n\n        result = pd.Series(data_missing).fillna(method=fillna_method)\n        expected = pd.Series(\n            data_missing._from_sequence(\n                [fill_value, fill_value], dtype=data_missing.dtype\n            )\n        )\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_frame#108",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_frame(self, data_missing)",
        "snippet": "    def test_fillna_frame(self, data_missing):\n        fill_value = data_missing[1]\n\n        result = pd.DataFrame({\"A\": data_missing, \"B\": [1, 2]}).fillna(fill_value)\n\n        expected = pd.DataFrame(\n            {\n                \"A\": data_missing._from_sequence(\n                    [fill_value, fill_value], dtype=data_missing.dtype\n                ),\n                \"B\": [1, 2],\n            }\n        )\n\n        self.assert_frame_equal(result, expected)",
        "begin_line": 108,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_fill_other#124",
        "src_path": "pandas/tests/extension/base/missing.py",
        "class_name": "pandas.tests.extension.base.missing.BaseMissingTests",
        "signature": "pandas.tests.extension.base.missing.BaseMissingTests.test_fillna_fill_other(self, data)",
        "snippet": "    def test_fillna_fill_other(self, data):\n        result = pd.DataFrame({\"A\": data, \"B\": [np.nan] * len(data)}).fillna({\"B\": 0.0})\n\n        expected = pd.DataFrame({\"A\": data, \"B\": [0.0] * len(result)})\n\n        self.assert_frame_equal(result, expected)",
        "begin_line": 124,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_len#19",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_len(self, data)",
        "snippet": "    def test_len(self, data):\n        assert len(data) == 100",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_ndim#22",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_ndim(self, data)",
        "snippet": "    def test_ndim(self, data):\n        assert data.ndim == 1",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_can_hold_na_valid#25",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_can_hold_na_valid(self, data)",
        "snippet": "    def test_can_hold_na_valid(self, data):\n        # GH-20761\n        assert data._can_hold_na is True",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_memory_usage#29",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_memory_usage(self, data)",
        "snippet": "    def test_memory_usage(self, data):\n        s = pd.Series(data)\n        result = s.memory_usage(index=False)\n        assert result == s.nbytes",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_array_interface#34",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_array_interface(self, data)",
        "snippet": "    def test_array_interface(self, data):\n        result = np.array(data)\n        assert result[0] == data[0]\n\n        result = np.array(data, dtype=object)\n        expected = np.array(list(data), dtype=object)\n        tm.assert_numpy_array_equal(result, expected)",
        "begin_line": 34,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_extension_array_dtype#42",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_extension_array_dtype(self, data)",
        "snippet": "    def test_is_extension_array_dtype(self, data):\n        assert is_extension_array_dtype(data)\n        assert is_extension_array_dtype(data.dtype)\n        assert is_extension_array_dtype(pd.Series(data))\n        assert isinstance(data.dtype, ExtensionDtype)",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_no_values_attribute#48",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_no_values_attribute(self, data)",
        "snippet": "    def test_no_values_attribute(self, data):\n        # GH-20735: EA's with .values attribute give problems with internal\n        # code, disallowing this for now until solved\n        assert not hasattr(data, \"values\")\n        assert not hasattr(data, \"_values\")",
        "begin_line": 48,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_numeric_honored#54",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_is_numeric_honored(self, data)",
        "snippet": "    def test_is_numeric_honored(self, data):\n        result = pd.Series(data)\n        assert result._data.blocks[0].is_numeric is data.dtype._is_numeric",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_isna_extension_array#58",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_isna_extension_array(self, data_missing)",
        "snippet": "    def test_isna_extension_array(self, data_missing):\n        # If your `isna` returns an ExtensionArray, you must also implement\n        # _reduce. At the *very* least, you must implement any and all\n        na = data_missing.isna()\n        if is_extension_array_dtype(na):\n            assert na._reduce(\"any\")\n            assert na.any()\n\n            assert not na._reduce(\"all\")\n            assert not na.all()\n\n            assert na.dtype._is_boolean",
        "begin_line": 58,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_copy#71",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_copy(self, data)",
        "snippet": "    def test_copy(self, data):\n        # GH#27083 removing deep keyword from EA.copy\n        assert data[0] != data[1]\n        result = data.copy()\n\n        data[1] = data[0]\n        assert result[1] != result[0]",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_view#79",
        "src_path": "pandas/tests/extension/base/interface.py",
        "class_name": "pandas.tests.extension.base.interface.BaseInterfaceTests",
        "signature": "pandas.tests.extension.base.interface.BaseInterfaceTests.test_view(self, data)",
        "snippet": "    def test_view(self, data):\n        # view with no dtype should return a shallow copy, *not* the same\n        #  object\n        assert data[1] != data[0]\n\n        result = data.view()\n        assert result is not data\n        assert type(result) == type(data)\n\n        result[1] = result[0]\n        assert data[1] == data[0]\n\n        # check specifically that the `dtype` kwarg is accepted\n        data.view(dtype=None)",
        "begin_line": 79,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONDtype.construct_array_type#33",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONDtype",
        "signature": "pandas.tests.extension.json.array.JSONDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return JSONArray",
        "begin_line": 33,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONDtype.construct_from_string#43",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONDtype",
        "signature": "pandas.tests.extension.json.array.JSONDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(\"Cannot construct a '{}' from '{}'\".format(cls, string))",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.__init__#54",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.__init__(self, values, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False):\n        for val in values:\n            if not isinstance(val, self.dtype.type):\n                raise TypeError(\"All values must be of type \" + str(self.dtype.type))\n        self.data = values\n\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self._data = self.data",
        "begin_line": 54,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray._from_sequence#68",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray._from_factorized#72",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        return cls([UserDict(x) for x in values if x != ()])",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.__getitem__#75",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self.data[item]\n        elif isinstance(item, np.ndarray) and item.dtype == \"bool\":\n            return self._from_sequence([x for x, m in zip(self, item) if m])\n        elif isinstance(item, abc.Iterable):\n            # fancy indexing\n            return type(self)([self.data[i] for i in item])\n        elif isinstance(item, slice) and item == slice(None):\n            # Make sure we get a view\n            return type(self)(self.data)\n        else:\n            # slice\n            return type(self)(self.data[item])",
        "begin_line": 75,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.__setitem__#90",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if isinstance(key, numbers.Integral):\n            self.data[key] = value\n        else:\n            if not isinstance(value, (type(self), abc.Sequence)):\n                # broadcast value\n                value = itertools.cycle([value])\n\n            if isinstance(key, np.ndarray) and key.dtype == \"bool\":\n                # masking\n                for i, (k, v) in enumerate(zip(key, value)):\n                    if k:\n                        assert isinstance(v, self.dtype.type)\n                        self.data[i] = v\n            else:\n                for k, v in zip(key, value):\n                    assert isinstance(v, self.dtype.type)\n                    self.data[k] = v",
        "begin_line": 90,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.__len__#109",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.data)",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.nbytes#113",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.nbytes(self)",
        "snippet": "    def nbytes(self) -> int:\n        return sys.getsizeof(self.data)",
        "begin_line": 113,
        "end_line": 114,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.isna#116",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x == self.dtype.na_value for x in self.data], dtype=bool)",
        "begin_line": 116,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.take#119",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.take(self, indexer, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill=False, fill_value=None):\n        # re-implement here, since NumPy has trouble setting\n        # sized objects like UserDicts into scalar slots of\n        # an ndarary.\n        indexer = np.asarray(indexer)\n        msg = (\n            \"Index is out of bounds or cannot do a \"\n            \"non-empty take from an empty array.\"\n        )\n\n        if allow_fill:\n            if fill_value is None:\n                fill_value = self.dtype.na_value\n            # bounds check\n            if (indexer < -1).any():\n                raise ValueError\n            try:\n                output = [\n                    self.data[loc] if loc != -1 else fill_value for loc in indexer\n                ]\n            except IndexError:\n                raise IndexError(msg)\n        else:\n            try:\n                output = [self.data[loc] for loc in indexer]\n            except IndexError:\n                raise IndexError(msg)\n\n        return self._from_sequence(output)",
        "begin_line": 119,
        "end_line": 147,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.copy#149",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.copy(self)",
        "snippet": "    def copy(self):\n        return type(self)(self.data[:])",
        "begin_line": 149,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.astype#152",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        # NumPy has issues when all the dicts are the same length.\n        # np.array([UserDict(...), UserDict(...)]) fails,\n        # but np.array([{...}, {...}]) works, so cast.\n\n        # needed to add this check for the Series constructor\n        if isinstance(dtype, type(self.dtype)) and dtype == self.dtype:\n            if copy:\n                return self.copy()\n            return self\n        return np.array([dict(x) for x in self], dtype=dtype, copy=copy)",
        "begin_line": 152,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray.unique#164",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray.unique(self)",
        "snippet": "    def unique(self):\n        # Parent method doesn't work since np.array will try to infer\n        # a 2-dim object.\n        return type(self)(\n            [dict(x) for x in list({tuple(d.items()) for d in self.data})]\n        )",
        "begin_line": 164,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray._concat_same_type#172",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        data = list(itertools.chain.from_iterable([x.data for x in to_concat]))\n        return cls(data)",
        "begin_line": 172,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray._values_for_factorize#176",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray._values_for_factorize(self)",
        "snippet": "    def _values_for_factorize(self):\n        frozen = self._values_for_argsort()\n        if len(frozen) == 0:\n            # _factorize_array expects 1-d array, this is a len-0 2-d array.\n            frozen = frozen.ravel()\n        return frozen, ()",
        "begin_line": 176,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.JSONArray._values_for_argsort#183",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array.JSONArray",
        "signature": "pandas.tests.extension.json.array.JSONArray._values_for_argsort(self)",
        "snippet": "    def _values_for_argsort(self):\n        # Disable NumPy's shape inference by including an empty tuple...\n        # If all the elemnts of self are the same size P, NumPy will\n        # cast them to an (N, P) array, instead of an (N,) array of tuples.\n        frozen = [()] + [tuple(x.items()) for x in self]\n        return np.array(frozen, dtype=object)[1:]",
        "begin_line": 183,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.json.array.make_data#191",
        "src_path": "pandas/tests/extension/json/array.py",
        "class_name": "pandas.tests.extension.json.array",
        "signature": "pandas.tests.extension.json.array.make_data()",
        "snippet": "def make_data():\n    # TODO: Use a regular dict. See _NDFrameIndexer._setitem_with_indexer\n    return [\n        UserDict(\n            [\n                (random.choice(string.ascii_letters), random.randint(0, 100))\n                for _ in range(random.randint(0, 10))\n            ]\n        )\n        for _ in range(100)\n    ]",
        "begin_line": 191,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name#13",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.get_op_from_name(self, op_name)",
        "snippet": "    def get_op_from_name(self, op_name):\n        short_opname = op_name.strip(\"_\")\n        try:\n            op = getattr(operator, short_opname)\n        except AttributeError:\n            # Assume it is the reverse operator\n            rop = getattr(operator, short_opname[1:])\n            op = lambda x, y: rop(y, x)\n\n        return op",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil.check_opname#24",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil.check_opname(self, s, op_name, other, exc=Exception)",
        "snippet": "    def check_opname(self, s, op_name, other, exc=Exception):\n        op = self.get_op_from_name(op_name)\n\n        self._check_op(s, op, other, op_name, exc)",
        "begin_line": 24,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil._check_op#29",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil._check_op(self, s, op, other, op_name, exc=NotImplementedError)",
        "snippet": "    def _check_op(self, s, op, other, op_name, exc=NotImplementedError):\n        if exc is None:\n            result = op(s, other)\n            expected = s.combine(other, op)\n            self.assert_series_equal(result, expected)\n        else:\n            with pytest.raises(exc):\n                op(s, other)",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseOpsUtil._check_divmod_op#38",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseOpsUtil",
        "signature": "pandas.tests.extension.base.ops.BaseOpsUtil._check_divmod_op(self, s, op, other, exc=Exception)",
        "snippet": "    def _check_divmod_op(self, s, op, other, exc=Exception):\n        # divmod has multiple return values, so check separately\n        if exc is None:\n            result_div, result_mod = op(s, other)\n            if op is divmod:\n                expected_div, expected_mod = s // other, s % other\n            else:\n                expected_div, expected_mod = other // s, other % s\n            self.assert_series_equal(result_div, expected_div)\n            self.assert_series_equal(result_mod, expected_mod)\n        else:\n            with pytest.raises(exc):\n                divmod(s, other)",
        "begin_line": 38,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_scalar#70",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_scalar(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_series_with_scalar(self, data, all_arithmetic_operators):\n        # series & scalar\n        op_name = all_arithmetic_operators\n        s = pd.Series(data)\n        self.check_opname(s, op_name, s.iloc[0], exc=self.series_scalar_exc)",
        "begin_line": 70,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_array#83",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_arith_series_with_array(self, data, all_arithmetic_operators)",
        "snippet": "    def test_arith_series_with_array(self, data, all_arithmetic_operators):\n        # ndarray & other series\n        op_name = all_arithmetic_operators\n        s = pd.Series(data)\n        self.check_opname(\n            s, op_name, pd.Series([s.iloc[0]] * len(s)), exc=self.series_array_exc\n        )",
        "begin_line": 83,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod#91",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod(self, data)",
        "snippet": "    def test_divmod(self, data):\n        s = pd.Series(data)\n        self._check_divmod_op(s, divmod, 1, exc=self.divmod_exc)\n        self._check_divmod_op(1, ops.rdivmod, s, exc=self.divmod_exc)",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod_series_array#96",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_divmod_series_array(self, data, data_for_twos)",
        "snippet": "    def test_divmod_series_array(self, data, data_for_twos):\n        s = pd.Series(data)\n        self._check_divmod_op(s, divmod, data)\n\n        other = data_for_twos\n        self._check_divmod_op(other, ops.rdivmod, s)\n\n        other = pd.Series(other)\n        self._check_divmod_op(other, ops.rdivmod, s)",
        "begin_line": 96,
        "end_line": 104,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_add_series_with_extension_array#106",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_add_series_with_extension_array(self, data)",
        "snippet": "    def test_add_series_with_extension_array(self, data):\n        s = pd.Series(data)\n        result = s + data\n        expected = pd.Series(data + data)\n        self.assert_series_equal(result, expected)",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_error#112",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_error(self, data, all_arithmetic_operators)",
        "snippet": "    def test_error(self, data, all_arithmetic_operators):\n        # invalid ops\n        op_name = all_arithmetic_operators\n        with pytest.raises(AttributeError):\n            getattr(data, op_name)",
        "begin_line": 112,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_direct_arith_with_series_returns_not_implemented#118",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseArithmeticOpsTests.test_direct_arith_with_series_returns_not_implemented(self, data)",
        "snippet": "    def test_direct_arith_with_series_returns_not_implemented(self, data):\n        # EAs should return NotImplemented for ops with Series.\n        # Pandas takes care of unboxing the series and calling the EA's op.\n        other = pd.Series(data)\n        if hasattr(data, \"__add__\"):\n            result = data.__add__(other)\n            assert result is NotImplemented\n        else:\n            raise pytest.skip(f\"{type(data).__name__} does not implement add\")",
        "begin_line": 118,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests._compare_other#132",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseComparisonOpsTests._compare_other(self, s, data, op_name, other)",
        "snippet": "    def _compare_other(self, s, data, op_name, other):\n        op = self.get_op_from_name(op_name)\n        if op_name == \"__eq__\":\n            assert getattr(data, op_name)(other) is NotImplemented\n            assert not op(s, other).all()\n        elif op_name == \"__ne__\":\n            assert getattr(data, op_name)(other) is NotImplemented\n            assert op(s, other).all()\n\n        else:\n\n            # array\n            assert getattr(data, op_name)(other) is NotImplemented\n\n            # series\n            s = pd.Series(data)\n            with pytest.raises(TypeError):\n                op(s, other)",
        "begin_line": 132,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_scalar#151",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_scalar(self, data, all_compare_operators)",
        "snippet": "    def test_compare_scalar(self, data, all_compare_operators):\n        op_name = all_compare_operators\n        s = pd.Series(data)\n        self._compare_other(s, data, op_name, 0)",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_array#156",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_compare_array(self, data, all_compare_operators)",
        "snippet": "    def test_compare_array(self, data, all_compare_operators):\n        op_name = all_compare_operators\n        s = pd.Series(data)\n        other = pd.Series([data[0]] * len(data))\n        self._compare_other(s, data, op_name, other)",
        "begin_line": 156,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_direct_arith_with_series_returns_not_implemented#162",
        "src_path": "pandas/tests/extension/base/ops.py",
        "class_name": "pandas.tests.extension.base.ops.BaseComparisonOpsTests",
        "signature": "pandas.tests.extension.base.ops.BaseComparisonOpsTests.test_direct_arith_with_series_returns_not_implemented(self, data)",
        "snippet": "    def test_direct_arith_with_series_returns_not_implemented(self, data):\n        # EAs should return NotImplemented for ops with Series.\n        # Pandas takes care of unboxing the series and calling the EA's op.\n        other = pd.Series(data)\n        if hasattr(data, \"__eq__\"):\n            result = data.__eq__(other)\n            assert result is NotImplemented\n        else:\n            raise pytest.skip(f\"{type(data).__name__} does not implement __eq__\")",
        "begin_line": 162,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr#14",
        "src_path": "pandas/tests/extension/base/printing.py",
        "class_name": "pandas.tests.extension.base.printing.BasePrintingTests",
        "signature": "pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr(self, data, size)",
        "snippet": "    def test_array_repr(self, data, size):\n        if size == \"small\":\n            data = data[:5]\n        else:\n            data = type(data)._concat_same_type([data] * 5)\n\n        result = repr(data)\n        assert type(data).__name__ in result\n        assert f\"Length: {len(data)}\" in result\n        assert str(data.dtype) in result\n        if size == \"big\":\n            assert \"...\" in result",
        "begin_line": 14,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr_unicode#27",
        "src_path": "pandas/tests/extension/base/printing.py",
        "class_name": "pandas.tests.extension.base.printing.BasePrintingTests",
        "signature": "pandas.tests.extension.base.printing.BasePrintingTests.test_array_repr_unicode(self, data)",
        "snippet": "    def test_array_repr_unicode(self, data):\n        result = str(data)\n        assert isinstance(result, str)",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.printing.BasePrintingTests.test_series_repr#31",
        "src_path": "pandas/tests/extension/base/printing.py",
        "class_name": "pandas.tests.extension.base.printing.BasePrintingTests",
        "signature": "pandas.tests.extension.base.printing.BasePrintingTests.test_series_repr(self, data)",
        "snippet": "    def test_series_repr(self, data):\n        ser = pd.Series(data)\n        assert data.dtype.name in repr(ser)",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.printing.BasePrintingTests.test_dataframe_repr#35",
        "src_path": "pandas/tests/extension/base/printing.py",
        "class_name": "pandas.tests.extension.base.printing.BasePrintingTests",
        "signature": "pandas.tests.extension.base.printing.BasePrintingTests.test_dataframe_repr(self, data)",
        "snippet": "    def test_dataframe_repr(self, data):\n        df = pd.DataFrame({\"A\": data})\n        repr(df)",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.printing.BasePrintingTests.test_dtype_name_in_info#39",
        "src_path": "pandas/tests/extension/base/printing.py",
        "class_name": "pandas.tests.extension.base.printing.BasePrintingTests",
        "signature": "pandas.tests.extension.base.printing.BasePrintingTests.test_dtype_name_in_info(self, data)",
        "snippet": "    def test_dtype_name_in_info(self, data):\n        buf = io.StringIO()\n        pd.DataFrame({\"A\": data}).info(buf=buf)\n        result = buf.getvalue()\n        assert data.dtype.name in result",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.io.BaseParsingTests.test_EA_types#13",
        "src_path": "pandas/tests/extension/base/io.py",
        "class_name": "pandas.tests.extension.base.io.BaseParsingTests",
        "signature": "pandas.tests.extension.base.io.BaseParsingTests.test_EA_types(self, engine, data)",
        "snippet": "    def test_EA_types(self, engine, data):\n        df = pd.DataFrame({\"with_dtype\": pd.Series(data, dtype=str(data.dtype))})\n        csv_output = df.to_csv(index=False, na_rep=np.nan)\n        result = pd.read_csv(\n            StringIO(csv_output), dtype={\"with_dtype\": str(data.dtype)}, engine=engine\n        )\n        expected = df\n        self.assert_frame_equal(result, expected)",
        "begin_line": 13,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_grouping_grouper#12",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_grouping_grouper(self, data_for_grouping)",
        "snippet": "    def test_grouping_grouper(self, data_for_grouping):\n        df = pd.DataFrame(\n            {\"A\": [\"B\", \"B\", None, None, \"A\", \"A\", \"B\", \"C\"], \"B\": data_for_grouping}\n        )\n        gr1 = df.groupby(\"A\").grouper.groupings[0]\n        gr2 = df.groupby(\"B\").grouper.groupings[0]\n\n        tm.assert_numpy_array_equal(gr1.grouper, df.A.values)\n        tm.assert_extension_array_equal(gr2.grouper, data_for_grouping)",
        "begin_line": 12,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_agg#23",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_agg(self, as_index, data_for_grouping)",
        "snippet": "    def test_groupby_extension_agg(self, as_index, data_for_grouping):\n        df = pd.DataFrame({\"A\": [1, 1, 2, 2, 3, 3, 1, 4], \"B\": data_for_grouping})\n        result = df.groupby(\"B\", as_index=as_index).A.mean()\n        _, index = pd.factorize(data_for_grouping, sort=True)\n\n        index = pd.Index(index, name=\"B\")\n        expected = pd.Series([3, 1, 4], index=index, name=\"A\")\n        if as_index:\n            self.assert_series_equal(result, expected)\n        else:\n            expected = expected.reset_index()\n            self.assert_frame_equal(result, expected)",
        "begin_line": 23,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_no_sort#36",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_no_sort(self, data_for_grouping)",
        "snippet": "    def test_groupby_extension_no_sort(self, data_for_grouping):\n        df = pd.DataFrame({\"A\": [1, 1, 2, 2, 3, 3, 1, 4], \"B\": data_for_grouping})\n        result = df.groupby(\"B\", sort=False).A.mean()\n        _, index = pd.factorize(data_for_grouping, sort=False)\n\n        index = pd.Index(index, name=\"B\")\n        expected = pd.Series([1, 3, 4], index=index, name=\"A\")\n        self.assert_series_equal(result, expected)",
        "begin_line": 36,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_transform#45",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_transform(self, data_for_grouping)",
        "snippet": "    def test_groupby_extension_transform(self, data_for_grouping):\n        valid = data_for_grouping[~data_for_grouping.isna()]\n        df = pd.DataFrame({\"A\": [1, 1, 3, 3, 1, 4], \"B\": valid})\n\n        result = df.groupby(\"B\").A.transform(len)\n        expected = pd.Series([3, 3, 2, 2, 3, 1], name=\"A\")\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_apply#54",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_extension_apply(self, data_for_grouping, groupby_apply_op)",
        "snippet": "    def test_groupby_extension_apply(self, data_for_grouping, groupby_apply_op):\n        df = pd.DataFrame({\"A\": [1, 1, 2, 2, 3, 3, 1, 4], \"B\": data_for_grouping})\n        df.groupby(\"B\").apply(groupby_apply_op)\n        df.groupby(\"B\").A.apply(groupby_apply_op)\n        df.groupby(\"A\").apply(groupby_apply_op)\n        df.groupby(\"A\").B.apply(groupby_apply_op)",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_apply_identity#61",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_groupby_apply_identity(self, data_for_grouping)",
        "snippet": "    def test_groupby_apply_identity(self, data_for_grouping):\n        df = pd.DataFrame({\"A\": [1, 1, 2, 2, 3, 3, 1, 4], \"B\": data_for_grouping})\n        result = df.groupby(\"A\").B.apply(lambda x: x.array)\n        expected = pd.Series(\n            [\n                df.B.iloc[[0, 1, 6]].array,\n                df.B.iloc[[2, 3]].array,\n                df.B.iloc[[4, 5]].array,\n                df.B.iloc[[7]].array,\n            ],\n            index=pd.Index([1, 2, 3, 4], name=\"A\"),\n            name=\"B\",\n        )\n        self.assert_series_equal(result, expected)",
        "begin_line": 61,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_in_numeric_groupby#76",
        "src_path": "pandas/tests/extension/base/groupby.py",
        "class_name": "pandas.tests.extension.base.groupby.BaseGroupbyTests",
        "signature": "pandas.tests.extension.base.groupby.BaseGroupbyTests.test_in_numeric_groupby(self, data_for_grouping)",
        "snippet": "    def test_in_numeric_groupby(self, data_for_grouping):\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 1, 2, 2, 3, 3, 1, 4],\n                \"B\": data_for_grouping,\n                \"C\": [1, 1, 1, 1, 1, 1, 1, 1],\n            }\n        )\n        result = df.groupby(\"A\").sum().columns\n\n        if data_for_grouping.dtype._is_numeric:\n            expected = pd.Index([\"B\", \"C\"])\n        else:\n            expected = pd.Index([\"C\"])\n\n        tm.assert_index_equal(result, expected)",
        "begin_line": 76,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.make_data#36",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.make_data()",
        "snippet": "def make_data():\n    return list(range(1, 9)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100]",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.dtype#52",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.dtype(request)",
        "snippet": "def dtype(request):\n    return request.param()",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data#57",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data(dtype)",
        "snippet": "def data(dtype):\n    return integer_array(make_data(), dtype=dtype)",
        "begin_line": 57,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data_for_twos#62",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data_for_twos(dtype)",
        "snippet": "def data_for_twos(dtype):\n    return integer_array(np.ones(100) * 2, dtype=dtype)",
        "begin_line": 62,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data_missing#67",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data_missing(dtype)",
        "snippet": "def data_missing(dtype):\n    return integer_array([np.nan, 1], dtype=dtype)",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data_for_sorting#72",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data_for_sorting(dtype)",
        "snippet": "def data_for_sorting(dtype):\n    return integer_array([1, 2, 0], dtype=dtype)",
        "begin_line": 72,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data_missing_for_sorting#77",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data_missing_for_sorting(dtype)",
        "snippet": "def data_missing_for_sorting(dtype):\n    return integer_array([1, np.nan, 0], dtype=dtype)",
        "begin_line": 77,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.na_cmp#82",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.na_cmp()",
        "snippet": "def na_cmp():\n    # we are np.nan\n    return lambda x, y: np.isnan(x) and np.isnan(y)",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.na_value#88",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.na_value()",
        "snippet": "def na_value():\n    return np.nan",
        "begin_line": 88,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.data_for_grouping#93",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer",
        "signature": "pandas.tests.extension.test_integer.data_for_grouping(dtype)",
        "snippet": "def data_for_grouping(dtype):\n    b = 1\n    a = 0\n    c = 2\n    na = np.nan\n    return integer_array([b, b, na, na, a, a, b, c], dtype=dtype)",
        "begin_line": 93,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestDtype.test_is_dtype_unboxes_dtype#103",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestDtype",
        "signature": "pandas.tests.extension.test_integer.TestDtype.test_is_dtype_unboxes_dtype(self)",
        "snippet": "    def test_is_dtype_unboxes_dtype(self):\n        # we have multiple dtypes, so skip\n        pass",
        "begin_line": 103,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestArithmeticOps.check_opname#109",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.extension.test_integer.TestArithmeticOps.check_opname(self, s, op_name, other, exc=None)",
        "snippet": "    def check_opname(self, s, op_name, other, exc=None):\n        # overwriting to indicate ops don't raise an error\n        super().check_opname(s, op_name, other, exc=None)",
        "begin_line": 109,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestArithmeticOps._check_op#113",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.extension.test_integer.TestArithmeticOps._check_op(self, s, op, other, op_name, exc=NotImplementedError)",
        "snippet": "    def _check_op(self, s, op, other, op_name, exc=NotImplementedError):\n        if exc is None:\n            if s.dtype.is_unsigned_integer and (op_name == \"__rsub__\"):\n                # TODO see https://github.com/pandas-dev/pandas/issues/22023\n                pytest.skip(\"unsigned subtraction gives negative values\")\n\n            if (\n                hasattr(other, \"dtype\")\n                and not is_extension_array_dtype(other.dtype)\n                and pd.api.types.is_integer_dtype(other.dtype)\n            ):\n                # other is np.int64 and would therefore always result in\n                # upcasting, so keeping other as same numpy_dtype\n                other = other.astype(s.dtype.numpy_dtype)\n\n            result = op(s, other)\n            expected = s.combine(other, op)\n\n            if op_name in (\"__rtruediv__\", \"__truediv__\", \"__div__\"):\n                expected = expected.astype(float)\n                if op_name == \"__rtruediv__\":\n                    # TODO reverse operators result in object dtype\n                    result = result.astype(float)\n            elif op_name.startswith(\"__r\"):\n                # TODO reverse operators result in object dtype\n                # see https://github.com/pandas-dev/pandas/issues/22024\n                expected = expected.astype(s.dtype)\n                result = result.astype(s.dtype)\n            else:\n                # combine method result in 'biggest' (int64) dtype\n                expected = expected.astype(s.dtype)\n                pass\n            if (op_name == \"__rpow__\") and isinstance(other, pd.Series):\n                # TODO pow on Int arrays gives different result with NA\n                # see https://github.com/pandas-dev/pandas/issues/22022\n                result = result.fillna(1)\n\n            self.assert_series_equal(result, expected)\n        else:\n            with pytest.raises(exc):\n                op(s, other)",
        "begin_line": 113,
        "end_line": 153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestArithmeticOps._check_divmod_op#155",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.extension.test_integer.TestArithmeticOps._check_divmod_op(self, s, op, other, exc=None)",
        "snippet": "    def _check_divmod_op(self, s, op, other, exc=None):\n        super()._check_divmod_op(s, op, other, None)",
        "begin_line": 155,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestArithmeticOps.test_error#159",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestArithmeticOps",
        "signature": "pandas.tests.extension.test_integer.TestArithmeticOps.test_error(self, data, all_arithmetic_operators)",
        "snippet": "    def test_error(self, data, all_arithmetic_operators):\n        # other specific errors tested in the integer array specific tests\n        pass",
        "begin_line": 159,
        "end_line": 161,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestComparisonOps.check_opname#165",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestComparisonOps",
        "signature": "pandas.tests.extension.test_integer.TestComparisonOps.check_opname(self, s, op_name, other, exc=None)",
        "snippet": "    def check_opname(self, s, op_name, other, exc=None):\n        super().check_opname(s, op_name, other, exc=None)",
        "begin_line": 165,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestComparisonOps._compare_other#168",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestComparisonOps",
        "signature": "pandas.tests.extension.test_integer.TestComparisonOps._compare_other(self, s, data, op_name, other)",
        "snippet": "    def _compare_other(self, s, data, op_name, other):\n        self.check_opname(s, op_name, other)",
        "begin_line": 168,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestComparisonOps.test_compare_to_string#171",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestComparisonOps",
        "signature": "pandas.tests.extension.test_integer.TestComparisonOps.test_compare_to_string(self, any_nullable_int_dtype)",
        "snippet": "    def test_compare_to_string(self, any_nullable_int_dtype):\n        # GH 28930\n        s = pd.Series([1, None], dtype=any_nullable_int_dtype)\n        result = s == \"a\"\n        expected = pd.Series([False, False])\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 171,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestComparisonOps.test_compare_to_int#179",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestComparisonOps",
        "signature": "pandas.tests.extension.test_integer.TestComparisonOps.test_compare_to_int(self, any_nullable_int_dtype, all_compare_operators)",
        "snippet": "    def test_compare_to_int(self, any_nullable_int_dtype, all_compare_operators):\n        # GH 28930\n        s1 = pd.Series([1, 2, 3], dtype=any_nullable_int_dtype)\n        s2 = pd.Series([1, 2, 3], dtype=\"int\")\n\n        method = getattr(s1, all_compare_operators)\n        result = method(2)\n\n        method = getattr(s2, all_compare_operators)\n        expected = method(2)\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 179,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.test_integer.TestMethods.test_value_counts#223",
        "src_path": "pandas/tests/extension/test_integer.py",
        "class_name": "pandas.tests.extension.test_integer.TestMethods",
        "signature": "pandas.tests.extension.test_integer.TestMethods.test_value_counts(self, all_data, dropna)",
        "snippet": "    def test_value_counts(self, all_data, dropna):\n        all_data = all_data[:10]\n        if dropna:\n            other = np.array(all_data[~all_data.isna()])\n        else:\n            other = all_data\n\n        result = pd.Series(all_data).value_counts(dropna=dropna).sort_index()\n        expected = pd.Series(other).value_counts(dropna=dropna).sort_index()\n        expected.index = expected.index.astype(all_data.dtype)\n\n        self.assert_series_equal(result, expected)",
        "begin_line": 223,
        "end_line": 234,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.__init__#22",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.__init__(self, context=None)",
        "snippet": "    def __init__(self, context=None):\n        self.context = context or decimal.getcontext()",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type#29",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_array_type(cls)",
        "snippet": "    def construct_array_type(cls):\n        \"\"\"Return the array type associated with this dtype\n\n        Returns\n        -------\n        type\n        \"\"\"\n        return DecimalArray",
        "begin_line": 29,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string#39",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype.construct_from_string(cls, string)",
        "snippet": "    def construct_from_string(cls, string):\n        if string == cls.name:\n            return cls()\n        else:\n            raise TypeError(f\"Cannot construct a '{cls}' from '{string}'\")",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalDtype._is_numeric#46",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalDtype",
        "signature": "pandas.tests.extension.decimal.array.DecimalDtype._is_numeric(self)",
        "snippet": "    def _is_numeric(self):\n        return True",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__init__#53",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__init__(self, values, dtype=None, copy=False, context=None)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False, context=None):\n        for val in values:\n            if not isinstance(val, decimal.Decimal):\n                raise TypeError(\"All values must be of type \" + str(decimal.Decimal))\n        values = np.asarray(values, dtype=object)\n\n        self._data = values\n        # Some aliases for common attribute names to ensure pandas supports\n        # these\n        self._items = self.data = self._data\n        # those aliases are currently not working due to assumptions\n        # in internal code (GH-20735)\n        # self._values = self.values = self.data\n        self._dtype = DecimalDtype(context)",
        "begin_line": 53,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.dtype#69",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.dtype(self)",
        "snippet": "    def dtype(self):\n        return self._dtype",
        "begin_line": 69,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence#73",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_sequence(cls, scalars, dtype=None, copy=False)",
        "snippet": "    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return cls(scalars)",
        "begin_line": 73,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._from_factorized#81",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._from_factorized(cls, values, original)",
        "snippet": "    def _from_factorized(cls, values, original):\n        return cls(values)",
        "begin_line": 81,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__array_ufunc__#86",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
        "snippet": "    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n        #\n        if not all(\n            isinstance(t, self._HANDLED_TYPES + (DecimalArray,)) for t in inputs\n        ):\n            return NotImplemented\n\n        inputs = tuple(x._data if isinstance(x, DecimalArray) else x for x in inputs)\n        result = getattr(ufunc, method)(*inputs, **kwargs)\n\n        def reconstruct(x):\n            if isinstance(x, (decimal.Decimal, numbers.Number)):\n                return x\n            else:\n                return DecimalArray._from_sequence(x)\n\n        if isinstance(result, tuple):\n            return tuple(reconstruct(x) for x in result)\n        else:\n            return reconstruct(result)",
        "begin_line": 86,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.reconstruct#96",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.reconstruct(x)",
        "snippet": "        def reconstruct(x):\n            if isinstance(x, (decimal.Decimal, numbers.Number)):\n                return x\n            else:\n                return DecimalArray._from_sequence(x)",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__#107",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self._data[item]\n        else:\n            return type(self)(self._data[item])",
        "begin_line": 107,
        "end_line": 111,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.take#113",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.take(self, indexer, allow_fill=False, fill_value=None)",
        "snippet": "    def take(self, indexer, allow_fill=False, fill_value=None):\n        from pandas.api.extensions import take\n\n        data = self._data\n        if allow_fill and fill_value is None:\n            fill_value = self.dtype.na_value\n\n        result = take(data, indexer, fill_value=fill_value, allow_fill=allow_fill)\n        return self._from_sequence(result)",
        "begin_line": 113,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.copy#123",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.copy(self)",
        "snippet": "    def copy(self):\n        return type(self)(self._data.copy())",
        "begin_line": 123,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.astype#126",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)):\n            return type(self)(self._data, context=dtype.context)\n        return np.asarray(self, dtype=dtype)",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__setitem__#131",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__setitem__(self, key, value)",
        "snippet": "    def __setitem__(self, key, value):\n        if pd.api.types.is_list_like(value):\n            if pd.api.types.is_scalar(key):\n                raise ValueError(\"setting an array element with a sequence.\")\n            value = [decimal.Decimal(v) for v in value]\n        else:\n            value = decimal.Decimal(value)\n        self._data[key] = value",
        "begin_line": 131,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.__len__#140",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self._data)",
        "begin_line": 140,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.nbytes#144",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.nbytes(self)",
        "snippet": "    def nbytes(self) -> int:\n        n = len(self)\n        if n:\n            return n * sys.getsizeof(self[0])\n        return 0",
        "begin_line": 144,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray.isna#150",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array([x.is_nan() for x in self._data], dtype=bool)",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._formatter#157",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._formatter(self, boxed=False)",
        "snippet": "    def _formatter(self, boxed=False):\n        if boxed:\n            return \"Decimal: {0}\".format\n        return repr",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._concat_same_type#163",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._concat_same_type(cls, to_concat)",
        "snippet": "    def _concat_same_type(cls, to_concat):\n        return cls(np.concatenate([x._data for x in to_concat]))",
        "begin_line": 163,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.DecimalArray._reduce#166",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array.DecimalArray",
        "signature": "pandas.tests.extension.decimal.array.DecimalArray._reduce(self, name, skipna=True, **kwargs)",
        "snippet": "    def _reduce(self, name, skipna=True, **kwargs):\n\n        if skipna:\n            # If we don't have any NAs, we can ignore skipna\n            if self.isna().any():\n                other = self[~self.isna()]\n                return other._reduce(name, **kwargs)\n\n        if name == \"sum\" and len(self) == 0:\n            # GH#29630 avoid returning int 0 or np.bool_(False) on old numpy\n            return decimal.Decimal(0)\n\n        try:\n            op = getattr(self.data, name)\n        except AttributeError:\n            raise NotImplementedError(f\"decimal does not support the {name} operation\")\n        return op(axis=0)",
        "begin_line": 166,
        "end_line": 182,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.to_decimal#185",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.to_decimal(values, context=None)",
        "snippet": "def to_decimal(values, context=None):\n    return DecimalArray([decimal.Decimal(x) for x in values], context=context)",
        "begin_line": 185,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.decimal.array.make_data#189",
        "src_path": "pandas/tests/extension/decimal/array.py",
        "class_name": "pandas.tests.extension.decimal.array",
        "signature": "pandas.tests.extension.decimal.array.make_data()",
        "snippet": "def make_data():\n    return [decimal.Decimal(random.random()) for _ in range(100)]",
        "begin_line": 189,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.ListArray.__init__#46",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array.ListArray",
        "signature": "pandas.tests.extension.list.array.ListArray.__init__(self, values, dtype=None, copy=False)",
        "snippet": "    def __init__(self, values, dtype=None, copy=False):\n        if not isinstance(values, np.ndarray):\n            raise TypeError(\"Need to pass a numpy array as values\")\n        for val in values:\n            if not isinstance(val, self.dtype.type) and not pd.isna(val):\n                raise TypeError(\"All values must be of type \" + str(self.dtype.type))\n        self.data = values",
        "begin_line": 46,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.ListArray.__getitem__#60",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array.ListArray",
        "signature": "pandas.tests.extension.list.array.ListArray.__getitem__(self, item)",
        "snippet": "    def __getitem__(self, item):\n        if isinstance(item, numbers.Integral):\n            return self.data[item]\n        else:\n            # slice, list-like, mask\n            return type(self)(self.data[item])",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.ListArray.__len__#67",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array.ListArray",
        "signature": "pandas.tests.extension.list.array.ListArray.__len__(self)",
        "snippet": "    def __len__(self) -> int:\n        return len(self.data)",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.ListArray.isna#70",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array.ListArray",
        "signature": "pandas.tests.extension.list.array.ListArray.isna(self)",
        "snippet": "    def isna(self):\n        return np.array(\n            [not isinstance(x, list) and np.isnan(x) for x in self.data], dtype=bool\n        )",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.ListArray.astype#108",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array.ListArray",
        "signature": "pandas.tests.extension.list.array.ListArray.astype(self, dtype, copy=True)",
        "snippet": "    def astype(self, dtype, copy=True):\n        if isinstance(dtype, type(self.dtype)) and dtype == self.dtype:\n            if copy:\n                return self.copy()\n            return self\n        elif pd.api.types.is_string_dtype(dtype) and not pd.api.types.is_object_dtype(\n            dtype\n        ):\n            # numpy has problems with astype(str) for nested elements\n            return np.array([str(x) for x in self.data], dtype=dtype)\n        return np.array(self.data, dtype=dtype, copy=copy)",
        "begin_line": 108,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.list.array.make_data#126",
        "src_path": "pandas/tests/extension/list/array.py",
        "class_name": "pandas.tests.extension.list.array",
        "signature": "pandas.tests.extension.list.array.make_data()",
        "snippet": "def make_data():\n    # TODO: Use a regular dict. See _NDFrameIndexer._setitem_with_indexer\n    data = np.empty(100, dtype=object)\n    data[:] = [\n        [random.choice(string.ascii_letters) for _ in range(random.randint(0, 10))]\n        for _ in range(100)\n    ]\n    return data",
        "begin_line": 126,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reduce.BaseReduceTests.check_reduce#17",
        "src_path": "pandas/tests/extension/base/reduce.py",
        "class_name": "pandas.tests.extension.base.reduce.BaseReduceTests",
        "signature": "pandas.tests.extension.base.reduce.BaseReduceTests.check_reduce(self, s, op_name, skipna)",
        "snippet": "    def check_reduce(self, s, op_name, skipna):\n        result = getattr(s, op_name)(skipna=skipna)\n        expected = getattr(s.astype(\"float64\"), op_name)(skipna=skipna)\n        tm.assert_almost_equal(result, expected)",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_numeric#27",
        "src_path": "pandas/tests/extension/base/reduce.py",
        "class_name": "pandas.tests.extension.base.reduce.BaseNoReduceTests",
        "signature": "pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_numeric(self, data, all_numeric_reductions, skipna)",
        "snippet": "    def test_reduce_series_numeric(self, data, all_numeric_reductions, skipna):\n        op_name = all_numeric_reductions\n        s = pd.Series(data)\n\n        with pytest.raises(TypeError):\n            getattr(s, op_name)(skipna=skipna)",
        "begin_line": 27,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_boolean#35",
        "src_path": "pandas/tests/extension/base/reduce.py",
        "class_name": "pandas.tests.extension.base.reduce.BaseNoReduceTests",
        "signature": "pandas.tests.extension.base.reduce.BaseNoReduceTests.test_reduce_series_boolean(self, data, all_boolean_reductions, skipna)",
        "snippet": "    def test_reduce_series_boolean(self, data, all_boolean_reductions, skipna):\n        op_name = all_boolean_reductions\n        s = pd.Series(data)\n\n        with pytest.raises(TypeError):\n            getattr(s, op_name)(skipna=skipna)",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reduce.BaseNumericReduceTests.test_reduce_series#45",
        "src_path": "pandas/tests/extension/base/reduce.py",
        "class_name": "pandas.tests.extension.base.reduce.BaseNumericReduceTests",
        "signature": "pandas.tests.extension.base.reduce.BaseNumericReduceTests.test_reduce_series(self, data, all_numeric_reductions, skipna)",
        "snippet": "    def test_reduce_series(self, data, all_numeric_reductions, skipna):\n        op_name = all_numeric_reductions\n        s = pd.Series(data)\n\n        # min/max with empty produce numpy warnings\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\", RuntimeWarning)\n            self.check_reduce(s, op_name, skipna)",
        "begin_line": 45,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.reduce.BaseBooleanReduceTests.test_reduce_series#57",
        "src_path": "pandas/tests/extension/base/reduce.py",
        "class_name": "pandas.tests.extension.base.reduce.BaseBooleanReduceTests",
        "signature": "pandas.tests.extension.base.reduce.BaseBooleanReduceTests.test_reduce_series(self, data, all_boolean_reductions, skipna)",
        "snippet": "    def test_reduce_series(self, data, all_boolean_reductions, skipna):\n        op_name = all_boolean_reductions\n        s = pd.Series(data)\n        self.check_reduce(s, op_name, skipna)",
        "begin_line": 57,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_sequence_from_cls#11",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_sequence_from_cls(self, data)",
        "snippet": "    def test_from_sequence_from_cls(self, data):\n        result = type(data)._from_sequence(data, dtype=data.dtype)\n        self.assert_extension_array_equal(result, data)\n\n        data = data[:0]\n        result = type(data)._from_sequence(data, dtype=data.dtype)\n        self.assert_extension_array_equal(result, data)",
        "begin_line": 11,
        "end_line": 17,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_array_from_scalars#19",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_array_from_scalars(self, data)",
        "snippet": "    def test_array_from_scalars(self, data):\n        scalars = [data[0], data[1], data[2]]\n        result = data._from_sequence(scalars)\n        assert isinstance(result, type(data))",
        "begin_line": 19,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_constructor#24",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_constructor(self, data)",
        "snippet": "    def test_series_constructor(self, data):\n        result = pd.Series(data)\n        assert result.dtype == data.dtype\n        assert len(result) == len(data)\n        assert isinstance(result._data.blocks[0], ExtensionBlock)\n        assert result._data.blocks[0].values is data\n\n        # Series[EA] is unboxed / boxed correctly\n        result2 = pd.Series(result)\n        assert result2.dtype == data.dtype\n        assert isinstance(result2._data.blocks[0], ExtensionBlock)",
        "begin_line": 24,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_constructor_from_dict#37",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_constructor_from_dict(self, data, from_series)",
        "snippet": "    def test_dataframe_constructor_from_dict(self, data, from_series):\n        if from_series:\n            data = pd.Series(data)\n        result = pd.DataFrame({\"A\": data})\n        assert result.dtypes[\"A\"] == data.dtype\n        assert result.shape == (len(data), 1)\n        assert isinstance(result._data.blocks[0], ExtensionBlock)",
        "begin_line": 37,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_from_series#45",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_dataframe_from_series(self, data)",
        "snippet": "    def test_dataframe_from_series(self, data):\n        result = pd.DataFrame(pd.Series(data))\n        assert result.dtypes[0] == data.dtype\n        assert result.shape == (len(data), 1)\n        assert isinstance(result._data.blocks[0], ExtensionBlock)",
        "begin_line": 45,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_given_mismatched_index_raises#51",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_series_given_mismatched_index_raises(self, data)",
        "snippet": "    def test_series_given_mismatched_index_raises(self, data):\n        msg = \"Length of passed values is 3, index implies 5\"\n        with pytest.raises(ValueError, match=msg):\n            pd.Series(data[:3], index=[0, 1, 2, 3, 4])",
        "begin_line": 51,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_dtype#56",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_from_dtype(self, data)",
        "snippet": "    def test_from_dtype(self, data):\n        # construct from our dtype & string dtype\n        dtype = data.dtype\n\n        expected = pd.Series(data)\n        result = pd.Series(list(data), dtype=dtype)\n        self.assert_series_equal(result, expected)\n\n        result = pd.Series(list(data), dtype=str(dtype))\n        self.assert_series_equal(result, expected)",
        "begin_line": 56,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array#67",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array(self, data)",
        "snippet": "    def test_pandas_array(self, data):\n        # pd.array(extension_array) should be idempotent...\n        result = pd.array(data)\n        self.assert_extension_array_equal(result, data)",
        "begin_line": 67,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array_dtype#72",
        "src_path": "pandas/tests/extension/base/constructors.py",
        "class_name": "pandas.tests.extension.base.constructors.BaseConstructorsTests",
        "signature": "pandas.tests.extension.base.constructors.BaseConstructorsTests.test_pandas_array_dtype(self, data)",
        "snippet": "    def test_pandas_array_dtype(self, data):\n        # ... but specifying dtype will override idempotency\n        result = pd.array(data, dtype=np.dtype(object))\n        expected = pd.arrays.PandasArray(np.asarray(data, dtype=object))\n        self.assert_equal(result, expected)",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    }
]