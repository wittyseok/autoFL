[
    {
        "name": "pandas.tests.window.conftest.raw#7",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.raw(request)",
        "snippet": "def raw(request):\n    return request.param",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types#23",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types(request)",
        "snippet": "def win_types(request):\n    return request.param",
        "begin_line": 23,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.win_types_special#28",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.win_types_special(request)",
        "snippet": "def win_types_special(request):\n    return request.param",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.arithmetic_win_operators#35",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.arithmetic_win_operators(request)",
        "snippet": "def arithmetic_win_operators(request):\n    return request.param",
        "begin_line": 35,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.conftest.engine_and_raw#87",
        "src_path": "pandas/tests/window/conftest.py",
        "class_name": "pandas.tests.window.conftest",
        "signature": "pandas.tests.window.conftest.engine_and_raw(request)",
        "snippet": "def engine_and_raw(request):\n    \"\"\"engine and raw keyword arguments for rolling.apply\"\"\"\n    return request.param",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.Base._create_data#17",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.Base",
        "signature": "pandas.tests.window.common.Base._create_data(self)",
        "snippet": "    def _create_data(self):\n        arr = randn(N)\n        arr[self._nan_locs] = np.NaN\n\n        self.arr = arr\n        self.rng = bdate_range(datetime(2009, 1, 1), periods=N)\n        self.series = Series(arr.copy(), index=self.rng)\n        self.frame = DataFrame(randn(N, K), index=self.rng, columns=np.arange(K))",
        "begin_line": 17,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._create_data#211",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._create_data(self)",
        "snippet": "    def _create_data(self):\n        super()._create_data()\n        self.data = _consistency_data",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_mock_mean#215",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_mock_mean(self, mean, mock_mean)",
        "snippet": "    def _test_moments_consistency_mock_mean(self, mean, mock_mean):\n        for (x, is_constant, no_nans) in self.data:\n            mean_x = mean(x)\n            # check that correlation of a series with itself is either 1 or NaN\n\n            if mock_mean:\n                # check that mean equals mock_mean\n                expected = mock_mean(x)\n                tm.assert_equal(mean_x, expected.astype(\"float64\"))",
        "begin_line": 215,
        "end_line": 223,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_is_constant#225",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_is_constant(self, min_periods, count, mean, corr)",
        "snippet": "    def _test_moments_consistency_is_constant(self, min_periods, count, mean, corr):\n        for (x, is_constant, no_nans) in self.data:\n            count_x = count(x)\n            mean_x = mean(x)\n            # check that correlation of a series with itself is either 1 or NaN\n            corr_x_x = corr(x, x)\n\n            if is_constant:\n                exp = x.max() if isinstance(x, Series) else x.max().max()\n\n                # check mean of constant series\n                expected = x * np.nan\n                expected[count_x >= max(min_periods, 1)] = exp\n                tm.assert_equal(mean_x, expected)\n\n                # check correlation of constant series with itself is NaN\n                expected[:] = np.nan\n                tm.assert_equal(corr_x_x, expected)",
        "begin_line": 225,
        "end_line": 242,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_var_debiasing_factors#244",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency_var_debiasing_factors(self, var_biased=None, var_unbiased=None, var_debiasing_factors=None)",
        "snippet": "    def _test_moments_consistency_var_debiasing_factors(\n        self, var_biased=None, var_unbiased=None, var_debiasing_factors=None\n    ):\n        for (x, is_constant, no_nans) in self.data:\n            if var_unbiased and var_biased and var_debiasing_factors:\n                # check variance debiasing factors\n                var_unbiased_x = var_unbiased(x)\n                var_biased_x = var_biased(x)\n                var_debiasing_factors_x = var_debiasing_factors(x)\n                tm.assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)",
        "begin_line": 244,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency#255",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._test_moments_consistency(self, min_periods, count, mean, corr, var_unbiased=None, std_unbiased=None, cov_unbiased=None, var_biased=None, std_biased=None, cov_biased=None)",
        "snippet": "    def _test_moments_consistency(\n        self,\n        min_periods,\n        count,\n        mean,\n        corr,\n        var_unbiased=None,\n        std_unbiased=None,\n        cov_unbiased=None,\n        var_biased=None,\n        std_biased=None,\n        cov_biased=None,\n    ):\n\n        for (x, is_constant, no_nans) in self.data:\n            count_x = count(x)\n            mean_x = mean(x)\n\n            for (std, var, cov) in [\n                (std_biased, var_biased, cov_biased),\n                (std_unbiased, var_unbiased, cov_unbiased),\n            ]:\n\n                # check that var(x), std(x), and cov(x) are all >= 0\n                var_x = var(x)\n                std_x = std(x)\n                assert not (var_x < 0).any().any()\n                assert not (std_x < 0).any().any()\n                if cov:\n                    cov_x_x = cov(x, x)\n                    assert not (cov_x_x < 0).any().any()\n\n                    # check that var(x) == cov(x, x)\n                    tm.assert_equal(var_x, cov_x_x)\n\n                # check that var(x) == std(x)^2\n                tm.assert_equal(var_x, std_x * std_x)\n\n                if var is var_biased:\n                    # check that biased var(x) == mean(x^2) - mean(x)^2\n                    mean_x2 = mean(x * x)\n                    tm.assert_equal(var_x, mean_x2 - (mean_x * mean_x))\n\n                if is_constant:\n                    # check that variance of constant series is identically 0\n                    assert not (var_x > 0).any().any()\n                    expected = x * np.nan\n                    expected[count_x >= max(min_periods, 1)] = 0.0\n                    if var is var_unbiased:\n                        expected[count_x < 2] = np.nan\n                    tm.assert_equal(var_x, expected)\n\n                if isinstance(x, Series):\n                    for (y, is_constant, no_nans) in self.data:\n                        if not x.isna().equals(y.isna()):\n                            # can only easily test two Series with similar\n                            # structure\n                            continue\n\n                        # check that cor(x, y) is symmetric\n                        corr_x_y = corr(x, y)\n                        corr_y_x = corr(y, x)\n                        tm.assert_equal(corr_x_y, corr_y_x)\n\n                        if cov:\n                            # check that cov(x, y) is symmetric\n                            cov_x_y = cov(x, y)\n                            cov_y_x = cov(y, x)\n                            tm.assert_equal(cov_x_y, cov_y_x)\n\n                            # check that cov(x, y) == (var(x+y) - var(x) -\n                            # var(y)) / 2\n                            var_x_plus_y = var(x + y)\n                            var_y = var(y)\n                            tm.assert_equal(\n                                cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y)\n                            )\n\n                            # check that corr(x, y) == cov(x, y) / (std(x) *\n                            # std(y))\n                            std_y = std(y)\n                            tm.assert_equal(corr_x_y, cov_x_y / (std_x * std_y))\n\n                            if cov is cov_biased:\n                                # check that biased cov(x, y) == mean(x*y) -\n                                # mean(x)*mean(y)\n                                mean_y = mean(y)\n                                mean_x_times_y = mean(x * y)\n                                tm.assert_equal(\n                                    cov_x_y, mean_x_times_y - (mean_x * mean_y)\n                                )",
        "begin_line": 255,
        "end_line": 345,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase._check_pairwise_moment#347",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase._check_pairwise_moment(self, dispatch, name, **kwargs)",
        "snippet": "    def _check_pairwise_moment(self, dispatch, name, **kwargs):\n        def get_result(obj, obj2=None):\n            return getattr(getattr(obj, dispatch)(**kwargs), name)(obj2)\n\n        result = get_result(self.frame)\n        result = result.loc[(slice(None), 1), 5]\n        result.index = result.index.droplevel(1)\n        expected = get_result(self.frame[1], self.frame[5])\n        tm.assert_series_equal(result, expected, check_names=False)",
        "begin_line": 347,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ConsistencyBase.get_result#348",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common.ConsistencyBase",
        "signature": "pandas.tests.window.common.ConsistencyBase.get_result(obj, obj2=None)",
        "snippet": "        def get_result(obj, obj2=None):\n            return getattr(getattr(obj, dispatch)(**kwargs), name)(obj2)",
        "begin_line": 348,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.ew_func#358",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.ew_func(A, B, com, name, **kwargs)",
        "snippet": "def ew_func(A, B, com, name, **kwargs):\n    return getattr(A.ewm(com, **kwargs), name)(B)",
        "begin_line": 358,
        "end_line": 359,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.check_binary_ew#362",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.check_binary_ew(name, A, B)",
        "snippet": "def check_binary_ew(name, A, B):\n\n    result = ew_func(A=A, B=B, com=20, name=name, min_periods=5)\n    assert np.isnan(result.values[:14]).all()\n    assert not np.isnan(result.values[14:]).any()",
        "begin_line": 362,
        "end_line": 366,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.common.check_binary_ew_min_periods#369",
        "src_path": "pandas/tests/window/common.py",
        "class_name": "pandas.tests.window.common",
        "signature": "pandas.tests.window.common.check_binary_ew_min_periods(name, min_periods, A, B)",
        "snippet": "def check_binary_ew_min_periods(name, min_periods, A, B):\n    # GH 7898\n    result = ew_func(A, B, 20, name=name, min_periods=min_periods)\n    # binary functions (ewmcov, ewmcorr) with bias=False require at\n    # least two values\n    assert np.isnan(result.values[:11]).all()\n    assert not np.isnan(result.values[11:]).any()\n\n    # check series of length 0\n    empty = Series([], dtype=np.float64)\n    result = ew_func(empty, empty, 50, name=name, min_periods=min_periods)\n    tm.assert_series_equal(result, empty)\n\n    # check series of length 1\n    result = ew_func(\n        Series([1.0]), Series([1.0]), 50, name=name, min_periods=min_periods\n    )\n    tm.assert_series_equal(result, Series([np.NaN]))",
        "begin_line": 369,
        "end_line": 386,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.setup_method#11",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.setup_method(self, method)",
        "snippet": "    def setup_method(self, method):\n        self.series = Series(np.arange(10))\n        self.frame = DataFrame({\"A\": [1] * 20 + [2] * 12 + [3] * 8, \"B\": np.arange(40)})",
        "begin_line": 11,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_mutated#15",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_mutated(self)",
        "snippet": "    def test_mutated(self):\n\n        msg = r\"groupby\\(\\) got an unexpected keyword argument 'foo'\"\n        with pytest.raises(TypeError, match=msg):\n            self.frame.groupby(\"A\", foo=1)\n\n        g = self.frame.groupby(\"A\")\n        assert not g.mutated\n        g = get_groupby(self.frame, by=\"A\", mutated=True)\n        assert g.mutated",
        "begin_line": 15,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem#26",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem(self)",
        "snippet": "    def test_getitem(self):\n        g = self.frame.groupby(\"A\")\n        g_mutated = get_groupby(self.frame, by=\"A\", mutated=True)\n\n        expected = g_mutated.B.apply(lambda x: x.rolling(2).mean())\n\n        result = g.rolling(2).mean().B\n        tm.assert_series_equal(result, expected)\n\n        result = g.rolling(2).B.mean()\n        tm.assert_series_equal(result, expected)\n\n        result = g.B.rolling(2).mean()\n        tm.assert_series_equal(result, expected)\n\n        result = self.frame.B.groupby(self.frame.A).rolling(2).mean()\n        tm.assert_series_equal(result, expected)",
        "begin_line": 26,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem_multiple#44",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_getitem_multiple(self)",
        "snippet": "    def test_getitem_multiple(self):\n\n        # GH 13174\n        g = self.frame.groupby(\"A\")\n        r = g.rolling(2)\n        g_mutated = get_groupby(self.frame, by=\"A\", mutated=True)\n        expected = g_mutated.B.apply(lambda x: x.rolling(2).count())\n\n        result = r.B.count()\n        tm.assert_series_equal(result, expected)\n\n        result = r.B.count()\n        tm.assert_series_equal(result, expected)",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling#58",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling(self)",
        "snippet": "    def test_rolling(self):\n        g = self.frame.groupby(\"A\")\n        r = g.rolling(window=4)\n\n        for f in [\"sum\", \"mean\", \"min\", \"max\", \"count\", \"kurt\", \"skew\"]:\n            result = getattr(r, f)()\n            expected = g.apply(lambda x: getattr(x.rolling(4), f)())\n            tm.assert_frame_equal(result, expected)\n\n        for f in [\"std\", \"var\"]:\n            result = getattr(r, f)(ddof=1)\n            expected = g.apply(lambda x: getattr(x.rolling(4), f)(ddof=1))\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 58,
        "end_line": 70,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_quantile#75",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_quantile(self, interpolation)",
        "snippet": "    def test_rolling_quantile(self, interpolation):\n        g = self.frame.groupby(\"A\")\n        r = g.rolling(window=4)\n        result = r.quantile(0.4, interpolation=interpolation)\n        expected = g.apply(\n            lambda x: x.rolling(4).quantile(0.4, interpolation=interpolation)\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 75,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_corr_cov#84",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_corr_cov(self)",
        "snippet": "    def test_rolling_corr_cov(self):\n        g = self.frame.groupby(\"A\")\n        r = g.rolling(window=4)\n\n        for f in [\"corr\", \"cov\"]:\n            result = getattr(r, f)(self.frame)\n\n            def func(x):\n                return getattr(x.rolling(4), f)(self.frame)\n\n            expected = g.apply(func)\n            tm.assert_frame_equal(result, expected)\n\n            result = getattr(r.B, f)(pairwise=True)\n\n            def func(x):\n                return getattr(x.B.rolling(4), f)(pairwise=True)\n\n            expected = g.apply(func)\n            tm.assert_series_equal(result, expected)",
        "begin_line": 84,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.func#91",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.func(x)",
        "snippet": "            def func(x):\n                return getattr(x.rolling(4), f)(self.frame)",
        "begin_line": 91,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.func#99",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.func(x)",
        "snippet": "            def func(x):\n                return getattr(x.B.rolling(4), f)(pairwise=True)",
        "begin_line": 99,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply#105",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply(self, raw)",
        "snippet": "    def test_rolling_apply(self, raw):\n        g = self.frame.groupby(\"A\")\n        r = g.rolling(window=4)\n\n        # reduction\n        result = r.apply(lambda x: x.sum(), raw=raw)\n        expected = g.apply(lambda x: x.rolling(4).apply(lambda y: y.sum(), raw=raw))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 105,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply_mutability#114",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_rolling_apply_mutability(self)",
        "snippet": "    def test_rolling_apply_mutability(self):\n        # GH 14013\n        df = pd.DataFrame({\"A\": [\"foo\"] * 3 + [\"bar\"] * 3, \"B\": [1] * 6})\n        g = df.groupby(\"A\")\n\n        mi = pd.MultiIndex.from_tuples(\n            [(\"bar\", 3), (\"bar\", 4), (\"bar\", 5), (\"foo\", 0), (\"foo\", 1), (\"foo\", 2)]\n        )\n\n        mi.names = [\"A\", None]\n        # Grouped column should not be a part of the output\n        expected = pd.DataFrame([np.nan, 2.0, 2.0] * 2, columns=[\"B\"], index=mi)\n\n        result = g.rolling(window=2).sum()\n        tm.assert_frame_equal(result, expected)\n\n        # Call an arbitrary function on the groupby\n        g.sum()\n\n        # Make sure nothing has been mutated\n        result = g.rolling(window=2).sum()\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 114,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding#137",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding(self)",
        "snippet": "    def test_expanding(self):\n        g = self.frame.groupby(\"A\")\n        r = g.expanding()\n\n        for f in [\"sum\", \"mean\", \"min\", \"max\", \"count\", \"kurt\", \"skew\"]:\n\n            result = getattr(r, f)()\n            expected = g.apply(lambda x: getattr(x.expanding(), f)())\n            tm.assert_frame_equal(result, expected)\n\n        for f in [\"std\", \"var\"]:\n            result = getattr(r, f)(ddof=0)\n            expected = g.apply(lambda x: getattr(x.expanding(), f)(ddof=0))\n            tm.assert_frame_equal(result, expected)",
        "begin_line": 137,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_quantile#155",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_quantile(self, interpolation)",
        "snippet": "    def test_expanding_quantile(self, interpolation):\n        g = self.frame.groupby(\"A\")\n        r = g.expanding()\n        result = r.quantile(0.4, interpolation=interpolation)\n        expected = g.apply(\n            lambda x: x.expanding().quantile(0.4, interpolation=interpolation)\n        )\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 155,
        "end_line": 162,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_corr_cov#164",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_corr_cov(self)",
        "snippet": "    def test_expanding_corr_cov(self):\n        g = self.frame.groupby(\"A\")\n        r = g.expanding()\n\n        for f in [\"corr\", \"cov\"]:\n            result = getattr(r, f)(self.frame)\n\n            def func(x):\n                return getattr(x.expanding(), f)(self.frame)\n\n            expected = g.apply(func)\n            tm.assert_frame_equal(result, expected)\n\n            result = getattr(r.B, f)(pairwise=True)\n\n            def func(x):\n                return getattr(x.B.expanding(), f)(pairwise=True)\n\n            expected = g.apply(func)\n            tm.assert_series_equal(result, expected)",
        "begin_line": 164,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.func#171",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.func(x)",
        "snippet": "            def func(x):\n                return getattr(x.expanding(), f)(self.frame)",
        "begin_line": 171,
        "end_line": 172,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.func#179",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.func(x)",
        "snippet": "            def func(x):\n                return getattr(x.B.expanding(), f)(pairwise=True)",
        "begin_line": 179,
        "end_line": 180,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_apply#185",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_expanding_apply(self, raw)",
        "snippet": "    def test_expanding_apply(self, raw):\n        g = self.frame.groupby(\"A\")\n        r = g.expanding()\n\n        # reduction\n        result = r.apply(lambda x: x.sum(), raw=raw)\n        expected = g.apply(lambda x: x.expanding().apply(lambda y: y.sum(), raw=raw))\n        tm.assert_frame_equal(result, expected)",
        "begin_line": 185,
        "end_line": 192,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_groupby_rolling#195",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.test_groupby_rolling(self, expected_value, raw_value)",
        "snippet": "    def test_groupby_rolling(self, expected_value, raw_value):\n        # GH 31754\n\n        def foo(x):\n            return int(isinstance(x, np.ndarray))\n\n        df = pd.DataFrame({\"id\": [1, 1, 1], \"value\": [1, 2, 3]})\n        result = df.groupby(\"id\").value.rolling(1).apply(foo, raw=raw_value)\n        expected = Series(\n            [expected_value] * 3,\n            index=pd.MultiIndex.from_tuples(\n                ((1, 0), (1, 1), (1, 2)), names=[\"id\", None]\n            ),\n            name=\"value\",\n        )\n        tm.assert_series_equal(result, expected)",
        "begin_line": 195,
        "end_line": 210,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.test_grouper.TestGrouperGrouping.foo#198",
        "src_path": "pandas/tests/window/test_grouper.py",
        "class_name": "pandas.tests.window.test_grouper.TestGrouperGrouping",
        "signature": "pandas.tests.window.test_grouper.TestGrouperGrouping.foo(x)",
        "snippet": "        def foo(x):\n            return int(isinstance(x, np.ndarray))",
        "begin_line": 198,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.moments.conftest.binary_ew_data#9",
        "src_path": "pandas/tests/window/moments/conftest.py",
        "class_name": "pandas.tests.window.moments.conftest",
        "signature": "pandas.tests.window.moments.conftest.binary_ew_data()",
        "snippet": "def binary_ew_data():\n    A = Series(randn(50), index=np.arange(50))\n    B = A[2:] + randn(48)\n\n    A[:10] = np.NaN\n    B[-10:] = np.NaN\n    return A, B",
        "begin_line": 9,
        "end_line": 15,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "pandas.tests.window.moments.conftest.min_periods#19",
        "src_path": "pandas/tests/window/moments/conftest.py",
        "class_name": "pandas.tests.window.moments.conftest",
        "signature": "pandas.tests.window.moments.conftest.min_periods(request)",
        "snippet": "def min_periods(request):\n    return request.param",
        "begin_line": 19,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    }
]