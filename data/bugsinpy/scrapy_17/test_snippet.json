[
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.test_response_httprepr#16",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.test_response_httprepr(self)",
        "snippet": "    def test_response_httprepr(self):\n        r1 = Response(\"http://www.example.com\")\n        self.assertEqual(response_httprepr(r1), b'HTTP/1.1 200 OK\\r\\n\\r\\n')\n\n        r1 = Response(\"http://www.example.com\", status=404, headers={\"Content-type\": \"text/html\"}, body=b\"Some body\")\n        self.assertEqual(response_httprepr(r1), b'HTTP/1.1 404 Not Found\\r\\nContent-Type: text/html\\r\\n\\r\\nSome body')\n\n        r1 = Response(\"http://www.example.com\", status=6666, headers={\"Content-type\": \"text/html\"}, body=b\"Some body\")\n        self.assertEqual(response_httprepr(r1), b'HTTP/1.1 6666 \\r\\nContent-Type: text/html\\r\\n\\r\\nSome body')",
        "begin_line": 16,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.test_open_in_browser#26",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.test_open_in_browser(self)",
        "snippet": "    def test_open_in_browser(self):\n        url = \"http:///www.example.com/some/page.html\"\n        body = b\"<html> <head> <title>test page</title> </head> <body>test body</body> </html>\"\n\n        def browser_open(burl):\n            path = urlparse(burl).path\n            if not os.path.exists(path):\n                path = burl.replace('file://', '')\n            with open(path, \"rb\") as f:\n                bbody = f.read()\n            self.assertIn(b'<base href=\"' + to_bytes(url) + b'\">', bbody)\n            return True\n        response = HtmlResponse(url, body=body)\n        assert open_in_browser(response, _openfunc=browser_open), \\\n            \"Browser not called\"\n\n        resp = Response(url, body=body)\n        self.assertRaises(TypeError, open_in_browser, resp, debug=True)",
        "begin_line": 26,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.browser_open#30",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.browser_open(burl)",
        "snippet": "        def browser_open(burl):\n            path = urlparse(burl).path\n            if not os.path.exists(path):\n                path = burl.replace('file://', '')\n            with open(path, \"rb\") as f:\n                bbody = f.read()\n            self.assertIn(b'<base href=\"' + to_bytes(url) + b'\">', bbody)\n            return True",
        "begin_line": 30,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.test_get_meta_refresh#45",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.test_get_meta_refresh(self)",
        "snippet": "    def test_get_meta_refresh(self):\n        r1 = HtmlResponse(\"http://www.example.com\", body=b\"\"\"\n        <html>\n        <head><title>Dummy</title><meta http-equiv=\"refresh\" content=\"5;url=http://example.org/newpage\" /></head>\n        <body>blahablsdfsal&amp;</body>\n        </html>\"\"\")\n        r2 = HtmlResponse(\"http://www.example.com\", body=b\"\"\"\n        <html>\n        <head><title>Dummy</title><noScript>\n        <meta http-equiv=\"refresh\" content=\"5;url=http://example.org/newpage\" /></head>\n        </noSCRIPT>\n        <body>blahablsdfsal&amp;</body>\n        </html>\"\"\")\n        r3 = HtmlResponse(\"http://www.example.com\", body=b\"\"\"\n    <noscript><meta http-equiv=\"REFRESH\" content=\"0;url=http://www.example.com/newpage</noscript>\n    <script type=\"text/javascript\">\n    if(!checkCookies()){\n        document.write('<meta http-equiv=\"REFRESH\" content=\"0;url=http://www.example.com/newpage\">');\n    }\n    </script>\n        \"\"\")\n        self.assertEqual(get_meta_refresh(r1), (5.0, 'http://example.org/newpage'))\n        self.assertEqual(get_meta_refresh(r2), (None, None))\n        self.assertEqual(get_meta_refresh(r3), (None, None))",
        "begin_line": 45,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.test_get_base_url#70",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.test_get_base_url(self)",
        "snippet": "    def test_get_base_url(self):\n        resp = HtmlResponse(\"http://www.example.com\", body=b\"\"\"\n        <html>\n        <head><base href=\"http://www.example.com/img/\" target=\"_blank\"></head>\n        <body>blahablsdfsal&amp;</body>\n        </html>\"\"\")\n        self.assertEqual(get_base_url(resp), \"http://www.example.com/img/\")\n\n        resp2 = HtmlResponse(\"http://www.example.com\", body=b\"\"\"\n        <html><body>blahablsdfsal&amp;</body></html>\"\"\")\n        self.assertEqual(get_base_url(resp2), \"http://www.example.com\")",
        "begin_line": 70,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_utils_response.ResponseUtilsTest.test_response_status_message#82",
        "src_path": "tests/test_utils_response.py",
        "class_name": "tests.test_utils_response.ResponseUtilsTest",
        "signature": "tests.test_utils_response.ResponseUtilsTest.test_response_status_message(self)",
        "snippet": "    def test_response_status_message(self):\n        self.assertEqual(response_status_message(200), '200 OK')\n        self.assertEqual(response_status_message(404), '404 Not Found')\n        self.assertEqual(response_status_message(573), \"573 Unknown Status\")",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    }
]