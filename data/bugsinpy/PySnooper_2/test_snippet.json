[
    {
        "name": "tests.samples.recursion.factorial#5",
        "src_path": "tests/samples/recursion.py",
        "class_name": "tests.samples.recursion",
        "signature": "tests.samples.recursion.factorial(x)",
        "snippet": "def factorial(x):\n    if x <= 1:\n        return 1\n    return mul(x, factorial(x - 1))",
        "begin_line": 5,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.recursion.mul#11",
        "src_path": "tests/samples/recursion.py",
        "class_name": "tests.samples.recursion",
        "signature": "tests.samples.recursion.mul(a, b)",
        "snippet": "def mul(a, b):\n    return a * b",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.recursion.main#15",
        "src_path": "tests/samples/recursion.py",
        "class_name": "tests.samples.recursion",
        "signature": "tests.samples.recursion.main()",
        "snippet": "def main():\n    factorial(4)",
        "begin_line": 15,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.main#5",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.main()",
        "snippet": "def main():\n    f2()",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.f2#9",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.f2()",
        "snippet": "def f2():\n    f3()",
        "begin_line": 9,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.f3#13",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.f3()",
        "snippet": "def f3():\n    f4()",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.f4#18",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.f4()",
        "snippet": "def f4():\n    f5()",
        "begin_line": 18,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.indentation.f5#22",
        "src_path": "tests/samples/indentation.py",
        "class_name": "tests.samples.indentation",
        "signature": "tests.samples.indentation.f5()",
        "snippet": "def f5():\n    pass",
        "begin_line": 22,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.exception.foo#4",
        "src_path": "tests/samples/exception.py",
        "class_name": "tests.samples.exception",
        "signature": "tests.samples.exception.foo()",
        "snippet": "def foo():\n    raise TypeError('bad')",
        "begin_line": 4,
        "end_line": 5,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.exception.bar#8",
        "src_path": "tests/samples/exception.py",
        "class_name": "tests.samples.exception",
        "signature": "tests.samples.exception.bar()",
        "snippet": "def bar():\n    try:\n        foo()\n    except Exception:\n        str(1)\n        raise",
        "begin_line": 8,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.samples.exception.main#17",
        "src_path": "tests/samples/exception.py",
        "class_name": "tests.samples.exception",
        "signature": "tests.samples.exception.main()",
        "snippet": "def main():\n    try:\n        bar()\n    except:\n        pass",
        "begin_line": 17,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.get_function_arguments#18",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.get_function_arguments(function, exclude=())",
        "snippet": "def get_function_arguments(function, exclude=()):\n    try:\n        getfullargspec = inspect.getfullargspec\n    except AttributeError:\n        result = inspect.getargspec(function).args\n    else:\n        result = getfullargspec(function).args\n    for exclude_item in exclude:\n        result.remove(exclude_item)\n    return result",
        "begin_line": 18,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEntry.__init__#31",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEntry",
        "signature": "tests.utils._BaseEntry.__init__(self, prefix='')",
        "snippet": "    def __init__(self, prefix=''):\n        self.prefix = prefix",
        "begin_line": 31,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEntry.__repr__#38",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEntry",
        "signature": "tests.utils._BaseEntry.__repr__(self)",
        "snippet": "    def __repr__(self):\n        init_arguments = get_function_arguments(self.__init__,\n                                                exclude=('self',))\n        attributes = {\n            key: repr(getattr(self, key)) for key in init_arguments\n                                              if getattr(self, key) is not None\n        }\n        return '%s(%s)' % (\n            type(self).__name__,\n            ', '.join('{key}={value}'.format(**locals()) for key, value\n                                                         in attributes.items())\n        )",
        "begin_line": 38,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseValueEntry.__init__#54",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseValueEntry",
        "signature": "tests.utils._BaseValueEntry.__init__(self, prefix='')",
        "snippet": "    def __init__(self, prefix=''):\n        _BaseEntry.__init__(self, prefix=prefix)\n        self.line_pattern = re.compile(\n            r\"\"\"^%s(?P<indent>(?: {4})*)(?P<preamble>[^:]*):\"\"\"\n            r\"\"\"\\.{2,7} (?P<content>.*)$\"\"\" % (re.escape(self.prefix),)\n        )",
        "begin_line": 54,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseValueEntry.check#69",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseValueEntry",
        "signature": "tests.utils._BaseValueEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, preamble, content = match.groups()\n        return (self._check_preamble(preamble) and\n                                                  self._check_content(content))",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry.__init__#79",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry.__init__(self, name=None, value=None, stage=None, prefix='', name_regex=None, value_regex=None)",
        "snippet": "    def __init__(self, name=None, value=None, stage=None, prefix='',\n                 name_regex=None, value_regex=None):\n        _BaseValueEntry.__init__(self, prefix=prefix)\n        if name is not None:\n            assert name_regex is None\n        if value is not None:\n            assert value_regex is None\n        assert stage in (None, 'starting', 'new', 'modified')\n\n        self.name = name\n        self.value = value\n        self.stage = stage\n        self.name_regex = (None if name_regex is None else\n                           re.compile(name_regex))\n        self.value_regex = (None if value_regex is None else\n                            re.compile(value_regex))",
        "begin_line": 79,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_preamble#100",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_preamble(self, preamble)",
        "snippet": "    def _check_preamble(self, preamble):\n        match = self._preamble_pattern.match(preamble)\n        if not match:\n            return False\n        stage = match.group('stage')\n        return self._check_stage(stage)",
        "begin_line": 100,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_content#111",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_content(self, content)",
        "snippet": "    def _check_content(self, content):\n        match = self._content_pattern.match(content)\n        if not match:\n            return False\n        name, value = match.groups()\n        return self._check_name(name) and self._check_value(value)",
        "begin_line": 111,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_name#118",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_name(self, name)",
        "snippet": "    def _check_name(self, name):\n        if self.name is not None:\n            return name == self.name\n        elif self.name_regex is not None:\n            return self.name_regex.match(name)\n        else:\n            return True",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_value#126",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_value(self, value)",
        "snippet": "    def _check_value(self, value):\n        if self.value is not None:\n            return value == self.value\n        elif self.value_regex is not None:\n            return self.value_regex.match(value)\n        else:\n            return True",
        "begin_line": 126,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.VariableEntry._check_stage#134",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.VariableEntry",
        "signature": "tests.utils.VariableEntry._check_stage(self, stage)",
        "snippet": "    def _check_stage(self, stage):\n        stage = stage.lower()\n        if self.stage is None:\n            return stage in ('starting', 'new', 'modified')\n        else:\n            return stage == self.stage",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry.__init__#143",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry.__init__(self, value=None, value_regex=None, prefix='')",
        "snippet": "    def __init__(self, value=None, value_regex=None, prefix=''):\n        _BaseValueEntry.__init__(self, prefix=prefix)\n        if value is not None:\n            assert value_regex is None\n\n        self.value = value\n        self.value_regex = (None if value_regex is None else\n                            re.compile(value_regex))",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_preamble#156",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_preamble(self, preamble)",
        "snippet": "    def _check_preamble(self, preamble):\n        return bool(self._preamble_pattern.match(preamble))",
        "begin_line": 156,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_content#159",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_content(self, content)",
        "snippet": "    def _check_content(self, content):\n        return self._check_value(content)",
        "begin_line": 159,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.ReturnValueEntry._check_value#162",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.ReturnValueEntry",
        "signature": "tests.utils.ReturnValueEntry._check_value(self, value)",
        "snippet": "    def _check_value(self, value):\n        if self.value is not None:\n            return value == self.value\n        elif self.value_regex is not None:\n            return self.value_regex.match(value)\n        else:\n            return True",
        "begin_line": 162,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.__init__#172",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.__init__(self, source=None, source_regex=None, thread_info=None, thread_info_regex=None, prefix='')",
        "snippet": "    def __init__(self, source=None, source_regex=None, thread_info=None,\n                 thread_info_regex=None, prefix=''):\n        _BaseEntry.__init__(self, prefix=prefix)\n        if type(self) is _BaseEventEntry:\n            raise TypeError\n        if source is not None:\n            assert source_regex is None\n        self.line_pattern = re.compile(\n            r\"\"\"^%s(?P<indent>(?: {4})*)[0-9:.]{15} \"\"\"\n            r\"\"\"(?P<thread_info>[0-9]+-[0-9A-Za-z_-]+[ ]+)?\"\"\"\n            r\"\"\"(?P<event_name>[a-z_]*) +(?P<line_number>[0-9]*) \"\"\"\n            r\"\"\"+(?P<source>.*)$\"\"\" % (re.escape(self.prefix,))\n        )\n\n        self.source = source\n        self.source_regex = (None if source_regex is None else\n                             re.compile(source_regex))\n        self.thread_info = thread_info\n        self.thread_info_regex = (None if thread_info_regex is None else\n                             re.compile(thread_info_regex))",
        "begin_line": 172,
        "end_line": 191,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.event_name#194",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.event_name(self)",
        "snippet": "    def event_name(self):\n        return re.match('^[A-Z][a-z_]*', type(self).__name__).group(0).lower()",
        "begin_line": 194,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry._check_source#197",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry._check_source(self, source)",
        "snippet": "    def _check_source(self, source):\n        if self.source is not None:\n            return source == self.source\n        elif self.source_regex is not None:\n            return self.source_regex.match(source)\n        else:\n            return True",
        "begin_line": 197,
        "end_line": 203,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry._check_thread_info#205",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry._check_thread_info(self, thread_info)",
        "snippet": "    def _check_thread_info(self, thread_info):\n        if self.thread_info is not None:\n            return thread_info == self.thread_info\n        elif self.thread_info_regex is not None:\n            return self.thread_info_regex.match(thread_info)\n        else:\n            return True",
        "begin_line": 205,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils._BaseEventEntry.check#213",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils._BaseEventEntry",
        "signature": "tests.utils._BaseEventEntry.check(self, s)",
        "snippet": "    def check(self, s):\n        match = self.line_pattern.match(s)\n        if not match:\n            return False\n        _, thread_info, event_name, _, source = match.groups()\n        return (event_name == self.event_name and\n                self._check_source(source) and\n                self._check_thread_info(thread_info))",
        "begin_line": 213,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.assert_output#247",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.assert_output(output, expected_entries, prefix=None)",
        "snippet": "def assert_output(output, expected_entries, prefix=None):\n    lines = tuple(filter(None, output.split('\\n')))\n\n    if prefix is not None:\n        for line in lines:\n            if not line.startswith(prefix):\n                raise OutputFailure(line)\n\n    any_mismatch = False\n    result = ''\n    template = '\\n{line!s:%s}   {expected_entry}  {arrow}' % max(map(len, lines))\n    for expected_entry, line in zip_longest(expected_entries, lines, fillvalue=\"\"):\n        mismatch = not (expected_entry and expected_entry.check(line))\n        any_mismatch |= mismatch\n        arrow = '<===' * mismatch\n        result += template.format(**locals())\n\n    if len(lines) != len(expected_entries):\n        result += '\\nOutput has {} lines, while we expect {} lines.'.format(\n                len(lines), len(expected_entries))\n\n    if any_mismatch:\n        raise OutputFailure(result)",
        "begin_line": 247,
        "end_line": 269,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.assert_sample_output#272",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.assert_sample_output(module)",
        "snippet": "def assert_sample_output(module):\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        module.main()\n        \n    time = '21:10:42.298924'\n    time_pattern = re.sub(r'\\d', r'\\\\d', time)\n\n    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()\n\n    output = output_capturer.string_io.getvalue()\n\n    try:\n        assert (\n                normalise(output) ==\n                normalise(module.expected_output)\n        )\n    except AssertionError:\n        print('\\n\\nActual Output:\\n\\n' + output)  # to copy paste into expected_output\n        raise  # show pytest diff (may need -vv flag to see in full)",
        "begin_line": 272,
        "end_line": 292,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.normalise#280",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils",
        "signature": "tests.utils.normalise(out)",
        "snippet": "    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()",
        "begin_line": 280,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_string_io#22",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_string_io()",
        "snippet": "def test_string_io():\n    string_io = io.StringIO()\n\n    @pysnooper.snoop(string_io)\n    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x\n\n    result = my_function('baba')\n    assert result == 15\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry('def my_function(foo):'),\n            LineEntry('x = 7'),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8'),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x'),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n        )\n    )",
        "begin_line": 22,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#26",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x",
        "begin_line": 26,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_thread_info#50",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_thread_info()",
        "snippet": "def test_thread_info():\n\n    @pysnooper.snoop(thread_info=True)\n    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function('baba')\n    assert result == 15\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry('def my_function(foo):'),\n            LineEntry('x = 7'),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8'),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x'),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n        )\n    )",
        "begin_line": 50,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#53",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_multi_thread_info#79",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_multi_thread_info()",
        "snippet": "def test_multi_thread_info():\n\n    @pysnooper.snoop(thread_info=True)\n    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        my_function('baba')\n        t1 = threading.Thread(target=my_function, name=\"test123\",args=['bubu'])\n        t1.start()\n        t1.join()\n        t1 = threading.Thread(target=my_function, name=\"bibi\",args=['bibi'])\n        t1.start()\n        t1.join()\n    output = output_capturer.string_io.getvalue()\n    calls = [line for line in output.split(\"\\n\") if \"call\" in line]\n    main_thread = calls[0]\n    assert len(main_thread) == len(calls[1])\n    assert len(main_thread) == len(calls[2])\n    main_thread_call_str = main_thread.find(\"call\")\n    assert main_thread_call_str == calls[1].find(\"call\")\n    assert main_thread_call_str == calls[2].find(\"call\")\n    thread_info_regex = '([0-9]+-{name}+[ ]+)'\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry('def my_function(foo):',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"MainThread\")),\n            LineEntry('x = 7',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"MainThread\")),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"MainThread\")),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"MainThread\")),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n            VariableEntry('foo', value_regex=\"u?'bubu'\"),\n            CallEntry('def my_function(foo):',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"test123\")),\n            LineEntry('x = 7',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"test123\")),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"test123\")),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x',\n                      thread_info_regex=thread_info_regex.format(\n                          name=\"test123\")),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n            VariableEntry('foo', value_regex=\"u?'bibi'\"),\n            CallEntry('def my_function(foo):',\n                      thread_info_regex=thread_info_regex.format(name='bibi')),\n            LineEntry('x = 7',\n                      thread_info_regex=thread_info_regex.format(name='bibi')),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8',\n                      thread_info_regex=thread_info_regex.format(name='bibi')),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x',\n                      thread_info_regex=thread_info_regex.format(name='bibi')),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n        )\n    )",
        "begin_line": 79,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#82",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_callable#159",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_callable()",
        "snippet": "def test_callable():\n    string_io = io.StringIO()\n\n    def write(msg):\n        string_io.write(msg)\n\n    @pysnooper.snoop(write)\n    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x\n\n    result = my_function('baba')\n    assert result == 15\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry('def my_function(foo):'),\n            LineEntry('x = 7'),\n            VariableEntry('x', '7'),\n            LineEntry('y = 8'),\n            VariableEntry('y', '8'),\n            LineEntry('return y + x'),\n            ReturnEntry('return y + x'),\n            ReturnValueEntry('15'),\n        )\n    )",
        "begin_line": 159,
        "end_line": 187,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.write#162",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.write(msg)",
        "snippet": "    def write(msg):\n        string_io.write(msg)",
        "begin_line": 162,
        "end_line": 163,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#166",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return y + x",
        "begin_line": 166,
        "end_line": 169,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_watch#191",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_watch()",
        "snippet": "def test_watch():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(watch=(\n            'foo.x',\n            'io.__name__',\n            'len(foo.__dict__[\"x\"] * \"abc\")',\n    ))\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            VariableEntry('io.__name__', \"'io'\"),\n            CallEntry('def my_function():'),\n            LineEntry('foo = Foo()'),\n            VariableEntry('foo'),\n            VariableEntry('foo.x', '2'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '6'),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            VariableEntry('foo.x', '4'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '12'),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            VariableEntry('foo.x', '16'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '48'),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 191,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.test_watch#191",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.test_watch()",
        "snippet": "def test_watch():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(watch=(\n            'foo.x',\n            'io.__name__',\n            'len(foo.__dict__[\"x\"] * \"abc\")',\n    ))\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            VariableEntry('io.__name__', \"'io'\"),\n            CallEntry('def my_function():'),\n            LineEntry('foo = Foo()'),\n            VariableEntry('foo'),\n            VariableEntry('foo.x', '2'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '6'),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            VariableEntry('foo.x', '4'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '12'),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            VariableEntry('foo.x', '16'),\n            VariableEntry('len(foo.__dict__[\"x\"] * \"abc\")', '48'),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 191,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.__init__#194",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 2",
        "begin_line": 194,
        "end_line": 195,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.square#197",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.square(self)",
        "snippet": "        def square(self):\n            self.x **= 2",
        "begin_line": 197,
        "end_line": 198,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#205",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()",
        "begin_line": 205,
        "end_line": 208,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_watch_explode#242",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_watch_explode()",
        "snippet": "def test_watch_explode():\n    class Foo:\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n\n    @pysnooper.snoop(watch_explode=('_d', '_point', 'lst + []'))\n    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _point = Foo(x=3, y=4)\n        lst = [7, 8, 9]\n        lst.append(10)\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            CallEntry('def my_function():'),\n            LineEntry(),\n            VariableEntry('_d'),\n            VariableEntry(\"_d['a']\", '1'),\n            VariableEntry(\"_d['b']\", '2'),\n            VariableEntry(\"_d['c']\", \"'ignore'\"),\n            LineEntry(),\n            VariableEntry('_point'),\n            VariableEntry('_point.x', '3'),\n            VariableEntry('_point.y', '4'),\n            LineEntry(),\n            VariableEntry('lst'),\n            VariableEntry('(lst + [])[0]', '7'),\n            VariableEntry('(lst + [])[1]', '8'),\n            VariableEntry('(lst + [])[2]', '9'),\n            VariableEntry('lst + []'),\n            LineEntry(),\n            VariableEntry('lst'),\n            VariableEntry('(lst + [])[3]', '10'),\n            VariableEntry('lst + []'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 242,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.test_watch_explode#242",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.test_watch_explode()",
        "snippet": "def test_watch_explode():\n    class Foo:\n        def __init__(self, x, y):\n            self.x = x\n            self.y = y\n\n\n    @pysnooper.snoop(watch_explode=('_d', '_point', 'lst + []'))\n    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _point = Foo(x=3, y=4)\n        lst = [7, 8, 9]\n        lst.append(10)\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            CallEntry('def my_function():'),\n            LineEntry(),\n            VariableEntry('_d'),\n            VariableEntry(\"_d['a']\", '1'),\n            VariableEntry(\"_d['b']\", '2'),\n            VariableEntry(\"_d['c']\", \"'ignore'\"),\n            LineEntry(),\n            VariableEntry('_point'),\n            VariableEntry('_point.x', '3'),\n            VariableEntry('_point.y', '4'),\n            LineEntry(),\n            VariableEntry('lst'),\n            VariableEntry('(lst + [])[0]', '7'),\n            VariableEntry('(lst + [])[1]', '8'),\n            VariableEntry('(lst + [])[2]', '9'),\n            VariableEntry('lst + []'),\n            LineEntry(),\n            VariableEntry('lst'),\n            VariableEntry('(lst + [])[3]', '10'),\n            VariableEntry('lst + []'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 242,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.__init__#244",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.__init__(self, x, y)",
        "snippet": "        def __init__(self, x, y):\n            self.x = x\n            self.y = y",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#250",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _point = Foo(x=3, y=4)\n        lst = [7, 8, 9]\n        lst.append(10)",
        "begin_line": 250,
        "end_line": 254,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_variables_classes#291",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_variables_classes()",
        "snippet": "def test_variables_classes():\n    class WithSlots(object):\n        __slots__ = ('x', 'y')\n\n        def __init__(self):\n            self.x = 3\n            self.y = 4\n\n    @pysnooper.snoop(watch=(\n            pysnooper.Keys('_d', exclude='c'),\n            pysnooper.Attrs('_d'),  # doesn't have attributes\n            pysnooper.Attrs('_s'),\n            pysnooper.Indices('_lst')[-3:],\n    ))\n    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _s = WithSlots()\n        _lst = list(range(1000))\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('WithSlots'),\n            CallEntry('def my_function():'),\n            LineEntry(),\n            VariableEntry('_d'),\n            VariableEntry(\"_d['a']\", '1'),\n            VariableEntry(\"_d['b']\", '2'),\n            LineEntry(),\n            VariableEntry('_s'),\n            VariableEntry('_s.x', '3'),\n            VariableEntry('_s.y', '4'),\n            LineEntry(),\n            VariableEntry('_lst'),\n            VariableEntry('_lst[997]', '997'),\n            VariableEntry('_lst[998]', '998'),\n            VariableEntry('_lst[999]', '999'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 291,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.WithSlots.test_variables_classes#291",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.WithSlots",
        "signature": "tests.test_pysnooper.WithSlots.test_variables_classes()",
        "snippet": "def test_variables_classes():\n    class WithSlots(object):\n        __slots__ = ('x', 'y')\n\n        def __init__(self):\n            self.x = 3\n            self.y = 4\n\n    @pysnooper.snoop(watch=(\n            pysnooper.Keys('_d', exclude='c'),\n            pysnooper.Attrs('_d'),  # doesn't have attributes\n            pysnooper.Attrs('_s'),\n            pysnooper.Indices('_lst')[-3:],\n    ))\n    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _s = WithSlots()\n        _lst = list(range(1000))\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('WithSlots'),\n            CallEntry('def my_function():'),\n            LineEntry(),\n            VariableEntry('_d'),\n            VariableEntry(\"_d['a']\", '1'),\n            VariableEntry(\"_d['b']\", '2'),\n            LineEntry(),\n            VariableEntry('_s'),\n            VariableEntry('_s.x', '3'),\n            VariableEntry('_s.y', '4'),\n            LineEntry(),\n            VariableEntry('_lst'),\n            VariableEntry('_lst[997]', '997'),\n            VariableEntry('_lst[998]', '998'),\n            VariableEntry('_lst[999]', '999'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 291,
        "end_line": 336,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.WithSlots.__init__#295",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.WithSlots",
        "signature": "tests.test_pysnooper.WithSlots.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 3\n            self.y = 4",
        "begin_line": 295,
        "end_line": 297,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#305",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        _d = {'a': 1, 'b': 2, 'c': 'ignore'}\n        _s = WithSlots()\n        _lst = list(range(1000))",
        "begin_line": 305,
        "end_line": 308,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_single_watch_no_comma#340",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_single_watch_no_comma()",
        "snippet": "def test_single_watch_no_comma():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(watch='foo')\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            CallEntry('def my_function():'),\n            LineEntry('foo = Foo()'),\n            VariableEntry('foo'),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 340,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.test_single_watch_no_comma#340",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.test_single_watch_no_comma()",
        "snippet": "def test_single_watch_no_comma():\n\n    class Foo(object):\n        def __init__(self):\n            self.x = 2\n\n        def square(self):\n            self.x **= 2\n\n    @pysnooper.snoop(watch='foo')\n    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Foo'),\n            CallEntry('def my_function():'),\n            LineEntry('foo = Foo()'),\n            VariableEntry('foo'),\n            LineEntry(),\n            VariableEntry('i', '0'),\n            LineEntry(),\n            LineEntry(),\n            VariableEntry('i', '1'),\n            LineEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 340,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.__init__#343",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 2",
        "begin_line": 343,
        "end_line": 344,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Foo.square#346",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Foo",
        "signature": "tests.test_pysnooper.Foo.square(self)",
        "snippet": "        def square(self):\n            self.x **= 2",
        "begin_line": 346,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#350",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        foo = Foo()\n        for i in range(2):\n            foo.square()",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_long_variable#380",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_long_variable()",
        "snippet": "def test_long_variable():\n    @pysnooper.snoop()\n    def my_function():\n        foo = list(range(1000))\n        return foo\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result == list(range(1000))\n    output = output_capturer.string_io.getvalue()\n    regex = r'^\\[0, 1, 2, .*\\.\\.\\..*, 997, 998, 999\\]$'\n    assert_output(\n        output,\n        (\n            CallEntry('def my_function():'),\n            LineEntry('foo = list(range(1000))'),\n            VariableEntry('foo', value_regex=regex),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry(value_regex=regex)\n        )\n    )",
        "begin_line": 380,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#382",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        foo = list(range(1000))\n        return foo",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_repr_exception#405",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_repr_exception()",
        "snippet": "def test_repr_exception():\n    class Bad(object):\n        def __repr__(self):\n            1 / 0\n\n    @pysnooper.snoop()\n    def my_function():\n        bad = Bad()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Bad'),\n            CallEntry('def my_function():'),\n            LineEntry('bad = Bad()'),\n            VariableEntry('bad', value='REPR FAILED'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 405,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Bad.test_repr_exception#405",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Bad",
        "signature": "tests.test_pysnooper.Bad.test_repr_exception()",
        "snippet": "def test_repr_exception():\n    class Bad(object):\n        def __repr__(self):\n            1 / 0\n\n    @pysnooper.snoop()\n    def my_function():\n        bad = Bad()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = my_function()\n    assert result is None\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('Bad'),\n            CallEntry('def my_function():'),\n            LineEntry('bad = Bad()'),\n            VariableEntry('bad', value='REPR FAILED'),\n            ReturnEntry(),\n            ReturnValueEntry('None')\n        )\n    )",
        "begin_line": 405,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Bad.__repr__#407",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Bad",
        "signature": "tests.test_pysnooper.Bad.__repr__(self)",
        "snippet": "        def __repr__(self):\n            1 / 0",
        "begin_line": 407,
        "end_line": 408,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#411",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function()",
        "snippet": "    def my_function():\n        bad = Bad()",
        "begin_line": 411,
        "end_line": 412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_depth#432",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_depth()",
        "snippet": "def test_depth():\n    string_io = io.StringIO()\n\n    def f4(x4):\n        result4 = x4 * 2\n        return result4\n\n    def f3(x3):\n        result3 = f4(x3)\n        return result3\n\n    def f2(x2):\n        result2 = f3(x2)\n        return result2\n\n    @pysnooper.snoop(string_io, depth=3)\n    def f1(x1):\n        result1 = f2(x1)\n        return result1\n\n    result = f1(10)\n    assert result == 20\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry('def f1(x1):'),\n            LineEntry(),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry('def f2(x2):'),\n            LineEntry(),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry('def f3(x3):'),\n            LineEntry(),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('20'),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('20'),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('20'),\n        )\n    )",
        "begin_line": 432,
        "end_line": 488,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f4#435",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f4(x4)",
        "snippet": "    def f4(x4):\n        result4 = x4 * 2\n        return result4",
        "begin_line": 435,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f3#439",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f3(x3)",
        "snippet": "    def f3(x3):\n        result3 = f4(x3)\n        return result3",
        "begin_line": 439,
        "end_line": 441,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f2#443",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f2(x2)",
        "snippet": "    def f2(x2):\n        result2 = f3(x2)\n        return result2",
        "begin_line": 443,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f1#448",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f1(x1)",
        "snippet": "    def f1(x1):\n        result1 = f2(x1)\n        return result1",
        "begin_line": 448,
        "end_line": 450,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_method_and_prefix#491",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_method_and_prefix()",
        "snippet": "def test_method_and_prefix():\n    class Baz(object):\n        def __init__(self):\n            self.x = 2\n\n        @pysnooper.snoop(watch=('self.x',), prefix='ZZZ')\n        def square(self):\n            foo = 7\n            self.x **= 2\n            return self\n\n    baz = Baz()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = baz.square()\n    assert result is baz\n    assert result.x == 4\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('self', prefix='ZZZ'),\n            VariableEntry('self.x', '2', prefix='ZZZ'),\n            CallEntry('def square(self):', prefix='ZZZ'),\n            LineEntry('foo = 7', prefix='ZZZ'),\n            VariableEntry('foo', '7', prefix='ZZZ'),\n            LineEntry('self.x **= 2', prefix='ZZZ'),\n            VariableEntry('self.x', '4', prefix='ZZZ'),\n            LineEntry(prefix='ZZZ'),\n            ReturnEntry(prefix='ZZZ'),\n            ReturnValueEntry(prefix='ZZZ'),\n        ),\n        prefix='ZZZ'\n    )",
        "begin_line": 491,
        "end_line": 525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.test_method_and_prefix#491",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.test_method_and_prefix()",
        "snippet": "def test_method_and_prefix():\n    class Baz(object):\n        def __init__(self):\n            self.x = 2\n\n        @pysnooper.snoop(watch=('self.x',), prefix='ZZZ')\n        def square(self):\n            foo = 7\n            self.x **= 2\n            return self\n\n    baz = Baz()\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = baz.square()\n    assert result is baz\n    assert result.x == 4\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('self', prefix='ZZZ'),\n            VariableEntry('self.x', '2', prefix='ZZZ'),\n            CallEntry('def square(self):', prefix='ZZZ'),\n            LineEntry('foo = 7', prefix='ZZZ'),\n            VariableEntry('foo', '7', prefix='ZZZ'),\n            LineEntry('self.x **= 2', prefix='ZZZ'),\n            VariableEntry('self.x', '4', prefix='ZZZ'),\n            LineEntry(prefix='ZZZ'),\n            ReturnEntry(prefix='ZZZ'),\n            ReturnValueEntry(prefix='ZZZ'),\n        ),\n        prefix='ZZZ'\n    )",
        "begin_line": 491,
        "end_line": 525,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.__init__#493",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.__init__(self)",
        "snippet": "        def __init__(self):\n            self.x = 2",
        "begin_line": 493,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.Baz.square#497",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper.Baz",
        "signature": "tests.test_pysnooper.Baz.square(self)",
        "snippet": "        def square(self):\n            foo = 7\n            self.x **= 2\n            return self",
        "begin_line": 497,
        "end_line": 500,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_file_output#528",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_file_output()",
        "snippet": "def test_file_output():\n    with mini_toolbox.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n\n        @pysnooper.snoop(path)\n        def my_function(_foo):\n            x = 7\n            y = 8\n            return y + x\n\n        result = my_function('baba')\n        assert result == 15\n        with path.open() as output_file:\n            output = output_file.read()\n        assert_output(\n            output,\n            (\n                VariableEntry('_foo', value_regex=\"u?'baba'\"),\n                CallEntry('def my_function(_foo):'),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n                ReturnValueEntry('15'),\n            )\n        )",
        "begin_line": 528,
        "end_line": 555,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#533",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(_foo)",
        "snippet": "        def my_function(_foo):\n            x = 7\n            y = 8\n            return y + x",
        "begin_line": 533,
        "end_line": 536,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_confusing_decorator_lines#558",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_confusing_decorator_lines()",
        "snippet": "def test_confusing_decorator_lines():\n    string_io = io.StringIO()\n\n    def empty_decorator(function):\n        return function\n\n    @empty_decorator\n    @pysnooper.snoop(string_io,\n                     depth=2)  # Multi-line decorator for extra confusion!\n    @empty_decorator\n    @empty_decorator\n    def my_function(foo):\n        x = lambda bar: 7\n        y = 8\n        return y + x(foo)\n\n    result = my_function('baba')\n    assert result == 15\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('foo', value_regex=\"u?'baba'\"),\n            CallEntry('def my_function(foo):'),\n            LineEntry(),\n            VariableEntry(),\n            LineEntry(),\n            VariableEntry(),\n            LineEntry(),\n            # inside lambda\n            VariableEntry('bar', value_regex=\"u?'baba'\"),\n            CallEntry('x = lambda bar: 7'),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('7'),\n            # back in my_function\n            ReturnEntry(),\n            ReturnValueEntry('15'),\n        )\n    )",
        "begin_line": 558,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.empty_decorator#561",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.empty_decorator(function)",
        "snippet": "    def empty_decorator(function):\n        return function",
        "begin_line": 561,
        "end_line": 562,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#569",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = lambda bar: 7\n        y = 8\n        return y + x(foo)",
        "begin_line": 569,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_lambda#600",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_lambda()",
        "snippet": "def test_lambda():\n    string_io = io.StringIO()\n    my_function = pysnooper.snoop(string_io)(lambda x: x ** 2)\n    result = my_function(7)\n    assert result == 49\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('x', '7'),\n            CallEntry(source_regex='^my_function = pysnooper.*'),\n            LineEntry(source_regex='^my_function = pysnooper.*'),\n            ReturnEntry(source_regex='^my_function = pysnooper.*'),\n            ReturnValueEntry('49'),\n        )\n    )",
        "begin_line": 600,
        "end_line": 615,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_unavailable_source#618",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_unavailable_source()",
        "snippet": "def test_unavailable_source():\n    with mini_toolbox.create_temp_folder(prefix='pysnooper') as folder, \\\n                                    mini_toolbox.TempSysPathAdder(str(folder)):\n        module_name = 'iaerojajsijf'\n        python_file_path = folder / ('%s.py' % (module_name,))\n        content = textwrap.dedent(u'''\n            import pysnooper\n            @pysnooper.snoop()\n            def f(x):\n                return x\n        ''')\n        with python_file_path.open('w') as python_file:\n            python_file.write(content)\n        module = __import__(module_name)\n        python_file_path.unlink()\n        with mini_toolbox.OutputCapturer(stdout=False,\n                                         stderr=True) as output_capturer:\n            result = getattr(module, 'f')(7)\n        assert result == 7\n        output = output_capturer.output\n        assert_output(\n            output,\n            (\n                VariableEntry(stage='starting'),\n                CallEntry('SOURCE IS UNAVAILABLE'),\n                LineEntry('SOURCE IS UNAVAILABLE'),\n                ReturnEntry('SOURCE IS UNAVAILABLE'),\n                ReturnValueEntry('7'),\n            )\n        )",
        "begin_line": 618,
        "end_line": 647,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_no_overwrite_by_default#650",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_no_overwrite_by_default()",
        "snippet": "def test_no_overwrite_by_default():\n    with mini_toolbox.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n        with path.open('w') as output_file:\n            output_file.write(u'lala')\n        @pysnooper.snoop(str(path))\n        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x\n        result = my_function('baba')\n        assert result == 15\n        with path.open() as output_file:\n            output = output_file.read()\n        assert output.startswith('lala')\n        shortened_output = output[4:]\n        assert_output(\n            shortened_output,\n            (\n                VariableEntry('foo', value_regex=\"u?'baba'\"),\n                CallEntry('def my_function(foo):'),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n                ReturnValueEntry('15'),\n            )\n        )",
        "begin_line": 650,
        "end_line": 679,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#656",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x",
        "begin_line": 656,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_overwrite#682",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_overwrite()",
        "snippet": "def test_overwrite():\n    with mini_toolbox.create_temp_folder(prefix='pysnooper') as folder:\n        path = folder / 'foo.log'\n        with path.open('w') as output_file:\n            output_file.write(u'lala')\n        @pysnooper.snoop(str(path), overwrite=True)\n        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x\n        result = my_function('baba')\n        result = my_function('baba')\n        assert result == 15\n        with path.open() as output_file:\n            output = output_file.read()\n        assert 'lala' not in output\n        assert_output(\n            output,\n            (\n                VariableEntry('foo', value_regex=\"u?'baba'\"),\n                CallEntry('def my_function(foo):'),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n                ReturnValueEntry('15'),\n\n                VariableEntry('foo', value_regex=\"u?'baba'\"),\n                CallEntry('def my_function(foo):'),\n                LineEntry('x = 7'),\n                VariableEntry('x', '7'),\n                LineEntry('y = 8'),\n                VariableEntry('y', '8'),\n                LineEntry('return y + x'),\n                ReturnEntry('return y + x'),\n                ReturnValueEntry('15'),\n            )\n        )",
        "begin_line": 682,
        "end_line": 721,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#688",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "        def my_function(foo):\n            x = 7\n            y = 8\n            return y + x",
        "begin_line": 688,
        "end_line": 691,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_error_in_overwrite_argument#724",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_error_in_overwrite_argument()",
        "snippet": "def test_error_in_overwrite_argument():\n    with mini_toolbox.create_temp_folder(prefix='pysnooper') as folder:\n        with pytest.raises(Exception, match='can only be used when writing'):\n            @pysnooper.snoop(overwrite=True)\n            def my_function(foo):\n                x = 7\n                y = 8\n                return y + x",
        "begin_line": 724,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#728",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "            def my_function(foo):\n                x = 7\n                y = 8\n                return y + x",
        "begin_line": 728,
        "end_line": 731,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_needs_parentheses#734",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_needs_parentheses()",
        "snippet": "def test_needs_parentheses():\n    assert not needs_parentheses('x')\n    assert not needs_parentheses('x.y')\n    assert not needs_parentheses('x.y.z')\n    assert not needs_parentheses('x.y.z[0]')\n    assert not needs_parentheses('x.y.z[0]()')\n    assert not needs_parentheses('x.y.z[0]()(3, 4 * 5)')\n    assert not needs_parentheses('foo(x)')\n    assert not needs_parentheses('foo(x+y)')\n    assert not needs_parentheses('(x+y)')\n    assert not needs_parentheses('[x+1 for x in ()]')\n    assert needs_parentheses('x + y')\n    assert needs_parentheses('x * y')\n    assert needs_parentheses('x and y')\n    assert needs_parentheses('x if z else y')",
        "begin_line": 734,
        "end_line": 748,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_with_block#751",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_with_block()",
        "snippet": "def test_with_block():\n    # Testing that a single Tracer can handle many mixed uses\n    snoop = pysnooper.snoop()\n\n    def foo(x):\n        if x == 0:\n            bar1(x)\n            qux()\n            return\n\n        with snoop:\n            # There should be line entries for these three lines,\n            # no line entries for anything else in this function,\n            # but calls to all bar functions should be traced\n            foo(x - 1)\n            bar2(x)\n            qux()\n        int(4)\n        bar3(9)\n        return x\n\n    @snoop\n    def bar1(_x):\n        qux()\n\n    @snoop\n    def bar2(_x):\n        qux()\n\n    @snoop\n    def bar3(_x):\n        qux()\n\n    def qux():\n        return 9  # not traced, mustn't show up\n\n    with mini_toolbox.OutputCapturer(stdout=False,\n                                     stderr=True) as output_capturer:\n        result = foo(2)\n    assert result == 2\n    output = output_capturer.string_io.getvalue()\n    assert_output(\n        output,\n        (\n            # In first with\n            VariableEntry('x', '2'),\n            VariableEntry('bar1'),\n            VariableEntry('bar2'),\n            VariableEntry('bar3'),\n            VariableEntry('foo'),\n            VariableEntry('qux'),\n            VariableEntry('snoop'),\n            LineEntry('foo(x - 1)'),\n\n            # In with in recursive call\n            VariableEntry('x', '1'),\n            VariableEntry('bar1'),\n            VariableEntry('bar2'),\n            VariableEntry('bar3'),\n            VariableEntry('foo'),\n            VariableEntry('qux'),\n            VariableEntry('snoop'),\n            LineEntry('foo(x - 1)'),\n\n            # Call to bar1 from if block outside with\n            VariableEntry('_x', '0'),\n            VariableEntry('qux'),\n            CallEntry('def bar1(_x):'),\n            LineEntry('qux()'),\n            ReturnEntry('qux()'),\n            ReturnValueEntry('None'),\n\n            # In with in recursive call\n            LineEntry('bar2(x)'),\n\n            # Call to bar2 from within with\n            VariableEntry('_x', '1'),\n            VariableEntry('qux'),\n            CallEntry('def bar2(_x):'),\n            LineEntry('qux()'),\n            ReturnEntry('qux()'),\n            ReturnValueEntry('None'),\n\n            # In with in recursive call\n            LineEntry('qux()'),\n\n            # Call to bar3 from after with\n            VariableEntry('_x', '9'),\n            VariableEntry('qux'),\n            CallEntry('def bar3(_x):'),\n            LineEntry('qux()'),\n            ReturnEntry('qux()'),\n            ReturnValueEntry('None'),\n\n            # -- Similar to previous few sections,\n            # -- but from first call to foo\n\n            # In with in first call\n            LineEntry('bar2(x)'),\n\n            # Call to bar2 from within with\n            VariableEntry('_x', '2'),\n            VariableEntry('qux'),\n            CallEntry('def bar2(_x):'),\n            LineEntry('qux()'),\n            ReturnEntry('qux()'),\n            ReturnValueEntry('None'),\n\n            # In with in first call\n            LineEntry('qux()'),\n\n            # Call to bar3 from after with\n            VariableEntry('_x', '9'),\n            VariableEntry('qux'),\n            CallEntry('def bar3(_x):'),\n            LineEntry('qux()'),\n            ReturnEntry('qux()'),\n            ReturnValueEntry('None'),\n        ),\n    )",
        "begin_line": 751,
        "end_line": 870,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.foo#755",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.foo(x)",
        "snippet": "    def foo(x):\n        if x == 0:\n            bar1(x)\n            qux()\n            return\n\n        with snoop:\n            # There should be line entries for these three lines,\n            # no line entries for anything else in this function,\n            # but calls to all bar functions should be traced\n            foo(x - 1)\n            bar2(x)\n            qux()\n        int(4)\n        bar3(9)\n        return x",
        "begin_line": 755,
        "end_line": 770,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.bar1#773",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.bar1(_x)",
        "snippet": "    def bar1(_x):\n        qux()",
        "begin_line": 773,
        "end_line": 774,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.bar2#777",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.bar2(_x)",
        "snippet": "    def bar2(_x):\n        qux()",
        "begin_line": 777,
        "end_line": 778,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.bar3#781",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.bar3(_x)",
        "snippet": "    def bar3(_x):\n        qux()",
        "begin_line": 781,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.qux#784",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.qux()",
        "snippet": "    def qux():\n        return 9  # not traced, mustn't show up",
        "begin_line": 784,
        "end_line": 785,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_with_block_depth#873",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_with_block_depth()",
        "snippet": "def test_with_block_depth():\n    string_io = io.StringIO()\n\n    def f4(x4):\n        result4 = x4 * 2\n        return result4\n\n    def f3(x3):\n        result3 = f4(x3)\n        return result3\n\n    def f2(x2):\n        result2 = f3(x2)\n        return result2\n\n    def f1(x1):\n        str(3)\n        with pysnooper.snoop(string_io, depth=3):\n            result1 = f2(x1)\n        return result1\n\n    result = f1(10)\n    assert result == 20\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            LineEntry('result1 = f2(x1)'),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry('def f2(x2):'),\n            LineEntry(),\n\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry('def f3(x3):'),\n            LineEntry(),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('20'),\n\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('20'),\n        )\n    )",
        "begin_line": 873,
        "end_line": 925,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f4#876",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f4(x4)",
        "snippet": "    def f4(x4):\n        result4 = x4 * 2\n        return result4",
        "begin_line": 876,
        "end_line": 878,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f3#880",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f3(x3)",
        "snippet": "    def f3(x3):\n        result3 = f4(x3)\n        return result3",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f2#884",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f2(x2)",
        "snippet": "    def f2(x2):\n        result2 = f3(x2)\n        return result2",
        "begin_line": 884,
        "end_line": 886,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f1#888",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f1(x1)",
        "snippet": "    def f1(x1):\n        str(3)\n        with pysnooper.snoop(string_io, depth=3):\n            result1 = f2(x1)\n        return result1",
        "begin_line": 888,
        "end_line": 892,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_cellvars#927",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_cellvars()",
        "snippet": "def test_cellvars():\n    string_io = io.StringIO()\n\n    def f2(a):\n        def f3(a):\n            x = 0\n            x += 1\n            def f4(a):\n                y = x\n                return 42\n            return f4(a)\n        return f3(a)\n\n    def f1(a):\n        with pysnooper.snoop(string_io, depth=4):\n            result1 = f2(a)\n        return result1\n\n    result = f1(42)\n    assert result == 42\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            LineEntry('result1 = f2(a)'),\n\n            VariableEntry(),\n            CallEntry('def f2(a):'),\n            LineEntry(),\n            VariableEntry(),\n            LineEntry(),\n\n            VariableEntry(\"a\"),\n            CallEntry('def f3(a):'),\n            LineEntry(),\n            VariableEntry(\"x\"),\n            LineEntry(),\n            VariableEntry(\"x\"),\n            LineEntry(),\n            VariableEntry(),\n\n            LineEntry(),\n            VariableEntry(),\n            VariableEntry(\"x\"),\n            CallEntry('def f4(a):'),\n            LineEntry(),\n            VariableEntry(),\n            LineEntry(),\n\n            ReturnEntry(),\n            ReturnValueEntry(),\n            ReturnEntry(),\n            ReturnValueEntry(),\n            ReturnEntry(),\n            ReturnValueEntry(),\n        )\n    )",
        "begin_line": 927,
        "end_line": 986,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f2#930",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f2(a)",
        "snippet": "    def f2(a):\n        def f3(a):\n            x = 0\n            x += 1\n            def f4(a):\n                y = x\n                return 42\n            return f4(a)\n        return f3(a)",
        "begin_line": 930,
        "end_line": 938,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f3#931",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f3(a)",
        "snippet": "        def f3(a):\n            x = 0\n            x += 1\n            def f4(a):\n                y = x\n                return 42\n            return f4(a)",
        "begin_line": 931,
        "end_line": 937,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f4#934",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f4(a)",
        "snippet": "            def f4(a):\n                y = x\n                return 42",
        "begin_line": 934,
        "end_line": 936,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f1#940",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f1(a)",
        "snippet": "    def f1(a):\n        with pysnooper.snoop(string_io, depth=4):\n            result1 = f2(a)\n        return result1",
        "begin_line": 940,
        "end_line": 943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_var_order#988",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_var_order()",
        "snippet": "def test_var_order():\n    string_io = io.StringIO()\n\n    def f(one, two, three, four):\n        five = None\n        six = None\n        seven = None\n\n        five, six, seven = 5, 6, 7\n\n    with pysnooper.snoop(string_io, depth=2):\n        result = f(1, 2, 3, 4)\n\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry(),\n            VariableEntry(),\n\n            LineEntry('result = f(1, 2, 3, 4)'),\n            VariableEntry(\"one\", \"1\"),\n            VariableEntry(\"two\", \"2\"),\n            VariableEntry(\"three\", \"3\"),\n            VariableEntry(\"four\", \"4\"),\n\n            CallEntry('def f(one, two, three, four):'),\n            LineEntry(),\n            VariableEntry(\"five\"),\n            LineEntry(),\n            VariableEntry(\"six\"),\n            LineEntry(),\n            VariableEntry(\"seven\"),\n            LineEntry(),\n            VariableEntry(\"five\", \"5\"),\n            VariableEntry(\"six\", \"6\"),\n            VariableEntry(\"seven\", \"7\"),\n            ReturnEntry(),\n            ReturnValueEntry(),\n        )\n    )",
        "begin_line": 988,
        "end_line": 1028,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f#991",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f(one, two, three, four)",
        "snippet": "    def f(one, two, three, four):\n        five = None\n        six = None\n        seven = None\n\n        five, six, seven = 5, 6, 7",
        "begin_line": 991,
        "end_line": 996,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_truncate#1032",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_truncate()",
        "snippet": "def test_truncate():\n    max_length = 20\n    for i in range(max_length * 2):\n        string = i * 'a'\n        truncated = truncate(string, max_length)\n        if len(string) <= max_length:\n            assert string == truncated\n        else:\n            assert truncated == 'aaaaaaaa...aaaaaaaaa'\n            assert len(truncated) == max_length",
        "begin_line": 1032,
        "end_line": 1041,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_indentation#1044",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_indentation()",
        "snippet": "def test_indentation():\n    from .samples import indentation, recursion\n    assert_sample_output(indentation)\n    assert_sample_output(recursion)",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_exception#1050",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_exception()",
        "snippet": "def test_exception():\n    from .samples import exception\n    assert_sample_output(exception)",
        "begin_line": 1050,
        "end_line": 1052,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_generator#1055",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_generator()",
        "snippet": "def test_generator():\n    string_io = io.StringIO()\n    original_tracer = sys.gettrace()\n    original_tracer_active = lambda: (sys.gettrace() is original_tracer)\n\n\n    @pysnooper.snoop(string_io)\n    def f(x1):\n        assert not original_tracer_active()\n        x2 = (yield x1)\n        assert not original_tracer_active()\n        x3 = 'foo'\n        assert not original_tracer_active()\n        x4 = (yield 2)\n        assert not original_tracer_active()\n        return\n\n\n    assert original_tracer_active()\n    generator = f(0)\n    assert original_tracer_active()\n    first_item = next(generator)\n    assert original_tracer_active()\n    assert first_item == 0\n    second_item = generator.send('blabla')\n    assert original_tracer_active()\n    assert second_item == 2\n    with pytest.raises(StopIteration) as exc_info:\n        generator.send('looloo')\n    assert original_tracer_active()\n\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('x1', '0'),\n            VariableEntry(),\n            CallEntry(),\n            LineEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('0'),\n\n            # Pause and resume:\n\n            VariableEntry('x1', '0'),\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            VariableEntry('x2', \"'blabla'\"),\n            LineEntry(),\n            LineEntry(),\n            VariableEntry('x3', \"'foo'\"),\n            LineEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('2'),\n\n            # Pause and resume:\n\n            VariableEntry('x1', '0'),\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            VariableEntry(),\n            CallEntry(),\n            VariableEntry('x4', \"'looloo'\"),\n            LineEntry(),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry(None),\n\n        )\n    )",
        "begin_line": 1055,
        "end_line": 1132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.f#1062",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.f(x1)",
        "snippet": "    def f(x1):\n        assert not original_tracer_active()\n        x2 = (yield x1)\n        assert not original_tracer_active()\n        x3 = 'foo'\n        assert not original_tracer_active()\n        x4 = (yield 2)\n        assert not original_tracer_active()\n        return",
        "begin_line": 1062,
        "end_line": 1070,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_custom_repr#1135",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_custom_repr()",
        "snippet": "def test_custom_repr():\n    string_io = io.StringIO()\n\n    def large(l):\n        return isinstance(l, list) and len(l) > 5\n\n    def print_list_size(l):\n        return 'list(size={})'.format(len(l))\n\n    def print_dict(d):\n        return 'dict(keys={})'.format(sorted(list(d.keys())))\n\n    def evil_condition(x):\n        return large(x) or isinstance(x, dict)\n\n    @pysnooper.snoop(string_io, custom_repr=(\n        (large, print_list_size),\n        (dict, print_dict),\n        (evil_condition, lambda x: 'I am evil')))\n    def sum_to_x(x):\n        l = list(range(x))\n        a = {'1': 1, '2': 2}\n        return sum(l)\n\n    result = sum_to_x(10000)\n\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('x', '10000'),\n            CallEntry(),\n            LineEntry(),\n            VariableEntry('l', 'list(size=10000)'),\n            LineEntry(),\n            VariableEntry('a', \"dict(keys=['1', '2'])\"),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('49995000'),\n        )\n    )",
        "begin_line": 1135,
        "end_line": 1175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.large#1138",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.large(l)",
        "snippet": "    def large(l):\n        return isinstance(l, list) and len(l) > 5",
        "begin_line": 1138,
        "end_line": 1139,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.print_list_size#1141",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.print_list_size(l)",
        "snippet": "    def print_list_size(l):\n        return 'list(size={})'.format(len(l))",
        "begin_line": 1141,
        "end_line": 1142,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.print_dict#1144",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.print_dict(d)",
        "snippet": "    def print_dict(d):\n        return 'dict(keys={})'.format(sorted(list(d.keys())))",
        "begin_line": 1144,
        "end_line": 1145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.evil_condition#1147",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.evil_condition(x)",
        "snippet": "    def evil_condition(x):\n        return large(x) or isinstance(x, dict)",
        "begin_line": 1147,
        "end_line": 1148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.sum_to_x#1154",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.sum_to_x(x)",
        "snippet": "    def sum_to_x(x):\n        l = list(range(x))\n        a = {'1': 1, '2': 2}\n        return sum(l)",
        "begin_line": 1154,
        "end_line": 1157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_custom_repr_single#1177",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_custom_repr_single()",
        "snippet": "def test_custom_repr_single():\n    string_io = io.StringIO()\n\n    @pysnooper.snoop(string_io, custom_repr=(list, lambda l: 'foofoo!'))\n    def sum_to_x(x):\n        l = list(range(x))\n        return 7\n\n    result = sum_to_x(10000)\n\n    output = string_io.getvalue()\n    assert_output(\n        output,\n        (\n            VariableEntry('x', '10000'),\n            CallEntry(),\n            LineEntry(),\n            VariableEntry('l', 'foofoo!'),\n            LineEntry(),\n            ReturnEntry(),\n            ReturnValueEntry('7'),\n        )\n    )",
        "begin_line": 1177,
        "end_line": 1199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.sum_to_x#1181",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.sum_to_x(x)",
        "snippet": "    def sum_to_x(x):\n        l = list(range(x))\n        return 7",
        "begin_line": 1181,
        "end_line": 1183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.test_disable#1202",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.test_disable()",
        "snippet": "def test_disable():\n    string_io = io.StringIO()\n\n    def my_function(foo):\n        x = 7\n        y = 8\n        return x + y\n\n    with mini_toolbox.TempValueSetter((pysnooper.tracer, 'DISABLED'), True):\n        with pysnooper.snoop(string_io):\n            result = my_function('baba')\n    output = string_io.getvalue()\n    assert not output",
        "begin_line": 1202,
        "end_line": 1214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_pysnooper.my_function#1205",
        "src_path": "tests/test_pysnooper.py",
        "class_name": "tests.test_pysnooper",
        "signature": "tests.test_pysnooper.my_function(foo)",
        "snippet": "    def my_function(foo):\n        x = 7\n        y = 8\n        return x + y",
        "begin_line": 1205,
        "end_line": 1208,
        "comment": "",
        "is_bug": false
    }
]