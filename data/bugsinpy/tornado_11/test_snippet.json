[
    {
        "name": "tornado.test.httpserver_test.read_stream_body#30",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test",
        "signature": "tornado.test.httpserver_test.read_stream_body(stream, callback)",
        "snippet": "def read_stream_body(stream, callback):\n    \"\"\"Reads an HTTP response from `stream` and runs callback with its\n    headers and body.\"\"\"\n    chunks = []\n\n    class Delegate(HTTPMessageDelegate):\n        def headers_received(self, start_line, headers):\n            self.headers = headers\n\n        def data_received(self, chunk):\n            chunks.append(chunk)\n\n        def finish(self):\n            callback((self.headers, b''.join(chunks)))\n    conn = HTTP1Connection(stream, True)\n    conn.read_response(Delegate())",
        "begin_line": 30,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Delegate.read_stream_body#30",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Delegate",
        "signature": "tornado.test.httpserver_test.Delegate.read_stream_body(stream, callback)",
        "snippet": "def read_stream_body(stream, callback):\n    \"\"\"Reads an HTTP response from `stream` and runs callback with its\n    headers and body.\"\"\"\n    chunks = []\n\n    class Delegate(HTTPMessageDelegate):\n        def headers_received(self, start_line, headers):\n            self.headers = headers\n\n        def data_received(self, chunk):\n            chunks.append(chunk)\n\n        def finish(self):\n            callback((self.headers, b''.join(chunks)))\n    conn = HTTP1Connection(stream, True)\n    conn.read_response(Delegate())",
        "begin_line": 30,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Delegate.headers_received#36",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Delegate",
        "signature": "tornado.test.httpserver_test.Delegate.headers_received(self, start_line, headers)",
        "snippet": "        def headers_received(self, start_line, headers):\n            self.headers = headers",
        "begin_line": 36,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Delegate.data_received#39",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Delegate",
        "signature": "tornado.test.httpserver_test.Delegate.data_received(self, chunk)",
        "snippet": "        def data_received(self, chunk):\n            chunks.append(chunk)",
        "begin_line": 39,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Delegate.finish#42",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Delegate",
        "signature": "tornado.test.httpserver_test.Delegate.finish(self)",
        "snippet": "        def finish(self):\n            callback((self.headers, b''.join(chunks)))",
        "begin_line": 42,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HandlerBaseTestCase.get_app#49",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HandlerBaseTestCase",
        "signature": "tornado.test.httpserver_test.HandlerBaseTestCase.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', self.__class__.Handler)])",
        "begin_line": 49,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HandlerBaseTestCase.fetch_json#52",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HandlerBaseTestCase",
        "signature": "tornado.test.httpserver_test.HandlerBaseTestCase.fetch_json(self, *args, **kwargs)",
        "snippet": "    def fetch_json(self, *args, **kwargs):\n        response = self.fetch(*args, **kwargs)\n        response.rethrow()\n        return json_decode(response.body)",
        "begin_line": 52,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloWorldRequestHandler.initialize#59",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloWorldRequestHandler",
        "signature": "tornado.test.httpserver_test.HelloWorldRequestHandler.initialize(self, protocol='http')",
        "snippet": "    def initialize(self, protocol=\"http\"):\n        self.expected_protocol = protocol",
        "begin_line": 59,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloWorldRequestHandler.get#62",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloWorldRequestHandler",
        "signature": "tornado.test.httpserver_test.HelloWorldRequestHandler.get(self)",
        "snippet": "    def get(self):\n        if self.request.protocol != self.expected_protocol:\n            raise Exception(\"unexpected protocol\")\n        self.finish(\"Hello world\")",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloWorldRequestHandler.post#67",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloWorldRequestHandler",
        "signature": "tornado.test.httpserver_test.HelloWorldRequestHandler.post(self)",
        "snippet": "    def post(self):\n        self.finish(\"Got %d bytes in POST\" % len(self.request.body))",
        "begin_line": 67,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BaseSSLTest.get_app#82",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BaseSSLTest",
        "signature": "tornado.test.httpserver_test.BaseSSLTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', HelloWorldRequestHandler,\n                             dict(protocol=\"https\"))])",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.get_ssl_options#88",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.get_ssl_options(self)",
        "snippet": "    def get_ssl_options(self):\n        return dict(ssl_version=self.get_ssl_version(),  # type: ignore\n                    **AsyncHTTPSTestCase.get_ssl_options())",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.get_ssl_version#92",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.get_ssl_version(self)",
        "snippet": "    def get_ssl_version(self):\n        raise NotImplementedError()",
        "begin_line": 92,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.test_ssl#95",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.test_ssl(self)",
        "snippet": "    def test_ssl(self):\n        response = self.fetch('/')\n        self.assertEqual(response.body, b\"Hello world\")",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.test_large_post#99",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.test_large_post(self)",
        "snippet": "    def test_large_post(self):\n        response = self.fetch('/',\n                              method='POST',\n                              body='A' * 5000)\n        self.assertEqual(response.body, b\"Got 5000 bytes in POST\")",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.test_non_ssl_request#105",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.test_non_ssl_request(self)",
        "snippet": "    def test_non_ssl_request(self):\n        # Make sure the server closes the connection when it gets a non-ssl\n        # connection, rather than waiting for a timeout or otherwise\n        # misbehaving.\n        with ExpectLog(gen_log, '(SSL Error|uncaught exception)'):\n            with ExpectLog(gen_log, 'Uncaught exception', required=False):\n                self.http_client.fetch(\n                    self.get_url(\"/\").replace('https:', 'http:'),\n                    self.stop,\n                    request_timeout=3600,\n                    connect_timeout=3600)\n                response = self.wait()\n        self.assertEqual(response.code, 599)",
        "begin_line": 105,
        "end_line": 117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLTestMixin.test_error_logging#119",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLTestMixin",
        "signature": "tornado.test.httpserver_test.SSLTestMixin.test_error_logging(self)",
        "snippet": "    def test_error_logging(self):\n        # No stack traces are logged for SSL errors.\n        with ExpectLog(gen_log, 'SSL Error') as expect_log:\n            self.http_client.fetch(\n                self.get_url(\"/\").replace(\"https:\", \"http:\"),\n                self.stop)\n            response = self.wait()\n            self.assertEqual(response.code, 599)\n        self.assertFalse(expect_log.logged_stack)",
        "begin_line": 119,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLv23Test.get_ssl_version#136",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLv23Test",
        "signature": "tornado.test.httpserver_test.SSLv23Test.get_ssl_version(self)",
        "snippet": "    def get_ssl_version(self):\n        return ssl.PROTOCOL_SSLv23",
        "begin_line": 136,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLv3Test.get_ssl_version#142",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLv3Test",
        "signature": "tornado.test.httpserver_test.SSLv3Test.get_ssl_version(self)",
        "snippet": "    def get_ssl_version(self):\n        return ssl.PROTOCOL_SSLv3",
        "begin_line": 142,
        "end_line": 143,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.TLSv1Test.get_ssl_version#148",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.TLSv1Test",
        "signature": "tornado.test.httpserver_test.TLSv1Test.get_ssl_version(self)",
        "snippet": "    def get_ssl_version(self):\n        return ssl.PROTOCOL_TLSv1",
        "begin_line": 148,
        "end_line": 149,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLContextTest.get_ssl_options#154",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLContextTest",
        "signature": "tornado.test.httpserver_test.SSLContextTest.get_ssl_options(self)",
        "snippet": "    def get_ssl_options(self):\n        context = ssl_options_to_context(\n            AsyncHTTPSTestCase.get_ssl_options(self))\n        assert isinstance(context, ssl.SSLContext)\n        return context",
        "begin_line": 154,
        "end_line": 158,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_arguments#162",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BadSSLOptionsTest",
        "signature": "tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_arguments(self)",
        "snippet": "    def test_missing_arguments(self):\n        application = Application()\n        self.assertRaises(KeyError, HTTPServer, application, ssl_options={\n            \"keyfile\": \"/__missing__.crt\",\n        })",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_key#168",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BadSSLOptionsTest",
        "signature": "tornado.test.httpserver_test.BadSSLOptionsTest.test_missing_key(self)",
        "snippet": "    def test_missing_key(self):\n        \"\"\"A missing SSL key should cause an immediate exception.\"\"\"\n\n        application = Application()\n        module_dir = os.path.dirname(__file__)\n        existing_certificate = os.path.join(module_dir, 'test.crt')\n        existing_key = os.path.join(module_dir, 'test.key')\n\n        self.assertRaises((ValueError, IOError),\n                          HTTPServer, application, ssl_options={\n                              \"certfile\": \"/__mising__.crt\",\n        })\n        self.assertRaises((ValueError, IOError),\n                          HTTPServer, application, ssl_options={\n                              \"certfile\": existing_certificate,\n                              \"keyfile\": \"/__missing__.key\"\n        })\n\n        # This actually works because both files exist\n        HTTPServer(application, ssl_options={\n                   \"certfile\": existing_certificate,\n                   \"keyfile\": existing_key,\n                   })",
        "begin_line": 168,
        "end_line": 190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MultipartTestHandler.post#194",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MultipartTestHandler",
        "signature": "tornado.test.httpserver_test.MultipartTestHandler.post(self)",
        "snippet": "    def post(self):\n        self.finish({\"header\": self.request.headers[\"X-Header-Encoding-Test\"],\n                     \"argument\": self.get_argument(\"argument\"),\n                     \"filename\": self.request.files[\"files\"][0].filename,\n                     \"filebody\": _unicode(self.request.files[\"files\"][0][\"body\"]),\n                     })",
        "begin_line": 194,
        "end_line": 199,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.get_handlers#204",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.get_handlers(self)",
        "snippet": "    def get_handlers(self):\n        return [(\"/multipart\", MultipartTestHandler),\n                (\"/hello\", HelloWorldRequestHandler)]",
        "begin_line": 204,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.get_app#208",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application(self.get_handlers())",
        "begin_line": 208,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.raw_fetch#211",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.raw_fetch(self, headers, body, newline=b'\\r\\n')",
        "snippet": "    def raw_fetch(self, headers, body, newline=b\"\\r\\n\"):\n        with closing(IOStream(socket.socket())) as stream:\n            stream.connect(('127.0.0.1', self.get_http_port()), self.stop)\n            self.wait()\n            stream.write(\n                newline.join(headers +\n                             [utf8(\"Content-Length: %d\" % len(body))]) +\n                newline + newline + body)\n            read_stream_body(stream, self.stop)\n            headers, body = self.wait()\n            return body",
        "begin_line": 211,
        "end_line": 221,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.test_multipart_form#223",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.test_multipart_form(self)",
        "snippet": "    def test_multipart_form(self):\n        # Encodings here are tricky:  Headers are latin1, bodies can be\n        # anything (we use utf8 by default).\n        response = self.raw_fetch([\n            b\"POST /multipart HTTP/1.0\",\n            b\"Content-Type: multipart/form-data; boundary=1234567890\",\n            b\"X-Header-encoding-test: \\xe9\",\n        ],\n            b\"\\r\\n\".join([\n                b\"Content-Disposition: form-data; name=argument\",\n                b\"\",\n                u\"\\u00e1\".encode(\"utf-8\"),\n                b\"--1234567890\",\n                u'Content-Disposition: form-data; name=\"files\"; filename=\"\\u00f3\"'.encode(\"utf8\"),\n                b\"\",\n                u\"\\u00fa\".encode(\"utf-8\"),\n                b\"--1234567890--\",\n                b\"\",\n            ]))\n        data = json_decode(response)\n        self.assertEqual(u\"\\u00e9\", data[\"header\"])\n        self.assertEqual(u\"\\u00e1\", data[\"argument\"])\n        self.assertEqual(u\"\\u00f3\", data[\"filename\"])\n        self.assertEqual(u\"\\u00fa\", data[\"filebody\"])",
        "begin_line": 223,
        "end_line": 246,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.test_newlines#248",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.test_newlines(self)",
        "snippet": "    def test_newlines(self):\n        # We support both CRLF and bare LF as line separators.\n        for newline in (b\"\\r\\n\", b\"\\n\"):\n            response = self.raw_fetch([b\"GET /hello HTTP/1.0\"], b\"\",\n                                      newline=newline)\n            self.assertEqual(response, b'Hello world')",
        "begin_line": 248,
        "end_line": 253,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPConnectionTest.test_100_continue#255",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPConnectionTest",
        "signature": "tornado.test.httpserver_test.HTTPConnectionTest.test_100_continue(self)",
        "snippet": "    def test_100_continue(self):\n        # Run through a 100-continue interaction by hand:\n        # When given Expect: 100-continue, we get a 100 response after the\n        # headers, and then the real response after the body.\n        stream = IOStream(socket.socket(), io_loop=self.io_loop)\n        stream.connect((\"127.0.0.1\", self.get_http_port()), callback=self.stop)\n        self.wait()\n        stream.write(b\"\\r\\n\".join([b\"POST /hello HTTP/1.1\",\n                                   b\"Content-Length: 1024\",\n                                   b\"Expect: 100-continue\",\n                                   b\"Connection: close\",\n                                   b\"\\r\\n\"]), callback=self.stop)\n        self.wait()\n        stream.read_until(b\"\\r\\n\\r\\n\", self.stop)\n        data = self.wait()\n        self.assertTrue(data.startswith(b\"HTTP/1.1 100 \"), data)\n        stream.write(b\"a\" * 1024)\n        stream.read_until(b\"\\r\\n\", self.stop)\n        first_line = self.wait()\n        self.assertTrue(first_line.startswith(b\"HTTP/1.1 200\"), first_line)\n        stream.read_until(b\"\\r\\n\\r\\n\", self.stop)\n        header_data = self.wait()\n        headers = HTTPHeaders.parse(native_str(header_data.decode('latin1')))\n        stream.read_bytes(int(headers[\"Content-Length\"]), self.stop)\n        body = self.wait()\n        self.assertEqual(body, b\"Got 1024 bytes in POST\")\n        stream.close()",
        "begin_line": 255,
        "end_line": 281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.EchoHandler.get#285",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.EchoHandler",
        "signature": "tornado.test.httpserver_test.EchoHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(recursive_unicode(self.request.arguments))",
        "begin_line": 285,
        "end_line": 286,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.EchoHandler.post#288",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.EchoHandler",
        "signature": "tornado.test.httpserver_test.EchoHandler.post(self)",
        "snippet": "    def post(self):\n        self.write(recursive_unicode(self.request.arguments))",
        "begin_line": 288,
        "end_line": 289,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.TypeCheckHandler.prepare#293",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.TypeCheckHandler",
        "signature": "tornado.test.httpserver_test.TypeCheckHandler.prepare(self)",
        "snippet": "    def prepare(self):\n        self.errors = {}\n        fields = [\n            ('method', str),\n            ('uri', str),\n            ('version', str),\n            ('remote_ip', str),\n            ('protocol', str),\n            ('host', str),\n            ('path', str),\n            ('query', str),\n        ]\n        for field, expected_type in fields:\n            self.check_type(field, getattr(self.request, field), expected_type)\n\n        self.check_type('header_key', list(self.request.headers.keys())[0], str)\n        self.check_type('header_value', list(self.request.headers.values())[0], str)\n\n        self.check_type('cookie_key', list(self.request.cookies.keys())[0], str)\n        self.check_type('cookie_value', list(self.request.cookies.values())[0].value, str)\n        # secure cookies\n\n        self.check_type('arg_key', list(self.request.arguments.keys())[0], str)\n        self.check_type('arg_value', list(self.request.arguments.values())[0][0], bytes)",
        "begin_line": 293,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.TypeCheckHandler.post#318",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.TypeCheckHandler",
        "signature": "tornado.test.httpserver_test.TypeCheckHandler.post(self)",
        "snippet": "    def post(self):\n        self.check_type('body', self.request.body, bytes)\n        self.write(self.errors)",
        "begin_line": 318,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.TypeCheckHandler.get#322",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.TypeCheckHandler",
        "signature": "tornado.test.httpserver_test.TypeCheckHandler.get(self)",
        "snippet": "    def get(self):\n        self.write(self.errors)",
        "begin_line": 322,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.TypeCheckHandler.check_type#325",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.TypeCheckHandler",
        "signature": "tornado.test.httpserver_test.TypeCheckHandler.check_type(self, name, obj, expected_type)",
        "snippet": "    def check_type(self, name, obj, expected_type):\n        actual_type = type(obj)\n        if expected_type != actual_type:\n            self.errors[name] = \"expected %s, got %s\" % (expected_type,\n                                                         actual_type)",
        "begin_line": 325,
        "end_line": 329,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.get_app#333",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([(\"/echo\", EchoHandler),\n                            (\"/typecheck\", TypeCheckHandler),\n                            (\"//doubleslash\", EchoHandler),\n                            ])",
        "begin_line": 333,
        "end_line": 337,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_query_string_encoding#339",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_query_string_encoding(self)",
        "snippet": "    def test_query_string_encoding(self):\n        response = self.fetch(\"/echo?foo=%C3%A9\")\n        data = json_decode(response.body)\n        self.assertEqual(data, {u\"foo\": [u\"\\u00e9\"]})",
        "begin_line": 339,
        "end_line": 342,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_empty_query_string#344",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_empty_query_string(self)",
        "snippet": "    def test_empty_query_string(self):\n        response = self.fetch(\"/echo?foo=&foo=\")\n        data = json_decode(response.body)\n        self.assertEqual(data, {u\"foo\": [u\"\", u\"\"]})",
        "begin_line": 344,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_empty_post_parameters#349",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_empty_post_parameters(self)",
        "snippet": "    def test_empty_post_parameters(self):\n        response = self.fetch(\"/echo\", method=\"POST\", body=\"foo=&bar=\")\n        data = json_decode(response.body)\n        self.assertEqual(data, {u\"foo\": [u\"\"], u\"bar\": [u\"\"]})",
        "begin_line": 349,
        "end_line": 352,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_types#354",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_types(self)",
        "snippet": "    def test_types(self):\n        headers = {\"Cookie\": \"foo=bar\"}\n        response = self.fetch(\"/typecheck?foo=bar\", headers=headers)\n        data = json_decode(response.body)\n        self.assertEqual(data, {})\n\n        response = self.fetch(\"/typecheck\", method=\"POST\", body=\"foo=bar\", headers=headers)\n        data = json_decode(response.body)\n        self.assertEqual(data, {})",
        "begin_line": 354,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_double_slash#364",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_double_slash(self)",
        "snippet": "    def test_double_slash(self):\n        # urlparse.urlsplit (which tornado.httpserver used to use\n        # incorrectly) would parse paths beginning with \"//\" as\n        # protocol-relative urls.\n        response = self.fetch(\"//doubleslash\")\n        self.assertEqual(200, response.code)\n        self.assertEqual(json_decode(response.body), {})",
        "begin_line": 364,
        "end_line": 370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerTest.test_malformed_body#372",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerTest",
        "signature": "tornado.test.httpserver_test.HTTPServerTest.test_malformed_body(self)",
        "snippet": "    def test_malformed_body(self):\n        # parse_qs is pretty forgiving, but it will fail on python 3\n        # if the data is not utf8.  On python 2 parse_qs will work,\n        # but then the recursive_unicode call in EchoHandler will\n        # fail.\n        if str is bytes:\n            return\n        with ExpectLog(gen_log, 'Invalid x-www-form-urlencoded body'):\n            response = self.fetch(\n                '/echo', method=\"POST\",\n                headers={'Content-Type': 'application/x-www-form-urlencoded'},\n                body=b'\\xe9')\n        self.assertEqual(200, response.code)\n        self.assertEqual(b'{}', response.body)",
        "begin_line": 372,
        "end_line": 385,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.get_app#389",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([\n            ('/echo', EchoHandler),\n        ])",
        "begin_line": 389,
        "end_line": 392,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.setUp#394",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(HTTPServerRawTest, self).setUp()\n        self.stream = IOStream(socket.socket())\n        self.stream.connect(('127.0.0.1', self.get_http_port()), self.stop)\n        self.wait()",
        "begin_line": 394,
        "end_line": 398,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.tearDown#400",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.stream.close()\n        super(HTTPServerRawTest, self).tearDown()",
        "begin_line": 400,
        "end_line": 402,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_empty_request#404",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_empty_request(self)",
        "snippet": "    def test_empty_request(self):\n        self.stream.close()\n        self.io_loop.add_timeout(datetime.timedelta(seconds=0.001), self.stop)\n        self.wait()",
        "begin_line": 404,
        "end_line": 407,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_first_line#409",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_first_line(self)",
        "snippet": "    def test_malformed_first_line(self):\n        with ExpectLog(gen_log, '.*Malformed HTTP request line'):\n            self.stream.write(b'asdf\\r\\n\\r\\n')\n            # TODO: need an async version of ExpectLog so we don't need\n            # hard-coded timeouts here.\n            self.io_loop.add_timeout(datetime.timedelta(seconds=0.01),\n                                     self.stop)\n            self.wait()",
        "begin_line": 409,
        "end_line": 416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_headers#418",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_malformed_headers(self)",
        "snippet": "    def test_malformed_headers(self):\n        with ExpectLog(gen_log, '.*Malformed HTTP headers'):\n            self.stream.write(b'GET / HTTP/1.0\\r\\nasdf\\r\\n\\r\\n')\n            self.io_loop.add_timeout(datetime.timedelta(seconds=0.01),\n                                     self.stop)\n            self.wait()",
        "begin_line": 418,
        "end_line": 423,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_body#425",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_body(self)",
        "snippet": "    def test_chunked_request_body(self):\n        # Chunked requests are not widely supported and we don't have a way\n        # to generate them in AsyncHTTPClient, but HTTPServer will read them.\n        self.stream.write(b\"\"\"\\\nPOST /echo HTTP/1.1\nTransfer-Encoding: chunked\nContent-Type: application/x-www-form-urlencoded\n\n4\nfoo=\n3\nbar\n0\n\n\"\"\".replace(b\"\\n\", b\"\\r\\n\"))\n        read_stream_body(self.stream, self.stop)\n        headers, response = self.wait()\n        self.assertEqual(json_decode(response), {u'foo': [u'bar']})",
        "begin_line": 425,
        "end_line": 442,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_uppercase#444",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_chunked_request_uppercase(self)",
        "snippet": "    def test_chunked_request_uppercase(self):\n        # As per RFC 2616 section 3.6, \"Transfer-Encoding\" header's value is\n        # case-insensitive.\n        self.stream.write(b\"\"\"\\\nPOST /echo HTTP/1.1\nTransfer-Encoding: Chunked\nContent-Type: application/x-www-form-urlencoded\n\n4\nfoo=\n3\nbar\n0\n\n\"\"\".replace(b\"\\n\", b\"\\r\\n\"))\n        read_stream_body(self.stream, self.stop)\n        headers, response = self.wait()\n        self.assertEqual(json_decode(response), {u'foo': [u'bar']})",
        "begin_line": 444,
        "end_line": 461,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HTTPServerRawTest.test_invalid_content_length#463",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HTTPServerRawTest",
        "signature": "tornado.test.httpserver_test.HTTPServerRawTest.test_invalid_content_length(self)",
        "snippet": "    def test_invalid_content_length(self):\n        with ExpectLog(gen_log, '.*Only integer Content-Length is allowed'):\n            self.stream.write(b\"\"\"\\\nPOST /echo HTTP/1.1\nContent-Length: foo\n\nbar\n\n\"\"\".replace(b\"\\n\", b\"\\r\\n\"))\n            self.stream.read_until_close(self.stop)\n            self.wait()",
        "begin_line": 463,
        "end_line": 473,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Handler.get#478",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Handler",
        "signature": "tornado.test.httpserver_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(dict(remote_ip=self.request.remote_ip,\n                            remote_protocol=self.request.protocol))",
        "begin_line": 478,
        "end_line": 480,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.XHeaderTest.get_httpserver_options#482",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.XHeaderTest",
        "signature": "tornado.test.httpserver_test.XHeaderTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(xheaders=True)",
        "begin_line": 482,
        "end_line": 483,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.XHeaderTest.test_ip_headers#485",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.XHeaderTest",
        "signature": "tornado.test.httpserver_test.XHeaderTest.test_ip_headers(self)",
        "snippet": "    def test_ip_headers(self):\n        self.assertEqual(self.fetch_json(\"/\")[\"remote_ip\"], \"127.0.0.1\")\n\n        valid_ipv4 = {\"X-Real-IP\": \"4.4.4.4\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=valid_ipv4)[\"remote_ip\"],\n            \"4.4.4.4\")\n\n        valid_ipv4_list = {\"X-Forwarded-For\": \"127.0.0.1, 4.4.4.4\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=valid_ipv4_list)[\"remote_ip\"],\n            \"4.4.4.4\")\n\n        valid_ipv6 = {\"X-Real-IP\": \"2620:0:1cfe:face:b00c::3\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=valid_ipv6)[\"remote_ip\"],\n            \"2620:0:1cfe:face:b00c::3\")\n\n        valid_ipv6_list = {\"X-Forwarded-For\": \"::1, 2620:0:1cfe:face:b00c::3\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=valid_ipv6_list)[\"remote_ip\"],\n            \"2620:0:1cfe:face:b00c::3\")\n\n        invalid_chars = {\"X-Real-IP\": \"4.4.4.4<script>\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=invalid_chars)[\"remote_ip\"],\n            \"127.0.0.1\")\n\n        invalid_chars_list = {\"X-Forwarded-For\": \"4.4.4.4, 5.5.5.5<script>\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=invalid_chars_list)[\"remote_ip\"],\n            \"127.0.0.1\")\n\n        invalid_host = {\"X-Real-IP\": \"www.google.com\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=invalid_host)[\"remote_ip\"],\n            \"127.0.0.1\")",
        "begin_line": 485,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.XHeaderTest.test_scheme_headers#523",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.XHeaderTest",
        "signature": "tornado.test.httpserver_test.XHeaderTest.test_scheme_headers(self)",
        "snippet": "    def test_scheme_headers(self):\n        self.assertEqual(self.fetch_json(\"/\")[\"remote_protocol\"], \"http\")\n\n        https_scheme = {\"X-Scheme\": \"https\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=https_scheme)[\"remote_protocol\"],\n            \"https\")\n\n        https_forwarded = {\"X-Forwarded-Proto\": \"https\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=https_forwarded)[\"remote_protocol\"],\n            \"https\")\n\n        bad_forwarded = {\"X-Forwarded-Proto\": \"unknown\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=bad_forwarded)[\"remote_protocol\"],\n            \"http\")",
        "begin_line": 523,
        "end_line": 539,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLXHeaderTest.get_app#543",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLXHeaderTest",
        "signature": "tornado.test.httpserver_test.SSLXHeaderTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', XHeaderTest.Handler)])",
        "begin_line": 543,
        "end_line": 544,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLXHeaderTest.get_httpserver_options#546",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLXHeaderTest",
        "signature": "tornado.test.httpserver_test.SSLXHeaderTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        output = super(SSLXHeaderTest, self).get_httpserver_options()\n        output['xheaders'] = True\n        return output",
        "begin_line": 546,
        "end_line": 549,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.SSLXHeaderTest.test_request_without_xprotocol#551",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.SSLXHeaderTest",
        "signature": "tornado.test.httpserver_test.SSLXHeaderTest.test_request_without_xprotocol(self)",
        "snippet": "    def test_request_without_xprotocol(self):\n        self.assertEqual(self.fetch_json(\"/\")[\"remote_protocol\"], \"https\")\n\n        http_scheme = {\"X-Scheme\": \"http\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=http_scheme)[\"remote_protocol\"], \"http\")\n\n        bad_scheme = {\"X-Scheme\": \"unknown\"}\n        self.assertEqual(\n            self.fetch_json(\"/\", headers=bad_scheme)[\"remote_protocol\"], \"https\")",
        "begin_line": 551,
        "end_line": 560,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.Handler.get#565",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.Handler",
        "signature": "tornado.test.httpserver_test.Handler.get(self)",
        "snippet": "        def get(self):\n            self.write(dict(protocol=self.request.protocol))",
        "begin_line": 565,
        "end_line": 566,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.ManualProtocolTest.get_httpserver_options#568",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.ManualProtocolTest",
        "signature": "tornado.test.httpserver_test.ManualProtocolTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(protocol='https')",
        "begin_line": 568,
        "end_line": 569,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.ManualProtocolTest.test_manual_protocol#571",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.ManualProtocolTest",
        "signature": "tornado.test.httpserver_test.ManualProtocolTest.test_manual_protocol(self)",
        "snippet": "    def test_manual_protocol(self):\n        self.assertEqual(self.fetch_json('/')['protocol'], 'https')",
        "begin_line": 571,
        "end_line": 572,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.UnixSocketTest.setUp#587",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.UnixSocketTest",
        "signature": "tornado.test.httpserver_test.UnixSocketTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(UnixSocketTest, self).setUp()\n        self.tmpdir = tempfile.mkdtemp()\n        self.sockfile = os.path.join(self.tmpdir, \"test.sock\")\n        sock = netutil.bind_unix_socket(self.sockfile)\n        app = Application([(\"/hello\", HelloWorldRequestHandler)])\n        self.server = HTTPServer(app, io_loop=self.io_loop)\n        self.server.add_socket(sock)\n        self.stream = IOStream(socket.socket(socket.AF_UNIX), io_loop=self.io_loop)\n        self.stream.connect(self.sockfile, self.stop)\n        self.wait()",
        "begin_line": 587,
        "end_line": 597,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.UnixSocketTest.tearDown#599",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.UnixSocketTest",
        "signature": "tornado.test.httpserver_test.UnixSocketTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.stream.close()\n        self.server.stop()\n        shutil.rmtree(self.tmpdir)\n        super(UnixSocketTest, self).tearDown()",
        "begin_line": 599,
        "end_line": 603,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.UnixSocketTest.test_unix_socket#605",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.UnixSocketTest",
        "signature": "tornado.test.httpserver_test.UnixSocketTest.test_unix_socket(self)",
        "snippet": "    def test_unix_socket(self):\n        self.stream.write(b\"GET /hello HTTP/1.0\\r\\n\\r\\n\")\n        self.stream.read_until(b\"\\r\\n\", self.stop)\n        response = self.wait()\n        self.assertEqual(response, b\"HTTP/1.1 200 OK\\r\\n\")\n        self.stream.read_until(b\"\\r\\n\\r\\n\", self.stop)\n        headers = HTTPHeaders.parse(self.wait().decode('latin1'))\n        self.stream.read_bytes(int(headers[\"Content-Length\"]), self.stop)\n        body = self.wait()\n        self.assertEqual(body, b\"Hello world\")",
        "begin_line": 605,
        "end_line": 614,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.UnixSocketTest.test_unix_socket_bad_request#616",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.UnixSocketTest",
        "signature": "tornado.test.httpserver_test.UnixSocketTest.test_unix_socket_bad_request(self)",
        "snippet": "    def test_unix_socket_bad_request(self):\n        # Unix sockets don't have remote addresses so they just return an\n        # empty string.\n        with ExpectLog(gen_log, \"Malformed HTTP message from\"):\n            self.stream.write(b\"garbage\\r\\n\\r\\n\")\n            self.stream.read_until_close(self.stop)\n            response = self.wait()\n        self.assertEqual(response, b\"\")",
        "begin_line": 616,
        "end_line": 623,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.get_app#632",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class HelloHandler(RequestHandler):\n            def get(self):\n                self.finish('Hello world')\n\n            def post(self):\n                self.finish('Hello world')\n\n        class LargeHandler(RequestHandler):\n            def get(self):\n                # 512KB should be bigger than the socket buffers so it will\n                # be written out in chunks.\n                self.write(''.join(chr(i % 256) * 1024 for i in range(512)))\n\n        class FinishOnCloseHandler(RequestHandler):\n            @asynchronous\n            def get(self):\n                self.flush()\n\n            def on_connection_close(self):\n                # This is not very realistic, but finishing the request\n                # from the close callback has the right timing to mimic\n                # some errors seen in the wild.\n                self.finish('closed')\n\n        return Application([('/', HelloHandler),\n                            ('/large', LargeHandler),\n                            ('/finish_on_close', FinishOnCloseHandler)])",
        "begin_line": 632,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloHandler.get_app#632",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloHandler",
        "signature": "tornado.test.httpserver_test.HelloHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class HelloHandler(RequestHandler):\n            def get(self):\n                self.finish('Hello world')\n\n            def post(self):\n                self.finish('Hello world')\n\n        class LargeHandler(RequestHandler):\n            def get(self):\n                # 512KB should be bigger than the socket buffers so it will\n                # be written out in chunks.\n                self.write(''.join(chr(i % 256) * 1024 for i in range(512)))\n\n        class FinishOnCloseHandler(RequestHandler):\n            @asynchronous\n            def get(self):\n                self.flush()\n\n            def on_connection_close(self):\n                # This is not very realistic, but finishing the request\n                # from the close callback has the right timing to mimic\n                # some errors seen in the wild.\n                self.finish('closed')\n\n        return Application([('/', HelloHandler),\n                            ('/large', LargeHandler),\n                            ('/finish_on_close', FinishOnCloseHandler)])",
        "begin_line": 632,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloHandler.get#634",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloHandler",
        "signature": "tornado.test.httpserver_test.HelloHandler.get(self)",
        "snippet": "            def get(self):\n                self.finish('Hello world')",
        "begin_line": 634,
        "end_line": 635,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.HelloHandler.post#637",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.HelloHandler",
        "signature": "tornado.test.httpserver_test.HelloHandler.post(self)",
        "snippet": "            def post(self):\n                self.finish('Hello world')",
        "begin_line": 637,
        "end_line": 638,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.LargeHandler.get_app#632",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.LargeHandler",
        "signature": "tornado.test.httpserver_test.LargeHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class HelloHandler(RequestHandler):\n            def get(self):\n                self.finish('Hello world')\n\n            def post(self):\n                self.finish('Hello world')\n\n        class LargeHandler(RequestHandler):\n            def get(self):\n                # 512KB should be bigger than the socket buffers so it will\n                # be written out in chunks.\n                self.write(''.join(chr(i % 256) * 1024 for i in range(512)))\n\n        class FinishOnCloseHandler(RequestHandler):\n            @asynchronous\n            def get(self):\n                self.flush()\n\n            def on_connection_close(self):\n                # This is not very realistic, but finishing the request\n                # from the close callback has the right timing to mimic\n                # some errors seen in the wild.\n                self.finish('closed')\n\n        return Application([('/', HelloHandler),\n                            ('/large', LargeHandler),\n                            ('/finish_on_close', FinishOnCloseHandler)])",
        "begin_line": 632,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.LargeHandler.get#641",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.LargeHandler",
        "signature": "tornado.test.httpserver_test.LargeHandler.get(self)",
        "snippet": "            def get(self):\n                # 512KB should be bigger than the socket buffers so it will\n                # be written out in chunks.\n                self.write(''.join(chr(i % 256) * 1024 for i in range(512)))",
        "begin_line": 641,
        "end_line": 644,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.FinishOnCloseHandler.get_app#632",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.FinishOnCloseHandler",
        "signature": "tornado.test.httpserver_test.FinishOnCloseHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class HelloHandler(RequestHandler):\n            def get(self):\n                self.finish('Hello world')\n\n            def post(self):\n                self.finish('Hello world')\n\n        class LargeHandler(RequestHandler):\n            def get(self):\n                # 512KB should be bigger than the socket buffers so it will\n                # be written out in chunks.\n                self.write(''.join(chr(i % 256) * 1024 for i in range(512)))\n\n        class FinishOnCloseHandler(RequestHandler):\n            @asynchronous\n            def get(self):\n                self.flush()\n\n            def on_connection_close(self):\n                # This is not very realistic, but finishing the request\n                # from the close callback has the right timing to mimic\n                # some errors seen in the wild.\n                self.finish('closed')\n\n        return Application([('/', HelloHandler),\n                            ('/large', LargeHandler),\n                            ('/finish_on_close', FinishOnCloseHandler)])",
        "begin_line": 632,
        "end_line": 659,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.FinishOnCloseHandler.get#648",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.FinishOnCloseHandler",
        "signature": "tornado.test.httpserver_test.FinishOnCloseHandler.get(self)",
        "snippet": "            def get(self):\n                self.flush()",
        "begin_line": 648,
        "end_line": 649,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.FinishOnCloseHandler.on_connection_close#651",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.FinishOnCloseHandler",
        "signature": "tornado.test.httpserver_test.FinishOnCloseHandler.on_connection_close(self)",
        "snippet": "            def on_connection_close(self):\n                # This is not very realistic, but finishing the request\n                # from the close callback has the right timing to mimic\n                # some errors seen in the wild.\n                self.finish('closed')",
        "begin_line": 651,
        "end_line": 655,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.setUp#661",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(KeepAliveTest, self).setUp()\n        self.http_version = b'HTTP/1.1'",
        "begin_line": 661,
        "end_line": 663,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.tearDown#665",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        # We just closed the client side of the socket; let the IOLoop run\n        # once to make sure the server side got the message.\n        self.io_loop.add_timeout(datetime.timedelta(seconds=0.001), self.stop)\n        self.wait()\n\n        if hasattr(self, 'stream'):\n            self.stream.close()\n        super(KeepAliveTest, self).tearDown()",
        "begin_line": 665,
        "end_line": 673,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.connect#676",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.connect(self)",
        "snippet": "    def connect(self):\n        self.stream = IOStream(socket.socket(), io_loop=self.io_loop)\n        self.stream.connect(('127.0.0.1', self.get_http_port()), self.stop)\n        self.wait()",
        "begin_line": 676,
        "end_line": 679,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.read_headers#681",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.read_headers(self)",
        "snippet": "    def read_headers(self):\n        self.stream.read_until(b'\\r\\n', self.stop)\n        first_line = self.wait()\n        self.assertTrue(first_line.startswith(b'HTTP/1.1 200'), first_line)\n        self.stream.read_until(b'\\r\\n\\r\\n', self.stop)\n        header_bytes = self.wait()\n        headers = HTTPHeaders.parse(header_bytes.decode('latin1'))\n        return headers",
        "begin_line": 681,
        "end_line": 688,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.read_response#690",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.read_response(self)",
        "snippet": "    def read_response(self):\n        self.headers = self.read_headers()\n        self.stream.read_bytes(int(self.headers['Content-Length']), self.stop)\n        body = self.wait()\n        self.assertEqual(b'Hello world', body)",
        "begin_line": 690,
        "end_line": 694,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.close#696",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.close(self)",
        "snippet": "    def close(self):\n        self.stream.close()\n        del self.stream",
        "begin_line": 696,
        "end_line": 698,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_two_requests#700",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_two_requests(self)",
        "snippet": "    def test_two_requests(self):\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.1\\r\\n\\r\\n')\n        self.read_response()\n        self.stream.write(b'GET / HTTP/1.1\\r\\n\\r\\n')\n        self.read_response()\n        self.close()",
        "begin_line": 700,
        "end_line": 706,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_request_close#708",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_request_close(self)",
        "snippet": "    def test_request_close(self):\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.1\\r\\nConnection: close\\r\\n\\r\\n')\n        self.read_response()\n        self.stream.read_until_close(callback=self.stop)\n        data = self.wait()\n        self.assertTrue(not data)\n        self.close()",
        "begin_line": 708,
        "end_line": 715,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_http10#718",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_http10(self)",
        "snippet": "    def test_http10(self):\n        self.http_version = b'HTTP/1.0'\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.0\\r\\n\\r\\n')\n        self.read_response()\n        self.stream.read_until_close(callback=self.stop)\n        data = self.wait()\n        self.assertTrue(not data)\n        self.assertTrue('Connection' not in self.headers)\n        self.close()",
        "begin_line": 718,
        "end_line": 727,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive#729",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive(self)",
        "snippet": "    def test_http10_keepalive(self):\n        self.http_version = b'HTTP/1.0'\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.stream.write(b'GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.close()",
        "begin_line": 729,
        "end_line": 738,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive_extra_crlf#740",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_http10_keepalive_extra_crlf(self)",
        "snippet": "    def test_http10_keepalive_extra_crlf(self):\n        self.http_version = b'HTTP/1.0'\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.stream.write(b'GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.close()",
        "begin_line": 740,
        "end_line": 749,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_pipelined_requests#751",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_pipelined_requests(self)",
        "snippet": "    def test_pipelined_requests(self):\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.1\\r\\n\\r\\nGET / HTTP/1.1\\r\\n\\r\\n')\n        self.read_response()\n        self.read_response()\n        self.close()",
        "begin_line": 751,
        "end_line": 756,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_pipelined_cancel#758",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_pipelined_cancel(self)",
        "snippet": "    def test_pipelined_cancel(self):\n        self.connect()\n        self.stream.write(b'GET / HTTP/1.1\\r\\n\\r\\nGET / HTTP/1.1\\r\\n\\r\\n')\n        # only read once\n        self.read_response()\n        self.close()",
        "begin_line": 758,
        "end_line": 763,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_cancel_during_download#765",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_cancel_during_download(self)",
        "snippet": "    def test_cancel_during_download(self):\n        self.connect()\n        self.stream.write(b'GET /large HTTP/1.1\\r\\n\\r\\n')\n        self.read_headers()\n        self.stream.read_bytes(1024, self.stop)\n        self.wait()\n        self.close()",
        "begin_line": 765,
        "end_line": 771,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_finish_while_closed#773",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_finish_while_closed(self)",
        "snippet": "    def test_finish_while_closed(self):\n        self.connect()\n        self.stream.write(b'GET /finish_on_close HTTP/1.1\\r\\n\\r\\n')\n        self.read_headers()\n        self.close()",
        "begin_line": 773,
        "end_line": 777,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.KeepAliveTest.test_keepalive_chunked#779",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.KeepAliveTest",
        "signature": "tornado.test.httpserver_test.KeepAliveTest.test_keepalive_chunked(self)",
        "snippet": "    def test_keepalive_chunked(self):\n        self.http_version = b'HTTP/1.0'\n        self.connect()\n        self.stream.write(b'POST / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n'\n                          b'Transfer-Encoding: chunked\\r\\n'\n                          b'\\r\\n0\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.stream.write(b'GET / HTTP/1.0\\r\\nConnection: keep-alive\\r\\n\\r\\n')\n        self.read_response()\n        self.assertEqual(self.headers['Connection'], 'Keep-Alive')\n        self.close()",
        "begin_line": 779,
        "end_line": 790,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipBaseTest.get_app#794",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipBaseTest",
        "signature": "tornado.test.httpserver_test.GzipBaseTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', EchoHandler)])",
        "begin_line": 794,
        "end_line": 795,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipBaseTest.post_gzip#797",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipBaseTest",
        "signature": "tornado.test.httpserver_test.GzipBaseTest.post_gzip(self, body)",
        "snippet": "    def post_gzip(self, body):\n        bytesio = BytesIO()\n        gzip_file = gzip.GzipFile(mode='w', fileobj=bytesio)\n        gzip_file.write(utf8(body))\n        gzip_file.close()\n        compressed_body = bytesio.getvalue()\n        return self.fetch('/', method='POST', body=compressed_body,\n                          headers={'Content-Encoding': 'gzip'})",
        "begin_line": 797,
        "end_line": 804,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipBaseTest.test_uncompressed#806",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipBaseTest",
        "signature": "tornado.test.httpserver_test.GzipBaseTest.test_uncompressed(self)",
        "snippet": "    def test_uncompressed(self):\n        response = self.fetch('/', method='POST', body='foo=bar')\n        self.assertEquals(json_decode(response.body), {u'foo': [u'bar']})",
        "begin_line": 806,
        "end_line": 808,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipTest.get_httpserver_options#812",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipTest",
        "signature": "tornado.test.httpserver_test.GzipTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(decompress_request=True)",
        "begin_line": 812,
        "end_line": 813,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipTest.test_gzip#815",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipTest",
        "signature": "tornado.test.httpserver_test.GzipTest.test_gzip(self)",
        "snippet": "    def test_gzip(self):\n        response = self.post_gzip('foo=bar')\n        self.assertEquals(json_decode(response.body), {u'foo': [u'bar']})",
        "begin_line": 815,
        "end_line": 817,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.GzipUnsupportedTest.test_gzip_unsupported#821",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.GzipUnsupportedTest",
        "signature": "tornado.test.httpserver_test.GzipUnsupportedTest.test_gzip_unsupported(self)",
        "snippet": "    def test_gzip_unsupported(self):\n        # Gzip support is opt-in; without it the server fails to parse\n        # the body (but parsing form bodies is currently just a log message,\n        # not a fatal error).\n        with ExpectLog(gen_log, \"Unsupported Content-Encoding\"):\n            response = self.post_gzip('foo=bar')\n        self.assertEquals(json_decode(response.body), {})",
        "begin_line": 821,
        "end_line": 827,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_http_client#835",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # body_producer doesn't work on curl_httpclient, so override the\n        # configured AsyncHTTPClient implementation.\n        return SimpleAsyncHTTPClient(io_loop=self.io_loop)",
        "begin_line": 835,
        "end_line": 838,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_httpserver_options#840",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(chunk_size=self.CHUNK_SIZE, decompress_request=True)",
        "begin_line": 840,
        "end_line": 841,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MessageDelegate.__init__#844",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MessageDelegate",
        "signature": "tornado.test.httpserver_test.MessageDelegate.__init__(self, connection)",
        "snippet": "        def __init__(self, connection):\n            self.connection = connection",
        "begin_line": 844,
        "end_line": 845,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MessageDelegate.headers_received#847",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MessageDelegate",
        "signature": "tornado.test.httpserver_test.MessageDelegate.headers_received(self, start_line, headers)",
        "snippet": "        def headers_received(self, start_line, headers):\n            self.chunk_lengths = []",
        "begin_line": 847,
        "end_line": 848,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MessageDelegate.data_received#850",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MessageDelegate",
        "signature": "tornado.test.httpserver_test.MessageDelegate.data_received(self, chunk)",
        "snippet": "        def data_received(self, chunk):\n            self.chunk_lengths.append(len(chunk))",
        "begin_line": 850,
        "end_line": 851,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MessageDelegate.finish#853",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MessageDelegate",
        "signature": "tornado.test.httpserver_test.MessageDelegate.finish(self)",
        "snippet": "        def finish(self):\n            response_body = utf8(json_encode(self.chunk_lengths))\n            self.connection.write_headers(\n                ResponseStartLine('HTTP/1.1', 200, 'OK'),\n                HTTPHeaders({'Content-Length': str(len(response_body))}))\n            self.connection.write(response_body)\n            self.connection.finish()",
        "begin_line": 853,
        "end_line": 859,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_app#861",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class App(HTTPServerConnectionDelegate):\n            def start_request(self, server_conn, request_conn):\n                return StreamingChunkSizeTest.MessageDelegate(request_conn)\n        return App()",
        "begin_line": 861,
        "end_line": 865,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.App.get_app#861",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.App",
        "signature": "tornado.test.httpserver_test.App.get_app(self)",
        "snippet": "    def get_app(self):\n        class App(HTTPServerConnectionDelegate):\n            def start_request(self, server_conn, request_conn):\n                return StreamingChunkSizeTest.MessageDelegate(request_conn)\n        return App()",
        "begin_line": 861,
        "end_line": 865,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.App.start_request#863",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.App",
        "signature": "tornado.test.httpserver_test.App.start_request(self, server_conn, request_conn)",
        "snippet": "            def start_request(self, server_conn, request_conn):\n                return StreamingChunkSizeTest.MessageDelegate(request_conn)",
        "begin_line": 863,
        "end_line": 864,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.fetch_chunk_sizes#867",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.fetch_chunk_sizes(self, **kwargs)",
        "snippet": "    def fetch_chunk_sizes(self, **kwargs):\n        response = self.fetch('/', method='POST', **kwargs)\n        response.rethrow()\n        chunks = json_decode(response.body)\n        self.assertEqual(len(self.BODY), sum(chunks))\n        for chunk_size in chunks:\n            self.assertLessEqual(chunk_size, self.CHUNK_SIZE,\n                                 'oversized chunk: ' + str(chunks))\n            self.assertGreater(chunk_size, 0,\n                               'empty chunk: ' + str(chunks))\n        return chunks",
        "begin_line": 867,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.compress#879",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.compress(self, body)",
        "snippet": "    def compress(self, body):\n        bytesio = BytesIO()\n        gzfile = gzip.GzipFile(mode='w', fileobj=bytesio)\n        gzfile.write(body)\n        gzfile.close()\n        compressed = bytesio.getvalue()\n        if len(compressed) >= len(body):\n            raise Exception(\"body did not shrink when compressed\")\n        return compressed",
        "begin_line": 879,
        "end_line": 887,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_regular_body#889",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_regular_body(self)",
        "snippet": "    def test_regular_body(self):\n        chunks = self.fetch_chunk_sizes(body=self.BODY)\n        # Without compression we know exactly what to expect.\n        self.assertEqual([16, 16, 16, 2], chunks)",
        "begin_line": 889,
        "end_line": 892,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_compressed_body#894",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_compressed_body(self)",
        "snippet": "    def test_compressed_body(self):\n        self.fetch_chunk_sizes(body=self.compress(self.BODY),\n                               headers={'Content-Encoding': 'gzip'})",
        "begin_line": 894,
        "end_line": 896,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_body#900",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_body(self)",
        "snippet": "    def test_chunked_body(self):\n        def body_producer(write):\n            write(self.BODY[:20])\n            write(self.BODY[20:])\n        chunks = self.fetch_chunk_sizes(body_producer=body_producer)\n        # HTTP chunk boundaries translate to application-visible breaks\n        self.assertEqual([16, 4, 16, 14], chunks)",
        "begin_line": 900,
        "end_line": 906,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.body_producer#901",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.body_producer(write)",
        "snippet": "        def body_producer(write):\n            write(self.BODY[:20])\n            write(self.BODY[20:])",
        "begin_line": 901,
        "end_line": 903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_compressed#908",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.test_chunked_compressed(self)",
        "snippet": "    def test_chunked_compressed(self):\n        compressed = self.compress(self.BODY)\n        self.assertGreater(len(compressed), 20)\n\n        def body_producer(write):\n            write(compressed[:20])\n            write(compressed[20:])\n        self.fetch_chunk_sizes(body_producer=body_producer,\n                               headers={'Content-Encoding': 'gzip'})",
        "begin_line": 908,
        "end_line": 916,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingChunkSizeTest.body_producer#912",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingChunkSizeTest",
        "signature": "tornado.test.httpserver_test.StreamingChunkSizeTest.body_producer(write)",
        "snippet": "        def body_producer(write):\n            write(compressed[:20])\n            write(compressed[20:])",
        "begin_line": 912,
        "end_line": 914,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MaxHeaderSizeTest.get_app#920",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MaxHeaderSizeTest",
        "signature": "tornado.test.httpserver_test.MaxHeaderSizeTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', HelloWorldRequestHandler)])",
        "begin_line": 920,
        "end_line": 921,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MaxHeaderSizeTest.get_httpserver_options#923",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MaxHeaderSizeTest",
        "signature": "tornado.test.httpserver_test.MaxHeaderSizeTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(max_header_size=1024)",
        "begin_line": 923,
        "end_line": 924,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MaxHeaderSizeTest.test_small_headers#926",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MaxHeaderSizeTest",
        "signature": "tornado.test.httpserver_test.MaxHeaderSizeTest.test_small_headers(self)",
        "snippet": "    def test_small_headers(self):\n        response = self.fetch(\"/\", headers={'X-Filler': 'a' * 100})\n        response.rethrow()\n        self.assertEqual(response.body, b\"Hello world\")",
        "begin_line": 926,
        "end_line": 929,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.MaxHeaderSizeTest.test_large_headers#931",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.MaxHeaderSizeTest",
        "signature": "tornado.test.httpserver_test.MaxHeaderSizeTest.test_large_headers(self)",
        "snippet": "    def test_large_headers(self):\n        with ExpectLog(gen_log, \"Unsatisfiable read\", required=False):\n            response = self.fetch(\"/\", headers={'X-Filler': 'a' * 1000})\n        # 431 is \"Request Header Fields Too Large\", defined in RFC\n        # 6585. However, many implementations just close the\n        # connection in this case, resulting in a 599.\n        self.assertIn(response.code, (431, 599))",
        "begin_line": 931,
        "end_line": 937,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.get_app#942",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.get_app(self)",
        "snippet": "    def get_app(self):\n        return Application([('/', HelloWorldRequestHandler)])",
        "begin_line": 942,
        "end_line": 943,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.get_httpserver_options#945",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(idle_connection_timeout=0.1)",
        "begin_line": 945,
        "end_line": 946,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.setUp#948",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(IdleTimeoutTest, self).setUp()\n        self.streams = []",
        "begin_line": 948,
        "end_line": 950,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.tearDown#952",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(IdleTimeoutTest, self).tearDown()\n        for stream in self.streams:\n            stream.close()",
        "begin_line": 952,
        "end_line": 955,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.connect#957",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.connect(self)",
        "snippet": "    def connect(self):\n        stream = IOStream(socket.socket())\n        stream.connect(('127.0.0.1', self.get_http_port()), self.stop)\n        self.wait()\n        self.streams.append(stream)\n        return stream",
        "begin_line": 957,
        "end_line": 962,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.test_unused_connection#964",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.test_unused_connection(self)",
        "snippet": "    def test_unused_connection(self):\n        stream = self.connect()\n        stream.set_close_callback(self.stop)\n        self.wait()",
        "begin_line": 964,
        "end_line": 967,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.IdleTimeoutTest.test_idle_after_use#969",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.IdleTimeoutTest",
        "signature": "tornado.test.httpserver_test.IdleTimeoutTest.test_idle_after_use(self)",
        "snippet": "    def test_idle_after_use(self):\n        stream = self.connect()\n        stream.set_close_callback(lambda: self.stop(\"closed\"))\n\n        # Use the connection twice to make sure keep-alives are working\n        for i in range(2):\n            stream.write(b\"GET / HTTP/1.1\\r\\n\\r\\n\")\n            stream.read_until(b\"\\r\\n\\r\\n\", self.stop)\n            self.wait()\n            stream.read_bytes(11, self.stop)\n            data = self.wait()\n            self.assertEqual(data, b\"Hello world\")\n\n        # Now let the timeout trigger and close the connection.\n        data = self.wait()\n        self.assertEqual(data, \"closed\")",
        "begin_line": 969,
        "end_line": 984,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.get_app#988",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.get_app(self)",
        "snippet": "    def get_app(self):\n        class BufferedHandler(RequestHandler):\n            def put(self):\n                self.write(str(len(self.request.body)))\n\n        @stream_request_body\n        class StreamingHandler(RequestHandler):\n            def initialize(self):\n                self.bytes_read = 0\n\n            def prepare(self):\n                if 'expected_size' in self.request.arguments:\n                    self.request.connection.set_max_body_size(\n                        int(self.get_argument('expected_size')))\n                if 'body_timeout' in self.request.arguments:\n                    self.request.connection.set_body_timeout(\n                        float(self.get_argument('body_timeout')))\n\n            def data_received(self, data):\n                self.bytes_read += len(data)\n\n            def put(self):\n                self.write(str(self.bytes_read))\n\n        return Application([('/buffered', BufferedHandler),\n                            ('/streaming', StreamingHandler)])",
        "begin_line": 988,
        "end_line": 1013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BufferedHandler.get_app#988",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BufferedHandler",
        "signature": "tornado.test.httpserver_test.BufferedHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class BufferedHandler(RequestHandler):\n            def put(self):\n                self.write(str(len(self.request.body)))\n\n        @stream_request_body\n        class StreamingHandler(RequestHandler):\n            def initialize(self):\n                self.bytes_read = 0\n\n            def prepare(self):\n                if 'expected_size' in self.request.arguments:\n                    self.request.connection.set_max_body_size(\n                        int(self.get_argument('expected_size')))\n                if 'body_timeout' in self.request.arguments:\n                    self.request.connection.set_body_timeout(\n                        float(self.get_argument('body_timeout')))\n\n            def data_received(self, data):\n                self.bytes_read += len(data)\n\n            def put(self):\n                self.write(str(self.bytes_read))\n\n        return Application([('/buffered', BufferedHandler),\n                            ('/streaming', StreamingHandler)])",
        "begin_line": 988,
        "end_line": 1013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BufferedHandler.put#990",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BufferedHandler",
        "signature": "tornado.test.httpserver_test.BufferedHandler.put(self)",
        "snippet": "            def put(self):\n                self.write(str(len(self.request.body)))",
        "begin_line": 990,
        "end_line": 991,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingHandler.get_app#988",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingHandler",
        "signature": "tornado.test.httpserver_test.StreamingHandler.get_app(self)",
        "snippet": "    def get_app(self):\n        class BufferedHandler(RequestHandler):\n            def put(self):\n                self.write(str(len(self.request.body)))\n\n        @stream_request_body\n        class StreamingHandler(RequestHandler):\n            def initialize(self):\n                self.bytes_read = 0\n\n            def prepare(self):\n                if 'expected_size' in self.request.arguments:\n                    self.request.connection.set_max_body_size(\n                        int(self.get_argument('expected_size')))\n                if 'body_timeout' in self.request.arguments:\n                    self.request.connection.set_body_timeout(\n                        float(self.get_argument('body_timeout')))\n\n            def data_received(self, data):\n                self.bytes_read += len(data)\n\n            def put(self):\n                self.write(str(self.bytes_read))\n\n        return Application([('/buffered', BufferedHandler),\n                            ('/streaming', StreamingHandler)])",
        "begin_line": 988,
        "end_line": 1013,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingHandler.initialize#995",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingHandler",
        "signature": "tornado.test.httpserver_test.StreamingHandler.initialize(self)",
        "snippet": "            def initialize(self):\n                self.bytes_read = 0",
        "begin_line": 995,
        "end_line": 996,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingHandler.prepare#998",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingHandler",
        "signature": "tornado.test.httpserver_test.StreamingHandler.prepare(self)",
        "snippet": "            def prepare(self):\n                if 'expected_size' in self.request.arguments:\n                    self.request.connection.set_max_body_size(\n                        int(self.get_argument('expected_size')))\n                if 'body_timeout' in self.request.arguments:\n                    self.request.connection.set_body_timeout(\n                        float(self.get_argument('body_timeout')))",
        "begin_line": 998,
        "end_line": 1004,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingHandler.data_received#1006",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingHandler",
        "signature": "tornado.test.httpserver_test.StreamingHandler.data_received(self, data)",
        "snippet": "            def data_received(self, data):\n                self.bytes_read += len(data)",
        "begin_line": 1006,
        "end_line": 1007,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.StreamingHandler.put#1009",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.StreamingHandler",
        "signature": "tornado.test.httpserver_test.StreamingHandler.put(self)",
        "snippet": "            def put(self):\n                self.write(str(self.bytes_read))",
        "begin_line": 1009,
        "end_line": 1010,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.get_httpserver_options#1015",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.get_httpserver_options(self)",
        "snippet": "    def get_httpserver_options(self):\n        return dict(body_timeout=3600, max_body_size=4096)",
        "begin_line": 1015,
        "end_line": 1016,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.get_http_client#1018",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.get_http_client(self)",
        "snippet": "    def get_http_client(self):\n        # body_producer doesn't work on curl_httpclient, so override the\n        # configured AsyncHTTPClient implementation.\n        return SimpleAsyncHTTPClient(io_loop=self.io_loop)",
        "begin_line": 1018,
        "end_line": 1021,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_small_body#1023",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_small_body(self)",
        "snippet": "    def test_small_body(self):\n        response = self.fetch('/buffered', method='PUT', body=b'a' * 4096)\n        self.assertEqual(response.body, b'4096')\n        response = self.fetch('/streaming', method='PUT', body=b'a' * 4096)\n        self.assertEqual(response.body, b'4096')",
        "begin_line": 1023,
        "end_line": 1027,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered#1029",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered(self)",
        "snippet": "    def test_large_body_buffered(self):\n        with ExpectLog(gen_log, '.*Content-Length too long'):\n            response = self.fetch('/buffered', method='PUT', body=b'a' * 10240)\n        self.assertEqual(response.code, 599)",
        "begin_line": 1029,
        "end_line": 1032,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered_chunked#1034",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_buffered_chunked(self)",
        "snippet": "    def test_large_body_buffered_chunked(self):\n        with ExpectLog(gen_log, '.*chunked body too large'):\n            response = self.fetch('/buffered', method='PUT',\n                                  body_producer=lambda write: write(b'a' * 10240))\n        self.assertEqual(response.code, 599)",
        "begin_line": 1034,
        "end_line": 1038,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming#1040",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming(self)",
        "snippet": "    def test_large_body_streaming(self):\n        with ExpectLog(gen_log, '.*Content-Length too long'):\n            response = self.fetch('/streaming', method='PUT', body=b'a' * 10240)\n        self.assertEqual(response.code, 599)",
        "begin_line": 1040,
        "end_line": 1043,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked#1045",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked(self)",
        "snippet": "    def test_large_body_streaming_chunked(self):\n        with ExpectLog(gen_log, '.*chunked body too large'):\n            response = self.fetch('/streaming', method='PUT',\n                                  body_producer=lambda write: write(b'a' * 10240))\n        self.assertEqual(response.code, 599)",
        "begin_line": 1045,
        "end_line": 1049,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_override#1051",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_override(self)",
        "snippet": "    def test_large_body_streaming_override(self):\n        response = self.fetch('/streaming?expected_size=10240', method='PUT',\n                              body=b'a' * 10240)\n        self.assertEqual(response.body, b'10240')",
        "begin_line": 1051,
        "end_line": 1054,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked_override#1056",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_large_body_streaming_chunked_override(self)",
        "snippet": "    def test_large_body_streaming_chunked_override(self):\n        response = self.fetch('/streaming?expected_size=10240', method='PUT',\n                              body_producer=lambda write: write(b'a' * 10240))\n        self.assertEqual(response.body, b'10240')",
        "begin_line": 1056,
        "end_line": 1059,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_timeout#1062",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_timeout(self)",
        "snippet": "    def test_timeout(self):\n        stream = IOStream(socket.socket())\n        try:\n            yield stream.connect(('127.0.0.1', self.get_http_port()))\n            # Use a raw stream because AsyncHTTPClient won't let us read a\n            # response without finishing a body.\n            stream.write(b'PUT /streaming?body_timeout=0.1 HTTP/1.0\\r\\n'\n                         b'Content-Length: 42\\r\\n\\r\\n')\n            with ExpectLog(gen_log, 'Timeout reading body'):\n                response = yield stream.read_until_close()\n            self.assertEqual(response, b'')\n        finally:\n            stream.close()",
        "begin_line": 1062,
        "end_line": 1074,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.BodyLimitsTest.test_body_size_override_reset#1077",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.BodyLimitsTest",
        "signature": "tornado.test.httpserver_test.BodyLimitsTest.test_body_size_override_reset(self)",
        "snippet": "    def test_body_size_override_reset(self):\n        # The max_body_size override is reset between requests.\n        stream = IOStream(socket.socket())\n        try:\n            yield stream.connect(('127.0.0.1', self.get_http_port()))\n            # Use a raw stream so we can make sure it's all on one connection.\n            stream.write(b'PUT /streaming?expected_size=10240 HTTP/1.1\\r\\n'\n                         b'Content-Length: 10240\\r\\n\\r\\n')\n            stream.write(b'a' * 10240)\n            headers, response = yield gen.Task(read_stream_body, stream)\n            self.assertEqual(response, b'10240')\n            # Without the ?expected_size parameter, we get the old default value\n            stream.write(b'PUT /streaming HTTP/1.1\\r\\n'\n                         b'Content-Length: 10240\\r\\n\\r\\n')\n            with ExpectLog(gen_log, '.*Content-Length too long'):\n                data = yield stream.read_until_close()\n            self.assertEqual(data, b'')\n        finally:\n            stream.close()",
        "begin_line": 1077,
        "end_line": 1095,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.LegacyInterfaceTest.get_app#1099",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.LegacyInterfaceTest",
        "signature": "tornado.test.httpserver_test.LegacyInterfaceTest.get_app(self)",
        "snippet": "    def get_app(self):\n        # The old request_callback interface does not implement the\n        # delegate interface, and writes its response via request.write\n        # instead of request.connection.write_headers.\n        def handle_request(request):\n            self.http1 = request.version.startswith(\"HTTP/1.\")\n            if not self.http1:\n                # This test will be skipped if we're using HTTP/2,\n                # so just close it out cleanly using the modern interface.\n                request.connection.write_headers(\n                    ResponseStartLine('', 200, 'OK'),\n                    HTTPHeaders())\n                request.connection.finish()\n                return\n            message = b\"Hello world\"\n            request.write(utf8(\"HTTP/1.1 200 OK\\r\\n\"\n                               \"Content-Length: %d\\r\\n\\r\\n\" % len(message)))\n            request.write(message)\n            request.finish()\n        return handle_request",
        "begin_line": 1099,
        "end_line": 1118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.LegacyInterfaceTest.handle_request#1103",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.LegacyInterfaceTest",
        "signature": "tornado.test.httpserver_test.LegacyInterfaceTest.handle_request(request)",
        "snippet": "        def handle_request(request):\n            self.http1 = request.version.startswith(\"HTTP/1.\")\n            if not self.http1:\n                # This test will be skipped if we're using HTTP/2,\n                # so just close it out cleanly using the modern interface.\n                request.connection.write_headers(\n                    ResponseStartLine('', 200, 'OK'),\n                    HTTPHeaders())\n                request.connection.finish()\n                return\n            message = b\"Hello world\"\n            request.write(utf8(\"HTTP/1.1 200 OK\\r\\n\"\n                               \"Content-Length: %d\\r\\n\\r\\n\" % len(message)))\n            request.write(message)\n            request.finish()",
        "begin_line": 1103,
        "end_line": 1117,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tornado.test.httpserver_test.LegacyInterfaceTest.test_legacy_interface#1120",
        "src_path": "tornado/test/httpserver_test.py",
        "class_name": "tornado.test.httpserver_test.LegacyInterfaceTest",
        "signature": "tornado.test.httpserver_test.LegacyInterfaceTest.test_legacy_interface(self)",
        "snippet": "    def test_legacy_interface(self):\n        response = self.fetch('/')\n        if not self.http1:\n            self.skipTest(\"requires HTTP/1.x\")\n        self.assertEqual(response.body, b\"Hello world\")",
        "begin_line": 1120,
        "end_line": 1124,
        "comment": "",
        "is_bug": false
    }
]