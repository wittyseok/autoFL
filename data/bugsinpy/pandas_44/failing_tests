coverage run -m pytest pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 16 items

pandas/tests/indexes/test_base.py .FFFF.FFFF.FFFF.                       [100%]

=================================== FAILURES ===================================
___________ test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype1] ___________

ldtype = dtype('<M8[ns]'), rdtype = dtype('<m8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype2] ___________

ldtype = datetime64[ns, Asia/Tokyo], rdtype = dtype('<m8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype3] ___________

ldtype = period[N], rdtype = dtype('<m8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], no_matches)
>           tm.assert_numpy_array_equal(result[1], no_matches)

pandas/tests/indexes/test_base.py:2655: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])
err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
    
            diff = 0
            for l, r in zip(left, right):
                # count up differences
                if not array_equivalent(l, r, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (100.0 %)
E           [left]:  [0, 1, 2, 3, 4, 5]
E           [right]: [-1, -1, -1, -1, -1, -1]

pandas/_testing.py:980: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype0] ___________

ldtype = dtype('<m8[ns]'), rdtype = dtype('<M8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype2] ___________

ldtype = datetime64[ns, Asia/Tokyo], rdtype = dtype('<M8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype3] ___________

ldtype = period[N], rdtype = dtype('<M8[ns]')

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], no_matches)
>           tm.assert_numpy_array_equal(result[1], no_matches)

pandas/tests/indexes/test_base.py:2655: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])
err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
    
            diff = 0
            for l, r in zip(left, right):
                # count up differences
                if not array_equivalent(l, r, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (100.0 %)
E           [left]:  [0, 1, 2, 3, 4, 5]
E           [right]: [-1, -1, -1, -1, -1, -1]

pandas/_testing.py:980: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype0] ___________

ldtype = dtype('<m8[ns]'), rdtype = datetime64[ns, Asia/Tokyo]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype1] ___________

ldtype = dtype('<M8[ns]'), rdtype = datetime64[ns, Asia/Tokyo]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype3] ___________

ldtype = period[N], rdtype = datetime64[ns, Asia/Tokyo]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], no_matches)
>           tm.assert_numpy_array_equal(result[1], no_matches)

pandas/tests/indexes/test_base.py:2655: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])
err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
    
            diff = 0
            for l, r in zip(left, right):
                # count up differences
                if not array_equivalent(l, r, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (100.0 %)
E           [left]:  [0, 1, 2, 3, 4, 5]
E           [right]: [-1, -1, -1, -1, -1, -1]

pandas/_testing.py:980: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype0] ___________

ldtype = dtype('<m8[ns]'), rdtype = period[N]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype1] ___________

ldtype = dtype('<M8[ns]'), rdtype = period[N]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
___________ test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype2] ___________

ldtype = datetime64[ns, Asia/Tokyo], rdtype = period[N]

    @pytest.mark.parametrize("ldtype", dtlike_dtypes)
    @pytest.mark.parametrize("rdtype", dtlike_dtypes)
    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
    
        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)
    
        def construct(dtype):
            if dtype is dtlike_dtypes[-1]:
                # PeriodArray will try to cast ints to strings
                return pd.DatetimeIndex(vals).astype(dtype)
            return pd.Index(vals, dtype=dtype)
    
        left = construct(ldtype)
        right = construct(rdtype)
    
        result = left.get_indexer_non_unique(right)
    
        if ldtype is rdtype:
            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
            ex2 = np.array([], dtype=np.intp)
            tm.assert_numpy_array_equal(result[0], ex1)
            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))
    
        else:
            no_matches = np.array([-1] * 6, dtype=np.intp)
>           tm.assert_numpy_array_equal(result[0], no_matches)

pandas/tests/indexes/test_base.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])
right = array([-1, -1, -1, -1, -1, -1]), err_msg = None

    def _raise(left, right, err_msg):
        if err_msg is None:
            if left.shape != right.shape:
>               raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape,
                )
E               AssertionError: numpy array are different
E               
E               numpy array shapes are different
E               [left]:  (12,)
E               [right]: (6,)

pandas/_testing.py:968: AssertionError
=============================== warnings summary ===============================
pandas/tests/indexes/test_base.py: 54 tests with warnings
  /home/user/BugsInPy/temp/projects/pandas/pandas/core/indexes/base.py:4667: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.
    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype1]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype2]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype0-ldtype3]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype0]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype2]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype1-ldtype3]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype0]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype1]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype2-ldtype3]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype0]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype1]
FAILED pandas/tests/indexes/test_base.py::test_get_indexer_non_unique_wrong_dtype[rdtype3-ldtype2]
================== 12 failed, 4 passed, 54 warnings in 2.50s ===================

coverage run -m pytest pandas/tests/indexing/test_loc.py::test_loc_datetimelike_mismatched_dtypes
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.15.1
collected 1 item

pandas/tests/indexing/test_loc.py F                                      [100%]

=================================== FAILURES ===================================
___________________ test_loc_datetimelike_mismatched_dtypes ____________________

    def test_loc_datetimelike_mismatched_dtypes():
        # GH#32650 dont mix and match datetime/timedelta/period dtypes
    
        df = pd.DataFrame(
            np.random.randn(5, 3),
            columns=["a", "b", "c"],
            index=pd.date_range("2012", freq="H", periods=5),
        )
        # create dataframe with non-unique DatetimeIndex
        df = df.iloc[[0, 2, 2, 3]].copy()
    
        dti = df.index
        tdi = pd.TimedeltaIndex(dti.asi8)  # matching i8 values
    
        msg = r"None of \[TimedeltaIndex.* are in the \[index\]"
        with pytest.raises(KeyError, match=msg):
>           df.loc[tdi]
E           Failed: DID NOT RAISE <class 'KeyError'>

pandas/tests/indexing/test_loc.py:1094: Failed
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_loc.py::test_loc_datetimelike_mismatched_dtypes
============================== 1 failed in 0.21s ===============================
