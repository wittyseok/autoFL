[
    {
        "name": "tests.test_http_response.BaseResponseTest.test_init#20",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_init(self)",
        "snippet": "    def test_init(self):\n        # Response requires url in the consturctor\n        self.assertRaises(Exception, self.response_class)\n        self.assertTrue(isinstance(self.response_class('http://example.com/'), self.response_class))\n        if not six.PY2:\n            self.assertRaises(TypeError, self.response_class, b\"http://example.com\")\n        # body can be str or None\n        self.assertTrue(isinstance(self.response_class('http://example.com/', body=b''), self.response_class))\n        self.assertTrue(isinstance(self.response_class('http://example.com/', body=b'body'), self.response_class))\n        # test presence of all optional parameters\n        self.assertTrue(isinstance(self.response_class('http://example.com/', body=b'', headers={}, status=200), self.response_class))\n\n        r = self.response_class(\"http://www.example.com\")\n        assert isinstance(r.url, str)\n        self.assertEqual(r.url, \"http://www.example.com\")\n        self.assertEqual(r.status, 200)\n\n        assert isinstance(r.headers, Headers)\n        self.assertEqual(r.headers, {})\n\n        headers = {\"foo\": \"bar\"}\n        body = b\"a body\"\n        r = self.response_class(\"http://www.example.com\", headers=headers, body=body)\n\n        assert r.headers is not headers\n        self.assertEqual(r.headers[b\"foo\"], b\"bar\")\n\n        r = self.response_class(\"http://www.example.com\", status=301)\n        self.assertEqual(r.status, 301)\n        r = self.response_class(\"http://www.example.com\", status='301')\n        self.assertEqual(r.status, 301)\n        self.assertRaises(ValueError, self.response_class, \"http://example.com\", status='lala200')",
        "begin_line": 20,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_copy#53",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        \"\"\"Test Response copy\"\"\"\n\n        r1 = self.response_class(\"http://www.example.com\", body=b\"Some body\")\n        r1.flags.append('cached')\n        r2 = r1.copy()\n\n        self.assertEqual(r1.status, r2.status)\n        self.assertEqual(r1.body, r2.body)\n\n        # make sure flags list is shallow copied\n        assert r1.flags is not r2.flags, \"flags must be a shallow copy, not identical\"\n        self.assertEqual(r1.flags, r2.flags)\n\n        # make sure headers attribute is shallow copied\n        assert r1.headers is not r2.headers, \"headers must be a shallow copy, not identical\"\n        self.assertEqual(r1.headers, r2.headers)",
        "begin_line": 53,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_copy_meta#71",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_copy_meta(self)",
        "snippet": "    def test_copy_meta(self):\n        req = Request(\"http://www.example.com\")\n        req.meta['foo'] = 'bar'\n        r1 = self.response_class(\"http://www.example.com\", body=b\"Some body\", request=req)\n        assert r1.meta is req.meta",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_copy_inherited_classes#77",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Response children copies preserve their class\"\"\"\n\n        class CustomResponse(self.response_class):\n            pass\n\n        r1 = CustomResponse('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomResponse",
        "begin_line": 77,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.CustomResponse.test_copy_inherited_classes#77",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.CustomResponse",
        "signature": "tests.test_http_response.CustomResponse.test_copy_inherited_classes(self)",
        "snippet": "    def test_copy_inherited_classes(self):\n        \"\"\"Test Response children copies preserve their class\"\"\"\n\n        class CustomResponse(self.response_class):\n            pass\n\n        r1 = CustomResponse('http://www.example.com')\n        r2 = r1.copy()\n\n        assert type(r2) is CustomResponse",
        "begin_line": 77,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_replace#88",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_replace(self)",
        "snippet": "    def test_replace(self):\n        \"\"\"Test Response.replace() method\"\"\"\n        hdrs = Headers({\"key\": \"value\"})\n        r1 = self.response_class(\"http://www.example.com\")\n        r2 = r1.replace(status=301, body=b\"New body\", headers=hdrs)\n        assert r1.body == b''\n        self.assertEqual(r1.url, r2.url)\n        self.assertEqual((r1.status, r2.status), (200, 301))\n        self.assertEqual((r1.body, r2.body), (b'', b\"New body\"))\n        self.assertEqual((r1.headers, r2.headers), ({}, hdrs))\n\n        # Empty attributes (which may fail if not compared properly)\n        r3 = self.response_class(\"http://www.example.com\", flags=['cached'])\n        r4 = r3.replace(body=b'', flags=[])\n        self.assertEqual(r4.body, b'')\n        self.assertEqual(r4.flags, [])",
        "begin_line": 88,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest._assert_response_values#105",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest._assert_response_values(self, response, encoding, body)",
        "snippet": "    def _assert_response_values(self, response, encoding, body):\n        if isinstance(body, six.text_type):\n            body_unicode = body\n            body_bytes = body.encode(encoding)\n        else:\n            body_unicode = body.decode(encoding)\n            body_bytes = body\n\n        assert isinstance(response.body, bytes)\n        assert isinstance(response.text, six.text_type)\n        self._assert_response_encoding(response, encoding)\n        self.assertEqual(response.body, body_bytes)\n        self.assertEqual(response.body_as_unicode(), body_unicode)\n        self.assertEqual(response.text, body_unicode)",
        "begin_line": 105,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest._assert_response_encoding#120",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest._assert_response_encoding(self, response, encoding)",
        "snippet": "    def _assert_response_encoding(self, response, encoding):\n        self.assertEqual(response.encoding, resolve_encoding(encoding))",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_immutable_attributes#123",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_immutable_attributes(self)",
        "snippet": "    def test_immutable_attributes(self):\n        r = self.response_class(\"http://example.com\")\n        self.assertRaises(AttributeError, setattr, r, 'url', 'http://example2.com')\n        self.assertRaises(AttributeError, setattr, r, 'body', 'xxx')",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_urljoin#128",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_urljoin(self)",
        "snippet": "    def test_urljoin(self):\n        \"\"\"Test urljoin shortcut (only for existence, since behavior equals urljoin)\"\"\"\n        joined = self.response_class('http://www.example.com').urljoin('/test')\n        absolute = 'http://www.example.com/test'\n        self.assertEqual(joined, absolute)",
        "begin_line": 128,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_shortcut_attributes#134",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_shortcut_attributes(self)",
        "snippet": "    def test_shortcut_attributes(self):\n        r = self.response_class(\"http://example.com\", body=b'hello')\n        if self.response_class == Response:\n            msg = \"Response content isn't text\"\n            self.assertRaisesRegexp(AttributeError, msg, getattr, r, 'text')\n            self.assertRaisesRegexp(NotSupported, msg, r.css, 'body')\n            self.assertRaisesRegexp(NotSupported, msg, r.xpath, '//body')\n        else:\n            r.text\n            r.css('body')\n            r.xpath('//body')",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_url_absolute#146",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_url_absolute(self)",
        "snippet": "    def test_follow_url_absolute(self):\n        self._assert_followed_url('http://foo.example.com',\n                                  'http://foo.example.com')",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_url_relative#150",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_url_relative(self)",
        "snippet": "    def test_follow_url_relative(self):\n        self._assert_followed_url('foo',\n                                  'http://example.com/foo')",
        "begin_line": 150,
        "end_line": 152,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_link#154",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_link(self)",
        "snippet": "    def test_follow_link(self):\n        self._assert_followed_url(Link('http://example.com/foo'),\n                                  'http://example.com/foo')",
        "begin_line": 154,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_None_url#158",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_None_url(self)",
        "snippet": "    def test_follow_None_url(self):\n        r = self.response_class(\"http://example.com\")\n        self.assertRaises(ValueError, r.follow, None)",
        "begin_line": 158,
        "end_line": 160,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_whitespace_url#162",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_whitespace_url(self)",
        "snippet": "    def test_follow_whitespace_url(self):\n        self._assert_followed_url('foo ',\n                                  'http://example.com/foo%20')",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest.test_follow_whitespace_link#166",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest.test_follow_whitespace_link(self)",
        "snippet": "    def test_follow_whitespace_link(self):\n        self._assert_followed_url(Link('http://example.com/foo '),\n                                  'http://example.com/foo%20')",
        "begin_line": 166,
        "end_line": 168,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest._assert_followed_url#169",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest._assert_followed_url(self, follow_obj, target_url, response=None)",
        "snippet": "    def _assert_followed_url(self, follow_obj, target_url, response=None):\n        if response is None:\n            response = self._links_response()\n        req = response.follow(follow_obj)\n        self.assertEqual(req.url, target_url)\n        return req",
        "begin_line": 169,
        "end_line": 174,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.BaseResponseTest._links_response#176",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.BaseResponseTest",
        "signature": "tests.test_http_response.BaseResponseTest._links_response(self)",
        "snippet": "    def _links_response(self):\n        body = get_testdata('link_extractor', 'sgml_linkextractor.html')\n        resp = self.response_class('http://example.com/index', body=body)\n        return resp",
        "begin_line": 176,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_replace#186",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_replace(self)",
        "snippet": "    def test_replace(self):\n        super(TextResponseTest, self).test_replace()\n        r1 = self.response_class(\"http://www.example.com\", body=\"hello\", encoding=\"cp852\")\n        r2 = r1.replace(url=\"http://www.example.com/other\")\n        r3 = r1.replace(url=\"http://www.example.com/other\", encoding=\"latin1\")\n\n        assert isinstance(r2, self.response_class)\n        self.assertEqual(r2.url, \"http://www.example.com/other\")\n        self._assert_response_encoding(r2, \"cp852\")\n        self.assertEqual(r3.url, \"http://www.example.com/other\")\n        self.assertEqual(r3._declared_encoding(), \"latin1\")",
        "begin_line": 186,
        "end_line": 196,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_unicode_url#198",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_unicode_url(self)",
        "snippet": "    def test_unicode_url(self):\n        # instantiate with unicode url without encoding (should set default encoding)\n        resp = self.response_class(u\"http://www.example.com/\")\n        self._assert_response_encoding(resp, self.response_class._DEFAULT_ENCODING)\n\n        # make sure urls are converted to str\n        resp = self.response_class(url=u\"http://www.example.com/\", encoding='utf-8')\n        assert isinstance(resp.url, str)\n\n        resp = self.response_class(url=u\"http://www.example.com/price/\\xa3\", encoding='utf-8')\n        self.assertEqual(resp.url, to_native_str(b'http://www.example.com/price/\\xc2\\xa3'))\n        resp = self.response_class(url=u\"http://www.example.com/price/\\xa3\", encoding='latin-1')\n        self.assertEqual(resp.url, 'http://www.example.com/price/\\xa3')\n        resp = self.response_class(u\"http://www.example.com/price/\\xa3\", headers={\"Content-type\": [\"text/html; charset=utf-8\"]})\n        self.assertEqual(resp.url, to_native_str(b'http://www.example.com/price/\\xc2\\xa3'))\n        resp = self.response_class(u\"http://www.example.com/price/\\xa3\", headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]})\n        self.assertEqual(resp.url, 'http://www.example.com/price/\\xa3')",
        "begin_line": 198,
        "end_line": 214,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_unicode_body#216",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_unicode_body(self)",
        "snippet": "    def test_unicode_body(self):\n        unicode_string = u'\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439 \\u0442\\u0435\\u043a\\u0441\\u0442'\n        self.assertRaises(TypeError, self.response_class, 'http://www.example.com', body=u'unicode body')\n\n        original_string = unicode_string.encode('cp1251')\n        r1 = self.response_class('http://www.example.com', body=original_string, encoding='cp1251')\n\n        # check body_as_unicode\n        self.assertTrue(isinstance(r1.body_as_unicode(), six.text_type))\n        self.assertEqual(r1.body_as_unicode(), unicode_string)\n\n        # check response.text\n        self.assertTrue(isinstance(r1.text, six.text_type))\n        self.assertEqual(r1.text, unicode_string)",
        "begin_line": 216,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_encoding#231",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_encoding(self)",
        "snippet": "    def test_encoding(self):\n        r1 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=utf-8\"]}, body=b\"\\xc2\\xa3\")\n        r2 = self.response_class(\"http://www.example.com\", encoding='utf-8', body=u\"\\xa3\")\n        r3 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]}, body=b\"\\xa3\")\n        r4 = self.response_class(\"http://www.example.com\", body=b\"\\xa2\\xa3\")\n        r5 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=None\"]}, body=b\"\\xc2\\xa3\")\n        r6 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=gb2312\"]}, body=b\"\\xa8D\")\n        r7 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=gbk\"]}, body=b\"\\xa8D\")\n\n        self.assertEqual(r1._headers_encoding(), \"utf-8\")\n        self.assertEqual(r2._headers_encoding(), None)\n        self.assertEqual(r2._declared_encoding(), 'utf-8')\n        self._assert_response_encoding(r2, 'utf-8')\n        self.assertEqual(r3._headers_encoding(), \"cp1252\")\n        self.assertEqual(r3._declared_encoding(), \"cp1252\")\n        self.assertEqual(r4._headers_encoding(), None)\n        self.assertEqual(r5._headers_encoding(), None)\n        self._assert_response_encoding(r5, \"utf-8\")\n        assert r4._body_inferred_encoding() is not None and r4._body_inferred_encoding() != 'ascii'\n        self._assert_response_values(r1, 'utf-8', u\"\\xa3\")\n        self._assert_response_values(r2, 'utf-8', u\"\\xa3\")\n        self._assert_response_values(r3, 'iso-8859-1', u\"\\xa3\")\n        self._assert_response_values(r6, 'gb18030', u\"\\u2015\")\n        self._assert_response_values(r7, 'gb18030', u\"\\u2015\")\n\n        # TextResponse (and subclasses) must be passed a encoding when instantiating with unicode bodies\n        self.assertRaises(TypeError, self.response_class, \"http://www.example.com\", body=u\"\\xa3\")",
        "begin_line": 231,
        "end_line": 257,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_declared_encoding_invalid#259",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_declared_encoding_invalid(self)",
        "snippet": "    def test_declared_encoding_invalid(self):\n        \"\"\"Check that unknown declared encodings are ignored\"\"\"\n        r = self.response_class(\"http://www.example.com\",\n                                headers={\"Content-type\": [\"text/html; charset=UKNOWN\"]},\n                                body=b\"\\xc2\\xa3\")\n        self.assertEqual(r._declared_encoding(), None)\n        self._assert_response_values(r, 'utf-8', u\"\\xa3\")",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_utf16#267",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_utf16(self)",
        "snippet": "    def test_utf16(self):\n        \"\"\"Test utf-16 because UnicodeDammit is known to have problems with\"\"\"\n        r = self.response_class(\"http://www.example.com\",\n                                body=b'\\xff\\xfeh\\x00i\\x00',\n                                encoding='utf-16')\n        self._assert_response_values(r, 'utf-16', u\"hi\")",
        "begin_line": 267,
        "end_line": 272,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_invalid_utf8_encoded_body_with_valid_utf8_BOM#274",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_invalid_utf8_encoded_body_with_valid_utf8_BOM(self)",
        "snippet": "    def test_invalid_utf8_encoded_body_with_valid_utf8_BOM(self):\n        r6 = self.response_class(\"http://www.example.com\",\n                                 headers={\"Content-type\": [\"text/html; charset=utf-8\"]},\n                                 body=b\"\\xef\\xbb\\xbfWORD\\xe3\\xab\")\n        self.assertEqual(r6.encoding, 'utf-8')\n        self.assertIn(r6.text, {\n            u'WORD\\ufffd\\ufffd',  # w3lib < 1.19.0\n            u'WORD\\ufffd',        # w3lib >= 1.19.0\n        })",
        "begin_line": 274,
        "end_line": 282,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_bom_is_removed_from_body#284",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_bom_is_removed_from_body(self)",
        "snippet": "    def test_bom_is_removed_from_body(self):\n        # Inferring encoding from body also cache decoded body as sideeffect,\n        # this test tries to ensure that calling response.encoding and\n        # response.text in indistint order doesn't affect final\n        # values for encoding and decoded body.\n        url = 'http://example.com'\n        body = b\"\\xef\\xbb\\xbfWORD\"\n        headers = {\"Content-type\": [\"text/html; charset=utf-8\"]}\n\n        # Test response without content-type and BOM encoding\n        response = self.response_class(url, body=body)\n        self.assertEqual(response.encoding, 'utf-8')\n        self.assertEqual(response.text, u'WORD')\n        response = self.response_class(url, body=body)\n        self.assertEqual(response.text, u'WORD')\n        self.assertEqual(response.encoding, 'utf-8')\n\n        # Body caching sideeffect isn't triggered when encoding is declared in\n        # content-type header but BOM still need to be removed from decoded\n        # body\n        response = self.response_class(url, headers=headers, body=body)\n        self.assertEqual(response.encoding, 'utf-8')\n        self.assertEqual(response.text, u'WORD')\n        response = self.response_class(url, headers=headers, body=body)\n        self.assertEqual(response.text, u'WORD')\n        self.assertEqual(response.encoding, 'utf-8')",
        "begin_line": 284,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_replace_wrong_encoding#311",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_replace_wrong_encoding(self)",
        "snippet": "    def test_replace_wrong_encoding(self):\n        \"\"\"Test invalid chars are replaced properly\"\"\"\n        r = self.response_class(\"http://www.example.com\", encoding='utf-8', body=b'PREFIX\\xe3\\xabSUFFIX')\n        # XXX: Policy for replacing invalid chars may suffer minor variations\n        # but it should always contain the unicode replacement char (u'\\ufffd')\n        assert u'\\ufffd' in r.text, repr(r.text)\n        assert u'PREFIX' in r.text, repr(r.text)\n        assert u'SUFFIX' in r.text, repr(r.text)\n\n        # Do not destroy html tags due to encoding bugs\n        r = self.response_class(\"http://example.com\", encoding='utf-8', \\\n                body=b'\\xf0<span>value</span>')\n        assert u'<span>value</span>' in r.text, repr(r.text)",
        "begin_line": 311,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_selector#329",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_selector(self)",
        "snippet": "    def test_selector(self):\n        body = b\"<html><head><title>Some page</title><body></body></html>\"\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertIsInstance(response.selector, Selector)\n        self.assertEqual(response.selector.type, 'html')\n        self.assertIs(response.selector, response.selector)  # property is cached\n        self.assertIs(response.selector.response, response)\n\n        self.assertEqual(\n            response.selector.xpath(\"//title/text()\").extract(),\n            [u'Some page']\n        )\n        self.assertEqual(\n            response.selector.css(\"title::text\").extract(),\n            [u'Some page']\n        )\n        self.assertEqual(\n            response.selector.re(\"Some (.*)</title>\"),\n            [u'page']\n        )",
        "begin_line": 329,
        "end_line": 349,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_selector_shortcuts#351",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_selector_shortcuts(self)",
        "snippet": "    def test_selector_shortcuts(self):\n        body = b\"<html><head><title>Some page</title><body></body></html>\"\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertEqual(\n            response.xpath(\"//title/text()\").extract(),\n            response.selector.xpath(\"//title/text()\").extract(),\n        )\n        self.assertEqual(\n            response.css(\"title::text\").extract(),\n            response.selector.css(\"title::text\").extract(),\n        )",
        "begin_line": 351,
        "end_line": 362,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_selector_shortcuts_kwargs#364",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_selector_shortcuts_kwargs(self)",
        "snippet": "    def test_selector_shortcuts_kwargs(self):\n        body = b\"<html><head><title>Some page</title><body><p class=\\\"content\\\">A nice paragraph.</p></body></html>\"\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertEqual(\n            response.xpath(\"normalize-space(//p[@class=$pclass])\", pclass=\"content\").extract(),\n            response.xpath(\"normalize-space(//p[@class=\\\"content\\\"])\").extract(),\n        )\n        self.assertEqual(\n            response.xpath(\"//title[count(following::p[@class=$pclass])=$pcount]/text()\",\n                pclass=\"content\", pcount=1).extract(),\n            response.xpath(\"//title[count(following::p[@class=\\\"content\\\"])=1]/text()\").extract(),\n        )",
        "begin_line": 364,
        "end_line": 376,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_urljoin_with_base_url#378",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_urljoin_with_base_url(self)",
        "snippet": "    def test_urljoin_with_base_url(self):\n        \"\"\"Test urljoin shortcut which also evaluates base-url through get_base_url().\"\"\"\n        body = b'<html><body><base href=\"https://example.net\"></body></html>'\n        joined = self.response_class('http://www.example.com', body=body).urljoin('/test')\n        absolute = 'https://example.net/test'\n        self.assertEqual(joined, absolute)\n\n        body = b'<html><body><base href=\"/elsewhere\"></body></html>'\n        joined = self.response_class('http://www.example.com', body=body).urljoin('test')\n        absolute = 'http://www.example.com/test'\n        self.assertEqual(joined, absolute)\n\n        body = b'<html><body><base href=\"/elsewhere/\"></body></html>'\n        joined = self.response_class('http://www.example.com', body=body).urljoin('test')\n        absolute = 'http://www.example.com/elsewhere/test'\n        self.assertEqual(joined, absolute)",
        "begin_line": 378,
        "end_line": 393,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_selector#395",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_selector(self)",
        "snippet": "    def test_follow_selector(self):\n        resp = self._links_response()\n        urls = [\n            'http://example.com/sample2.html',\n            'http://example.com/sample3.html',\n            'http://example.com/sample3.html',\n            'http://example.com/sample3.html#foo',\n            'http://www.google.com/something',\n            'http://example.com/innertag.html'\n        ]\n\n        # select <a> elements\n        for sellist in [resp.css('a'), resp.xpath('//a')]:\n            for sel, url in zip(sellist, urls):\n                self._assert_followed_url(sel, url, response=resp)\n\n        # select <link> elements\n        self._assert_followed_url(\n            Selector(text='<link href=\"foo\"></link>').css('link')[0],\n            'http://example.com/foo',\n            response=resp\n        )\n\n        # href attributes should work\n        for sellist in [resp.css('a::attr(href)'), resp.xpath('//a/@href')]:\n            for sel, url in zip(sellist, urls):\n                self._assert_followed_url(sel, url, response=resp)\n\n        # non-a elements are not supported\n        self.assertRaises(ValueError, resp.follow, resp.css('div')[0])",
        "begin_line": 395,
        "end_line": 424,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_selector_list#426",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_selector_list(self)",
        "snippet": "    def test_follow_selector_list(self):\n        resp = self._links_response()\n        self.assertRaisesRegexp(ValueError, 'SelectorList',\n                                resp.follow, resp.css('a'))",
        "begin_line": 426,
        "end_line": 429,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_selector_invalid#431",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_selector_invalid(self)",
        "snippet": "    def test_follow_selector_invalid(self):\n        resp = self._links_response()\n        self.assertRaisesRegexp(ValueError, 'Unsupported',\n                                resp.follow, resp.xpath('count(//div)')[0])",
        "begin_line": 431,
        "end_line": 434,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_selector_attribute#436",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_selector_attribute(self)",
        "snippet": "    def test_follow_selector_attribute(self):\n        resp = self._links_response()\n        for src in resp.css('img::attr(src)'):\n            self._assert_followed_url(src, 'http://example.com/sample2.jpg')",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_selector_no_href#441",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_selector_no_href(self)",
        "snippet": "    def test_follow_selector_no_href(self):\n        resp = self.response_class(\n            url='http://example.com',\n            body=b'<html><body><a name=123>click me</a></body></html>',\n        )\n        self.assertRaisesRegexp(ValueError, 'no href',\n                                resp.follow, resp.css('a')[0])",
        "begin_line": 441,
        "end_line": 447,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_whitespace_selector#449",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_whitespace_selector(self)",
        "snippet": "    def test_follow_whitespace_selector(self):\n        resp = self.response_class(\n            'http://example.com',\n            body=b'''<html><body><a href=\" foo\\n\">click me</a></body></html>'''\n        )\n        self._assert_followed_url(resp.css('a')[0],\n                                 'http://example.com/foo',\n                                  response=resp)\n        self._assert_followed_url(resp.css('a::attr(href)')[0],\n                                 'http://example.com/foo',\n                                  response=resp)",
        "begin_line": 449,
        "end_line": 459,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.TextResponseTest.test_follow_encoding#461",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.TextResponseTest",
        "signature": "tests.test_http_response.TextResponseTest.test_follow_encoding(self)",
        "snippet": "    def test_follow_encoding(self):\n        resp1 = self.response_class(\n            'http://example.com',\n            encoding='utf8',\n            body=u'<html><body><a href=\"foo?\u043f\u0440\u0438\u0432\u0435\u0442\">click me</a></body></html>'.encode('utf8')\n        )\n        req = self._assert_followed_url(\n            resp1.css('a')[0],\n            'http://example.com/foo?%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82',\n            response=resp1,\n        )\n        self.assertEqual(req.encoding, 'utf8')\n\n        resp2 = self.response_class(\n            'http://example.com',\n            encoding='cp1251',\n            body=u'<html><body><a href=\"foo?\u043f\u0440\u0438\u0432\u0435\u0442\">click me</a></body></html>'.encode('cp1251')\n        )\n        req = self._assert_followed_url(\n            resp2.css('a')[0],\n            'http://example.com/foo?%EF%F0%E8%E2%E5%F2',\n            response=resp2,\n        )\n        self.assertEqual(req.encoding, 'cp1251')",
        "begin_line": 461,
        "end_line": 484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.HtmlResponseTest.test_html_encoding#491",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.HtmlResponseTest",
        "signature": "tests.test_http_response.HtmlResponseTest.test_html_encoding(self)",
        "snippet": "    def test_html_encoding(self):\n\n        body = b\"\"\"<html><head><title>Some page</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n        </head><body>Price: \\xa3100</body></html>'\n        \"\"\"\n        r1 = self.response_class(\"http://www.example.com\", body=body)\n        self._assert_response_values(r1, 'iso-8859-1', body)\n\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n        <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n        Price: \\xa3100\n        \"\"\"\n        r2 = self.response_class(\"http://www.example.com\", body=body)\n        self._assert_response_values(r2, 'iso-8859-1', body)\n\n        # for conflicting declarations headers must take precedence\n        body = b\"\"\"<html><head><title>Some page</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n        </head><body>Price: \\xa3100</body></html>'\n        \"\"\"\n        r3 = self.response_class(\"http://www.example.com\", headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]}, body=body)\n        self._assert_response_values(r3, 'iso-8859-1', body)\n\n        # make sure replace() preserves the encoding of the original response\n        body = b\"New body \\xa3\"\n        r4 = r3.replace(body=body)\n        self._assert_response_values(r4, 'iso-8859-1', body)",
        "begin_line": 491,
        "end_line": 516,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.HtmlResponseTest.test_html5_meta_charset#518",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.HtmlResponseTest",
        "signature": "tests.test_http_response.HtmlResponseTest.test_html5_meta_charset(self)",
        "snippet": "    def test_html5_meta_charset(self):\n        body = b\"\"\"<html><head><meta charset=\"gb2312\" /><title>Some page</title><body>bla bla</body>\"\"\"\n        r1 = self.response_class(\"http://www.example.com\", body=body)\n        self._assert_response_values(r1, 'gb2312', body)",
        "begin_line": 518,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.XmlResponseTest.test_xml_encoding#528",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.XmlResponseTest",
        "signature": "tests.test_http_response.XmlResponseTest.test_xml_encoding(self)",
        "snippet": "    def test_xml_encoding(self):\n        body = b\"<xml></xml>\"\n        r1 = self.response_class(\"http://www.example.com\", body=body)\n        self._assert_response_values(r1, self.response_class._DEFAULT_ENCODING, body)\n\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><xml></xml>\"\"\"\n        r2 = self.response_class(\"http://www.example.com\", body=body)\n        self._assert_response_values(r2, 'iso-8859-1', body)\n\n        # make sure replace() preserves the explicit encoding passed in the constructor\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><xml></xml>\"\"\"\n        r3 = self.response_class(\"http://www.example.com\", body=body, encoding='utf-8')\n        body2 = b\"New body\"\n        r4 = r3.replace(body=body2)\n        self._assert_response_values(r4, 'utf-8', body2)",
        "begin_line": 528,
        "end_line": 542,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.XmlResponseTest.test_replace_encoding#544",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.XmlResponseTest",
        "signature": "tests.test_http_response.XmlResponseTest.test_replace_encoding(self)",
        "snippet": "    def test_replace_encoding(self):\n        # make sure replace() keeps the previous encoding unless overridden explicitly\n        body = b\"\"\"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?><xml></xml>\"\"\"\n        body2 = b\"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?><xml></xml>\"\"\"\n        r5 = self.response_class(\"http://www.example.com\", body=body)\n        r6 = r5.replace(body=body2)\n        r7 = r5.replace(body=body2, encoding='utf-8')\n        self._assert_response_values(r5, 'iso-8859-1', body)\n        self._assert_response_values(r6, 'iso-8859-1', body2)\n        self._assert_response_values(r7, 'utf-8', body2)",
        "begin_line": 544,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.XmlResponseTest.test_selector#555",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.XmlResponseTest",
        "signature": "tests.test_http_response.XmlResponseTest.test_selector(self)",
        "snippet": "    def test_selector(self):\n        body = b'<?xml version=\"1.0\" encoding=\"utf-8\"?><xml><elem>value</elem></xml>'\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertIsInstance(response.selector, Selector)\n        self.assertEqual(response.selector.type, 'xml')\n        self.assertIs(response.selector, response.selector)  # property is cached\n        self.assertIs(response.selector.response, response)\n\n        self.assertEqual(\n            response.selector.xpath(\"//elem/text()\").extract(),\n            [u'value']\n        )",
        "begin_line": 555,
        "end_line": 567,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.XmlResponseTest.test_selector_shortcuts#569",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.XmlResponseTest",
        "signature": "tests.test_http_response.XmlResponseTest.test_selector_shortcuts(self)",
        "snippet": "    def test_selector_shortcuts(self):\n        body = b'<?xml version=\"1.0\" encoding=\"utf-8\"?><xml><elem>value</elem></xml>'\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertEqual(\n            response.xpath(\"//elem/text()\").extract(),\n            response.selector.xpath(\"//elem/text()\").extract(),\n        )",
        "begin_line": 569,
        "end_line": 576,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_http_response.XmlResponseTest.test_selector_shortcuts_kwargs#578",
        "src_path": "tests/test_http_response.py",
        "class_name": "tests.test_http_response.XmlResponseTest",
        "signature": "tests.test_http_response.XmlResponseTest.test_selector_shortcuts_kwargs(self)",
        "snippet": "    def test_selector_shortcuts_kwargs(self):\n        body = b'''<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <xml xmlns:somens=\"http://scrapy.org\">\n        <somens:elem>value</somens:elem>\n        </xml>'''\n        response = self.response_class(\"http://www.example.com\", body=body)\n\n        self.assertEqual(\n            response.xpath(\"//s:elem/text()\", namespaces={'s': 'http://scrapy.org'}).extract(),\n            response.selector.xpath(\"//s:elem/text()\", namespaces={'s': 'http://scrapy.org'}).extract(),\n        )\n\n        response.selector.register_namespace('s2', 'http://scrapy.org')\n        self.assertEqual(\n            response.xpath(\"//s1:elem/text()\", namespaces={'s1': 'http://scrapy.org'}).extract(),\n            response.selector.xpath(\"//s2:elem/text()\").extract(),\n        )",
        "begin_line": 578,
        "end_line": 594,
        "comment": "",
        "is_bug": false
    }
]