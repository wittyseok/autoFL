[
    {
        "name": "test.server_test._is_running_from_main_thread#44",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test",
        "signature": "test.server_test._is_running_from_main_thread()",
        "snippet": "def _is_running_from_main_thread():\n    \"\"\"\n    Return true if we're the same thread as the one that created the Tornado\n    IOLoop. In practice, the problem is that we get annoying intermittent\n    failures because sometimes the KeepAliveThread jumps in and \"disturbs\" the\n    intended flow of the test case. Worse, it fails in the terrible way that\n    the KeepAliveThread is kept alive, bugging the execution of subsequent test\n    casses.\n\n    Oh, I so wish Tornado would explicitly say that you're acessing it from\n    different threads and things will just not work.\n    \"\"\"\n    return tornado.ioloop.IOLoop.current(instance=False)",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTestBase.get_app#61",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTestBase",
        "signature": "test.server_test.ServerTestBase.get_app(self)",
        "snippet": "    def get_app(self):\n        return luigi.server.app(Scheduler())",
        "begin_line": 61,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTestBase.setUp#64",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTestBase",
        "signature": "test.server_test.ServerTestBase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(ServerTestBase, self).setUp()\n\n        self._old_fetch = luigi.rpc.RemoteScheduler._fetch\n\n        def _fetch(obj, url, body, *args, **kwargs):\n            if _is_running_from_main_thread():\n                body = urlencode(body).encode('utf-8')\n                response = self.fetch(url, body=body, method='POST')\n                if response.code >= 400:\n                    raise luigi.rpc.RPCError(\n                        'Errror when connecting to remote scheduler'\n                    )\n                return response.body.decode('utf-8')\n\n        luigi.rpc.RemoteScheduler._fetch = _fetch",
        "begin_line": 64,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTestBase._fetch#69",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTestBase",
        "signature": "test.server_test.ServerTestBase._fetch(obj, url, body, *args, **kwargs)",
        "snippet": "        def _fetch(obj, url, body, *args, **kwargs):\n            if _is_running_from_main_thread():\n                body = urlencode(body).encode('utf-8')\n                response = self.fetch(url, body=body, method='POST')\n                if response.code >= 400:\n                    raise luigi.rpc.RPCError(\n                        'Errror when connecting to remote scheduler'\n                    )\n                return response.body.decode('utf-8')",
        "begin_line": 69,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTestBase.tearDown#81",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTestBase",
        "signature": "test.server_test.ServerTestBase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(ServerTestBase, self).tearDown()\n        luigi.rpc.RemoteScheduler._fetch = self._old_fetch",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.setUp#88",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        super(ServerTest, self).setUp()\n        get_config().remove_section('cors')\n        self._default_cors = luigi.server.cors()\n\n        get_config().set('cors', 'enabled', 'true')\n        get_config().set('cors', 'allow_any_origin', 'true')\n        get_config().set('cors', 'allow_null_origin', 'true')",
        "begin_line": 88,
        "end_line": 95,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.tearDown#97",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(ServerTest, self).tearDown()\n        get_config().remove_section('cors')",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_visualiser#101",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_visualiser(self)",
        "snippet": "    def test_visualiser(self):\n        page = self.fetch('/').body\n        self.assertTrue(page.find(b'<title>') != -1)",
        "begin_line": 101,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest._test_404#105",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest._test_404(self, path)",
        "snippet": "    def _test_404(self, path):\n        response = self.fetch(path)\n        self.assertEqual(response.code, 404)",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_404#109",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_404(self)",
        "snippet": "    def test_404(self):\n        self._test_404('/foo')",
        "begin_line": 109,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_404#112",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_404(self)",
        "snippet": "    def test_api_404(self):\n        self._test_404('/api/foo')",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers#115",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers(self)",
        "snippet": "    def test_api_preflight_cors_headers(self):\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertEqual(self._default_cors.allowed_headers,\n                         headers['Access-Control-Allow-Headers'])\n        self.assertEqual(self._default_cors.allowed_methods,\n                         headers['Access-Control-Allow-Methods'])\n        self.assertEqual('*', headers['Access-Control-Allow-Origin'])\n        self.assertEqual(str(self._default_cors.max_age), headers['Access-Control-Max-Age'])\n        self.assertIsNone(headers.get('Access-Control-Allow-Credentials'))\n        self.assertIsNone(headers.get('Access-Control-Expose-Headers'))",
        "begin_line": 115,
        "end_line": 126,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_all_response_headers#128",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_all_response_headers(self)",
        "snippet": "    def test_api_preflight_cors_headers_all_response_headers(self):\n        get_config().set('cors', 'allow_credentials', 'true')\n        get_config().set('cors', 'exposed_headers', 'foo, bar')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertEqual(self._default_cors.allowed_headers,\n                         headers['Access-Control-Allow-Headers'])\n        self.assertEqual(self._default_cors.allowed_methods,\n                         headers['Access-Control-Allow-Methods'])\n        self.assertEqual('*', headers['Access-Control-Allow-Origin'])\n        self.assertEqual(str(self._default_cors.max_age), headers['Access-Control-Max-Age'])\n        self.assertEqual('true', headers['Access-Control-Allow-Credentials'])\n        self.assertEqual('foo, bar', headers['Access-Control-Expose-Headers'])",
        "begin_line": 128,
        "end_line": 141,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_null_origin#143",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_null_origin(self)",
        "snippet": "    def test_api_preflight_cors_headers_null_origin(self):\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'null'})\n        headers = dict(response.headers)\n\n        self.assertEqual(self._default_cors.allowed_headers,\n                         headers['Access-Control-Allow-Headers'])\n        self.assertEqual(self._default_cors.allowed_methods,\n                         headers['Access-Control-Allow-Methods'])\n        self.assertEqual('null', headers['Access-Control-Allow-Origin'])\n        self.assertEqual(str(self._default_cors.max_age), headers['Access-Control-Max-Age'])\n        self.assertIsNone(headers.get('Access-Control-Allow-Credentials'))\n        self.assertIsNone(headers.get('Access-Control-Expose-Headers'))",
        "begin_line": 143,
        "end_line": 154,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_null#156",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_null(self)",
        "snippet": "    def test_api_preflight_cors_headers_disallow_null(self):\n        get_config().set('cors', 'allow_null_origin', 'false')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'null'})\n        headers = dict(response.headers)\n\n        self.assertNotIn('Access-Control-Allow-Headers', headers)\n        self.assertNotIn('Access-Control-Allow-Methods', headers)\n        self.assertNotIn('Access-Control-Allow-Origin', headers)\n        self.assertNotIn('Access-Control-Max-Age', headers)\n        self.assertNotIn('Access-Control-Allow-Credentials', headers)\n        self.assertNotIn('Access-Control-Expose-Headers', headers)",
        "begin_line": 156,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any#168",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any(self)",
        "snippet": "    def test_api_preflight_cors_headers_disallow_any(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        get_config().set('cors', 'allowed_origins', '[\"foo\", \"bar\"]')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertEqual(self._default_cors.allowed_headers,\n                         headers['Access-Control-Allow-Headers'])\n        self.assertEqual(self._default_cors.allowed_methods,\n                         headers['Access-Control-Allow-Methods'])\n        self.assertEqual('foo', headers['Access-Control-Allow-Origin'])\n        self.assertEqual(str(self._default_cors.max_age), headers['Access-Control-Max-Age'])\n        self.assertIsNone(headers.get('Access-Control-Allow-Credentials'))\n        self.assertIsNone(headers.get('Access-Control-Expose-Headers'))",
        "begin_line": 168,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any_no_matched_allowed_origins#183",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any_no_matched_allowed_origins(self)",
        "snippet": "    def test_api_preflight_cors_headers_disallow_any_no_matched_allowed_origins(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        get_config().set('cors', 'allowed_origins', '[\"foo\", \"bar\"]')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foobar'})\n        headers = dict(response.headers)\n\n        self.assertNotIn('Access-Control-Allow-Headers', headers)\n        self.assertNotIn('Access-Control-Allow-Methods', headers)\n        self.assertNotIn('Access-Control-Allow-Origin', headers)\n        self.assertNotIn('Access-Control-Max-Age', headers)\n        self.assertNotIn('Access-Control-Allow-Credentials', headers)\n        self.assertNotIn('Access-Control-Expose-Headers', headers)",
        "begin_line": 183,
        "end_line": 194,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any_no_allowed_origins#196",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_disallow_any_no_allowed_origins(self)",
        "snippet": "    def test_api_preflight_cors_headers_disallow_any_no_allowed_origins(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertNotIn('Access-Control-Allow-Headers', headers)\n        self.assertNotIn('Access-Control-Allow-Methods', headers)\n        self.assertNotIn('Access-Control-Allow-Origin', headers)\n        self.assertNotIn('Access-Control-Max-Age', headers)\n        self.assertNotIn('Access-Control-Allow-Credentials', headers)\n        self.assertNotIn('Access-Control-Expose-Headers', headers)",
        "begin_line": 196,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_disabled#208",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_disabled(self)",
        "snippet": "    def test_api_preflight_cors_headers_disabled(self):\n        get_config().set('cors', 'enabled', 'false')\n        response = self.fetch('/api/graph', method='OPTIONS', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertNotIn('Access-Control-Allow-Headers', headers)\n        self.assertNotIn('Access-Control-Allow-Methods', headers)\n        self.assertNotIn('Access-Control-Allow-Origin', headers)\n        self.assertNotIn('Access-Control-Max-Age', headers)\n        self.assertNotIn('Access-Control-Allow-Credentials', headers)\n        self.assertNotIn('Access-Control-Expose-Headers', headers)",
        "begin_line": 208,
        "end_line": 218,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_preflight_cors_headers_no_origin_header#220",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_preflight_cors_headers_no_origin_header(self)",
        "snippet": "    def test_api_preflight_cors_headers_no_origin_header(self):\n        response = self.fetch('/api/graph', method='OPTIONS')\n        headers = dict(response.headers)\n\n        self.assertNotIn('Access-Control-Allow-Headers', headers)\n        self.assertNotIn('Access-Control-Allow-Methods', headers)\n        self.assertNotIn('Access-Control-Allow-Origin', headers)\n        self.assertNotIn('Access-Control-Max-Age', headers)\n        self.assertNotIn('Access-Control-Allow-Credentials', headers)\n        self.assertNotIn('Access-Control-Expose-Headers', headers)",
        "begin_line": 220,
        "end_line": 229,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers#231",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers(self)",
        "snippet": "    def test_api_cors_headers(self):\n        response = self.fetch('/api/graph', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertEqual('*', headers['Access-Control-Allow-Origin'])",
        "begin_line": 231,
        "end_line": 235,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_null_origin#237",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_null_origin(self)",
        "snippet": "    def test_api_cors_headers_null_origin(self):\n        response = self.fetch('/api/graph', headers={'Origin': 'null'})\n        headers = dict(response.headers)\n\n        self.assertEqual('null', headers['Access-Control-Allow-Origin'])",
        "begin_line": 237,
        "end_line": 241,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_disallow_null#243",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_disallow_null(self)",
        "snippet": "    def test_api_cors_headers_disallow_null(self):\n        get_config().set('cors', 'allow_null_origin', 'false')\n        response = self.fetch('/api/graph', headers={'Origin': 'null'})\n        headers = dict(response.headers)\n\n        self.assertIsNone(headers.get('Access-Control-Allow-Origin'))",
        "begin_line": 243,
        "end_line": 248,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_disallow_any#250",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_disallow_any(self)",
        "snippet": "    def test_api_cors_headers_disallow_any(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        get_config().set('cors', 'allowed_origins', '[\"foo\", \"bar\"]')\n        response = self.fetch('/api/graph', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertEqual('foo', headers['Access-Control-Allow-Origin'])",
        "begin_line": 250,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_disallow_any_no_matched_allowed_origins#258",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_disallow_any_no_matched_allowed_origins(self)",
        "snippet": "    def test_api_cors_headers_disallow_any_no_matched_allowed_origins(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        get_config().set('cors', 'allowed_origins', '[\"foo\", \"bar\"]')\n        response = self.fetch('/api/graph', headers={'Origin': 'foobar'})\n        headers = dict(response.headers)\n\n        self.assertIsNone(headers.get('Access-Control-Allow-Origin'))",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_disallow_any_no_allowed_origins#266",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_disallow_any_no_allowed_origins(self)",
        "snippet": "    def test_api_cors_headers_disallow_any_no_allowed_origins(self):\n        get_config().set('cors', 'allow_any_origin', 'false')\n        response = self.fetch('/api/graph', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertIsNone(headers.get('Access-Control-Allow-Origin'))",
        "begin_line": 266,
        "end_line": 271,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_disabled#273",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_disabled(self)",
        "snippet": "    def test_api_cors_headers_disabled(self):\n        get_config().set('cors', 'enabled', 'false')\n        response = self.fetch('/api/graph', headers={'Origin': 'foo'})\n        headers = dict(response.headers)\n\n        self.assertIsNone(headers.get('Access-Control-Allow-Origin'))",
        "begin_line": 273,
        "end_line": 278,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerTest.test_api_cors_headers_no_origin_header#280",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerTest",
        "signature": "test.server_test.ServerTest.test_api_cors_headers_no_origin_header(self)",
        "snippet": "    def test_api_cors_headers_no_origin_header(self):\n        response = self.fetch('/api/graph')\n        headers = dict(response.headers)\n\n        self.assertIsNone(headers.get('Access-Control-Allow-Origin'))",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.start_server#293",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.start_server(self)",
        "snippet": "    def start_server(self):\n        self._process = multiprocessing.Process(\n            target=self.server_client.run_server\n        )\n        self._process.start()\n        time.sleep(0.1)  # wait for server to start\n        self.sch = self.server_client.scheduler()\n        self.sch._wait = lambda: None",
        "begin_line": 293,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.stop_server#302",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.stop_server(self)",
        "snippet": "    def stop_server(self):\n        self._process.terminate()\n        self._process.join(timeout=1)\n        if self._process.is_alive():\n            os.kill(self._process.pid, signal.SIGKILL)",
        "begin_line": 302,
        "end_line": 306,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.setUp#308",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.server_client = self.server_client_class()\n        state_path = tempfile.mktemp(suffix=self.id())\n        self.addCleanup(functools.partial(os.unlink, state_path))\n        luigi.configuration.get_config().set('scheduler', 'state_path', state_path)\n        self.start_server()",
        "begin_line": 308,
        "end_line": 313,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.tearDown#315",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.stop_server()",
        "begin_line": 315,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.test_ping#319",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.test_ping(self)",
        "snippet": "    def test_ping(self):\n        self.sch.ping(worker='xyz')",
        "begin_line": 319,
        "end_line": 320,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.test_raw_ping#323",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.test_raw_ping(self)",
        "snippet": "    def test_raw_ping(self):\n        self.sch._request('/api/ping', {'worker': 'xyz'})",
        "begin_line": 323,
        "end_line": 324,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.test_raw_ping_extended#327",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.test_raw_ping_extended(self)",
        "snippet": "    def test_raw_ping_extended(self):\n        self.sch._request('/api/ping', {'worker': 'xyz', 'foo': 'bar'})",
        "begin_line": 327,
        "end_line": 328,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.test_404#331",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.test_404(self)",
        "snippet": "    def test_404(self):\n        with self.assertRaises(luigi.rpc.RPCError):\n            self.sch._request('/api/fdsfds', {'dummy': 1})",
        "begin_line": 331,
        "end_line": 333,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._ServerTest.test_save_state#336",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._ServerTest",
        "signature": "test.server_test._ServerTest.test_save_state(self)",
        "snippet": "    def test_save_state(self):\n        self.sch.add_task(worker='X', task_id='B', deps=('A',))\n        self.sch.add_task(worker='X', task_id='A')\n        self.assertEqual(self.sch.get_work(worker='X')['task_id'], 'A')\n        self.stop_server()\n        self.start_server()\n        work = self.sch.get_work(worker='X')['running_tasks'][0]\n        self.assertEqual(work['task_id'], 'A')",
        "begin_line": 336,
        "end_line": 343,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.__init__#349",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.__init__(self)",
        "snippet": "        def __init__(self):\n            self.tempdir = tempfile.mkdtemp()\n            self.unix_socket = os.path.join(self.tempdir, 'luigid.sock')",
        "begin_line": 349,
        "end_line": 351,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.run_server#353",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.run_server(self)",
        "snippet": "        def run_server(self):\n            luigi.server.run(unix_socket=self.unix_socket)",
        "begin_line": 353,
        "end_line": 354,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.scheduler#356",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.scheduler(self)",
        "snippet": "        def scheduler(self):\n            url = ParseResult(\n                scheme='http+unix',\n                netloc=urlquote(self.unix_socket, safe=''),\n                path='',\n                params='',\n                query='',\n                fragment='',\n            ).geturl()\n            return luigi.rpc.RemoteScheduler(url)",
        "begin_line": 356,
        "end_line": 365,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.UNIXServerTest.tearDown#369",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.UNIXServerTest",
        "signature": "test.server_test.UNIXServerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(UNIXServerTest, self).tearDown()\n        shutil.rmtree(self.server_client.tempdir)",
        "begin_line": 369,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.INETServerClient.__init__#375",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.INETServerClient",
        "signature": "test.server_test.INETServerClient.__init__(self)",
        "snippet": "    def __init__(self):\n        # Just some port\n        self.port = 8083",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.INETServerClient.scheduler#379",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.INETServerClient",
        "signature": "test.server_test.INETServerClient.scheduler(self)",
        "snippet": "    def scheduler(self):\n        return luigi.rpc.RemoteScheduler('http://localhost:' + str(self.port))",
        "begin_line": 379,
        "end_line": 380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test._INETServerTest.test_with_cmdline#385",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test._INETServerTest",
        "signature": "test.server_test._INETServerTest.test_with_cmdline(self)",
        "snippet": "    def test_with_cmdline(self):\n        \"\"\"\n        Test to run against the server as a normal luigi invocation does\n        \"\"\"\n        params = ['Task', '--scheduler-port', str(self.server_client.port), '--no-lock']\n        self.assertTrue(luigi.interface.run(params))",
        "begin_line": 385,
        "end_line": 390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.run_server#395",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.run_server(self)",
        "snippet": "        def run_server(self):\n            luigi.server.run(api_port=self.port, address='127.0.0.1')",
        "begin_line": 395,
        "end_line": 396,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.INETURLLibServerTest.start_server#404",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.INETURLLibServerTest",
        "signature": "test.server_test.INETURLLibServerTest.start_server(self, *args, **kwargs)",
        "snippet": "    def start_server(self, *args, **kwargs):\n        super(INETURLLibServerTest, self).start_server(*args, **kwargs)",
        "begin_line": 404,
        "end_line": 405,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.INETURLLibServerTest.patching_test#408",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.INETURLLibServerTest",
        "signature": "test.server_test.INETURLLibServerTest.patching_test(self)",
        "snippet": "    def patching_test(self):\n        \"\"\"\n        Check that HAS_REQUESTS patching is meaningful\n        \"\"\"\n        fetcher1 = luigi.rpc.RemoteScheduler()._fetcher\n        with mock.patch.object(luigi.rpc, 'HAS_REQUESTS', False):\n            fetcher2 = luigi.rpc.RemoteScheduler()._fetcher\n\n        self.assertNotEqual(fetcher1.__class__, fetcher2.__class__)",
        "begin_line": 408,
        "end_line": 416,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.run_server#421",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.run_server(self)",
        "snippet": "        def run_server(self):\n            # I first tried to things like \"subprocess.call(['luigid', ...]),\n            # But it ended up to be a total mess getting the cleanup to work\n            # unfortunately.\n            luigi.cmdline.luigid(['--port', str(self.port)])",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.__init__#433",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.__init__(self)",
        "snippet": "        def __init__(self):\n            super(INETLuigidDaemonServerTest.ServerClient, self).__init__()\n            self.tempdir = tempfile.mkdtemp()",
        "begin_line": 433,
        "end_line": 435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.ServerClient.run_server#438",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.ServerClient",
        "signature": "test.server_test.ServerClient.run_server(self, daemon_context)",
        "snippet": "        def run_server(self, daemon_context):\n            luigi.cmdline.luigid([\n                '--port', str(self.port),\n                '--background',  # This makes it a daemon\n                '--logdir', self.tempdir,\n                '--pidfile', os.path.join(self.tempdir, 'luigid.pid')\n            ])",
        "begin_line": 438,
        "end_line": 444,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.INETLuigidDaemonServerTest.tearDown#446",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.INETLuigidDaemonServerTest",
        "signature": "test.server_test.INETLuigidDaemonServerTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(INETLuigidDaemonServerTest, self).tearDown()\n        shutil.rmtree(self.server_client.tempdir)",
        "begin_line": 446,
        "end_line": 448,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.MetricsHandlerTest.setUp#454",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.MetricsHandlerTest",
        "signature": "test.server_test.MetricsHandlerTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mock_scheduler = mock.MagicMock()\n        self.handler = luigi.server.MetricsHandler(tornado.web.Application(), mock.MagicMock(),\n                                                   scheduler=self.mock_scheduler)",
        "begin_line": 454,
        "end_line": 457,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.MetricsHandlerTest.test_initialize#459",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.MetricsHandlerTest",
        "signature": "test.server_test.MetricsHandlerTest.test_initialize(self)",
        "snippet": "    def test_initialize(self):\n        self.assertIs(self.handler._scheduler, self.mock_scheduler)",
        "begin_line": 459,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.MetricsHandlerTest.test_get#462",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.MetricsHandlerTest",
        "signature": "test.server_test.MetricsHandlerTest.test_get(self)",
        "snippet": "    def test_get(self):\n        mock_metrics = mock.MagicMock()\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = mock_metrics\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_called_once_with(mock_metrics)\n            self.mock_scheduler._state._metrics_collector.configure_http_handler.assert_called_once_with(\n                self.handler)",
        "begin_line": 462,
        "end_line": 469,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.server_test.MetricsHandlerTest.test_get_no_metrics#471",
        "src_path": "test/server_test.py",
        "class_name": "test.server_test.MetricsHandlerTest",
        "signature": "test.server_test.MetricsHandlerTest.test_get_no_metrics(self)",
        "snippet": "    def test_get_no_metrics(self):\n        self.mock_scheduler._state._metrics_collector.generate_latest.return_value = None\n        with mock.patch.object(self.handler, 'write') as patched_write:\n            self.handler.get()\n            patched_write.assert_not_called()",
        "begin_line": 471,
        "end_line": 475,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__init__#90",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 90,
        "end_line": 92,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#94",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#99",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#108",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 108,
        "end_line": 125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#110",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 110,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#130",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#137",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#147",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#152",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()\n        luigi.task_register.Register.clear_instance_cache()",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#157",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 157,
        "end_line": 166,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#168",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#182",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#191",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.temporary_unloaded_module#197",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.temporary_unloaded_module(python_file_contents)",
        "snippet": "def temporary_unloaded_module(python_file_contents):\n    \"\"\" Create an importable module\n\n    Return the name of importable module name given its file contents (source\n    code) \"\"\"\n    with tempfile.NamedTemporaryFile(\n            dir='test/',\n            prefix=\"_test_time_generated_module\",\n            suffix='.py') as temp_module_file:\n        temp_module_file.file.write(python_file_contents)\n        temp_module_file.file.flush()\n        temp_module_path = temp_module_file.name\n        temp_module_name = re.search(r'/(_test_time_generated_module.*).py',\n                                     temp_module_path).group(1)\n        yield temp_module_name",
        "begin_line": 197,
        "end_line": 211,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]