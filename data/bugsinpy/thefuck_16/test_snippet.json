[
    {
        "name": "tests.shells.test_bash.TestBash.shell#11",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.shell(self)",
        "snippet": "    def shell(self):\n        return Bash()",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.shell_aliases#15",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.shell_aliases(self)",
        "snippet": "    def shell_aliases(self):\n        os.environ['TF_SHELL_ALIASES'] = (\n            'alias fuck=\\'eval $(thefuck $(fc -ln -1))\\'\\n'\n            'alias l=\\'ls -CF\\'\\n'\n            'alias la=\\'ls -A\\'\\n'\n            'alias ll=\\'ls -alF\\'')",
        "begin_line": 15,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_from_shell#27",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_from_shell(self, before, after, shell)",
        "snippet": "    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_to_shell#30",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_to_shell(self, shell)",
        "snippet": "    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'",
        "begin_line": 30,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_and_#33",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_and_(self, shell)",
        "snippet": "    def test_and_(self, shell):\n        assert shell.and_('ls', 'cd') == 'ls && cd'",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_get_aliases#36",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_get_aliases(self, shell)",
        "snippet": "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fuck': 'eval $(thefuck $(fc -ln -1))',\n                                       'l': 'ls -CF',\n                                       'la': 'ls -A',\n                                       'll': 'ls -alF'}",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_app_alias#42",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_app_alias(self, shell)",
        "snippet": "    def test_app_alias(self, shell):\n        assert 'alias fuck' in shell.app_alias('fuck')\n        assert 'alias FUCK' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'TF_ALIAS=fuck' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING=utf-8' in shell.app_alias('fuck')",
        "begin_line": 42,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_app_alias_variables_correctly_set#49",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_app_alias_variables_correctly_set(self, shell)",
        "snippet": "    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\n        assert '$(TF_ALIAS=fuck PYTHONIOENCODING' in alias\n        assert 'PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES' in alias\n        assert 'ALIASES=$(alias) thefuck' in alias",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_bash.TestBash.test_get_history#56",
        "src_path": "tests/shells/test_bash.py",
        "class_name": "tests.shells.test_bash.TestBash",
        "signature": "tests.shells.test_bash.TestBash.test_get_history(self, history_lines, shell)",
        "snippet": "    def test_get_history(self, history_lines, shell):\n        history_lines(['ls', 'rm'])\n        assert list(shell.get_history()) == ['ls', 'rm']",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.shell#11",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.shell(self)",
        "snippet": "    def shell(self):\n        return Zsh()",
        "begin_line": 11,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.shell_aliases#15",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.shell_aliases(self)",
        "snippet": "    def shell_aliases(self):\n        os.environ['TF_SHELL_ALIASES'] = (\n            'fuck=\\'eval $(thefuck $(fc -ln -1 | tail -n 1))\\'\\n'\n            'l=\\'ls -CF\\'\\n'\n            'la=\\'ls -A\\'\\n'\n            'll=\\'ls -alF\\'')",
        "begin_line": 15,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_from_shell#26",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_from_shell(self, before, after, shell)",
        "snippet": "    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after",
        "begin_line": 26,
        "end_line": 27,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_to_shell#29",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_to_shell(self, shell)",
        "snippet": "    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_and_#32",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_and_(self, shell)",
        "snippet": "    def test_and_(self, shell):\n        assert shell.and_('ls', 'cd') == 'ls && cd'",
        "begin_line": 32,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_get_aliases#35",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_get_aliases(self, shell)",
        "snippet": "    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {\n            'fuck': 'eval $(thefuck $(fc -ln -1 | tail -n 1))',\n            'l': 'ls -CF',\n            'la': 'ls -A',\n            'll': 'ls -alF'}",
        "begin_line": 35,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_app_alias#42",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_app_alias(self, shell)",
        "snippet": "    def test_app_alias(self, shell):\n        assert 'alias fuck' in shell.app_alias('fuck')\n        assert 'alias FUCK' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING' in shell.app_alias('fuck')",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_app_alias_variables_correctly_set#48",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_app_alias_variables_correctly_set(self, shell)",
        "snippet": "    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"alias fuck='TF_CMD=$(TF_ALIAS\" in alias\n        assert '$(TF_ALIAS=fuck PYTHONIOENCODING' in alias\n        assert 'PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES' in alias\n        assert 'ALIASES=$(alias) thefuck' in alias",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.test_zsh.TestZsh.test_get_history#55",
        "src_path": "tests/shells/test_zsh.py",
        "class_name": "tests.shells.test_zsh.TestZsh",
        "signature": "tests.shells.test_zsh.TestZsh.test_get_history(self, history_lines, shell)",
        "snippet": "    def test_get_history(self, history_lines, shell):\n        history_lines([': 1432613911:0;ls', ': 1432613916:0;rm'])\n        assert list(shell.get_history()) == ['ls', 'rm']",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_memoize#17",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_memoize(monkeypatch)",
        "snippet": "def no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)",
        "begin_line": 17,
        "end_line": 18,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest._reset_settings#23",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest._reset_settings()",
        "snippet": "    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.settings#22",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.settings(request)",
        "snippet": "def settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings",
        "begin_line": 22,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_colors#33",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_colors(settings)",
        "snippet": "def no_colors(settings):\n    settings.no_colors = True",
        "begin_line": 33,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.no_cache#38",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.no_cache(monkeypatch)",
        "snippet": "def no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)",
        "begin_line": 38,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.functional#43",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.functional(request)",
        "snippet": "def functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.source_root#50",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.source_root()",
        "snippet": "def source_root():\n    return Path(__file__).parent.parent.resolve()",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Command.__init__#6",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Command",
        "signature": "tests.utils.Command.__init__(self, script='', stdout='', stderr='')",
        "snippet": "    def __init__(self, script='', stdout='', stderr=''):\n        super(Command, self).__init__(script, stdout, stderr)",
        "begin_line": 6,
        "end_line": 7,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.Rule.__init__#11",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.Rule",
        "signature": "tests.utils.Rule.__init__(self, name='', match=lambda *_: True, get_new_command=lambda *_: '', enabled_by_default=True, side_effect=None, priority=DEFAULT_PRIORITY, requires_output=True)",
        "snippet": "    def __init__(self, name='', match=lambda *_: True,\n                 get_new_command=lambda *_: '',\n                 enabled_by_default=True,\n                 side_effect=None,\n                 priority=DEFAULT_PRIORITY,\n                 requires_output=True):\n        super(Rule, self).__init__(name, match, get_new_command,\n                                   enabled_by_default, side_effect,\n                                   priority, requires_output)",
        "begin_line": 11,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.utils.CorrectedCommand.__init__#23",
        "src_path": "tests/utils.py",
        "class_name": "tests.utils.CorrectedCommand",
        "signature": "tests.utils.CorrectedCommand.__init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY)",
        "snippet": "    def __init__(self, script='', side_effect=None, priority=DEFAULT_PRIORITY):\n        super(CorrectedCommand, self).__init__(\n            script, side_effect, priority)",
        "begin_line": 23,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.isfile#10",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.isfile(mocker)",
        "snippet": "def isfile(mocker):\n    return mocker.patch('os.path.isfile', return_value=True)",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.aux#17",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.aux(lines)",
        "snippet": "    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines",
        "begin_line": 17,
        "end_line": 20,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.shells.conftest.history_lines#16",
        "src_path": "tests/shells/conftest.py",
        "class_name": "tests.shells.conftest",
        "signature": "tests.shells.conftest.history_lines(mocker)",
        "snippet": "def history_lines(mocker):\n    def aux(lines):\n        mock = mocker.patch('io.open')\n        mock.return_value.__enter__ \\\n            .return_value.readlines.return_value = lines\n\n    return aux",
        "begin_line": 16,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    }
]