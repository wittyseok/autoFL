[
    {
        "name": "test.helpers.with_config.__init__#87",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__init__(self, config, replace_sections=False)",
        "snippet": "    def __init__(self, config, replace_sections=False):\n        self.config = config\n        self.replace_sections = replace_sections",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config._make_dict#91",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config._make_dict(self, old_dict)",
        "snippet": "    def _make_dict(self, old_dict):\n        if self.replace_sections:\n            old_dict.update(self.config)\n            return old_dict\n\n        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec\n\n        all_sections = itertools.chain(old_dict.keys(), self.config.keys())\n        return {sec: get_section(sec) for sec in all_sections}",
        "begin_line": 91,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.get_section#96",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.get_section(sec)",
        "snippet": "        def get_section(sec):\n            old_sec = old_dict.get(sec, {})\n            new_sec = self.config.get(sec, {})\n            old_sec.update(new_sec)\n            return old_sec",
        "begin_line": 96,
        "end_line": 100,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.__call__#105",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf\n        return wrapper",
        "begin_line": 105,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.with_config.wrapper#107",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.with_config",
        "signature": "test.helpers.with_config.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            import luigi.configuration\n            orig_conf = luigi.configuration.LuigiConfigParser.instance()\n            new_conf = luigi.configuration.LuigiConfigParser()\n            luigi.configuration.LuigiConfigParser._instance = new_conf\n            orig_dict = {k: dict(orig_conf.items(k)) for k in orig_conf.sections()}\n            new_dict = self._make_dict(orig_dict)\n            for (section, settings) in six.iteritems(new_dict):\n                new_conf.add_section(section)\n                for (name, value) in six.iteritems(settings):\n                    new_conf.set(section, name, value)\n            try:\n                return fun(*args, **kwargs)\n            finally:\n                luigi.configuration.LuigiConfigParser._instance = orig_conf",
        "begin_line": 107,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.__init__#127",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        super(RunOnceTask, self).__init__(*args, **kwargs)\n        self.comp = False",
        "begin_line": 127,
        "end_line": 129,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.complete#131",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.complete(self)",
        "snippet": "    def complete(self):\n        return self.comp",
        "begin_line": 131,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.RunOnceTask.run#134",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.RunOnceTask",
        "signature": "test.helpers.RunOnceTask.run(self)",
        "snippet": "    def run(self):\n        self.comp = True",
        "begin_line": 134,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.setUp#142",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        super(LuigiTestCase, self).setUp()\n        self._stashed_reg = luigi.task_register.Register._get_reg()",
        "begin_line": 142,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.tearDown#146",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        luigi.task_register.Register._set_reg(self._stashed_reg)\n        super(LuigiTestCase, self).tearDown()",
        "begin_line": 146,
        "end_line": 148,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally#150",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally(self, args)",
        "snippet": "    def run_locally(self, args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        temp = CmdlineParser._instance\n        try:\n            CmdlineParser._instance = None\n            run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)\n        finally:\n            CmdlineParser._instance = temp\n        return run_exit_status",
        "begin_line": 150,
        "end_line": 159,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.LuigiTestCase.run_locally_split#161",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.LuigiTestCase",
        "signature": "test.helpers.LuigiTestCase.run_locally_split(self, space_seperated_args)",
        "snippet": "    def run_locally_split(self, space_seperated_args):\n        \"\"\" Helper for running tests testing more of the stack, the command\n        line parsing and task from name intstantiation parts in particular. \"\"\"\n        return self.run_locally(space_seperated_args.split(' '))",
        "begin_line": 161,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.__call__#175",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.__call__(self, fun)",
        "snippet": "    def __call__(self, fun):\n        @functools.wraps(fun)\n        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)\n\n        return wrapper",
        "begin_line": 175,
        "end_line": 181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.parsing.wrapper#177",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers.parsing",
        "signature": "test.helpers.parsing.wrapper(*args, **kwargs)",
        "snippet": "        def wrapper(*args, **kwargs):\n            with CmdlineParser.global_instance(self.cmds, allow_override=True):\n                return fun(*args, **kwargs)",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.helpers.in_parse#184",
        "src_path": "test/helpers.py",
        "class_name": "test.helpers",
        "signature": "test.helpers.in_parse(cmds, deferred_computation)",
        "snippet": "def in_parse(cmds, deferred_computation):\n    with CmdlineParser.global_instance(cmds) as cp:\n        deferred_computation(cp.get_task_obj())",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.setUp#41",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.setUp(self)",
        "snippet": "    def setUp(self):\n        self.path = self.PATH_PREFIX + '-' + str(self.id())\n        self.copy = self.PATH_PREFIX + '-copy-' + str(self.id())\n        if os.path.exists(self.path):\n            os.remove(self.path)\n        if os.path.exists(self.copy):\n            os.remove(self.copy)",
        "begin_line": 41,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.tearDown#49",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        if os.path.exists(self.path):\n            os.remove(self.path)\n        if os.path.exists(self.copy):\n            os.remove(self.copy)",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.create_target#55",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.create_target(self, format=None)",
        "snippet": "    def create_target(self, format=None):\n        return LocalTarget(self.path, format=format)",
        "begin_line": 55,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.assertCleanUp#58",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.assertCleanUp(self, tmp_path='')",
        "snippet": "    def assertCleanUp(self, tmp_path=''):\n        self.assertFalse(os.path.exists(tmp_path))",
        "begin_line": 58,
        "end_line": 59,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_exists#61",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_exists(self)",
        "snippet": "    def test_exists(self):\n        t = self.create_target()\n        p = t.open('w')\n        self.assertEqual(t.exists(), os.path.exists(self.path))\n        p.close()\n        self.assertEqual(t.exists(), os.path.exists(self.path))",
        "begin_line": 61,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_gzip_with_module#68",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_gzip_with_module(self)",
        "snippet": "    def test_gzip_with_module(self):\n        t = LocalTarget(self.path, luigi.format.Gzip)\n        p = t.open('w')\n        test_data = b'test'\n        p.write(test_data)\n        print(self.path)\n        self.assertFalse(os.path.exists(self.path))\n        p.close()\n        self.assertTrue(os.path.exists(self.path))\n\n        # Using gzip module as validation\n        f = gzip.open(self.path, 'r')\n        self.assertTrue(test_data == f.read())\n        f.close()\n\n        # Verifying our own gzip reader\n        f = LocalTarget(self.path, luigi.format.Gzip).open('r')\n        self.assertTrue(test_data == f.read())\n        f.close()",
        "begin_line": 68,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_bzip2#88",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_bzip2(self)",
        "snippet": "    def test_bzip2(self):\n        t = LocalTarget(self.path, luigi.format.Bzip2)\n        p = t.open('w')\n        test_data = b'test'\n        p.write(test_data)\n        print(self.path)\n        self.assertFalse(os.path.exists(self.path))\n        p.close()\n        self.assertTrue(os.path.exists(self.path))\n\n        # Using bzip module as validation\n        f = bz2.BZ2File(self.path, 'r')\n        self.assertTrue(test_data == f.read())\n        f.close()\n\n        # Verifying our own bzip2 reader\n        f = LocalTarget(self.path, luigi.format.Bzip2).open('r')\n        self.assertTrue(test_data == f.read())\n        f.close()",
        "begin_line": 88,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_copy#108",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_copy(self)",
        "snippet": "    def test_copy(self):\n        t = LocalTarget(self.path)\n        f = t.open('w')\n        test_data = 'test'\n        f.write(test_data)\n        f.close()\n        self.assertTrue(os.path.exists(self.path))\n        self.assertFalse(os.path.exists(self.copy))\n        t.copy(self.copy)\n        self.assertTrue(os.path.exists(self.path))\n        self.assertTrue(os.path.exists(self.copy))\n        self.assertEqual(t.open('r').read(), LocalTarget(self.copy).open('r').read())",
        "begin_line": 108,
        "end_line": 119,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_move#121",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_move(self)",
        "snippet": "    def test_move(self):\n        t = LocalTarget(self.path)\n        f = t.open('w')\n        test_data = 'test'\n        f.write(test_data)\n        f.close()\n        self.assertTrue(os.path.exists(self.path))\n        self.assertFalse(os.path.exists(self.copy))\n        t.move(self.copy)\n        self.assertFalse(os.path.exists(self.path))\n        self.assertTrue(os.path.exists(self.copy))",
        "begin_line": 121,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_format_chain#133",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_format_chain(self)",
        "snippet": "    def test_format_chain(self):\n        UTF8WIN = luigi.format.TextFormat(encoding='utf8', newline='\\r\\n')\n        t = LocalTarget(self.path, UTF8WIN >> luigi.format.Gzip)\n        a = u'\u6211\u00e9\\n\u00e7\u0444'\n\n        with t.open('w') as f:\n            f.write(a)\n\n        f = gzip.open(self.path, 'rb')\n        b = f.read()\n        f.close()\n\n        self.assertEqual(b'\\xe6\\x88\\x91\\xc3\\xa9\\r\\n\\xc3\\xa7\\xd1\\x84', b)",
        "begin_line": 133,
        "end_line": 145,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_format_chain_reverse#147",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_format_chain_reverse(self)",
        "snippet": "    def test_format_chain_reverse(self):\n        t = LocalTarget(self.path, luigi.format.UTF8 >> luigi.format.Gzip)\n\n        f = gzip.open(self.path, 'wb')\n        f.write(b'\\xe6\\x88\\x91\\xc3\\xa9\\r\\n\\xc3\\xa7\\xd1\\x84')\n        f.close()\n\n        with t.open('r') as f:\n            b = f.read()\n\n        self.assertEqual(u'\u6211\u00e9\\n\u00e7\u0444', b)",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_format_newline#160",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_format_newline(self)",
        "snippet": "    def test_format_newline(self):\n        t = LocalTarget(self.path, luigi.format.SysNewLine)\n\n        with t.open('w') as f:\n            f.write(b'a\\rb\\nc\\r\\nd')\n\n        with t.open('r') as f:\n            b = f.read()\n\n        with open(self.path, 'rb') as f:\n            c = f.read()\n\n        self.assertEqual(b'a\\nb\\nc\\nd', b)\n        self.assertEqual(b'a\\r\\nb\\r\\nc\\r\\nd', c)",
        "begin_line": 160,
        "end_line": 173,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.theoretical_io_modes#175",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.theoretical_io_modes(self, rwax='rwax', bt=['', 'b', 't'], plus=['', '+'])",
        "snippet": "    def theoretical_io_modes(\n            self,\n            rwax='rwax',\n            bt=['', 'b', 't'],\n            plus=['', '+']):\n        p = itertools.product(rwax, plus, bt)\n        return set([''.join(c) for c in list(\n            itertools.chain.from_iterable(\n                [itertools.permutations(m) for m in p]))])",
        "begin_line": 175,
        "end_line": 183,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.valid_io_modes#185",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.valid_io_modes(self, *a, **kw)",
        "snippet": "    def valid_io_modes(self, *a, **kw):\n        modes = set()\n        t = LocalTarget(is_tmp=True)\n        t.open('w').close()\n        for mode in self.theoretical_io_modes(*a, **kw):\n            try:\n                io.FileIO(t.path, mode).close()\n            except ValueError:\n                pass\n            except IOError as err:\n                if err.errno == EEXIST:\n                    modes.add(mode)\n                else:\n                    raise\n            else:\n                modes.add(mode)\n        return modes",
        "begin_line": 185,
        "end_line": 201,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.valid_write_io_modes_for_luigi#203",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.valid_write_io_modes_for_luigi(self)",
        "snippet": "    def valid_write_io_modes_for_luigi(self):\n        return self.valid_io_modes('w', plus=[''])",
        "begin_line": 203,
        "end_line": 204,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.valid_read_io_modes_for_luigi#206",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.valid_read_io_modes_for_luigi(self)",
        "snippet": "    def valid_read_io_modes_for_luigi(self):\n        return self.valid_io_modes('r', plus=[''])",
        "begin_line": 206,
        "end_line": 207,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.invalid_io_modes_for_luigi#209",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.invalid_io_modes_for_luigi(self)",
        "snippet": "    def invalid_io_modes_for_luigi(self):\n        return self.valid_io_modes().difference(\n            self.valid_write_io_modes_for_luigi(),\n            self.valid_read_io_modes_for_luigi())",
        "begin_line": 209,
        "end_line": 212,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.LocalTargetTest.test_open_modes#214",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.LocalTargetTest",
        "signature": "test.file_test.LocalTargetTest.test_open_modes(self)",
        "snippet": "    def test_open_modes(self):\n        t = LocalTarget(is_tmp=True)\n        print('Valid write mode:', end=' ')\n        for mode in self.valid_write_io_modes_for_luigi():\n            print(mode, end=' ')\n            p = t.open(mode)\n            p.close()\n        print()\n        print('Valid read mode:', end=' ')\n        for mode in self.valid_read_io_modes_for_luigi():\n            print(mode, end=' ')\n            p = t.open(mode)\n            p.close()\n        print()\n        print('Invalid mode:', end=' ')\n        for mode in self.invalid_io_modes_for_luigi():\n            print(mode, end=' ')\n            self.assertRaises(Exception, t.open, mode)\n        print()",
        "begin_line": 214,
        "end_line": 232,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.TmpFileTest.test_tmp#248",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.TmpFileTest",
        "signature": "test.file_test.TmpFileTest.test_tmp(self)",
        "snippet": "    def test_tmp(self):\n        t = LocalTarget(is_tmp=True)\n        self.assertFalse(t.exists())\n        self.assertFalse(os.path.exists(t.path))\n        p = t.open('w')\n        print('test', file=p)\n        self.assertFalse(t.exists())\n        self.assertFalse(os.path.exists(t.path))\n        p.close()\n        self.assertTrue(t.exists())\n        self.assertTrue(os.path.exists(t.path))\n\n        q = t.open('r')\n        self.assertEqual(q.readline(), 'test\\n')\n        q.close()\n        path = t.path\n        del t  # should remove the underlying file\n        self.assertFalse(os.path.exists(path))",
        "begin_line": 248,
        "end_line": 265,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.setUp#272",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.setUp(self)",
        "snippet": "    def setUp(self):\n        if os.path.exists(self.path):\n            shutil.rmtree(self.path)",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.tearDown#276",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.tearDown(self)",
        "snippet": "    def tearDown(self):\n        self.setUp()",
        "begin_line": 276,
        "end_line": 277,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.test_mkdir#279",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.test_mkdir(self)",
        "snippet": "    def test_mkdir(self):\n        testpath = os.path.join(self.path, 'foo/bar')\n\n        self.assertRaises(MissingParentDirectory, self.fs.mkdir, testpath, parents=False)\n\n        self.fs.mkdir(testpath)\n        self.assertTrue(os.path.exists(testpath))\n        self.assertTrue(self.fs.isdir(testpath))\n\n        self.assertRaises(FileAlreadyExists, self.fs.mkdir, testpath, raise_if_exists=True)",
        "begin_line": 279,
        "end_line": 288,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.test_exists#290",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.test_exists(self)",
        "snippet": "    def test_exists(self):\n        self.assertFalse(self.fs.exists(self.path))\n        os.mkdir(self.path)\n        self.assertTrue(self.fs.exists(self.path))\n        self.assertTrue(self.fs.isdir(self.path))",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.test_listdir#296",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.test_listdir(self)",
        "snippet": "    def test_listdir(self):\n        os.mkdir(self.path)\n        with open(self.path + '/file', 'w'):\n            pass\n        self.assertTrue([self.path + '/file'], list(self.fs.listdir(self.path + '/')))",
        "begin_line": 296,
        "end_line": 300,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.FileSystemTest.test_move_to_new_dir#302",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.FileSystemTest",
        "signature": "test.file_test.FileSystemTest.test_move_to_new_dir(self)",
        "snippet": "    def test_move_to_new_dir(self):\n        # Regression test for a bug in LocalFileSystem.move\n        src = os.path.join(self.path, 'src.txt')\n        dest = os.path.join(self.path, 'newdir', 'dest.txt')\n\n        LocalTarget(src).open('w').close()\n        self.fs.move(src, dest)\n        self.assertTrue(os.path.exists(dest))",
        "begin_line": 302,
        "end_line": 309,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.file_test.TestImportFile.test_file#314",
        "src_path": "test/file_test.py",
        "class_name": "test.file_test.TestImportFile",
        "signature": "test.file_test.TestImportFile.test_file(self)",
        "snippet": "    def test_file(self):\n        from luigi.file import File\n        self.assertTrue(isinstance(File('foo'), LocalTarget))",
        "begin_line": 314,
        "end_line": 316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.output#24",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.output(self)",
        "snippet": "    def output(self):\n        return luigi.LocalTarget(self.p)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.other_module.OtherModuleTask.run#27",
        "src_path": "test/other_module.py",
        "class_name": "test.other_module.OtherModuleTask",
        "signature": "test.other_module.OtherModuleTask.run(self)",
        "snippet": "    def run(self):\n        with self.output().open('w') as f:\n            f.write('Done!')",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    }
]