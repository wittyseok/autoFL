[
    {
        "name": "tests.keras.legacy.conftest.clear_session_after_test#6",
        "src_path": "tests/keras/legacy/conftest.py",
        "class_name": "tests.keras.legacy.conftest",
        "signature": "tests.keras.legacy.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"This wrapper runs for all the tests in the legacy directory (recursively).\n    \"\"\"\n    with warnings.catch_warnings():\n        warnings.filterwarnings('ignore', message=r'(.+) Keras 2 ',\n                                category=UserWarning)\n        yield",
        "begin_line": 6,
        "end_line": 12,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.build_fn_clf#27",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.build_fn_clf(hidden_dims)",
        "snippet": "def build_fn_clf(hidden_dims):\n    model = Sequential()\n    model.add(Dense(input_dim, input_shape=(input_dim,)))\n    model.add(Activation('relu'))\n    model.add(Dense(hidden_dims))\n    model.add(Activation('relu'))\n    model.add(Dense(num_classes))\n    model.add(Activation('softmax'))\n    model.compile(optimizer='sgd', loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n    return model",
        "begin_line": 27,
        "end_line": 37,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_classify_build_fn#40",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_classify_build_fn()",
        "snippet": "def test_classify_build_fn():\n    clf = KerasClassifier(\n        build_fn=build_fn_clf, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_classification_works(clf)\n    assert_string_classification_works(clf)",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_classify_class_build_fn#49",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_classify_class_build_fn()",
        "snippet": "def test_classify_class_build_fn():\n    class ClassBuildFnClf(object):\n\n        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)\n\n    clf = KerasClassifier(\n        build_fn=ClassBuildFnClf(), hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_classification_works(clf)\n    assert_string_classification_works(clf)",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf.test_classify_class_build_fn#49",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf",
        "signature": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf.test_classify_class_build_fn()",
        "snippet": "def test_classify_class_build_fn():\n    class ClassBuildFnClf(object):\n\n        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)\n\n    clf = KerasClassifier(\n        build_fn=ClassBuildFnClf(), hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_classification_works(clf)\n    assert_string_classification_works(clf)",
        "begin_line": 49,
        "end_line": 60,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf.__call__#52",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf",
        "signature": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnClf.__call__(self, hidden_dims)",
        "snippet": "        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)",
        "begin_line": 52,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_classify_inherit_class_build_fn#63",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_classify_inherit_class_build_fn()",
        "snippet": "def test_classify_inherit_class_build_fn():\n    class InheritClassBuildFnClf(KerasClassifier):\n\n        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)\n\n    clf = InheritClassBuildFnClf(\n        build_fn=None, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_classification_works(clf)\n    assert_string_classification_works(clf)",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf.test_classify_inherit_class_build_fn#63",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf",
        "signature": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf.test_classify_inherit_class_build_fn()",
        "snippet": "def test_classify_inherit_class_build_fn():\n    class InheritClassBuildFnClf(KerasClassifier):\n\n        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)\n\n    clf = InheritClassBuildFnClf(\n        build_fn=None, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_classification_works(clf)\n    assert_string_classification_works(clf)",
        "begin_line": 63,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf.__call__#66",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf",
        "signature": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnClf.__call__(self, hidden_dims)",
        "snippet": "        def __call__(self, hidden_dims):\n            return build_fn_clf(hidden_dims)",
        "begin_line": 66,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.assert_classification_works#77",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.assert_classification_works(clf)",
        "snippet": "def assert_classification_works(clf):\n    clf.fit(X_train, y_train, sample_weight=np.ones(X_train.shape[0]),\n            batch_size=batch_size, epochs=epochs)\n\n    score = clf.score(X_train, y_train, batch_size=batch_size)\n    assert np.isscalar(score) and np.isfinite(score)\n\n    preds = clf.predict(X_test, batch_size=batch_size)\n    assert preds.shape == (num_test, )\n    for prediction in np.unique(preds):\n        assert prediction in range(num_classes)\n\n    proba = clf.predict_proba(X_test, batch_size=batch_size)\n    assert proba.shape == (num_test, num_classes)\n    assert np.allclose(np.sum(proba, axis=1), np.ones(num_test))",
        "begin_line": 77,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.assert_string_classification_works#94",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.assert_string_classification_works(clf)",
        "snippet": "def assert_string_classification_works(clf):\n    string_classes = ['cls{}'.format(x) for x in range(num_classes)]\n    str_y_train = np.array(string_classes)[y_train]\n\n    clf.fit(X_train, str_y_train, batch_size=batch_size, epochs=epochs)\n\n    score = clf.score(X_train, str_y_train, batch_size=batch_size)\n    assert np.isscalar(score) and np.isfinite(score)\n\n    preds = clf.predict(X_test, batch_size=batch_size)\n    assert preds.shape == (num_test, )\n    for prediction in np.unique(preds):\n        assert prediction in string_classes\n\n    proba = clf.predict_proba(X_test, batch_size=batch_size)\n    assert proba.shape == (num_test, num_classes)\n    assert np.allclose(np.sum(proba, axis=1), np.ones(num_test))",
        "begin_line": 94,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.build_fn_reg#113",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.build_fn_reg(hidden_dims=50)",
        "snippet": "def build_fn_reg(hidden_dims=50):\n    model = Sequential()\n    model.add(Dense(input_dim, input_shape=(input_dim,)))\n    model.add(Activation('relu'))\n    model.add(Dense(hidden_dims))\n    model.add(Activation('relu'))\n    model.add(Dense(1))\n    model.add(Activation('linear'))\n    model.compile(optimizer='sgd', loss='mean_absolute_error',\n                  metrics=['accuracy'])\n    return model",
        "begin_line": 113,
        "end_line": 123,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_regression_build_fn#126",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_regression_build_fn()",
        "snippet": "def test_regression_build_fn():\n    reg = KerasRegressor(\n        build_fn=build_fn_reg, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_regression_works(reg)",
        "begin_line": 126,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_regression_class_build_fn#134",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_regression_class_build_fn()",
        "snippet": "def test_regression_class_build_fn():\n    class ClassBuildFnReg(object):\n\n        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)\n\n    reg = KerasRegressor(\n        build_fn=ClassBuildFnReg(), hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_regression_works(reg)",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg.test_regression_class_build_fn#134",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg",
        "signature": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg.test_regression_class_build_fn()",
        "snippet": "def test_regression_class_build_fn():\n    class ClassBuildFnReg(object):\n\n        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)\n\n    reg = KerasRegressor(\n        build_fn=ClassBuildFnReg(), hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_regression_works(reg)",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg.__call__#137",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg",
        "signature": "tests.keras.wrappers.scikit_learn_test.ClassBuildFnReg.__call__(self, hidden_dims)",
        "snippet": "        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)",
        "begin_line": 137,
        "end_line": 138,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_regression_inherit_class_build_fn#147",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_regression_inherit_class_build_fn()",
        "snippet": "def test_regression_inherit_class_build_fn():\n    class InheritClassBuildFnReg(KerasRegressor):\n\n        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)\n\n    reg = InheritClassBuildFnReg(\n        build_fn=None, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_regression_works(reg)",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg.test_regression_inherit_class_build_fn#147",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg",
        "signature": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg.test_regression_inherit_class_build_fn()",
        "snippet": "def test_regression_inherit_class_build_fn():\n    class InheritClassBuildFnReg(KerasRegressor):\n\n        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)\n\n    reg = InheritClassBuildFnReg(\n        build_fn=None, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n\n    assert_regression_works(reg)",
        "begin_line": 147,
        "end_line": 157,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg.__call__#150",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg",
        "signature": "tests.keras.wrappers.scikit_learn_test.InheritClassBuildFnReg.__call__(self, hidden_dims)",
        "snippet": "        def __call__(self, hidden_dims):\n            return build_fn_reg(hidden_dims)",
        "begin_line": 150,
        "end_line": 151,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.assert_regression_works#160",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.assert_regression_works(reg)",
        "snippet": "def assert_regression_works(reg):\n    reg.fit(X_train, y_train, batch_size=batch_size, epochs=epochs)\n\n    score = reg.score(X_train, y_train, batch_size=batch_size)\n    assert np.isscalar(score) and np.isfinite(score)\n\n    preds = reg.predict(X_test, batch_size=batch_size)\n    assert preds.shape == (num_test, )",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_regression_predict_shape_correct_num_test_0#170",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_regression_predict_shape_correct_num_test_0()",
        "snippet": "def test_regression_predict_shape_correct_num_test_0():\n    assert_regression_predict_shape_correct(num_test=0)",
        "begin_line": 170,
        "end_line": 171,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.test_regression_predict_shape_correct_num_test_1#174",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.test_regression_predict_shape_correct_num_test_1()",
        "snippet": "def test_regression_predict_shape_correct_num_test_1():\n    assert_regression_predict_shape_correct(num_test=1)",
        "begin_line": 174,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.keras.wrappers.scikit_learn_test.assert_regression_predict_shape_correct#178",
        "src_path": "tests/keras/wrappers/scikit_learn_test.py",
        "class_name": "tests.keras.wrappers.scikit_learn_test",
        "signature": "tests.keras.wrappers.scikit_learn_test.assert_regression_predict_shape_correct(num_test)",
        "snippet": "def assert_regression_predict_shape_correct(num_test):\n    reg = KerasRegressor(\n        build_fn=build_fn_reg, hidden_dims=hidden_dims,\n        batch_size=batch_size, epochs=epochs)\n    reg.fit(X_train, y_train, batch_size=batch_size, epochs=epochs)\n\n    preds = reg.predict(X_test[:num_test], batch_size=batch_size)\n    assert preds.shape == (num_test, )",
        "begin_line": 178,
        "end_line": 185,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.conftest.clear_session_after_test#6",
        "src_path": "tests/conftest.py",
        "class_name": "tests.conftest",
        "signature": "tests.conftest.clear_session_after_test()",
        "snippet": "def clear_session_after_test():\n    \"\"\"Test wrapper to clean up after TensorFlow and CNTK tests.\n\n    This wrapper runs for all the tests in the keras test suite.\n    \"\"\"\n    yield\n    if K.backend() == 'tensorflow' or K.backend() == 'cntk':\n        K.clear_session()",
        "begin_line": 6,
        "end_line": 13,
        "comment": "",
        "is_bug": false
    }
]