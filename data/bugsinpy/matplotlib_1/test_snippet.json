[
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight#14",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight()",
        "snippet": "def test_bbox_inches_tight():\n    #: Test that a figure saved using bbox_inches='tight' is clipped correctly\n    data = [[66386, 174296, 75131, 577908, 32015],\n            [58230, 381139, 78045, 99308, 160454],\n            [89135, 80552, 152558, 497981, 603535],\n            [78415, 81858, 150656, 193263, 69638],\n            [139361, 331509, 343164, 781380, 52269]]\n\n    colLabels = rowLabels = [''] * 5\n\n    rows = len(data)\n    ind = np.arange(len(colLabels)) + 0.3  # the x locations for the groups\n    cellText = []\n    width = 0.4     # the width of the bars\n    yoff = np.zeros(len(colLabels))\n    # the bottom values for stacked bar chart\n    fig, ax = plt.subplots(1, 1)\n    for row in range(rows):\n        ax.bar(ind, data[row], width, bottom=yoff, align='edge', color='b')\n        yoff = yoff + data[row]\n        cellText.append([''])\n    plt.xticks([])\n    plt.xlim(0, 5)\n    plt.legend([''] * 5, loc=(1.2, 0.2))\n    fig.legend([''] * 5, bbox_to_anchor=(0, 0.2), loc='lower left')\n    # Add a table at the bottom of the axes\n    cellText.reverse()\n    plt.table(cellText=cellText, rowLabels=rowLabels, colLabels=colLabels,\n              loc='bottom')",
        "begin_line": 14,
        "end_line": 42,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_suptile_legend#47",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_suptile_legend()",
        "snippet": "def test_bbox_inches_tight_suptile_legend():\n    plt.plot(np.arange(10), label='a straight line')\n    plt.legend(bbox_to_anchor=(0.9, 1), loc='upper left')\n    plt.title('Axis title')\n    plt.suptitle('Figure title')\n\n    # put an extra long y tick on to see that the bbox is accounted for\n    def y_formatter(y, pos):\n        if int(y) == 4:\n            return 'The number 4'\n        else:\n            return str(y)\n    plt.gca().yaxis.set_major_formatter(FuncFormatter(y_formatter))\n\n    plt.xlabel('X axis')",
        "begin_line": 47,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.y_formatter#54",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.y_formatter(y, pos)",
        "snippet": "    def y_formatter(y, pos):\n        if int(y) == 4:\n            return 'The number 4'\n        else:\n            return str(y)",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_clipping#66",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_clipping()",
        "snippet": "def test_bbox_inches_tight_clipping():\n    # tests bbox clipping on scatter points, and path clipping on a patch\n    # to generate an appropriately tight bbox\n    plt.scatter(np.arange(10), np.arange(10))\n    ax = plt.gca()\n    ax.set_xlim([0, 5])\n    ax.set_ylim([0, 5])\n\n    # make a massive rectangle and clip it with a path\n    patch = mpatches.Rectangle([-50, -50], 100, 100,\n                               transform=ax.transData,\n                               facecolor='blue', alpha=0.5)\n\n    path = mpath.Path.unit_regular_star(5).deepcopy()\n    path.vertices *= 0.25\n    patch.set_clip_path(path, transform=ax.transAxes)\n    plt.gcf().artists.append(patch)",
        "begin_line": 66,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_raster#87",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_bbox_inches_tight_raster()",
        "snippet": "def test_bbox_inches_tight_raster():\n    \"\"\"Test rasterization with tight_layout\"\"\"\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.plot([1.0, 2.0], rasterized=True)",
        "begin_line": 87,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_only_on_non_finite_bbox#94",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_only_on_non_finite_bbox()",
        "snippet": "def test_only_on_non_finite_bbox():\n    fig, ax = plt.subplots()\n    ax.annotate(\"\", xy=(0, float('nan')))\n    ax.set_axis_off()\n    # we only need to test that it does not error out on save\n    fig.savefig(BytesIO(), bbox_inches='tight', format='png')",
        "begin_line": 94,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_tight_pcolorfast#102",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_tight_pcolorfast()",
        "snippet": "def test_tight_pcolorfast():\n    fig, ax = plt.subplots()\n    ax.pcolorfast(np.arange(4).reshape((2, 2)))\n    ax.set(ylim=(0, .1))\n    buf = BytesIO()\n    fig.savefig(buf, bbox_inches=\"tight\")\n    buf.seek(0)\n    height, width, _ = plt.imread(buf).shape\n    # Previously, the bbox would include the area of the image clipped out by\n    # the axes, resulting in a very tall image given the y limits of (0, 0.1).\n    assert width > height",
        "begin_line": 102,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_bbox_tight.test_noop_tight_bbox#115",
        "src_path": "lib/matplotlib/tests/test_bbox_tight.py",
        "class_name": "lib.matplotlib.tests.test_bbox_tight",
        "signature": "lib.matplotlib.tests.test_bbox_tight.test_noop_tight_bbox()",
        "snippet": "def test_noop_tight_bbox():\n    from PIL import Image\n    x_size, y_size = (10, 7)\n    dpi = 100\n    # make the figure just the right size up front\n    fig = plt.figure(frameon=False, dpi=dpi, figsize=(x_size/dpi, y_size/dpi))\n    ax = plt.Axes(fig, [0., 0., 1., 1.])\n    fig.add_axes(ax)\n    ax.set_axis_off()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n    data = np.arange(x_size * y_size).reshape(y_size, x_size)\n    ax.imshow(data)\n    out = BytesIO()\n    fig.savefig(out, bbox_inches='tight', pad_inches=0)\n    out.seek(0)\n    im = np.asarray(Image.open(out))\n    assert (im[:, :, 3] == 255).all()\n    assert not (im[:, :, :3] == 255).all()\n    assert im.shape == (7, 10, 4)",
        "begin_line": 115,
        "end_line": 135,
        "comment": "",
        "is_bug": false
    }
]