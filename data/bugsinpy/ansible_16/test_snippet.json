[
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__#10",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__init__(self, details)",
        "snippet": "    def __init__(self, details):\n        self.details = details",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__#13",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Failure.__str__(self)",
        "snippet": "    def __str__(self):\n        return str(self.details)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__#18",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__init__(self, uri, transport=None, encoding=None, verbose=0, allow_none=1, ignore_ssl=False)",
        "snippet": "    def __init__(self, uri, transport=None, encoding=None, verbose=0,\n                 allow_none=1, ignore_ssl=False):\n\n        self.transport = transport\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version#27",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._get_api_version(self)",
        "snippet": "    def _get_api_version(self):\n        return FAKE_API_VERSION",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._login#30",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._login(self, method, params)",
        "snippet": "    def _login(self, method, params):\n        self._session = \"OpaqueRef:fake-xenapi-session-ref\"\n        self.last_login_method = method\n        self.last_login_params = params\n        self.API_version = self._get_api_version()",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout#36",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session._logout(self)",
        "snippet": "    def _logout(self):\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request#42",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.xenapi_request(self, methodname, params)",
        "snippet": "    def xenapi_request(self, methodname, params):\n        if methodname.startswith('login'):\n            self._login(methodname, params)\n            return None\n        elif methodname == 'logout' or methodname == 'session.logout':\n            self._logout()\n            return None\n        else:\n            # Should be patched with mocker.patch().\n            return None",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__#53",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI.Session",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.Session.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        if name == 'handle':\n            return self._session\n        elif name == 'xenapi':\n            # Should be patched with mocker.patch().\n            return None\n        elif name.startswith('login') or name.startswith('slave_local'):\n            return lambda *params: self._login(name, params)\n        elif name == 'logout':\n            return self._logout",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local#65",
        "src_path": "test/units/module_utils/xenserver/FakeXenAPI.py",
        "class_name": "test.units.module_utils.xenserver.FakeXenAPI",
        "signature": "test.units.module_utils.xenserver.FakeXenAPI.xapi_local()",
        "snippet": "def xapi_local():\n    return Session(\"http://_var_lib_xcp_xapi/\")",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.packaging.os.conftest.mock_request#12",
        "src_path": "test/units/modules/packaging/os/conftest.py",
        "class_name": "test.units.modules.packaging.os.conftest",
        "signature": "test.units.modules.packaging.os.conftest.mock_request(request, mocker)",
        "snippet": "def mock_request(request, mocker):\n    responses = request.getfixturevalue('testcase')['calls']\n    module_name = request.module.TESTED_MODULE\n\n    def transport_request(host, handler, request_body, verbose=0):\n        \"\"\"Fake request\"\"\"\n        method_name = get_method_name(request_body)\n        excepted_name, response = responses.pop(0)\n        if method_name == excepted_name:\n            if isinstance(response, Exception):\n                raise response\n            else:\n                return response\n        else:\n            raise Exception('Expected call: %r, called with: %r' % (excepted_name, method_name))\n\n    target = '{0}.xmlrpc_client.Transport.request'.format(module_name)\n    mocker.patch(target, side_effect=transport_request)",
        "begin_line": 12,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.packaging.os.conftest.transport_request#16",
        "src_path": "test/units/modules/packaging/os/conftest.py",
        "class_name": "test.units.modules.packaging.os.conftest",
        "signature": "test.units.modules.packaging.os.conftest.transport_request(host, handler, request_body, verbose=0)",
        "snippet": "    def transport_request(host, handler, request_body, verbose=0):\n        \"\"\"Fake request\"\"\"\n        method_name = get_method_name(request_body)\n        excepted_name, response = responses.pop(0)\n        if method_name == excepted_name:\n            if isinstance(response, Exception):\n                raise response\n            else:\n                return response\n        else:\n            raise Exception('Expected call: %r, called with: %r' % (excepted_name, method_name))",
        "begin_line": 16,
        "end_line": 26,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.files.TestModule.tests#29",
        "src_path": "lib/ansible/plugins/test/files.py",
        "class_name": "lib.ansible.plugins.test.files.TestModule",
        "signature": "lib.ansible.plugins.test.files.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # file testing\n            'is_dir': isdir,\n            'directory': isdir,\n            'is_file': isfile,\n            'file': isfile,\n            'is_link': islink,\n            'link': islink,\n            'exists': exists,\n            'link_exists': lexists,\n\n            # path testing\n            'is_abs': isabs,\n            'abs': isabs,\n            'is_same_file': samefile,\n            'same_file': samefile,\n            'is_mount': ismount,\n            'mount': ismount,\n        }",
        "begin_line": 29,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.load_fixture#32",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module#52",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed#71",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed#79",
        "src_path": "test/units/modules/network/eric_eccli/eccli_module.py",
        "class_name": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule",
        "signature": "test.units.modules.network.eric_eccli.eccli_module.TestEccliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.load_fixture#16",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module",
        "signature": "test.units.modules.network.icx.icx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 16,
        "end_line": 31,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config#37",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.set_running_config(self)",
        "snippet": "    def set_running_config(self):\n        self.ENV_ICX_USE_DIFF = self.get_running_config()",
        "begin_line": 37,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config#40",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.get_running_config(self, compare=None)",
        "snippet": "    def get_running_config(self, compare=None):\n        if compare is not None:\n            diff = compare\n        elif os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') is not None:\n            if os.environ.get('ANSIBLE_CHECK_ICX_RUNNING_CONFIG') == 'False':\n                diff = False\n            else:\n                diff = True\n        else:\n            diff = True\n        return diff",
        "begin_line": 40,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module#52",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, fields=None):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']))\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        if fields is not None:\n            for key in fields:\n                if fields.get(key) is not None:\n                    self.assertEqual(fields.get(key), result.get(key))\n\n        return result",
        "begin_line": 52,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.failed#76",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 76,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.icx.icx_module.TestICXModule.changed#84",
        "src_path": "test/units/modules/network/icx/icx_module.py",
        "class_name": "test.units.modules.network.icx.icx_module.TestICXModule",
        "signature": "test.units.modules.network.icx.icx_module.TestICXModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 84,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed#73",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed#81",
        "src_path": "test/units/modules/network/dellos10/dellos10_module.py",
        "class_name": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module",
        "signature": "test.units.modules.network.dellos10.dellos10_module.TestDellos10Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.load_fixture#35",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module",
        "signature": "test.units.modules.network.enos.enos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 35,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module#63",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 63,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.failed#85",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json#86",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.changed#98",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 98,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json#99",
        "src_path": "test/units/modules/network/enos/enos_module.py",
        "class_name": "test.units.modules.network.enos.enos_module.TestEnosModule",
        "signature": "test.units.modules.network.enos.enos_module.TestEnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module",
        "signature": "test.units.modules.network.edgeos.edgeos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed#69",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed#77",
        "src_path": "test/units/modules/network/edgeos/edgeos_module.py",
        "class_name": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule",
        "signature": "test.units.modules.network.edgeos.edgeos_module.TestEdgeosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.load_fixture#37",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module",
        "signature": "test.units.modules.network.junos.junos_module.load_fixture(name, content='xml')",
        "snippet": "def load_fixture(name, content='xml'):\n    path = os.path.join(fixture_path, name)\n    if path in fixture_data:\n        return fixture_data[path]\n\n    if content == 'str':\n        with open(path) as f:\n            data = f.read()\n        try:\n            data = json.load(path)\n        except Exception:\n            pass\n    else:\n        try:\n            data = parse(path).getroot()\n        except Exception:\n            pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 37,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module#61",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, format='text'):\n\n        self.load_fixtures(commands, format, changed=changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 61,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.failed#74",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.changed#82",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures#90",
        "src_path": "test/units/modules/network/junos/junos_module.py",
        "class_name": "test.units.modules.network.junos.junos_module.TestJunosModule",
        "signature": "test.units.modules.network.junos.junos_module.TestJunosModule.load_fixtures(self, commands=None, format=None, changed=None)",
        "snippet": "    def load_fixtures(self, commands=None, format=None, changed=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.load_fixture#34",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module",
        "signature": "test.units.modules.network.opx.opx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module#54",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.execute_module(self, failed=False, changed=False, response=None, msg=None, db=None, commit_event=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       response=None, msg=None, db=None,\n                       commit_event=None):\n\n        self.load_fixtures(response)\n\n        if failed:\n            result = self.failed(msg)\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed, db)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 54,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.failed#69",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.failed(self, msg)",
        "snippet": "    def failed(self, msg):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        self.assertEqual(result['msg'], msg, result)\n        return result",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.changed#78",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.changed(self, changed=False, db=None)",
        "snippet": "    def changed(self, changed=False, db=None):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        print(\"res\" + str(result) + \"dv=\" + str(db) + \"ch=\" + str(changed))\n        self.assertEqual(result['changed'], changed, result)\n        if db:\n            self.assertEqual(result['db'], db, result)\n\n        return result",
        "begin_line": 78,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/opx/opx_module.py",
        "class_name": "test.units.modules.network.opx.opx_module.TestOpxModule",
        "signature": "test.units.modules.network.opx.opx_module.TestOpxModule.load_fixtures(self, response=None)",
        "snippet": "    def load_fixtures(self, response=None):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.parse_diff#16",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff",
        "signature": "test.lib.ansible_test._internal.diff.parse_diff(lines)",
        "snippet": "def parse_diff(lines):\n    \"\"\"\n    :type lines: list[str]\n    :rtype: list[FileDiff]\n    \"\"\"\n    return DiffParser(lines).files",
        "begin_line": 16,
        "end_line": 21,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.FileDiff.__init__#26",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.FileDiff",
        "signature": "test.lib.ansible_test._internal.diff.FileDiff.__init__(self, old_path, new_path)",
        "snippet": "    def __init__(self, old_path, new_path):\n        \"\"\"\n        :type old_path: str\n        :type new_path: str\n        \"\"\"\n        self.old = DiffSide(old_path, new=False)\n        self.new = DiffSide(new_path, new=True)\n        self.headers = []  # type: t.List[str]\n        self.binary = False",
        "begin_line": 26,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.FileDiff.append_header#36",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.FileDiff",
        "signature": "test.lib.ansible_test._internal.diff.FileDiff.append_header(self, line)",
        "snippet": "    def append_header(self, line):\n        \"\"\"\n        :type line: str\n        \"\"\"\n        self.headers.append(line)",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.FileDiff.is_complete#43",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.FileDiff",
        "signature": "test.lib.ansible_test._internal.diff.FileDiff.is_complete(self)",
        "snippet": "    def is_complete(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.old.is_complete and self.new.is_complete",
        "begin_line": 43,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffSide.__init__#52",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffSide",
        "signature": "test.lib.ansible_test._internal.diff.DiffSide.__init__(self, path, new)",
        "snippet": "    def __init__(self, path, new):\n        \"\"\"\n        :type path: str\n        :type new: bool\n        \"\"\"\n        self.path = path\n        self.new = new\n        self.prefix = '+' if self.new else '-'\n        self.eof_newline = True\n        self.exists = True\n\n        self.lines = []  # type: t.List[t.Tuple[int, str]]\n        self.lines_and_context = []  # type: t.List[t.Tuple[int, str]]\n        self.ranges = []  # type: t.List[t.Tuple[int, int]]\n\n        self._next_line_number = 0\n        self._lines_remaining = 0\n        self._range_start = 0",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffSide.set_start#71",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffSide",
        "signature": "test.lib.ansible_test._internal.diff.DiffSide.set_start(self, line_start, line_count)",
        "snippet": "    def set_start(self, line_start, line_count):\n        \"\"\"\n        :type line_start: int\n        :type line_count: int\n        \"\"\"\n        self._next_line_number = line_start\n        self._lines_remaining = line_count\n        self._range_start = 0",
        "begin_line": 71,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffSide.append#80",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffSide",
        "signature": "test.lib.ansible_test._internal.diff.DiffSide.append(self, line)",
        "snippet": "    def append(self, line):\n        \"\"\"\n        :type line: str\n        \"\"\"\n        if self._lines_remaining <= 0:\n            raise Exception('Diff range overflow.')\n\n        entry = self._next_line_number, line\n\n        if line.startswith(' '):\n            pass\n        elif line.startswith(self.prefix):\n            self.lines.append(entry)\n\n            if not self._range_start:\n                self._range_start = self._next_line_number\n        else:\n            raise Exception('Unexpected diff content prefix.')\n\n        self.lines_and_context.append(entry)\n\n        self._lines_remaining -= 1\n\n        if self._range_start:\n            if self.is_complete:\n                range_end = self._next_line_number\n            elif line.startswith(' '):\n                range_end = self._next_line_number - 1\n            else:\n                range_end = 0\n\n            if range_end:\n                self.ranges.append((self._range_start, range_end))\n                self._range_start = 0\n\n        self._next_line_number += 1",
        "begin_line": 80,
        "end_line": 115,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffSide.is_complete#118",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffSide",
        "signature": "test.lib.ansible_test._internal.diff.DiffSide.is_complete(self)",
        "snippet": "    def is_complete(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self._lines_remaining == 0",
        "begin_line": 118,
        "end_line": 122,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffSide.format_lines#124",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffSide",
        "signature": "test.lib.ansible_test._internal.diff.DiffSide.format_lines(self, context=True)",
        "snippet": "    def format_lines(self, context=True):\n        \"\"\"\n        :type context: bool\n        :rtype: list[str]\n        \"\"\"\n        if context:\n            lines = self.lines_and_context\n        else:\n            lines = self.lines\n\n        return ['%s:%4d %s' % (self.path, line[0], line[1]) for line in lines]",
        "begin_line": 124,
        "end_line": 134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.__init__#139",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.__init__(self, lines)",
        "snippet": "    def __init__(self, lines):\n        \"\"\"\n        :type lines: list[str]\n        \"\"\"\n        self.lines = lines\n        self.files = []  # type: t.List[FileDiff]\n\n        self.action = self.process_start\n        self.line_number = 0\n        self.previous_line = None  # type: t.Optional[str]\n        self.line = None  # type: t.Optional[str]\n        self.file = None  # type: t.Optional[FileDiff]\n\n        for self.line in self.lines:\n            self.line_number += 1\n\n            try:\n                self.action()\n            except Exception as ex:\n                message = textwrap.dedent('''\n                %s\n\n                     Line: %d\n                 Previous: %s\n                  Current: %s\n                %s\n                ''').strip() % (\n                    ex,\n                    self.line_number,\n                    self.previous_line or '',\n                    self.line or '',\n                    traceback.format_exc(),\n                )\n\n                raise ApplicationError(message.strip())\n\n            self.previous_line = self.line\n\n        self.complete_file()",
        "begin_line": 139,
        "end_line": 177,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.process_start#179",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.process_start(self)",
        "snippet": "    def process_start(self):\n        \"\"\"Process a diff start line.\"\"\"\n        self.complete_file()\n\n        match = re.search(r'^diff --git \"?a/(?P<old_path>.*)\"? \"?b/(?P<new_path>.*)\"?$', self.line)\n\n        if not match:\n            raise Exception('Unexpected diff start line.')\n\n        self.file = FileDiff(match.group('old_path'), match.group('new_path'))\n        self.action = self.process_continue",
        "begin_line": 179,
        "end_line": 189,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.process_range#191",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.process_range(self)",
        "snippet": "    def process_range(self):\n        \"\"\"Process a diff range line.\"\"\"\n        match = re.search(r'^@@ -((?P<old_start>[0-9]+),)?(?P<old_count>[0-9]+) \\+((?P<new_start>[0-9]+),)?(?P<new_count>[0-9]+) @@', self.line)\n\n        if not match:\n            raise Exception('Unexpected diff range line.')\n\n        self.file.old.set_start(int(match.group('old_start') or 1), int(match.group('old_count')))\n        self.file.new.set_start(int(match.group('new_start') or 1), int(match.group('new_count')))\n        self.action = self.process_content",
        "begin_line": 191,
        "end_line": 200,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.process_continue#202",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.process_continue(self)",
        "snippet": "    def process_continue(self):\n        \"\"\"Process a diff start, range or header line.\"\"\"\n        if self.line.startswith('diff '):\n            self.process_start()\n        elif self.line.startswith('@@ '):\n            self.process_range()\n        else:\n            self.process_header()",
        "begin_line": 202,
        "end_line": 209,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.process_header#211",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.process_header(self)",
        "snippet": "    def process_header(self):\n        \"\"\"Process a diff header line.\"\"\"\n        if self.line.startswith('Binary files '):\n            self.file.binary = True\n        elif self.line == '--- /dev/null':\n            self.file.old.exists = False\n        elif self.line == '+++ /dev/null':\n            self.file.new.exists = False\n        else:\n            self.file.append_header(self.line)",
        "begin_line": 211,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.process_content#222",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.process_content(self)",
        "snippet": "    def process_content(self):\n        \"\"\"Process a diff content line.\"\"\"\n        if self.line == r'\\ No newline at end of file':\n            if self.previous_line.startswith(' '):\n                self.file.old.eof_newline = False\n                self.file.new.eof_newline = False\n            elif self.previous_line.startswith('-'):\n                self.file.old.eof_newline = False\n            elif self.previous_line.startswith('+'):\n                self.file.new.eof_newline = False\n            else:\n                raise Exception('Unexpected previous diff content line.')\n\n            return\n\n        if self.file.is_complete:\n            self.process_continue()\n            return\n\n        if self.line.startswith(' '):\n            self.file.old.append(self.line)\n            self.file.new.append(self.line)\n        elif self.line.startswith('-'):\n            self.file.old.append(self.line)\n        elif self.line.startswith('+'):\n            self.file.new.append(self.line)\n        else:\n            raise Exception('Unexpected diff content line.')",
        "begin_line": 222,
        "end_line": 249,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.diff.DiffParser.complete_file#251",
        "src_path": "test/lib/ansible_test/_internal/diff.py",
        "class_name": "test.lib.ansible_test._internal.diff.DiffParser",
        "signature": "test.lib.ansible_test._internal.diff.DiffParser.complete_file(self)",
        "snippet": "    def complete_file(self):\n        \"\"\"Complete processing of the current file, if any.\"\"\"\n        if not self.file:\n            return\n\n        self.files.append(self.file)",
        "begin_line": 251,
        "end_line": 256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.load_fixture#31",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module",
        "signature": "test.units.modules.network.nos.nos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module#51",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.failed#70",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nos.nos_module.TestNosModule.changed#78",
        "src_path": "test/units/modules/network/nos/nos_module.py",
        "class_name": "test.units.modules.network.nos.nos_module.TestNosModule",
        "signature": "test.units.modules.network.nos.nos_module.TestNosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.load_fixture#36",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module",
        "signature": "test.units.modules.network.cnos.cnos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 36,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp#63",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.setUp(self)",
        "snippet": "    def setUp(self):\n        super(TestCnosModule, self).setUp()\n\n        self.test_log = tempfile.mkstemp(prefix='ansible-test-cnos-module-', suffix='.log')[1]",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown#68",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.tearDown(self)",
        "snippet": "    def tearDown(self):\n        super(TestCnosModule, self).tearDown()\n\n        os.remove(self.test_log)",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module#73",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 73,
        "end_line": 93,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed#95",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 95,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json#96",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed#108",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 108,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json#109",
        "src_path": "test/units/modules/network/cnos/cnos_module.py",
        "class_name": "test.units.modules.network.cnos.cnos_module.TestCnosModule",
        "signature": "test.units.modules.network.cnos.cnos_module.TestCnosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__#17",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.__init__(self, name, isActive=True)",
        "snippet": "    def __init__(self, name, isActive=True):\n        self._name = name\n        self._isActive = isActive",
        "begin_line": 17,
        "end_line": 19,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name#21",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.name(self)",
        "snippet": "    def name(self):\n        return self._name",
        "begin_line": 21,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive#24",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyNetwork.isActive(self)",
        "snippet": "    def isActive(self):\n        return self._isActive",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__#29",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.__init__(self)",
        "snippet": "    def __init__(self):\n        self._network = [\n            DummyNetwork(\"inactive_net\", isActive=False),\n            DummyNetwork(\"active_net\", isActive=True)]",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName#37",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirtConn.networkLookupByName(self, name)",
        "snippet": "    def networkLookupByName(self, name):\n        for i in self._network:\n            if i.name() == name:\n                return i",
        "begin_line": 37,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open#50",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.DummyLibvirt.open(cls, uri)",
        "snippet": "    def open(cls, uri):\n        return DummyLibvirtConn()",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt#62",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.dummy_libvirt(monkeypatch)",
        "snippet": "def dummy_libvirt(monkeypatch):\n    monkeypatch.setattr(virt_net, 'libvirt', DummyLibvirt)\n    return DummyLibvirt",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj#68",
        "src_path": "test/units/modules/cloud/misc/virt_net/conftest.py",
        "class_name": "test.units.modules.cloud.misc.virt_net.conftest",
        "signature": "test.units.modules.cloud.misc.virt_net.conftest.virt_net_obj(dummy_libvirt)",
        "snippet": "def virt_net_obj(dummy_libvirt):\n    return virt_net.VirtNetwork('qemu:///nowhere', mock.MagicMock())",
        "begin_line": 68,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.load_fixture#33",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module",
        "signature": "test.units.modules.network.ingate.ingate_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 33,
        "end_line": 48,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module#53",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.execute_module(self, failed=False, changed=False, fixture=None, command=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, fixture=None,\n                       command=None):\n\n        self.load_fixtures(fixture, command, changed)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        return result",
        "begin_line": 53,
        "end_line": 65,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed#75",
        "src_path": "test/units/modules/network/ingate/ingate_module.py",
        "class_name": "test.units.modules.network.ingate.ingate_module.TestIngateModule",
        "signature": "test.units.modules.network.ingate.ingate_module.TestIngateModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.load_fixture#32",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module",
        "signature": "test.units.modules.network.voss.voss_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module#52",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.failed#71",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.voss.voss_module.TestVossModule.changed#79",
        "src_path": "test/units/modules/network/voss/voss_module.py",
        "class_name": "test.units.modules.network.voss.voss_module.TestVossModule",
        "signature": "test.units.modules.network.voss.voss_module.TestVossModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.plugins.loader_fixtures.import_fixture.test.__init__#7",
        "src_path": "test/units/plugins/loader_fixtures/import_fixture.py",
        "class_name": "test.units.plugins.loader_fixtures.import_fixture.test",
        "signature": "test.units.plugins.loader_fixtures.import_fixture.test.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        pass",
        "begin_line": 7,
        "end_line": 8,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.load_fixture#32",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module",
        "signature": "test.units.modules.network.aruba.aruba_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module#52",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed#71",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed#79",
        "src_path": "test/units/modules/network/aruba/aruba_module.py",
        "class_name": "test.units.modules.network.aruba.aruba_module.TestArubaModule",
        "signature": "test.units.modules.network.aruba.aruba_module.TestArubaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__#22",
        "src_path": "test/units/modules/cloud/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.modules.cloud.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__(self, params=None, check_mode=False)",
        "snippet": "    def __init__(self, params=None, check_mode=False):\n        self.params = params\n        self.check_mode = check_mode",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.load_fixture#32",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module",
        "signature": "test.units.modules.network.ironware.ironware_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module#52",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed#71",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed#79",
        "src_path": "test/units/modules/network/ironware/ironware_module.py",
        "class_name": "test.units.modules.network.ironware.ironware_module.TestIronwareModule",
        "signature": "test.units.modules.network.ironware.ironware_module.TestIronwareModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.load_fixture#32",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module",
        "signature": "test.units.modules.network.eos.eos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module#52",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, inputs=None, sort=True, defaults=False, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if transport == 'eapi':\n                cmd = []\n                value = []\n                for item in result['commands']:\n                    cmd.append(item['cmd'])\n                    if 'input' in item:\n                        value.append(item['input'])\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(cmd), cmd)\n                else:\n                    self.assertEqual(commands, cmd, cmd)\n                if inputs:\n                    self.assertEqual(inputs, value, value)\n            else:\n                if sort:\n                    self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n                else:\n                    self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.failed#85",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.eos.eos_module.TestEosModule.changed#93",
        "src_path": "test/units/modules/network/eos/eos_module.py",
        "class_name": "test.units.modules.network.eos.eos_module.TestEosModule",
        "signature": "test.units.modules.network.eos.eos_module.TestEosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 93,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.load_fixture#33",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n    if path not in fixture_data:\n        with open(path) as f:\n            data = json.load(f)\n        fixture_data[path] = data\n    return fixture_data[path]",
        "begin_line": 33,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.__init__#43",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.__init__(self, method, params, code, body, headers=None)",
        "snippet": "    def __init__(self, method, params, code, body, headers=None):\n        if headers is None:\n            headers = {}\n\n        self.method = method\n        self.params = params\n\n        self.code = code\n        self.body = body\n        self.headers = dict(headers)",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.MockResponse.read#54",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.MockResponse",
        "signature": "test.units.modules.network.nso.nso_module.MockResponse.read(self)",
        "snippet": "    def read(self):\n        return self.body",
        "begin_line": 54,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.mock_call#58",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module",
        "signature": "test.units.modules.network.nso.nso_module.mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None)",
        "snippet": "def mock_call(calls, url, timeout, validate_certs, data=None, headers=None, method=None):\n    if len(calls) == 0:\n        raise ValueError('no call mock for method {0}({1})'.format(\n            url, data))\n\n    result = calls[0]\n    del calls[0]\n\n    request = json.loads(data)\n    if result.method != request['method']:\n        raise ValueError('expected method {0}({1}), got {2}({3})'.format(\n            result.method, result.params,\n            request['method'], request['params']))\n\n    for key, value in result.params.items():\n        if key not in request['params']:\n            raise ValueError('{0} not in parameters'.format(key))\n        if value != request['params'][key]:\n            raise ValueError('expected {0} to be {1}, got {2}'.format(\n                key, value, request['params'][key]))\n\n    return result",
        "begin_line": 58,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module#92",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.execute_module(self, failed=False, changed=False, **kwargs)",
        "snippet": "    def execute_module(self, failed=False, changed=False, **kwargs):\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        for key, value in kwargs.items():\n            if key not in result:\n                self.fail(\"{0} not in result {1}\".format(key, result))\n            self.assertEqual(value, result[key])\n\n        return result",
        "begin_line": 92,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.failed#107",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.failed(self)",
        "snippet": "    def failed(self):\n        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'fail_json', fail_json):\n            with self.assertRaises(AnsibleFailJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json#108",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.fail_json(*args, **kwargs)",
        "snippet": "        def fail_json(*args, **kwargs):\n            kwargs['failed'] = True\n            raise AnsibleFailJson(kwargs)",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.changed#120",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 120,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json#121",
        "src_path": "test/units/modules/network/nso/nso_module.py",
        "class_name": "test.units.modules.network.nso.nso_module.TestNsoModule",
        "signature": "test.units.modules.network.nso.nso_module.TestNsoModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 121,
        "end_line": 124,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__#8",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.AnsibleModuleException.__init__(self, *args, **kwargs)",
        "snippet": "    def __init__(self, *args, **kwargs):\n        self.args = args\n        self.kwargs = kwargs",
        "begin_line": 8,
        "end_line": 10,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__#22",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.__init__(self, params=None, check_mode=False)",
        "snippet": "    def __init__(self, params=None, check_mode=False):\n        self.params = params\n        self.check_mode = check_mode",
        "begin_line": 22,
        "end_line": 24,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json#29",
        "src_path": "test/units/module_utils/xenserver/FakeAnsibleModule.py",
        "class_name": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule",
        "signature": "test.units.module_utils.xenserver.FakeAnsibleModule.FakeAnsibleModule.fail_json(self, *args, **kwargs)",
        "snippet": "    def fail_json(self, *args, **kwargs):\n        raise FailJsonException(*args, **kwargs)",
        "begin_line": 29,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.load_fixture#31",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module",
        "signature": "test.units.modules.network.aireos.aireos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module#51",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed#70",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed#78",
        "src_path": "test/units/modules/network/aireos/aireos_module.py",
        "class_name": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule",
        "signature": "test.units.modules.network.aireos.aireos_module.TestCiscoWlcModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.load_fixture#31",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module",
        "signature": "test.units.modules.network.slxos.slxos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module#51",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed#70",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed#78",
        "src_path": "test/units/modules/network/slxos/slxos_module.py",
        "class_name": "test.units.modules.network.slxos.slxos_module.TestSlxosModule",
        "signature": "test.units.modules.network.slxos.slxos_module.TestSlxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module#59",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False, state=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None,\n                       sort=True, defaults=False, state=None):\n\n        self.load_fixtures(commands, state)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']),\n                                 result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'],\n                                 result['commands'])\n\n        return result",
        "begin_line": 59,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed#94",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)\n\n        with patch.object(basic.AnsibleModule, 'exit_json', exit_json):\n            with self.assertRaises(AnsibleExitJson) as exc:\n                self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 94,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json#95",
        "src_path": "test/units/modules/network/netvisor/nvos_module.py",
        "class_name": "test.units.modules.network.netvisor.nvos_module.TestNvosModule",
        "signature": "test.units.modules.network.netvisor.nvos_module.TestNvosModule.exit_json(*args, **kwargs)",
        "snippet": "        def exit_json(*args, **kwargs):\n            if 'changed' not in kwargs:\n                kwargs['changed'] = False\n            raise AnsibleExitJson(kwargs)",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.failed#34",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.failed(result)",
        "snippet": "def failed(result):\n    ''' Test if task result yields failed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'failed' test expects a dictionary\")\n    return result.get('failed', False)",
        "begin_line": 34,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.success#41",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.success(result)",
        "snippet": "def success(result):\n    ''' Test if task result yields success '''\n    return not failed(result)",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.unreachable#46",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.unreachable(result)",
        "snippet": "def unreachable(result):\n    ''' Test if task result yields unreachable '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'unreachable' test expects a dictionary\")\n    return result.get('unreachable', False)",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.reachable#53",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.reachable(result)",
        "snippet": "def reachable(result):\n    ''' Test if task result yields reachable '''\n    return not unreachable(result)",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.changed#58",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.changed(result)",
        "snippet": "def changed(result):\n    ''' Test if task result yields changed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'changed' test expects a dictionary\")\n    if 'changed' not in result:\n        changed = False\n        if (\n            'results' in result and   # some modules return a 'results' key\n            isinstance(result['results'], MutableSequence) and\n            isinstance(result['results'][0], MutableMapping)\n        ):\n            for res in result['results']:\n                if res.get('changed', False):\n                    changed = True\n                    break\n    else:\n        changed = result.get('changed', False)\n    return changed",
        "begin_line": 58,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.skipped#78",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.skipped(result)",
        "snippet": "def skipped(result):\n    ''' Test if task result yields skipped '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'skipped' test expects a dictionary\")\n    return result.get('skipped', False)",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.started#85",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.started(result)",
        "snippet": "def started(result):\n    ''' Test if async task has started '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'started' test expects a dictionary\")\n    if 'started' in result:\n        # For async tasks, return status\n        # NOTE: The value of started is 0 or 1, not False or True :-/\n        return result.get('started', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if started\n        display.warning(\"The 'started' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 85,
        "end_line": 96,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.finished#99",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.finished(result)",
        "snippet": "def finished(result):\n    ''' Test if async task has finished '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The 'finished' test expects a dictionary\")\n    if 'finished' in result:\n        # For async tasks, return status\n        # NOTE: The value of finished is 0 or 1, not False or True :-/\n        return result.get('finished', 0) == 1\n    else:\n        # For non-async tasks, warn user, but return as if finished\n        display.warning(\"The 'finished' test expects an async task, but a non-async task was tested\")\n        return True",
        "begin_line": 99,
        "end_line": 110,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.regex#113",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search')",
        "snippet": "def regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):\n    ''' Expose `re` as a boolean filter using the `search` method by default.\n        This is likely only useful for `search` and `match` which already\n        have their own filters.\n    '''\n    # In addition to ensuring the correct type, to_text here will ensure\n    # _fail_with_undefined_error happens if the value is Undefined\n    value = to_text(value, errors='surrogate_or_strict')\n    flags = 0\n    if ignorecase:\n        flags |= re.I\n    if multiline:\n        flags |= re.M\n    _re = re.compile(pattern, flags=flags)\n    return bool(getattr(_re, match_type, 'search')(value))",
        "begin_line": 113,
        "end_line": 127,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.match#130",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.match(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def match(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.match` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'match')",
        "begin_line": 130,
        "end_line": 132,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.search#135",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.search(value, pattern='', ignorecase=False, multiline=False)",
        "snippet": "def search(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.search` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'search')",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.version_compare#140",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core",
        "signature": "lib.ansible.plugins.test.core.version_compare(value, version, operator='eq', strict=False)",
        "snippet": "def version_compare(value, version, operator='eq', strict=False):\n    ''' Perform a version comparison on a value '''\n    op_map = {\n        '==': 'eq', '=': 'eq', 'eq': 'eq',\n        '<': 'lt', 'lt': 'lt',\n        '<=': 'le', 'le': 'le',\n        '>': 'gt', 'gt': 'gt',\n        '>=': 'ge', 'ge': 'ge',\n        '!=': 'ne', '<>': 'ne', 'ne': 'ne'\n    }\n\n    if strict:\n        Version = StrictVersion\n    else:\n        Version = LooseVersion\n\n    if operator in op_map:\n        operator = op_map[operator]\n    else:\n        raise errors.AnsibleFilterError('Invalid operator type')\n\n    try:\n        method = getattr(py_operator, operator)\n        return method(Version(str(value)), Version(str(version)))\n    except Exception as e:\n        raise errors.AnsibleFilterError('Version comparison: %s' % e)",
        "begin_line": 140,
        "end_line": 165,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.core.TestModule.tests#171",
        "src_path": "lib/ansible/plugins/test/core.py",
        "class_name": "lib.ansible.plugins.test.core.TestModule",
        "signature": "lib.ansible.plugins.test.core.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # failure testing\n            'failed': failed,\n            'failure': failed,\n            'succeeded': success,\n            'success': success,\n            'successful': success,\n            'reachable': reachable,\n            'unreachable': unreachable,\n\n            # changed testing\n            'changed': changed,\n            'change': changed,\n\n            # skip testing\n            'skipped': skipped,\n            'skip': skipped,\n\n            # async testing\n            'finished': finished,\n            'started': started,\n\n            # regex\n            'match': match,\n            'search': search,\n            'regex': regex,\n\n            # version comparison\n            'version_compare': version_compare,\n            'version': version_compare,\n\n            # lists\n            'any': any,\n            'all': all,\n        }",
        "begin_line": 171,
        "end_line": 206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.load_fixture#32",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module",
        "signature": "test.units.modules.network.ios.ios_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module#52",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.failed#71",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ios.ios_module.TestIosModule.changed#79",
        "src_path": "test/units/modules/network/ios/ios_module.py",
        "class_name": "test.units.modules.network.ios.ios_module.TestIosModule",
        "signature": "test.units.modules.network.ios.ios_module.TestIosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture#31",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module#51",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed#77",
        "src_path": "test/units/modules/network/edgeswitch/edgeswitch_module.py",
        "class_name": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule",
        "signature": "test.units.modules.network.edgeswitch.edgeswitch_module.TestEdgeswitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest._mock_module#40",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest._mock_module(self)",
        "snippet": "    def _mock_module(self):\n        mock_module = Mock()\n        mock_module.params = {'gather_subset': self.gather_subset,\n                              'gather_timeout': 5,\n                              'filter': '*'}\n        mock_module.get_bin_path = Mock(return_value=None)\n        return mock_module",
        "begin_line": 40,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect#48",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect(self)",
        "snippet": "    def test_collect(self):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect(module=module, collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace#55",
        "src_path": "test/units/module_utils/facts/base.py",
        "class_name": "test.units.module_utils.facts.base.BaseFactsTest",
        "signature": "test.units.module_utils.facts.base.BaseFactsTest.test_collect_with_namespace(self)",
        "snippet": "    def test_collect_with_namespace(self):\n        module = self._mock_module()\n        fact_collector = self.collector_class()\n        facts_dict = fact_collector.collect_with_namespace(module=module,\n                                                           collected_facts=self.collected_facts)\n        self.assertIsInstance(facts_dict, dict)\n        return facts_dict",
        "begin_line": 55,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.conftest.patch_ansible_module#14",
        "src_path": "test/units/modules/conftest.py",
        "class_name": "test.units.modules.conftest",
        "signature": "test.units.modules.conftest.patch_ansible_module(request, mocker)",
        "snippet": "def patch_ansible_module(request, mocker):\n    if isinstance(request.param, string_types):\n        args = request.param\n    elif isinstance(request.param, MutableMapping):\n        if 'ANSIBLE_MODULE_ARGS' not in request.param:\n            request.param = {'ANSIBLE_MODULE_ARGS': request.param}\n        if '_ansible_remote_tmp' not in request.param['ANSIBLE_MODULE_ARGS']:\n            request.param['ANSIBLE_MODULE_ARGS']['_ansible_remote_tmp'] = '/tmp'\n        if '_ansible_keep_remote_files' not in request.param['ANSIBLE_MODULE_ARGS']:\n            request.param['ANSIBLE_MODULE_ARGS']['_ansible_keep_remote_files'] = False\n        args = json.dumps(request.param)\n    else:\n        raise Exception('Malformed data to the patch_ansible_module pytest fixture')\n\n    mocker.patch('ansible.module_utils.basic._ANSIBLE_ARGS', to_bytes(args))",
        "begin_line": 14,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module#52",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.execute_module(self, failed=False, changed=False, commands=None, sort=True)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.changed#79",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures#87",
        "src_path": "test/units/modules/network/cli/cli_module.py",
        "class_name": "test.units.modules.network.cli.cli_module.TestCliModule",
        "signature": "test.units.modules.network.cli.cli_module.TestCliModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.load_fixture#32",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module",
        "signature": "test.units.modules.network.iosxr.iosxr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module#52",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed#71",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed#79",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures#87",
        "src_path": "test/units/modules/network/iosxr/iosxr_module.py",
        "class_name": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule",
        "signature": "test.units.modules.network.iosxr.iosxr_module.TestIosxrModule.load_fixtures(self, commands=None)",
        "snippet": "    def load_fixtures(self, commands=None):\n        pass",
        "begin_line": 87,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.load_fixture#31",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module",
        "signature": "test.units.modules.network.onyx.onyx_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module#51",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, is_updates=False, sort=True, transport='cli'):\n\n        self.load_fixtures(commands, transport=transport)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if is_updates:\n                commands_res = result.get('updates')\n            else:\n                commands_res = result.get('commands')\n            if sort:\n                self.assertEqual(sorted(commands), sorted(commands_res), commands_res)\n            else:\n                self.assertEqual(commands, commands_res, commands_res)\n\n        return result",
        "begin_line": 51,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed#74",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 74,
        "end_line": 80,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed#82",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 82,
        "end_line": 88,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures#90",
        "src_path": "test/units/modules/network/onyx/onyx_module.py",
        "class_name": "test.units.modules.network.onyx.onyx_module.TestOnyxModule",
        "signature": "test.units.modules.network.onyx.onyx_module.TestOnyxModule.load_fixtures(self, commands=None, transport='cli')",
        "snippet": "    def load_fixtures(self, commands=None, transport='cli'):\n        pass",
        "begin_line": 90,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.load_fixture#20",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module",
        "signature": "test.units.modules.network.asa.asa_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 20,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module#40",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.asa.asa_module.TestAsaModule.changed#67",
        "src_path": "test/units/modules/network/asa/asa_module.py",
        "class_name": "test.units.modules.network.asa.asa_module.TestAsaModule",
        "signature": "test.units.modules.network.asa.asa_module.TestAsaModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issubset#24",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issubset(a, b)",
        "snippet": "def issubset(a, b):\n    return set(a) <= set(b)",
        "begin_line": 24,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.issuperset#28",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.issuperset(a, b)",
        "snippet": "def issuperset(a, b):\n    return set(a) >= set(b)",
        "begin_line": 28,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.isnotanumber#32",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.isnotanumber(x)",
        "snippet": "def isnotanumber(x):\n    try:\n        return math.isnan(x)\n    except TypeError:\n        return False",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.contains#39",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff",
        "signature": "lib.ansible.plugins.test.mathstuff.contains(seq, value)",
        "snippet": "def contains(seq, value):\n    '''Opposite of the ``in`` test, allowing use as a test in filters like ``selectattr``\n\n    .. versionadded:: 2.8\n    '''\n    return value in seq",
        "begin_line": 39,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.ansible.plugins.test.mathstuff.TestModule.tests#50",
        "src_path": "lib/ansible/plugins/test/mathstuff.py",
        "class_name": "lib.ansible.plugins.test.mathstuff.TestModule",
        "signature": "lib.ansible.plugins.test.mathstuff.TestModule.tests(self)",
        "snippet": "    def tests(self):\n        return {\n            # set theory\n            'issubset': issubset,\n            'subset': issubset,\n            'issuperset': issuperset,\n            'superset': issuperset,\n            'contains': contains,\n\n            # numbers\n            'isnan': isnotanumber,\n            'nan': isnotanumber,\n        }",
        "begin_line": 50,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.load_fixture#32",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module",
        "signature": "test.units.modules.network.routeros.routeros_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module#52",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed#71",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed#79",
        "src_path": "test/units/modules/network/routeros/routeros_module.py",
        "class_name": "test.units.modules.network.routeros.routeros_module.TestRouterosModule",
        "signature": "test.units.modules.network.routeros.routeros_module.TestRouterosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.set_module_args#9",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.set_module_args(args)",
        "snippet": "def set_module_args(args):\n    if '_ansible_remote_tmp' not in args:\n        args['_ansible_remote_tmp'] = '/tmp'\n    if '_ansible_keep_remote_files' not in args:\n        args['_ansible_keep_remote_files'] = False\n\n    args = json.dumps({'ANSIBLE_MODULE_ARGS': args})\n    basic._ANSIBLE_ARGS = to_bytes(args)",
        "begin_line": 9,
        "end_line": 16,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.exit_json#27",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.exit_json(*args, **kwargs)",
        "snippet": "def exit_json(*args, **kwargs):\n    if 'changed' not in kwargs:\n        kwargs['changed'] = False\n    raise AnsibleExitJson(kwargs)",
        "begin_line": 27,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.fail_json#33",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils",
        "signature": "test.units.modules.utils.fail_json(*args, **kwargs)",
        "snippet": "def fail_json(*args, **kwargs):\n    kwargs['failed'] = True\n    raise AnsibleFailJson(kwargs)",
        "begin_line": 33,
        "end_line": 35,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.utils.ModuleTestCase.setUp#40",
        "src_path": "test/units/modules/utils.py",
        "class_name": "test.units.modules.utils.ModuleTestCase",
        "signature": "test.units.modules.utils.ModuleTestCase.setUp(self)",
        "snippet": "    def setUp(self):\n        self.mock_module = patch.multiple(basic.AnsibleModule, exit_json=exit_json, fail_json=fail_json)\n        self.mock_module.start()\n        set_module_args({})\n        self.addCleanup(self.mock_module.stop)",
        "begin_line": 40,
        "end_line": 44,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.util.to_bytes#112",
        "src_path": "test/lib/ansible_test/_internal/util.py",
        "class_name": "test.lib.ansible_test._internal.util",
        "signature": "test.lib.ansible_test._internal.util.to_bytes(value, errors='strict')",
        "snippet": "def to_bytes(value, errors='strict'):  # type: (t.AnyStr, str) -> bytes\n    \"\"\"Return the given value as bytes encoded using UTF-8 if not already bytes.\"\"\"\n    if isinstance(value, bytes):\n        return value\n\n    if isinstance(value, Text):\n        return value.encode(ENCODING, errors)\n\n    raise Exception('value is not bytes or text: %s' % type(value))",
        "begin_line": 112,
        "end_line": 120,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.lib.ansible_test._internal.util.to_text#123",
        "src_path": "test/lib/ansible_test/_internal/util.py",
        "class_name": "test.lib.ansible_test._internal.util",
        "signature": "test.lib.ansible_test._internal.util.to_text(value, errors='strict')",
        "snippet": "def to_text(value, errors='strict'):  # type: (t.AnyStr, str) -> t.Text\n    \"\"\"Return the given value as text decoded using UTF-8 if not already text.\"\"\"\n    if isinstance(value, bytes):\n        return value.decode(ENCODING, errors)\n\n    if isinstance(value, Text):\n        return value\n\n    raise Exception('value is not bytes or text: %s' % type(value))",
        "begin_line": 123,
        "end_line": 131,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info.test_get_cpu_info#13",
        "src_path": "test/units/module_utils/facts/hardware/test_linux_get_cpu_info.py",
        "class_name": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info",
        "signature": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info.test_get_cpu_info(mocker)",
        "snippet": "def test_get_cpu_info(mocker):\n    module = mocker.Mock()\n    inst = linux.LinuxHardware(module)\n\n    mocker.patch('os.path.exists', return_value=False)\n    mocker.patch('os.access', return_value=True)\n    for test in CPU_INFO_TEST_SCENARIOS:\n        mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])\n        collected_facts = {'ansible_architecture': test['architecture']}\n        assert test['expected_result'] == inst.get_cpu_facts(collected_facts=collected_facts)",
        "begin_line": 13,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info.test_get_cpu_info_missing_arch#25",
        "src_path": "test/units/module_utils/facts/hardware/test_linux_get_cpu_info.py",
        "class_name": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info",
        "signature": "test.units.module_utils.facts.hardware.test_linux_get_cpu_info.test_get_cpu_info_missing_arch(mocker)",
        "snippet": "def test_get_cpu_info_missing_arch(mocker):\n    module = mocker.Mock()\n    inst = linux.LinuxHardware(module)\n\n    # ARM and Power will report incorrect processor count if architecture is not available\n    mocker.patch('os.path.exists', return_value=False)\n    mocker.patch('os.access', return_value=True)\n    for test in CPU_INFO_TEST_SCENARIOS:\n        mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])\n        test_result = inst.get_cpu_facts()\n        if test['architecture'].startswith(('armv', 'aarch', 'ppc')):\n            assert test['expected_result'] != test_result\n        else:\n            assert test['expected_result'] == test_result",
        "begin_line": 25,
        "end_line": 38,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util.question#5",
        "src_path": "test/units/utils/fixtures/collections/ansible_collections/my_namespace/my_collection/plugins/module_utils/my_util.py",
        "class_name": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util",
        "signature": "test.units.utils.fixtures.collections.ansible_collections.my_namespace.my_collection.plugins.module_utils.my_util.question()",
        "snippet": "def question():\n    return 3 / 2",
        "begin_line": 5,
        "end_line": 6,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ov_client#11",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ov_client()",
        "snippet": "def mock_ov_client():\n    patcher_json_file = patch.object(OneViewClient, 'from_json_file')\n    client = patcher_json_file.start()\n    return client.return_value",
        "begin_line": 11,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module#18",
        "src_path": "test/units/modules/remote_management/oneview/conftest.py",
        "class_name": "test.units.modules.remote_management.oneview.conftest",
        "signature": "test.units.modules.remote_management.oneview.conftest.mock_ansible_module()",
        "snippet": "def mock_ansible_module():\n    patcher_ansible = patch(ONEVIEW_MODULE_UTILS_PATH + '.AnsibleModule')\n    patcher_ansible = patcher_ansible.start()\n    ansible_module = Mock()\n    patcher_ansible.return_value = ansible_module\n    return ansible_module",
        "begin_line": 18,
        "end_line": 23,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.load_fixture#31",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module",
        "signature": "test.units.modules.network.exos.exos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as file_desc:\n        data = file_desc.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 31,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module#51",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 51,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.failed#70",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.exos.exos_module.TestExosModule.changed#78",
        "src_path": "test/units/modules/network/exos/exos_module.py",
        "class_name": "test.units.modules.network.exos.exos_module.TestExosModule",
        "signature": "test.units.modules.network.exos.exos_module.TestExosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.set_module_args#29",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.set_module_args(args, ignore_provider=None)",
        "snippet": "def set_module_args(args, ignore_provider=None):\n    if 'provider' not in args and not ignore_provider:\n        args['provider'] = {'transport': args.get('transport') or 'cli'}\n\n    return _set_module_args(args)",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.load_fixture#40",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module",
        "signature": "test.units.modules.network.nxos.nxos_module.load_fixture(module_name, name, device='')",
        "snippet": "def load_fixture(module_name, name, device=''):\n    path = os.path.join(fixture_path, module_name, device, name)\n    if not os.path.exists(path):\n        path = os.path.join(fixture_path, module_name, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 40,
        "end_line": 57,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices#62",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module_devices(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        module_name = self.module.__name__.rsplit('.', 1)[1]\n        local_fixture_path = os.path.join(fixture_path, module_name)\n\n        models = []\n        for path in os.listdir(local_fixture_path):\n            path = os.path.join(local_fixture_path, path)\n            if os.path.isdir(path):\n                models.append(os.path.basename(path))\n        if not models:\n            models = ['']\n\n        retvals = {}\n        for model in models:\n            retvals[model] = self.execute_module(failed, changed, commands, sort, device=model)\n\n        return retvals",
        "begin_line": 62,
        "end_line": 78,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module#80",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, device='')",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, device=''):\n\n        self.load_fixtures(commands, device=device)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 80,
        "end_line": 97,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed#99",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 99,
        "end_line": 105,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed#107",
        "src_path": "test/units/modules/network/nxos/nxos_module.py",
        "class_name": "test.units.modules.network.nxos.nxos_module.TestNxosModule",
        "signature": "test.units.modules.network.nxos.nxos_module.TestNxosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.fake_ansible_module#22",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.fake_ansible_module(request)",
        "snippet": "def fake_ansible_module(request):\n    \"\"\"Returns fake AnsibleModule with fake module params.\"\"\"\n    if hasattr(request, 'param'):\n        return FakeAnsibleModule(request.param)\n    else:\n        params = {\n            \"hostname\": \"somehost\",\n            \"username\": \"someuser\",\n            \"password\": \"somepwd\",\n            \"validate_certs\": True,\n        }\n\n        return FakeAnsibleModule(params)",
        "begin_line": 22,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.XenAPI#38",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.XenAPI()",
        "snippet": "def XenAPI():\n    \"\"\"Imports and returns fake XenAPI module.\"\"\"\n\n    # Import of fake XenAPI module is wrapped by fixture so that it does not\n    # affect other unit tests which could potentialy also use XenAPI module.\n\n    # First we use importlib.import_module() to import the module and assign\n    # it to a local symbol.\n    fake_xenapi = importlib.import_module('units.module_utils.xenserver.FakeXenAPI')\n\n    # Now we populate Python module cache with imported fake module using the\n    # original module name (XenAPI). That way, any 'import XenAPI' statement\n    # will just load already imported fake module from the cache.\n    sys.modules['XenAPI'] = fake_xenapi\n\n    return fake_xenapi",
        "begin_line": 38,
        "end_line": 53,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.xenserver#57",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.xenserver(XenAPI)",
        "snippet": "def xenserver(XenAPI):\n    \"\"\"Imports and returns xenserver module util.\"\"\"\n\n    # Since we are wrapping fake XenAPI module inside a fixture, all modules\n    # that depend on it have to be imported inside a test function. To make\n    # this easier to handle and remove some code repetition, we wrap the import\n    # of xenserver module util with a fixture.\n    from ansible.module_utils import xenserver\n\n    return xenserver",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.mock_xenapi_failure#70",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.mock_xenapi_failure(XenAPI, mocker)",
        "snippet": "def mock_xenapi_failure(XenAPI, mocker):\n    \"\"\"\n    Returns mock object that raises XenAPI.Failure on any XenAPI\n    method call.\n    \"\"\"\n    fake_error_msg = \"Fake XAPI method call error!\"\n\n    # We need to use our MagicMock based class that passes side_effect to its\n    # children because calls to xenapi methods can generate an arbitrary\n    # hierarchy of mock objects. Any such object when called should use the\n    # same side_effect as its parent mock object.\n    class MagicMockSideEffect(MagicMock):\n        def _get_child_mock(self, **kw):\n            child_mock = super(MagicMockSideEffect, self)._get_child_mock(**kw)\n            child_mock.side_effect = self.side_effect\n            return child_mock\n\n    mocked_xenapi = mocker.patch.object(XenAPI.Session, 'xenapi', new=MagicMockSideEffect(), create=True)\n    mocked_xenapi.side_effect = XenAPI.Failure(fake_error_msg)\n\n    return mocked_xenapi, fake_error_msg",
        "begin_line": 70,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect.mock_xenapi_failure#70",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect",
        "signature": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect.mock_xenapi_failure(XenAPI, mocker)",
        "snippet": "def mock_xenapi_failure(XenAPI, mocker):\n    \"\"\"\n    Returns mock object that raises XenAPI.Failure on any XenAPI\n    method call.\n    \"\"\"\n    fake_error_msg = \"Fake XAPI method call error!\"\n\n    # We need to use our MagicMock based class that passes side_effect to its\n    # children because calls to xenapi methods can generate an arbitrary\n    # hierarchy of mock objects. Any such object when called should use the\n    # same side_effect as its parent mock object.\n    class MagicMockSideEffect(MagicMock):\n        def _get_child_mock(self, **kw):\n            child_mock = super(MagicMockSideEffect, self)._get_child_mock(**kw)\n            child_mock.side_effect = self.side_effect\n            return child_mock\n\n    mocked_xenapi = mocker.patch.object(XenAPI.Session, 'xenapi', new=MagicMockSideEffect(), create=True)\n    mocked_xenapi.side_effect = XenAPI.Failure(fake_error_msg)\n\n    return mocked_xenapi, fake_error_msg",
        "begin_line": 70,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect._get_child_mock#82",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect",
        "signature": "test.units.module_utils.xenserver.conftest.MagicMockSideEffect._get_child_mock(self, **kw)",
        "snippet": "        def _get_child_mock(self, **kw):\n            child_mock = super(MagicMockSideEffect, self)._get_child_mock(**kw)\n            child_mock.side_effect = self.side_effect\n            return child_mock",
        "begin_line": 82,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.conftest.fixture_data_from_file#94",
        "src_path": "test/units/module_utils/xenserver/conftest.py",
        "class_name": "test.units.module_utils.xenserver.conftest",
        "signature": "test.units.module_utils.xenserver.conftest.fixture_data_from_file(request)",
        "snippet": "def fixture_data_from_file(request):\n    \"\"\"Loads fixture data from files.\"\"\"\n    if not hasattr(request, 'param'):\n        return {}\n\n    fixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\n    fixture_data = {}\n\n    if isinstance(request.param, six.string_types):\n        request.param = [request.param]\n\n    for fixture_name in request.param:\n        path = os.path.join(fixture_path, fixture_name)\n\n        with open(path) as f:\n            data = f.read()\n\n        try:\n            data = json.loads(data)\n        except Exception:\n            pass\n\n        fixture_data[fixture_name] = data\n\n    return fixture_data",
        "begin_line": 94,
        "end_line": 118,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.load_fixture#32",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module",
        "signature": "test.units.modules.network.ovs.ovs_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module#52",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.execute_module(self, failed=False, changed=False, commands=None, test_name=None)",
        "snippet": "    def execute_module(self, failed=False, changed=False,\n                       commands=None, test_name=None):\n\n        self.load_fixtures(test_name)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 67,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed#69",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 69,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed#77",
        "src_path": "test/units/modules/network/ovs/ovs_module.py",
        "class_name": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule",
        "signature": "test.units.modules.network.ovs.ovs_module.TestOpenVSwitchModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 77,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.load_fixture#32",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module",
        "signature": "test.units.modules.network.vyos.vyos_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module#52",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 52,
        "end_line": 68,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed#70",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 70,
        "end_line": 76,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed#78",
        "src_path": "test/units/modules/network/vyos/vyos_module.py",
        "class_name": "test.units.modules.network.vyos.vyos_module.TestVyosModule",
        "signature": "test.units.modules.network.vyos.vyos_module.TestVyosModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.load_fixture#34",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module#54",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 54,
        "end_line": 71,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed#73",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 73,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed#81",
        "src_path": "test/units/modules/network/dellos9/dellos9_module.py",
        "class_name": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module",
        "signature": "test.units.modules.network.dellos9.dellos9_module.TestDellos9Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 81,
        "end_line": 87,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.common.fake_xenapi_ref#10",
        "src_path": "test/units/modules/cloud/xenserver/common.py",
        "class_name": "test.units.modules.cloud.xenserver.common",
        "signature": "test.units.modules.cloud.xenserver.common.fake_xenapi_ref(xenapi_class)",
        "snippet": "def fake_xenapi_ref(xenapi_class):\n    return \"OpaqueRef:fake-xenapi-%s-ref\" % xenapi_class",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.__init__#29",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.__init__(self, text, encoding=None, errors=None, _bytes=None)",
        "snippet": "    def __init__(self, text, encoding=None, errors=None, _bytes=None):\n        super(TextVaultSecret, self).__init__()\n        self.text = text\n        self.encoding = encoding or 'utf-8'\n        self._bytes = _bytes\n        self.errors = errors or 'strict'",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.vault_helper.TextVaultSecret.bytes#37",
        "src_path": "test/units/mock/vault_helper.py",
        "class_name": "test.units.mock.vault_helper.TextVaultSecret",
        "signature": "test.units.mock.vault_helper.TextVaultSecret.bytes(self)",
        "snippet": "    def bytes(self):\n        '''The text encoded with encoding, unless we specifically set _bytes.'''\n        return self._bytes or to_bytes(self.text, encoding=self.encoding, errors=self.errors)",
        "begin_line": 37,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.__init__#31",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.__init__(self, file_mapping=None)",
        "snippet": "    def __init__(self, file_mapping=None):\n        file_mapping = {} if file_mapping is None else file_mapping\n        assert type(file_mapping) == dict\n\n        super(DictDataLoader, self).__init__()\n\n        self._file_mapping = file_mapping\n        self._build_known_directories()\n        self._vault_secrets = None",
        "begin_line": 31,
        "end_line": 39,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.load_from_file#41",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.load_from_file(self, path, cache=True, unsafe=False)",
        "snippet": "    def load_from_file(self, path, cache=True, unsafe=False):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return self.load(self._file_mapping[path], path)\n        return None",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._get_file_contents#49",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._get_file_contents(self, path)",
        "snippet": "    def _get_file_contents(self, path):\n        path = to_text(path)\n        if path in self._file_mapping:\n            return (to_bytes(self._file_mapping[path]), False)\n        else:\n            raise AnsibleParserError(\"file not found: %s\" % path)",
        "begin_line": 49,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.path_exists#56",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.path_exists(self, path)",
        "snippet": "    def path_exists(self, path):\n        path = to_text(path)\n        return path in self._file_mapping or path in self._known_directories",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_file#60",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_file(self, path)",
        "snippet": "    def is_file(self, path):\n        path = to_text(path)\n        return path in self._file_mapping",
        "begin_line": 60,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_directory#64",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_directory(self, path)",
        "snippet": "    def is_directory(self, path):\n        path = to_text(path)\n        return path in self._known_directories",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.list_directory#68",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.list_directory(self, path)",
        "snippet": "    def list_directory(self, path):\n        ret = []\n        path = to_text(path)\n        for x in (list(self._file_mapping.keys()) + self._known_directories):\n            if x.startswith(path):\n                if os.path.dirname(x) == path:\n                    ret.append(os.path.basename(x))\n        return ret",
        "begin_line": 68,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.is_executable#77",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.is_executable(self, path)",
        "snippet": "    def is_executable(self, path):\n        # FIXME: figure out a way to make paths return true for this\n        return False",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._add_known_directory#81",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._add_known_directory(self, directory)",
        "snippet": "    def _add_known_directory(self, directory):\n        if directory not in self._known_directories:\n            self._known_directories.append(directory)",
        "begin_line": 81,
        "end_line": 83,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader._build_known_directories#85",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader._build_known_directories(self)",
        "snippet": "    def _build_known_directories(self):\n        self._known_directories = []\n        for path in self._file_mapping:\n            dirname = os.path.dirname(path)\n            while dirname not in ('/', ''):\n                self._add_known_directory(dirname)\n                dirname = os.path.dirname(dirname)",
        "begin_line": 85,
        "end_line": 91,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.get_basedir#112",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.get_basedir(self)",
        "snippet": "    def get_basedir(self):\n        return os.getcwd()",
        "begin_line": 112,
        "end_line": 113,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.loader.DictDataLoader.set_vault_secrets#115",
        "src_path": "test/units/mock/loader.py",
        "class_name": "test.units.mock.loader.DictDataLoader",
        "signature": "test.units.mock.loader.DictDataLoader.set_vault_secrets(self, vault_secrets)",
        "snippet": "    def set_vault_secrets(self, vault_secrets):\n        self._vault_secrets = vault_secrets",
        "begin_line": 115,
        "end_line": 116,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.conftest.fake_ansible_module#18",
        "src_path": "test/units/modules/cloud/xenserver/conftest.py",
        "class_name": "test.units.modules.cloud.xenserver.conftest",
        "signature": "test.units.modules.cloud.xenserver.conftest.fake_ansible_module(request)",
        "snippet": "def fake_ansible_module(request):\n    \"\"\"Returns fake AnsibleModule with fake module params.\"\"\"\n    if hasattr(request, 'param'):\n        return FakeAnsibleModule(request.param)\n    else:\n        params = {\n            \"hostname\": \"somehost\",\n            \"username\": \"someuser\",\n            \"password\": \"somepwd\",\n            \"validate_certs\": True,\n        }\n\n        return FakeAnsibleModule(params)",
        "begin_line": 18,
        "end_line": 30,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.conftest.XenAPI#34",
        "src_path": "test/units/modules/cloud/xenserver/conftest.py",
        "class_name": "test.units.modules.cloud.xenserver.conftest",
        "signature": "test.units.modules.cloud.xenserver.conftest.XenAPI()",
        "snippet": "def XenAPI():\n    \"\"\"Imports and returns fake XenAPI module.\"\"\"\n\n    # Import of fake XenAPI module is wrapped by fixture so that it does not\n    # affect other unit tests which could potentialy also use XenAPI module.\n\n    # First we use importlib.import_module() to import the module and assign\n    # it to a local symbol.\n    fake_xenapi = importlib.import_module('units.modules.cloud.xenserver.FakeXenAPI')\n\n    # Now we populate Python module cache with imported fake module using the\n    # original module name (XenAPI). That way, any 'import XenAPI' statement\n    # will just load already imported fake module from the cache.\n    sys.modules['XenAPI'] = fake_xenapi\n\n    return fake_xenapi",
        "begin_line": 34,
        "end_line": 49,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.conftest.xenserver_guest_info#53",
        "src_path": "test/units/modules/cloud/xenserver/conftest.py",
        "class_name": "test.units.modules.cloud.xenserver.conftest",
        "signature": "test.units.modules.cloud.xenserver.conftest.xenserver_guest_info(XenAPI)",
        "snippet": "def xenserver_guest_info(XenAPI):\n    \"\"\"Imports and returns xenserver_guest_info module.\"\"\"\n\n    # Since we are wrapping fake XenAPI module inside a fixture, all modules\n    # that depend on it have to be imported inside a test function. To make\n    # this easier to handle and remove some code repetition, we wrap the import\n    # of xenserver_guest_info module with a fixture.\n    from ansible.modules.cloud.xenserver import xenserver_guest_info\n\n    return xenserver_guest_info",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.conftest.xenserver_guest_powerstate#66",
        "src_path": "test/units/modules/cloud/xenserver/conftest.py",
        "class_name": "test.units.modules.cloud.xenserver.conftest",
        "signature": "test.units.modules.cloud.xenserver.conftest.xenserver_guest_powerstate(XenAPI)",
        "snippet": "def xenserver_guest_powerstate(XenAPI):\n    \"\"\"Imports and returns xenserver_guest_powerstate module.\"\"\"\n\n    # Since we are wrapping fake XenAPI module inside a fixture, all modules\n    # that depend on it have to be imported inside a test function. To make\n    # this easier to handle and remove some code repetition, we wrap the import\n    # of xenserver_guest_powerstate module with a fixture.\n    from ansible.modules.cloud.xenserver import xenserver_guest_powerstate\n\n    return xenserver_guest_powerstate",
        "begin_line": 66,
        "end_line": 75,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.load_fixture#19",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module",
        "signature": "test.units.modules.network.frr.frr_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 19,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module#39",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['commands']), result['commands'])\n            else:\n                self.assertEqual(commands, result['commands'], result['commands'])\n\n        return result",
        "begin_line": 39,
        "end_line": 56,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.frr.frr_module.TestFrrModule.changed#66",
        "src_path": "test/units/modules/network/frr/frr_module.py",
        "class_name": "test.units.modules.network.frr.frr_module.TestFrrModule",
        "signature": "test.units.modules.network.frr.frr_module.TestFrrModule.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.load_fixture#32",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.load_fixture(name)",
        "snippet": "def load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data",
        "begin_line": 32,
        "end_line": 47,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module#52",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False)",
        "snippet": "    def execute_module(self, failed=False, changed=False, commands=None, sort=True, defaults=False):\n\n        self.load_fixtures(commands)\n\n        if failed:\n            result = self.failed()\n            self.assertTrue(result['failed'], result)\n        else:\n            result = self.changed(changed)\n            self.assertEqual(result['changed'], changed, result)\n\n        if commands is not None:\n            if sort:\n                self.assertEqual(sorted(commands), sorted(result['updates']), result['updates'])\n            else:\n                self.assertEqual(commands, result['updates'], result['updates'])\n\n        return result",
        "begin_line": 52,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed#71",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.failed(self)",
        "snippet": "    def failed(self):\n        with self.assertRaises(AnsibleFailJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertTrue(result['failed'], result)\n        return result",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed#79",
        "src_path": "test/units/modules/network/dellos6/dellos6_module.py",
        "class_name": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module",
        "signature": "test.units.modules.network.dellos6.dellos6_module.TestDellos6Module.changed(self, changed=False)",
        "snippet": "    def changed(self, changed=False):\n        with self.assertRaises(AnsibleExitJson) as exc:\n            self.module.main()\n\n        result = exc.exception.args[0]\n        self.assertEqual(result['changed'], changed, result)\n        return result",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream#17",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_stream(self, obj, stream, dumper=None)",
        "snippet": "    def _dump_stream(self, obj, stream, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string stream.\"\"\"\n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)",
        "begin_line": 17,
        "end_line": 22,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_string#24",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_string(self, obj, dumper=None)",
        "snippet": "    def _dump_string(self, obj, dumper=None):\n        \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)",
        "begin_line": 24,
        "end_line": 29,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle#31",
        "src_path": "test/units/mock/yaml_helper.py",
        "class_name": "test.units.mock.yaml_helper.YamlTestUtils",
        "signature": "test.units.mock.yaml_helper.YamlTestUtils._dump_load_cycle(self, obj)",
        "snippet": "    def _dump_load_cycle(self, obj):\n        # Each pass though a dump or load revs the 'generation'\n        # obj to yaml string\n        string_from_object_dump = self._dump_string(obj, dumper=AnsibleDumper)\n\n        # wrap a stream/file like StringIO around that yaml\n        stream_from_object_dump = io.StringIO(string_from_object_dump)\n        loader = self._loader(stream_from_object_dump)\n        # load the yaml stream to create a new instance of the object (gen 2)\n        obj_2 = loader.get_data()\n\n        # dump the gen 2 objects directory to strings\n        string_from_object_dump_2 = self._dump_string(obj_2,\n                                                      dumper=AnsibleDumper)\n\n        # The gen 1 and gen 2 yaml strings\n        self.assertEquals(string_from_object_dump, string_from_object_dump_2)\n        # the gen 1 (orig) and gen 2 py object\n        self.assertEquals(obj, obj_2)\n\n        # again! gen 3... load strings into py objects\n        stream_3 = io.StringIO(string_from_object_dump_2)\n        loader_3 = self._loader(stream_3)\n        obj_3 = loader_3.get_data()\n\n        string_from_object_dump_3 = self._dump_string(obj_3, dumper=AnsibleDumper)\n\n        self.assertEquals(obj, obj_3)\n        # should be transitive, but...\n        self.assertEquals(obj_2, obj_3)\n        self.assertEquals(string_from_object_dump, string_from_object_dump_3)",
        "begin_line": 31,
        "end_line": 61,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.xenserver.common.fake_xenapi_ref#10",
        "src_path": "test/units/module_utils/xenserver/common.py",
        "class_name": "test.units.module_utils.xenserver.common",
        "signature": "test.units.module_utils.xenserver.common.fake_xenapi_ref(xenapi_class)",
        "snippet": "def fake_xenapi_ref(xenapi_class):\n    return \"OpaqueRef:fake-xenapi-%s-ref\" % xenapi_class",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.conftest.stdin#17",
        "src_path": "test/units/module_utils/conftest.py",
        "class_name": "test.units.module_utils.conftest",
        "signature": "test.units.module_utils.conftest.stdin(mocker, request)",
        "snippet": "def stdin(mocker, request):\n    old_args = ansible.module_utils.basic._ANSIBLE_ARGS\n    ansible.module_utils.basic._ANSIBLE_ARGS = None\n    old_argv = sys.argv\n    sys.argv = ['ansible_unittest']\n\n    if isinstance(request.param, string_types):\n        args = request.param\n    elif isinstance(request.param, MutableMapping):\n        if 'ANSIBLE_MODULE_ARGS' not in request.param:\n            request.param = {'ANSIBLE_MODULE_ARGS': request.param}\n        if '_ansible_remote_tmp' not in request.param['ANSIBLE_MODULE_ARGS']:\n            request.param['ANSIBLE_MODULE_ARGS']['_ansible_remote_tmp'] = '/tmp'\n        if '_ansible_keep_remote_files' not in request.param['ANSIBLE_MODULE_ARGS']:\n            request.param['ANSIBLE_MODULE_ARGS']['_ansible_keep_remote_files'] = False\n        args = json.dumps(request.param)\n    else:\n        raise Exception('Malformed data to the stdin pytest fixture')\n\n    fake_stdin = BytesIO(to_bytes(args, errors='surrogate_or_strict'))\n    if PY3:\n        mocker.patch('ansible.module_utils.basic.sys.stdin', mocker.MagicMock())\n        mocker.patch('ansible.module_utils.basic.sys.stdin.buffer', fake_stdin)\n    else:\n        mocker.patch('ansible.module_utils.basic.sys.stdin', fake_stdin)\n\n    yield fake_stdin\n\n    ansible.module_utils.basic._ANSIBLE_ARGS = old_args\n    sys.argv = old_argv",
        "begin_line": 17,
        "end_line": 46,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.module_utils.conftest.am#50",
        "src_path": "test/units/module_utils/conftest.py",
        "class_name": "test.units.module_utils.conftest",
        "signature": "test.units.module_utils.conftest.am(stdin, request)",
        "snippet": "def am(stdin, request):\n    old_args = ansible.module_utils.basic._ANSIBLE_ARGS\n    ansible.module_utils.basic._ANSIBLE_ARGS = None\n    old_argv = sys.argv\n    sys.argv = ['ansible_unittest']\n\n    argspec = {}\n    if hasattr(request, 'param'):\n        if isinstance(request.param, dict):\n            argspec = request.param\n\n    am = ansible.module_utils.basic.AnsibleModule(\n        argument_spec=argspec,\n    )\n    am._name = 'ansible_unittest'\n\n    yield am\n\n    ansible.module_utils.basic._ANSIBLE_ARGS = old_args\n    sys.argv = old_argv",
        "begin_line": 50,
        "end_line": 69,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure.__init__#10",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure.__init__(self, details)",
        "snippet": "    def __init__(self, details):\n        self.details = details",
        "begin_line": 10,
        "end_line": 11,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure.__str__#13",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Failure.__str__(self)",
        "snippet": "    def __str__(self):\n        return str(self.details)",
        "begin_line": 13,
        "end_line": 14,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.__init__#18",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.__init__(self, uri, transport=None, encoding=None, verbose=0, allow_none=1, ignore_ssl=False)",
        "snippet": "    def __init__(self, uri, transport=None, encoding=None, verbose=0,\n                 allow_none=1, ignore_ssl=False):\n\n        self.transport = transport\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 18,
        "end_line": 25,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._get_api_version#27",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._get_api_version(self)",
        "snippet": "    def _get_api_version(self):\n        return FAKE_API_VERSION",
        "begin_line": 27,
        "end_line": 28,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._login#30",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._login(self, method, params)",
        "snippet": "    def _login(self, method, params):\n        self._session = \"OpaqueRef:fake-xenapi-session-ref\"\n        self.last_login_method = method\n        self.last_login_params = params\n        self.API_version = self._get_api_version()",
        "begin_line": 30,
        "end_line": 34,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._logout#36",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session._logout(self)",
        "snippet": "    def _logout(self):\n        self._session = None\n        self.last_login_method = None\n        self.last_login_params = None\n        self.API_version = FAKE_API_VERSION",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.xenapi_request#42",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.xenapi_request(self, methodname, params)",
        "snippet": "    def xenapi_request(self, methodname, params):\n        if methodname.startswith('login'):\n            self._login(methodname, params)\n            return None\n        elif methodname == 'logout' or methodname == 'session.logout':\n            self._logout()\n            return None\n        else:\n            # Should be patched with mocker.patch().\n            return None",
        "begin_line": 42,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.__getattr__#53",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI.Session",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.Session.__getattr__(self, name)",
        "snippet": "    def __getattr__(self, name):\n        if name == 'handle':\n            return self._session\n        elif name == 'xenapi':\n            # Should be patched with mocker.patch().\n            return None\n        elif name.startswith('login') or name.startswith('slave_local'):\n            return lambda *params: self._login(name, params)\n        elif name == 'logout':\n            return self._logout",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.modules.cloud.xenserver.FakeXenAPI.xapi_local#65",
        "src_path": "test/units/modules/cloud/xenserver/FakeXenAPI.py",
        "class_name": "test.units.modules.cloud.xenserver.FakeXenAPI",
        "signature": "test.units.modules.cloud.xenserver.FakeXenAPI.xapi_local()",
        "snippet": "def xapi_local():\n    return Session(\"http://_var_lib_xcp_xapi/\")",
        "begin_line": 65,
        "end_line": 66,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.swap_stdin_and_argv#34",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv",
        "signature": "test.units.mock.procenv.swap_stdin_and_argv(stdin_data='', argv_data=tuple())",
        "snippet": "def swap_stdin_and_argv(stdin_data='', argv_data=tuple()):\n    \"\"\"\n    context manager that temporarily masks the test runner's values for stdin and argv\n    \"\"\"\n    real_stdin = sys.stdin\n    real_argv = sys.argv\n\n    if PY3:\n        fake_stream = StringIO(stdin_data)\n        fake_stream.buffer = BytesIO(to_bytes(stdin_data))\n    else:\n        fake_stream = BytesIO(to_bytes(stdin_data))\n\n    try:\n        sys.stdin = fake_stream\n        sys.argv = argv_data\n\n        yield\n    finally:\n        sys.stdin = real_stdin\n        sys.argv = real_argv",
        "begin_line": 34,
        "end_line": 54,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.setUp#78",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.setUp(self, module_args=None)",
        "snippet": "    def setUp(self, module_args=None):\n        if module_args is None:\n            module_args = {'_ansible_remote_tmp': '/tmp', '_ansible_keep_remote_files': False}\n\n        args = json.dumps(dict(ANSIBLE_MODULE_ARGS=module_args))\n\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap = swap_stdin_and_argv(stdin_data=args)\n        self.stdin_swap.__enter__()",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "test.units.mock.procenv.ModuleTestCase.tearDown#88",
        "src_path": "test/units/mock/procenv.py",
        "class_name": "test.units.mock.procenv.ModuleTestCase",
        "signature": "test.units.mock.procenv.ModuleTestCase.tearDown(self)",
        "snippet": "    def tearDown(self):\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap.__exit__(None, None, None)",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "is_bug": false
    }
]