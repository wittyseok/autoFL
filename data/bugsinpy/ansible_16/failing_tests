coverage run -m pytest test/units/module_utils/facts/hardware/test_linux_get_cpu_info.py::test_get_cpu_info_missing_arch
============================= test session starts ==============================
platform linux -- Python 3.6.9, pytest-3.10.1, py-1.11.0, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/ansible, inifile:
plugins: mock-1.2
collected 1 item

test/units/module_utils/facts/hardware/test_linux_get_cpu_info.py F      [100%]

=================================== FAILURES ===================================
________________________ test_get_cpu_info_missing_arch ________________________

mocker = <pytest_mock.MockFixture object at 0x7fdfb7249c50>

    def test_get_cpu_info_missing_arch(mocker):
        module = mocker.Mock()
        inst = linux.LinuxHardware(module)
    
        # ARM and Power will report incorrect processor count if architecture is not available
        mocker.patch('os.path.exists', return_value=False)
        mocker.patch('os.access', return_value=True)
        for test in CPU_INFO_TEST_SCENARIOS:
            mocker.patch('ansible.module_utils.facts.hardware.linux.get_file_lines', side_effect=[[], test['cpuinfo']])
            test_result = inst.get_cpu_facts()
            if test['architecture'].startswith(('armv', 'aarch', 'ppc')):
>               assert test['expected_result'] != test_result
E               AssertionError: assert {'processor': ['0', 'POWER7 (architected), altivec supported', '1', 'POWER7 (architected), altivec supported', '2', 'P...hitected), altivec supported', ...], 'processor_cores': 1, 'processor_count': 16, 'processor_threads_per_core': 1, ...} != {'processor': ['0', 'POWER7 (architected), altivec supported', '1', 'POWER7 (architected), altivec supported', '2', 'P...hitected), altivec supported', ...], 'processor_cores': 1, 'processor_count': 16, 'processor_threads_per_core': 1, ...}

test/units/module_utils/facts/hardware/test_linux_get_cpu_info.py:36: AssertionError
=========================== 1 failed in 0.11 seconds ===========================
