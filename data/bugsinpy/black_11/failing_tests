coverage run -m unittest -q tests.test_black.BlackTestCase.test_comments6
Expected tree:
file_input
  simple_stmt
    import_from
      NAME 'from'
      NAME ' ' 'typing'
      NAME ' ' 'import'
      import_as_names
        NAME ' ' 'Any'
        COMMA ','
        NAME ' ' 'Tuple'
      /import_as_names
    /import_from
    NEWLINE '\n'
  /simple_stmt
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'a'
        COMMA ','
      /typedargslist
      RPAR '  # type: int\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n# test type comments\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME 'a'
        COMMA ','
        NAME ' ' 'b'
        COMMA ','
        NAME ' ' 'c'
        COMMA ','
        NAME ' ' 'd'
        COMMA ','
        NAME ' ' 'e'
        COMMA ','
        NAME ' ' 'f'
        COMMA ','
        NAME ' ' 'g'
        COMMA ','
        NAME ' ' 'h'
        COMMA ','
        NAME ' ' 'i'
      /typedargslist
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (int, int, int, int, int, int, int, int, int) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'a'
        COMMA ','
        NAME '  # type: int\n    ' 'b'
        COMMA ','
        NAME '  # type: int\n    ' 'c'
        COMMA ','
        NAME '  # type: int\n    ' 'd'
        COMMA ','
        NAME '  # type: int\n    ' 'e'
        COMMA ','
        NAME '  # type: int\n    ' 'f'
        COMMA ','
        NAME '  # type: int\n    ' 'g'
        COMMA ','
        NAME '  # type: int\n    ' 'h'
        COMMA ','
        NAME '  # type: int\n    ' 'i'
        COMMA ','
      /typedargslist
      RPAR '  # type: int\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (...) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'arg'
        COMMA ','
        STAR '  # type: int\n    ' '*'
        NAME 'args'
        COMMA ','
        NAME '  # type: *Any\n    ' 'default'
        EQUAL '='
        NAME 'False'
        COMMA ','
        DOUBLESTAR '  # type: bool\n    ' '**'
        NAME 'kwargs'
        COMMA ','
      /typedargslist
      RPAR '  # type: **Any\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (...) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'a'
        COMMA ','
        NAME '  # type: int\n    ' 'b'
        COMMA ','
        NAME '  # type: int\n    ' 'c'
        COMMA ','
        NAME '  # type: int\n    ' 'd'
        COMMA ','
      /typedargslist
      RPAR '  # type: int\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        expr_stmt
          NAME '    # type: (...) -> None\n\n    ' 'element'
          EQUAL ' ' '='
          NUMBER ' ' '0'
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_element'
          EQUAL ' ' '='
          NUMBER ' ' '1'
        /expr_stmt
        NEWLINE '  # type: float' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_element_with_long_name'
          EQUAL ' ' '='
          NUMBER ' ' '2'
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            NUMBER '\n        ' '3'
            RPAR '\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '\n    ' 'tup'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            testlist_gexp
              NAME '\n        ' 'another_element'
              COMMA ','
              NAME '  # type: int\n        ' 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'
              COMMA ','
            /testlist_gexp
            RPAR '  # type: int\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: Tuple[int, int]' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '\n    ' 'a'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            arith_expr
              NAME '\n        ' 'element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element_with_long_name'
              PLUS '\n        ' '+'
              NAME ' ' 'element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element_with_long_name'
            /arith_expr
            RPAR '\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER ''
/file_input
Actual tree:
file_input
  simple_stmt
    import_from
      NAME 'from'
      NAME ' ' 'typing'
      NAME ' ' 'import'
      import_as_names
        NAME ' ' 'Any'
        COMMA ','
        NAME ' ' 'Tuple'
      /import_as_names
    /import_from
    NEWLINE '\n'
  /simple_stmt
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME 'a'
        COMMA ','
      /typedargslist
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '  # type: int' '\n'
      INDENT ''
      simple_stmt
        NAME '    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n# test type comments\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME 'a'
        COMMA ','
        NAME ' ' 'b'
        COMMA ','
        NAME ' ' 'c'
        COMMA ','
        NAME ' ' 'd'
        COMMA ','
        NAME ' ' 'e'
        COMMA ','
        NAME ' ' 'f'
        COMMA ','
        NAME ' ' 'g'
        COMMA ','
        NAME ' ' 'h'
        COMMA ','
        NAME ' ' 'i'
      /typedargslist
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (int, int, int, int, int, int, int, int, int) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'a'
        COMMA ','
        NAME '  # type: int\n    ' 'b'
        COMMA ','
        NAME '  # type: int\n    ' 'c'
        COMMA ','
        NAME '  # type: int\n    ' 'd'
        COMMA ','
        NAME '  # type: int\n    ' 'e'
        COMMA ','
        NAME '  # type: int\n    ' 'f'
        COMMA ','
        NAME '  # type: int\n    ' 'g'
        COMMA ','
        NAME '  # type: int\n    ' 'h'
        COMMA ','
        NAME '  # type: int\n    ' 'i'
        COMMA ','
      /typedargslist
      RPAR '  # type: int\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (...) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME '\n    ' 'arg'
        COMMA ','
        STAR '  # type: int\n    ' '*'
        NAME 'args'
        COMMA ','
        NAME '  # type: *Any\n    ' 'default'
        EQUAL '='
        NAME 'False'
        COMMA ','
        DOUBLESTAR '  # type: bool\n    ' '**'
        NAME 'kwargs'
        COMMA ','
      /typedargslist
      RPAR '  # type: **Any\n' ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '\n'
      INDENT ''
      simple_stmt
        NAME '    # type: (...) -> None\n    ' 'pass'
        NEWLINE '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  funcdef
    NAME '\n\n' 'def'
    NAME ' ' 'f'
    parameters
      LPAR '('
      typedargslist
        NAME 'a'
        COMMA ','
        NAME ' ' 'b'
        COMMA ','
        NAME ' ' 'c'
        COMMA ','
        NAME ' ' 'd'
      /typedargslist
      RPAR ')'
    /parameters
    COLON ':'
    suite
      NEWLINE '  # type: int  # type: int  # type: int  # type: int' '\n'
      INDENT ''
      simple_stmt
        expr_stmt
          NAME '    # type: (...) -> None\n\n    ' 'element'
          EQUAL ' ' '='
          NUMBER ' ' '0'
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_element'
          EQUAL ' ' '='
          NUMBER ' ' '1'
        /expr_stmt
        NEWLINE '  # type: float' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_element_with_long_name'
          EQUAL ' ' '='
          NUMBER ' ' '2'
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '    ' 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            NUMBER '\n        ' '3'
            RPAR '\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '\n    ' 'tup'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            testlist_gexp
              NAME '\n        ' 'another_element'
              COMMA ','
              NAME '  # type: int\n        ' 'another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style'
              COMMA ','
            /testlist_gexp
            RPAR '  # type: int\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: Tuple[int, int]' '\n'
      /simple_stmt
      simple_stmt
        expr_stmt
          NAME '\n    ' 'a'
          EQUAL ' ' '='
          atom
            LPAR ' ' '('
            arith_expr
              NAME '\n        ' 'element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element_with_long_name'
              PLUS '\n        ' '+'
              NAME ' ' 'element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element'
              PLUS '\n        ' '+'
              NAME ' ' 'another_element_with_long_name'
            /arith_expr
            RPAR '\n    ' ')'
          /atom
        /expr_stmt
        NEWLINE '  # type: int' '\n'
      /simple_stmt
      DEDENT ''
    /suite
  /funcdef
  ENDMARKER ''
/file_input
======================================================================
FAIL: test_comments6 (tests.test_black.BlackTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/conda/envs/523f2d89d53ebeb9a9749b027281b908/lib/python3.8/unittest/mock.py", line 1325, in patched
    return func(*newargs, **newkeywargs)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 369, in test_comments6
    self.assertFormatEqual(expected, actual)
  File "/home/user/BugsInPy/temp/projects/black/tests/test_black.py", line 156, in assertFormatEqual
    self.assertEqual(expected, actual)
AssertionError: 'from[32 chars]ef f(\n    a,  # type: int\n):\n    pass\n\n\n[1362 chars]nt\n' != 'from[32 chars]ef f(a,):  # type: int\n    pass\n\n\n# test t[1330 chars]nt\n'
  from typing import Any, Tuple
  
  
+ def f(a,):  # type: int
- def f(
-     a,  # type: int
- ):
      pass
  
  
  # test type comments
  def f(a, b, c, d, e, f, g, h, i):
      # type: (int, int, int, int, int, int, int, int, int) -> None
      pass
  
  
  def f(
      a,  # type: int
      b,  # type: int
      c,  # type: int
      d,  # type: int
      e,  # type: int
      f,  # type: int
      g,  # type: int
      h,  # type: int
      i,  # type: int
  ):
      # type: (...) -> None
      pass
  
  
  def f(
      arg,  # type: int
      *args,  # type: *Any
      default=False,  # type: bool
      **kwargs,  # type: **Any
  ):
      # type: (...) -> None
      pass
  
  
+ def f(a, b, c, d):  # type: int  # type: int  # type: int  # type: int
- def f(
-     a,  # type: int
-     b,  # type: int
-     c,  # type: int
-     d,  # type: int
- ):
      # type: (...) -> None
  
      element = 0  # type: int
      another_element = 1  # type: float
      another_element_with_long_name = 2  # type: int
      another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style = (
          3
      )  # type: int
  
      tup = (
          another_element,  # type: int
          another_really_really_long_element_with_a_unnecessarily_long_name_to_describe_what_it_does_enterprise_style,  # type: int
      )  # type: Tuple[int, int]
  
      a = (
          element
          + another_element
          + another_element_with_long_name
          + element
          + another_element
          + another_element_with_long_name
      )  # type: int


----------------------------------------------------------------------
Ran 1 test in 0.067s

FAILED (failures=1)
