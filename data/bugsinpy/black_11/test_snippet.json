[
    {
        "name": "tests.test_black.dump_to_stderr#50",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.dump_to_stderr(*output: str)",
        "snippet": "def dump_to_stderr(*output: str) -> str:\n    return \"\\n\" + \"\\n\".join(output) + \"\\n\"",
        "begin_line": 50,
        "end_line": 51,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.read_data#54",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.read_data(name: str, data: bool=True)",
        "snippet": "def read_data(name: str, data: bool = True) -> Tuple[str, str]:\n    \"\"\"read_data('test_name') -> 'input', 'output'\"\"\"\n    if not name.endswith((\".py\", \".pyi\", \".out\", \".diff\")):\n        name += \".py\"\n    _input: List[str] = []\n    _output: List[str] = []\n    base_dir = THIS_DIR / \"data\" if data else THIS_DIR\n    with open(base_dir / name, \"r\", encoding=\"utf8\") as test:\n        lines = test.readlines()\n    result = _input\n    for line in lines:\n        line = line.replace(EMPTY_LINE, \"\")\n        if line.rstrip() == \"# output\":\n            result = _output\n            continue\n\n        result.append(line)\n    if _input and not _output:\n        # If there's no output marker, treat the entire file as already pre-formatted.\n        _output = _input[:]\n    return \"\".join(_input).strip() + \"\\n\", \"\".join(_output).strip() + \"\\n\"",
        "begin_line": 54,
        "end_line": 74,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.cache_dir#78",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.cache_dir(exists: bool=True)",
        "snippet": "def cache_dir(exists: bool = True) -> Iterator[Path]:\n    with TemporaryDirectory() as workspace:\n        cache_dir = Path(workspace)\n        if not exists:\n            cache_dir = cache_dir / \"new\"\n        with patch(\"black.CACHE_DIR\", cache_dir):\n            yield cache_dir",
        "begin_line": 78,
        "end_line": 84,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.event_loop#88",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.event_loop(close: bool)",
        "snippet": "def event_loop(close: bool) -> Iterator[None]:\n    policy = asyncio.get_event_loop_policy()\n    old_loop = policy.get_event_loop()\n    loop = policy.new_event_loop()\n    asyncio.set_event_loop(loop)\n    try:\n        yield\n\n    finally:\n        policy.set_event_loop(old_loop)\n        if close:\n            loop.close()",
        "begin_line": 88,
        "end_line": 99,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.async_test#102",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.async_test(f: Callable[..., Coroutine[Any, None, R]])",
        "snippet": "def async_test(f: Callable[..., Coroutine[Any, None, R]]) -> Callable[..., None]:\n    @event_loop(close=True)\n    @wraps(f)\n    def wrapper(*args: Any, **kwargs: Any) -> None:\n        asyncio.get_event_loop().run_until_complete(f(*args, **kwargs))\n\n    return wrapper",
        "begin_line": 102,
        "end_line": 108,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.wrapper#105",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black",
        "signature": "tests.test_black.wrapper(*args: Any, **kwargs: Any)",
        "snippet": "    def wrapper(*args: Any, **kwargs: Any) -> None:\n        asyncio.get_event_loop().run_until_complete(f(*args, **kwargs))",
        "begin_line": 105,
        "end_line": 106,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackRunner.__init__#116",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackRunner",
        "signature": "tests.test_black.BlackRunner.__init__(self)",
        "snippet": "    def __init__(self) -> None:\n        self.stderrbuf = BytesIO()\n        self.stdoutbuf = BytesIO()\n        self.stdout_bytes = b\"\"\n        self.stderr_bytes = b\"\"\n        super().__init__()",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackRunner.isolation#124",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackRunner",
        "signature": "tests.test_black.BlackRunner.isolation(self, *args: Any, **kwargs: Any)",
        "snippet": "    def isolation(self, *args: Any, **kwargs: Any) -> Generator[BinaryIO, None, None]:\n        with super().isolation(*args, **kwargs) as output:\n            try:\n                hold_stderr = sys.stderr\n                sys.stderr = TextIOWrapper(self.stderrbuf, encoding=self.charset)\n                yield output\n            finally:\n                self.stdout_bytes = sys.stdout.buffer.getvalue()  # type: ignore\n                self.stderr_bytes = sys.stderr.buffer.getvalue()  # type: ignore\n                sys.stderr = hold_stderr",
        "begin_line": 124,
        "end_line": 133,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.assertFormatEqual#139",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.assertFormatEqual(self, expected: str, actual: str)",
        "snippet": "    def assertFormatEqual(self, expected: str, actual: str) -> None:\n        if actual != expected and not os.environ.get(\"SKIP_AST_PRINT\"):\n            bdv: black.DebugVisitor[Any]\n            black.out(\"Expected tree:\", fg=\"green\")\n            try:\n                exp_node = black.lib2to3_parse(expected)\n                bdv = black.DebugVisitor()\n                list(bdv.visit(exp_node))\n            except Exception as ve:\n                black.err(str(ve))\n            black.out(\"Actual tree:\", fg=\"red\")\n            try:\n                exp_node = black.lib2to3_parse(actual)\n                bdv = black.DebugVisitor()\n                list(bdv.visit(exp_node))\n            except Exception as ve:\n                black.err(str(ve))\n        self.assertEqual(expected, actual)",
        "begin_line": 139,
        "end_line": 156,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty#159",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty(self)",
        "snippet": "    def test_empty(self) -> None:\n        source = expected = \"\"\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 159,
        "end_line": 164,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_ff#166",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_ff(self)",
        "snippet": "    def test_empty_ff(self) -> None:\n        expected = \"\"\n        tmp_file = Path(black.dump_to_file())\n        try:\n            self.assertFalse(ff(tmp_file, write_back=black.WriteBack.YES))\n            with open(tmp_file, encoding=\"utf8\") as f:\n                actual = f.read()\n        finally:\n            os.unlink(tmp_file)\n        self.assertFormatEqual(expected, actual)",
        "begin_line": 166,
        "end_line": 175,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_self#178",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_self(self)",
        "snippet": "    def test_self(self) -> None:\n        source, expected = read_data(\"test_black\", data=False)\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_FILE))",
        "begin_line": 178,
        "end_line": 184,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_black#187",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_black(self)",
        "snippet": "    def test_black(self) -> None:\n        source, expected = read_data(\"../black\", data=False)\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_DIR / \"..\" / \"black.py\"))",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_piping#195",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_piping(self)",
        "snippet": "    def test_piping(self) -> None:\n        source, expected = read_data(\"../black\", data=False)\n        result = BlackRunner().invoke(\n            black.main,\n            [\"-\", \"--fast\", f\"--line-length={ll}\"],\n            input=BytesIO(source.encode(\"utf8\")),\n        )\n        self.assertEqual(result.exit_code, 0)\n        self.assertFormatEqual(expected, result.output)\n        black.assert_equivalent(source, result.output)\n        black.assert_stable(source, result.output, line_length=ll)",
        "begin_line": 195,
        "end_line": 205,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_piping_diff#207",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_piping_diff(self)",
        "snippet": "    def test_piping_diff(self) -> None:\n        diff_header = re.compile(\n            rf\"(STDIN|STDOUT)\\t\\d\\d\\d\\d-\\d\\d-\\d\\d \"\n            rf\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d\\d\\d\\d \\+\\d\\d\\d\\d\"\n        )\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        config = THIS_DIR / \"data\" / \"empty_pyproject.toml\"\n        args = [\"-\", \"--fast\", f\"--line-length={ll}\", \"--diff\", f\"--config={config}\"]\n        result = BlackRunner().invoke(\n            black.main, args, input=BytesIO(source.encode(\"utf8\"))\n        )\n        self.assertEqual(result.exit_code, 0)\n        actual = diff_header.sub(\"[Deterministic header]\", result.output)\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        self.assertEqual(expected, actual)",
        "begin_line": 207,
        "end_line": 222,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_setup#225",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_setup(self)",
        "snippet": "    def test_setup(self) -> None:\n        source, expected = read_data(\"../setup\", data=False)\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        self.assertFalse(ff(THIS_DIR / \"..\" / \"setup.py\"))",
        "begin_line": 225,
        "end_line": 231,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_function#234",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_function(self)",
        "snippet": "    def test_function(self) -> None:\n        source, expected = read_data(\"function\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 234,
        "end_line": 239,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_function2#242",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_function2(self)",
        "snippet": "    def test_function2(self) -> None:\n        source, expected = read_data(\"function2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 242,
        "end_line": 247,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression#250",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression(self)",
        "snippet": "    def test_expression(self) -> None:\n        source, expected = read_data(\"expression\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 250,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression_ff#257",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression_ff(self)",
        "snippet": "    def test_expression_ff(self) -> None:\n        source, expected = read_data(\"expression\")\n        tmp_file = Path(black.dump_to_file(source))\n        try:\n            self.assertTrue(ff(tmp_file, write_back=black.WriteBack.YES))\n            with open(tmp_file, encoding=\"utf8\") as f:\n                actual = f.read()\n        finally:\n            os.unlink(tmp_file)\n        self.assertFormatEqual(expected, actual)\n        with patch(\"black.dump_to_file\", dump_to_stderr):\n            black.assert_equivalent(source, actual)\n            black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 257,
        "end_line": 269,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_expression_diff#271",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_expression_diff(self)",
        "snippet": "    def test_expression_diff(self) -> None:\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        tmp_file = Path(black.dump_to_file(source))\n        diff_header = re.compile(\n            rf\"{re.escape(str(tmp_file))}\\t\\d\\d\\d\\d-\\d\\d-\\d\\d \"\n            rf\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\\d\\d\\d\\d \\+\\d\\d\\d\\d\"\n        )\n        try:\n            result = BlackRunner().invoke(black.main, [\"--diff\", str(tmp_file)])\n            self.assertEqual(result.exit_code, 0)\n        finally:\n            os.unlink(tmp_file)\n        actual = result.output\n        actual = diff_header.sub(\"[Deterministic header]\", actual)\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        if expected != actual:\n            dump = black.dump_to_file(actual)\n            msg = (\n                f\"Expected diff isn't equal to the actual. If you made changes \"\n                f\"to expression.py and this is an anticipated difference, \"\n                f\"overwrite tests/expression.diff with {dump}\"\n            )\n            self.assertEqual(expected, actual, msg)",
        "begin_line": 271,
        "end_line": 294,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_fstring#297",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_fstring(self)",
        "snippet": "    def test_fstring(self) -> None:\n        source, expected = read_data(\"fstring\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 297,
        "end_line": 302,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_string_quotes#305",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_string_quotes(self)",
        "snippet": "    def test_string_quotes(self) -> None:\n        source, expected = read_data(\"string_quotes\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)\n        mode = black.FileMode.NO_STRING_NORMALIZATION\n        not_normalized = fs(source, mode=mode)\n        self.assertFormatEqual(source, not_normalized)\n        black.assert_equivalent(source, not_normalized)\n        black.assert_stable(source, not_normalized, line_length=ll, mode=mode)",
        "begin_line": 305,
        "end_line": 315,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_slices#318",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_slices(self)",
        "snippet": "    def test_slices(self) -> None:\n        source, expected = read_data(\"slices\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 318,
        "end_line": 323,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments#326",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments(self)",
        "snippet": "    def test_comments(self) -> None:\n        source, expected = read_data(\"comments\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 326,
        "end_line": 331,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments2#334",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments2(self)",
        "snippet": "    def test_comments2(self) -> None:\n        source, expected = read_data(\"comments2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 334,
        "end_line": 339,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments3#342",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments3(self)",
        "snippet": "    def test_comments3(self) -> None:\n        source, expected = read_data(\"comments3\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 342,
        "end_line": 347,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments4#350",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments4(self)",
        "snippet": "    def test_comments4(self) -> None:\n        source, expected = read_data(\"comments4\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 350,
        "end_line": 355,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments5#358",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments5(self)",
        "snippet": "    def test_comments5(self) -> None:\n        source, expected = read_data(\"comments5\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 358,
        "end_line": 363,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_comments6#366",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_comments6(self)",
        "snippet": "    def test_comments6(self) -> None:\n        source, expected = read_data(\"comments6\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cantfit#374",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cantfit(self)",
        "snippet": "    def test_cantfit(self) -> None:\n        source, expected = read_data(\"cantfit\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 374,
        "end_line": 379,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_import_spacing#382",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_import_spacing(self)",
        "snippet": "    def test_import_spacing(self) -> None:\n        source, expected = read_data(\"import_spacing\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 382,
        "end_line": 387,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_composition#390",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_composition(self)",
        "snippet": "    def test_composition(self) -> None:\n        source, expected = read_data(\"composition\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 390,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_lines#398",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_lines(self)",
        "snippet": "    def test_empty_lines(self) -> None:\n        source, expected = read_data(\"empty_lines\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_string_prefixes#406",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_string_prefixes(self)",
        "snippet": "    def test_string_prefixes(self) -> None:\n        source, expected = read_data(\"string_prefixes\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 406,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_numeric_literals#414",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_numeric_literals(self)",
        "snippet": "    def test_numeric_literals(self) -> None:\n        source, expected = read_data(\"numeric_literals\")\n        actual = fs(source, mode=black.FileMode.PYTHON36)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 414,
        "end_line": 419,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_numeric_literals_ignoring_underscores#422",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_numeric_literals_ignoring_underscores(self)",
        "snippet": "    def test_numeric_literals_ignoring_underscores(self) -> None:\n        source, expected = read_data(\"numeric_literals_skip_underscores\")\n        mode = (\n            black.FileMode.PYTHON36 | black.FileMode.NO_NUMERIC_UNDERSCORE_NORMALIZATION\n        )\n        actual = fs(source, mode=mode)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll, mode=mode)",
        "begin_line": 422,
        "end_line": 430,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_numeric_literals_py2#433",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_numeric_literals_py2(self)",
        "snippet": "    def test_numeric_literals_py2(self) -> None:\n        source, expected = read_data(\"numeric_literals_py2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 433,
        "end_line": 437,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_python2#440",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_python2(self)",
        "snippet": "    def test_python2(self) -> None:\n        source, expected = read_data(\"python2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        # black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 440,
        "end_line": 445,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_python2_unicode_literals#448",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_python2_unicode_literals(self)",
        "snippet": "    def test_python2_unicode_literals(self) -> None:\n        source, expected = read_data(\"python2_unicode_literals\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 448,
        "end_line": 452,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_stub#455",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_stub(self)",
        "snippet": "    def test_stub(self) -> None:\n        mode = black.FileMode.PYI\n        source, expected = read_data(\"stub.pyi\")\n        actual = fs(source, mode=mode)\n        self.assertFormatEqual(expected, actual)\n        black.assert_stable(source, actual, line_length=ll, mode=mode)",
        "begin_line": 455,
        "end_line": 460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_python37#463",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_python37(self)",
        "snippet": "    def test_python37(self) -> None:\n        source, expected = read_data(\"python37\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        major, minor = sys.version_info[:2]\n        if major > 3 or (major == 3 and minor >= 7):\n            black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 463,
        "end_line": 470,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_fmtonoff#473",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_fmtonoff(self)",
        "snippet": "    def test_fmtonoff(self) -> None:\n        source, expected = read_data(\"fmtonoff\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 473,
        "end_line": 478,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_fmtonoff2#481",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_fmtonoff2(self)",
        "snippet": "    def test_fmtonoff2(self) -> None:\n        source, expected = read_data(\"fmtonoff2\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 481,
        "end_line": 486,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_remove_empty_parentheses_after_class#489",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_remove_empty_parentheses_after_class(self)",
        "snippet": "    def test_remove_empty_parentheses_after_class(self) -> None:\n        source, expected = read_data(\"class_blank_parentheses\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 489,
        "end_line": 494,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_new_line_between_class_and_code#497",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_new_line_between_class_and_code(self)",
        "snippet": "    def test_new_line_between_class_and_code(self) -> None:\n        source, expected = read_data(\"class_methods_new_line\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 497,
        "end_line": 502,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_bracket_match#505",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_bracket_match(self)",
        "snippet": "    def test_bracket_match(self) -> None:\n        source, expected = read_data(\"bracketmatch\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
        "begin_line": 505,
        "end_line": 510,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_verbose#512",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_verbose(self)",
        "snippet": "    def test_report_verbose(self) -> None:\n        report = black.Report(verbose=True)\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"f1 already well formatted, good job.\")\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 3)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                out_lines[-1], \"f3 wasn't modified on disk since last run.\"\n            )\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 3)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 4)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(out_lines[-1], \"reformatted f3\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 4)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 5)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(out_lines[-1], \"wat ignored: no match\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 6)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(out_lines[-1], \"f4 already well formatted, good job.\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 512,
        "end_line": 605,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#517",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 517,
        "end_line": 518,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#520",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 520,
        "end_line": 521,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_quiet#607",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_quiet(self)",
        "snippet": "    def test_report_quiet(self) -> None:\n        report = black.Report(quiet=True)\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 607,
        "end_line": 692,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#612",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 612,
        "end_line": 613,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#615",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 615,
        "end_line": 616,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_report_normal#694",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_report_normal(self)",
        "snippet": "    def test_report_normal(self) -> None:\n        report = black.Report()\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            report.done(Path(\"f1\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 0)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(unstyle(str(report)), \"1 file left unchanged.\")\n            self.assertEqual(report.return_code, 0)\n            report.done(Path(\"f2\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 1 file left unchanged.\"\n            )\n            report.done(Path(\"f3\"), black.Changed.CACHED)\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 0)\n            self.assertEqual(out_lines[-1], \"reformatted f2\")\n            self.assertEqual(\n                unstyle(str(report)), \"1 file reformatted, 2 files left unchanged.\"\n            )\n            self.assertEqual(report.return_code, 0)\n            report.check = True\n            self.assertEqual(report.return_code, 1)\n            report.check = False\n            report.failed(Path(\"e1\"), \"boom\")\n            self.assertEqual(len(out_lines), 1)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(err_lines[-1], \"error: cannot format e1: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"1 file reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f3\"), black.Changed.YES)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 1)\n            self.assertEqual(out_lines[-1], \"reformatted f3\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"1 file failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.failed(Path(\"e2\"), \"boom\")\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(err_lines[-1], \"error: cannot format e2: boom\")\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.path_ignored(Path(\"wat\"), \"no match\")\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 2 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.done(Path(\"f4\"), black.Changed.NO)\n            self.assertEqual(len(out_lines), 2)\n            self.assertEqual(len(err_lines), 2)\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files reformatted, 3 files left unchanged, \"\n                \"2 files failed to reformat.\",\n            )\n            self.assertEqual(report.return_code, 123)\n            report.check = True\n            self.assertEqual(\n                unstyle(str(report)),\n                \"2 files would be reformatted, 3 files would be left unchanged, \"\n                \"2 files would fail to reformat.\",\n            )",
        "begin_line": 694,
        "end_line": 782,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#699",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 699,
        "end_line": 700,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#702",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 702,
        "end_line": 703,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_is_python36#784",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_is_python36(self)",
        "snippet": "    def test_is_python36(self) -> None:\n        node = black.lib2to3_parse(\"def f(*, arg): ...\\n\")\n        self.assertFalse(black.is_python36(node))\n        node = black.lib2to3_parse(\"def f(*, arg,): ...\\n\")\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(\"def f(*, arg): f'string'\\n\")\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(\"123_456\\n\")\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(\"123456\\n\")\n        self.assertFalse(black.is_python36(node))\n        source, expected = read_data(\"function\")\n        node = black.lib2to3_parse(source)\n        self.assertTrue(black.is_python36(node))\n        node = black.lib2to3_parse(expected)\n        self.assertTrue(black.is_python36(node))\n        source, expected = read_data(\"expression\")\n        node = black.lib2to3_parse(source)\n        self.assertFalse(black.is_python36(node))\n        node = black.lib2to3_parse(expected)\n        self.assertFalse(black.is_python36(node))",
        "begin_line": 784,
        "end_line": 804,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_get_future_imports#806",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_get_future_imports(self)",
        "snippet": "    def test_get_future_imports(self) -> None:\n        node = black.lib2to3_parse(\"\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import black\\n\")\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import multiple, imports\\n\")\n        self.assertEqual({\"multiple\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from __future__ import (parenthesized, imports)\\n\")\n        self.assertEqual({\"parenthesized\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\n            \"from __future__ import multiple\\nfrom __future__ import imports\\n\"\n        )\n        self.assertEqual({\"multiple\", \"imports\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"# comment\\nfrom __future__ import black\\n\")\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse('\"\"\"docstring\"\"\"\\nfrom __future__ import black\\n')\n        self.assertEqual({\"black\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\"some(other, code)\\nfrom __future__ import black\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))\n        node = black.lib2to3_parse(\"from some.module import black\\n\")\n        self.assertEqual(set(), black.get_future_imports(node))\n        node = black.lib2to3_parse(\n            \"from __future__ import unicode_literals as _unicode_literals\"\n        )\n        self.assertEqual({\"unicode_literals\"}, black.get_future_imports(node))\n        node = black.lib2to3_parse(\n            \"from __future__ import unicode_literals as _lol, print\"\n        )\n        self.assertEqual({\"unicode_literals\", \"print\"}, black.get_future_imports(node))",
        "begin_line": 806,
        "end_line": 834,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_debug_visitor#836",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_debug_visitor(self)",
        "snippet": "    def test_debug_visitor(self) -> None:\n        source, _ = read_data(\"debug_visitor.py\")\n        expected, _ = read_data(\"debug_visitor.out\")\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            black.DebugVisitor.show(source)\n        actual = \"\\n\".join(out_lines) + \"\\n\"\n        log_name = \"\"\n        if expected != actual:\n            log_name = black.dump_to_file(*out_lines)\n        self.assertEqual(\n            expected,\n            actual,\n            f\"AST print out is different. Actual version dumped to {log_name}\",\n        )",
        "begin_line": 836,
        "end_line": 858,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#842",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 842,
        "end_line": 843,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#845",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 845,
        "end_line": 846,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_format_file_contents#860",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_format_file_contents(self)",
        "snippet": "    def test_format_file_contents(self) -> None:\n        empty = \"\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(empty, line_length=ll, fast=False)\n        just_nl = \"\\n\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(just_nl, line_length=ll, fast=False)\n        same = \"l = [1, 2, 3]\\n\"\n        with self.assertRaises(black.NothingChanged):\n            black.format_file_contents(same, line_length=ll, fast=False)\n        different = \"l = [1,2,3]\"\n        expected = same\n        actual = black.format_file_contents(different, line_length=ll, fast=False)\n        self.assertEqual(expected, actual)\n        invalid = \"return if you can\"\n        with self.assertRaises(black.InvalidInput) as e:\n            black.format_file_contents(invalid, line_length=ll, fast=False)\n        self.assertEqual(str(e.exception), \"Cannot parse: 1:7: return if you can\")",
        "begin_line": 860,
        "end_line": 877,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_endmarker#879",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_endmarker(self)",
        "snippet": "    def test_endmarker(self) -> None:\n        n = black.lib2to3_parse(\"\\n\")\n        self.assertEqual(n.type, black.syms.file_input)\n        self.assertEqual(len(n.children), 1)\n        self.assertEqual(n.children[0].type, black.token.ENDMARKER)",
        "begin_line": 879,
        "end_line": 883,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_assertFormatEqual#886",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_assertFormatEqual(self)",
        "snippet": "    def test_assertFormatEqual(self) -> None:\n        out_lines = []\n        err_lines = []\n\n        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)\n\n        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)\n\n        with patch(\"black.out\", out), patch(\"black.err\", err):\n            with self.assertRaises(AssertionError):\n                self.assertFormatEqual(\"l = [1, 2, 3]\", \"l = [1, 2, 3,]\")\n\n        out_str = \"\".join(out_lines)\n        self.assertTrue(\"Expected tree:\" in out_str)\n        self.assertTrue(\"Actual tree:\" in out_str)\n        self.assertEqual(\"\".join(err_lines), \"\")",
        "begin_line": 886,
        "end_line": 903,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.out#890",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.out(msg: str, **kwargs: Any)",
        "snippet": "        def out(msg: str, **kwargs: Any) -> None:\n            out_lines.append(msg)",
        "begin_line": 890,
        "end_line": 891,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.err#893",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.err(msg: str, **kwargs: Any)",
        "snippet": "        def err(msg: str, **kwargs: Any) -> None:\n            err_lines.append(msg)",
        "begin_line": 893,
        "end_line": 894,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_broken_file#905",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_broken_file(self)",
        "snippet": "    def test_cache_broken_file(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            with cache_file.open(\"w\") as fobj:\n                fobj.write(\"this is not a pickle\")\n            self.assertEqual(black.read_cache(black.DEFAULT_LINE_LENGTH, mode), {})\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            result = CliRunner().invoke(black.main, [str(src)])\n            self.assertEqual(result.exit_code, 0)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(src, cache)",
        "begin_line": 905,
        "end_line": 918,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_single_file_already_cached#920",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_single_file_already_cached(self)",
        "snippet": "    def test_cache_single_file_already_cached(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [src], black.DEFAULT_LINE_LENGTH, mode)\n            result = CliRunner().invoke(black.main, [str(src)])\n            self.assertEqual(result.exit_code, 0)\n            with src.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), \"print('hello')\")",
        "begin_line": 920,
        "end_line": 930,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_cache_multiple_files#933",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_cache_multiple_files(self)",
        "snippet": "    def test_cache_multiple_files(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace, patch(\n            \"black.ProcessPoolExecutor\", new=ThreadPoolExecutor\n        ):\n            one = (workspace / \"one.py\").resolve()\n            with one.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            two = (workspace / \"two.py\").resolve()\n            with two.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            black.write_cache({}, [one], black.DEFAULT_LINE_LENGTH, mode)\n            result = CliRunner().invoke(black.main, [str(workspace)])\n            self.assertEqual(result.exit_code, 0)\n            with one.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), \"print('hello')\")\n            with two.open(\"r\") as fobj:\n                self.assertEqual(fobj.read(), 'print(\"hello\")\\n')\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(one, cache)\n            self.assertIn(two, cache)",
        "begin_line": 933,
        "end_line": 953,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_cache_when_writeback_diff#955",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_cache_when_writeback_diff(self)",
        "snippet": "    def test_no_cache_when_writeback_diff(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            with src.open(\"w\") as fobj:\n                fobj.write(\"print('hello')\")\n            result = CliRunner().invoke(black.main, [str(src), \"--diff\"])\n            self.assertEqual(result.exit_code, 0)\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertFalse(cache_file.exists())",
        "begin_line": 955,
        "end_line": 964,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_cache_when_stdin#966",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_cache_when_stdin(self)",
        "snippet": "    def test_no_cache_when_stdin(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir():\n            result = CliRunner().invoke(\n                black.main, [\"-\"], input=BytesIO(b\"print('hello')\")\n            )\n            self.assertEqual(result.exit_code, 0)\n            cache_file = black.get_cache_file(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertFalse(cache_file.exists())",
        "begin_line": 966,
        "end_line": 974,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_read_cache_no_cachefile#976",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_read_cache_no_cachefile(self)",
        "snippet": "    def test_read_cache_no_cachefile(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir():\n            self.assertEqual(black.read_cache(black.DEFAULT_LINE_LENGTH, mode), {})",
        "begin_line": 976,
        "end_line": 979,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_read_cache#981",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_read_cache(self)",
        "snippet": "    def test_write_cache_read_cache(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            src = (workspace / \"test.py\").resolve()\n            src.touch()\n            black.write_cache({}, [src], black.DEFAULT_LINE_LENGTH, mode)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertIn(src, cache)\n            self.assertEqual(cache[src], black.get_cache_info(src))",
        "begin_line": 981,
        "end_line": 989,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_filter_cached#991",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_filter_cached(self)",
        "snippet": "    def test_filter_cached(self) -> None:\n        with TemporaryDirectory() as workspace:\n            path = Path(workspace)\n            uncached = (path / \"uncached\").resolve()\n            cached = (path / \"cached\").resolve()\n            cached_but_changed = (path / \"changed\").resolve()\n            uncached.touch()\n            cached.touch()\n            cached_but_changed.touch()\n            cache = {cached: black.get_cache_info(cached), cached_but_changed: (0.0, 0)}\n            todo, done = black.filter_cached(\n                cache, {uncached, cached, cached_but_changed}\n            )\n            self.assertEqual(todo, {uncached, cached_but_changed})\n            self.assertEqual(done, {cached})",
        "begin_line": 991,
        "end_line": 1005,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_creates_directory_if_needed#1007",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_creates_directory_if_needed(self)",
        "snippet": "    def test_write_cache_creates_directory_if_needed(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir(exists=False) as workspace:\n            self.assertFalse(workspace.exists())\n            black.write_cache({}, [], black.DEFAULT_LINE_LENGTH, mode)\n            self.assertTrue(workspace.exists())",
        "begin_line": 1007,
        "end_line": 1012,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_failed_formatting_does_not_get_cached#1015",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_failed_formatting_does_not_get_cached(self)",
        "snippet": "    def test_failed_formatting_does_not_get_cached(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace, patch(\n            \"black.ProcessPoolExecutor\", new=ThreadPoolExecutor\n        ):\n            failing = (workspace / \"failing.py\").resolve()\n            with failing.open(\"w\") as fobj:\n                fobj.write(\"not actually python\")\n            clean = (workspace / \"clean.py\").resolve()\n            with clean.open(\"w\") as fobj:\n                fobj.write('print(\"hello\")\\n')\n            result = CliRunner().invoke(black.main, [str(workspace)])\n            self.assertEqual(result.exit_code, 123)\n            cache = black.read_cache(black.DEFAULT_LINE_LENGTH, mode)\n            self.assertNotIn(failing, cache)\n            self.assertIn(clean, cache)",
        "begin_line": 1015,
        "end_line": 1030,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_write_cache_write_fail#1032",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_write_cache_write_fail(self)",
        "snippet": "    def test_write_cache_write_fail(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir(), patch.object(Path, \"open\") as mock:\n            mock.side_effect = OSError\n            black.write_cache({}, [], black.DEFAULT_LINE_LENGTH, mode)",
        "begin_line": 1032,
        "end_line": 1036,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_check_diff_use_together#1039",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_check_diff_use_together(self)",
        "snippet": "    def test_check_diff_use_together(self) -> None:\n        with cache_dir():\n            # Files which will be reformatted.\n            src1 = (THIS_DIR / \"data\" / \"string_quotes.py\").resolve()\n            result = CliRunner().invoke(black.main, [str(src1), \"--diff\", \"--check\"])\n            self.assertEqual(result.exit_code, 1, result.output)\n            # Files which will not be reformatted.\n            src2 = (THIS_DIR / \"data\" / \"composition.py\").resolve()\n            result = CliRunner().invoke(black.main, [str(src2), \"--diff\", \"--check\"])\n            self.assertEqual(result.exit_code, 0, result.output)\n            # Multi file command.\n            result = CliRunner().invoke(\n                black.main, [str(src1), str(src2), \"--diff\", \"--check\"]\n            )\n            self.assertEqual(result.exit_code, 1, result.output)",
        "begin_line": 1039,
        "end_line": 1053,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_no_files#1055",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_no_files(self)",
        "snippet": "    def test_no_files(self) -> None:\n        with cache_dir():\n            # Without an argument, black exits with error code 0.\n            result = CliRunner().invoke(black.main, [])\n            self.assertEqual(result.exit_code, 0)",
        "begin_line": 1055,
        "end_line": 1059,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_broken_symlink#1061",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_broken_symlink(self)",
        "snippet": "    def test_broken_symlink(self) -> None:\n        with cache_dir() as workspace:\n            symlink = workspace / \"broken_link.py\"\n            try:\n                symlink.symlink_to(\"nonexistent.py\")\n            except OSError as e:\n                self.skipTest(f\"Can't create symlinks: {e}\")\n            result = CliRunner().invoke(black.main, [str(workspace.resolve())])\n            self.assertEqual(result.exit_code, 0)",
        "begin_line": 1061,
        "end_line": 1069,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_read_cache_line_lengths#1071",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_read_cache_line_lengths(self)",
        "snippet": "    def test_read_cache_line_lengths(self) -> None:\n        mode = black.FileMode.AUTO_DETECT\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            path.touch()\n            black.write_cache({}, [path], 1, mode)\n            one = black.read_cache(1, mode)\n            self.assertIn(path, one)\n            two = black.read_cache(2, mode)\n            self.assertNotIn(path, two)",
        "begin_line": 1071,
        "end_line": 1080,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_single_file_force_pyi#1082",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_single_file_force_pyi(self)",
        "snippet": "    def test_single_file_force_pyi(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        pyi_mode = black.FileMode.PYI\n        contents, expected = read_data(\"force_pyi\")\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            with open(path, \"w\") as fh:\n                fh.write(contents)\n            result = CliRunner().invoke(black.main, [str(path), \"--pyi\"])\n            self.assertEqual(result.exit_code, 0)\n            with open(path, \"r\") as fh:\n                actual = fh.read()\n            # verify cache with --pyi is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, pyi_mode)\n            self.assertIn(path, pyi_cache)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            self.assertNotIn(path, normal_cache)\n        self.assertEqual(actual, expected)",
        "begin_line": 1082,
        "end_line": 1099,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_multi_file_force_pyi#1102",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_multi_file_force_pyi(self)",
        "snippet": "    def test_multi_file_force_pyi(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        pyi_mode = black.FileMode.PYI\n        contents, expected = read_data(\"force_pyi\")\n        with cache_dir() as workspace:\n            paths = [\n                (workspace / \"file1.py\").resolve(),\n                (workspace / \"file2.py\").resolve(),\n            ]\n            for path in paths:\n                with open(path, \"w\") as fh:\n                    fh.write(contents)\n            result = CliRunner().invoke(black.main, [str(p) for p in paths] + [\"--pyi\"])\n            self.assertEqual(result.exit_code, 0)\n            for path in paths:\n                with open(path, \"r\") as fh:\n                    actual = fh.read()\n                self.assertEqual(actual, expected)\n            # verify cache with --pyi is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, pyi_mode)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            for path in paths:\n                self.assertIn(path, pyi_cache)\n                self.assertNotIn(path, normal_cache)",
        "begin_line": 1102,
        "end_line": 1125,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_pipe_force_pyi#1127",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_pipe_force_pyi(self)",
        "snippet": "    def test_pipe_force_pyi(self) -> None:\n        source, expected = read_data(\"force_pyi\")\n        result = CliRunner().invoke(\n            black.main, [\"-\", \"-q\", \"--pyi\"], input=BytesIO(source.encode(\"utf8\"))\n        )\n        self.assertEqual(result.exit_code, 0)\n        actual = result.output\n        self.assertFormatEqual(actual, expected)",
        "begin_line": 1127,
        "end_line": 1134,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_single_file_force_py36#1136",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_single_file_force_py36(self)",
        "snippet": "    def test_single_file_force_py36(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        py36_mode = black.FileMode.PYTHON36\n        source, expected = read_data(\"force_py36\")\n        with cache_dir() as workspace:\n            path = (workspace / \"file.py\").resolve()\n            with open(path, \"w\") as fh:\n                fh.write(source)\n            result = CliRunner().invoke(black.main, [str(path), \"--py36\"])\n            self.assertEqual(result.exit_code, 0)\n            with open(path, \"r\") as fh:\n                actual = fh.read()\n            # verify cache with --py36 is separate\n            py36_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, py36_mode)\n            self.assertIn(path, py36_cache)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            self.assertNotIn(path, normal_cache)\n        self.assertEqual(actual, expected)",
        "begin_line": 1136,
        "end_line": 1153,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_multi_file_force_py36#1156",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_multi_file_force_py36(self)",
        "snippet": "    def test_multi_file_force_py36(self) -> None:\n        reg_mode = black.FileMode.AUTO_DETECT\n        py36_mode = black.FileMode.PYTHON36\n        source, expected = read_data(\"force_py36\")\n        with cache_dir() as workspace:\n            paths = [\n                (workspace / \"file1.py\").resolve(),\n                (workspace / \"file2.py\").resolve(),\n            ]\n            for path in paths:\n                with open(path, \"w\") as fh:\n                    fh.write(source)\n            result = CliRunner().invoke(\n                black.main, [str(p) for p in paths] + [\"--py36\"]\n            )\n            self.assertEqual(result.exit_code, 0)\n            for path in paths:\n                with open(path, \"r\") as fh:\n                    actual = fh.read()\n                self.assertEqual(actual, expected)\n            # verify cache with --py36 is separate\n            pyi_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, py36_mode)\n            normal_cache = black.read_cache(black.DEFAULT_LINE_LENGTH, reg_mode)\n            for path in paths:\n                self.assertIn(path, pyi_cache)\n                self.assertNotIn(path, normal_cache)",
        "begin_line": 1156,
        "end_line": 1181,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_pipe_force_py36#1183",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_pipe_force_py36(self)",
        "snippet": "    def test_pipe_force_py36(self) -> None:\n        source, expected = read_data(\"force_py36\")\n        result = CliRunner().invoke(\n            black.main, [\"-\", \"-q\", \"--py36\"], input=BytesIO(source.encode(\"utf8\"))\n        )\n        self.assertEqual(result.exit_code, 0)\n        actual = result.output\n        self.assertFormatEqual(actual, expected)",
        "begin_line": 1183,
        "end_line": 1190,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_include_exclude#1192",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_include_exclude(self)",
        "snippet": "    def test_include_exclude(self) -> None:\n        path = THIS_DIR / \"data\" / \"include_exclude_tests\"\n        include = re.compile(r\"\\.pyi?$\")\n        exclude = re.compile(r\"/exclude/|/\\.definitely_exclude/\")\n        report = black.Report()\n        sources: List[Path] = []\n        expected = [\n            Path(path / \"b/dont_exclude/a.py\"),\n            Path(path / \"b/dont_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(path, this_abs, include, exclude, report)\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1192,
        "end_line": 1206,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_include#1208",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_include(self)",
        "snippet": "    def test_empty_include(self) -> None:\n        path = THIS_DIR / \"data\" / \"include_exclude_tests\"\n        report = black.Report()\n        empty = re.compile(r\"\")\n        sources: List[Path] = []\n        expected = [\n            Path(path / \"b/exclude/a.pie\"),\n            Path(path / \"b/exclude/a.py\"),\n            Path(path / \"b/exclude/a.pyi\"),\n            Path(path / \"b/dont_exclude/a.pie\"),\n            Path(path / \"b/dont_exclude/a.py\"),\n            Path(path / \"b/dont_exclude/a.pyi\"),\n            Path(path / \"b/.definitely_exclude/a.pie\"),\n            Path(path / \"b/.definitely_exclude/a.py\"),\n            Path(path / \"b/.definitely_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(\n                path, this_abs, empty, re.compile(black.DEFAULT_EXCLUDES), report\n            )\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1208,
        "end_line": 1230,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_empty_exclude#1232",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_empty_exclude(self)",
        "snippet": "    def test_empty_exclude(self) -> None:\n        path = THIS_DIR / \"data\" / \"include_exclude_tests\"\n        report = black.Report()\n        empty = re.compile(r\"\")\n        sources: List[Path] = []\n        expected = [\n            Path(path / \"b/dont_exclude/a.py\"),\n            Path(path / \"b/dont_exclude/a.pyi\"),\n            Path(path / \"b/exclude/a.py\"),\n            Path(path / \"b/exclude/a.pyi\"),\n            Path(path / \"b/.definitely_exclude/a.py\"),\n            Path(path / \"b/.definitely_exclude/a.pyi\"),\n        ]\n        this_abs = THIS_DIR.resolve()\n        sources.extend(\n            black.gen_python_files_in_dir(\n                path, this_abs, re.compile(black.DEFAULT_INCLUDES), empty, report\n            )\n        )\n        self.assertEqual(sorted(expected), sorted(sources))",
        "begin_line": 1232,
        "end_line": 1251,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_invalid_include_exclude#1253",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_invalid_include_exclude(self)",
        "snippet": "    def test_invalid_include_exclude(self) -> None:\n        for option in [\"--include\", \"--exclude\"]:\n            result = CliRunner().invoke(black.main, [\"-\", option, \"**()(!!*)\"])\n            self.assertEqual(result.exit_code, 2)",
        "begin_line": 1253,
        "end_line": 1256,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_preserves_line_endings#1258",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_preserves_line_endings(self)",
        "snippet": "    def test_preserves_line_endings(self) -> None:\n        with TemporaryDirectory() as workspace:\n            test_file = Path(workspace) / \"test.py\"\n            for nl in [\"\\n\", \"\\r\\n\"]:\n                contents = nl.join([\"def f(  ):\", \"    pass\"])\n                test_file.write_bytes(contents.encode())\n                ff(test_file, write_back=black.WriteBack.YES)\n                updated_contents: bytes = test_file.read_bytes()\n                self.assertIn(nl.encode(), updated_contents)\n                if nl == \"\\n\":\n                    self.assertNotIn(b\"\\r\\n\", updated_contents)",
        "begin_line": 1258,
        "end_line": 1268,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_preserves_line_endings_via_stdin#1270",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_preserves_line_endings_via_stdin(self)",
        "snippet": "    def test_preserves_line_endings_via_stdin(self) -> None:\n        for nl in [\"\\n\", \"\\r\\n\"]:\n            contents = nl.join([\"def f(  ):\", \"    pass\"])\n            runner = BlackRunner()\n            result = runner.invoke(\n                black.main, [\"-\", \"--fast\"], input=BytesIO(contents.encode(\"utf8\"))\n            )\n            self.assertEqual(result.exit_code, 0)\n            output = runner.stdout_bytes\n            self.assertIn(nl.encode(\"utf8\"), output)\n            if nl == \"\\n\":\n                self.assertNotIn(b\"\\r\\n\", output)",
        "begin_line": 1270,
        "end_line": 1281,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_assert_equivalent_different_asts#1283",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_assert_equivalent_different_asts(self)",
        "snippet": "    def test_assert_equivalent_different_asts(self) -> None:\n        with self.assertRaises(AssertionError):\n            black.assert_equivalent(\"{}\", \"None\")",
        "begin_line": 1283,
        "end_line": 1285,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_symlink_out_of_root_directory#1287",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_symlink_out_of_root_directory(self)",
        "snippet": "    def test_symlink_out_of_root_directory(self) -> None:\n        path = MagicMock()\n        root = THIS_DIR\n        child = MagicMock()\n        include = re.compile(black.DEFAULT_INCLUDES)\n        exclude = re.compile(black.DEFAULT_EXCLUDES)\n        report = black.Report()\n        # `child` should behave like a symlink which resolved path is clearly\n        # outside of the `root` directory.\n        path.iterdir.return_value = [child]\n        child.resolve.return_value = Path(\"/a/b/c\")\n        child.is_symlink.return_value = True\n        try:\n            list(black.gen_python_files_in_dir(path, root, include, exclude, report))\n        except ValueError as ve:\n            self.fail(f\"`get_python_files_in_dir()` failed: {ve}\")\n        path.iterdir.assert_called_once()\n        child.resolve.assert_called_once()\n        child.is_symlink.assert_called_once()\n        # `child` should behave like a strange file which resolved path is clearly\n        # outside of the `root` directory.\n        child.is_symlink.return_value = False\n        with self.assertRaises(ValueError):\n            list(black.gen_python_files_in_dir(path, root, include, exclude, report))\n        path.iterdir.assert_called()\n        self.assertEqual(path.iterdir.call_count, 2)\n        child.resolve.assert_called()\n        self.assertEqual(child.resolve.call_count, 2)\n        child.is_symlink.assert_called()\n        self.assertEqual(child.is_symlink.call_count, 2)",
        "begin_line": 1287,
        "end_line": 1316,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_shhh_click#1318",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_shhh_click(self)",
        "snippet": "    def test_shhh_click(self) -> None:\n        try:\n            from click import _unicodefun  # type: ignore\n        except ModuleNotFoundError:\n            self.skipTest(\"Incompatible Click version\")\n        if not hasattr(_unicodefun, \"_verify_python3_env\"):\n            self.skipTest(\"Incompatible Click version\")\n        # First, let's see if Click is crashing with a preferred ASCII charset.\n        with patch(\"locale.getpreferredencoding\") as gpe:\n            gpe.return_value = \"ASCII\"\n            with self.assertRaises(RuntimeError):\n                _unicodefun._verify_python3_env()\n        # Now, let's silence Click...\n        black.patch_click()\n        # ...and confirm it's silent.\n        with patch(\"locale.getpreferredencoding\") as gpe:\n            gpe.return_value = \"ASCII\"\n            try:\n                _unicodefun._verify_python3_env()\n            except RuntimeError as re:\n                self.fail(f\"`patch_click()` failed, exception still raised: {re}\")",
        "begin_line": 1318,
        "end_line": 1338,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_request_needs_formatting#1342",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_request_needs_formatting(self)",
        "snippet": "    async def test_blackd_request_needs_formatting(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\"/\", data=b\"print('hello world')\")\n            self.assertEqual(response.status, 200)\n            self.assertEqual(response.charset, \"utf8\")\n            self.assertEqual(await response.read(), b'print(\"hello world\")\\n')",
        "begin_line": 1342,
        "end_line": 1348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_request_no_change#1352",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_request_no_change(self)",
        "snippet": "    async def test_blackd_request_no_change(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\"/\", data=b'print(\"hello world\")\\n')\n            self.assertEqual(response.status, 204)\n            self.assertEqual(await response.read(), b\"\")",
        "begin_line": 1352,
        "end_line": 1357,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_request_syntax_error#1361",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_request_syntax_error(self)",
        "snippet": "    async def test_blackd_request_syntax_error(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\"/\", data=b\"what even ( is\")\n            self.assertEqual(response.status, 400)\n            content = await response.text()\n            self.assertTrue(\n                content.startswith(\"Cannot parse\"),\n                msg=f\"Expected error to start with 'Cannot parse', got {repr(content)}\",\n            )",
        "begin_line": 1361,
        "end_line": 1370,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_unsupported_version#1374",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_unsupported_version(self)",
        "snippet": "    async def test_blackd_unsupported_version(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\", data=b\"what\", headers={blackd.VERSION_HEADER: \"2\"}\n            )\n            self.assertEqual(response.status, 501)",
        "begin_line": 1374,
        "end_line": 1380,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_supported_version#1384",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_supported_version(self)",
        "snippet": "    async def test_blackd_supported_version(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\", data=b\"what\", headers={blackd.VERSION_HEADER: \"1\"}\n            )\n            self.assertEqual(response.status, 200)",
        "begin_line": 1384,
        "end_line": 1390,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_invalid_python_variant#1394",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_invalid_python_variant(self)",
        "snippet": "    async def test_blackd_invalid_python_variant(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\", data=b\"what\", headers={blackd.PYTHON_VARIANT_HEADER: \"lol\"}\n            )\n            self.assertEqual(response.status, 400)",
        "begin_line": 1394,
        "end_line": 1400,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_pyi#1404",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_pyi(self)",
        "snippet": "    async def test_blackd_pyi(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            source, expected = read_data(\"stub.pyi\")\n            response = await client.post(\n                \"/\", data=source, headers={blackd.PYTHON_VARIANT_HEADER: \"pyi\"}\n            )\n            self.assertEqual(response.status, 200)\n            self.assertEqual(await response.text(), expected)",
        "begin_line": 1404,
        "end_line": 1412,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_py36#1416",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_py36(self)",
        "snippet": "    async def test_blackd_py36(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\",\n                data=(\n                    \"def f(\\n\"\n                    \"    and_has_a_bunch_of,\\n\"\n                    \"    very_long_arguments_too,\\n\"\n                    \"    and_lots_of_them_as_well_lol,\\n\"\n                    \"    **and_very_long_keyword_arguments\\n\"\n                    \"):\\n\"\n                    \"    pass\\n\"\n                ),\n                headers={blackd.PYTHON_VARIANT_HEADER: \"3.6\"},\n            )\n            self.assertEqual(response.status, 200)\n            response = await client.post(\n                \"/\",\n                data=(\n                    \"def f(\\n\"\n                    \"    and_has_a_bunch_of,\\n\"\n                    \"    very_long_arguments_too,\\n\"\n                    \"    and_lots_of_them_as_well_lol,\\n\"\n                    \"    **and_very_long_keyword_arguments\\n\"\n                    \"):\\n\"\n                    \"    pass\\n\"\n                ),\n                headers={blackd.PYTHON_VARIANT_HEADER: \"3.5\"},\n            )\n            self.assertEqual(response.status, 204)\n            response = await client.post(\n                \"/\",\n                data=(\n                    \"def f(\\n\"\n                    \"    and_has_a_bunch_of,\\n\"\n                    \"    very_long_arguments_too,\\n\"\n                    \"    and_lots_of_them_as_well_lol,\\n\"\n                    \"    **and_very_long_keyword_arguments\\n\"\n                    \"):\\n\"\n                    \"    pass\\n\"\n                ),\n                headers={blackd.PYTHON_VARIANT_HEADER: \"2\"},\n            )\n            self.assertEqual(response.status, 204)",
        "begin_line": 1416,
        "end_line": 1460,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_fast#1464",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_fast(self)",
        "snippet": "    async def test_blackd_fast(self) -> None:\n        with open(os.devnull, \"w\") as dn, redirect_stderr(dn):\n            app = blackd.make_app()\n            async with TestClient(TestServer(app)) as client:\n                response = await client.post(\"/\", data=b\"ur'hello'\")\n                self.assertEqual(response.status, 500)\n                self.assertIn(\"failed to parse source file\", await response.text())\n                response = await client.post(\n                    \"/\", data=b\"ur'hello'\", headers={blackd.FAST_OR_SAFE_HEADER: \"fast\"}\n                )\n                self.assertEqual(response.status, 200)",
        "begin_line": 1464,
        "end_line": 1474,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_line_length#1478",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_line_length(self)",
        "snippet": "    async def test_blackd_line_length(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\", data=b'print(\"hello\")\\n', headers={blackd.LINE_LENGTH_HEADER: \"7\"}\n            )\n            self.assertEqual(response.status, 200)",
        "begin_line": 1478,
        "end_line": 1484,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_invalid_line_length#1488",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_invalid_line_length(self)",
        "snippet": "    async def test_blackd_invalid_line_length(self) -> None:\n        app = blackd.make_app()\n        async with TestClient(TestServer(app)) as client:\n            response = await client.post(\n                \"/\",\n                data=b'print(\"hello\")\\n',\n                headers={blackd.LINE_LENGTH_HEADER: \"NaN\"},\n            )\n            self.assertEqual(response.status, 400)",
        "begin_line": 1488,
        "end_line": 1496,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "tests.test_black.BlackTestCase.test_blackd_main#1499",
        "src_path": "tests/test_black.py",
        "class_name": "tests.test_black.BlackTestCase",
        "signature": "tests.test_black.BlackTestCase.test_blackd_main(self)",
        "snippet": "    def test_blackd_main(self) -> None:\n        with patch(\"blackd.web.run_app\"):\n            result = CliRunner().invoke(blackd.main, [])\n            if result.exception is not None:\n                raise result.exception\n            self.assertEqual(result.exit_code, 0)",
        "begin_line": 1499,
        "end_line": 1504,
        "comment": "",
        "is_bug": false
    }
]