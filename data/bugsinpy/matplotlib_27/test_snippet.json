[
    {
        "name": "lib.matplotlib.tests.test_colorbar._get_cmap_norms#16",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar._get_cmap_norms()",
        "snippet": "def _get_cmap_norms():\n    \"\"\"\n    Define a colormap and appropriate norms for each of the four\n    possible settings of the extend keyword.\n\n    Helper function for _colorbar_extension_shape and\n    colorbar_extension_length.\n    \"\"\"\n    # Create a color map and specify the levels it represents.\n    cmap = cm.get_cmap(\"RdBu\", lut=5)\n    clevs = [-5., -2.5, -.5, .5, 1.5, 3.5]\n    # Define norms for the color maps.\n    norms = dict()\n    norms['neither'] = BoundaryNorm(clevs, len(clevs) - 1)\n    norms['min'] = BoundaryNorm([-10] + clevs[1:], len(clevs) - 1)\n    norms['max'] = BoundaryNorm(clevs[:-1] + [10], len(clevs) - 1)\n    norms['both'] = BoundaryNorm([-10] + clevs[1:-1] + [10], len(clevs) - 1)\n    return cmap, norms",
        "begin_line": 16,
        "end_line": 33,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar._colorbar_extension_shape#36",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar._colorbar_extension_shape(spacing)",
        "snippet": "def _colorbar_extension_shape(spacing):\n    '''\n    Produce 4 colorbars with rectangular extensions for either uniform\n    or proportional spacing.\n\n    Helper function for test_colorbar_extension_shape.\n    '''\n    # Get a colormap and appropriate norms for each extension type.\n    cmap, norms = _get_cmap_norms()\n    # Create a figure and adjust whitespace for subplots.\n    fig = plt.figure()\n    fig.subplots_adjust(hspace=4)\n    for i, extension_type in enumerate(('neither', 'min', 'max', 'both')):\n        # Get the appropriate norm and use it to get colorbar boundaries.\n        norm = norms[extension_type]\n        boundaries = values = norm.boundaries\n        # Create a subplot.\n        cax = fig.add_subplot(4, 1, i + 1)\n        # Generate the colorbar.\n        ColorbarBase(cax, cmap=cmap, norm=norm,\n                     boundaries=boundaries, values=values,\n                     extend=extension_type, extendrect=True,\n                     orientation='horizontal', spacing=spacing)\n        # Turn off text and ticks.\n        cax.tick_params(left=False, labelleft=False,\n                        bottom=False, labelbottom=False)\n    # Return the figure to the caller.\n    return fig",
        "begin_line": 36,
        "end_line": 63,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar._colorbar_extension_length#66",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar._colorbar_extension_length(spacing)",
        "snippet": "def _colorbar_extension_length(spacing):\n    '''\n    Produce 12 colorbars with variable length extensions for either\n    uniform or proportional spacing.\n\n    Helper function for test_colorbar_extension_length.\n    '''\n    # Get a colormap and appropriate norms for each extension type.\n    cmap, norms = _get_cmap_norms()\n    # Create a figure and adjust whitespace for subplots.\n    fig = plt.figure()\n    fig.subplots_adjust(hspace=.6)\n    for i, extension_type in enumerate(('neither', 'min', 'max', 'both')):\n        # Get the appropriate norm and use it to get colorbar boundaries.\n        norm = norms[extension_type]\n        boundaries = values = norm.boundaries\n        for j, extendfrac in enumerate((None, 'auto', 0.1)):\n            # Create a subplot.\n            cax = fig.add_subplot(12, 1, i*3 + j + 1)\n            # Generate the colorbar.\n            ColorbarBase(cax, cmap=cmap, norm=norm,\n                         boundaries=boundaries, values=values,\n                         extend=extension_type, extendfrac=extendfrac,\n                         orientation='horizontal', spacing=spacing)\n            # Turn off text and ticks.\n            cax.tick_params(left=False, labelleft=False,\n                            bottom=False, labelbottom=False)\n    # Return the figure to the caller.\n    return fig",
        "begin_line": 66,
        "end_line": 94,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_extension_shape#99",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_extension_shape()",
        "snippet": "def test_colorbar_extension_shape():\n    '''Test rectangular colorbar extensions.'''\n    # Create figures for uniform and proportionally spaced colorbars.\n    _colorbar_extension_shape('uniform')\n    _colorbar_extension_shape('proportional')",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_extension_length#108",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_extension_length()",
        "snippet": "def test_colorbar_extension_length():\n    '''Test variable length colorbar extensions.'''\n    # Create figures for uniform and proportionally spaced colorbars.\n    _colorbar_extension_length('uniform')\n    _colorbar_extension_length('proportional')",
        "begin_line": 108,
        "end_line": 112,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_positioning#122",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_positioning()",
        "snippet": "def test_colorbar_positioning():\n    data = np.arange(1200).reshape(30, 40)\n    levels = [0, 200, 400, 600, 800, 1000, 1200]\n\n    # -------------------\n    plt.figure()\n    plt.contourf(data, levels=levels)\n    plt.colorbar(orientation='horizontal', use_gridspec=False)\n\n    locations = ['left', 'right', 'top', 'bottom']\n    plt.figure()\n    for i, location in enumerate(locations):\n        plt.subplot(2, 2, i + 1)\n        plt.contourf(data, levels=levels)\n        plt.colorbar(location=location, use_gridspec=False)\n\n    # -------------------\n    plt.figure()\n    # make some other data (random integers)\n    data_2nd = np.array([[2, 3, 2, 3], [1.5, 2, 2, 3], [2, 3, 3, 4]])\n    # make the random data expand to the shape of the main data\n    data_2nd = np.repeat(np.repeat(data_2nd, 10, axis=1), 10, axis=0)\n\n    color_mappable = plt.contourf(data, levels=levels, extend='both')\n    # test extend frac here\n    hatch_mappable = plt.contourf(data_2nd, levels=[1, 2, 3], colors='none',\n                                  hatches=['/', 'o', '+'], extend='max')\n    plt.contour(hatch_mappable, colors='black')\n\n    plt.colorbar(color_mappable, location='left', label='variable 1',\n                 use_gridspec=False)\n    plt.colorbar(hatch_mappable, location='right', label='variable 2',\n                 use_gridspec=False)\n\n    # -------------------\n    plt.figure()\n    ax1 = plt.subplot(211, anchor='NE', aspect='equal')\n    plt.contourf(data, levels=levels)\n    ax2 = plt.subplot(223)\n    plt.contourf(data, levels=levels)\n    ax3 = plt.subplot(224)\n    plt.contourf(data, levels=levels)\n\n    plt.colorbar(ax=[ax2, ax3, ax1], location='right', pad=0.0, shrink=0.5,\n                 panchor=False, use_gridspec=False)\n    plt.colorbar(ax=[ax2, ax3, ax1], location='left', shrink=0.5,\n                 panchor=False, use_gridspec=False)\n    plt.colorbar(ax=[ax1], location='bottom', panchor=False,\n                 anchor=(0.8, 0.5), shrink=0.6, use_gridspec=False)",
        "begin_line": 122,
        "end_line": 170,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_gridspec_make_colorbar#175",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_gridspec_make_colorbar()",
        "snippet": "def test_gridspec_make_colorbar():\n    plt.figure()\n    data = np.arange(1200).reshape(30, 40)\n    levels = [0, 200, 400, 600, 800, 1000, 1200]\n\n    plt.subplot(121)\n    plt.contourf(data, levels=levels)\n    plt.colorbar(use_gridspec=True, orientation='vertical')\n\n    plt.subplot(122)\n    plt.contourf(data, levels=levels)\n    plt.colorbar(use_gridspec=True, orientation='horizontal')\n\n    plt.subplots_adjust(top=0.95, right=0.95, bottom=0.2, hspace=0.25)",
        "begin_line": 175,
        "end_line": 188,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_single_scatter#193",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_single_scatter()",
        "snippet": "def test_colorbar_single_scatter():\n    # Issue #2642: if a path collection has only one entry,\n    # the norm scaling within the colorbar must ensure a\n    # finite range, otherwise a zero denominator will occur in _locate.\n    plt.figure()\n    x = y = [0]\n    z = [50]\n    cmap = plt.get_cmap('jet', 16)\n    cs = plt.scatter(x, y, z, c=z, cmap=cmap)\n    plt.colorbar(cs)",
        "begin_line": 193,
        "end_line": 202,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_remove_from_figure#207",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_remove_from_figure(use_gridspec)",
        "snippet": "def test_remove_from_figure(use_gridspec):\n    \"\"\"\n    Test `remove_from_figure` with the specified ``use_gridspec`` setting\n    \"\"\"\n    fig, ax = plt.subplots()\n    sc = ax.scatter([1, 2], [3, 4], cmap=\"spring\")\n    sc.set_array(np.array([5, 6]))\n    pre_figbox = np.array(ax.figbox)\n    cb = fig.colorbar(sc, use_gridspec=use_gridspec)\n    fig.subplots_adjust()\n    cb.remove()\n    fig.subplots_adjust()\n    post_figbox = np.array(ax.figbox)\n    assert (pre_figbox == post_figbox).all()",
        "begin_line": 207,
        "end_line": 220,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbarbase#223",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbarbase()",
        "snippet": "def test_colorbarbase():\n    # smoke test from #3805\n    ax = plt.gca()\n    ColorbarBase(ax, plt.cm.bone)",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_closed_patch#230",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_closed_patch()",
        "snippet": "def test_colorbar_closed_patch():\n    fig = plt.figure(figsize=(8, 6))\n    ax1 = fig.add_axes([0.05, 0.85, 0.9, 0.1])\n    ax2 = fig.add_axes([0.1, 0.65, 0.75, 0.1])\n    ax3 = fig.add_axes([0.05, 0.45, 0.9, 0.1])\n    ax4 = fig.add_axes([0.05, 0.25, 0.9, 0.1])\n    ax5 = fig.add_axes([0.05, 0.05, 0.9, 0.1])\n\n    cmap = cm.get_cmap(\"RdBu\", lut=5)\n\n    im = ax1.pcolormesh(np.linspace(0, 10, 16).reshape((4, 4)), cmap=cmap)\n\n    # The use of a \"values\" kwarg here is unusual.  It works only\n    # because it is matched to the data range in the image and to\n    # the number of colors in the LUT.\n    values = np.linspace(0, 10, 5)\n    cbar_kw = dict(cmap=cmap, orientation='horizontal', values=values,\n                   ticks=[])\n\n    # The wide line is to show that the closed path is being handled\n    # correctly.  See PR #4186.\n    with rc_context({'axes.linewidth': 16}):\n        plt.colorbar(im, cax=ax2, extend='both', extendfrac=0.5, **cbar_kw)\n        plt.colorbar(im, cax=ax3, extend='both', **cbar_kw)\n        plt.colorbar(im, cax=ax4, extend='both', extendrect=True, **cbar_kw)\n        plt.colorbar(im, cax=ax5, extend='neither', **cbar_kw)",
        "begin_line": 230,
        "end_line": 255,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_ticks#258",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_ticks()",
        "snippet": "def test_colorbar_ticks():\n    # test fix for #5673\n    fig, ax = plt.subplots()\n    x = np.arange(-3.0, 4.001)\n    y = np.arange(-4.0, 3.001)\n    X, Y = np.meshgrid(x, y)\n    Z = X * Y\n    clevs = np.array([-12, -5, 0, 5, 12], dtype=float)\n    colors = ['r', 'g', 'b', 'c']\n    cs = ax.contourf(X, Y, Z, clevs, colors=colors)\n    cbar = fig.colorbar(cs, ax=ax, extend='neither',\n                        orientation='horizontal', ticks=clevs)\n    assert len(cbar.ax.xaxis.get_ticklocs()) == len(clevs)",
        "begin_line": 258,
        "end_line": 270,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_minorticks_on_off#273",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_minorticks_on_off()",
        "snippet": "def test_colorbar_minorticks_on_off():\n    # test for github issue #11510 and PR #11584\n    np.random.seed(seed=12345)\n    data = np.random.randn(20, 20)\n    with rc_context({'_internal.classic_mode': False}):\n        fig, ax = plt.subplots()\n        # purposefully setting vmin and vmax to odd fractions\n        # so as to check for the correct locations of the minor ticks\n        im = ax.pcolormesh(data, vmin=-2.3, vmax=3.3)\n\n        cbar = fig.colorbar(im, extend='both')\n        cbar.minorticks_on()\n        correct_minorticklocs = np.array([-2.2, -1.8, -1.6, -1.4, -1.2, -0.8,\n                                          -0.6, -0.4, -0.2, 0.2, 0.4, 0.6,\n                                           0.8, 1.2, 1.4, 1.6, 1.8, 2.2, 2.4,\n                                           2.6, 2.8, 3.2])\n        # testing after minorticks_on()\n        np.testing.assert_almost_equal(cbar.ax.yaxis.get_minorticklocs(),\n                                       correct_minorticklocs)\n        cbar.minorticks_off()\n        # testing after minorticks_off()\n        np.testing.assert_almost_equal(cbar.ax.yaxis.get_minorticklocs(),\n                                       np.array([]))\n\n        im.set_clim(vmin=-1.2, vmax=1.2)\n        cbar.minorticks_on()\n        correct_minorticklocs = np.array([-1.2, -1.1, -0.9, -0.8, -0.7, -0.6,\n                                          -0.4, -0.3, -0.2, -0.1,  0.1, 0.2,\n                                           0.3,  0.4,  0.6,  0.7,  0.8,  0.9,\n                                           1.1,  1.2])\n        np.testing.assert_almost_equal(cbar.ax.yaxis.get_minorticklocs(),\n                                       correct_minorticklocs)\n\n    # tests for github issue #13257 and PR #13265\n    data = np.random.uniform(low=1, high=10, size=(20, 20))\n\n    fig, ax = plt.subplots()\n    im = ax.pcolormesh(data, norm=LogNorm())\n    cbar = fig.colorbar(im)\n    default_minorticklocks = cbar.ax.yaxis.get_minorticklocs()\n\n    # test that minorticks turn off for LogNorm\n    cbar.minorticks_off()\n    np.testing.assert_equal(cbar.ax.yaxis.get_minorticklocs(), [])\n\n    # test that minorticks turn back on for LogNorm\n    cbar.minorticks_on()\n    np.testing.assert_equal(cbar.ax.yaxis.get_minorticklocs(),\n                            default_minorticklocks)\n\n    # test issue #13339: minorticks for LogNorm should stay off\n    cbar.minorticks_off()\n    cbar.set_ticks([3, 5, 7, 9])\n    np.testing.assert_equal(cbar.ax.yaxis.get_minorticklocs(), [])",
        "begin_line": 273,
        "end_line": 326,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_autoticks#329",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_autoticks()",
        "snippet": "def test_colorbar_autoticks():\n    # Test new autotick modes. Needs to be classic because\n    # non-classic doesn't go this route.\n    with rc_context({'_internal.classic_mode': False}):\n        fig, ax = plt.subplots(2, 1)\n        x = np.arange(-3.0, 4.001)\n        y = np.arange(-4.0, 3.001)\n        X, Y = np.meshgrid(x, y)\n        Z = X * Y\n        pcm = ax[0].pcolormesh(X, Y, Z)\n        cbar = fig.colorbar(pcm, ax=ax[0], extend='both',\n                            orientation='vertical')\n\n        pcm = ax[1].pcolormesh(X, Y, Z)\n        cbar2 = fig.colorbar(pcm, ax=ax[1], extend='both',\n                            orientation='vertical', shrink=0.4)\n        np.testing.assert_almost_equal(cbar.ax.yaxis.get_ticklocs(),\n                np.arange(-10, 11., 5.))\n        np.testing.assert_almost_equal(cbar2.ax.yaxis.get_ticklocs(),\n                np.arange(-10, 11., 10.))",
        "begin_line": 329,
        "end_line": 348,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_autotickslog#351",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_autotickslog()",
        "snippet": "def test_colorbar_autotickslog():\n    # Test new autotick modes...\n    with rc_context({'_internal.classic_mode': False}):\n        fig, ax = plt.subplots(2, 1)\n        x = np.arange(-3.0, 4.001)\n        y = np.arange(-4.0, 3.001)\n        X, Y = np.meshgrid(x, y)\n        Z = X * Y\n        pcm = ax[0].pcolormesh(X, Y, 10**Z, norm=LogNorm())\n        cbar = fig.colorbar(pcm, ax=ax[0], extend='both',\n                            orientation='vertical')\n\n        pcm = ax[1].pcolormesh(X, Y, 10**Z, norm=LogNorm())\n        cbar2 = fig.colorbar(pcm, ax=ax[1], extend='both',\n                            orientation='vertical', shrink=0.4)\n        np.testing.assert_almost_equal(cbar.ax.yaxis.get_ticklocs(),\n                10**np.arange(-12, 12.2, 4.))\n        np.testing.assert_almost_equal(cbar2.ax.yaxis.get_ticklocs(),\n                10**np.arange(-12, 13., 12.))",
        "begin_line": 351,
        "end_line": 369,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_get_ticks#372",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_get_ticks()",
        "snippet": "def test_colorbar_get_ticks():\n    # test feature for #5792\n    plt.figure()\n    data = np.arange(1200).reshape(30, 40)\n    levels = [0, 200, 400, 600, 800, 1000, 1200]\n\n    plt.subplot()\n    plt.contourf(data, levels=levels)\n\n    # testing getter for user set ticks\n    userTicks = plt.colorbar(ticks=[0, 600, 1200])\n    assert userTicks.get_ticks().tolist() == [0, 600, 1200]\n\n    # testing for getter after calling set_ticks\n    userTicks.set_ticks([600, 700, 800])\n    assert userTicks.get_ticks().tolist() == [600, 700, 800]\n\n    # testing for getter after calling set_ticks with some ticks out of bounds\n    userTicks.set_ticks([600, 1300, 1400, 1500])\n    assert userTicks.get_ticks().tolist() == [600]\n\n    # testing getter when no ticks are assigned\n    defTicks = plt.colorbar(orientation='horizontal')\n    assert defTicks.get_ticks().tolist() == levels",
        "begin_line": 372,
        "end_line": 395,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_lognorm_extension#398",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_lognorm_extension()",
        "snippet": "def test_colorbar_lognorm_extension():\n    # Test that colorbar with lognorm is extended correctly\n    f, ax = plt.subplots()\n    cb = ColorbarBase(ax, norm=LogNorm(vmin=0.1, vmax=1000.0),\n                      orientation='vertical', extend='both')\n    assert cb._values[0] >= 0.0",
        "begin_line": 398,
        "end_line": 403,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_powernorm_extension#406",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_powernorm_extension()",
        "snippet": "def test_colorbar_powernorm_extension():\n    # Test that colorbar with powernorm is extended correctly\n    f, ax = plt.subplots()\n    cb = ColorbarBase(ax, norm=PowerNorm(gamma=0.5, vmin=0.0, vmax=1.0),\n                      orientation='vertical', extend='both')\n    assert cb._values[0] >= 0.0",
        "begin_line": 406,
        "end_line": 411,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_axes_kw#414",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_axes_kw()",
        "snippet": "def test_colorbar_axes_kw():\n    # test fix for #8493: This does only test, that axes-related keywords pass\n    # and do not raise an exception.\n    plt.figure()\n    plt.imshow([[1, 2], [3, 4]])\n    plt.colorbar(orientation='horizontal', fraction=0.2, pad=0.2, shrink=0.5,\n                 aspect=10, anchor=(0., 0.), panchor=(0., 1.))",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_log_minortick_labels#423",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_log_minortick_labels()",
        "snippet": "def test_colorbar_log_minortick_labels():\n    with rc_context({'_internal.classic_mode': False}):\n        fig, ax = plt.subplots()\n        pcm = ax.imshow([[10000, 50000]], norm=LogNorm())\n        cb = fig.colorbar(pcm)\n        fig.canvas.draw()\n        lb = cb.ax.yaxis.get_ticklabels(which='both')\n        expected = [r'$\\mathdefault{10^{4}}$',\n                    r'$\\mathdefault{2\\times10^{4}}$',\n                    r'$\\mathdefault{3\\times10^{4}}$',\n                    r'$\\mathdefault{4\\times10^{4}}$']\n        for l, exp in zip(lb, expected):\n            assert l.get_text() == exp",
        "begin_line": 423,
        "end_line": 435,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_renorm#438",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_renorm()",
        "snippet": "def test_colorbar_renorm():\n    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n    z = 120000*np.exp(-x**2 - y**2)\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(z)\n    cbar = fig.colorbar(im)\n    np.testing.assert_allclose(cbar.ax.yaxis.get_majorticklocs(),\n                               np.arange(0, 120000.1, 15000))\n\n    cbar.set_ticks([1, 2, 3])\n    assert isinstance(cbar.locator, FixedLocator)\n\n    norm = LogNorm(z.min(), z.max())\n    im.set_norm(norm)\n    assert isinstance(cbar.locator, _ColorbarLogLocator)\n    np.testing.assert_allclose(cbar.ax.yaxis.get_majorticklocs(),\n                               np.logspace(-8, 5, 14))\n    # note that set_norm removes the FixedLocator...\n    assert np.isclose(cbar.vmin, z.min())\n    cbar.set_ticks([1, 2, 3])\n    assert isinstance(cbar.locator, FixedLocator)\n    np.testing.assert_allclose(cbar.ax.yaxis.get_majorticklocs(),\n                               [1.0, 2.0, 3.0])\n\n    norm = LogNorm(z.min() * 1000, z.max() * 1000)\n    im.set_norm(norm)\n    assert np.isclose(cbar.vmin, z.min() * 1000)\n    assert np.isclose(cbar.vmax, z.max() * 1000)",
        "begin_line": 438,
        "end_line": 466,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_format#469",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_format()",
        "snippet": "def test_colorbar_format():\n    # make sure that format is passed properly\n    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n    z = 120000*np.exp(-x**2 - y**2)\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(z)\n    cbar = fig.colorbar(im, format='%4.2e')\n    fig.canvas.draw()\n    assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '6.00e+04'\n\n    # make sure that if we change the clim of the mappable that the\n    # formatting is *not* lost:\n    im.set_clim([4, 200])\n    fig.canvas.draw()\n    assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '8.00e+01'\n\n    # but if we change the norm:\n    im.set_norm(LogNorm(vmin=0.1, vmax=10))\n    fig.canvas.draw()\n    assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n            r'$\\mathdefault{10^{-1}}$')",
        "begin_line": 469,
        "end_line": 490,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_scale_reset#493",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_scale_reset()",
        "snippet": "def test_colorbar_scale_reset():\n    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n    z = 120000*np.exp(-x**2 - y**2)\n\n    fig, ax = plt.subplots()\n    pcm = ax.pcolormesh(z, cmap='RdBu_r', rasterized=True)\n    cbar = fig.colorbar(pcm, ax=ax)\n    assert cbar.ax.yaxis.get_scale() == 'linear'\n\n    pcm.set_norm(LogNorm(vmin=1, vmax=100))\n    assert cbar.ax.yaxis.get_scale() == 'log'\n    pcm.set_norm(Normalize(vmin=-20, vmax=20))\n    assert cbar.ax.yaxis.get_scale() == 'linear'",
        "begin_line": 493,
        "end_line": 505,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_get_ticks#508",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_get_ticks()",
        "snippet": "def test_colorbar_get_ticks():\n    with rc_context({'_internal.classic_mode': False}):\n\n        fig, ax = plt.subplots()\n        np.random.seed(19680801)\n        pc = ax.pcolormesh(np.random.rand(30, 30))\n        cb = fig.colorbar(pc)\n        np.testing.assert_allclose(cb.get_ticks(), [0.2, 0.4, 0.6, 0.8])",
        "begin_line": 508,
        "end_line": 515,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_inverted_ticks#518",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_inverted_ticks()",
        "snippet": "def test_colorbar_inverted_ticks():\n    fig, axs = plt.subplots(2)\n    ax = axs[0]\n    pc = ax.pcolormesh(10**np.arange(1, 5).reshape(2, 2), norm=LogNorm())\n    cbar = fig.colorbar(pc, ax=ax, extend='both')\n    ticks = cbar.get_ticks()\n    cbar.ax.invert_yaxis()\n    np.testing.assert_allclose(ticks, cbar.get_ticks())\n\n    ax = axs[1]\n    pc = ax.pcolormesh(np.arange(1, 5).reshape(2, 2))\n    cbar = fig.colorbar(pc, ax=ax, extend='both')\n    cbar.minorticks_on()\n    ticks = cbar.get_ticks()\n    minorticks = cbar.get_ticks(minor=True)\n    cbar.ax.invert_yaxis()\n    np.testing.assert_allclose(ticks, cbar.get_ticks())\n    np.testing.assert_allclose(minorticks, cbar.get_ticks(minor=True))",
        "begin_line": 518,
        "end_line": 535,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_extend_colorbar_customnorm#538",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_extend_colorbar_customnorm()",
        "snippet": "def test_extend_colorbar_customnorm():\n    # This was a funny error with DivergingNorm, maybe with other norms,\n    # when extend='both'\n    N = 100\n    X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]\n    Z1 = np.exp(-X**2 - Y**2)\n    Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\n    Z = (Z1 - Z2) * 2\n\n    fig, ax = plt.subplots(2, 1)\n    pcm = ax[0].pcolormesh(X, Y, Z,\n                           norm=DivergingNorm(vcenter=0., vmin=-2, vmax=1),\n                           cmap='RdBu_r')\n    cb = fig.colorbar(pcm, ax=ax[0], extend='both')\n    np.testing.assert_allclose(cb.ax.get_position().extents,\n                               [0.78375, 0.536364, 0.796147, 0.9], rtol=1e-3)",
        "begin_line": 538,
        "end_line": 553,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_mappable_no_alpha#556",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_mappable_no_alpha()",
        "snippet": "def test_mappable_no_alpha():\n    fig, ax = plt.subplots()\n    sm = cm.ScalarMappable(norm=mcolors.Normalize(), cmap='viridis')\n    fig.colorbar(sm)\n    sm.set_cmap('plasma')\n    plt.draw()",
        "begin_line": 556,
        "end_line": 561,
        "comment": "",
        "is_bug": false
    },
    {
        "name": "lib.matplotlib.tests.test_colorbar.test_colorbar_label#564",
        "src_path": "lib/matplotlib/tests/test_colorbar.py",
        "class_name": "lib.matplotlib.tests.test_colorbar",
        "signature": "lib.matplotlib.tests.test_colorbar.test_colorbar_label()",
        "snippet": "def test_colorbar_label():\n    \"\"\"\n    Test the label parameter. It should just be mapped to the xlabel/ylabel of\n    the axes, depending on the orientation.\n    \"\"\"\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]])\n    cbar = fig.colorbar(im, label='cbar')\n    assert cbar.ax.get_ylabel() == 'cbar'\n    cbar.set_label(None)\n    assert cbar.ax.get_ylabel() == ''\n    cbar.set_label('cbar 2')\n    assert cbar.ax.get_ylabel() == 'cbar 2'\n\n    cbar2 = fig.colorbar(im, label=None)\n    assert cbar2.ax.get_ylabel() == ''\n\n    cbar3 = fig.colorbar(im, orientation='horizontal', label='horizontal cbar')\n    assert cbar3.ax.get_xlabel() == 'horizontal cbar'",
        "begin_line": 564,
        "end_line": 582,
        "comment": "",
        "is_bug": false
    }
]